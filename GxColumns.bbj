rem /**
rem  * The package exports all the required classes to create new columns and column groups
rem  */
rem package GxColumns
rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use java.util.Arrays
use java.util.ArrayList
use java.util.HashMap
use java.util.TreeMap
use java.util.LinkedHashMap
use java.util.HashSet
use java.sql.Types
use com.google.gson.Gson
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use com.google.gson.JsonParser
use com.basiscomponents.db.DataField
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
rem GxFilters
rem =========================
use ::BBjGridExWidget/GxFilters.bbj::GxFilterInterface
use ::BBjGridExWidget/GxFilters.bbj::GxFilterText
use ::BBjGridExWidget/GxFilters.bbj::GxFilterNumber
use ::BBjGridExWidget/GxFilters.bbj::GxFilterBasicBoolean
use ::BBjGridExWidget/GxFilters.bbj::GxFilterBasicDate
use ::BBjGridExWidget/GxFilters.bbj::GxFilterBasicTime
use ::BBjGridExWidget/GxFilters.bbj::GxFilterBasicTimestamp
rem GxExpressions
rem ==========================
use ::BBjGridExWidget/GxExpressions.bbj::GxExpressionInterface
use ::BBjGridExWidget/GxExpressions.bbj::GxExpression
use ::BBjGridExWidget/GxExpressions.bbj::GxExpressionNumbersFormatter
use ::BBjGridExWidget/GxExpressions.bbj::GxExpressionStringsFormatter
use ::BBjGridExWidget/GxExpressions.bbj::GxExpressionDateTimesFormatter
rem GxRenderers
rem =========================
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererInterface
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererBoolean
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererGroupCellRenderer
rem GxCellEditors
rem ==========================
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorInterface
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorBasicText
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorLargeText
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorBasicBoolean
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorBasicNumber
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorBasicDate
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorBasicTime
use ::BBjGridExWidget/GxCellEditors.bbj::GxCellEditorBasicTimestamp
REM /**
REM  * The class holds the common props between column and column groups.
rem  * Every property and method has one or more tag attached.
rem  *
rem  * The following is the meaning for each tag :<br><br>
rem  *
rem  *
rem  * <table border="1" cellpadding="10">
rem  *  <tbody>
rem  *      <tr>
rem  *          <td><strong>&nbsp;Enterprise</strong></td>
rem  *          <td>The property/method is used only with the enterprise version&#183; using it without having a valid license will<br />be ignored&#183;</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td>&nbsp;<strong>Configuration</strong></td>
rem  *          <td>Properties and methods which are tagged with&nbsp;this tag are used to configure the grid before it is rendered on the client&#183;<br />Changing these properties or calling these methods won't affect&nbsp;the grid which is displayed on the client&#183;<br />In order to reflect your changes on the client, you need to re-render the whole grid <br />or re-render the column definition once again&#183;</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td>&nbsp;<strong>API</strong></td>
rem  *          <td>Methods/properties tagged with this tag can be called before or after the grid is rendered on the client and they don't require a refresh&#183;</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td><strong>&nbsp;ColumnsRenderer</strong></td>
rem  *          <td>Changing this property or calling this method after the first render require columns re-render using <i>updateColumns()</i> method</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td><strong>&nbsp;GridRenderer</strong></td>
rem  *          <td>Changing this property or calling this method after the first render require full re-render using <i>render()</i> method</td>
rem  *      </tr>
rem  *  </tbody>
rem  * </table>
rem  *
REM  * @author Hyyan Abo Fakher
REM  */
class public GxColumnDefinition
    rem /**
    rem  * The name to render in the column header.
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjString Label! = null()
    rem /**
    rem  * Whether to show the column when the group is open / closed&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @see COLUMN_GROUP_CLOSED()
    rem  * @see COLUMN_GROUP_OPENED()
    rem  */
    field public BBjString ColumnGroupShow! = null()
    rem /**
    rem  * CSS class(es) to use for the header cell&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public ArrayList HeaderClass! = new ArrayList()
    rem /**
    rem  * CSS class(es) to use for the tool panel cell&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public ArrayList ToolPanelClass! = new ArrayList()
    rem /**
    rem  * Tooltip for the column header
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjString HeaderTooltip! = null()    
    rem /**
    rem  * Set to true if you do not want this column or group to appear in the tool panel&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber SuppressToolPanel! = null()
    rem /**
    rem  * A constant which defines the group state as opened
    rem  *
    rem  * @return BBjString <b>opened</b>
    rem  */
    method public static BBjString COLUMN_GROUP_OPENED()
        methodret "open"
    methodend
    rem /**
    rem  * A constant which defines the group state as opened
    rem  *
    rem  * @return BBjString <b>opened</b>
    rem  */
    method public static BBjString COLUMN_GROUP_CLOSED()
        methodret "closed"
    methodend
    rem /**
    rem  * Convert the definition to Json Object
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject json!

        json! = new JsonObject()
        json!.addProperty("headerName" , #getLabel(),err=*next)
        json!.addProperty("columnGroupShow" , #getColumnGroupShow() ,err=*next)
        json!.addProperty("headerClass" , iff(#getHeaderClass().size() <> 0 ,new Gson().toJson(#getHeaderClass()), listIsEmpty!) ,err=*next)
        json!.addProperty("toolPanelClass" , iff(#getToolPanelClass().size() <> 0 ,new Gson().toJson(#getToolPanelClass()) ,listIsEmpty!) ,err=*next)
        json!.addProperty("suppressToolPanel" , #getSuppressToolPanel().booleanValue() ,err=*next)
        json!.addProperty("headerTooltip",#getHeaderTooltip(),err=*next)
        methodret json!
    methodend

classend
rem /**
rem  * The class represents the default column definition which the grid will use.
rem  *
REM  * @author Hyyan Abo Fakher
rem  */
class public GxDefaultColumnDefinition extends GxColumnDefinition
    rem /**
    rem  * The Field Type&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * <b>Note :</b> Not all sql types are supported, for example it does not make sense to declare a colum type as STRUCT&#183;
    rem  *
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  */
    field public BBjNumber Type! = 12
    rem /**
    rem  * Initial width in pixels
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  * <br><br>
    rem  * <b>Note:</b> setting the width to zero will not hide the column, use <b>setHidden()</b> instead&#183; And if the width is null()
    rem  * this means the grid will auto set the width for this column
    rem  *
    rem  * @see setHidden()
    rem  */
    field public BBjNumber Width! = null()
    rem /**
    rem  * Initial min width in pixels
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber MinWidth! = null()
    rem /**
    rem  * Initial max width in pixels
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber MaxWidth! = null()
    rem /**
    rem  * The filter component to use for this column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public GxFilterInterface Filter! = new GxFilterText()
    rem /**
    rem  * When true the filter is enabled, disabled otherwise
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber EnableFilter! = 1
    rem /**
    rem  * Set to true to make a column hidden by default&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber Hidden! = 0
    rem /**
    rem  * Set to 'left' or 'right' to pin&#183;
    rem  *
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @see PINNED_LEFT()
    rem  * @see PINNED_RIGHT()
    rem  */
    field public BBjString Pinned! = null()
    rem /**
    rem  * Set to true to always have column displayed first&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber LockPosition! = null()
    rem /**
    rem  * Set to true block making column visible / hidden via the UI (API will still work)&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber LockVisible! = null()
    rem /**
    rem  * Set to true block pinning column via the UI (API will still work)&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber LockPinned! = null()
    rem /**
    rem  * Set to true to allow sorting on this column&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber Sortable! = 1
    rem /**
    rem  * Set to 'asc' or 'desc' to sort by this column by default&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @see SORT_DESC()
    rem  * @see SORT_ASC()
    rem  */
    field public BBjString Sort! = null()
    rem /**
    rem  * Set to true to allow column to be resized&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber Resizable! = 1
    rem /**
    rem  * Set to true to render a selection checkbox in the column&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber CheckboxSelection! = null()
    rem /**
    rem  * Set to true to render a selection checkbox in the column's header&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber HeaderCheckboxSelection! = null()
    rem /**
    rem  * CSS class(es) to use for the cell&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public ArrayList CellClass! = new ArrayList()
    rem /**
    rem  * A map of css values&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public JsonObject CellStyle! = new JsonObject()
    rem /**
    rem  * Set to true if the column is editable, otherwise false&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber Editable! = 0
    rem /**
    rem  * A cellRenderer to use for this column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public GxRendererInterface CellRenderer! = null()
    rem /**
    rem  * CellEditor to use for this column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public GxCellEditorInterface CellEditor! = new GxCellEditorBasicText()
    rem /**
    rem  * Name of function to use for aggregation&#183; One of [sum,min,max,first,last]&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjString AggFunc! = null()
    rem /**
    rem  * Aggregation functions allowed on this column eg ['sum','avg']&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public HashSet AllowedAggFuncs! = new HashSet()
    rem /**
    rem  * Set this in columns you want to group by&#183; If only grouping by one column, set this to any number (eg 0)&#183; If grouping by multiple columns, set this to where you want this column to be in the group (eg 0 for first, 1 for second, and so on)&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber RowGroupIndex! = null()
    rem /**
    rem  * Set this in columns you want to pivot by&#183; If only pivoting by one column, set this to any number (eg 0)&#183; If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (eg 0 for first, 1 for second, and so on)&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber PivotIndex! = null()
    rem /**
    rem  * Set to true if you want the unsorted icon to be shown when no sort is applied to this column&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber UnSortIcon! = 0
    rem /**
    rem  * Set to true if you want to be able to row group by this column via the UI&#183;
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber EnableRowGroup! = 1
    rem /**
    rem  * Set to true To group rows by this column
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @see Gx&#183;Columns&#183;EnableRowGroup!
    rem  */
    field public BBjNumber RowGroup! = 0
    rem /**
    rem  * Set to true if you want to be able to pivot by this column via the UI&#183;
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber EnablePivot! = 1
    rem /**
    rem  * Set to true if you want to be able to aggregate by this column via the UI&#183;
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber EnableValue! = 1
    rem /**
    rem  * Set to true if no menu should be shown for this column header&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber SuppressMenu! = 0
    rem /**
    rem  * Set to true if you want this columns width to be fixed during 'size to fit' operation&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber SuppressSizeToFit! = 0
    rem /**
    rem  * Set to true if you do not want this column to be movable via dragging&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber SuppressMovable! = 0
    rem /**
    rem  * Set to true if this col is not navigable (ie cannot be tabbed into), otherwise false&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber SuppressNavigable! = 0
    rem /**
    rem  * Set to true to have the grid calculate height of row based on contents of this column&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjNumber AutoHeight! = 0
    rem /**
    rem  * Rules which can be applied to include certain CSS classes&#183; These rules are provided as a map
    rem  * where the keys are the class names and the values are expressions that if evaluated to true, the class gets used&#183;
    rem  * An expression is evaluated by the grid by executing the string as if it were a Javascript expression&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  * <br><br>
    rem  * The expression has the following attributes available to it&#183; <br><br>
    rem  * <table border="1" cellpadding="10">
    rem  *    <tbody>
    rem  *        <tr>
    rem  *            <td><strong>&nbsp;x</strong></td>
    rem  *            <td>&nbsp;Mapped from cell value</td>
    rem  *        </tr>
    rem  *        <tr>
    rem  *            <td><strong>&nbsp;rowIndex</strong></td>
    rem  *            <td>&nbsp;Maps the current row index</td>
    rem  *        </tr>
    rem  *        <tr>
    rem  *            <td>&nbsp;<strong>data</strong></td>
    rem  *            <td>&nbsp;Mapped from the DataRow</td>
    rem  *        </tr>
    rem  *        <tr>
    rem  *            <td>&nbsp;<strong>ctx</strong></td>
    rem  *            <td>&nbsp;The grid client context</td>
    rem  *        </tr>
    rem  *    </tbody>
    rem  * </table>
    rem  */
    field public JsonObject CellClassRules! = new JsonObject()
    rem /**
    rem  * An Ag Grid expression which can be executed before getting the value from your data for display
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  *
    rem  * @see Gx&#183;Expression&#183;GxExpression
    rem  */
    field public GxExpressionInterface ValueGetterExpression! = null()
    rem /**
    rem  * An Ag Grid expression which can be executed to format the value for display&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  *
    rem  * @see Gx&#183;Expression&#183;GxExpression
    rem  */
    field public GxExpressionInterface ValueFormatterExpression! = null()
    rem /**
    rem  * An Ag Grid expression which can be executed to get the value for filtering purposes&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  *
    rem  * @see Gx&#183;Expression&#183;GxExpression
    rem  */
    field public GxExpressionInterface FilterValueGetterExpression! = null()
    rem /**
    rem  * An Ag Grid expression which can be executed before setting the value into your data for saving&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  *
    rem  * @see Gx&#183;Expression&#183;GxExpression
    rem  */
    field public GxExpressionInterface ValueSetterExpression! = null()
    rem /**
    rem  * An Ag Grid expression which can be executed to parse the value for saving&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  *
    rem  * @see Gx&#183;Expression&#183;GxExpression
    rem  */
    field public GxExpressionInterface ValueParserExpression! = null()
    rem /**
    rem  * The default numbers mask to use&#183; by default null()
    rem  */
    field public BBjString DefaultNumbersMask! = null()
    rem /**
    rem  * The default strings  mask to use&#183; by default null()
    rem  */
    field public BBjString DefaultStringsMask! = null()
    rem /**
    rem  * The default dates mask to use&#183; by default <b>%Dz&#183;%Mz&#183;%Yd</b>
    rem  */
    field public BBjString DefaultDatesMask! = "%Yd-%Mz-%Dz"
    rem /**
    rem  * The default dates mask to use&#183; by default <b>%Dz&#183;%Hz:%mz:%sz</b>
    rem  */
    field public BBjString DefaultTimesMask! = "%Hz:%mz:%sz"
    rem /**
    rem  * The default timestamps mask to use&#183; by default <b>%Dz&#183;%Mz&#183;%Yl %Hz:%mz:%sz</b>
    rem  */
    field public BBjString DefaultTimestampsMask! = "%Yd-%Mz-%Dz %Hz:%mz:%sz"
    rem /**
    rem  * Icons to use inside the column instead of the grid's default icons&#183;
    rem  *
    rem  * The icons can either be set on the grid options (all icons) or on the column definition (all except group)&#183;
    rem  * If defined in both the grid options and column definitions, the column definition will get used&#183;
    rem  * This allows you to specify defaults in the grid options to fall back on, and then provide individual icons for
    rem  * specific columns&#183; This is handy if, for example, you want to include 'A&#183;&#183;Z' as string sort icons
    rem  * and just the simple arrow for other columns&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  *
    rem  * The icons are set as follows:
    rem  * <pre>
    rem  * <code>
    rem *      // column header items
    rem *      menu
    rem *      filter
    rem *      columns
    rem *      sortAscending
    rem *      sortDescending
    rem *      sortUnSort
    rem *
    rem *      // row checkbox selection and tool panel column selection
    rem *      checkboxChecked
    rem *      checkboxUnchecked
    rem *      checkboxIndeterminate
    rem *
    rem *      // tool panel column selection, when read only (ie disabled checkboxes)
    rem *      checkboxCheckedReadOnly
    rem *      checkboxUncheckedReadOnly
    rem *      checkboxIndeterminateReadOnly
    rem *
    rem *      // when moving columns
    rem *      columnMovePin // when column is to the left, before it gets pinned
    rem *      columnMoveAdd // when adding a column
    rem *      columnMoveHide // when removing a column
    rem *      columnMoveMove // when moving a column
    rem *      columnMoveLeft // when moving and scrolling left
    rem *      columnMoveRight // when moving and scrolling right
    rem *      columnMoveGroup // when about to drop into group panel
    rem *      columnMoveValue // when about to drop into value panel
    rem *      columnMovePivot // when about to drop into pivot panel
    rem *      dropNotAllowed // when trying to drop column into group/value/pivot panel and column doesn't support it
    rem *
    rem *      // menu
    rem *      menuPin // beside the column pin menu item
    rem *      menuValue // beside the column value menu item
    rem *      menuAddRowGroup // beside the column row group menu item
    rem *      menuRemoveRowGroup // beside the column row group menu item
    rem *      clipboardCopy // beside the copy to clipboard menu item
    rem *      clipboardPaste // beside the paste from clipboard menu item
    rem *
    rem *      // column drop panels
    rem *      pivotPanel // beside where to drop columns for pivot
    rem *      valuePanel // beside where to drop columns for value
    rem  * </code>
    rem  * </pre>
    rem  */
    field public JsonObject Icons! = new JsonObject()
    rem /**
    rem  * Defines the chart data type that should be used for a column&#183;
    rem  * There are two types of charting ranges; a category range that is highlighted in green and a series range that is
    rem  * highlighted in blue&#183;
    rem  * A category range can only contain cells from a single column, whereas a series range can contain
    rem  * values from many columns&#183;
    rem  * Columns can be explicitly configured or left for the grid to infer the type based on the data contained in the cells
    rem  * where columns containing string values will map to 'categories' and columns containing number values will map to 'series'
    rem  * charting columns&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>.
    rem  */
    field public BBjString ChartType! = null()
    rem /**
    rem  * The field of the tooltip to apply to the cell.
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */
    field public BBjString TooltipField! = null()      
    rem /**
    rem  * Get pinned left constant
    rem  *
    rem  * @return BBjString <b>left</b>
    rem  */
    method public static BBjString PINNED_LEFT()
        methodret "left"
    methodend
    rem /**
    rem  * Get pinned right constant
    rem  *
    rem  * @return BBjString <b>right</b>
    rem  */
    method public static BBjString PINNED_RIGHT()
        methodret "right"
    methodend
    rem /**
    rem  * Get sort direction constant
    rem  *
    rem  * @return BBjString <b>desc</b>
    rem  */
    method public static BBjString SORT_DESC()
        methodret "desc"
    methodend
    rem /**
    rem  * Get sort direction constant
    rem  *
    rem  * @return BBjString <b>asc</b>
    rem  */
    method public static BBjString SORT_ASC()
        methodret "asc"
    methodend
    rem /**
    rem  * A constant which defines the group state as opened
    rem  *
    rem  * @return BBjString <b>opened</b>
    rem  */
    method public static BBjString COLUMN_GROUP_OPENED()
        methodret "open"
    methodend
    rem /**
    rem  * A constant which defines the group state as opened
    rem  *
    rem  * @return BBjString <b>opened</b>
    rem  */
    method public static BBjString COLUMN_GROUP_CLOSED()
        methodret "closed"
    methodend
    rem /**
    rem  * A constant which defines column chart category
    rem  *
    rem  * @return BBjString <b>category</b>
    rem  */
    method public static BBjString CHART_TYPE_CATEGORY()
        methodret "category"
    methodend
    rem /**
    rem  * A constant which defines column chart series
    rem  *
    rem  * @return BBjString <b>series</b>
    rem  */
    method public static BBjString CHART_TYPE_SERIES()
        methodret "series"
    methodend
    rem /**
    rem  * A constant which defines column chart excluded, columns which set chart type to excluded will be excluded from charts
    rem  *
    rem  * @return BBjString <b>excluded</b>
    rem  */
    method public static BBjString CHART_TYPE_EXCLUDED()
        methodret "excluded"
    methodend
    rem /**
    rem  * Create a GxExpression from string and set it as value getter
    rem  *
    rem  * @param BBjString expression! Javascript expression
    rem  */
    method public void setValueGetterExpression(BBjString expression!)
        #ValueGetterExpression! = new GxExpression(expression!)
    methodend
    rem /**
    rem  * Create a GxExpression from string and set it as value setter
    rem  *
    rem  * @param BBjString expression! Javascript expression
    rem  */
    method public void setValueSetterExpression(BBjString expression!)
        #ValueSetterExpression! = new GxExpression(expression!)
    methodend
    rem /**
    rem  * Create a GxExpression from string and set it as value formatter
    rem  *
    rem  * @param BBjString expression! Javascript expression
    rem  */
    method public void setValueFormatterExpression(BBjString expression!)
        #ValueFormatterExpression! = new GxExpression(expression!)
    methodend
    rem /**
    rem  * Create a GxExpression from string and set it as value parser
    rem  *
    rem  * @param BBjString expression! Javascript expression
    rem  */
    method public void setValueParserExpression(BBjString expression!)
        #ValueParserExpression! = new GxExpression(expression!)
    methodend
    rem /**
    rem  * Set the allowd aggregation functions allowed on this column
    rem  *
    rem  * @param BBjString funcs! comma separated functinos
    rem  */
    method public void setAllowedAggFuncs(BBjString funcs!)
        #AllowedAggFuncs!.addAll(Arrays.asList(funcs!.replaceAll(" ","").split(",")))
    methodend
    rem /**
    rem  * Sets the foreground color for a column
    rem  *
    rem  * @param BBjColor color!  the color for the column
    rem  */
    method public void setForeColor(BBjColor color!)
        #getCellStyle().addProperty("color" ,  BBjGridExWidget.makeHexColor(color!))
    methodend
    rem /**
    rem  * Sets the foreground color for a column
    rem  *
    rem  * @param BBjString color$ Valid CSS color
    rem  *
    rem  * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
    rem  */
    method public void setForeColor(BBjString color!)
        #getCellStyle().addProperty("color" ,  color!)
    methodend
    rem /**
    rem  * Sets the background color of a column
    rem  *
    rem  * @param BBjColor color!  The color for the column
    rem  */
    method public void setBackColor(BBjColor color!)
        #getCellStyle().addProperty("background-color" ,  BBjGridExWidget.makeHexColor(color!))
    methodend
    rem /**
    rem  * Sets the background color of a column
    rem  *
    rem  * @param BBjColor color$  Valid CSS color
    rem  *
    rem  * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
    rem  */
    method public void setBackColor(BBjString color!)
        #getCellStyle().addProperty("background-color" ,  color!)
    methodend
    rem /**
    rem  * Sets the default alignment for a column
    rem  *
    rem  * @param BBjNumber align! The column alignment
    rem  * @param BBjNumber alignHeader! when true the column's header will use the same alignment
    rem  *
    rem  * valid alignments:
    rem  *
    rem  * @see BBjGridExWidget.GRID_ALIGN_LEFT()
    rem  * @see BBjGridExWidget.GRID_ALIGN_CENTER()
    rem  * @see BBjGridExWidget.GRID_ALIGN_RIGHT()
    rem  */
    method public void setAlignment(BBjNumber align! , BBjNumber alignHeader!)
        switch align!
            case BBjGridExWidget.GRID_ALIGN_LEFT()
                #getCellClass().remove("gw-alignment-cell-left")

                if alignHeader! = 1
                    #setHeaderAlignment(align!)
                FI

                break
            case BBjGridExWidget.GRID_ALIGN_CENTER()
                #getCellClass().add("gw-alignment-cell-center")

                if alignHeader! = 1
                    #setHeaderAlignment(align!)
                FI

                break
            case BBjGridExWidget.GRID_ALIGN_RIGHT()
                #getCellClass().add("gw-alignment-cell-right")

                if alignHeader! = 1
                    #setHeaderAlignment(align!)
                FI

                break
        swend
    methodend
    rem /**
    rem  * Sets the default alignment for a column
    rem  *
    rem  * @param BBjNumber align! The column alignment
    rem  *
    rem  * valid alignments:
    rem  *
    rem  * @see BBjGridExWidget.GRID_ALIGN_LEFT()
    rem  * @see BBjGridExWidget.GRID_ALIGN_CENTER()
    rem  * @see BBjGridExWidget.GRID_ALIGN_RIGHT()
    rem  *
    rem  * @RequiresRefresh
    rem  */
    method public void setAlignment(BBjNumber align!)
        #setAlignment(align! , 0)
    methodend
    rem /**
    rem  * Sets the default alignment for a column's header
    rem  *
    rem  * @param BBjNumber align! The column's header alignment
    rem  *
    rem  * valid alignments:
    rem  *
    rem  * @see BBjGridExWidget.GRID_ALIGN_LEFT()
    rem  * @see BBjGridExWidget.GRID_ALIGN_CENTER()
    rem  * @see BBjGridExWidget.GRID_ALIGN_RIGHT()
    rem  */
    method public void setHeaderAlignment(BBjNumber align!)
        switch align!
            case BBjGridExWidget.GRID_ALIGN_LEFT()
                #getHeaderClass().remove("gw-alignment-header-left")
                break
            case BBjGridExWidget.GRID_ALIGN_CENTER()
                #getHeaderClass().add("gw-alignment-header-center")
                break
            case BBjGridExWidget.GRID_ALIGN_RIGHT()
                #getHeaderClass().add("gw-alignment-header-right")
                break
        swend
    methodend
    rem /**
    rem  * Set the mask of a column in all supported components (filters , cell editors , ...)
    rem  *
    rem  * In case the column has no value formatter expression , then the method will create one
    rem  *
    rem  * @param mask! - The BBj (date , numeric or string) mask
    rem  */
    method public void setColumnMask(BBjString mask!)
        rem update filter mask
        filter! = #getFilter()
        filter!.setMask(mask!,err=*next)
        rem update cell renderer mask
        cellRenderer! = #getCellRenderer()
        cellRenderer!.setMask(mask!,err=*next)
        rem update cell editor mask
        cellEditor! = #getCellEditor()
        cellEditor!.setMask(mask!,err=*next)
        rem update value formatter mask
        valueFormatter! = #getValueFormatterExpression()

        if(valueFormatter! <> null())
            valueFormatter!.setMask(mask!,err=*next)
        else
            SWITCH #getType()
                CASE Types.BIGINT
                CASE Types.TINYINT
                CASE Types.SMALLINT
                CASE Types.INTEGER
                CASE Types.DECIMAL
                CASE Types.DOUBLE
                CASE Types.FLOAT
                CASE Types.REAL
                CASE Types.NUMERIC
                    #setValueFormatterExpression(new GxExpressionNumbersFormatter(mask!))
                    BREAK
                CASE Types.DATE
                    #setValueFormatterExpression(new GxExpressionDateTimesFormatter(mask!))
                    BREAK
                CASE Types.TIME
                CASE Types.TIME_WITH_TIMEZONE
                    #setValueFormatterExpression(new GxExpressionDateTimesFormatter(mask!))
                    BREAK
                CASE Types.TIMESTAMP
                CASE Types.TIMESTAMP_WITH_TIMEZONE
                    #setValueFormatterExpression(new GxExpressionDateTimesFormatter(mask!))
                    BREAK
                CASE Types.CHAR
                CASE Types.VARCHAR
                CASE Types.NVARCHAR
                CASE Types.NCHAR
                CASE Types.LONGVARCHAR
                CASE Types.LONGNVARCHAR
                CASE default
                    #setValueFormatterExpression(new GxExpressionStringsFormatter(mask!))
                    BREAK
            SWEND
        FI
    methodend
    rem /**
    rem  * Set the grid icons
    rem  *
    rem  * @param BBjString json! The icons as a json object
    rem  */
    method public void setIcons(BBjString json!)
        declare JsonParser parser!

        parser! = new JsonParser()
        #setIcons(parser!.parse(json!).getAsJsonObject())
    methodend
    rem /**
    rem  * Set the column type
    rem  *
    rem  * @param BBjString type! SQL type
    rem  *
    rem  * <b>Note :</b>
    rem  * Not all sql types are supported, for example it does not make sense to declare a colum type as STRUCT.
    rem  * Setting the type will change the column common properties automatically like the filter, cell editor, ....
    rem  *
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  */
    method public void setType(BBjNumber type!)
        #Type! = type!
        SWITCH (type!)
            CASE Types.BIGINT
            CASE Types.TINYINT
            CASE Types.SMALLINT
            CASE Types.INTEGER
            CASE Types.DECIMAL
            CASE Types.DOUBLE
            CASE Types.FLOAT
            CASE Types.REAL
            CASE Types.NUMERIC
                #setFilter(new GxFilterNumber())
                #setValueFormatterExpression(new GxExpressionNumbersFormatter(#getDefaultNumbersMask()))
                rem #setCellEditor(new GxCellEditorBasicNumber(#getDefaultNumbersMask()))
                #setCellEditor(new GxCellEditorBasicNumber())
                BREAK
            CASE Types.DATE
                #setFilter(new GxFilterBasicDate(#getDefaultDatesMask()))
                #setValueFormatterExpression(new GxExpressionDateTimesFormatter(#getDefaultDatesMask()))
                #setCellEditor(new GxCellEditorBasicDate(#getDefaultDatesMask()))
                BREAK
            CASE Types.TIME
            CASE Types.TIME_WITH_TIMEZONE
                #setFilter(new GxFilterBasicTime(#getDefaultTimesMask()))
                #setValueFormatterExpression(new GxExpressionDateTimesFormatter(#getDefaultTimesMask()))
                #setCellEditor(new GxCellEditorBasicTime(#getDefaultTimesMask()))
                BREAK
            CASE Types.TIMESTAMP
            CASE Types.TIMESTAMP_WITH_TIMEZONE
                #setFilter(new GxFilterBasicTimestamp(#getDefaultTimestampsMask()))
                #setValueFormatterExpression(new GxExpressionDateTimesFormatter(#getDefaultTimestampsMask()))
                #setCellEditor(new GxCellEditorBasicTimestamp(#getDefaultTimestampsMask()))
                BREAK
            CASE Types.BOOLEAN
            CASE Types.BIT
                #setFilter(new GxFilterBasicBoolean())
                #setCellRenderer(new GxRendererBoolean())
                #setCellEditor(new GxCellEditorBasicBoolean())
                BREAK
            CASE Types.CHAR
            CASE Types.VARCHAR
            CASE Types.NVARCHAR
            CASE Types.NCHAR
            CASE Types.LONGVARCHAR
            CASE Types.LONGNVARCHAR
            CASE default
                #setFilter(new GxFilterText())
                #setValueFormatterExpression(new GxExpressionStringsFormatter(#getDefaultStringsMask()))

                if(type! = Types.LONGVARCHAR OR type! = Types.LONGNVARCHAR )
                    #setCellEditor(new GxCellEditorLargeText())
                else
                    #setCellEditor(new GxCellEditorBasicText(#getDefaultStringsMask()))
                FI

                BREAK
        SWEND
    methodend
    rem /**
    rem  * @override
    rem  *
    rem  * {@inheritDoc}
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject column!

        column! = #super!.getAsJsonObject()
        column!.addProperty("width",#getWidth().longValue(),err=*next)
        column!.addProperty("minWidth",#getMinWidth().longValue(),err=*next)
        column!.addProperty("maxWidth",#getMaxWidth().longValue(),err=*next)
        column!.addProperty("hide",#getHidden().booleanValue(),err=*next)
        column!.addProperty("pinned",#getPinned(),err=*next)
        column!.addProperty("lockPosition",#getLockPosition().longValue(),err=*next)
        column!.addProperty("lockVisible",#getLockVisible().longValue(),err=*next)
        column!.addProperty("lockPinned",#getLockPinned().longValue(),err=*next)
        column!.addProperty("sortable",#getSortable().booleanValue(),err=*next)
        column!.addProperty("sort",#getSort(),err=*next)
        column!.addProperty("resizable",#getResizable().booleanValue(),err=*next)
        column!.addProperty("checkboxSelection",#getCheckboxSelection().booleanValue(),err=*next)
        column!.addProperty("headerCheckboxSelection",#getHeaderCheckboxSelection().booleanValue(),err=*next)
        column!.addProperty("cellClass" , iff(#getCellClass().size() <> 0 ,new Gson().toJson(#getCellClass()), listIsEmpty!) ,err=*next)
        column!.        add("cellStyle", iff(#getCellStyle().entrySet().size() <> 0 , #getCellStyle() , listIsEmpty!),err=*next)
        column!.addProperty("editable",#getEditable().booleanValue(),err=*next)
        column!.addProperty("aggFunc",#getAggFunc())
        column!.addProperty("allowedAggFuncs" , iff(#getAllowedAggFuncs().size() <> 0 ,new Gson().toJson(#getAllowedAggFuncs()), null()) ,err=*next)
        column!.addProperty("rowGroupIndex",#getRowGroupIndex().longValue(),err=*next)
        column!.addProperty("pivotIndex",#getPivotIndex().longValue(),err=*next)
        column!.addProperty("unSortIcon",#getUnSortIcon().booleanValue(),err=*next)
        column!.addProperty("enableRowGroup",#getEnableRowGroup().booleanValue(),err=*next)
        column!.addProperty("rowGroup",#getRowGroup().booleanValue(),err=*next)
        column!.addProperty("enablePivot",#getEnablePivot().booleanValue(),err=*next)
        column!.addProperty("enableValue",#getEnableValue().booleanValue(),err=*next)
        column!.addProperty("suppressMenu",#getSuppressMenu().booleanValue(),err=*next)
        column!.addProperty("suppressSizeToFit",#getSuppressSizeToFit().booleanValue(),err=*next)
        column!.addProperty("suppressMovable",#getSuppressMovable().booleanValue(),err=*next)
        column!.addProperty("suppressNavigable",#getSuppressNavigable().booleanValue(),err=*next)
        column!.addProperty("autoHeight",#getAutoHeight().booleanValue(),err=*next)
        column!.        add("cellClassRules", iff(#getCellClassRules().entrySet().size() <> 0 , #getCellClassRules() , null()),err=*next)
        column!.addProperty("valueGetter",#getValueGetterExpression().toString(),err=*next)
        column!.addProperty("valueFormatter",#getValueFormatterExpression().toString(),err=*next)
        column!.addProperty("filterValueGetter",#getFilterValueGetterExpression().toString(),err=*next)
        column!.addProperty("valueSetter",#getValueSetterExpression().toString(),err=*next)
        column!.addProperty("valueParser",#getValueParserExpression().toString(),err=*next)
        column!.        add("icons",iff(#getIcons().entrySet().size() <> 0 , #getIcons() , null()),err=*next)
        column!.addProperty("chartDataType",#getChartType(),err=*next)
        column!.addProperty("tooltipField",#getTooltipField(),err=*next)
        filterEnabled! = #getEnableFilter()
        filter! = #getFilter()

        if(( filterEnabled! <> null() and filterEnabled! = 1) and (filter! <> null())) then
            filterParams! = filter!.getAsJsonObject()
            column!.addProperty("filter", filter!.getFilterName() ,err=*next)
            column!.        add("filterParams",iff(filterParams!.entrySet().size() <> 0 , filterParams!, null() ),err=*next)
        else
            column!.addProperty("filter", 0)
        FI

        renderer! = #getCellRenderer()

        if(renderer! <> null()) then
            rendererParams! = renderer!.getAsJsonObject()
            column!.addProperty("cellRenderer", renderer!.getCellRendererName(),err=*next)
            column!.        add("cellRendererParams",iff(rendererParams!.entrySet().size() <> 0 , rendererParams! , null() ),err=*next)
        FI

        editor! = #getCellEditor()

        if(editor! <> null()) then
            editorParams! = editor!.getAsJsonObject()
            column!.addProperty("cellEditor", editor!.getCellEditorName(),err=*next)
            column!.        add("cellEditorParams",iff(editorParams!.entrySet().size() <> 0 , editorParams! , null() ),err=*next)
        FI

        methodret column!
    methodend

classend
REM /**
REM  * The class holds the grid column props, it also introduces several helper methods to update the
REM  * styles like, fore/back colors.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public GxColumn extends GxDefaultColumnDefinition
    rem /**
    rem  * The field of the row to get the cells data from<br><b>Note</b>: Once the field name is set, it becomes immutable
    rem  */
    field public BBjString Field!
    rem /**
    rem  * Disable default constructor
    rem  */
    method private GxColumn()
    methodend
    rem /**
    rem  * Create a new column definition
    rem  *
    rem  * @param BBjString field! The field of the row to get the cells data from
    rem  */
    method public GxColumn(BBjString field!)
        #Field! = field!
        #setLabel(field!)
        rem we reset the following properties so they can be inherited from the default column definition
        #setHidden(null())
        #setEnableFilter(null())
        #setSortable(null())
        #setResizable(null())
        #setEditable(null())
        #setUnSortIcon(null())
        #setRowGroup(null())
        #setSuppressMenu(null())
        #setSuppressSizeToFit(null())
        #setSuppressNavigable(null())
        #setSuppressMovable(null())
        #setAutoHeight(null())
    methodend
    rem /**
    rem  * Create a new column definition
    rem  *
    rem  * @param BBjString field! The field of the row to get the cells data from
    rem  * @param BBjString label! The name to render in the column header
    rem  */
    method public GxColumn(BBjString field!, BBjString label!)
        #this!(field!)
        #setLabel(label!)
    methodend
    rem /**
    rem  * Create a new column definition
    rem  *
    rem  * @param BBjString field! The field of the row to get the cells data from
    rem  * @param BBjString label! The name to render in the column header
    rem  * @param BBjNumber type! The field's type
    rem  */
    method public GxColumn(BBjString field!, BBjString label! , BBjNumber type!)
        #this!(field! , label!)
        #setType(type!)
    methodend
    rem /**
    rem  * Throw an error when called because the field becomes immutable after
    rem  * the column's definition creation
    rem  */
    method public void setField(BBjString field!)
        throw "Column's Field is immutable" , 151
    methodend
    rem /**
    rem  * @override
    rem  *
    rem  * {@inheritDoc}
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject column!

        column! = #super!.getAsJsonObject()
        column!.addProperty("field",#getField())
        column!.addProperty("colId",#getField())
        methodret column!
    methodend
    rem /**
    rem  * Update the column definition from a meta map
    rem  *
    rem  * @param HashMap meta! The meta map
    rem  * @param GxDefaultColumnDefinition defaultDefinition! The default column definition in the grid
    rem  */
    method public void update(HashMap meta!, GxDefaultColumnDefinition defaultDefinition!)
        rem using a TreeMap with case-insensitive ordering.
        rem This would avoid the need to create a lower-case version of each key
        metaMap! = new TreeMap(String.CASE_INSENSITIVE_ORDER)
        metaMap!.putAll(meta!)
        
        if(!metaMap!.containsKey("columntype"))
            methodret
        FI
        rem sync with default column definition
        #setEnableFilter(defaultDefinition!.getEnableFilter(),err=*next)
        rem define the column type
        if metaMap!.get("columntype").getClass().equals(new java.lang.String().getClass()) then
            type! = Integer.parseInt(cast(String, metaMap!.get("columntype")))
        else
            type! = int(metaMap!.get("columntype"))
        FI

        if(metaMap!.containsKey("mask")) then
            mask! = metaMap!.get("mask")
            SWITCH type!
                CASE Types.BIGINT
                CASE Types.TINYINT
                CASE Types.SMALLINT
                CASE Types.INTEGER
                CASE Types.DECIMAL
                CASE Types.DOUBLE
                CASE Types.FLOAT
                CASE Types.REAL
                CASE Types.NUMERIC
                    #setDefaultNumbersMask(mask!)
                    BREAK
                CASE Types.DATE
                    #setDefaultDatesMask(mask!)
                    BREAK
                CASE Types.TIME
                CASE Types.TIME_WITH_TIMEZONE
                    #setDefaultTimesMask(mask!)
                    BREAK
                CASE Types.TIMESTAMP
                CASE Types.TIMESTAMP_WITH_TIMEZONE
                    #setDefaultTimestampsMask(mask!)
                    BREAK
                CASE Types.CHAR
                CASE Types.VARCHAR
                CASE Types.NVARCHAR
                CASE Types.NCHAR
                CASE Types.LONGVARCHAR
                CASE Types.LONGNVARCHAR
                CASE default
                    #setDefaultStringsMask(mask!)
                    BREAK
            SWEND
        FI
        rem set the column type now
        #setType(type!)
        iterator!   = metaMap!.entrySet().iterator()
        while iterator!.hasNext()
            next!   = iterator!.next()
            key!    = next!.getKey()
            value!  = next!.getValue()
            SWITCH (key!)
                CASE "gw_label"
                CASE "gw_header_name"
                CASE "header_name"
                CASE "label" ; rem common attribute name
                    #setLabel(str(value!))
                    BREAK
                CASE "gw_pinned"
                CASE "pinned"
                    #setPinned(str(value!))
                    BREAK
                CASE "gw_hide"
                CASE "hide"
                CASE "hidden"
                    #setHidden(num(value!))
                    BREAK
                CASE "gw_editable"
                CASE "editable" ; rem common attribute name
                    #setEditable(num(value!))
                    BREAK
                CASE "gw_enable_value"
                CASE "enable_value"
                    #setEnableValue(num(value!))
                    BREAK
                CASE "gw_enable_row_group"
                CASE "enable_row_group"
                    #setEnableRowGroup(num(value!))
                    BREAK
                CASE "gw_row_group_index"
                CASE "row_group_index"
                    #setRowGroupIndex(num(value!))
                    BREAK
                CASE "gw_enable_pivot"
                CASE "enable_pivot"
                    #setEnablePivot(num(value!))
                    BREAK
                CASE "gw_cell_class"
                CASE "cell_class"
                    #setCellClass(str(value!))
                    BREAK
                CASE "gw_value_getter"
                CASE "value_getter"
                    #setValueGetterExpression(str(value!))
                    BREAK
                CASE "gw_value_setter"
                CASE "value_setter"
                    #setValueSetterExpression(str(value!))
                    BREAK
                CASE "gw_agg_func"
                CASE "agg_func"
                    #setAggFunc(str(value!))
                    BREAK
                CASE "gw_allowed_agg_funcs"
                CASE "allowed_agg_funcs"
                    #setAllowedAggFuncs(str(value!))
                    BREAK
                CASE "gw_sortable"
                CASE "sortable"
                    #setSortable(num(value!))
                    BREAK
                CASE "gw_sort"
                CASE "sort"
                    #setSort(str(value!))
                    BREAK
                CASE "gw_resizable"
                CASE "resizable"
                    #setResizable(num(value!))
                    BREAK
                CASE DEFAULT
                    BREAK
            SWEND
        wend
    methodend

classend
REM /**
REM  * Allows specifying the group 'auto column' if you are not happy with the default.
REM  * If grouping, this column def is included as the first column definition in the grid.
REM  * If not grouping, this column is not included.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public GxAutoGroupColumn extends GxDefaultColumnDefinition
    rem /**
    rem  * Construct new instance
    rem  */
    method public GxAutoGroupColumn()
        rem we reset the following properties so they can be inheirted from the default column definition
        #setHidden(null())
        #setEnableFilter(null())
        #setLockPinned(null())
        #setLockPosition(null())
        #setLockVisible(null())
        #setSortable(null())
        #setSortable(null())
        #setResizable(null())
        #setEditable(null())
        #setUnSortIcon(null())
        #setEnableRowGroup(null())
        #setRowGroup(null())
        #setEnablePivot(null())
        #setEnableValue(null())
        #setSuppressMenu(null())
        #setSuppressSizeToFit(null())
        #setSuppressNavigable(null())
        #setSuppressMovable(null())
        #setAutoHeight(null())
        #setCellRenderer(new GxRendererGroupCellRenderer())
    methodend
    rem /**
    rem  * Set the column type
    rem  *
    rem  * @param BBjString type! SQL type
    rem  *
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  */
    method public void setType(BBjNumber type!)
        #Type! = type!
    methodend

classend
rem /**
rem  * The interface defines the common methods for columns and column groups management
rem  *
REM  * @author Hyyan Abo Fakher
rem  */
interface public GxColumnsManagerInterface
    rem /**
    rem  * Add column group
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param GxColumnGroup definition! The column group definition
    rem  */

    method public GxColumnGroup addColumnGroup(GxColumnGroup definition!)
    rem /**
    rem  * Add column group
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString id! The group id
    rem  */

    method public GxColumnGroup addColumnGroup(BBjString id!)
    rem /**
    rem  * Add column group
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString id! The group id
    rem  * @param BBjString label! The group label
    rem  */

    method public GxColumnGroup addColumnGroup(BBjString id! , BBjString label!)
    rem /**
    rem  * Get the column group definition instance
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString id! The column group definition id
    rem  *
    rem  * @return GxColumn return the column group definition instance if found, null() otherwise
    rem  */

    method public GxColumnGroup getColumnGroup(BBjString id!)
    rem /**
    rem  * Check if the column group definition exists
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString id! The column group definition id
    rem  *
    rem  * @return BBjNumber return 1 when found, 0 otherwise
    rem  */

    method public BBjNumber hasColumnGroup(BBjString id!)
    rem /**
    rem  * Remove a column group definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString id! The column group definition id
    rem  *
    rem  * @return GxColumnGroup The removed column group instance, null() otherwise
    rem  */

    method public GxColumnGroup removeColumnGroup(BBjString id!)
    rem /**
    rem  * Add new column definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param GxColumn definition! The column definition object
    rem  *
    rem  * @return GxColumn The definition instance
    rem  */

    method public GxColumn addColumn(GxColumn definition!)
    rem /**
    rem  * Add new column definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  * @param BBjNumber type! The Field Type (java.sql.Types).
    rem  *
    rem  * @return GxColumn The definition instance
    rem  */

    method public GxColumn addColumn(BBjString field! ,BBjNumber type!)
    rem /**
    rem  * Add new column definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  * @param BBjString label! The column's label.
    rem  *
    rem  * @return GxColumn The definition instance
    rem  */

    method public GxColumn addColumn(BBjString field!,BBjString label!)
    rem /**
    rem  * Add new column definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  * @param BBjString label! The column's label.
    rem  * @param BBjNumber type! The Field Type (java.sql.Types).
    rem  *
    rem  * @return GxColumn The definition instance
    rem  */

    method public GxColumn addColumn(BBjString field!, BBjString label! , BBjNumber type!)
    rem /**
    rem  * Add new column definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  *
    rem  * @return GxColumn The definition instance
    rem  */

    method public GxColumn addColumn(BBjString field!)
    rem /**
    rem  * Get the column definition instance
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  *
    rem  * @return GxColumn return the column definition instance if found, null() otherwise
    rem  */

    method public GxColumn getColumn(BBjString field!)
    rem /**
    rem  * Check if the column definition exists
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  *
    rem  * @return BBjNumber return 1 when found, 0 otherwise
    rem  */

    method public BBjNumber hasColumn(BBjString field!)
    rem /**
    rem  * Remove a column definition
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  *
    rem  * @param BBjString field! The column's definition field
    rem  *
    rem  * @return GxColumn The removed column instance, null() otherwise
    rem  */

    method public GxColumn removeColumn(BBjString field!)
    rem /**
    rem  * Clear all columns and column groups
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRenderer</small></b>
    rem  */

    method public void resetAllColumns()

interfaceend
rem /**
rem  * The class is a direct implementation for GxColumnsManagerInterface and it defines the common
rem  * logic for all methods
rem  *
REM  * @author Hyyan Abo Fakher
rem  */
class public GxColumnsManager implements GxColumnsManagerInterface
    rem /**
    rem  * The column definitions map
    rem  */
    field public LinkedHashMap ColumnsDefinition! = new LinkedHashMap()
    rem /**
    rem  * The column groups definitions map
    rem  */
    field public LinkedHashMap ColumnsGroupsDefinition! = new LinkedHashMap()
    rem /**
    rem  * Column & column groups definitions map
    rem  */
    field public LinkedHashMap Columns! = new LinkedHashMap()
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup addColumnGroup(GxColumnGroup definition!)
        id! = definition!.getGroupId()
        #ColumnsGroupsDefinition!.put(id! ,definition!)
        #Columns!.put(id!,definition!)
        methodret definition!
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup addColumnGroup(BBjString id!)
        definition! = new GxColumnGroup(id!)
        methodret #addColumnGroup(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup addColumnGroup(BBjString id! , BBjString label!)
        definition! = new GxColumnGroup(id! , label!)
        methodret #addColumnGroup(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup getColumnGroup(BBjString id!)
        if(!#hasColumnGroup(id!))
            methodret null()
        FI

        methodret cast(GxColumnGroup,#ColumnsGroupsDefinition!.get(id!))
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjNumber hasColumnGroup(BBjString id!)
        if #ColumnsGroupsDefinition!.containsKey(id!) then
            methodret 1
        FI

        methodret 0
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup removeColumnGroup(BBjString id!)
        if #ColumnsGroupsDefinition!.containsKey(id!) then
            group! = #getColumnGroup(id!)
            #ColumnsGroupsDefinition!.remove(id!)
            #Columns!.remove(id!)
            methodret group!
        FI

        methodret null()
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(GxColumn definition!)
        field! = definition!.getField()
        #ColumnsDefinition!.put(field!,definition!)
        #Columns!.put(field!,definition!)
        methodret definition!
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!,BBjNumber type!)
        definition! = new GxColumn(field!, type!)
        methodret #addColumn(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!,BBjString label!)
        definition! = new GxColumn(field! , label!)
        methodret #addColumn(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!, BBjString label! , BBjNumber type!)
        definition! = new GxColumn(field! , label! , type!)
        methodret #addColumn(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!)
        methodret #addColumn(field!,field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn getColumn(BBjString field!)
        if(!#hasColumn(field!))
            methodret null()
        FI

        methodret cast(GxColumn,#ColumnsDefinition!.get(field!))
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjNumber hasColumn(BBjString field!)
        if #ColumnsDefinition!.containsKey(field!) then
            methodret 1
        FI

        methodret 0
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn removeColumn(BBjString field!)
        if #ColumnsDefinition!.containsKey(field!) then
            column! = #getColumn(field!)
            #ColumnsDefinition!.remove(field!)
            #Columns!.remove(field!)
            methodret column!
        FI

        methodret null()
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public void resetAllColumns()
        #ColumnsDefinition!.clear()
        #ColumnsGroupsDefinition!.clear()
        #Columns!.clear()
    methodend

classend
REM /**
REM  * The class holds the default grid column group.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public GxDefaultColumnGroup extends GxColumnDefinition
    rem /**
    rem  * Set to 'true' to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed.
    rem  */
    field public BBjNumber MarryChildren! = 1
    rem /**
    rem  * Set to 'true' if this group should be opened by default.
    rem  */
    field public BBjNumber OpenByDefault! = 1
    rem /**
    rem  * Tooltip for the column group header
    rem  * @deprecated use HeaderToolTip instead
    rem  */
    field public BBjString HeaderGroupTooltip! = null()
    rem /**
    rem  * @override
    rem  *
    rem  * {@inheritDoc}
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject group!

        group! = #super!.getAsJsonObject()
        group!.addProperty("marryChildren",#getMarryChildren().booleanValue(),err=*next)
        group!.addProperty("openByDefault",#getOpenByDefault().booleanValue(),err=*next)
        group!.addProperty("headerTooltip",#getHeaderGroupTooltip(),err=*next)
        methodret group!
    methodend

classend
REM /**
REM  * The class holds the grid column group.
REM  * With this object you can group several columns and several column groups together to create deep nested structure.
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public GxColumnGroup extends GxDefaultColumnGroup implements GxColumnsManagerInterface
    rem /**
    rem  * The unique ID to give the column.
    rem  */
    field public BBjString GroupId! = null()
    rem /**
    rem  * Columns Manager instance
    rem  */
    field protected GxColumnsManager ColumnsManager! = new GxColumnsManager()
    rem /**
    rem  * Disable default constructor
    rem  */
    method private GxColumnGroup()
    methodend
    rem /**
    rem  * Construct new GxColumnGroup
    rem  *
    rem  * @param BBjString id! The group id
    rem  */
    method public GxColumnGroup(BBjString id!)
        #GroupId! = id!
        #setLabel(id!)
    methodend
    rem /**
    rem  * Construct new GxColumnGroup
    rem  *
    rem  * @param BBjString id! The group id
    rem  * @param BBjString label! The group label
    rem  */
    method public GxColumnGroup(BBjString id! , BBjString label!)
        #this!(id!)
        #setLabel(label!)
    methodend
    rem /**
    rem  * Throw an error when called because the group id becomes immutable after
    rem  * the column group's definition creation
    rem  */
    method public void setGroupId()
        throw "Group's ID is immutable" , 151
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup addColumnGroup(GxColumnGroup definition!)
        methodret #ColumnsManager!.addColumnGroup(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup addColumnGroup(BBjString id!)
        methodret #ColumnsManager!.addColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup addColumnGroup(BBjString id! , BBjString label!)
        methodret #ColumnsManager!.addColumnGroup(id!,label!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup getColumnGroup(BBjString id!)
        methodret #ColumnsManager!.getColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjNumber hasColumnGroup(BBjString id!)
        methodret #ColumnsManager!.hasColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumnGroup removeColumnGroup(BBjString id!)
        methodret #ColumnsManager!.removeColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(GxColumn definition!)
        methodret #ColumnsManager!.addColumn(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!,BBjNumber type!)
        methodret #ColumnsManager!.addColumn(field! , type!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!,BBjString label!)
        methodret #ColumnsManager!.addColumn(field! , label!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn addColumn(BBjString field!, BBjString label! , BBjNumber type!)
        methodret #ColumnsManager!.addColumn(field! , label! ,type!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn getColumn(BBjString field!)
        methodret #ColumnsManager!.getColumn(field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjNumber hasColumn(BBjString field!)
        methodret #ColumnsManager!.hasColumn(field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public GxColumn removeColumn(BBjString field!)
        methodret #ColumnsManager!.removeColumn(field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public void resetAllColumns()
        #ColumnsManager!.resetAllColumns()
    methodend
    rem /**
    rem  * @override
    rem  *
    rem  * {@inheritDoc}
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject group!
        declare JsonArray children!

        group! = #super!.getAsJsonObject()
        group!.addProperty("groupId",#getGroupId(),err=*next)
        children! = new JsonArray()
        iterator! = #ColumnsManager!.getColumns().entrySet().iterator()
        WHILE (iterator!.hasNext())
            next! = iterator!.next()
            value! = next!.getValue()
            casted! = 0
            value! = cast(GxColumnGroup , value! , err=*next); casted! = 1

            IF (casted! = 0) THEN
                value! = cast(GxColumn , value!)
            FI

            children!.add(value!.getAsJsonObject())
        WEND

        group!.addProperty("children",children!.toString(),err=*next)
        methodret group!
    methodend

classend