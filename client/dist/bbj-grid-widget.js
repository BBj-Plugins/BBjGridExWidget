(function(e, a) { for(var i in a) e[i] = a[i]; }(window, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/autocompleter/autocomplete.js":
/*!****************************************************!*\
  !*** ./node_modules/autocompleter/autocomplete.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);
})(void 0, function () {
  'use strict';
  /*
   * https://github.com/kraaden/autocomplete
   * Copyright (c) 2016 Denys Krasnoshchok
   * MIT License
   */

  function autocomplete(settings) {
    // just an alias to minimize JS file size
    var doc = document;
    var container = doc.createElement("div");
    var containerStyle = container.style;
    var userAgent = navigator.userAgent;
    var mobileFirefox = userAgent.indexOf("Firefox") !== -1 && userAgent.indexOf("Mobile") !== -1;
    var debounceWaitMs = settings.debounceWaitMs || 0;
    var preventSubmit = settings.preventSubmit || false; // 'keyup' event will not be fired on Mobile Firefox, so we have to use 'input' event instead

    var keyUpEventName = mobileFirefox ? "input" : "keyup";
    var items = [];
    var inputValue = "";
    var minLen = 2;
    var showOnFocus = settings.showOnFocus;
    var selected;
    var keypressCounter = 0;
    var debounceTimer;

    if (settings.minLength !== undefined) {
      minLen = settings.minLength;
    }

    if (!settings.input) {
      throw new Error("input undefined");
    }

    var input = settings.input;
    container.className = "autocomplete " + (settings.className || ""); // IOS implementation for fixed positioning has many bugs, so we will use absolute positioning

    containerStyle.position = "absolute";
    /**
     * Detach the container from DOM
     */

    function detach() {
      var parent = container.parentNode;

      if (parent) {
        parent.removeChild(container);
      }
    }
    /**
     * Clear debouncing timer if assigned
     */


    function clearDebounceTimer() {
      if (debounceTimer) {
        window.clearTimeout(debounceTimer);
      }
    }
    /**
     * Attach the container to DOM
     */


    function attach() {
      if (!container.parentNode) {
        doc.body.appendChild(container);
      }
    }
    /**
     * Check if container for autocomplete is displayed
     */


    function containerDisplayed() {
      return !!container.parentNode;
    }
    /**
     * Clear autocomplete state and hide container
     */


    function clear() {
      // prevent the update call if there are pending AJAX requests
      keypressCounter++;
      items = [];
      inputValue = "";
      selected = undefined;
      detach();
    }
    /**
     * Update autocomplete position
     */


    function updatePosition() {
      if (!containerDisplayed()) {
        return;
      }

      containerStyle.height = "auto";
      containerStyle.width = input.offsetWidth + "px";
      var maxHeight = 0;
      var inputRect;

      function calc() {
        var docEl = doc.documentElement;
        var clientTop = docEl.clientTop || doc.body.clientTop || 0;
        var clientLeft = docEl.clientLeft || doc.body.clientLeft || 0;
        var scrollTop = window.pageYOffset || docEl.scrollTop;
        var scrollLeft = window.pageXOffset || docEl.scrollLeft;
        inputRect = input.getBoundingClientRect();
        var top = inputRect.top + input.offsetHeight + scrollTop - clientTop;
        var left = inputRect.left + scrollLeft - clientLeft;
        containerStyle.top = top + "px";
        containerStyle.left = left + "px";
        maxHeight = window.innerHeight - (inputRect.top + input.offsetHeight);

        if (maxHeight < 0) {
          maxHeight = 0;
        }

        containerStyle.top = top + "px";
        containerStyle.bottom = "";
        containerStyle.left = left + "px";
        containerStyle.maxHeight = maxHeight + "px";
      } // the calc method must be called twice, otherwise the calculation may be wrong on resize event (chrome browser)


      calc();
      calc();

      if (settings.customize && inputRect) {
        settings.customize(input, inputRect, container, maxHeight);
      }
    }
    /**
     * Redraw the autocomplete div element with suggestions
     */


    function update() {
      // delete all children from autocomplete DOM container
      while (container.firstChild) {
        container.removeChild(container.firstChild);
      } // function for rendering autocomplete suggestions


      var render = function render(item, currentValue) {
        var itemElement = doc.createElement("div");
        itemElement.textContent = item.label || "";
        return itemElement;
      };

      if (settings.render) {
        render = settings.render;
      } // function to render autocomplete groups


      var renderGroup = function renderGroup(groupName, currentValue) {
        var groupDiv = doc.createElement("div");
        groupDiv.textContent = groupName;
        return groupDiv;
      };

      if (settings.renderGroup) {
        renderGroup = settings.renderGroup;
      }

      var fragment = doc.createDocumentFragment();
      var prevGroup = "#9?$";
      items.forEach(function (item) {
        if (item.group && item.group !== prevGroup) {
          prevGroup = item.group;
          var groupDiv = renderGroup(item.group, inputValue);

          if (groupDiv) {
            groupDiv.className += " group";
            fragment.appendChild(groupDiv);
          }
        }

        var div = render(item, inputValue);

        if (div) {
          div.addEventListener("click", function (ev) {
            settings.onSelect(item, input);
            clear();
            ev.preventDefault();
            ev.stopPropagation();
          });

          if (item === selected) {
            div.className += " selected";
          }

          fragment.appendChild(div);
        }
      });
      container.appendChild(fragment);

      if (items.length < 1) {
        if (settings.emptyMsg) {
          var empty = doc.createElement("div");
          empty.className = "empty";
          empty.textContent = settings.emptyMsg;
          container.appendChild(empty);
        } else {
          clear();
          return;
        }
      }

      attach();
      updatePosition();
      updateScroll();
    }

    function updateIfDisplayed() {
      if (containerDisplayed()) {
        update();
      }
    }

    function resizeEventHandler() {
      updateIfDisplayed();
    }

    function scrollEventHandler(e) {
      if (e.target !== container) {
        updateIfDisplayed();
      } else {
        e.preventDefault();
      }
    }

    function keyupEventHandler(ev) {
      var keyCode = ev.which || ev.keyCode || 0;
      var ignore = [38
      /* Up */
      , 13
      /* Enter */
      , 27
      /* Esc */
      , 39
      /* Right */
      , 37
      /* Left */
      , 16
      /* Shift */
      , 17
      /* Ctrl */
      , 18
      /* Alt */
      , 20
      /* CapsLock */
      , 91
      /* WindowsKey */
      , 9
      /* Tab */
      ];

      for (var _i = 0, ignore_1 = ignore; _i < ignore_1.length; _i++) {
        var key = ignore_1[_i];

        if (keyCode === key) {
          return;
        }
      }

      if (keyCode >= 112
      /* F1 */
      && keyCode <= 123
      /* F12 */
      ) {
          return;
        } // the down key is used to open autocomplete


      if (keyCode === 40
      /* Down */
      && containerDisplayed()) {
        return;
      }

      startFetch(0
      /* Keyboard */
      );
    }
    /**
     * Automatically move scroll bar if selected item is not visible
     */


    function updateScroll() {
      var elements = container.getElementsByClassName("selected");

      if (elements.length > 0) {
        var element = elements[0]; // make group visible

        var previous = element.previousElementSibling;

        if (previous && previous.className.indexOf("group") !== -1 && !previous.previousElementSibling) {
          element = previous;
        }

        if (element.offsetTop < container.scrollTop) {
          container.scrollTop = element.offsetTop;
        } else {
          var selectBottom = element.offsetTop + element.offsetHeight;
          var containerBottom = container.scrollTop + container.offsetHeight;

          if (selectBottom > containerBottom) {
            container.scrollTop += selectBottom - containerBottom;
          }
        }
      }
    }
    /**
     * Select the previous item in suggestions
     */


    function selectPrev() {
      if (items.length < 1) {
        selected = undefined;
      } else {
        if (selected === items[0]) {
          selected = items[items.length - 1];
        } else {
          for (var i = items.length - 1; i > 0; i--) {
            if (selected === items[i] || i === 1) {
              selected = items[i - 1];
              break;
            }
          }
        }
      }
    }
    /**
     * Select the next item in suggestions
     */


    function selectNext() {
      if (items.length < 1) {
        selected = undefined;
      }

      if (!selected || selected === items[items.length - 1]) {
        selected = items[0];
        return;
      }

      for (var i = 0; i < items.length - 1; i++) {
        if (selected === items[i]) {
          selected = items[i + 1];
          break;
        }
      }
    }

    function keydownEventHandler(ev) {
      var keyCode = ev.which || ev.keyCode || 0;

      if (keyCode === 38
      /* Up */
      || keyCode === 40
      /* Down */
      || keyCode === 27
      /* Esc */
      ) {
          var containerIsDisplayed = containerDisplayed();

          if (keyCode === 27
          /* Esc */
          ) {
              clear();
            } else {
            if (!containerDisplayed || items.length < 1) {
              return;
            }

            keyCode === 38
            /* Up */
            ? selectPrev() : selectNext();
            update();
          }

          ev.preventDefault();

          if (containerIsDisplayed) {
            ev.stopPropagation();
          }

          return;
        }

      if (keyCode === 13
      /* Enter */
      ) {
          if (selected) {
            settings.onSelect(selected, input);
            clear();
          }

          if (preventSubmit) {
            ev.preventDefault();
          }
        }
    }

    function focusEventHandler() {
      if (showOnFocus) {
        startFetch(1
        /* Focus */
        );
      }
    }

    function startFetch(trigger) {
      // if multiple keys were pressed, before we get update from server,
      // this may cause redrawing our autocomplete multiple times after the last key press.
      // to avoid this, the number of times keyboard was pressed will be
      // saved and checked before redraw our autocomplete box.
      var savedKeypressCounter = ++keypressCounter;
      var val = input.value;

      if (val.length >= minLen || trigger === 1
      /* Focus */
      ) {
          clearDebounceTimer();
          debounceTimer = window.setTimeout(function () {
            settings.fetch(val, function (elements) {
              if (keypressCounter === savedKeypressCounter && elements) {
                items = elements;
                inputValue = val;
                selected = items.length > 0 ? items[0] : undefined;
                update();
              }
            }, 0
            /* Keyboard */
            );
          }, trigger === 0
          /* Keyboard */
          ? debounceWaitMs : 0);
        } else {
        clear();
      }
    }

    function blurEventHandler() {
      // we need to delay clear, because when we click on an item, blur will be called before click and remove items from DOM
      setTimeout(function () {
        if (doc.activeElement !== input) {
          clear();
        }
      }, 200);
    }
    /**
     * Fixes #26: on long clicks focus will be lost and onSelect method will not be called
     */


    container.addEventListener("mousedown", function (evt) {
      evt.stopPropagation();
      evt.preventDefault();
    });
    /**
     * Fixes #30: autocomplete closes when scrollbar is clicked in IE
     * See: https://stackoverflow.com/a/9210267/13172349
     */

    container.addEventListener("focus", function () {
      return input.focus();
    });
    /**
     * This function will remove DOM elements and clear event handlers
     */

    function destroy() {
      input.removeEventListener("focus", focusEventHandler);
      input.removeEventListener("keydown", keydownEventHandler);
      input.removeEventListener(keyUpEventName, keyupEventHandler);
      input.removeEventListener("blur", blurEventHandler);
      window.removeEventListener("resize", resizeEventHandler);
      doc.removeEventListener("scroll", scrollEventHandler, true);
      clearDebounceTimer();
      clear();
    } // setup event handlers


    input.addEventListener("keydown", keydownEventHandler);
    input.addEventListener(keyUpEventName, keyupEventHandler);
    input.addEventListener("blur", blurEventHandler);
    input.addEventListener("focus", focusEventHandler);
    window.addEventListener("resize", resizeEventHandler);
    doc.addEventListener("scroll", scrollEventHandler, true);
    return {
      destroy: destroy
    };
  }

  return autocomplete;
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!../../basis-aggrid-components/dist/basis-aggrid-components.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!D:/Github/basis-aggrid-components/dist/basis-aggrid-components.js ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof2(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof2(exports)) === 'object' && ( false ? undefined : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(typeof self !== 'undefined' ? self : void 0, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 42);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Component__ = __webpack_require__(45);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__Component__["a"
      /* default */
      ];
      /***/
    },
    /* 1 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = autobind;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__private_utils__ = __webpack_require__(7);

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      var defineProperty = Object.defineProperty,
          getPrototypeOf = Object.getPrototypeOf;
      var mapStore;

      function getBoundSuper(obj, fn) {
        if (typeof WeakMap === 'undefined') {
          throw new Error("Using @autobind on ".concat(fn.name, "() requires WeakMap support due to its use of super.").concat(fn.name, "()\n      See https://github.com/jayphelps/core-decorators.js/issues/20"));
        }

        if (!mapStore) {
          mapStore = new WeakMap();
        }

        if (mapStore.has(obj) === false) {
          mapStore.set(obj, new WeakMap());
        }

        var superStore = mapStore.get(obj);

        if (superStore.has(fn) === false) {
          superStore.set(fn, Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["a"
          /* bind */
          ])(fn, obj));
        }

        return superStore.get(fn);
      }

      function autobindClass(klass) {
        var descs = Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["e"
        /* getOwnPropertyDescriptors */
        ])(klass.prototype);
        var keys = Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["d"
        /* getOwnKeys */
        ])(descs);

        for (var i = 0, l = keys.length; i < l; i++) {
          var key = keys[i];
          var desc = descs[key];

          if (typeof desc.value !== 'function' || key === 'constructor') {
            continue;
          }

          defineProperty(klass.prototype, key, autobindMethod(klass.prototype, key, desc));
        }
      }

      function autobindMethod(target, key, _ref) {
        var fn = _ref.value,
            configurable = _ref.configurable,
            enumerable = _ref.enumerable;

        if (typeof fn !== 'function') {
          throw new SyntaxError("@autobind can only be used on functions, not: ".concat(fn));
        }

        var constructor = target.constructor;
        return {
          configurable: configurable,
          enumerable: enumerable,
          get: function get() {
            // Class.prototype.key lookup
            // Someone accesses the property directly on the prototype on which it is
            // actually defined on, i.e. Class.prototype.hasOwnProperty(key)
            if (this === target) {
              return fn;
            } // Class.prototype.key lookup
            // Someone accesses the property directly on a prototype but it was found
            // up the chain, not defined directly on it
            // i.e. Class.prototype.hasOwnProperty(key) == false && key in Class.prototype


            if (this.constructor !== constructor && getPrototypeOf(this).constructor === constructor) {
              return fn;
            } // Autobound method calling super.sameMethod() which is also autobound and so on.


            if (this.constructor !== constructor && key in this.constructor.prototype) {
              return getBoundSuper(this, fn);
            }

            var boundFn = Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["a"
            /* bind */
            ])(fn, this);
            defineProperty(this, key, {
              configurable: true,
              writable: true,
              // NOT enumerable when it's a bound method
              enumerable: false,
              value: boundFn
            });
            return boundFn;
          },
          set: Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["b"
          /* createDefaultSetter */
          ])(key)
        };
      }

      function handle(args) {
        if (args.length === 1) {
          return autobindClass.apply(void 0, _toConsumableArray(args));
        } else {
          return autobindMethod.apply(void 0, _toConsumableArray(args));
        }
      }

      function autobind() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (args.length === 0) {
          return function () {
            return handle(arguments);
          };
        } else {
          return handle(args);
        }
      }
      /***/

    },
    /* 2 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = override;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__private_utils__ = __webpack_require__(7);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var GENERIC_FUNCTION_ERROR = '{child} does not properly override {parent}';
      var FUNCTION_REGEXP = /^function ([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?(\([^\)]*\))[\s\S]+$/;

      var SyntaxErrorReporter = /*#__PURE__*/function () {
        _createClass(SyntaxErrorReporter, [{
          key: "_getTopic",
          value: function _getTopic(descriptor) {
            if (descriptor === undefined) {
              return null;
            }

            if ('value' in descriptor) {
              return descriptor.value;
            }

            if ('get' in descriptor) {
              return descriptor.get;
            }

            if ('set' in descriptor) {
              return descriptor.set;
            }
          }
        }, {
          key: "_extractTopicSignature",
          value: function _extractTopicSignature(topic) {
            switch (_typeof(topic)) {
              case 'function':
                return this._extractFunctionSignature(topic);

              default:
                return this.key;
            }
          }
        }, {
          key: "_extractFunctionSignature",
          value: function _extractFunctionSignature(fn) {
            var _this = this;

            return fn.toString().replace(FUNCTION_REGEXP, function (match) {
              var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.key;
              var params = arguments.length > 2 ? arguments[2] : undefined;
              return name + params;
            });
          }
        }, {
          key: "key",
          get: function get() {
            return this.childDescriptor.key;
          }
        }, {
          key: "parentNotation",
          get: function get() {
            return "".concat(this.parentKlass.constructor.name, "#").concat(this.parentPropertySignature);
          }
        }, {
          key: "childNotation",
          get: function get() {
            return "".concat(this.childKlass.constructor.name, "#").concat(this.childPropertySignature);
          }
        }, {
          key: "parentTopic",
          get: function get() {
            return this._getTopic(this.parentDescriptor);
          }
        }, {
          key: "childTopic",
          get: function get() {
            return this._getTopic(this.childDescriptor);
          }
        }, {
          key: "parentPropertySignature",
          get: function get() {
            return this._extractTopicSignature(this.parentTopic);
          }
        }, {
          key: "childPropertySignature",
          get: function get() {
            return this._extractTopicSignature(this.childTopic);
          }
        }]);

        function SyntaxErrorReporter(parentKlass, childKlass, parentDescriptor, childDescriptor) {
          _classCallCheck(this, SyntaxErrorReporter);

          this.parentKlass = void 0;
          this.childKlass = void 0;
          this.parentDescriptor = void 0;
          this.childDescriptor = void 0;
          this.parentKlass = parentKlass;
          this.childKlass = childKlass;
          this.parentDescriptor = parentDescriptor;
          this.childDescriptor = childDescriptor;
        }

        _createClass(SyntaxErrorReporter, [{
          key: "assert",
          value: function assert(condition) {
            var msg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            if (condition !== true) {
              this.error(GENERIC_FUNCTION_ERROR + msg);
            }
          }
        }, {
          key: "error",
          value: function error(msg) {
            var _this2 = this;

            msg = msg // Replace lazily, because they actually might not
            // be available in all cases
            .replace('{parent}', function (m) {
              return _this2.parentNotation;
            }).replace('{child}', function (m) {
              return _this2.childNotation;
            });
            throw new SyntaxError(msg);
          }
        }]);

        return SyntaxErrorReporter;
      }();

      function getDescriptorType(descriptor) {
        if (descriptor.hasOwnProperty('value')) {
          return 'data';
        }

        if (descriptor.hasOwnProperty('get') || descriptor.hasOwnProperty('set')) {
          return 'accessor';
        } // If none of them exist, browsers treat it as
        // a data descriptor with a value of `undefined`


        return 'data';
      }

      function checkFunctionSignatures(parent, child, reporter) {
        reporter.assert(parent.length === child.length);
      }

      function checkDataDescriptors(parent, child, reporter) {
        var parentValueType = _typeof(parent.value);

        var childValueType = _typeof(child.value);

        if (parentValueType === 'undefined' && childValueType === 'undefined') {
          // class properties can be any expression, which isn't ran until the
          // the instance is created, so we can't reliably get type information
          // for them yet (per spec). Perhaps when Babel includes flow-type info
          // in runtime? Tried regex solutions, but super hacky and only feasible
          // on primitives, which is confusing for usage...
          reporter.error("descriptor values are both undefined. (class properties are are not currently supported)'");
        }

        if (parentValueType !== childValueType) {
          var isFunctionOverUndefined = childValueType === 'function' && parentValueType === undefined; // Even though we don't support class properties, this
          // will still handle more than just functions, just in case.
          // Shadowing an undefined value is an error if the inherited
          // value was undefined (usually a class property, not a method)

          if (isFunctionOverUndefined || parentValueType !== undefined) {
            reporter.error("value types do not match. {parent} is \"".concat(parentValueType, "\", {child} is \"").concat(childValueType, "\""));
          }
        } // Switch, in preparation for supporting more types


        switch (childValueType) {
          case 'function':
            checkFunctionSignatures(parent.value, child.value, reporter);
            break;

          default:
            reporter.error("Unexpected error. Please file a bug with: {parent} is \"".concat(parentValueType, "\", {child} is \"").concat(childValueType, "\""));
            break;
        }
      }

      function checkAccessorDescriptors(parent, child, reporter) {
        var parentHasGetter = typeof parent.get === 'function';
        var childHasGetter = typeof child.get === 'function';
        var parentHasSetter = typeof parent.set === 'function';
        var childHasSetter = typeof child.set === 'function';

        if (parentHasGetter || childHasGetter) {
          if (!parentHasGetter && parentHasSetter) {
            reporter.error("{parent} is setter but {child} is getter");
          }

          if (!childHasGetter && childHasSetter) {
            reporter.error("{parent} is getter but {child} is setter");
          }

          checkFunctionSignatures(parent.get, child.get, reporter);
        }

        if (parentHasSetter || childHasSetter) {
          if (!parentHasSetter && parentHasGetter) {
            reporter.error("{parent} is getter but {child} is setter");
          }

          if (!childHasSetter && childHasGetter) {
            reporter.error("{parent} is setter but {child} is getter");
          }

          checkFunctionSignatures(parent.set, child.set, reporter);
        }
      }

      function checkDescriptors(parent, child, reporter) {
        var parentType = getDescriptorType(parent);
        var childType = getDescriptorType(child);

        if (parentType !== childType) {
          reporter.error("descriptor types do not match. {parent} is \"".concat(parentType, "\", {child} is \"").concat(childType, "\""));
        }

        switch (childType) {
          case 'data':
            checkDataDescriptors(parent, child, reporter);
            break;

          case 'accessor':
            checkAccessorDescriptors(parent, child, reporter);
            break;
        }
      }

      var suggestionTransforms = [function (key) {
        return key.toLowerCase();
      }, function (key) {
        return key.toUpperCase();
      }, function (key) {
        return key + 's';
      }, function (key) {
        return key.slice(0, -1);
      }, function (key) {
        return key.slice(1, key.length);
      }];

      function findPossibleAlternatives(superKlass, key) {
        for (var i = 0, l = suggestionTransforms.length; i < l; i++) {
          var fn = suggestionTransforms[i];
          var suggestion = fn(key);

          if (suggestion in superKlass) {
            return suggestion;
          }
        }

        return null;
      }

      function handleDescriptor(target, key, descriptor) {
        descriptor.key = key;
        var superKlass = Object.getPrototypeOf(target);
        var superDescriptor = Object.getOwnPropertyDescriptor(superKlass, key);
        var reporter = new SyntaxErrorReporter(superKlass, target, superDescriptor, descriptor);

        if (superDescriptor === undefined) {
          var suggestedKey = findPossibleAlternatives(superKlass, key);
          var suggestion = suggestedKey ? "\n\n  Did you mean \"".concat(suggestedKey, "\"?") : '';
          reporter.error("No descriptor matching {child} was found on the prototype chain.".concat(suggestion));
        }

        checkDescriptors(superDescriptor, descriptor, reporter);
        return descriptor;
      }

      function override() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["c"
        /* decorate */
        ])(handleDescriptor, args);
      }
      /***/

    },
    /* 3 */

    /***/
    function (module, exports) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */
      // css base code, injected by the css-loader
      module.exports = function (useSourceMap) {
        var list = []; // return the list of modules as css string

        list.toString = function toString() {
          return this.map(function (item) {
            var content = cssWithMappingToString(item, useSourceMap);

            if (item[2]) {
              return "@media " + item[2] + "{" + content + "}";
            } else {
              return content;
            }
          }).join("");
        }; // import a list of modules into the list


        list.i = function (modules, mediaQuery) {
          if (typeof modules === "string") modules = [[null, modules, ""]];
          var alreadyImportedModules = {};

          for (var i = 0; i < this.length; i++) {
            var id = this[i][0];
            if (typeof id === "number") alreadyImportedModules[id] = true;
          }

          for (i = 0; i < modules.length; i++) {
            var item = modules[i]; // skip already imported module
            // this implementation is not 100% perfect for weird media query combinations
            //  when a module is imported multiple times with different media queries.
            //  I hope this will never occur (Hey this way we have smaller bundles)

            if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
              if (mediaQuery && !item[2]) {
                item[2] = mediaQuery;
              } else if (mediaQuery) {
                item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
              }

              list.push(item);
            }
          }
        };

        return list;
      };

      function cssWithMappingToString(item, useSourceMap) {
        var content = item[1] || '';
        var cssMapping = item[3];

        if (!cssMapping) {
          return content;
        }

        if (useSourceMap && typeof btoa === 'function') {
          var sourceMapping = toComment(cssMapping);
          var sourceURLs = cssMapping.sources.map(function (source) {
            return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
          });
          return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
        }

        return [content].join('\n');
      } // Adapted from convert-source-map (MIT)


      function toComment(sourceMap) {
        // eslint-disable-next-line no-undef
        var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
        var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
        return '/*# ' + data + ' */';
      }
      /***/

    },
    /* 4 */

    /***/
    function (module, exports, __webpack_require__) {
      /*
      	MIT License http://www.opensource.org/licenses/mit-license.php
      	Author Tobias Koppers @sokra
      */
      var stylesInDom = {};

      var memoize = function memoize(fn) {
        var memo;
        return function () {
          if (typeof memo === "undefined") memo = fn.apply(this, arguments);
          return memo;
        };
      };

      var isOldIE = memoize(function () {
        // Test for IE <= 9 as proposed by Browserhacks
        // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
        // Tests for existence of standard globals is to allow style-loader
        // to operate correctly into non-standard environments
        // @see https://github.com/webpack-contrib/style-loader/issues/177
        return window && document && document.all && !window.atob;
      });

      var getTarget = function getTarget(target) {
        return document.querySelector(target);
      };

      var getElement = function (fn) {
        var memo = {};
        return function (target) {
          // If passing function in options, then use it for resolve "head" element.
          // Useful for Shadow Root style i.e
          // {
          //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
          // }
          if (typeof target === 'function') {
            return target();
          }

          if (typeof memo[target] === "undefined") {
            var styleTarget = getTarget.call(this, target); // Special case to return head of iframe instead of iframe itself

            if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
              try {
                // This will throw an exception if access to iframe is blocked
                // due to cross-origin restrictions
                styleTarget = styleTarget.contentDocument.head;
              } catch (e) {
                styleTarget = null;
              }
            }

            memo[target] = styleTarget;
          }

          return memo[target];
        };
      }();

      var singleton = null;
      var singletonCounter = 0;
      var stylesInsertedAtTop = [];

      var fixUrls = __webpack_require__(50);

      module.exports = function (list, options) {
        if (typeof DEBUG !== "undefined" && DEBUG) {
          if ((typeof document === "undefined" ? "undefined" : _typeof2(document)) !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
        }

        options = options || {};
        options.attrs = _typeof2(options.attrs) === "object" ? options.attrs : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
        // tags it will allow on a page

        if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE(); // By default, add <style> tags to the <head> element

        if (!options.insertInto) options.insertInto = "head"; // By default, add <style> tags to the bottom of the target

        if (!options.insertAt) options.insertAt = "bottom";
        var styles = listToStyles(list, options);
        addStylesToDom(styles, options);
        return function update(newList) {
          var mayRemove = [];

          for (var i = 0; i < styles.length; i++) {
            var item = styles[i];
            var domStyle = stylesInDom[item.id];
            domStyle.refs--;
            mayRemove.push(domStyle);
          }

          if (newList) {
            var newStyles = listToStyles(newList, options);
            addStylesToDom(newStyles, options);
          }

          for (var i = 0; i < mayRemove.length; i++) {
            var domStyle = mayRemove[i];

            if (domStyle.refs === 0) {
              for (var j = 0; j < domStyle.parts.length; j++) {
                domStyle.parts[j]();
              }

              delete stylesInDom[domStyle.id];
            }
          }
        };
      };

      function addStylesToDom(styles, options) {
        for (var i = 0; i < styles.length; i++) {
          var item = styles[i];
          var domStyle = stylesInDom[item.id];

          if (domStyle) {
            domStyle.refs++;

            for (var j = 0; j < domStyle.parts.length; j++) {
              domStyle.parts[j](item.parts[j]);
            }

            for (; j < item.parts.length; j++) {
              domStyle.parts.push(addStyle(item.parts[j], options));
            }
          } else {
            var parts = [];

            for (var j = 0; j < item.parts.length; j++) {
              parts.push(addStyle(item.parts[j], options));
            }

            stylesInDom[item.id] = {
              id: item.id,
              refs: 1,
              parts: parts
            };
          }
        }
      }

      function listToStyles(list, options) {
        var styles = [];
        var newStyles = {};

        for (var i = 0; i < list.length; i++) {
          var item = list[i];
          var id = options.base ? item[0] + options.base : item[0];
          var css = item[1];
          var media = item[2];
          var sourceMap = item[3];
          var part = {
            css: css,
            media: media,
            sourceMap: sourceMap
          };
          if (!newStyles[id]) styles.push(newStyles[id] = {
            id: id,
            parts: [part]
          });else newStyles[id].parts.push(part);
        }

        return styles;
      }

      function insertStyleElement(options, style) {
        var target = getElement(options.insertInto);

        if (!target) {
          throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
        }

        var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

        if (options.insertAt === "top") {
          if (!lastStyleElementInsertedAtTop) {
            target.insertBefore(style, target.firstChild);
          } else if (lastStyleElementInsertedAtTop.nextSibling) {
            target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
          } else {
            target.appendChild(style);
          }

          stylesInsertedAtTop.push(style);
        } else if (options.insertAt === "bottom") {
          target.appendChild(style);
        } else if (_typeof2(options.insertAt) === "object" && options.insertAt.before) {
          var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
          target.insertBefore(style, nextSibling);
        } else {
          throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
        }
      }

      function removeStyleElement(style) {
        if (style.parentNode === null) return false;
        style.parentNode.removeChild(style);
        var idx = stylesInsertedAtTop.indexOf(style);

        if (idx >= 0) {
          stylesInsertedAtTop.splice(idx, 1);
        }
      }

      function createStyleElement(options) {
        var style = document.createElement("style");
        options.attrs.type = "text/css";
        addAttrs(style, options.attrs);
        insertStyleElement(options, style);
        return style;
      }

      function createLinkElement(options) {
        var link = document.createElement("link");
        options.attrs.type = "text/css";
        options.attrs.rel = "stylesheet";
        addAttrs(link, options.attrs);
        insertStyleElement(options, link);
        return link;
      }

      function addAttrs(el, attrs) {
        Object.keys(attrs).forEach(function (key) {
          el.setAttribute(key, attrs[key]);
        });
      }

      function addStyle(obj, options) {
        var style, update, remove, result; // If a transform function was defined, run it on the css

        if (options.transform && obj.css) {
          result = options.transform(obj.css);

          if (result) {
            // If transform returns a value, use that instead of the original css.
            // This allows running runtime transformations on the css.
            obj.css = result;
          } else {
            // If the transform function returns a falsy value, don't add this css.
            // This allows conditional loading of css
            return function () {// noop
            };
          }
        }

        if (options.singleton) {
          var styleIndex = singletonCounter++;
          style = singleton || (singleton = createStyleElement(options));
          update = applyToSingletonTag.bind(null, style, styleIndex, false);
          remove = applyToSingletonTag.bind(null, style, styleIndex, true);
        } else if (obj.sourceMap && typeof URL === "function" && typeof URL.createObjectURL === "function" && typeof URL.revokeObjectURL === "function" && typeof Blob === "function" && typeof btoa === "function") {
          style = createLinkElement(options);
          update = updateLink.bind(null, style, options);

          remove = function remove() {
            removeStyleElement(style);
            if (style.href) URL.revokeObjectURL(style.href);
          };
        } else {
          style = createStyleElement(options);
          update = applyToTag.bind(null, style);

          remove = function remove() {
            removeStyleElement(style);
          };
        }

        update(obj);
        return function updateStyle(newObj) {
          if (newObj) {
            if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
              return;
            }

            update(obj = newObj);
          } else {
            remove();
          }
        };
      }

      var replaceText = function () {
        var textStore = [];
        return function (index, replacement) {
          textStore[index] = replacement;
          return textStore.filter(Boolean).join('\n');
        };
      }();

      function applyToSingletonTag(style, index, remove, obj) {
        var css = remove ? "" : obj.css;

        if (style.styleSheet) {
          style.styleSheet.cssText = replaceText(index, css);
        } else {
          var cssNode = document.createTextNode(css);
          var childNodes = style.childNodes;
          if (childNodes[index]) style.removeChild(childNodes[index]);

          if (childNodes.length) {
            style.insertBefore(cssNode, childNodes[index]);
          } else {
            style.appendChild(cssNode);
          }
        }
      }

      function applyToTag(style, obj) {
        var css = obj.css;
        var media = obj.media;

        if (media) {
          style.setAttribute("media", media);
        }

        if (style.styleSheet) {
          style.styleSheet.cssText = css;
        } else {
          while (style.firstChild) {
            style.removeChild(style.firstChild);
          }

          style.appendChild(document.createTextNode(css));
        }
      }

      function updateLink(link, options, obj) {
        var css = obj.css;
        var sourceMap = obj.sourceMap;
        /*
        	If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
        	and there is no publicPath defined then lets turn convertToAbsoluteUrls
        	on by default.  Otherwise default to the convertToAbsoluteUrls option
        	directly
        */

        var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

        if (options.convertToAbsoluteUrls || autoFixUrls) {
          css = fixUrls(css);
        }

        if (sourceMap) {
          // http://stackoverflow.com/a/26603875
          css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
        }

        var blob = new Blob([css], {
          type: "text/css"
        });
        var oldSrc = link.href;
        link.href = URL.createObjectURL(blob);
        if (oldSrc) URL.revokeObjectURL(oldSrc);
      }
      /***/

    },
    /* 5 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(9);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__ = __webpack_require__(72);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__objectToString_js__ = __webpack_require__(73);
      /** `Object#toString` result references. */


      var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';
      /** Built-in value references. */

      var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"
      /* default */
      ] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"
      /* default */
      ].toStringTag : undefined;
      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? Object(__WEBPACK_IMPORTED_MODULE_1__getRawTag_js__["a"
        /* default */
        ])(value) : Object(__WEBPACK_IMPORTED_MODULE_2__objectToString_js__["a"
        /* default */
        ])(value);
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseGetTag;
      /***/
    },
    /* 6 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */


      function isObjectLike(value) {
        return value != null && _typeof(value) == 'object';
      }
      /* harmony default export */


      __webpack_exports__["a"] = isObjectLike;
      /***/
    },
    /* 7 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* unused harmony export isDescriptor */

      /* harmony export (immutable) */

      __webpack_exports__["c"] = decorate;
      /* unused harmony export metaFor */

      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "d", function () {
        return getOwnKeys;
      });
      /* harmony export (immutable) */


      __webpack_exports__["e"] = getOwnPropertyDescriptors;
      /* harmony export (immutable) */

      __webpack_exports__["b"] = createDefaultSetter;
      /* harmony export (immutable) */

      __webpack_exports__["a"] = bind;
      /* unused harmony export warn */

      /* unused harmony export internalDeprecation */

      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lazy_initialize__ = __webpack_require__(47);

      var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }

      function _initializerWarningHelper(descriptor, context) {
        throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.');
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }

      var defineProperty = Object.defineProperty,
          getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,
          getOwnPropertyNames = Object.getOwnPropertyNames,
          getOwnPropertySymbols = Object.getOwnPropertySymbols;

      function isDescriptor(desc) {
        if (!desc || !desc.hasOwnProperty) {
          return false;
        }

        var keys = ['value', 'initializer', 'get', 'set'];

        for (var i = 0, l = keys.length; i < l; i++) {
          if (desc.hasOwnProperty(keys[i])) {
            return true;
          }
        }

        return false;
      }

      function decorate(handleDescriptor, entryArgs) {
        if (isDescriptor(entryArgs[entryArgs.length - 1])) {
          return handleDescriptor.apply(void 0, _toConsumableArray(entryArgs).concat([[]]));
        } else {
          return function () {
            return handleDescriptor.apply(void 0, _toConsumableArray(Array.prototype.slice.call(arguments)).concat([entryArgs]));
          };
        }
      }

      var Meta = (_class = (_temp = function Meta() {
        _classCallCheck(this, Meta);

        _initializerDefineProperty(this, "debounceTimeoutIds", _descriptor, this);

        _initializerDefineProperty(this, "throttleTimeoutIds", _descriptor2, this);

        _initializerDefineProperty(this, "throttlePreviousTimestamps", _descriptor3, this);

        _initializerDefineProperty(this, "throttleTrailingArgs", _descriptor4, this);

        _initializerDefineProperty(this, "profileLastRan", _descriptor5, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "debounceTimeoutIds", [__WEBPACK_IMPORTED_MODULE_0__lazy_initialize__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return {};
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "throttleTimeoutIds", [__WEBPACK_IMPORTED_MODULE_0__lazy_initialize__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return {};
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "throttlePreviousTimestamps", [__WEBPACK_IMPORTED_MODULE_0__lazy_initialize__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return {};
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "throttleTrailingArgs", [__WEBPACK_IMPORTED_MODULE_0__lazy_initialize__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, "profileLastRan", [__WEBPACK_IMPORTED_MODULE_0__lazy_initialize__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class);
      var META_KEY = typeof Symbol === 'function' ? Symbol('__core_decorators__') : '__core_decorators__';

      function metaFor(obj) {
        if (obj.hasOwnProperty(META_KEY) === false) {
          defineProperty(obj, META_KEY, {
            // Defaults: NOT enumerable, configurable, or writable
            value: new Meta()
          });
        }

        return obj[META_KEY];
      }

      var getOwnKeys = getOwnPropertySymbols ? function (object) {
        return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));
      } : getOwnPropertyNames;

      function getOwnPropertyDescriptors(obj) {
        var descs = {};
        getOwnKeys(obj).forEach(function (key) {
          return descs[key] = getOwnPropertyDescriptor(obj, key);
        });
        return descs;
      }

      function createDefaultSetter(key) {
        return function set(newValue) {
          Object.defineProperty(this, key, {
            configurable: true,
            writable: true,
            // IS enumerable when reassigned by the outside word
            enumerable: true,
            value: newValue
          });
          return newValue;
        };
      }

      function bind(fn, context) {
        if (fn.bind) {
          return fn.bind(context);
        } else {
          return function __autobind__() {
            return fn.apply(context, arguments);
          };
        }
      }

      var warn = function () {
        if ((typeof console === "undefined" ? "undefined" : _typeof(console)) !== 'object' || !console || typeof console.warn !== 'function') {
          return function () {};
        } else {
          return bind(console.warn, console);
        }
      }();

      var seenDeprecations = {};

      function internalDeprecation(msg) {
        if (seenDeprecations[msg] !== true) {
          seenDeprecations[msg] = true;
          warn('DEPRECATION: ' + msg);
        }
      }
      /***/

    },
    /* 8 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */


      function isObject(value) {
        var type = _typeof(value);

        return value != null && (type == 'object' || type == 'function');
      }
      /* harmony default export */


      __webpack_exports__["a"] = isObject;
      /***/
    },
    /* 9 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(10);
      /** Built-in value references. */


      var _Symbol = __WEBPACK_IMPORTED_MODULE_0__root_js__["a"
      /* default */
      ].Symbol;
      /* harmony default export */

      __webpack_exports__["a"] = _Symbol;
      /***/
    },
    /* 10 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(20);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /** Detect free variable `self`. */


      var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
      /** Used as a reference to the global object. */

      var root = __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__["a"
      /* default */
      ] || freeSelf || Function('return this')();
      /* harmony default export */

      __webpack_exports__["a"] = root;
      /***/
    },
    /* 11 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */

      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      /* harmony default export */


      __webpack_exports__["a"] = eq;
      /***/
    },
    /* 12 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__isFunction_js__ = __webpack_require__(19);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isLength_js__ = __webpack_require__(26);
      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */


      function isArrayLike(value) {
        return value != null && Object(__WEBPACK_IMPORTED_MODULE_1__isLength_js__["a"
        /* default */
        ])(value.length) && !Object(__WEBPACK_IMPORTED_MODULE_0__isFunction_js__["a"
        /* default */
        ])(value);
      }
      /* harmony default export */


      __webpack_exports__["a"] = isArrayLike;
      /***/
    },
    /* 13 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = toInteger;

      function toInteger(dirtyNumber) {
        if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
          return NaN;
        }

        var number = Number(dirtyNumber);

        if (isNaN(number)) {
          return number;
        }

        return number < 0 ? Math.ceil(number) : Math.floor(number);
      }
      /***/

    },
    /* 14 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = requiredArgs;

      function requiredArgs(required, args) {
        if (args.length < required) {
          throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
        }
      }
      /***/

    },
    /* 15 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__BooleanSwitch__ = __webpack_require__(46);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__BooleanSwitch__["a"
      /* default */
      ];
      /***/
    },
    /* 16 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__TemplateRenderer__ = __webpack_require__(65);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__TemplateRenderer__["a"
      /* default */
      ];
      /***/
    },
    /* 17 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__defineProperty_js__ = __webpack_require__(18);
      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */


      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && __WEBPACK_IMPORTED_MODULE_0__defineProperty_js__["a"
        /* default */
        ]) {
          Object(__WEBPACK_IMPORTED_MODULE_0__defineProperty_js__["a"
          /* default */
          ])(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseAssignValue;
      /***/
    },
    /* 18 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__getNative_js__ = __webpack_require__(70);

      var defineProperty = function () {
        try {
          var func = Object(__WEBPACK_IMPORTED_MODULE_0__getNative_js__["a"
          /* default */
          ])(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();
      /* harmony default export */


      __webpack_exports__["a"] = defineProperty;
      /***/
    },
    /* 19 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isObject_js__ = __webpack_require__(8);
      /** `Object#toString` result references. */


      var asyncTag = '[object AsyncFunction]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';
      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */

      function isFunction(value) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_1__isObject_js__["a"
        /* default */
        ])(value)) {
          return false;
        } // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.


        var tag = Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"
        /* default */
        ])(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isFunction;
      /***/
    },
    /* 20 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }
        /** Detect free variable `global` from Node.js. */


        var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
        /* harmony default export */

        __webpack_exports__["a"] = freeGlobal;
        /* WEBPACK VAR INJECTION */
      }).call(__webpack_exports__, __webpack_require__(21));
      /***/
    },
    /* 21 */

    /***/
    function (module, exports) {
      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var g; // This works in non-strict mode

      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
      } // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}


      module.exports = g;
      /***/
    },
    /* 22 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__identity_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__overRest_js__ = __webpack_require__(79);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__setToString_js__ = __webpack_require__(80);
      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */


      function baseRest(func, start) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__setToString_js__["a"
        /* default */
        ])(Object(__WEBPACK_IMPORTED_MODULE_1__overRest_js__["a"
        /* default */
        ])(func, start, __WEBPACK_IMPORTED_MODULE_0__identity_js__["a"
        /* default */
        ]), func + '');
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseRest;
      /***/
    },
    /* 23 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */

      function identity(value) {
        return value;
      }
      /* harmony default export */


      __webpack_exports__["a"] = identity;
      /***/
    },
    /* 24 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */

      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);

          case 1:
            return func.call(thisArg, args[0]);

          case 2:
            return func.call(thisArg, args[0], args[1]);

          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }

        return func.apply(thisArg, args);
      }
      /* harmony default export */


      __webpack_exports__["a"] = apply;
      /***/
    },
    /* 25 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__eq_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isArrayLike_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isIndex_js__ = __webpack_require__(27);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__isObject_js__ = __webpack_require__(8);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */


      function isIterateeCall(value, index, object) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_3__isObject_js__["a"
        /* default */
        ])(object)) {
          return false;
        }

        var type = _typeof(index);

        if (type == 'number' ? Object(__WEBPACK_IMPORTED_MODULE_1__isArrayLike_js__["a"
        /* default */
        ])(object) && Object(__WEBPACK_IMPORTED_MODULE_2__isIndex_js__["a"
        /* default */
        ])(index, object.length) : type == 'string' && index in object) {
          return Object(__WEBPACK_IMPORTED_MODULE_0__eq_js__["a"
          /* default */
          ])(object[index], value);
        }

        return false;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isIterateeCall;
      /***/
    },
    /* 26 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used as references for various `Number` constants. */

      var MAX_SAFE_INTEGER = 9007199254740991;
      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isLength;
      /***/
    },
    /* 27 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /** Used as references for various `Number` constants. */


      var MAX_SAFE_INTEGER = 9007199254740991;
      /** Used to detect unsigned integer values. */

      var reIsUint = /^(?:0|[1-9]\d*)$/;
      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */

      function isIndex(value, length) {
        var type = _typeof(value);

        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isIndex;
      /***/
    },
    /* 28 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseTimes_js__ = __webpack_require__(85);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isArguments_js__ = __webpack_require__(86);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isArray_js__ = __webpack_require__(29);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__isBuffer_js__ = __webpack_require__(88);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__isIndex_js__ = __webpack_require__(27);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__isTypedArray_js__ = __webpack_require__(90);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */

      function arrayLikeKeys(value, inherited) {
        var isArr = Object(__WEBPACK_IMPORTED_MODULE_2__isArray_js__["a"
        /* default */
        ])(value),
            isArg = !isArr && Object(__WEBPACK_IMPORTED_MODULE_1__isArguments_js__["a"
        /* default */
        ])(value),
            isBuff = !isArr && !isArg && Object(__WEBPACK_IMPORTED_MODULE_3__isBuffer_js__["a"
        /* default */
        ])(value),
            isType = !isArr && !isArg && !isBuff && Object(__WEBPACK_IMPORTED_MODULE_5__isTypedArray_js__["a"
        /* default */
        ])(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? Object(__WEBPACK_IMPORTED_MODULE_0__baseTimes_js__["a"
        /* default */
        ])(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
          key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
          Object(__WEBPACK_IMPORTED_MODULE_4__isIndex_js__["a"
          /* default */
          ])(key, length)))) {
            result.push(key);
          }
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = arrayLikeKeys;
      /***/
    },
    /* 29 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */

      var isArray = Array.isArray;
      /* harmony default export */

      __webpack_exports__["a"] = isArray;
      /***/
    },
    /* 30 */

    /***/
    function (module, exports) {
      module.exports = function (originalModule) {
        if (!originalModule.webpackPolyfill) {
          var module = Object.create(originalModule); // module.parent = undefined by default

          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          Object.defineProperty(module, "exports", {
            enumerable: true
          });
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    },
    /* 31 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used for built-in method references. */

      var objectProto = Object.prototype;
      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */

      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
        return value === proto;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isPrototype;
      /***/
    },
    /* 32 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__ = __webpack_require__(6);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isPlainObject_js__ = __webpack_require__(97);
      /** `Object#toString` result references. */


      var domExcTag = '[object DOMException]',
          errorTag = '[object Error]';
      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */

      function isError(value) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__["a"
        /* default */
        ])(value)) {
          return false;
        }

        var tag = Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"
        /* default */
        ])(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !Object(__WEBPACK_IMPORTED_MODULE_2__isPlainObject_js__["a"
        /* default */
        ])(value);
      }
      /* harmony default export */


      __webpack_exports__["a"] = isError;
      /***/
    },
    /* 33 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */

      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }
      /* harmony default export */


      __webpack_exports__["a"] = overArg;
      /***/
    },
    /* 34 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */

      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = arrayMap;
      /***/
    },
    /* 35 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used to match template delimiters. */

      var reInterpolate = /<%=([\s\S]+?)%>/g;
      /* harmony default export */

      __webpack_exports__["a"] = reInterpolate;
      /***/
    },
    /* 36 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseToString_js__ = __webpack_require__(109);
      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */


      function toString(value) {
        return value == null ? '' : Object(__WEBPACK_IMPORTED_MODULE_0__baseToString_js__["a"
        /* default */
        ])(value);
      }
      /* harmony default export */


      __webpack_exports__["a"] = toString;
      /***/
    },
    /* 37 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = readonly;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__private_utils__ = __webpack_require__(7);

      function handleDescriptor(target, key, descriptor) {
        descriptor.writable = false;
        return descriptor;
      }

      function readonly() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["c"
        /* decorate */
        ])(handleDescriptor, args);
      }
      /***/

    },
    /* 38 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = utcToZonedTime;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_tzParseTimezone__ = __webpack_require__(39);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_date_fns_esm_subMilliseconds__ = __webpack_require__(118);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__toDate__ = __webpack_require__(121);
      /**
       * @name utcToZonedTime
       * @category Time Zone Helpers
       * @summary Get a date/time representing local time in a given time zone from the UTC date
       *
       * @description
       * Returns a date instance with values representing the local time in the time zone
       * specified of the UTC time from the date provided. In other words, when the new date
       * is formatted it will show the equivalent hours in the target time zone regardless
       * of the current system time zone.
       *
       * @param {Date|String|Number} date - the date with the relevant UTC time
       * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone
       * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
       * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
       * @returns {Date} the new date with the equivalent time in the time zone
       * @throws {TypeError} 2 arguments required
       * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
       *
       * @example
       * // In June 10am UTC is 6am in New York (-04:00)
       * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')
       * //=> Jun 25 2014 06:00:00
       */


      function utcToZonedTime(dirtyDate, timeZone, options) {
        var date = Object(__WEBPACK_IMPORTED_MODULE_2__toDate__["a"
        /* default */
        ])(dirtyDate, options); // This date has the UTC time values of the input date at the system time zone

        var utcDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()); // We just need to apply the offset indicated by the time zone to this localized date

        var offsetMilliseconds = Object(__WEBPACK_IMPORTED_MODULE_0__lib_tzParseTimezone__["a"
        /* default */
        ])(timeZone, utcDate);
        return offsetMilliseconds ? Object(__WEBPACK_IMPORTED_MODULE_1_date_fns_esm_subMilliseconds__["a"
        /* default */
        ])(utcDate, offsetMilliseconds) : utcDate;
      }
      /***/

    },
    /* 39 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = tzParseTimezone;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__tzTokenizeDate_index_js__ = __webpack_require__(117);

      var MILLISECONDS_IN_HOUR = 3600000;
      var MILLISECONDS_IN_MINUTE = 60000;
      var patterns = {
        timezone: /([Z+-].*)$/,
        timezoneZ: /^(Z)$/,
        timezoneHH: /^([+-])(\d{2})$/,
        timezoneHHMM: /^([+-])(\d{2}):?(\d{2})$/,
        timezoneIANA: /(UTC|(?:[a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?))$/
      }; // Parse various time zone offset formats to an offset in milliseconds

      function tzParseTimezone(timezoneString, date) {
        var token;
        var absoluteOffset; // Z

        token = patterns.timezoneZ.exec(timezoneString);

        if (token) {
          return 0;
        }

        var hours; // ±hh

        token = patterns.timezoneHH.exec(timezoneString);

        if (token) {
          hours = parseInt(token[2], 10);

          if (!validateTimezone(hours)) {
            return NaN;
          }

          absoluteOffset = hours * MILLISECONDS_IN_HOUR;
          return token[1] === '+' ? -absoluteOffset : absoluteOffset;
        } // ±hh:mm or ±hhmm


        token = patterns.timezoneHHMM.exec(timezoneString);

        if (token) {
          hours = parseInt(token[2], 10);
          var minutes = parseInt(token[3], 10);

          if (!validateTimezone(hours, minutes)) {
            return NaN;
          }

          absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;
          return token[1] === '+' ? -absoluteOffset : absoluteOffset;
        } // IANA time zone


        token = patterns.timezoneIANA.exec(timezoneString);

        if (token) {
          // var [fYear, fMonth, fDay, fHour, fMinute, fSecond] = tzTokenizeDate(date, timezoneString)
          var tokens = Object(__WEBPACK_IMPORTED_MODULE_0__tzTokenizeDate_index_js__["a"
          /* default */
          ])(date, timezoneString);
          var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3], tokens[4], tokens[5]);
          var timestampWithMsZeroed = date.getTime() - date.getTime() % 1000;
          return -(asUTC - timestampWithMsZeroed);
        }

        return 0;
      }

      function validateTimezone(hours, minutes) {
        if (minutes != null && (minutes < 0 || minutes > 59)) {
          return false;
        }

        return true;
      }
      /***/

    },
    /* 40 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__EventsMixin__ = __webpack_require__(123);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return __WEBPACK_IMPORTED_MODULE_0__EventsMixin__["b"];
      });
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* unused harmony default export */


      var _unused_webpack_default_export = __WEBPACK_IMPORTED_MODULE_0__EventsMixin__["a"
      /* EventsMixin */
      ];
      /***/
    },
    /* 41 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__DateTimeInput__ = __webpack_require__(124);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__DateTimeInput__["a"
      /* default */
      ];
      /***/
    },
    /* 42 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__BooleanEditor__ = __webpack_require__(43);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__BooleanRenderer__ = __webpack_require__(51);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__BooleanFilter__ = __webpack_require__(53);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__NumberEditor__ = __webpack_require__(57);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__TextEditor__ = __webpack_require__(61);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__TemplateRenderer__ = __webpack_require__(16);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__ImageRenderer__ = __webpack_require__(113);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__DateTimeFilter__ = __webpack_require__(115);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__DateTimeEditor__ = __webpack_require__(129);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "BooleanEditor", function () {
        return __WEBPACK_IMPORTED_MODULE_0__BooleanEditor__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "BooleanRenderer", function () {
        return __WEBPACK_IMPORTED_MODULE_1__BooleanRenderer__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "BooleanFilter", function () {
        return __WEBPACK_IMPORTED_MODULE_2__BooleanFilter__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberEditor", function () {
        return __WEBPACK_IMPORTED_MODULE_3__NumberEditor__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "TextEditor", function () {
        return __WEBPACK_IMPORTED_MODULE_4__TextEditor__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "TemplateRenderer", function () {
        return __WEBPACK_IMPORTED_MODULE_5__TemplateRenderer__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "ImageRenderer", function () {
        return __WEBPACK_IMPORTED_MODULE_6__ImageRenderer__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "DateTimeFilter", function () {
        return __WEBPACK_IMPORTED_MODULE_7__DateTimeFilter__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "DateTimeEditor", function () {
        return __WEBPACK_IMPORTED_MODULE_8__DateTimeEditor__["a"];
      });
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /***/

    },
    /* 43 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__BooleanEditor__ = __webpack_require__(44);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__BooleanEditor__["a"
      /* default */
      ];
      /***/
    },
    /* 44 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__BooleanSwitch__ = __webpack_require__(15);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Booleans Editor
       *
       * Handle boolean values Editing
       *
       * ## Options
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **booleanUsedTrueValue**   | undefined    | the value to return when the editor changes the current cell value to true. in case it is undefined then we use the first item in **booleanTrueValue[]**
       * | **booleanUsedFalseValue**   | undefined    | the value to return when the editor changes the current cell value to false. in case it is undefined then we use the first item in **booleanFalseValue[]**
       * | **booleanTrueValue[]**       | true(bool)  	| The options describes what is considered `true`                                                                                	|
       * | **booleanFalseValue[]**      | false(bool) 	| The options describes what is considered `false`
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var BooleanEditor = /*#__PURE__*/function (_Component) {
        _inherits(BooleanEditor, _Component);

        var _super = _createSuper(BooleanEditor);

        function BooleanEditor() {
          _classCallCheck(this, BooleanEditor);

          return _super.apply(this, arguments);
        }

        _createClass(BooleanEditor, [{
          key: "init",

          /**
           *  @inheritDoc
           */
          value: function init(params) {
            var _this = this;

            if (params.keyPress !== null) {
              this._value = Boolean(params.keyPress);
            } else if (params.charPress !== null) {
              this._value = Boolean(params.charPress);
            }

            this._trueValue = [].concat(this.getOption('booleanTrueValue', params, [true]));
            this._falseValue = [].concat(this.getOption('booleanFalseValue', params, [false]));
            this._returnTrueValue = this.getOption('booleanUsedTrueValue', params, this._trueValue[0]);
            this._returnFalseValue = this.getOption('booleanUsedFalseValue', params, this._falseValue[0]);
            this._trueValue = this._trueValue.map(function (x) {
              return String(x);
            });
            this._falseValue = this._falseValue.map(function (x) {
              return String(x);
            });
            this.focusAfterAttached = params.cellStartedEdit;

            if (this.focusAfterAttached) {
              var keyPressBackspaceOrDelete = params.keyPress == 32 || params.keyPress == 46; // space // delete

              if (keyPressBackspaceOrDelete) {
                this._value = false;
              } else if (params.charPress !== null) {
                this._value = params.charPress;
              } else {
                this._value = params.value;
              }
            } else {
              this._value = params.value;
            }

            this._value = this._convertValue(this._value, this._trueValue, this._falseValue);
            this._switcher = new __WEBPACK_IMPORTED_MODULE_1__BooleanSwitch__["a"
            /* default */
            ](this._value, function (switcher) {
              _this._value = _this._convertValue(switcher.isChecked(), _this._trueValue, _this._falseValue);
            });

            this._switcher.init(params);
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "getGui",
          value: function getGui() {
            return this._switcher.getGui();
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this._switcher.destroy();
          }
          /**
           * Gets called once after GUI is attached to DOM.
           * Make sure the container is always focused and listening to key changes
           */

        }, {
          key: "afterGuiAttached",
          value: function afterGuiAttached() {
            if (this.focusAfterAttached) {
              this.focusIn();
            }
          }
          /**
           * Get the final value to the grid, the result of the editing
           *
           * @return {Boolean}
           */

        }, {
          key: "getValue",
          value: function getValue() {
            return this._value ? this._returnTrueValue : this._returnFalseValue;
          }
          /**
           * Gets called once after initialized and returns false so the editor appears in the cell
           *
           * @return {Boolean} always false
           **/

        }, {
          key: "isPopup",
          value: function isPopup() {
            return false;
          }
          /**
           * If doing full row edit, then gets called when tabbing into the cell.
           *
           * @return {Boolean}
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this._switcher.setDisabled(false);

            this._switcher.focus();

            return true;
          }
          /**
           * If doing full row edit, then gets called when tabbing out of the cell.
           *
           * @return {Boolean}
           */

        }, {
          key: "focusOut",
          value: function focusOut() {
            this._switcher.setDisabled(true);

            return true;
          }
          /**
           * @param {Boolean} value the current cell value
           * @param {String|Number} trueValue true value alias
           * @param {String|Number} falseValue false value alias
           */

        }, {
          key: "_convertValue",
          value: function _convertValue(value, trueValue, falseValue) {
            var valueAsString = String(value);
            return trueValue.indexOf(valueAsString) > -1 ? true : falseValue.indexOf(valueAsString) > -1 ? false : value;
          }
        }]);

        return BooleanEditor;
      }(__WEBPACK_IMPORTED_MODULE_0__Component__["a"
      /* default */
      ]);
      /* harmony default export */


      __webpack_exports__["a"] = BooleanEditor;
      /***/
    },
    /* 45 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* eslint-disable no-prototype-builtins */

      /**
       * The base component class
       *
       * This class is the abstract class which all components should use
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var Component = /*#__PURE__*/function () {
        function Component() {
          _classCallCheck(this, Component);

          this._gui = null;
        }

        _createClass(Component, [{
          key: "init",

          /**
           * Initialize the component
           *
           * @param {Object} params
           *
           * @return void
           */
          // eslint-disable-next-line no-unused-vars
          value: function init(params) {
            console.warn("".concat(this.constructor.name, " does not implement the [init] method"));
          }
          /**
           * Return the DOM element of the component, this is what the grid puts into the cell
           *
           * @return {HTMLElement}
           */

        }, {
          key: "getGui",
          value: function getGui() {
            return this._gui;
          }
          /**
           * Gets called when the component is destroyed. If your custom component needs to do
           * any resource cleaning up, do it here.
           */

        }, {
          key: "destroy",
          value: function destroy() {// pass
          }
          /**
           * Find the required option value
           *
           * This function will try to find the passed option's value in the following order
           *
           *  1. params
           *  2. Search `params.colDef`
           *  3. Search `params.context.AGridComponentsMetaConfig[COLUMN_ID]` or `params.context.meta[COLUMN_ID]`
           *  4. Search `params.context.AGridComponentsMetaConfig` or `params.context.meta`
           *  5. Search `params.context`
           *  6. If none found return the fallback
           *
           * @param {String} name the name of the option
           * @param {params} params an object used to search for the option
           * @param {String} fallback a value to return in case the option can not be found
           */

        }, {
          key: "getOption",
          value: function getOption(name, params) {
            var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
            var option;

            if (params && params.hasOwnProperty(name) && params[name] !== null) {
              option = params[name];
            } else {
              // try to fetch from the column def first
              if (params.hasOwnProperty('colDef') && params.colDef.hasOwnProperty(name) && params.colDef[name] !== null) {
                option = params.colDef[name];
              } else {
                // try to fetch from AGridComponentsMetaConfig|meta in the context
                var AGridComponentsMetaConfig = null;

                if (params.hasOwnProperty('context')) {
                  AGridComponentsMetaConfig = params.context.AGridComponentsMetaConfig || params.context.meta;
                }

                if (AGridComponentsMetaConfig && AGridComponentsMetaConfig.hasOwnProperty(params.column.colId) && AGridComponentsMetaConfig[params.column.colId].hasOwnProperty(name) && AGridComponentsMetaConfig[params.column.colId][name] !== null) {
                  option = AGridComponentsMetaConfig[params.column.colId][name];
                } else if (AGridComponentsMetaConfig && AGridComponentsMetaConfig.hasOwnProperty(name) && AGridComponentsMetaConfig[name] !== null) {
                  option = AGridComponentsMetaConfig[name];
                } else {
                  // try to fetch from the context object itself
                  var context = params.context;

                  if (context && context.hasOwnProperty(name) && context[name] !== null) {
                    option = context[name];
                  } else {
                    // try to check params itself or fallback to default
                    option = fallback;
                  }
                }
              }
            }

            return typeof option !== 'undefined' ? option : fallback;
          }
          /**
           * Get Window Instance
           *
           * @param {params} params an object used to search for the window instance
           *
           * @return {Window}
           */

        }, {
          key: "getWin",
          value: function getWin(params) {
            var win = this.getOption('window', params) || window || null;

            if (!win) {
              throw new Error('Current environment does not support window');
            }

            return win;
          }
          /**
           * Get document Instance
           *
           * @param {params} params an object used to search for the document instance
           *
           * @return {HTMLDocument}
           */

        }, {
          key: "getDoc",
          value: function getDoc(params) {
            var doc = this.getOption('document', params) || document || null;

            if (!doc) {
              throw new Error('Current environment does not support document');
            }

            return doc;
          }
        }]);

        return Component;
      }();
      /* harmony default export */


      __webpack_exports__["a"] = Component;
      /***/
    },
    /* 46 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss__ = __webpack_require__(48);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__style_scss__);

      var _class;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Boolean Renderer
       *
       * Simple toggle switch to handle boolean values
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var BooleanSwitch = (_class = /*#__PURE__*/function (_Component) {
        _inherits(BooleanSwitch, _Component);

        var _super = _createSuper(BooleanSwitch);
        /**
         * Construct new BooleanSwitch Component
         *
         * @param {Boolean} [initialValue = false] the default state , checked or unchecked
         * @param {Function} [listener = null] a listener to be called when the state is changed
         */


        function BooleanSwitch() {
          var _this;

          var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          var listener = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

          _classCallCheck(this, BooleanSwitch);

          _this = _super.call(this);

          _this.setChecked(initialValue);

          _this.setListener(listener);

          _this.setDisabled(false);

          return _this;
        }
        /**
         *  @inheritDoc
         */


        _createClass(BooleanSwitch, [{
          key: "init",
          value: function init(params) {
            this._params = params;
            this._onClick = this._onClick.bind(this);
            this._onKeydown = this._onKeydown.bind(this);
            this._gui = this.getDoc(params).createElement('div');
            this._gui.className = 'boolSwitch__wrapper';
            this._gui.tabIndex = -1;
            this.render();
          }
          /**
           * Render the switch slider and hidden input.
           */

        }, {
          key: "render",
          value: function render() {
            var doc = this.getDoc(this._params);
            var boolSwitch = document.createElement('div');
            boolSwitch.className = 'boolSwitch'; // input

            this._input = doc.createElement('input');
            this._input.id = "el-".concat(Math.random());
            this._input.name = 'checkbox';
            this._input.className = 'boolSwitch__checkbox';
            this._input.type = 'checkbox';
            this._input.checked = this.isChecked();
            this._input.disabled = this.isDisabled();
            this._input.tabIndex = '0'; // label

            var label = document.createElement('label');
            label.className = 'boolSwitch__label';
            label["for"] = this._input.id;
            label.innerHTML =
            /* html */
            "\n      <span class=\"boolSwitch__inner\"></span>\n      <span class=\"boolSwitch__switch\"></span>\n    "; // attache input and slider to component

            boolSwitch.appendChild(this._input);
            boolSwitch.appendChild(label);
            boolSwitch.addEventListener('click', this._onClick);

            this._gui.addEventListener('keydown', this._onKeydown);

            this._gui.appendChild(boolSwitch);
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var boolSwitch = this._gui.querySelector('.boolSwitch');

            boolSwitch.removeEventListener('click', this._onClick);

            this._gui.removeEventListener('keydown', this._onKeydown);
          }
          /**
           * Focus the component
           */

        }, {
          key: "focus",
          value: function focus() {
            this._gui.focus();

            this._input.focus();
          }
          /**
           * Set a listener to be called when the switch state is changed
           *
           * @param {Function} listener
           */

        }, {
          key: "setListener",
          value: function setListener(listener) {
            this._listener = listener;
          }
          /**
           * Get the listener instance , if
           *
           * @return {Function|null}
           */

        }, {
          key: "getListener",
          value: function getListener() {
            return this._listener;
          }
          /**
           * Set checked
           *
           * @param {Boolean} value true to check , false to uncheck
           */

        }, {
          key: "setChecked",
          value: function setChecked(value) {
            this._checked = value;

            if (this._input) {
              this._input.checked = value;
            }
          }
          /**
           * Check the if switch is checked
           *
           * @return {Boolean}  true when checked , false otherwise
           */

        }, {
          key: "isChecked",
          value: function isChecked() {
            return this._checked;
          }
          /**
           * Toggle the component state
           */

        }, {
          key: "toggle",
          value: function toggle() {
            this.setChecked(!this.isChecked());
          }
          /**
           * Set disabled
           *
           * @param {Boolean} value true to disabled , false to enable
           */

        }, {
          key: "setDisabled",
          value: function setDisabled(value) {
            this._disabled = value;

            if (this._input) {
              this._input.disabled = value;
            }
          }
          /**
           * Check if the switch is disabled
           *
           * @return {Boolean} true when disabled , false otherwise
           */

        }, {
          key: "isDisabled",
          value: function isDisabled() {
            return this._disabled;
          }
          /**
           * The default click listener of the switch. It will toggle the state and fire any registered listener
           *
           * @param {Event} e the event object
           *
           * @protected
           */

        }, {
          key: "_onClick",
          value: function _onClick(e) {
            if (this._disabled) {
              return false;
            }

            this.toggle();

            if (this._listener) {
              this._listener(this);
            }
          }
          /**
           * The default key listener of the switch. It will toggle the state using keyboard keys (left , right , space)
           * and fire any registered listener
           *
           * @param {Event} e  the event object
           *
           * @protected
           */

        }, {
          key: "_onKeydown",
          value: function _onKeydown(e) {
            if (this._disabled) {
              return false;
            }

            var key = e.which || e.keyCode; // space

            if (key == 32) {
              this.toggle();

              if (this._listener) {
                this._listener(this);
              }

              e.stopPropagation();
            } // right
            else if (key == 39) {
                this.setChecked(true);

                if (this._listener) {
                  this._listener(this);
                }

                e.stopPropagation();
              } // left
              else if (key == 37) {
                  this.setChecked(false);

                  if (this._listener) {
                    this._listener(this);
                  }

                  e.stopPropagation();
                }
          }
        }]);

        return BooleanSwitch;
      }(__WEBPACK_IMPORTED_MODULE_2__Component__["a"
      /* default */
      ]), (_applyDecoratedDescriptor(_class.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "init"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "destroy"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onClick", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onClick"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onKeydown", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onKeydown"), _class.prototype)), _class);
      /* harmony default export */

      __webpack_exports__["a"] = BooleanSwitch;
      /***/
    },
    /* 47 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = lazyInitialize;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__private_utils__ = __webpack_require__(7);

      var defineProperty = Object.defineProperty;

      function handleDescriptor(target, key, descriptor) {
        var configurable = descriptor.configurable,
            enumerable = descriptor.enumerable,
            initializer = descriptor.initializer,
            value = descriptor.value;
        return {
          configurable: configurable,
          enumerable: enumerable,
          get: function get() {
            // This happens if someone accesses the
            // property directly on the prototype
            if (this === target) {
              return;
            }

            var ret = initializer ? initializer.call(this) : value;
            defineProperty(this, key, {
              configurable: configurable,
              enumerable: enumerable,
              writable: true,
              value: ret
            });
            return ret;
          },
          set: Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["b"
          /* createDefaultSetter */
          ])(key)
        };
      }

      function lazyInitialize() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return Object(__WEBPACK_IMPORTED_MODULE_0__private_utils__["c"
        /* decorate */
        ])(handleDescriptor, args);
      }
      /***/

    },
    /* 48 */

    /***/
    function (module, exports, __webpack_require__) {
      var content = __webpack_require__(49);

      if (typeof content === 'string') content = [[module.i, content, '']];
      var transform;
      var insertInto;
      var options = {
        "hmr": true
      };
      options.transform = transform;

      options.insertInto = function () {
        return window.parent.document.head;
      };

      var update = __webpack_require__(4)(content, options);

      if (content.locals) module.exports = content.locals;

      if (false) {}
      /***/

    },
    /* 49 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(3)(false); // imports
      // module

      exports.push([module.i, ".ag-cell-inline-editing .boolSwitch__wrapper{margin:auto 11px}.boolSwitch__wrapper{display:flex;width:100%;height:100%;align-items:center;outline:none;padding-left:6px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.boolSwitch{position:relative;width:55px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.boolSwitch__checkbox{display:none}.boolSwitch__label{display:block;overflow:hidden;cursor:pointer;border:2px solid var(--ag-input-border-color, var(--ag-border-color, #babfc7));border-radius:20px}.boolSwitch__inner{display:block;width:200%;margin-left:-100%;transition:margin 0.3s ease-in 0s}.boolSwitch__inner:before,.boolSwitch__inner:after{display:block;float:left;width:50%;height:15px;padding:0;line-height:15px;font-size:14px;color:white;font-family:'Segoe UI Symbol', Trebuchet, Arial, sans-serif;font-weight:bold;box-sizing:border-box}.boolSwitch__inner:before{content:'\\2714';padding-left:10px;background-color:var(--ag-checkbox-checked-color, var(--ag-alpine-active-color, #2196f3));color:#ffffff}.boolSwitch__inner:after{content:'\\2718';padding-right:10px;background-color:var(--ag-background-color);color:var(--ag-input-border-color, var(--ag-border-color, #babfc7));text-align:right}.boolSwitch__switch{display:block;width:18px;margin:1px;background:#ffffff;position:absolute;top:0;bottom:0;right:35px;border:2px solid var(--ag-input-border-color, var(--ag-border-color, #babfc7));border-radius:20px;transition:all 0.3s ease-in 0s}.boolSwitch__checkbox:checked+.boolSwitch__label .boolSwitch__inner{margin-left:0}.boolSwitch__checkbox:checked+.boolSwitch__label .boolSwitch__switch{right:0px}\n", ""]); // exports

      /***/
    },
    /* 50 */

    /***/
    function (module, exports) {
      /**
       * When source maps are enabled, `style-loader` uses a link element with a data-uri to
       * embed the css on the page. This breaks all relative urls because now they are relative to a
       * bundle instead of the current page.
       *
       * One solution is to only use full urls, but that may be impossible.
       *
       * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
       *
       * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
       *
       */
      module.exports = function (css) {
        // get current location
        var location = typeof window !== "undefined" && window.location;

        if (!location) {
          throw new Error("fixUrls requires window.location");
        } // blank or null?


        if (!css || typeof css !== "string") {
          return css;
        }

        var baseUrl = location.protocol + "//" + location.host;
        var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/"); // convert each url(...)

        /*
        This regular expression is just a way to recursively match brackets within
        a string.
        	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
           (  = Start a capturing group
             (?:  = Start a non-capturing group
                 [^)(]  = Match anything that isn't a parentheses
                 |  = OR
                 \(  = Match a start parentheses
                     (?:  = Start another non-capturing groups
                         [^)(]+  = Match anything that isn't a parentheses
                         |  = OR
                         \(  = Match a start parentheses
                             [^)(]*  = Match anything that isn't a parentheses
                         \)  = Match a end parentheses
                     )  = End Group
                     *\) = Match anything and then a close parens
                 )  = Close non-capturing group
                 *  = Match anything
              )  = Close capturing group
         \)  = Match a close parens
        	 /gi  = Get all matches, not the first.  Be case insensitive.
         */

        var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
          // strip quotes (if they exist)
          var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
            return $1;
          }).replace(/^'(.*)'$/, function (o, $1) {
            return $1;
          }); // already a full url? no change

          if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
            return fullMatch;
          } // convert the url to a full url


          var newUrl;

          if (unquotedOrigUrl.indexOf("//") === 0) {
            //TODO: should we add protocol?
            newUrl = unquotedOrigUrl;
          } else if (unquotedOrigUrl.indexOf("/") === 0) {
            // path should be relative to the base url
            newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
          } else {
            // path should be relative to current directory
            newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
          } // send back the fixed url(...)


          return "url(" + JSON.stringify(newUrl) + ")";
        }); // send back the fixed css

        return fixedCss;
      };
      /***/

    },
    /* 51 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__BooleanRenderer__ = __webpack_require__(52);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__BooleanRenderer__["a"
      /* default */
      ];
      /***/
    },
    /* 52 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__BooleanSwitch__ = __webpack_require__(15);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* eslint-disable no-prototype-builtins */

      /**
       * Booleans Renderer
       *
       * Handle boolean values Rendering
       *
       * ## Options
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **booleanTrueRenderValue**  	| switch      	| The option controls how to render `true` values. <br> **switch** is a special value used to render true values as a switch component  	|
       * | **booleanFalseRenderValue** 	| switch      	| The option controls how to render `false` values. <br> **switch** is a special value used to render true values as a switch component 	|
       * | **booleanTrueValue[]**       | true(bool)  	| The options describes what is considered `true`                                                                                	|
       * | **booleanFalseValue[]**      | false(bool) 	| The options describes what is considered `false`                                                                               	|
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var BooleanRenderer = /*#__PURE__*/function (_Component) {
        _inherits(BooleanRenderer, _Component);

        var _super = _createSuper(BooleanRenderer);
        /**
         * Construct new BooleanRenderer
         */


        function BooleanRenderer() {
          var _this;

          _classCallCheck(this, BooleanRenderer);

          _this = _super.call(this); // will this affect BBj bui ?

          _this._gui = document.createElement('span');
          _this._gui.className = 'boolRenderer';
          _this._gui.style.fontFamily = '"Segoe UI Symbol",Trebuchet, Arial, sans-serif';
          return _this;
        }
        /**
         *  @inheritDoc
         */


        _createClass(BooleanRenderer, [{
          key: "init",
          value: function init(params) {
            this.refresh(params, true);
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "getGui",
          value: function getGui() {
            return this._gui;
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (this._switcher) {
              this._switcher.destroy();
            }
          }
          /**
           * Refresh the cell
           *
           * @param {Object} params cell renderer params
           * @param {Boolean} isInit true when this method is being called in `init` phase , false otherwise
           *
           * @return {Boolean} true if the refresh succeeded, otherwise return false.
           */
          // eslint-disable-next-line no-unused-vars

        }, {
          key: "refresh",
          value: function refresh(params, isInit) {
            var value = params.valueFormatted ? params.valueFormatted : params.value;

            if (value === null || typeof value === 'undefined') {
              this._gui.innerHTML = '';
            } else {
              value = String(value);
              var booleanTrueRenderValue = String(this.getOption('booleanTrueRenderValue', params, 'switch'));
              var booleanFalseRenderValue = String(this.getOption('booleanFalseRenderValue', params, 'switch'));
              var booleanTrueValue = [].concat(this.getOption('booleanTrueValue', params, [true])).map(function (x) {
                return String(x);
              });
              var booleanFalseValue = [].concat(this.getOption('booleanFalseValue', params, [false])).map(function (x) {
                return String(x);
              }); // handle true values

              if (booleanTrueValue.indexOf(value) > -1) {
                if (!booleanTrueRenderValue.length || booleanTrueRenderValue === 'switch') {
                  var switcher = this._getSwitcher(params);

                  switcher.setChecked(true);
                  this._gui.innerHTML = '';

                  this._gui.appendChild(switcher.getGui());
                } else {
                  this._gui.innerHTML = booleanTrueRenderValue;
                }
              } // handle false values
              else if (booleanFalseValue.indexOf(value) > -1) {
                  if (!booleanFalseRenderValue.length || booleanFalseRenderValue === 'switch') {
                    var _switcher = this._getSwitcher(params);

                    _switcher.setChecked(false);

                    this._gui.innerHTML = '';

                    this._gui.appendChild(_switcher.getGui());
                  } else {
                    this._gui.innerHTML = booleanFalseRenderValue;
                  }
                } else {
                  this._gui.innerHTML = value;
                }
            }

            return true;
          }
          /**
           * Get switch instance if available , or create it otherwise
           *
           * @param {Object} params
           *
           * @return {BooleanSwitch} switch instance
           */

        }, {
          key: "_getSwitcher",
          value: function _getSwitcher(params) {
            if (!this._switcher) {
              this._switcher = new __WEBPACK_IMPORTED_MODULE_1__BooleanSwitch__["a"
              /* default */
              ]();

              this._switcher.setDisabled(true);

              this._switcher.init(params);
            }

            return this._switcher;
          }
        }]);

        return BooleanRenderer;
      }(__WEBPACK_IMPORTED_MODULE_0__Component__["a"
      /* default */
      ]);
      /* harmony default export */


      __webpack_exports__["a"] = BooleanRenderer;
      /***/
    },
    /* 53 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__BooleanFilter__ = __webpack_require__(54);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__BooleanFilter__["a"
      /* default */
      ];
      /***/
    },
    /* 54 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss__ = __webpack_require__(55);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__style_scss__);

      var _class, _temp;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var toTitleCase = function toTitleCase(phrase) {
        return phrase.toLowerCase().split(' ').map(function (word) {
          return word.charAt(0).toUpperCase() + word.slice(1);
        }).join(' ');
      };

      var stripHTML = function stripHTML(html) {
        var tmp = document.createElement('DIV');
        tmp.innerHTML = html;
        return tmp.textContent || tmp.innerText || '';
      };
      /**
       * Booleans Filter
       *
       * Handle boolean values Filtering
       *
       * ## Options
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **booleanUsedTrueValue**   | undefined    | the value to use when the filter displays the true state . in case it is undefined then we use the first item in **booleanTrueValue[]**
       * | **booleanUsedFalseValue**   | undefined    | the value to use when the filter displays the false state. in case it is undefined then we use the first item in **booleanFalseValue[]**
       * | **booleanTrueValue[]**       | true(bool)  	| The options describes what is considered `true`                                                                                	|
       * | **booleanFalseValue[]**      | false(bool) 	| The options describes what is considered `false`
       * | **clearButton**   | false    |  Set to true to have the filter use a Clear button. The Clear button will clear the (form) details of the filter without removing any active filters on the column.
       * | **applyButton**   | false    |  Set to true to have the filter use an Apply button. If the Apply button is present, then the filter is only applied after the user hits the Apply button.
       * | **resetButton**   | false    |  Set to true to have the filter use a Reset button. The Reset button will clear the details of the filter and any active filters on that column.
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var BooleanFilter = (_class = (_temp = /*#__PURE__*/function (_Component) {
        _inherits(BooleanFilter, _Component);

        var _super = _createSuper(BooleanFilter);
        /**
         * True , false translation
         *
         * @type {Object}
         */

        /**
         * Construct new BooleanFilter
         */


        function BooleanFilter() {
          var _this;

          _classCallCheck(this, BooleanFilter);

          _this = _super.call(this);
          _this._booleanFilterTranslation = {};
          _this._gui = document.createElement('div');
          _this._gui.className = 'booleanFilter ag-filter-body-wrapper';
          _this._gui.tabIndex = '0';
          return _this;
        }
        /**
         * @inheritDoc
         */


        _createClass(BooleanFilter, [{
          key: "init",
          value: function init(params) {
            var translate = params.api.gridOptionsWrapper.getLocaleTextFunc();
            var isClearFilter = this.getOption('clearButton', params, false);
            var isResetButton = this.getOption('resetButton', params, false);
            var isApplyButton = this.getOption('applyButton', params, false);
            this._trueValue = [].concat(this.getOption('booleanTrueValue', params, [true])).map(function (x) {
              return String(x);
            });
            this._falseValue = [].concat(this.getOption('booleanFalseValue', params, [false])).map(function (x) {
              return String(x);
            });
            this._usedTrueValue = String(this.getOption('booleanUsedTrueValue', params, this._trueValue[0]));
            this._usedFalseValue = String(this.getOption('booleanUsedFalseValue', params, this._falseValue[0]));
            this._booleanFilterTranslation = this.getOption('booleanFilterTranslation', params, {
              "true": translate('booleanTrue', toTitleCase(String(this._usedTrueValue))),
              "false": translate('booleanFalse', toTitleCase(String(this._usedFalseValue))),
              reset: translate('booleanReset', translate('resetFilter', 'Reset Filter'))
            });
            this._params = params;
            this._filterText = null;
            this._onRadioChange = this._onRadioChange.bind(this, isApplyButton); // create body

            var body = document.createElement('div');
            body.className = 'booleanFilter__body ag-filter-body';
            body.style.padding = '5px 15px';
            body.innerHTML =
            /* html */
            "\n      <div class=\"booleanFilter__body__labels\">\n\n        <label class=\"ag-input-field-label ag-label ag-radio-button-label\">       \n            <div class=\"ag-wrapper-true ag-wrapper ag-input-wrapper ag-radio-button-input-wrapper\">\n              <input class=\"true-input ag-input-field-input ag-radio-button-input\" type=\"radio\" name=\"boolean\" value=\"true\"/>              \n          </div> \n          <span>".concat(this._booleanFilterTranslation["true"], "</span>\n        </label>\n\n\n        <label class=\"ag-input-field-label ag-label ag-radio-button-label\">       \n            <div class=\"ag-wrapper-false ag-wrapper ag-input-wrapper ag-radio-button-input-wrapper\">\n              <input class=\"false-input ag-input-field-input ag-radio-button-input\" type=\"radio\" name=\"boolean\" value=\"false\"/>              \n          </div> \n          <span>").concat(this._booleanFilterTranslation["false"], "</span>\n        </label>\n          \n          ").concat(!isResetButton ?
            /* html */
            "\n              <label class=\"ag-input-field-label ag-label ag-radio-button-label\">       \n                  <div class=\"ag-wrapper-reset ag-wrapper ag-input-wrapper ag-radio-button-input-wrapper ag-checked\">\n                    <input class=\"reset-input ag-input-field-input ag-radio-button-input\" type=\"radio\" name=\"boolean\" value=\"\" checked/>              \n                </div> \n                <span>".concat(this._booleanFilterTranslation.reset, "</span>\n              </label>                \n              ") : '', "       \n        </div>\n    ");
            body.addEventListener('change', this._onRadioChange);

            this._gui.appendChild(body); // create apply filter panel


            var applyFilterPanel = document.createElement('div');
            applyFilterPanel.className = "booleanFilter__body__applyPanel ag-filter-apply-panel ag-hidden";
            applyFilterPanel.innerHTML =
            /* html */
            "\n      <button class=\"ag-standard-button ag-filter-apply-panel-button clear ".concat(!isClearFilter && 'ag-hidden', "\" type=\"button\">").concat(translate('clearFilter', 'Clear Filter'), "</button>\n      <button class=\"ag-standard-button ag-filter-apply-panel-button reset ").concat(!isResetButton && 'ag-hidden', "\" type=\"button\">").concat(translate('resetFilter', 'Reset Filter'), "</button>\n      <button class=\"ag-standard-button ag-filter-apply-panel-button apply ").concat(!isApplyButton && 'ag-hidden', "\" type=\"button\">").concat(translate('applyFilter', 'Apply Filter'), "</button>\n    ");

            if (isClearFilter || isResetButton || isApplyButton) {
              applyFilterPanel.classList.remove('ag-hidden');
            }

            applyFilterPanel.addEventListener('click', this._ApplyFilterPanelButtonClick);

            this._gui.appendChild(applyFilterPanel);
          }
          /**
           * @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this._gui.querySelector('.booleanFilter__body__labels').removeEventListener('change', this._onRadioChange);

            this._gui.querySelector('.booleanFilter__body__applyPanel').removeEventListener('click', this._ApplyFilterPanelButtonClick);
          }
          /**
           * Check whether selected filter matches the passed cell data
           *
           * @param {Object} params
           *
           * @return {Boolean} true when pass, false otherwise
           */

        }, {
          key: "doesFilterPass",
          value: function doesFilterPass(params) {
            // eslint-disable-next-line no-prototype-builtins
            var value = String( // eslint-disable-next-line no-prototype-builtins
            this._params.hasOwnProperty('filterValueGetter') ? this._params.filterValueGetter(params) : this._params.valueGetter(params));
            return this._filterText === 'true' ? this._trueValue.indexOf(value) > -1 : this._falseValue.indexOf(value) > -1;
          }
          /**
           * Check whether the component is applying any filter on the column
           *
           * @return {Boolean}
           **/

        }, {
          key: "isFilterActive",
          value: function isFilterActive() {
            return this._filterText !== null && this._filterText !== undefined && this._filterText !== '';
          }
          /**
           * Gets the filter state. If filter is not active, then should return null/undefined.
           * The grid calls getModel() on all active filters when gridApi.getFilterModel() is called.
           *
           * @return Object | null the filter state
           */

        }, {
          key: "getModel",
          value: function getModel() {
            if (!this.isFilterActive()) {
              return null;
            }

            var model = {
              value: this._filterText,
              filterType: 'boolean'
            };
            return model;
          }
          /**
           * Restores the filter state. Called by the grid after gridApi.setFilterModel(model) is called.
           * The grid will pass undefined/null to clear the filter.
           *
           * @param {Object | null} model
           */

        }, {
          key: "setModel",
          value: function setModel(model) {
            /* eslint-disable no-prototype-builtins */
            this._filterText = model && model.hasOwnProperty('value') ? model.value : '';
            var filterTextAsString = String(this._filterText);

            var body = this._gui.querySelector('.booleanFilter__body');

            body.querySelectorAll('input[type="radio"]').forEach(function (i) {
              if (i.value == filterTextAsString) {
                i.checked = true;
              } else {
                i.checked = false;
              }
            });
          }
          /**
           * Get the filter model as plain string to display in the floating filter input
           *
           * @param {Object | null} model
           */

        }, {
          key: "getModelAsString",
          value: function getModelAsString(model) {
            if (!model) {
              return '';
            }

            return stripHTML(model.value === 'true' ? this._booleanFilterTranslation["true"] : this._booleanFilterTranslation["false"]);
          }
          /**
           * Reset the filter state
           */

        }, {
          key: "reset",
          value: function reset() {
            var body = this._gui.querySelector('.booleanFilter__body');

            body.querySelectorAll('input[type="radio"]').forEach(function (i) {
              i.checked = false;
            });
            body.querySelector('.ag-wrapper-true').classList.remove('ag-checked');
            body.querySelector('.ag-wrapper-false').classList.remove('ag-checked');

            try {
              body.querySelector('.ag-wrapper-reset').classList.remove('ag-checked');
            } catch (e) {
              /* pass */
            }

            this._filterText = null;
          }
          /**
           * Listen to selection changes in the filter radio buttons and update the current filter text
           *
           * @param {Event} e
           */

        }, {
          key: "_onRadioChange",
          value: function _onRadioChange(isApplyButton, e) {
            var target = e.target;
            this._filterText = target.value;

            var body = this._gui.querySelector('.booleanFilter__body');

            if (body) {
              if (target.classList.contains('true-input')) {
                body.querySelector('.ag-wrapper-true').classList.add('ag-checked');
                body.querySelector('.ag-wrapper-false').classList.remove('ag-checked');

                try {
                  body.querySelector('.ag-wrapper-reset').classList.remove('ag-checked');
                } catch (e) {
                  /* pass */
                }
              } else if (target.classList.contains('false-input')) {
                body.querySelector('.ag-wrapper-true').classList.remove('ag-checked');
                body.querySelector('.ag-wrapper-false').classList.add('ag-checked');

                try {
                  body.querySelector('.ag-wrapper-reset').classList.remove('ag-checked');
                } catch (e) {
                  /* pass */
                }
              } else {
                body.querySelector('.ag-wrapper-true').classList.remove('ag-checked');
                body.querySelector('.ag-wrapper-false').classList.remove('ag-checked');

                try {
                  body.querySelector('.ag-wrapper-reset').classList.add('ag-checked');
                } catch (e) {
                  /* pass */
                }
              }
            }

            if (false === isApplyButton) {
              this._params.filterChangedCallback();
            }
          }
          /**
           * Listen to the button clicks in the buttons panel and apply the chosen action
           *
           * @param {Event} e
           */

        }, {
          key: "_ApplyFilterPanelButtonClick",
          value: function _ApplyFilterPanelButtonClick(e) {
            var target = e.target;

            if (target.nodeName === 'BUTTON') {
              if (target.classList.contains('reset')) {
                this.reset();

                this._params.filterChangedCallback();
              } else if (target.classList.contains('clear')) {
                this.reset();
              } else if (target.classList.contains('apply')) {
                this._params.filterChangedCallback();
              }
            }
          }
        }]);

        return BooleanFilter;
      }(__WEBPACK_IMPORTED_MODULE_2__Component__["a"
      /* default */
      ]), _temp), (_applyDecoratedDescriptor(_class.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "init"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "destroy"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_ApplyFilterPanelButtonClick", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_ApplyFilterPanelButtonClick"), _class.prototype)), _class);
      /* harmony default export */

      __webpack_exports__["a"] = BooleanFilter;
      /***/
    },
    /* 55 */

    /***/
    function (module, exports, __webpack_require__) {
      var content = __webpack_require__(56);

      if (typeof content === 'string') content = [[module.i, content, '']];
      var transform;
      var insertInto;
      var options = {
        "hmr": true
      };
      options.transform = transform;

      options.insertInto = function () {
        return window.parent.document.head;
      };

      var update = __webpack_require__(4)(content, options);

      if (content.locals) module.exports = content.locals;

      if (false) {}
      /***/

    },
    /* 56 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(3)(false); // imports
      // module

      exports.push([module.i, ".booleanFilter__body__labels label{display:block;padding:6px}.booleanFilter__body__labels label{display:block;padding:6px 0}.booleanFilter__body__labels label span{padding-left:6px}\n", ""]); // exports

      /***/
    },
    /* 57 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__NumberEditor__ = __webpack_require__(58);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__NumberEditor__["a"
      /* default */
      ];
      /***/
    },
    /* 58 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss__ = __webpack_require__(59);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__style_scss__);

      var _class;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Numbers Editor
       *
       * Handle number values Editing
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **numberMinValue**   | undefined    | min allowed value
       * | **numberMaxValue**   | undefined    | max allowed value
       * | **numberStepValue**       | undefined  	| number of step by increment or decrement
       * | **numberMask**       | undefined  	| a bbj number mask to validate the number against
       * |**numberGroupingSeparator** | , | a char which will be used as a grouping separator. The options is used only when **numberMask** is defined |
       * |**numberDecimalSeparator** | . | a char which will be used as a decimal separator. The options is used only when **numberMask** is defined  |
       * |**numberForceTrailingZeros** | false | Affects the output by switching the way a mask with "#" characters in the trailing positions is filled. for example, the function NumberMask.mask(.10:"#.##") returns .10 instead of .1 . The options is used only when **numberMask** is defined|
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var NumberEditor = (_class = /*#__PURE__*/function (_Component) {
        _inherits(NumberEditor, _Component);

        var _super = _createSuper(NumberEditor);

        function NumberEditor() {
          _classCallCheck(this, NumberEditor);

          return _super.apply(this, arguments);
        }

        _createClass(NumberEditor, [{
          key: "init",

          /**
           *  @inheritDoc
           */
          value: function init(params) {
            var min = this.getOption('numberMinValue', params);
            var max = this.getOption('numberMaxValue', params);
            var step = this.getOption('numberStepValue', params);
            var mask = this.getOption('numberMask', params);
            var startValue;
            this._focusAfterAttached = params.cellStartedEdit;

            if (this._focusAfterAttached) {
              var keyPressBackspaceOrDelete = params.keyPress == 32 || params.keyPress == 46; // space // delete

              if (keyPressBackspaceOrDelete) {
                startValue = '';
              } else if (params.charPress) {
                startValue = params.charPress;
              } else {
                startValue = params.value;

                if (params.keyPress != 113) {
                  //F2
                  this._highlightAllOnFocus = true;
                }
              }
            } else {
              startValue = params.value;
            } // make params it accessible from tall methods


            this._params = params; // create the input wrapper

            this._gui = document.createElement('label');
            this._gui.className = 'numberEditor ag-cell-edit-wrapper';
            this._gui.tabIndex = '0';
            this._gui.innerHTML =
            /* html */
            "\n    <div class=\"ag-cell-editor ag-labeled ag-label-align-left ag-text-field ag-input-field\">\n      <div class=\"ag-wrapper ag-input-wrapper ag-text-field-input-wrapper\">\n      </div>\n    </div>\n    "; // create the input

            this._inputGeneratedId = Math.random().toString(16).slice(2, 10); // generate random id

            this._input = document.createElement('input');
            this._input.className = 'numberEditor__input ag-cell-edit-input';
            this._input.id = "el-".concat(this._inputGeneratedId);
            this._input.type = mask ? 'text' : 'number';
            this._input.value = startValue;
            this._input.tabIndex = 0; // place the input inside the wrapper

            this._gui.querySelector('.ag-input-wrapper').appendChild(this._input);

            if (min !== null) {
              mask ? this._input.dataset.min = min : this._input.min = min;
            }

            if (max !== null) {
              mask ? this._input.dataset.max = max : this._input.max = max;
            }

            if (step !== null) {
              mask ? this._input.dataset.step = step : this._input.step = step;
            } // If there is a mask then we use the `Basis.InputMasking.NumberInput`


            if (mask) {
              var groupingSeparator = this.getOption('numberGroupingSeparator', params, this.getOption('numberGroupSep', params));
              var decimalSeparator = this.getOption('numberDecimalSeparator', params, this.getOption('numberDecimalSep', params));
              var forceTrailingZeros = this.getOption('numberForceTrailingZeros', params);

              if (groupingSeparator !== null) {
                this._input.dataset.groupingSeparator = groupingSeparator;
              }

              if (decimalSeparator !== null) {
                this._input.dataset.decimalSeparator = decimalSeparator;
              }

              if (forceTrailingZeros !== null) {
                this._input.dataset.forceTrailingZeros = forceTrailingZeros;
              }

              this._input.dataset.mask = mask;
              this._numberInput = new Basis.InputMasking.NumberInput({
                elements: [this._input],
                // doc: this.getDoc(params),
                onUpdate: this._onNumberInputUpdate,
                onInvalid: this._onNumberInputInvalid
              });
            } else {
              this._input.addEventListener('keydown', this._onInputKeyDownUp);

              this._input.addEventListener('keyup', this._onInputKeyDownUp);

              this._input.addEventListener('change', this._onChange);
            }

            this._gui.addEventListener('keydown', this._onComponentKeyDown); // update `currentValue` the value which this component is managing


            this._currentValue = startValue;
            this.__isMasked__ = mask && mask.length;
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (!this.__isMasked__) {
              this._input.removeEventListener('keydown', this._onInputKeyDownUp);

              this._input.removeEventListener('keyup', this._onInputKeyDownUp);

              this._input.removeEventListener('change', this._onChange);
            } else {
              this._numberInput.destroy();
            }

            this._gui.removeEventListener('keydown', this._onComponentKeyDown);
          }
          /**
           * Gets called once after GUI is attached to DOM.
           *
           * Make sure container is always focused to listen to key changes
           */

        }, {
          key: "afterGuiAttached",
          value: function afterGuiAttached() {
            if (!this.__isMasked__) {
              this._validateInput(this._input);
            }

            if (this._highlightAllOnFocus) {
              this._input.select();
            } else {
              if (this._focusAfterAttached) {
                this.focusIn();
              }
            }
          }
          /**
           * Get The component value
           *
           * @return {Number}
           */

        }, {
          key: "getValue",
          value: function getValue() {
            var casted = Number(this._currentValue);
            var retValue = isNaN(casted) ? this._currentValue : casted;
            return this.__isMasked__ ? retValue : this._params.parseValue(retValue);
          }
          /**
           * If doing full row edit, then gets called when tabbing into the cell.
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            if (!this.__isMasked__) {
              this._input.focus();
            } else {
              this._input.click();
            }
          }
          /**
           * Gets called once after initialized and returns false so the editor appears in the cell
           *
           * @return {Boolean} always false
           **/

        }, {
          key: "isPopup",
          value: function isPopup() {
            return false;
          }
          /**
           * Update `currentValue` when the checkbox value is changed
           */

        }, {
          key: "_onChange",
          value: function _onChange(event) {
            var isValid = this._validateInput(event.target);

            if (isValid) {
              this._currentValue = this._input.value;
            }
          }
          /**
           * Update the current value when the NumberInput components fire the update
           * event.
           *
           * @param {String} _masked  the masked value
           * @param {Number} unmasked  the unmasked value
           */

        }, {
          key: "_onNumberInputUpdate",
          value: function _onNumberInputUpdate(_masked, unmasked) {
            this._currentValue = unmasked;
            this.focusIn(); // we pass the last captured event back to the grid to handle it internally

            if (this.__lastComponentKeyboardPress__) {
              this._params.onKeyDown(this.__lastComponentKeyboardPress__);

              this.__lastComponentKeyboardPress__ = null;
            }
          }
          /**
           * On invalid inputs , update the input with a custom validity message
           *
           * @param {String|Object} error the error message reported by NumberInput
           * @param {HTMLElement} input The input element used instance
           */

        }, {
          key: "_onNumberInputInvalid",
          value: function _onNumberInputInvalid(error, input) {
            this.focusIn(); // restore the original value of the cell

            this._currentValue = this._params.value;

            if (typeof error === 'string') {
              input.setCustomValidity(error);
            } else {
              input.setCustomValidity(error.message);
            }
          }
          /**
           * Capture all keyboard events to allow value processing by the NumberInput component
           *
           * @param {KeyboardEvent} e
           */

        }, {
          key: "_onComponentKeyDown",
          value: function _onComponentKeyDown(e) {
            var key = event.which || event.keyCode;
            var isNavigationKey = key === 37 || // left
            key === 38 || // up
            key === 39 || // right
            key === 40 || // down
            key === 33 || // page up
            key === 34 || // page down
            key === 35 || // page home
            key === 36 || // page end
            key === 13; // enter

            if (isNavigationKey) {
              event.stopPropagation(); // save the last capture key so NumberInput can pass it again to the grid.

              this.__lastComponentKeyboardPress__ = e;
            }
          }
          /**
           * Listen to key changes and validate the input
           *
           * @param {Event} event
           */

        }, {
          key: "_onInputKeyDownUp",
          value: function _onInputKeyDownUp(event) {
            var isValid = this._validateInput(event.target);

            if (!isValid) {
              return;
            }

            var key = event.which || event.keyCode;

            if (key == 38 || key == 40) {
              // top | down
              this._currentValue = this._input.value;
              event.stopPropagation();
            } else if (key == 13 || key === 9) {
              // enter
              this._currentValue = this._input.value;
            } // we pass the last captured event back to the grid to handle it internally


            if (this.__lastComponentKeyboardPress__) {
              this._params.onKeyDown(this.__lastComponentKeyboardPress__);

              this.__lastComponentKeyboardPress__ = null;
            }
          }
          /**
           * Validate the given input element
           *
           * @param {HTMLInputElement} input input element
           *
           * @return {Boolean} true when valid , false otherwise
           */

        }, {
          key: "_validateInput",
          value: function _validateInput(input) {
            var isValid = input.checkValidity();

            if (!isValid) {
              input.classList.add('bbj-mask-error');
              input.classList.remove('bbj-mask-success'); // restore the original value

              this._currentValue = this._params.value;
            } else {
              input.classList.remove('bbj-mask-error');
              input.classList.add('bbj-mask-success');
            }

            return isValid;
          }
        }]);

        return NumberEditor;
      }(__WEBPACK_IMPORTED_MODULE_0__Component__["a"
      /* default */
      ]), (_applyDecoratedDescriptor(_class.prototype, "init", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "init"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "destroy"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onChange", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onChange"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onNumberInputUpdate", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onNumberInputUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onNumberInputInvalid", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onNumberInputInvalid"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onComponentKeyDown", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onComponentKeyDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onInputKeyDownUp", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onInputKeyDownUp"), _class.prototype)), _class);
      /* harmony default export */

      __webpack_exports__["a"] = NumberEditor;
      /***/
    },
    /* 59 */

    /***/
    function (module, exports, __webpack_require__) {
      var content = __webpack_require__(60);

      if (typeof content === 'string') content = [[module.i, content, '']];
      var transform;
      var insertInto;
      var options = {
        "hmr": true
      };
      options.transform = transform;

      options.insertInto = function () {
        return window.parent.document.head;
      };

      var update = __webpack_require__(4)(content, options);

      if (content.locals) module.exports = content.locals;

      if (false) {}
      /***/

    },
    /* 60 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(3)(false); // imports
      // module

      exports.push([module.i, ".numberEditor{overflow:hidden}.numberEditor .numberInputMask__wrap{width:100%;height:100%;box-sizing:border-box;outline:none;display:block;padding:0;margin:0;display:flex;flex:1 1 auto;align-items:center;line-height:normal;position:relative;overflow:hidden}.numberEditor .bbj-mask-error{box-shadow:0 -2px 0 #e91e63 inset}.numberEditor .bbj-mask-success{box-shadow:0 -2px 0 #4caf50 inset}.numberEditor__input{padding-left:6px;border:thin solid var(--ag-input-focus-border-color, rgba(33,150,243,0.4));border-radius:3px;background-color:var(--ag-background-color);color:inherit}.ag-theme-alpine .numberEditor__input,.ag-theme-balham .numberEditor__input,.ag-theme-material .numberEditor__input{background-color:var(--ag-background-color, #fff)}.ag-theme-alpine-dark .numberEditor__input,.ag-theme-balham-dark .numberEditor__input{background-color:var(--ag-background-color, #2d3436)}\n", ""]); // exports

      /***/
    },
    /* 61 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__TextEditor__ = __webpack_require__(62);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__TextEditor__["a"
      /* default */
      ];
      /***/
    },
    /* 62 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss__ = __webpack_require__(63);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__style_scss__);

      var _class;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Text Editor
       *
       * Handle text values Editing
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **textPattern**   | undefined    | A regular expression that the input's value must match in order for the value to pass constraint validation
       * | **textRequired**   | undefined    | Boolean. A value is required to consider the input valid
       * | **textMask**   | undefined    | A bbj string mask to validate the value
       * | **textTitle**   | null    | The input title , when null and the **textMask** options is defined , then we use the mask as title , when set to `default` we the browser's default title , otherwise the value defined in this option
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var TextEditor = (_class = /*#__PURE__*/function (_Component) {
        _inherits(TextEditor, _Component);

        var _super = _createSuper(TextEditor);

        function TextEditor() {
          _classCallCheck(this, TextEditor);

          return _super.apply(this, arguments);
        }

        _createClass(TextEditor, [{
          key: "init",

          /**
           *  @inheritDoc
           */
          value: function init(params) {
            var pattern = this.getOption('textPattern', params);
            var required = this.getOption('textRequired', params);
            var mask = this.getOption('textMask', params);
            var title = this.getOption('textTitle', params);
            var startValue;
            this._focusAfterAttached = params.cellStartedEdit;

            if (this._focusAfterAttached) {
              var keyPressBackspaceOrDelete = params.keyPress == 32 || params.keyPress == 46; // space // delete

              if (keyPressBackspaceOrDelete) {
                startValue = '';
              } else if (params.charPress) {
                startValue = params.charPress;
              } else {
                startValue = params.value;

                if (params.keyPress != 113) {
                  //F2
                  this._highlightAllOnFocus = true;
                }
              }
            } else {
              startValue = params.value;
            }

            this._params = params;
            this._gui = document.createElement('div');
            this._gui.className = 'textEditor ag-cell-edit-wrapper';
            this._gui.tabIndex = '0';
            this._gui.innerHTML =
            /* html */
            "\n    <div class=\"ag-cell-editor ag-labeled ag-label-align-left ag-text-field ag-input-field\">\n      <div class=\"ag-wrapper ag-input-wrapper ag-text-field-input-wrapper\">\n      </div>\n    </div>\n    "; // input

            this._input = document.createElement('input');
            this._input.className = 'textEditor__input ag-cell-edit-input ag-input-field-input ag-text-field-input';
            this._input.id = "el-".concat(Math.random().toString(16).slice(2, 10)); // generate random id

            this._input.type = 'text';
            this._input.value = startValue;
            this._input.tabIndex = 0;

            this._gui.querySelector('.ag-input-wrapper').appendChild(this._input);

            if (pattern !== null) {
              this._input.setAttribute('pattern', pattern);
            }

            if (required === true) {
              this._input.setAttribute('required', 'required');
            }

            if (title !== null) {
              if (title !== 'default') {
                this._input.title = title;
              }
            } else if (mask) {
              this._input.title = mask;
            } // If there is a mask then we use the `Basis.InputMasking.TextInput`


            if (mask) {
              this._input.dataset.mask = mask;
              this._textInput = new Basis.InputMasking.TextInput({
                elements: [this._input],
                doc: this.getDoc(params),
                onUpdate: this._onTextInputUpdate,
                onInvalid: this._onTextInputInvalid
              });
            } else {
              this._input.addEventListener('keydown', this._onInputKeyDownUp);

              this._input.addEventListener('keyup', this._onInputKeyDownUp);

              this._input.addEventListener('input', this._onChange);

              this._input.addEventListener('change', this._onChange);
            }

            this._gui.addEventListener('keydown', this._onComponentKeyDown); // update `currentValue` the value which this component is managing


            this._currentValue = startValue;
            this.__isMasked__ = mask && mask.length;
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            if (!this.__isMasked__) {
              this._input.removeEventListener('keydown', this._onInputKeyDownUp);

              this._input.removeEventListener('keyup', this._onInputKeyDownUp);

              this._input.removeEventListener('input', this._onChange);

              this._input.removeEventListener('change', this._onChange);
            } else {
              this._textInput.destroy();
            }

            this._gui.removeEventListener('keydown', this._onComponentKeyDown);
          }
          /**
           * Gets called once after GUI is attached to DOM.
           *
           * Make sure container is always focused to listen to key changes
           */

        }, {
          key: "afterGuiAttached",
          value: function afterGuiAttached() {
            if (!this.__isMasked__) {
              this._validateInput(this._input);
            }

            if (this._highlightAllOnFocus) {
              this._input.select();
            } else {
              if (this._focusAfterAttached) {
                this.focusIn();
              }
            }
          }
          /**
           * Get The component value
           *
           * @return {Number}
           */

        }, {
          key: "getValue",
          value: function getValue() {
            return this._params.parseValue(this._currentValue);
          }
          /**
           * If doing full row edit, then gets called when tabbing into the cell.
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this._input.focus();
          }
          /**
           * Gets called once after initialized and returns false so the editor appears in the cell
           *
           * @return {Boolean} always false
           **/

        }, {
          key: "isPopup",
          value: function isPopup() {
            return false;
          }
          /**
           * Update the current value when the TextInput component fires the update
           * event.
           *
           * @param {String} _masked  the masked value
           * @param {String} unmasked  the unmasked value
           */

        }, {
          key: "_onTextInputUpdate",
          value: function _onTextInputUpdate(_masked, unmasked, input) {
            this._currentValue = unmasked;
            input.setCustomValidity('');
            this.focusIn(); // we pass the last captured event back to the grid to handle it internally

            if (this.__lastComponentKeyboardPress__) {
              this._params.onKeyDown(this.__lastComponentKeyboardPress__);

              this.__lastComponentKeyboardPress__ = null;
            }
          }
          /**
           * On invalid inputs , update the input with a custom validity message
           *
           * @param {String|Object} error the error message reported by TextInput
           * @param {HTMLElement} input The input element used instance
           */

        }, {
          key: "_onTextInputInvalid",
          value: function _onTextInputInvalid(error, input) {
            this.focusIn(); // restore the original value of the cell

            this._currentValue = this._params.value;

            if (typeof error === 'string') {
              input.setCustomValidity(error);
            }
          }
          /**
           * Capture all keyboard events to allow value processing by the NumberInput component
           *
           * @param {KeyboardEvent} e
           */

        }, {
          key: "_onComponentKeyDown",
          value: function _onComponentKeyDown(e) {
            var key = event.which || event.keyCode;
            var isNavigationKey = key === 37 || // left
            key === 38 || // up
            key === 39 || // right
            key === 40 || // down
            key === 33 || // page up
            key === 34 || // page down
            key === 35 || // page home
            key === 36 || // page end
            key === 13; // enter

            if (isNavigationKey) {
              event.stopPropagation(); // save the last capture key so NumberInput can pass it again to the grid.

              this.__lastComponentKeyboardPress__ = e;
            }
          }
          /**
           * Listen to key changes and validate the input
           *
           * @param {Event} event
           */

        }, {
          key: "_onInputKeyDownUp",
          value: function _onInputKeyDownUp(event) {
            var isValid = this._validateInput(event.target);

            if (!isValid) {
              return;
            }

            var key = event.which || event.keyCode;

            if (key == 13 || key === 9) {
              // enter
              this._currentValue = this._input.value;
            } // we pass the last captured event back to the grid to handle it internally


            if (this.__lastComponentKeyboardPress__) {
              this._params.onKeyDown(this.__lastComponentKeyboardPress__);

              this.__lastComponentKeyboardPress__ = null;
            }
          }
          /**
           * Update `currentValue` on the input value is changed and it is valid
           */

        }, {
          key: "_onChange",
          value: function _onChange(event) {
            var isValid = this._validateInput(event.target);

            if (isValid) {
              this._currentValue = this._input.value;
            }
          }
          /**
           * Validate the given input element
           *
           * @param {HTMLInputElement} input input element
           *
           * @return {Boolean} true when valid , false otherwise
           */

        }, {
          key: "_validateInput",
          value: function _validateInput(input) {
            var isValid = input.checkValidity();

            if (!isValid) {
              input.classList.add('bbj-mask-error');
              input.classList.remove('bbj-mask-success'); // restore the original value

              this._currentValue = this._params.value;
            } else {
              input.classList.remove('bbj-mask-error');
              input.classList.add('bbj-mask-success');
            }

            return isValid;
          }
        }]);

        return TextEditor;
      }(__WEBPACK_IMPORTED_MODULE_0__Component__["a"
      /* default */
      ]), (_applyDecoratedDescriptor(_class.prototype, "init", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "init"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "destroy"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onTextInputUpdate", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onTextInputUpdate"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onTextInputInvalid", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onTextInputInvalid"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onComponentKeyDown", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onComponentKeyDown"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onInputKeyDownUp", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onInputKeyDownUp"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onChange", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onChange"), _class.prototype)), _class);
      /* harmony default export */

      __webpack_exports__["a"] = TextEditor;
      /***/
    },
    /* 63 */

    /***/
    function (module, exports, __webpack_require__) {
      var content = __webpack_require__(64);

      if (typeof content === 'string') content = [[module.i, content, '']];
      var transform;
      var insertInto;
      var options = {
        "hmr": true
      };
      options.transform = transform;

      options.insertInto = function () {
        return window.parent.document.head;
      };

      var update = __webpack_require__(4)(content, options);

      if (content.locals) module.exports = content.locals;

      if (false) {}
      /***/

    },
    /* 64 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(3)(false); // imports
      // module

      exports.push([module.i, ".textEditor{overflow:hidden}.textEditor .textInputMask__wrap{width:100%;height:100%;box-sizing:border-box;outline:none;display:block;padding:0;margin:0;display:flex;flex:1 1 auto;align-items:center;line-height:normal;position:relative;overflow:hidden}.textEditor .bbj-mask-error{box-shadow:0 -2px 0 #e91e63 inset}.textEditor .bbj-mask-success{box-shadow:0 -2px 0 #4caf50 inset}.textEditor__input{padding-left:6px;border:thin solid var(--ag-input-focus-border-color, rgba(33,150,243,0.4));border-radius:3px;background-color:var(--ag-background-color);color:inherit}.ag-theme-alpine .textEditor__input,.ag-theme-balham .textEditor__input,.ag-theme-material .textEditor__input{background-color:var(--ag-background-color, #fff)}.ag-theme-alpine-dark .textEditor__input,.ag-theme-balham-dark .textEditor__input{background-color:var(--ag-background-color, #2d3436)}\n", ""]); // exports

      /***/
    },
    /* 65 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_lodash_es_template__ = __webpack_require__(66);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Numbers Editor
       *
       * Handle number values Editing
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **renderTemplate**   | undefined    | lodash template
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var TemplateRenderer = /*#__PURE__*/function (_Component) {
        _inherits(TemplateRenderer, _Component);

        var _super = _createSuper(TemplateRenderer);
        /**
         * Construct new TemplateRenderer
         */


        function TemplateRenderer() {
          var _this;

          _classCallCheck(this, TemplateRenderer);

          _this = _super.call(this); // will this affect BBj bui ?

          _this._gui = document.createElement('div');
          _this._gui.className = 'templateRenderer ag-cell-wrapper';
          _this._gui.style.width = '100%';
          _this._gui.style.height = '100%';
          _this._gui.style.lineHeight = 'normal';
          return _this;
        }
        /**
         *  @inheritDoc
         */


        _createClass(TemplateRenderer, [{
          key: "init",
          value: function init(params) {
            this.refresh(params, true);
          }
          /**
           *  @inheritDoc
           */

        }, {
          key: "getGui",
          value: function getGui() {
            return this._gui;
          }
          /**
           * Refresh the cell l
           *
           * @param {Object} params cell renderer params
           * @param {Boolean} isInit true when this method is being called in `init` phase , false otherwise
           *
           * @return {Boolean} true if the refresh succeeded, otherwise return false.
           */

        }, {
          key: "refresh",
          value: function refresh(params, isInit) {
            if (isInit) {
              this._compiledTemplate = Object(__WEBPACK_IMPORTED_MODULE_1_lodash_es_template__["a"
              /* default */
              ])(this.getOption('renderTemplate', params, ''));
            }

            var content;

            if (typeof this._compiledTemplate === 'function') {
              content = this._compiledTemplate({
                params: params
              });
            } else {
              content = params.valueFormatted ? params.valueFormatted : params.value;
            }

            this._gui.innerHTML = content;
            return true;
          }
        }]);

        return TemplateRenderer;
      }(__WEBPACK_IMPORTED_MODULE_0__Component__["a"
      /* default */
      ]);
      /* harmony default export */


      __webpack_exports__["a"] = TemplateRenderer;
      /***/
    },
    /* 66 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__assignInWith_js__ = __webpack_require__(67);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__attempt_js__ = __webpack_require__(96);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__baseValues_js__ = __webpack_require__(99);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__customDefaultsAssignIn_js__ = __webpack_require__(100);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__escapeStringChar_js__ = __webpack_require__(101);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__isError_js__ = __webpack_require__(32);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__isIterateeCall_js__ = __webpack_require__(25);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__keys_js__ = __webpack_require__(102);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__reInterpolate_js__ = __webpack_require__(35);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9__templateSettings_js__ = __webpack_require__(105);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10__toString_js__ = __webpack_require__(36);
      /** Used to match empty string literals in compiled template source. */


      var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      /**
       * Used to match
       * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
       */

      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      /** Used to ensure capturing order of template delimiters. */

      var reNoMatch = /($^)/;
      /** Used to match unescaped characters in compiled string literals. */

      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      /** Used for built-in method references. */

      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */

      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = __WEBPACK_IMPORTED_MODULE_9__templateSettings_js__["a"
        /* default */
        ].imports._.templateSettings || __WEBPACK_IMPORTED_MODULE_9__templateSettings_js__["a"
        /* default */
        ];

        if (guard && Object(__WEBPACK_IMPORTED_MODULE_6__isIterateeCall_js__["a"
        /* default */
        ])(string, options, guard)) {
          options = undefined;
        }

        string = Object(__WEBPACK_IMPORTED_MODULE_10__toString_js__["a"
        /* default */
        ])(string);
        options = Object(__WEBPACK_IMPORTED_MODULE_0__assignInWith_js__["a"
        /* default */
        ])({}, options, settings, __WEBPACK_IMPORTED_MODULE_3__customDefaultsAssignIn_js__["a"
        /* default */
        ]);
        var imports = Object(__WEBPACK_IMPORTED_MODULE_0__assignInWith_js__["a"
        /* default */
        ])({}, options.imports, settings.imports, __WEBPACK_IMPORTED_MODULE_3__customDefaultsAssignIn_js__["a"
        /* default */
        ]),
            importsKeys = Object(__WEBPACK_IMPORTED_MODULE_7__keys_js__["a"
        /* default */
        ])(imports),
            importsValues = Object(__WEBPACK_IMPORTED_MODULE_2__baseValues_js__["a"
        /* default */
        ])(imports, importsKeys);
        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '"; // Compile the regexp to match each delimiter.

        var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === __WEBPACK_IMPORTED_MODULE_8__reInterpolate_js__["a"
        /* default */
        ] ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
        // The sourceURL gets injected into the source that's eval-ed, so be careful
        // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
        // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.

        var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/[\r\n]/g, ' ') + '\n' : '';
        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

          source += string.slice(index, offset).replace(reUnescapedString, __WEBPACK_IMPORTED_MODULE_4__escapeStringChar_js__["a"
          /* default */
          ]); // Replace delimiters with snippets.

          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }

          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }

          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }

          index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.

          return match;
        });
        source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        // Like with sourceURL, we take care to not check the option's prototype,
        // as this configuration is a code injection vector.

        var variable = hasOwnProperty.call(options, 'variable') && options.variable;

        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        } // Cleanup code by stripping empty strings.


        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

        source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
        var result = Object(__WEBPACK_IMPORTED_MODULE_1__attempt_js__["a"
        /* default */
        ])(function () {
          return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
        }); // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.

        result.source = source;

        if (Object(__WEBPACK_IMPORTED_MODULE_5__isError_js__["a"
        /* default */
        ])(result)) {
          throw result;
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = template;
      /***/
    },
    /* 67 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__copyObject_js__ = __webpack_require__(68);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__createAssigner_js__ = __webpack_require__(78);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__keysIn_js__ = __webpack_require__(84);
      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */


      var assignInWith = Object(__WEBPACK_IMPORTED_MODULE_1__createAssigner_js__["a"
      /* default */
      ])(function (object, source, srcIndex, customizer) {
        Object(__WEBPACK_IMPORTED_MODULE_0__copyObject_js__["a"
        /* default */
        ])(source, Object(__WEBPACK_IMPORTED_MODULE_2__keysIn_js__["a"
        /* default */
        ])(source), object, customizer);
      });
      /* harmony default export */

      __webpack_exports__["a"] = assignInWith;
      /***/
    },
    /* 68 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__assignValue_js__ = __webpack_require__(69);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__baseAssignValue_js__ = __webpack_require__(17);
      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */


      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }

          if (isNew) {
            Object(__WEBPACK_IMPORTED_MODULE_1__baseAssignValue_js__["a"
            /* default */
            ])(object, key, newValue);
          } else {
            Object(__WEBPACK_IMPORTED_MODULE_0__assignValue_js__["a"
            /* default */
            ])(object, key, newValue);
          }
        }

        return object;
      }
      /* harmony default export */


      __webpack_exports__["a"] = copyObject;
      /***/
    },
    /* 69 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseAssignValue_js__ = __webpack_require__(17);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__eq_js__ = __webpack_require__(11);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */

      function assignValue(object, key, value) {
        var objValue = object[key];

        if (!(hasOwnProperty.call(object, key) && Object(__WEBPACK_IMPORTED_MODULE_1__eq_js__["a"
        /* default */
        ])(objValue, value)) || value === undefined && !(key in object)) {
          Object(__WEBPACK_IMPORTED_MODULE_0__baseAssignValue_js__["a"
          /* default */
          ])(object, key, value);
        }
      }
      /* harmony default export */


      __webpack_exports__["a"] = assignValue;
      /***/
    },
    /* 70 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseIsNative_js__ = __webpack_require__(71);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__getValue_js__ = __webpack_require__(77);
      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */


      function getNative(object, key) {
        var value = Object(__WEBPACK_IMPORTED_MODULE_1__getValue_js__["a"
        /* default */
        ])(object, key);
        return Object(__WEBPACK_IMPORTED_MODULE_0__baseIsNative_js__["a"
        /* default */
        ])(value) ? value : undefined;
      }
      /* harmony default export */


      __webpack_exports__["a"] = getNative;
      /***/
    },
    /* 71 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__isFunction_js__ = __webpack_require__(19);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isMasked_js__ = __webpack_require__(74);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isObject_js__ = __webpack_require__(8);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__toSource_js__ = __webpack_require__(76);
      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */


      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      /** Used to detect host constructors (Safari). */

      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      /** Used for built-in method references. */

      var funcProto = Function.prototype,
          objectProto = Object.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Used to detect if a method is native. */

      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */

      function baseIsNative(value) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_2__isObject_js__["a"
        /* default */
        ])(value) || Object(__WEBPACK_IMPORTED_MODULE_1__isMasked_js__["a"
        /* default */
        ])(value)) {
          return false;
        }

        var pattern = Object(__WEBPACK_IMPORTED_MODULE_0__isFunction_js__["a"
        /* default */
        ])(value) ? reIsNative : reIsHostCtor;
        return pattern.test(Object(__WEBPACK_IMPORTED_MODULE_3__toSource_js__["a"
        /* default */
        ])(value));
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseIsNative;
      /***/
    },
    /* 72 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(9);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /** Built-in value references. */

      var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"
      /* default */
      ] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"
      /* default */
      ].toStringTag : undefined;
      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = getRawTag;
      /***/
    },
    /* 73 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used for built-in method references. */

      var objectProto = Object.prototype;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      /* harmony default export */


      __webpack_exports__["a"] = objectToString;
      /***/
    },
    /* 74 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__coreJsData_js__ = __webpack_require__(75);
      /** Used to detect methods masquerading as native. */


      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(__WEBPACK_IMPORTED_MODULE_0__coreJsData_js__["a"
        /* default */
        ] && __WEBPACK_IMPORTED_MODULE_0__coreJsData_js__["a"
        /* default */
        ].keys && __WEBPACK_IMPORTED_MODULE_0__coreJsData_js__["a"
        /* default */
        ].keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();
      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */


      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isMasked;
      /***/
    },
    /* 75 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(10);
      /** Used to detect overreaching core-js shims. */


      var coreJsData = __WEBPACK_IMPORTED_MODULE_0__root_js__["a"
      /* default */
      ]['__core-js_shared__'];
      /* harmony default export */

      __webpack_exports__["a"] = coreJsData;
      /***/
    },
    /* 76 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used for built-in method references. */

      var funcProto = Function.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }
      /* harmony default export */


      __webpack_exports__["a"] = toSource;
      /***/
    },
    /* 77 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */

      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }
      /* harmony default export */


      __webpack_exports__["a"] = getValue;
      /***/
    },
    /* 78 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseRest_js__ = __webpack_require__(22);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isIterateeCall_js__ = __webpack_require__(25);
      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */


      function createAssigner(assigner) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__baseRest_js__["a"
        /* default */
        ])(function (object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

          if (guard && Object(__WEBPACK_IMPORTED_MODULE_1__isIterateeCall_js__["a"
          /* default */
          ])(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }

          object = Object(object);

          while (++index < length) {
            var source = sources[index];

            if (source) {
              assigner(object, source, index, customizer);
            }
          }

          return object;
        });
      }
      /* harmony default export */


      __webpack_exports__["a"] = createAssigner;
      /***/
    },
    /* 79 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__apply_js__ = __webpack_require__(24);
      /* Built-in method references for those with the same name as other `lodash` methods. */


      var nativeMax = Math.max;
      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return Object(__WEBPACK_IMPORTED_MODULE_0__apply_js__["a"
          /* default */
          ])(func, this, otherArgs);
        };
      }
      /* harmony default export */


      __webpack_exports__["a"] = overRest;
      /***/
    },
    /* 80 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseSetToString_js__ = __webpack_require__(81);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__shortOut_js__ = __webpack_require__(83);
      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */


      var setToString = Object(__WEBPACK_IMPORTED_MODULE_1__shortOut_js__["a"
      /* default */
      ])(__WEBPACK_IMPORTED_MODULE_0__baseSetToString_js__["a"
      /* default */
      ]);
      /* harmony default export */

      __webpack_exports__["a"] = setToString;
      /***/
    },
    /* 81 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__constant_js__ = __webpack_require__(82);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__defineProperty_js__ = __webpack_require__(18);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__identity_js__ = __webpack_require__(23);
      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */


      var baseSetToString = !__WEBPACK_IMPORTED_MODULE_1__defineProperty_js__["a"
      /* default */
      ] ? __WEBPACK_IMPORTED_MODULE_2__identity_js__["a"
      /* default */
      ] : function (func, string) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__defineProperty_js__["a"
        /* default */
        ])(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': Object(__WEBPACK_IMPORTED_MODULE_0__constant_js__["a"
          /* default */
          ])(string),
          'writable': true
        });
      };
      /* harmony default export */

      __webpack_exports__["a"] = baseSetToString;
      /***/
    },
    /* 82 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */

      function constant(value) {
        return function () {
          return value;
        };
      }
      /* harmony default export */


      __webpack_exports__["a"] = constant;
      /***/
    },
    /* 83 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used to detect hot functions by number of calls within a span of milliseconds. */

      var HOT_COUNT = 800,
          HOT_SPAN = 16;
      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeNow = Date.now;
      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }
      /* harmony default export */


      __webpack_exports__["a"] = shortOut;
      /***/
    },
    /* 84 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__arrayLikeKeys_js__ = __webpack_require__(28);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__baseKeysIn_js__ = __webpack_require__(94);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isArrayLike_js__ = __webpack_require__(12);
      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */


      function keysIn(object) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__isArrayLike_js__["a"
        /* default */
        ])(object) ? Object(__WEBPACK_IMPORTED_MODULE_0__arrayLikeKeys_js__["a"
        /* default */
        ])(object, true) : Object(__WEBPACK_IMPORTED_MODULE_1__baseKeysIn_js__["a"
        /* default */
        ])(object);
      }
      /* harmony default export */


      __webpack_exports__["a"] = keysIn;
      /***/
    },
    /* 85 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * The base implementation of `_.times` without support for iteratee shorthands
       * or max array length checks.
       *
       * @private
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       */

      function baseTimes(n, iteratee) {
        var index = -1,
            result = Array(n);

        while (++index < n) {
          result[index] = iteratee(index);
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseTimes;
      /***/
    },
    /* 86 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseIsArguments_js__ = __webpack_require__(87);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__ = __webpack_require__(6);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Built-in value references. */

      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */

      var isArguments = Object(__WEBPACK_IMPORTED_MODULE_0__baseIsArguments_js__["a"
      /* default */
      ])(function () {
        return arguments;
      }()) ? __WEBPACK_IMPORTED_MODULE_0__baseIsArguments_js__["a"
      /* default */
      ] : function (value) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__["a"
        /* default */
        ])(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      /* harmony default export */

      __webpack_exports__["a"] = isArguments;
      /***/
    },
    /* 87 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__ = __webpack_require__(6);
      /** `Object#toString` result references. */


      var argsTag = '[object Arguments]';
      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */

      function baseIsArguments(value) {
        return Object(__WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__["a"
        /* default */
        ])(value) && Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"
        /* default */
        ])(value) == argsTag;
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseIsArguments;
      /***/
    },
    /* 88 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (module) {
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(10);
        /* harmony import */


        var __WEBPACK_IMPORTED_MODULE_1__stubFalse_js__ = __webpack_require__(89);

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }
        /** Detect free variable `exports`. */


        var freeExports = ( false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && (false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Built-in value references. */

        var Buffer = moduleExports ? __WEBPACK_IMPORTED_MODULE_0__root_js__["a"
        /* default */
        ].Buffer : undefined;
        /* Built-in method references for those with the same name as other `lodash` methods. */

        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */

        var isBuffer = nativeIsBuffer || __WEBPACK_IMPORTED_MODULE_1__stubFalse_js__["a"
        /* default */
        ];
        /* harmony default export */

        __webpack_exports__["a"] = isBuffer;
        /* WEBPACK VAR INJECTION */
      }).call(__webpack_exports__, __webpack_require__(30)(module));
      /***/
    },
    /* 89 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */

      function stubFalse() {
        return false;
      }
      /* harmony default export */


      __webpack_exports__["a"] = stubFalse;
      /***/
    },
    /* 90 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseIsTypedArray_js__ = __webpack_require__(91);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__baseUnary_js__ = __webpack_require__(92);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__nodeUtil_js__ = __webpack_require__(93);
      /* Node.js helper references. */


      var nodeIsTypedArray = __WEBPACK_IMPORTED_MODULE_2__nodeUtil_js__["a"
      /* default */
      ] && __WEBPACK_IMPORTED_MODULE_2__nodeUtil_js__["a"
      /* default */
      ].isTypedArray;
      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */

      var isTypedArray = nodeIsTypedArray ? Object(__WEBPACK_IMPORTED_MODULE_1__baseUnary_js__["a"
      /* default */
      ])(nodeIsTypedArray) : __WEBPACK_IMPORTED_MODULE_0__baseIsTypedArray_js__["a"
      /* default */
      ];
      /* harmony default export */

      __webpack_exports__["a"] = isTypedArray;
      /***/
    },
    /* 91 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isLength_js__ = __webpack_require__(26);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(6);
      /** `Object#toString` result references. */


      var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          objectTag = '[object Object]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          weakMapTag = '[object WeakMap]';
      var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]';
      /** Used to identify `toStringTag` values of typed arrays. */

      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */

      function baseIsTypedArray(value) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__["a"
        /* default */
        ])(value) && Object(__WEBPACK_IMPORTED_MODULE_1__isLength_js__["a"
        /* default */
        ])(value.length) && !!typedArrayTags[Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"
        /* default */
        ])(value)];
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseIsTypedArray;
      /***/
    },
    /* 92 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */

      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseUnary;
      /***/
    },
    /* 93 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (module) {
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(20);

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }
        /** Detect free variable `exports`. */


        var freeExports = ( false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && (false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Detect free variable `process` from Node.js. */

        var freeProcess = moduleExports && __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__["a"
        /* default */
        ].process;
        /** Used to access faster Node.js helpers. */

        var nodeUtil = function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;

            if (types) {
              return types;
            } // Legacy `process.binding('util')` for Node.js < 10.


            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();
        /* harmony default export */


        __webpack_exports__["a"] = nodeUtil;
        /* WEBPACK VAR INJECTION */
      }).call(__webpack_exports__, __webpack_require__(30)(module));
      /***/
    },
    /* 94 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__isObject_js__ = __webpack_require__(8);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isPrototype_js__ = __webpack_require__(31);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__nativeKeysIn_js__ = __webpack_require__(95);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */

      function baseKeysIn(object) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_0__isObject_js__["a"
        /* default */
        ])(object)) {
          return Object(__WEBPACK_IMPORTED_MODULE_2__nativeKeysIn_js__["a"
          /* default */
          ])(object);
        }

        var isProto = Object(__WEBPACK_IMPORTED_MODULE_1__isPrototype_js__["a"
        /* default */
        ])(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseKeysIn;
      /***/
    },
    /* 95 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */

      function nativeKeysIn(object) {
        var result = [];

        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = nativeKeysIn;
      /***/
    },
    /* 96 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__apply_js__ = __webpack_require__(24);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__baseRest_js__ = __webpack_require__(22);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isError_js__ = __webpack_require__(32);
      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */


      var attempt = Object(__WEBPACK_IMPORTED_MODULE_1__baseRest_js__["a"
      /* default */
      ])(function (func, args) {
        try {
          return Object(__WEBPACK_IMPORTED_MODULE_0__apply_js__["a"
          /* default */
          ])(func, undefined, args);
        } catch (e) {
          return Object(__WEBPACK_IMPORTED_MODULE_2__isError_js__["a"
          /* default */
          ])(e) ? e : new Error(e);
        }
      });
      /* harmony default export */

      __webpack_exports__["a"] = attempt;
      /***/
    },
    /* 97 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__ = __webpack_require__(98);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(6);
      /** `Object#toString` result references. */


      var objectTag = '[object Object]';
      /** Used for built-in method references. */

      var funcProto = Function.prototype,
          objectProto = Object.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Used to infer the `Object` constructor. */

      var objectCtorString = funcToString.call(Object);
      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */

      function isPlainObject(value) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__["a"
        /* default */
        ])(value) || Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"
        /* default */
        ])(value) != objectTag) {
          return false;
        }

        var proto = Object(__WEBPACK_IMPORTED_MODULE_1__getPrototype_js__["a"
        /* default */
        ])(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isPlainObject;
      /***/
    },
    /* 98 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(33);
      /** Built-in value references. */


      var getPrototype = Object(__WEBPACK_IMPORTED_MODULE_0__overArg_js__["a"
      /* default */
      ])(Object.getPrototypeOf, Object);
      /* harmony default export */

      __webpack_exports__["a"] = getPrototype;
      /***/
    },
    /* 99 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__arrayMap_js__ = __webpack_require__(34);
      /**
       * The base implementation of `_.values` and `_.valuesIn` which creates an
       * array of `object` property values corresponding to the property names
       * of `props`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} props The property names to get values for.
       * @returns {Object} Returns the array of property values.
       */


      function baseValues(object, props) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__arrayMap_js__["a"
        /* default */
        ])(props, function (key) {
          return object[key];
        });
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseValues;
      /***/
    },
    /* 100 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__eq_js__ = __webpack_require__(11);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */

      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined || Object(__WEBPACK_IMPORTED_MODULE_0__eq_js__["a"
        /* default */
        ])(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
          return srcValue;
        }

        return objValue;
      }
      /* harmony default export */


      __webpack_exports__["a"] = customDefaultsAssignIn;
      /***/
    },
    /* 101 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used to escape characters for inclusion in compiled string literals. */

      var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        "\u2028": 'u2028',
        "\u2029": 'u2029'
      };
      /**
       * Used by `_.template` to escape characters for inclusion in compiled string literals.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */

      function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
      }
      /* harmony default export */


      __webpack_exports__["a"] = escapeStringChar;
      /***/
    },
    /* 102 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__arrayLikeKeys_js__ = __webpack_require__(28);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__baseKeys_js__ = __webpack_require__(103);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isArrayLike_js__ = __webpack_require__(12);
      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */


      function keys(object) {
        return Object(__WEBPACK_IMPORTED_MODULE_2__isArrayLike_js__["a"
        /* default */
        ])(object) ? Object(__WEBPACK_IMPORTED_MODULE_0__arrayLikeKeys_js__["a"
        /* default */
        ])(object) : Object(__WEBPACK_IMPORTED_MODULE_1__baseKeys_js__["a"
        /* default */
        ])(object);
      }
      /* harmony default export */


      __webpack_exports__["a"] = keys;
      /***/
    },
    /* 103 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__isPrototype_js__ = __webpack_require__(31);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__nativeKeys_js__ = __webpack_require__(104);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */

      function baseKeys(object) {
        if (!Object(__WEBPACK_IMPORTED_MODULE_0__isPrototype_js__["a"
        /* default */
        ])(object)) {
          return Object(__WEBPACK_IMPORTED_MODULE_1__nativeKeys_js__["a"
          /* default */
          ])(object);
        }

        var result = [];

        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }

        return result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseKeys;
      /***/
    },
    /* 104 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(33);
      /* Built-in method references for those with the same name as other `lodash` methods. */


      var nativeKeys = Object(__WEBPACK_IMPORTED_MODULE_0__overArg_js__["a"
      /* default */
      ])(Object.keys, Object);
      /* harmony default export */

      __webpack_exports__["a"] = nativeKeys;
      /***/
    },
    /* 105 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__escape_js__ = __webpack_require__(106);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__reEscape_js__ = __webpack_require__(111);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__reEvaluate_js__ = __webpack_require__(112);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__reInterpolate_js__ = __webpack_require__(35);
      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */


      var templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': __WEBPACK_IMPORTED_MODULE_1__reEscape_js__["a"
        /* default */
        ],

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': __WEBPACK_IMPORTED_MODULE_2__reEvaluate_js__["a"
        /* default */
        ],

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': __WEBPACK_IMPORTED_MODULE_3__reInterpolate_js__["a"
        /* default */
        ],

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': {
            'escape': __WEBPACK_IMPORTED_MODULE_0__escape_js__["a"
            /* default */
            ]
          }
        }
      };
      /* harmony default export */

      __webpack_exports__["a"] = templateSettings;
      /***/
    },
    /* 106 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__escapeHtmlChar_js__ = __webpack_require__(107);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__toString_js__ = __webpack_require__(36);
      /** Used to match HTML entities and HTML characters. */


      var reUnescapedHtml = /[&<>"']/g,
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */

      function escape(string) {
        string = Object(__WEBPACK_IMPORTED_MODULE_1__toString_js__["a"
        /* default */
        ])(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, __WEBPACK_IMPORTED_MODULE_0__escapeHtmlChar_js__["a"
        /* default */
        ]) : string;
      }
      /* harmony default export */


      __webpack_exports__["a"] = escape;
      /***/
    },
    /* 107 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__basePropertyOf_js__ = __webpack_require__(108);
      /** Used to map characters to HTML entities. */


      var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
      };
      /**
       * Used by `_.escape` to convert characters to HTML entities.
       *
       * @private
       * @param {string} chr The matched character to escape.
       * @returns {string} Returns the escaped character.
       */

      var escapeHtmlChar = Object(__WEBPACK_IMPORTED_MODULE_0__basePropertyOf_js__["a"
      /* default */
      ])(htmlEscapes);
      /* harmony default export */

      __webpack_exports__["a"] = escapeHtmlChar;
      /***/
    },
    /* 108 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /**
       * The base implementation of `_.propertyOf` without support for deep paths.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       */

      function basePropertyOf(object) {
        return function (key) {
          return object == null ? undefined : object[key];
        };
      }
      /* harmony default export */


      __webpack_exports__["a"] = basePropertyOf;
      /***/
    },
    /* 109 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(9);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__arrayMap_js__ = __webpack_require__(34);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__isArray_js__ = __webpack_require__(29);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__isSymbol_js__ = __webpack_require__(110);
      /** Used as references for various `Number` constants. */


      var INFINITY = 1 / 0;
      /** Used to convert symbols to primitives and strings. */

      var symbolProto = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"
      /* default */
      ] ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__["a"
      /* default */
      ].prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;
      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */

      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }

        if (Object(__WEBPACK_IMPORTED_MODULE_2__isArray_js__["a"
        /* default */
        ])(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return Object(__WEBPACK_IMPORTED_MODULE_1__arrayMap_js__["a"
          /* default */
          ])(value, baseToString) + '';
        }

        if (Object(__WEBPACK_IMPORTED_MODULE_3__isSymbol_js__["a"
        /* default */
        ])(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }
      /* harmony default export */


      __webpack_exports__["a"] = baseToString;
      /***/
    },
    /* 110 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__ = __webpack_require__(6);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /** `Object#toString` result references. */


      var symbolTag = '[object Symbol]';
      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */

      function isSymbol(value) {
        return _typeof(value) == 'symbol' || Object(__WEBPACK_IMPORTED_MODULE_1__isObjectLike_js__["a"
        /* default */
        ])(value) && Object(__WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__["a"
        /* default */
        ])(value) == symbolTag;
      }
      /* harmony default export */


      __webpack_exports__["a"] = isSymbol;
      /***/
    },
    /* 111 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used to match template delimiters. */

      var reEscape = /<%-([\s\S]+?)%>/g;
      /* harmony default export */

      __webpack_exports__["a"] = reEscape;
      /***/
    },
    /* 112 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /** Used to match template delimiters. */

      var reEvaluate = /<%([\s\S]+?)%>/g;
      /* harmony default export */

      __webpack_exports__["a"] = reEvaluate;
      /***/
    },
    /* 113 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__ImageRenderer__ = __webpack_require__(114);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__ImageRenderer__["a"
      /* default */
      ];
      /***/
    },
    /* 114 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__TemplateRenderer__ = __webpack_require__(16);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _get(target, property, receiver) {
        if (typeof Reflect !== "undefined" && Reflect.get) {
          _get = Reflect.get;
        } else {
          _get = function _get(target, property, receiver) {
            var base = _superPropBase(target, property);

            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);

            if (desc.get) {
              return desc.get.call(receiver);
            }

            return desc.value;
          };
        }

        return _get(target, property, receiver || target);
      }

      function _superPropBase(object, property) {
        while (!Object.prototype.hasOwnProperty.call(object, property)) {
          object = _getPrototypeOf(object);
          if (object === null) break;
        }

        return object;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Numbers Editor
       *
       * Handle number values Editing
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **imageRendererWidth**   | 28px    | image width
       * | **imageRendererHeight**   | 28px    | image height
       * | **imageRendererList**       | {}  	| a list of which maps images with cell values as JSON or plain JS object
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       *
       * @see https://lodash.com/docs/4.17.15#template
       */


      var ImageRenderer = /*#__PURE__*/function (_TemplateRenderer) {
        _inherits(ImageRenderer, _TemplateRenderer);

        var _super = _createSuper(ImageRenderer);

        function ImageRenderer() {
          _classCallCheck(this, ImageRenderer);

          return _super.apply(this, arguments);
        }

        _createClass(ImageRenderer, [{
          key: "refresh",

          /**
           * @inheritDoc
           */
          value: function refresh(params, isInit) {
            var value = params.value;
            var imageWidth = this.getOption('imageRendererWidth', params, '28px');
            var imageHeight = this.getOption('imageRendererHeight', params, '28px');
            var imageList = this.getOption('imageRendererList', params);

            try {
              imageList = JSON.parse(imageList);
            } catch (e) {
              imageList = imageList || {};
            }
            /* eslint-disable no-prototype-builtins */


            if (imageList && imageList.hasOwnProperty(value)) {
              params.renderTemplate =
              /*html*/
              "\n        <img \n          src=\"".concat(imageList[params.value], "\" \n          width=\"").concat(imageWidth, "\"\n          height=\"").concat(imageHeight, "\"  \n        />\n      ");
            } else {
              params.renderTemplate = value;
            }

            return _get(_getPrototypeOf(ImageRenderer.prototype), "refresh", this).call(this, params, isInit);
          }
        }]);

        return ImageRenderer;
      }(__WEBPACK_IMPORTED_MODULE_0__TemplateRenderer__["a"
      /* default */
      ]);
      /* harmony default export */


      __webpack_exports__["a"] = ImageRenderer;
      /***/
    },
    /* 115 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__DateTimeFilter__ = __webpack_require__(116);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__DateTimeFilter__["a"
      /* default */
      ];
      /***/
    },
    /* 116 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__ = __webpack_require__(37);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_date_fns_tz_utcToZonedTime__ = __webpack_require__(38);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__EventsMixin__ = __webpack_require__(40);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__DateTimeInput__ = __webpack_require__(41);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__style_scss__ = __webpack_require__(127);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__style_scss__);

      var _class, _class2, _init, _descriptor, _class3, _temp, _class4, _class5, _init2, _descriptor2, _class6, _temp2, _class7, _temp3;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _initializerWarningHelper(descriptor, context) {
        throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.');
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var TOKENS = {
        TOKEN_EQUAL: 'equals',
        TOKEN_NOT_EQUAL: 'notEqual',
        TOKEN_LESS: 'lessThan',
        TOKEN_GREATER: 'greaterThan',
        TOKEN_RANGE: 'inRange',
        TOKEN_AND: 'AND',
        TOKEN_OR: 'OR'
      };

      var ConditionPanel = Object(__WEBPACK_IMPORTED_MODULE_4__EventsMixin__["a"
      /* withEventsMixin */
      ])(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
        _inherits(ConditionPanel, _Component);

        var _super = _createSuper(ConditionPanel);

        function ConditionPanel() {
          var _this;

          _classCallCheck(this, ConditionPanel);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));

          _initializerDefineProperty(_this, "state", _descriptor, _assertThisInitialized(_this));

          _this._filterTimeInput = new __WEBPACK_IMPORTED_MODULE_5__DateTimeInput__["a"
          /* default */
          ]();
          _this._filterToDateTimeInput = new __WEBPACK_IMPORTED_MODULE_5__DateTimeInput__["a"
          /* default */
          ]();
          _this._filterOptions = [];
          _this._defaultOption = -1;
          return _this;
        }

        _createClass(ConditionPanel, [{
          key: "init",

          /**
           * @inheritDoc
           */
          value: function init(params) {
            var _optionsTranslations,
                _this2 = this;

            var translate = params.api.gridOptionsWrapper.getLocaleTextFunc();
            this._filterOptions = this.getOption('filterOptions', params, [TOKENS.TOKEN_EQUAL, TOKENS.TOKEN_NOT_EQUAL, TOKENS.TOKEN_LESS, TOKENS.TOKEN_GREATER, TOKENS.TOKEN_RANGE]);
            this._defaultOption = this.getOption('defaultOption', params, this._filterOptions.indexOf(TOKENS.TOKEN_EQUAL) > -1 ? TOKENS.TOKEN_EQUAL : this._filterOptions[0]);
            this.state.type = this._defaultOption;
            var optionsTranslations = (_optionsTranslations = {}, _defineProperty(_optionsTranslations, TOKENS.TOKEN_EQUAL, translate(TOKENS.TOKEN_EQUAL, 'Equals')), _defineProperty(_optionsTranslations, TOKENS.TOKEN_NOT_EQUAL, translate(TOKENS.TOKEN_EQUAL, 'Not equal')), _defineProperty(_optionsTranslations, TOKENS.TOKEN_LESS, translate(TOKENS.TOKEN_LESS, 'Less than')), _defineProperty(_optionsTranslations, TOKENS.TOKEN_GREATER, translate(TOKENS.TOKEN_GREATER, 'Greater than')), _defineProperty(_optionsTranslations, TOKENS.TOKEN_RANGE, translate(TOKENS.TOKEN_RANGE, 'In range')), _optionsTranslations);
            this._gui = document.createElement('div');
            this._gui.className = 'dateTimeFilter ag-filter-body-wrapper';
            this._gui.innerHTML =
            /* html */
            "\n      <select class=\"ag-filter-select dateTimeFilter__select\"  ".concat(this._filterOptions.length === 1 ? 'disabled' : '', ">\n        ").concat(this._filterOptions.map(function (option) {
              return (
                /* html */
                "\n          <option \n            value=\"".concat(option, "\" \n            ").concat(option === _this2._defaultOption ? 'selected' : '', "\n          >\n              ").concat(optionsTranslations[option], "\n          </option>")
              );
            }), "\n      </select>\n      <div class=\"ag-filter-body\">\n        <div class=\"ag-filter-date-from\">\n        </div>\n        <div class=\"ag-filter-date-to ag-hidden\">\n        </div>\n      </div>\n    ");

            this._filterTimeInput.init(params);

            this._filterTimeInput.on(__WEBPACK_IMPORTED_MODULE_5__DateTimeInput__["a"
            /* default */
            ].ON_DATE_CHANGED, function (selectedDate) {
              _this2.state.filter = selectedDate;

              _this2.notify(ConditionPanel.ON_CONDITION_CHANGED, _this2.state);
            });

            this._filterToDateTimeInput.init(params);

            this._filterToDateTimeInput.on(__WEBPACK_IMPORTED_MODULE_5__DateTimeInput__["a"
            /* default */
            ].ON_DATE_CHANGED, function (selectedDate) {
              _this2.state.filterTo = selectedDate;

              _this2.notify(ConditionPanel.ON_CONDITION_CHANGED, _this2.state);
            });

            this._gui.querySelector('.ag-filter-date-from').appendChild(this._filterTimeInput.getGui());

            this._gui.querySelector('.ag-filter-date-to').appendChild(this._filterToDateTimeInput.getGui());

            var select = this._gui.querySelector('.ag-filter-select');

            select.addEventListener('change', this._onTypeChange);
            this.setState(this._state);
          }
          /**
           * @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.off(ConditionPanel.ON_CONDITION_CHANGED);

            this._filterTimeInput.destroy();

            this._filterToDateTimeInput.destroy();

            this._gui.querySelector('.ag-filter-select').removeEventListener('change', this._onTypeChange);

            this.reset();
          }
          /**
           * Reset the state
           */

        }, {
          key: "reset",
          value: function reset() {
            this.state.filter = null;
            this.state.filterTo = null;

            this._filterTimeInput.reset();

            this._filterToDateTimeInput.reset();

            this.notify(ConditionPanel.ON_CONDITION_CHANGED, this.state);
          }
          /**
           * Set the condition state
           *
           * @param {Object} state
           */

        }, {
          key: "setState",
          value: function setState(state) {
            state = state || {};
            this.state.filter = state.filter || null;
            this.state.filterTo = state.filterTo || null;
            this.state.type = state.type || this._defaultOption;
            var gui = this._gui;
            var filterOptions = this._filterOptions;
            var selectEl = gui.querySelector('.ag-filter-select');
            var filterInput = this._filterTimeInput;
            var filterToInput = this._filterToDateTimeInput;
            selectEl.selectedIndex = filterOptions.indexOf(this.state.type);
            filterInput.setDate(this.state.filter);
            filterToInput.setDate(this.state.filterTo); // we fire on change event in case the filter options contain
            // one option which is in Range "inRange"

            if ('createEvent' in document) {
              var evt = document.createEvent('HTMLEvents');
              evt.initEvent('change', false, true);
              selectEl.dispatchEvent(evt);
            } else {
              selectEl.fireEvent('onchange');
            }

            this.notify(ConditionPanel.ON_CONDITION_CHANGED, this.state);
          }
          /**
           * Update the state with the selected type
           *
           * @param {Event} e
           */

        }, {
          key: "_onTypeChange",
          value: function _onTypeChange(e) {
            var el = e.target;

            var filterDateTo = this._gui.querySelector('.ag-filter-date-to');

            this.state.type = el.options[el.selectedIndex].value;

            if (this.state.type === TOKENS.TOKEN_RANGE) {
              filterDateTo.classList.remove('ag-hidden');
            } else {
              filterDateTo.classList.add('ag-hidden');
            }

            this.notify(ConditionPanel.ON_CONDITION_CHANGED, this.state);
          }
        }]);

        return ConditionPanel;
      }(__WEBPACK_IMPORTED_MODULE_6__Component__["a"
      /* default */
      ]), _class3.ON_CONDITION_CHANGED = 'ConditionPanel.ON_CONDITION_CHANGED', _temp), (_applyDecoratedDescriptor(_class2, "ON_CONDITION_CHANGED", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__["a"
      /* default */
      ]], (_init = Object.getOwnPropertyDescriptor(_class2, "ON_CONDITION_CHANGED"), _init = _init ? _init.value : undefined, {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function initializer() {
          return _init;
        }
      }), _class2), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "state", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return {
            type: TOKENS.TOKEN_EQUAL,
            filter: null,
            filterTo: null
          };
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "init"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_onTypeChange", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "_onTypeChange"), _class2.prototype)), _class2)) || _class;

      var JoinConditionPanel = Object(__WEBPACK_IMPORTED_MODULE_4__EventsMixin__["a"
      /* withEventsMixin */
      ])(_class4 = (_class5 = (_temp2 = _class6 = /*#__PURE__*/function (_Component2) {
        _inherits(JoinConditionPanel, _Component2);

        var _super2 = _createSuper(JoinConditionPanel);

        function JoinConditionPanel() {
          var _this3;

          _classCallCheck(this, JoinConditionPanel);

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          _this3 = _super2.call.apply(_super2, [this].concat(args));

          _initializerDefineProperty(_this3, "state", _descriptor2, _assertThisInitialized(_this3));

          _this3._firstConditionPanel = new ConditionPanel();
          _this3._secondConditionPanel = new ConditionPanel();
          _this3._operatorPanel = null;
          _this3._params = null;
          return _this3;
        }

        _createClass(JoinConditionPanel, [{
          key: "init",

          /**
           * @inheritDoc
           */
          value: function init(params) {
            var translate = params.api.gridOptionsWrapper.getLocaleTextFunc();
            this._params = params;

            this._firstConditionPanel.init(params);

            this._firstConditionPanel.on(ConditionPanel.ON_CONDITION_CHANGED, this._onFirstConditionChanged);

            this._secondConditionPanel.init(params);

            this._secondConditionPanel.on(ConditionPanel.ON_CONDITION_CHANGED, this._onSecondConditionChanged);

            this._secondConditionPanel.getGui().classList.add('ag-hidden');

            this._gui = document.createElement('div');
            this._gui.className = 'ag-filter-body-wrapper ag-simple-filter-body-wrapper';

            this._gui.appendChild(this._firstConditionPanel.getGui()); //prettier-ignore


            var idOne = '_' + Math.random().toString(36).substr(2, 9),
                idTwo = '_' + Math.random().toString(36).substr(2, 9);
            this._operatorPanel = document.createElement('div');
            this._operatorPanel.className = 'ag-filter-condition ag-hidden';
            this._operatorPanel.innerHTML =
            /* html */
            "\n    <div class=\"ag-filter-condition-operator ag-filter-condition-operator-and ag-labeled ag-label-align-right ag-radio-button ag-input-field\">\n        <label class=\"ag-input-field-label ag-label ag-radio-button-label\" for=\"".concat(idOne, "\">       \n          ").concat(translate('andCondition', 'AND'), "\n        </label>\n        <div class=\"ag-wrapper-and ag-wrapper ag-input-wrapper ag-radio-button-input-wrapper ag-checked\">\n          <input id=\"").concat(idOne, "\" class=\"AND ag-input-field-input ag-radio-button-input\" type=\"radio\" name=\"orAndRadio\" value=\"").concat(TOKENS.TOKEN_AND, "\"/>              \n        </div> \n    </div>   \n    \n    <div class=\"ag-filter-condition-operator ag-filter-condition-operator-and ag-labeled ag-label-align-right ag-radio-button ag-input-field\">\n        <label class=\"ag-input-field-label ag-label ag-radio-button-label\" for=\"").concat(idTwo, "\">       \n          ").concat(translate('orCondition', 'OR'), "\n        </label>\n        <div class=\"ag-wrapper-or ag-wrapper ag-input-wrapper ag-radio-button-input-wrapper\">\n          <input id=\"").concat(idTwo, "\" class=\"OR ag-input-field-input ag-radio-button-input\" type=\"radio\" name=\"orAndRadio\" value=\"").concat(TOKENS.TOKEN_OR, "\"/>              \n        </div>         \n    </div>   \n    ");

            this._gui.appendChild(this._operatorPanel);

            this._operatorPanel.addEventListener('change', this._onOperatorChanged);

            this._gui.appendChild(this._secondConditionPanel.getGui());
          }
          /**
           * @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this._firstConditionPanel.destroy();

            this._secondConditionPanel.destroy();

            this._operatorPanel.removeEventListener('change', this._onOperatorChanged);

            this.off(JoinConditionPanel.ON_JOIN_CONDITION_CHANGED);
            this.reset();
          }
          /**
           * Reset the state
           */

        }, {
          key: "reset",
          value: function reset() {
            this._firstConditionPanel.reset();

            this._secondConditionPanel.reset();

            this.notify(ConditionPanel.ON_CONDITION_CHANGED, this.state);
          }
          /**
           * Set the condition join state
           *
           * @param {Object} state
           */

        }, {
          key: "setState",
          value: function setState(state) {
            var _this4 = this;

            state = state || {};
            this.state.operator = state.operator || TOKENS.TOKEN_OR;
            this.state.condition1 = state.condition1 || null;
            this.state.condition2 = state.condition2 || null;

            this._firstConditionPanel.setState(this.state.condition1);

            this._secondConditionPanel.setState(this.state.condition2);

            this._operatorPanel.querySelectorAll('input').forEach(function (input) {
              if (input.classList.contains(_this4.state.operator)) {
                input.checked = true;
              } else {
                input.checked = false;
              }
            });

            this.notify(JoinConditionPanel.ON_JOIN_CONDITION_CHANGED, this.state);
          }
          /**
           * Add the selected condition to the component stater
           *
           * @param {Event} e
           */

        }, {
          key: "_onOperatorChanged",
          value: function _onOperatorChanged(e) {
            var target = e.target;
            this.state.operator = target.value;

            if (target.classList.contains('OR')) {
              this._operatorPanel.querySelector('.ag-wrapper-or').classList.add('ag-checked');

              this._operatorPanel.querySelector('.ag-wrapper-and').classList.remove('ag-checked');
            } else {
              this._operatorPanel.querySelector('.ag-wrapper-or').classList.remove('ag-checked');

              this._operatorPanel.querySelector('.ag-wrapper-and').classList.add('ag-checked');
            }

            this.notify(JoinConditionPanel.ON_JOIN_CONDITION_CHANGED, this.state);
          }
          /**
           * @param {Object} state  the option state
           */

        }, {
          key: "_onFirstConditionChanged",
          value: function _onFirstConditionChanged(state) {
            this.state.condition1 = state;
            var suppressAndOrCondition = this.getOption('suppressAndOrCondition', this._params, false);

            if (!suppressAndOrCondition) {
              var _this$state$condition = this.state.condition1,
                  filter = _this$state$condition.filter,
                  filterTo = _this$state$condition.filterTo,
                  type = _this$state$condition.type;

              var secondConditionGui = this._secondConditionPanel.getGui();

              var operatorPanelGui = this._operatorPanel;
              var condition = type === TOKENS.TOKEN_RANGE ? !filter || !filterTo : !filter;

              if (condition) {
                secondConditionGui.classList.add('ag-hidden');
                operatorPanelGui.classList.add('ag-hidden');
              } else {
                secondConditionGui.classList.remove('ag-hidden');
                operatorPanelGui.classList.remove('ag-hidden');
              }
            }

            this.notify(JoinConditionPanel.ON_JOIN_CONDITION_CHANGED, this.state);
          }
          /**
           * @param {Object} state  the option state
           */

        }, {
          key: "_onSecondConditionChanged",
          value: function _onSecondConditionChanged(state) {
            this.state.condition2 = state;
            this.notify(JoinConditionPanel.ON_JOIN_CONDITION_CHANGED, this.state);
          }
        }]);

        return JoinConditionPanel;
      }(__WEBPACK_IMPORTED_MODULE_6__Component__["a"
      /* default */
      ]), _class6.ON_JOIN_CONDITION_CHANGED = 'JoinConditionPanel.ON_JOIN_CONDITION_CHANGED', _temp2), (_applyDecoratedDescriptor(_class5, "ON_JOIN_CONDITION_CHANGED", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__["a"
      /* default */
      ]], (_init2 = Object.getOwnPropertyDescriptor(_class5, "ON_JOIN_CONDITION_CHANGED"), _init2 = _init2 ? _init2.value : undefined, {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function initializer() {
          return _init2;
        }
      }), _class5), _descriptor2 = _applyDecoratedDescriptor(_class5.prototype, "state", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__["a"
      /* default */
      ]], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return {
            condition1: {},
            condition2: {},
            operator: TOKENS.TOKEN_OR
          };
        }
      }), _applyDecoratedDescriptor(_class5.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class5.prototype, "init"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class5.prototype, "destroy"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "_onOperatorChanged", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class5.prototype, "_onOperatorChanged"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "_onFirstConditionChanged", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class5.prototype, "_onFirstConditionChanged"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "_onSecondConditionChanged", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class5.prototype, "_onSecondConditionChanged"), _class5.prototype)), _class5)) || _class4;
      /**
       * DateTime Filter
       *
       * ## Options
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **dateTimeEnableTime**   | false    | enable / disable time
       * | **dateTimeEnable24HR**   | false    | enable / disable time 24 format
       * | **dateTimeEnableSeconds**   | false    | enable / disable seconds management
       * | **dateTimeEnableCalendar**   | false    | enable / disable Calendar.
       * | **dateTimeMask**   | false    | The mask used to format the selected date
       * | **dateTimeMax**   | undefined    |  Max allowed date
       * | **dateTimeMin**   | undefined    |  Min allowed date
       * | **dateTimeFormatter**   | undefined    |  A function or expression to format the date (@see supported param)
       * | **dateTimeLocale**   | System default    |  A locale to use for date formatting
       * | **dateTimeDefaultHour**   | 12    |  Initial value of the hour element.
       * | **dateTimeDefaultMinute**   | 0    |  Initial value of the minute element.
       * | **dateTimeDisableMobile**   | false    |  Set disableMobile to true to always use the non-native picker.
       * | **dateTimeEnableWeekNumber**   | true    |  Enables display of week numbers in calendar.
       * | **filterOptions**   | Equals, Greater Than, Less Than, Not Equals, In Range.    |  What Filter Options to present to the user.
       * | **defaultOption**   | Equals    |  The default Filter Options to be selected.
       * | **suppressAndOrCondition**   | false    |  If true, the filter will only offer Condition 1.
       * | **inRangeInclusive**   | false    |  If true then doing 'inRange' filter option will include values equal to the start and end of the range.
       * | **clearButton**   | false    |  Set to true to have the filter use a Clear button. The Clear button will clear the (form) details of the filter without removing any active filters on the column.
       * | **applyButton**   | false    |  Set to true to have the filter use an Apply button. If the Apply button is present, then the filter is only applied after the user hits the Apply button.
       * | **resetButton**   | false    |  Set to true to have the filter use a Reset button. The Reset button will clear the details of the filter and any active filters on that column.
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var DateTimeFilter = (_class7 = (_temp3 = /*#__PURE__*/function (_Component3) {
        _inherits(DateTimeFilter, _Component3);

        var _super3 = _createSuper(DateTimeFilter);

        function DateTimeFilter() {
          var _this5;

          _classCallCheck(this, DateTimeFilter);

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          _this5 = _super3.call.apply(_super3, [this].concat(args));
          _this5._JoinConditionPanel = new JoinConditionPanel();
          _this5._state = {};
          _this5._params = {};
          _this5._doesFilterPassOptions = null;
          return _this5;
        }

        _createClass(DateTimeFilter, [{
          key: "init",

          /**
           * @inheritDoc
           */
          value: function init(params) {
            var _this6 = this;

            var translate = params.api.gridOptionsWrapper.getLocaleTextFunc();
            var isClearFilter = this.getOption('clearButton', params, false);
            var isResetButton = this.getOption('resetButton', params, false);
            var isApplyButton = this.getOption('applyButton', params, false);
            this._gui = document.createElement('div');

            this._JoinConditionPanel.init(params);

            this._JoinConditionPanel.on(JoinConditionPanel.ON_JOIN_CONDITION_CHANGED, function (state) {
              if (!_this6.__disableStateChangeListener) {
                _this6._onJoinConditionPanelStateChanged(state, isApplyButton);
              }
            });

            this._gui.appendChild(this._JoinConditionPanel.getGui());

            var applyFilterPanel = document.createElement('div');
            applyFilterPanel.className = "ag-filter-apply-panel ag-hidden";
            applyFilterPanel.innerHTML =
            /* html */
            "\n      <button class=\"ag-standard-button ag-filter-apply-panel-button clear ".concat(!isClearFilter && 'ag-hidden', "\" type=\"button\">").concat(translate('clearFilter', 'Clear Filter'), "</button>\n      <button class=\"ag-standard-button ag-filter-apply-panel-button reset ").concat(!isResetButton && 'ag-hidden', "\" type=\"button\">").concat(translate('resetFilter', 'Reset Filter'), "</button>\n      <button class=\"ag-standard-button ag-filter-apply-panel-button apply ").concat(!isApplyButton && 'ag-hidden', "\" type=\"button\">").concat(translate('applyFilter', 'Apply Filter'), "</button>\n    ");

            if (isClearFilter || isResetButton || isApplyButton) {
              applyFilterPanel.classList.remove('ag-hidden');
            }

            applyFilterPanel.addEventListener('click', this._ApplyFilterPanelButtonClick);

            this._gui.appendChild(applyFilterPanel);

            this._state = this._JoinConditionPanel.state;
            this._params = params;
            this._doesFilterPassOptions = {
              enableTime: this.getOption('dateTimeEnableTime', this._params, true),
              inRangeInclusive: this.getOption('inRangeInclusive', this._params, false),
              // eslint-disable-next-line no-prototype-builtins
              valueGetter: this._params.hasOwnProperty('filterValueGetter') ? this._params.filterValueGetter : this._params.valueGetter
            };
          }
          /**
           * @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this._JoinConditionPanel.destroy();
          }
          /**
           * Check whether selected filter matches the passed cell data
           *
           * @param {Object} params
           *
           * @return {Boolean} true when pass, false otherwise
           */

        }, {
          key: "doesFilterPass",
          value: function doesFilterPass(params) {
            var value = this._doesFilterPassOptions.valueGetter(params);

            var _this$_state = this._state,
                condition1 = _this$_state.condition1,
                condition2 = _this$_state.condition2,
                operator = _this$_state.operator;

            var doesPassFirstCondition = this._doesPassCondition(condition1, value);

            var doesPassSecondCondition = this._doesPassCondition(condition2, value);

            return operator === TOKENS.TOKEN_OR ? doesPassFirstCondition || doesPassSecondCondition : doesPassFirstCondition && doesPassSecondCondition;
          }
          /**
           * Check whether the component is applying any filter on the column
           *
           * @return {Boolean}
           **/

        }, {
          key: "isFilterActive",
          value: function isFilterActive() {
            var condition1 = this._state.condition1;

            if (condition1 && condition1.filter) {
              if (condition1.filterTo && condition1.type === TOKENS.TOKEN_RANGE) {
                return condition1.filter !== null && condition1.filterTo !== null;
              }

              return condition1.filter !== null;
            }

            return false;
          }
          /**
           * Gets the filter state. If filter is not active, then should return null/undefined.
           * The grid calls getModel() on all active filters when gridApi.getFilterModel() is called.
           *
           * @return Object | null the filter state
           */

        }, {
          key: "getModel",
          value: function getModel() {
            var _this7 = this;

            var clone = JSON.parse(JSON.stringify(this._state));
            [clone.condition1, clone.condition2].forEach(function (condition, i) {
              if (condition.filter) {
                condition.filter = _this7._state["condition".concat(i + 1)].filter.toISOString();
              }

              if (condition.filterTo) {
                condition.filterTo = _this7._state["condition".concat(i + 1)].filterTo.toISOString();
              }
            });
            clone.filterType = 'datetime';
            clone.condition1.filterType = 'datetime';
            clone.condition2.filterType = 'datetime'; // eslint-disable-next-line no-prototype-builtins

            return clone.hasOwnProperty('condition2') && // eslint-disable-next-line no-prototype-builtins
            clone.condition2.hasOwnProperty('filter') && clone.condition2.filter ? clone : clone.condition1;
          }
          /**
           * Restores the filter state. Called by the grid after gridApi.setFilterModel(model) is called.
           * The grid will pass undefined/null to clear the filter.
           *
           * @param {Object | null} model
           */

        }, {
          key: "setModel",
          value: function setModel(model) {
            if (model && // eslint-disable-next-line no-prototype-builtins
            !model.hasOwnProperty('condition1') && // eslint-disable-next-line no-prototype-builtins
            !model.hasOwnProperty('condition2')) {
              model = {
                condition1: model
              };
            }

            this.__disableStateChangeListener = true;

            this._JoinConditionPanel.setState(model);

            this.__disableStateChangeListener = false;
            this._state = this._JoinConditionPanel.state;
            [this._state.condition1, this._state.condition2].forEach(function (condition) {
              if (condition.filter) {
                condition.filter = new Date(condition.filter);
              }

              if (condition.filterTo) {
                condition.filterTo = new Date(condition.filterTo);
              }
            });
          }
          /**
           * Get the filter model as plain string to display in the floating filter input
           *
           * @param {Object | null} model
           */

        }, {
          key: "getModelAsString",
          value: function getModelAsString(model) {
            if (!model) {
              return '';
            }

            var dateTimeMask = this.getOption('dateTimeMask', this._params, // @todo Find a better way for this
            this._JoinConditionPanel._firstConditionPanel._filterTimeInput.picker.config['dateFormat']);
            var locale = this.getOption('dateTimeLocale', this._params, Intl.DateTimeFormat().resolvedOptions().locale || 'en-US');

            var _JSON$parse = JSON.parse(JSON.stringify(model)),
                condition1 = _JSON$parse.condition1,
                condition2 = _JSON$parse.condition2,
                operator = _JSON$parse.operator;

            [condition1, condition2].forEach(function (condition) {
              if (condition.filter) {
                condition.filter = BBj.Masks.DateMask.mask(condition.filter, dateTimeMask, locale);
              }

              if (condition.filterTo) {
                condition.filterTo = BBj.Masks.DateMask.mask(condition.filterTo, dateTimeMask, locale);
              }
            });
            var firstConditionAsString = "".concat(condition1.filter || '', " ").concat(condition1.filterTo ? '→ ' + condition1.filterTo : '');
            var secondConditionAsString = "".concat(condition2.filter || '', " ").concat(condition2.filterTo ? '→ ' + condition2.filterTo : '');
            var operatorAsString = "".concat(condition2.filter && operator ? operator : '');
            return "".concat(firstConditionAsString, " ").concat(operatorAsString, " ").concat(secondConditionAsString).trim();
          }
          /**
           * Check if the given value passes the filter defined in the passed ConditionPanel's state
           *
           * @param {Object} condition condition panel state
           * @param {String} value cell value
           *
           * @return {Boolean} true when pass, false otherwise
           */

        }, {
          key: "_doesPassCondition",
          value: function _doesPassCondition(condition, value) {
            if (!condition.filter || !value) {
              return false;
            }

            var filter = condition.filter,
                filterTo = condition.filterTo,
                type = condition.type;
            var timezone = BBj.Masks.Utils.Dates.getTimezoneOrOffset();
            var inRangeInclusive = this._doesFilterPassOptions.inRangeInclusive;
            var enableTime = this._doesFilterPassOptions.enableTime;
            var passed = false;

            if (BBj.Masks.Utils.Dates.IS_TIME_REGEX.test(value)) {
              value = value = BBj.Masks.Utils.Dates.fixShortISO(value);
              [filter, filterTo].forEach(function (date) {
                if (date instanceof Date) {
                  date.setFullYear(1970);
                  date.setMonth(0);
                  date.setDate(1);
                }
              });
            } else if (BBj.Masks.Utils.Dates.IS_DATE_REGEX.test(value)) {
              value = BBj.Masks.Utils.Dates.fixShortISO(value);
            } // convert the datetime from utc to locale


            value = Object(__WEBPACK_IMPORTED_MODULE_3_date_fns_tz_utcToZonedTime__["a"
            /* default */
            ])(value, timezone); // firstDate = firstDate ? zonedTimeToUtc(firstDate , timezone) : firstDate
            // secondDate = secondDate ? zonedTimeToUtc(secondDate , timezone) : secondDate

            if (!enableTime) {
              // remove the time portion from the date
              // eslint-disable-next-line no-extra-semi
              ;
              [value, filter, filterTo].forEach(function (date) {
                if (date instanceof Date) {
                  date.setHours(0);
                  date.setMinutes(0);
                  date.setSeconds(0);
                  date.setMilliseconds(0);
                }
              });
            }

            if (type === TOKENS.TOKEN_EQUAL) {
              passed = filter > value === false && filter < value == false;
            } else if (type === TOKENS.TOKEN_NOT_EQUAL) {
              passed = !(filter > value === false && filter < value == false);
            } else if (type === TOKENS.TOKEN_GREATER) {
              passed = filter < value;
            } else if (type === TOKENS.TOKEN_LESS) {
              passed = filter > value;
            } else if (type === TOKENS.TOKEN_RANGE && filterTo) {
              if (inRangeInclusive) {
                passed = (filter < value || filter > value === false && filter < value == false) && filterTo > value || filterTo > value === false && filterTo < value == false;
              } else {
                passed = filter < value && filterTo > value;
              }
            }

            return passed;
          }
          /**
           * List to click button event on the filter panel and execute the
           * right action
           *
           * @param {Event} e
           */

        }, {
          key: "_ApplyFilterPanelButtonClick",
          value: function _ApplyFilterPanelButtonClick(e) {
            var target = e.target;

            if (target.nodeName === 'BUTTON') {
              if (target.classList.contains('reset')) {
                this._JoinConditionPanel.reset();

                this._params.filterChangedCallback();
              } else if (target.classList.contains('clear')) {
                this._JoinConditionPanel.reset();
              } else if (target.classList.contains('apply')) {
                this._params.filterChangedCallback();
              }
            }
          }
          /**
           * Update the filter state and Apply the filter depending on
           * whether the `isApplyButtonActive` is true or false
           *
           * @param {Object} state
           * @param {Boolean} isApplyButtonActive
           */

        }, {
          key: "_onJoinConditionPanelStateChanged",
          value: function _onJoinConditionPanelStateChanged(state, isApplyButtonActive) {
            this._state = state;

            if (false === isApplyButtonActive) {
              this._params.filterChangedCallback();
            }
          }
        }]);

        return DateTimeFilter;
      }(__WEBPACK_IMPORTED_MODULE_6__Component__["a"
      /* default */
      ]), _temp3), (_applyDecoratedDescriptor(_class7.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class7.prototype, "init"), _class7.prototype), _applyDecoratedDescriptor(_class7.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class7.prototype, "destroy"), _class7.prototype), _applyDecoratedDescriptor(_class7.prototype, "_ApplyFilterPanelButtonClick", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class7.prototype, "_ApplyFilterPanelButtonClick"), _class7.prototype), _applyDecoratedDescriptor(_class7.prototype, "_onJoinConditionPanelStateChanged", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class7.prototype, "_onJoinConditionPanelStateChanged"), _class7.prototype)), _class7);
      /* harmony default export */

      __webpack_exports__["a"] = DateTimeFilter;
      /***/
    },
    /* 117 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = tzTokenizeDate;
      /**
       * Returns the [year, month, day, hour, minute, seconds] tokens of the provided
       * `date` as it will be rendered in the `timeZone`.
       */

      function tzTokenizeDate(date, timeZone) {
        var dtf = getDateTimeFormat(timeZone);
        return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
      }

      var typeToPos = {
        year: 0,
        month: 1,
        day: 2,
        hour: 3,
        minute: 4,
        second: 5
      };

      function partsOffset(dtf, date) {
        var formatted = dtf.formatToParts(date);
        var filled = [];

        for (var i = 0; i < formatted.length; i++) {
          var pos = typeToPos[formatted[i].type];

          if (pos >= 0) {
            filled[pos] = parseInt(formatted[i].value, 10);
          }
        }

        return filled;
      }

      function hackyOffset(dtf, date) {
        var formatted = dtf.format(date).replace(/\u200E/g, '');
        var parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed
        // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]

        return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];
      } // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used
      // to get deterministic local date/time output according to the `en-US` locale which
      // can be used to extract local time parts as necessary.


      var dtfCache = {};

      function getDateTimeFormat(timeZone) {
        if (!dtfCache[timeZone]) {
          // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`
          var testDateFormatted = new Intl.DateTimeFormat('en-US', {
            hour12: false,
            timeZone: 'America/New_York',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          }).format(new Date('2014-06-25T04:00:00.123Z'));
          var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';
          dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {
            hour12: false,
            timeZone: timeZone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          }) : new Intl.DateTimeFormat('en-US', {
            hourCycle: 'h23',
            timeZone: timeZone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }

        return dtfCache[timeZone];
      }
      /***/

    },
    /* 118 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = subMilliseconds;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__addMilliseconds_index_js__ = __webpack_require__(119);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__lib_requiredArgs_index_js__ = __webpack_require__(14);
      /**
       * @name subMilliseconds
       * @category Millisecond Helpers
       * @summary Subtract the specified number of milliseconds from the given date.
       *
       * @description
       * Subtract the specified number of milliseconds from the given date.
       *
       * ### v2.0.0 breaking changes:
       *
       * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
       *
       * @param {Date|Number} date - the date to be changed
       * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
       * @returns {Date} the new date with the milliseconds subtracted
       * @throws {TypeError} 2 arguments required
       *
       * @example
       * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
       * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
       * //=> Thu Jul 10 2014 12:45:29.250
       */


      function subMilliseconds(dirtyDate, dirtyAmount) {
        Object(__WEBPACK_IMPORTED_MODULE_2__lib_requiredArgs_index_js__["a"
        /* default */
        ])(2, arguments);
        var amount = Object(__WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__["a"
        /* default */
        ])(dirtyAmount);
        return Object(__WEBPACK_IMPORTED_MODULE_1__addMilliseconds_index_js__["a"
        /* default */
        ])(dirtyDate, -amount);
      }
      /***/

    },
    /* 119 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = addMilliseconds;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__toDate_index_js__ = __webpack_require__(120);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__lib_requiredArgs_index_js__ = __webpack_require__(14);
      /**
       * @name addMilliseconds
       * @category Millisecond Helpers
       * @summary Add the specified number of milliseconds to the given date.
       *
       * @description
       * Add the specified number of milliseconds to the given date.
       *
       * ### v2.0.0 breaking changes:
       *
       * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
       *
       * @param {Date|Number} date - the date to be changed
       * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
       * @returns {Date} the new date with the milliseconds added
       * @throws {TypeError} 2 arguments required
       *
       * @example
       * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
       * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
       * //=> Thu Jul 10 2014 12:45:30.750
       */


      function addMilliseconds(dirtyDate, dirtyAmount) {
        Object(__WEBPACK_IMPORTED_MODULE_2__lib_requiredArgs_index_js__["a"
        /* default */
        ])(2, arguments);
        var timestamp = Object(__WEBPACK_IMPORTED_MODULE_1__toDate_index_js__["a"
        /* default */
        ])(dirtyDate).getTime();
        var amount = Object(__WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__["a"
        /* default */
        ])(dirtyAmount);
        return new Date(timestamp + amount);
      }
      /***/

    },
    /* 120 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = toDate;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_requiredArgs_index_js__ = __webpack_require__(14);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /**
       * @name toDate
       * @category Common Helpers
       * @summary Convert the given argument to an instance of Date.
       *
       * @description
       * Convert the given argument to an instance of Date.
       *
       * If the argument is an instance of Date, the function returns its clone.
       *
       * If the argument is a number, it is treated as a timestamp.
       *
       * If the argument is none of the above, the function returns Invalid Date.
       *
       * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
       *
       * @param {Date|Number} argument - the value to convert
       * @returns {Date} the parsed date in the local time zone
       * @throws {TypeError} 1 argument required
       *
       * @example
       * // Clone the date:
       * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
       * //=> Tue Feb 11 2014 11:30:30
       *
       * @example
       * // Convert the timestamp to date:
       * const result = toDate(1392098430000)
       * //=> Tue Feb 11 2014 11:30:30
       */


      function toDate(argument) {
        Object(__WEBPACK_IMPORTED_MODULE_0__lib_requiredArgs_index_js__["a"
        /* default */
        ])(1, arguments);
        var argStr = Object.prototype.toString.call(argument); // Clone the date

        if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
          // Prevent the date to lose the milliseconds when passed to new Date() in IE10
          return new Date(argument.getTime());
        } else if (typeof argument === 'number' || argStr === '[object Number]') {
          return new Date(argument);
        } else {
          if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
            // eslint-disable-next-line no-console
            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

            console.warn(new Error().stack);
          }

          return new Date(NaN);
        }
      }
      /***/

    },
    /* 121 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = toDate;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_date_fns_esm_lib_toInteger_index_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_date_fns_esm_lib_getTimezoneOffsetInMilliseconds_index_js__ = __webpack_require__(122);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__lib_tzParseTimezone__ = __webpack_require__(39);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var MILLISECONDS_IN_HOUR = 3600000;
      var MILLISECONDS_IN_MINUTE = 60000;
      var DEFAULT_ADDITIONAL_DIGITS = 2;
      var patterns = {
        dateTimeDelimeter: /[T ]/,
        plainTime: /:/,
        timeZoneDelimeter: /[Z ]/i,
        // year tokens
        YY: /^(\d{2})$/,
        YYY: [/^([+-]\d{2})$/, // 0 additional digits
        /^([+-]\d{3})$/, // 1 additional digit
        /^([+-]\d{4})$/ // 2 additional digits
        ],
        YYYY: /^(\d{4})/,
        YYYYY: [/^([+-]\d{4})/, // 0 additional digits
        /^([+-]\d{5})/, // 1 additional digit
        /^([+-]\d{6})/ // 2 additional digits
        ],
        // date tokens
        MM: /^-(\d{2})$/,
        DDD: /^-?(\d{3})$/,
        MMDD: /^-?(\d{2})-?(\d{2})$/,
        Www: /^-?W(\d{2})$/,
        WwwD: /^-?W(\d{2})-?(\d{1})$/,
        HH: /^(\d{2}([.,]\d*)?)$/,
        HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
        HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,
        // timezone tokens (to identify the presence of a tz)
        timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?))$/
      };
      /**
       * @name toDate
       * @category Common Helpers
       * @summary Convert the given argument to an instance of Date.
       *
       * @description
       * Convert the given argument to an instance of Date.
       *
       * If the argument is an instance of Date, the function returns its clone.
       *
       * If the argument is a number, it is treated as a timestamp.
       *
       * If an argument is a string, the function tries to parse it.
       * Function accepts complete ISO 8601 formats as well as partial implementations.
       * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
       * If the function cannot parse the string or the values are invalid, it returns Invalid Date.
       *
       * If the argument is none of the above, the function returns Invalid Date.
       *
       * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
       * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.
       *
       * @param {Date|String|Number} argument - the value to convert
       * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
       * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
       * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.
       * @returns {Date} the parsed date in the local time zone
       * @throws {TypeError} 1 argument required
       * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
       *
       * @example
       * // Convert string '2014-02-11T11:30:30' to date:
       * var result = toDate('2014-02-11T11:30:30')
       * //=> Tue Feb 11 2014 11:30:30
       *
       * @example
       * // Convert string '+02014101' to date,
       * // if the additional number of digits in the extended year format is 1:
       * var result = toDate('+02014101', {additionalDigits: 1})
       * //=> Fri Apr 11 2014 00:00:00
       */

      function toDate(argument, dirtyOptions) {
        if (arguments.length < 1) {
          throw new TypeError('1 argument required, but only ' + arguments.length + ' present');
        }

        if (argument === null) {
          return new Date(NaN);
        }

        var options = dirtyOptions || {};
        var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Object(__WEBPACK_IMPORTED_MODULE_0_date_fns_esm_lib_toInteger_index_js__["a"
        /* default */
        ])(options.additionalDigits);

        if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
          throw new RangeError('additionalDigits must be 0, 1 or 2');
        } // Clone the date


        if (argument instanceof Date || _typeof(argument) === 'object' && Object.prototype.toString.call(argument) === '[object Date]') {
          // Prevent the date to lose the milliseconds when passed to new Date() in IE10
          return new Date(argument.getTime());
        } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {
          return new Date(argument);
        } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
          return new Date(NaN);
        }

        var dateStrings = splitDateString(argument);
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        var year = parseYearResult.year;
        var restDateString = parseYearResult.restDateString;
        var date = parseDate(restDateString, year);

        if (isNaN(date)) {
          return new Date(NaN);
        }

        if (date) {
          var timestamp = date.getTime();
          var time = 0;
          var offset;

          if (dateStrings.time) {
            time = parseTime(dateStrings.time);

            if (isNaN(time)) {
              return new Date(NaN);
            }
          }

          if (dateStrings.timezone || options.timeZone) {
            offset = Object(__WEBPACK_IMPORTED_MODULE_2__lib_tzParseTimezone__["a"
            /* default */
            ])(dateStrings.timezone || options.timeZone, new Date(timestamp + time));

            if (isNaN(offset)) {
              return new Date(NaN);
            }

            offset = Object(__WEBPACK_IMPORTED_MODULE_2__lib_tzParseTimezone__["a"
            /* default */
            ])(dateStrings.timezone || options.timeZone, new Date(timestamp + time + offset));

            if (isNaN(offset)) {
              return new Date(NaN);
            }
          } else {
            // get offset accurate to hour in timezones that change offset
            offset = Object(__WEBPACK_IMPORTED_MODULE_1_date_fns_esm_lib_getTimezoneOffsetInMilliseconds_index_js__["a"
            /* default */
            ])(new Date(timestamp + time));
            offset = Object(__WEBPACK_IMPORTED_MODULE_1_date_fns_esm_lib_getTimezoneOffsetInMilliseconds_index_js__["a"
            /* default */
            ])(new Date(timestamp + time + offset));
          }

          return new Date(timestamp + time + offset);
        } else {
          return new Date(NaN);
        }
      }

      function splitDateString(dateString) {
        var dateStrings = {};
        var array = dateString.split(patterns.dateTimeDelimeter);
        var timeString;

        if (patterns.plainTime.test(array[0])) {
          dateStrings.date = null;
          timeString = array[0];
        } else {
          dateStrings.date = array[0];
          timeString = array[1];
          dateStrings.timezone = array[2];

          if (patterns.timeZoneDelimeter.test(dateStrings.date)) {
            dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];
            timeString = dateString.substr(dateStrings.date.length, dateString.length);
          }
        }

        if (timeString) {
          var token = patterns.timezone.exec(timeString);

          if (token) {
            dateStrings.time = timeString.replace(token[1], '');
            dateStrings.timezone = token[1];
          } else {
            dateStrings.time = timeString;
          }
        }

        return dateStrings;
      }

      function parseYear(dateString, additionalDigits) {
        var patternYYY = patterns.YYY[additionalDigits];
        var patternYYYYY = patterns.YYYYY[additionalDigits];
        var token; // YYYY or ±YYYYY

        token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);

        if (token) {
          var yearString = token[1];
          return {
            year: parseInt(yearString, 10),
            restDateString: dateString.slice(yearString.length)
          };
        } // YY or ±YYY


        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);

        if (token) {
          var centuryString = token[1];
          return {
            year: parseInt(centuryString, 10) * 100,
            restDateString: dateString.slice(centuryString.length)
          };
        } // Invalid ISO-formatted year


        return {
          year: null
        };
      }

      function parseDate(dateString, year) {
        // Invalid ISO-formatted year
        if (year === null) {
          return null;
        }

        var token;
        var date;
        var month;
        var week; // YYYY

        if (dateString.length === 0) {
          date = new Date(0);
          date.setUTCFullYear(year);
          return date;
        } // YYYY-MM


        token = patterns.MM.exec(dateString);

        if (token) {
          date = new Date(0);
          month = parseInt(token[1], 10) - 1;

          if (!validateDate(year, month)) {
            return new Date(NaN);
          }

          date.setUTCFullYear(year, month);
          return date;
        } // YYYY-DDD or YYYYDDD


        token = patterns.DDD.exec(dateString);

        if (token) {
          date = new Date(0);
          var dayOfYear = parseInt(token[1], 10);

          if (!validateDayOfYearDate(year, dayOfYear)) {
            return new Date(NaN);
          }

          date.setUTCFullYear(year, 0, dayOfYear);
          return date;
        } // yyyy-MM-dd or YYYYMMDD


        token = patterns.MMDD.exec(dateString);

        if (token) {
          date = new Date(0);
          month = parseInt(token[1], 10) - 1;
          var day = parseInt(token[2], 10);

          if (!validateDate(year, month, day)) {
            return new Date(NaN);
          }

          date.setUTCFullYear(year, month, day);
          return date;
        } // YYYY-Www or YYYYWww


        token = patterns.Www.exec(dateString);

        if (token) {
          week = parseInt(token[1], 10) - 1;

          if (!validateWeekDate(year, week)) {
            return new Date(NaN);
          }

          return dayOfISOWeekYear(year, week);
        } // YYYY-Www-D or YYYYWwwD


        token = patterns.WwwD.exec(dateString);

        if (token) {
          week = parseInt(token[1], 10) - 1;
          var dayOfWeek = parseInt(token[2], 10) - 1;

          if (!validateWeekDate(year, week, dayOfWeek)) {
            return new Date(NaN);
          }

          return dayOfISOWeekYear(year, week, dayOfWeek);
        } // Invalid ISO-formatted date


        return null;
      }

      function parseTime(timeString) {
        var token;
        var hours;
        var minutes; // hh

        token = patterns.HH.exec(timeString);

        if (token) {
          hours = parseFloat(token[1].replace(',', '.'));

          if (!validateTime(hours)) {
            return NaN;
          }

          return hours % 24 * MILLISECONDS_IN_HOUR;
        } // hh:mm or hhmm


        token = patterns.HHMM.exec(timeString);

        if (token) {
          hours = parseInt(token[1], 10);
          minutes = parseFloat(token[2].replace(',', '.'));

          if (!validateTime(hours, minutes)) {
            return NaN;
          }

          return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;
        } // hh:mm:ss or hhmmss


        token = patterns.HHMMSS.exec(timeString);

        if (token) {
          hours = parseInt(token[1], 10);
          minutes = parseInt(token[2], 10);
          var seconds = parseFloat(token[3].replace(',', '.'));

          if (!validateTime(hours, minutes, seconds)) {
            return NaN;
          }

          return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;
        } // Invalid ISO-formatted time


        return null;
      }

      function dayOfISOWeekYear(isoWeekYear, week, day) {
        week = week || 0;
        day = day || 0;
        var date = new Date(0);
        date.setUTCFullYear(isoWeekYear, 0, 4);
        var fourthOfJanuaryDay = date.getUTCDay() || 7;
        var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
      } // Validation functions


      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

      function isLeapYearIndex(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
      }

      function validateDate(year, month, date) {
        if (month < 0 || month > 11) {
          return false;
        }

        if (date != null) {
          if (date < 1) {
            return false;
          }

          var isLeapYear = isLeapYearIndex(year);

          if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {
            return false;
          }

          if (!isLeapYear && date > DAYS_IN_MONTH[month]) {
            return false;
          }
        }

        return true;
      }

      function validateDayOfYearDate(year, dayOfYear) {
        if (dayOfYear < 1) {
          return false;
        }

        var isLeapYear = isLeapYearIndex(year);

        if (isLeapYear && dayOfYear > 366) {
          return false;
        }

        if (!isLeapYear && dayOfYear > 365) {
          return false;
        }

        return true;
      }

      function validateWeekDate(year, week, day) {
        if (week < 0 || week > 52) {
          return false;
        }

        if (day != null && (day < 0 || day > 6)) {
          return false;
        }

        return true;
      }

      function validateTime(hours, minutes, seconds) {
        if (hours != null && (hours < 0 || hours >= 25)) {
          return false;
        }

        if (minutes != null && (minutes < 0 || minutes >= 60)) {
          return false;
        }

        if (seconds != null && (seconds < 0 || seconds >= 60)) {
          return false;
        }

        return true;
      }
      /***/

    },
    /* 122 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = getTimezoneOffsetInMilliseconds;
      var MILLISECONDS_IN_MINUTE = 60000;

      function getDateMillisecondsPart(date) {
        return date.getTime() % MILLISECONDS_IN_MINUTE;
      }
      /**
       * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
       * They usually appear for dates that denote time before the timezones were introduced
       * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
       * and GMT+01:00:00 after that date)
       *
       * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
       * which would lead to incorrect calculations.
       *
       * This function returns the timezone offset in milliseconds that takes seconds in account.
       */


      function getTimezoneOffsetInMilliseconds(dirtyDate) {
        var date = new Date(dirtyDate.getTime());
        var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
        date.setSeconds(0, 0);
        var hasNegativeUTCOffset = baseTimezoneOffset > 0;
        var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);
        return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
      }
      /***/

    },
    /* 123 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return EventsMixin;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "b", function () {
        return withEventsMixin;
      });

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* eslint-disable no-prototype-builtins */

      /**
       * Events Mixin
       *
       * Allow classes to have their own events manager
       *
       * @param {Class} superClass
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var EventsMixin = function EventsMixin(superClass) {
        var _temp;

        return _temp = /*#__PURE__*/function (_superClass) {
          _inherits(_temp, _superClass);

          var _super = _createSuper(_temp);

          function _temp() {
            var _this;

            _classCallCheck(this, _temp);

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _super.call.apply(_super, [this].concat(args));
            _this.__handlers = {};
            return _this;
          }

          _createClass(_temp, [{
            key: "on",

            /**
             * Register an event handler
             *
             * @param {String} name event name
             * @param {Function} handler handler function
             */
            value: function on(name, handler) {
              this.__handlers[name] = this.__handlers[name] || [];

              this.__handlers[name].push(handler);
            }
            /**
             * Remove an event handler
             *
             * **Note :** if handler is not provided then all registered handler for the given event will be removed
             *
             * @param {String} name event name
             * @param {Function} handler handler function
             */

          }, {
            key: "off",
            value: function off(name, handler) {
              this.__handlers[name] = this.__handlers[name] || [];

              if (!handler) {
                delete this.__handlers[name];
              } else {
                for (var registeredHandler in this.__handlers) {
                  if (this.__handlers.hasOwnProperty(registeredHandler) && this.__handlers[registeredHandler] === handler) {
                    delete this.__handlers[name];
                  }
                }
              }
            }
            /**
             * Notify handlers
             *
             * @param {String} name event name
             * @param {Object} event payload
             */

          }, {
            key: "notify",
            value: function notify(name, payload) {
              var handlers = this.__handlers[name] || [];
              handlers.forEach(function (handler) {
                handler(payload);
              });
            }
          }]);

          return _temp;
        }(superClass), _temp;
      };
      /**
       * An events mixin decorator
       *
       * @param {Class} superClass
       *
       * @see {EventsMixin}
       */


      function withEventsMixin(superClass) {
        return EventsMixin(superClass);
      }
      /* unused harmony default export */


      var _unused_webpack_default_export = EventsMixin;
      /***/
    },
    /* 124 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__ = __webpack_require__(37);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__EventsMixin__ = __webpack_require__(40);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__Component__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__style_scss__ = __webpack_require__(125);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__style_scss__);

      var _class, _class2, _init, _class3, _temp;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * DateTimeInput
       *
       * Simple DateTimeInput component which integrates the flatpickr
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var DateTimeInput = Object(__WEBPACK_IMPORTED_MODULE_3__EventsMixin__["a"
      /* withEventsMixin */
      ])(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
        _inherits(DateTimeInput, _Component);

        var _super = _createSuper(DateTimeInput);
        /**
         * Constant which describes the event name that will be fired when a date
         * is selected using the date picker
         *
         * @type {String}
         */

        /**
         * The date picker instance
         *
         * @type {FlatpickrFn}
         */

        /**
         * The last selected date
         *
         * @type {Date|null}
         */

        /**
         * The component received params when init is called
         *s
         * @type {Object}
         */

        /**
         * Construct new DateTimeInput
         *
         * @param {Boolean} isEditor when true , the input will styled to fit as a cell editor
         */


        function DateTimeInput() {
          var _this;

          var isEditor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

          _classCallCheck(this, DateTimeInput);

          _this = _super.call(this);
          _this.picker = null;
          _this.selectedDate = null;
          _this._params = {};
          _this._gui = document.createElement('div');
          _this._gui.className = 'ag-cell-edit-wrapper';
          _this._gui.innerHTML =
          /* html */
          "\n    <div class=\"ag-cell-editor ag-labeled ag-label-align-left ag-text-field ag-input-field\">\n      <div class=\"datetime__input ".concat(isEditor ? 'datetime__input--editor ' : '', " ag-wrapper ag-input-wrapper ag-text-field-input-wrapper\">\n          <input class=\"datetime__input__input ").concat(isEditor ? 'ag-cell-edit-input ' : '', " ag-input-field-input ag-text-field-input\" type=\"text\" data-input>\n          <a class=\"datetime__input__clear\" data-clear>\n            <i class=\"datetime__input__clear__icon ag-icon ag-icon-cross\"></i>\n          </a>    \n      </div>\n    </div>\n    ");
          return _this;
        }
        /**
         * @inheritDoc
         */


        _createClass(DateTimeInput, [{
          key: "init",
          value: function init(params) {
            this._params = params;
            var enableTime = this.getOption('dateTimeEnableTime', params, true);
            var time_24hr = this.getOption('dateTimeEnable24HR', params, true);
            var enableSeconds = this.getOption('dateTimeEnableSeconds', params, false);
            var noCalendar = !this.getOption('dateTimeEnableCalendar', params, true);
            var dateFormat = this.getOption('dateTimeMask', params); // try to generate a default date format based on the options

            if (!dateFormat) {
              dateFormat = noCalendar ? '' : '%Y/%Mz/%Dz';

              if (enableTime) {
                dateFormat += time_24hr ? ' %Hz:%mz' : ' %hz:%mz';

                if (enableSeconds) {
                  dateFormat += ':%sz';
                }
              }
            }

            dateFormat = dateFormat.trim(); // init the date picker

            this.picker = flatpickr(this._gui, {
              wrap: true,
              // allow entering the date manually requires date parsing from string
              // this is a tough thing and requires libs like moment
              allowInput: false,
              onChange: this._onDateChanged,
              formatDate: this.formatDate,
              maxDate: this.getOption('dateTimeMax', params, null),
              minDate: this.getOption('dateTimeMin', params, null),
              defaultHour: this.getOption('dateTimeDefaultHour', params, 12),
              defaultMinute: this.getOption('dateTimeDefaultMinute', params, 0),
              disableMobile: this.getOption('dateTimeDisableMobile', params, false),
              weekNumbers: this.getOption('dateTimeEnableWeekNumber', params, false),
              locale: this._getPickerLocale(),
              noCalendar: noCalendar,
              dateFormat: dateFormat,
              enableTime: enableTime,
              enableSeconds: enableSeconds,
              time_24hr: time_24hr
            }); // force dialog overflow

            this.picker.calendarContainer.classList.add('ag-custom-component-popup');
          }
          /**
           * @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this.picker.destroy();
            this.off(DateTimeInput.ON_DATE_CHANGED);
          }
          /**
           * Set the picker date
           *
           * @param {Date|String} value the date value to set
           */

        }, {
          key: "setDate",
          value: function setDate(value) {
            this.picker.setDate(value, true);
          }
          /**
           * Open Picker
           */

        }, {
          key: "open",
          value: function open() {
            this.picker.open();

            this._gui.querySelector('input').focus();
          }
          /**
           * Close picker
           */

        }, {
          key: "close",
          value: function close() {
            this.picker.close();
          }
          /**
           * Reset the picker
           */

        }, {
          key: "reset",
          value: function reset() {
            /** this check because the tests fail here for some reasons  */
            if (this.picker.config) {
              this.picker.clear();
            }
          }
          /**
           * Format the date using `BBj.Masks.Types.date`
           *
           * @param {String} date date as a string
           * @param {String} format BBj date format
           *
           * @return {String} formatted date as string
           */

        }, {
          key: "formatDate",
          value: function formatDate(date, format) {
            var dateTimeFormatter = this.getOption('dateTimeFormatter', this._params);
            var locale = this.getOption('dateTimeLocale', this._params, Intl.DateTimeFormat().resolvedOptions().locale || 'en-US');

            if (dateTimeFormatter) {
              var type = _typeof(dateTimeFormatter);

              var expression = dateTimeFormatter;

              switch (type) {
                case 'string':
                  if (!(expression.indexOf('return') >= 0)) {
                    expression = 'return ' + expression + ';';
                  }

                  return new Function('date', 'format', 'locale', 'DateMask', expression)(date, format, locale, BBj.Masks.DateMask);

                case 'function':
                  return dateTimeFormatter(date, format, locale, BBj.Masks.DateMask);

                default:
                  throw new Error("Invalid dateTimeFormatter defined for column \"".concat(this._params.colDef.field, "\". The formatter should be an expression or plain function"));
              }
            } else {
              if (!format || format && format.indexOf('%') < 0) {
                return;
              }

              return BBj.Masks.DateMask.mask(date, format, locale);
            }
          }
          /**
           * Listen to date picker changes and update the selected date
           *
           * @param {Array} selectedDates  array of selected dates
           */

        }, {
          key: "_onDateChanged",
          value: function _onDateChanged(selectedDates) {
            this.selectedDate = selectedDates[0] || null;
            this.notify(DateTimeInput.ON_DATE_CHANGED, this.selectedDate);
          }
          /**
           * Get picker global localization which will work with any locale
           *
           * @return {Object}
           *
           * https://github.com/flatpickr/flatpickr/blob/master/src/l10n/default.ts
           */

        }, {
          key: "_getPickerLocale",
          value: function _getPickerLocale() {
            var locale = Intl.DateTimeFormat().resolvedOptions().locale || 'en-US';
            var weekDaysShort = [];
            var weekDaysLong = [];

            for (var day = 4; day < 11; day++) {
              var date = new Date(1970, 1 - 1, day);
              weekDaysShort.push(date.toLocaleString(locale, {
                weekday: 'short'
              }).split(',')[0] // the date-time-format-timezone polyfill attach the date also
              );
              weekDaysLong.push(date.toLocaleString(locale, {
                weekday: 'long'
              }).split(',')[0] // the date-time-format-timezone polyfill attach the date also
              );
            }

            var monthsShort = [];
            var monthsLong = [];

            for (var month = 0; month < 12; month++) {
              var _date = new Date(1970, month, 4);

              monthsShort.push(_date.toLocaleString(locale, {
                month: 'short'
              }));
              monthsLong.push(_date.toLocaleString(locale, {
                month: 'long'
              }));
            }

            return {
              weekdays: {
                shorthand: weekDaysShort,
                longhand: weekDaysLong
              },
              months: {
                shorthand: monthsShort,
                longhand: monthsLong
              },
              daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
              firstDayOfWeek: BBj.Masks.Utils.Dates.getWeekStartByLocale(locale),
              // eslint-disable-next-line no-unused-vars
              ordinal: function ordinal(number) {
                return '';
              },
              rangeSeparator: '  ',
              weekAbbreviation: '',
              scrollTitle: '',
              toggleTitle: '',
              amPM: ['AM', 'PM'],
              yearAriaLabel: '',
              hourAriaLabel: '',
              minuteAriaLabel: ''
            };
          }
        }]);

        return DateTimeInput;
      }(__WEBPACK_IMPORTED_MODULE_4__Component__["a"
      /* default */
      ]), _class3.ON_DATE_CHANGED = 'DateTimeInput.ON_DATE_CHANGED', _temp), (_applyDecoratedDescriptor(_class2, "ON_DATE_CHANGED", [__WEBPACK_IMPORTED_MODULE_2_core_decorators_src_readonly__["a"
      /* default */
      ]], (_init = Object.getOwnPropertyDescriptor(_class2, "ON_DATE_CHANGED"), _init = _init ? _init.value : undefined, {
        enumerable: true,
        configurable: true,
        writable: true,
        initializer: function initializer() {
          return _init;
        }
      }), _class2), _applyDecoratedDescriptor(_class2.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "init"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "formatDate", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "formatDate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_onDateChanged", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class2.prototype, "_onDateChanged"), _class2.prototype)), _class2)) || _class;
      /* harmony default export */


      __webpack_exports__["a"] = DateTimeInput;
      /***/
    },
    /* 125 */

    /***/
    function (module, exports, __webpack_require__) {
      var content = __webpack_require__(126);

      if (typeof content === 'string') content = [[module.i, content, '']];
      var transform;
      var insertInto;
      var options = {
        "hmr": true
      };
      options.transform = transform;

      options.insertInto = function () {
        return window.parent.document.head;
      };

      var update = __webpack_require__(4)(content, options);

      if (content.locals) module.exports = content.locals;

      if (false) {}
      /***/

    },
    /* 126 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(3)(false); // imports
      // module

      exports.push([module.i, ".datetime__input{display:flex;align-items:center;width:100%;height:100%;overflow:hidden;border:1px solid var(--ag-input-border-color, var(--ag-border-color, #babfc7));border-radius:3px}.datetime__input:focus,.datetime__input:active,.datetime__input:hover{border-color:var(--ag-input-focus-border-color, rgba(33,150,243,0.4))}.datetime__input__input{flex:1;padding:6px;border:none;outline:none;background-color:var(--ag-background-color);color:inherit}.ag-theme-alpine .datetime__input__input,.ag-theme-balham .datetime__input__input,.ag-theme-material .datetime__input__input{background-color:var(--ag-background-color, #fff)}.ag-theme-alpine-dark .datetime__input__input,.ag-theme-balham-dark .datetime__input__input{background-color:var(--ag-background-color, #2d3436)}.datetime__input__clear{margin-left:1px;margin-top:1px;padding:6px;text-align:center;border:none;outline:none;cursor:pointer;color:inherit}.datetime__input--editor{border-color:var(--ag-input-focus-border-color, rgba(33,150,243,0.4))}.datetime__input--editor .datetime__input__input{padding:0;padding-left:6px}\n", ""]); // exports

      /***/
    },
    /* 127 */

    /***/
    function (module, exports, __webpack_require__) {
      var content = __webpack_require__(128);

      if (typeof content === 'string') content = [[module.i, content, '']];
      var transform;
      var insertInto;
      var options = {
        "hmr": true
      };
      options.transform = transform;

      options.insertInto = function () {
        return window.parent.document.head;
      };

      var update = __webpack_require__(4)(content, options);

      if (content.locals) module.exports = content.locals;

      if (false) {}
      /***/

    },
    /* 128 */

    /***/
    function (module, exports, __webpack_require__) {
      exports = module.exports = __webpack_require__(3)(false); // imports
      // module

      exports.push([module.i, ".dateTimeFilter select{margin-bottom:9px;padding:6px;border-radius:3px;border:1px solid var(--ag-input-border-color, var(--ag-border-color, #babfc7));color:inherit}.dateTimeFilter select:focus,.dateTimeFilter select:active{border-color:var(--ag-input-focus-border-color, rgba(33,150,243,0.4))}.dateTimeFilter select option{text-indent:6px}\n", ""]); // exports

      /***/
    },
    /* 129 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__DateTimeEditor__ = __webpack_require__(130);
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__DateTimeEditor__["a"
      /* default */
      ];
      /***/
    },
    /* 130 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_date_fns_tz_utcToZonedTime__ = __webpack_require__(38);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__DateTimeInput__ = __webpack_require__(41);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__Component__ = __webpack_require__(0);

      var _class, _temp;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
      /*
       * This file is part of basis-aggrid-components lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * DateTimeInput
       *
       * Simple DateTimeInput component which integrates the flatpickr
       *
       * ## Options
       *
       * | Name                  	| Default     	| Description                                                                                                                    	|
       * |-------------------------	|:-------------:|--------------------------------------------------------------------------------------------------------------------------------|
       * | **dateTimeEnableTime**   | false    | enable / disable time
       * | **dateTimeEnable24HR**   | false    | enable / disable time 24 format
       * | **dateTimeEnableSeconds**   | false    | enable / disable seconds management
       * | **dateTimeEnableCalendar**   | false    | enable / disable Calendar.
       * | **dateTimeMask**   | false    | The mask used to format the selected date
       * | **dateTimeMax**   | undefined    |  Max allowed date
       * | **dateTimeMin**   | undefined    |  Min allowed date
       * | **dateTimeFormatter**   | false    |  A function or expression to format the date (@see supported param)
       * | **dateTimeLocale**   | System default    |  A locale to use for date formatting
       * | **dateTimeDefaultHour**   | 12    |  Initial value of the hour element.
       * | **dateTimeDefaultMinute**   | 0    |  Initial value of the minute element.
       * | **dateTimeDisableMobile**   | false    |  Set disableMobile to true to always use the non-native picker.
       * | **dateTimeEnableWeekNumber**   | true    |  Enables display of week numbers in calendar.
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var DateTimeEditor = (_class = (_temp = /*#__PURE__*/function (_Component) {
        _inherits(DateTimeEditor, _Component);

        var _super = _createSuper(DateTimeEditor);

        function DateTimeEditor() {
          var _this;

          _classCallCheck(this, DateTimeEditor);

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _super.call.apply(_super, [this].concat(args));
          _this._input = new __WEBPACK_IMPORTED_MODULE_3__DateTimeInput__["a"
          /* default */
          ](true);
          _this._value = null;
          _this._params = null;
          return _this;
        }

        _createClass(DateTimeEditor, [{
          key: "init",

          /**
           * @inheritDoc
           */
          value: function init(params) {
            this._params = params;
            this.focusAfterAttached = params.cellStartedEdit;

            if (this.focusAfterAttached) {
              var keyPressBackspaceOrDelete = params.keyPress == 32 || params.keyPress == 46; // space // delete

              if (keyPressBackspaceOrDelete) {
                this._value = '';
              } else if (params.charPress !== null) {
                this._value = params.charPress;
              } else {
                this._value = params.value;

                if (params.keyPress != 113) {
                  //F2
                  this.highlightAllOnFocus = true;
                }
              }
            } else {
              this._value = params.value;
            }

            this._value = this._value ? DateTimeEditor.fixShortISO(this._value) : this._value;

            this._input.init(params);

            this._input.on(__WEBPACK_IMPORTED_MODULE_3__DateTimeInput__["a"
            /* default */
            ].ON_DATE_CHANGED, this._onDateChange);

            if (this._value) {
              this._input.setDate(Object(__WEBPACK_IMPORTED_MODULE_2_date_fns_tz_utcToZonedTime__["a"
              /* default */
              ])(this._value, BBj.Masks.Utils.Dates.getTimezoneOrOffset()));
            }

            this._gui = this._input.getGui();
          }
          /**
           * @inheritDoc
           */

        }, {
          key: "destroy",
          value: function destroy() {
            this._input.destroy();
          }
          /**
           * Gets called once after GUI is attached to DOM.
           * Make sure the container is always focused and listening to key changes
           */

        }, {
          key: "afterGuiAttached",
          value: function afterGuiAttached() {
            if (this.focusAfterAttached) {
              this.focusIn();
            }
          }
          /**
           * Get the final value to the grid, the result of the editing
           *
           * @return {Boolean}
           */

        }, {
          key: "getValue",
          value: function getValue() {
            return this._params.parseValue(this._value);
          }
          /**
           * Gets called once after initialized and returns false so the editor appears in the cell
           *
           * @return {Boolean} always false
           **/

        }, {
          key: "isPopup",
          value: function isPopup() {
            return false;
          }
          /**
           * If doing full row edit, then gets called when tabbing into the cell.
           */

        }, {
          key: "focusIn",
          value: function focusIn() {
            this._input.open();
          }
          /**
           * If doing full row edit, then gets called when tabbing out of the cell.
           */

        }, {
          key: "focusOut",
          value: function focusOut() {
            this._input.close();
          }
          /**
           * Update the editor value with selected date from the input
           *
           * @param {String} date
           */

        }, {
          key: "_onDateChange",
          value: function _onDateChange(date) {
            this._value = date instanceof Date ? date.toISOString() : '';
          }
        }], [{
          key: "fixShortISO",

          /**
           * Takes incomplete iso string and return a complete one
           *
           * @param {String} date incomplete iso string
           *
           * @return {String} complete iso string
           */
          value: function fixShortISO(value) {
            return BBj.Masks.Utils.Dates.fixShortISO(value);
          }
        }]);

        return DateTimeEditor;
      }(__WEBPACK_IMPORTED_MODULE_4__Component__["a"
      /* default */
      ]), _temp), (_applyDecoratedDescriptor(_class.prototype, "init", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "init"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroy", [__WEBPACK_IMPORTED_MODULE_1_core_decorators_src_override__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "destroy"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "_onDateChange", [__WEBPACK_IMPORTED_MODULE_0_core_decorators_src_autobind__["a"
      /* default */
      ]], Object.getOwnPropertyDescriptor(_class.prototype, "_onDateChange"), _class.prototype)), _class);
      /* harmony default export */

      __webpack_exports__["a"] = DateTimeEditor;
      /***/
    }
    /******/
    ])
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../BBjGridExWidget/client/node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!../../basis-input-masking/dist/basis-input-masking.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!D:/Github/basis-input-masking/dist/basis-input-masking.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory(__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'bbj-masks/src/StringMask'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())), __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'bbj-masks/src/NumberMask'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [!(function webpackMissingModule() { var e = new Error("Cannot find module 'bbj-masks/src/StringMask'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), !(function webpackMissingModule() { var e = new Error("Cannot find module 'bbj-masks/src/NumberMask'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(typeof self !== 'undefined' ? self : void 0, function (__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__) {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 1);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports) {
      module.exports = __WEBPACK_EXTERNAL_MODULE_0__;
      /***/
    },
    /* 1 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__TextInput__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__NumberInput__ = __webpack_require__(5);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "TextInput", function () {
        return __WEBPACK_IMPORTED_MODULE_0__TextInput__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberInput", function () {
        return __WEBPACK_IMPORTED_MODULE_1__NumberInput__["a"];
      });
      /*
       * This file is part of basis-input-masking lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /***/

    },
    /* 2 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__TextInput__ = __webpack_require__(3);
      /*
       * This file is part of basis-input-masking lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__TextInput__["a"
      /* default */
      ];
      /***/
    },
    /* 3 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__tools_js__ = __webpack_require__(4);

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of basis-input-masking lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * The `TextInput` will wrap text inputs and apply the given [bbj string mask](https://github.com/BasisHub/bbj-masks#string-masks)
       *
       * **Options**
       *
       * _Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_
       *
       * | Option    | Default | Description                                                                                             |
       * |-----------|---------|---------------------------------------------------------------------------------------------------------|
       * | mask |         | The bbj string mask @see [BBj String Masks](https://github.com/BasisHub/bbj-masks#string-masks) |
       *
       *  <br>
       *
       * **Example :**
       * ```html
       *  <input class="bbj-text-masked" name="test" id="test" value="ed23" data-mask="AA-00">
       *
       *  <script>
       *    document.addEventListener('DOMContentLoaded', function (e) {
       *      new Basis.InputMasking.TextInput({
       *         onUpdate: (maskedValue , rawValue , input) => {
       *            // do something
       *         },
       *         onInvalid: (err , input) => {
       *            // do something
       *         }
       *      })
       *    })
       *  </script>
       * ```
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var TextInput = /*#__PURE__*/function () {
        /**
         * Construct new TextInput
         *
         * @param {?Object} options - The input options.
         * @param {HTMLElement|String} [options.elements=".bbj-text-masked"] - The class name or the node to use
         * @param {HTMLDocument} [options.document=document] - Document instance to use
         * @param {String} [options.cssClassError="bbj-mask-error"] - A css class to attach to the input when it is invalid
         * @param {String} [options.cssClassSuccess="bbj-mask-success"] - A css class to attach to the input when it is valid after the user interaction
         * @param {Function} [options.onUpdate=null] - A callback to be called on the new masked value is set
         * @param {Function} [options.onInvalid=null] - A callback to be called on the input or the mask is invalid
         */
        function TextInput() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, TextInput);

          this.options = _objectSpread(_objectSpread({}, {
            elements: '.bbj-text-masked',
            doc: document,
            cssClassError: 'bbj-mask-error',
            cssClassSuccess: 'bbj-mask-success',
            onUpdate: null,
            onInvalid: null
          }), options);
          this._onKeystroke = this._onKeystroke.bind(this);
          this._onFocus = this._onFocus.bind(this);
          this.refresh();
        }
        /**
         * Initialize the component and wrap the input elements for masking in case
         * they are not wrapped yet
         */


        _createClass(TextInput, [{
          key: "refresh",
          value: function refresh() {
            var elements = typeof this.options.elements === 'string' ? this.options.doc.querySelectorAll(this.options.elements) : this.options.elements;
            var input, parentClass;

            for (var i = 0; i < elements.length; i++) {
              input = elements[i];

              if (input instanceof HTMLInputElement) {
                parentClass = input.parentNode.getAttribute('class');

                if (!input.getAttribute('id')) {
                  console.warn("BBjMasking: Input has no ID. Without an ID the input cannot be masked", input);
                  continue;
                } // we don't initialize the input's wrap twice


                var isWrapped = parentClass && parentClass.indexOf('textInputMask__wrap') > -1;

                this._wrap(input, isWrapped);
              } else {
                console.warn("BBjMasking: Invalid input element. The element will be ignored", input);
              }
            }
          }
          /**
           * Unwrap the input elements and remove attached listeners
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var elements = typeof this.options.elements === 'string' ? this.options.doc.querySelectorAll(this.options.elements) : this.options.elements;
            var input, parent, parentClass;

            for (var i = 0; i < elements.length; i++) {
              input = elements[i];
              parent = input.parentNode;
              parentClass = parent.getAttribute('class');

              if (parentClass && parentClass.indexOf('textInputMask__wrap') > -1) {
                this._unwrap(parent);
              }
            }
          }
          /**
           * Create the text masking input wrapper
           *
           * @param {HTMLInputElement} input the input element
           * @param {Boolean} isWrapped when true the input is already wrapped and we need to add what is
           *                            missing only
           *
           * @returns {HTMLSpanElement} the wrap element
           *
           * @protected
           */

        }, {
          key: "_wrap",
          value: function _wrap(input, isWrapped) {
            var inputId = input.getAttribute('id'),
                inputName = input.getAttribute('name'),
                mask = input.dataset.mask || '',
                originalPattern = input.pattern,
                defaultPattern = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["b"
            /* generatePatternFromMask */
            ])(mask),
                pattern = originalPattern || defaultPattern;
            var wrap = null,
                unmaskInput = null;

            if (!isWrapped) {
              wrap = document.createElement('span');
              unmaskInput = document.createElement('input'); // hidden input with the unmasked values for forms
            } else {
              wrap = input.parentNode;
              unmaskInput = wrap.querySelector('.textInputMask__unmaskedInput');
            } // configure the actual input
            // -----------------------------------------------------


            input.value = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["c"
            /* maskIfNotMasked */
            ])(input.value, mask);
            input.pattern = pattern;
            input.classList.add('textInputMask__textInput');
            input.dataset.mask = mask;
            input.dataset.valueUnmasked = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["d"
            /* unmask */
            ])(input.value, mask);

            if (originalPattern && originalPattern !== defaultPattern) {
              input.dataset.isCustomPattern = true;
            }

            if (!isWrapped) {
              if (!(input.hasAttribute('readonly') || input.hasAttribute('disable'))) {
                input.addEventListener('keyup', this._onKeystroke);
                input.addEventListener('keypress', this._onKeystroke);
                input.addEventListener('paste', this._onKeystroke);
                input.addEventListener('focusin', this._onFocus);
                input.addEventListener('click', this._onFocus);
              }

              input.parentNode.insertBefore(wrap, input); // move the input outside the wrapper
            }

            if (this._validateInput(input)) {
              this.__fireOnUpdate(input.value, input.dataset.valueUnmasked, input);
            } // configure the unmasked input
            // ----------------------------------------------------


            unmaskInput.setAttribute('aria-hidden', 'true');
            unmaskInput.setAttribute('type', 'hidden');
            unmaskInput.classList.add('textInputMask__unmaskedInput');
            unmaskInput.value = input.dataset.valueUnmasked;
            if (inputId) unmaskInput.setAttribute('id', "".concat(inputId, "-unmasked"));
            if (inputName) unmaskInput.setAttribute('name', "".concat(inputName, "-unmasked"));

            if (!isWrapped) {
              // configure the wrapper
              wrap.setAttribute('class', 'textInputMask__wrap');
              wrap.appendChild(unmaskInput);
              wrap.appendChild(input);
            }

            return wrap;
          }
          /**
           * Unwrap the masked input and remove the value changed listener
           *
           * @param {HTMLSpanElement} textInput the wrapper span instance
           *
           * @protected
           */

        }, {
          key: "_unwrap",
          value: function _unwrap(textInput) {
            textInput.removeChild(textInput.querySelector('.textInputMask__unmaskedInput'));
            var input = textInput.querySelector('.textInputMask__textInput');
            input.removeEventListener('keyup', this._onKeystroke);
            input.removeEventListener('keypress', this._onKeystroke);
            input.removeEventListener('paste', this._onKeystroke);
            input.removeEventListener('focusin', this._onFocus);
            input.removeEventListener('click', this._onFocus);
            delete input.dataset.valueUnmasked;

            if (!input.dataset.isCustomPattern) {
              input.removeAttribute('pattern');
              delete input.dataset.isCustomPattern;
            }

            input.classList.remove(this.options.cssClassError);
            textInput.parentNode.insertBefore(input, textInput);
            textInput.parentNode.removeChild(textInput);
          }
          /**
           * Listen to every keystroke on the input and update the masked and the unmasked value
           *
           * @param {Event} e
           *
           * @protected
           */

        }, {
          key: "_onKeystroke",
          value: function _onKeystroke(e) {
            if (e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) return;
            if (e.keyCode !== 13) e.preventDefault();
            var input = e.target,
                mask = input.dataset.mask || this.options.mask,
                eventType = e.type;
            input.classList.remove(this.options.cssClassError);
            input.classList.remove(this.options.cssClassSuccess);
            input.setCustomValidity('');
            var value = input.value,
                keyCode = e.keyCode,
                keyContent = e.key || e.code.replace(/[^0-9]/g, ''),
                key = keyContent ? keyContent.length > 1 ? '' : keyContent : '',
                insertPosition = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["a"
            /* findCaretPosition */
            ])(value, mask),
                newValue,
                unmaskedValue,
                maskError = false;

            switch (eventType) {
              case 'paste':
                newValue = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["c"
                /* maskIfNotMasked */
                ])((e.clipboardData || window.clipboardData).getData('Text'), mask);
                break;

              case 'keyup':
                newValue = value;
                break;

              case 'keypress':
                var selectionStart = input.selectionStart;
                if (selectionStart !== insertPosition) insertPosition = selectionStart;
                newValue = value.substr(0, insertPosition) + key + value.substr(insertPosition);
                break;

              default:
                break;
            }

            unmaskedValue = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["d"
            /* unmask */
            ])(newValue, mask);

            if ([35, 36, 37, 38, 39, 40].indexOf(keyCode) === -1) {
              try {
                input.value = __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask___default.a.mask(unmaskedValue, mask, false);

                if (this._validateInput(input)) {
                  input.dataset.valueUnmasked = unmaskedValue;
                  this.options.doc.querySelector("#".concat(input.getAttribute('id'), "-unmasked")).value = unmaskedValue;

                  this.__applyCssClassState(input, 'success');

                  this.__fireOnUpdate(input.value, input.dataset.valueUnmasked, input);
                }

                maskError = false;
              } catch (error) {
                this.__applyCssClassState(input, 'error');

                this.__fireOnInvalid(error, input);

                maskError = true;
              }

              this._updateCaretPosition(input, mask);
            }

            if (!maskError) this._validateInput(input);
          }
          /**
           * Listen to focus events on the input and update the caret position
           * where the next char should be inserted according to the mask
           *
           * @param {FocusEvent} e
           *
           * @protected
           */

        }, {
          key: "_onFocus",
          value: function _onFocus(e) {
            var input = e.target;
            var mask = input.dataset.mask || this.options.mask;

            this._updateCaretPosition(input, mask);
          }
          /**
           * Update the caret position on the input based on the given mask
           *
           * @param {HTMLInputElement} input instance
           * @param {String} mask  bbj string
           *
           * @protected
           */

        }, {
          key: "_updateCaretPosition",
          value: function _updateCaretPosition(input, mask) {
            setTimeout(function () {
              var position = Object(__WEBPACK_IMPORTED_MODULE_1__tools_js__["a"
              /* findCaretPosition */
              ])(input.value, mask);
              input.setSelectionRange(position, position);
            }, 0);
          }
          /**
           * Trigger `checkValidity` on the input
           *
           * @param {HTMLInputElement} input
           *
           * @returns {Boolean} true when valid , false otherwise
           *
           * @protected
           */

        }, {
          key: "_validateInput",
          value: function _validateInput(input) {
            var isValid = input.checkValidity();

            if (isValid) {
              this.__applyCssClassState(input, 'success');

              input.setCustomValidity('');
            } else {
              this.__applyCssClassState(input, 'error');

              this.__fireOnInvalid(input.validationMessage, input);
            }

            return isValid;
          }
          /**
           * @private
           */

        }, {
          key: "__fireOnUpdate",
          value: function __fireOnUpdate(valueMasked, valueUnmasked, input) {
            if (this.options.onUpdate) {
              this.options.onUpdate(valueMasked, valueUnmasked, input);
            }
          }
          /**
           * @private
           */

        }, {
          key: "__fireOnInvalid",
          value: function __fireOnInvalid(error, input) {
            if (this.options.onInvalid) {
              this.options.onInvalid(error, input);
            }
          }
          /**
           * @private
           */

        }, {
          key: "__applyCssClassState",
          value: function __applyCssClassState(input, state) {
            if (input.hasAttribute('readonly') || input.hasAttribute('disabled')) {
              input.classList.remove(this.options.cssClassError);
              input.classList.remove(this.options.cssClassSuccess);
            } else {
              if (state === 'success') {
                input.classList.remove(this.options.cssClassError);
                input.classList.add(this.options.cssClassSuccess);
              }

              if (state === 'error') {
                input.classList.add(this.options.cssClassError);
                input.classList.remove(this.options.cssClassSuccess);
              }
            }
          }
        }]);

        return TextInput;
      }();
      /* harmony default export */


      __webpack_exports__["a"] = TextInput;
      /***/
    },
    /* 4 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* unused harmony export isMaskedValue */

      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return maskIfNotMasked;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "d", function () {
        return unmask;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return findCaretPosition;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "b", function () {
        return generatePatternFromMask;
      });
      /* unused harmony export IS_UNICODE_PROPERTY_SUPPORTED */

      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask__);
      /*
       * This file is part of basis-input-masking lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var SUPPORTED_MASKS = ['X', 'a', 'A', '0', 'z', 'Z', 'U'];
      /**
       * When true , then the browser supports Unicode Property Escapes
       * otherwise it is false 
       * 
       * {@link https://github.com/tc39/proposal-regexp-unicode-property-escapes}
       */

      var IS_UNICODE_PROPERTY_SUPPORTED = false;

      try {
        eval('/\\p{L}/u');
        IS_UNICODE_PROPERTY_SUPPORTED = true;
      } catch (err) {
        IS_UNICODE_PROPERTY_SUPPORTED = false;
      }
      /**
       * Check if the given value is masked with the given mask or not
       *
       * @param {String} value masked or unmasked value
       * @param {String} mask  a bbj mask
       *
       * @return {Boolean} true when the value is masked with given mask , false otherwise
       */


      var isMaskedValue = function isMaskedValue(value, mask) {
        if (typeof isMaskedValue.__CACHE__ === 'undefined') {
          isMaskedValue.__CACHE__ = {};
        }

        var cacheKey = "".concat(value, "-").concat(mask);

        if (!isMaskedValue.__CACHE__[cacheKey]) {
          var unmaskedValue = unmask(value, mask);
          isMaskedValue.__CACHE__[cacheKey] = value === __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask___default.a.mask(unmaskedValue, mask);
        }

        return isMaskedValue.__CACHE__[cacheKey];
      };
      /**
       * Mask the given value with the given mask in case the value is not already masked with the
       * given mask
       *
       * @param {String} value masked or unmasked value
       * @param {String} mask  a bbj mask
       *
       * @return {String} a masked value
       */


      var maskIfNotMasked = function maskIfNotMasked(value, mask) {
        if (typeof maskIfNotMasked.__CACHE__ === 'undefined') {
          maskIfNotMasked.__CACHE__ = {};
        }

        var cacheKey = "".concat(value, "-").concat(mask);

        if (!maskIfNotMasked.__CACHE__[cacheKey]) {
          if (isMaskedValue(value, mask)) {
            maskIfNotMasked.__CACHE__[cacheKey] = value;
          } else {
            try {
              maskIfNotMasked.__CACHE__[cacheKey] = __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask___default.a.mask(value, mask, false);
            } catch (e) {
              maskIfNotMasked.__CACHE__[cacheKey] = __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_StringMask___default.a.mask('', mask);
            }
          }
        }

        return maskIfNotMasked.__CACHE__[cacheKey];
      };
      /**
       * Generate a regex patter based on the give task
       *
       * @param {String} mask  bbj string mask
       *
       * @return {String} regex for the give mask
       */


      var generatePatternFromMask = function generatePatternFromMask(mask) {
        if (typeof generatePatternFromMask.__CACHE__ === 'undefined') {
          generatePatternFromMask.__CACHE__ = {};
        }

        var cacheKey = mask;

        if (!generatePatternFromMask.__CACHE__[cacheKey]) {
          var maskAsArry = mask.split('');
          var regex = '';
          maskAsArry.forEach(function (c) {
            switch (c) {
              case 'X':
                regex += '([a-zA-Z0-9!@#$%^&*()_+\\-=\\[\\]{};\'":\\\\|,.<>\\/?])';
                break;

              case 'a':
              case 'A':
                // https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
                // https://stackoverflow.com/questions/150033/regular-expression-to-match-non-ascii-characters#answer-48902765
                regex += IS_UNICODE_PROPERTY_SUPPORTED ? '\\p{L}' : "((?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]))";
                break;

              case '0':
                regex += '([0-9])';
                break;

              case 'z':
              case 'Z':
                regex += IS_UNICODE_PROPERTY_SUPPORTED ? '([0-9]|\\p{L})' : "([0-9]|(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]))";
                break;

              case 'U':
                regex += IS_UNICODE_PROPERTY_SUPPORTED ? '(([0-9])|(\\s)|([.,/#!$%^&*;:{}=-_`~()])|(\\p{L}))' : "(([0-9])|(\\s)|([.,/#!$%^&*;:{}=-_`~()])|(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]))";
                break;

              default:
                regex += c.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                break;
            }
          });
          generatePatternFromMask.__CACHE__[cacheKey] = regex;
        }

        return generatePatternFromMask.__CACHE__[cacheKey];
      };
      /**
       * Unmask the given value
       *
       * @param {String} maskedValue masked string
       * @param {String} mask  the used mask to produce the masked string
       */


      var unmask = function unmask(maskedValue, mask) {
        if (typeof unmask.__CACHE__ === 'undefined') {
          unmask.__CACHE__ = {};
        }

        var cacheKey = "".concat(maskedValue, "-").concat(mask);

        if (!unmask.__CACHE__[cacheKey]) {
          var maskAsArray = mask.split('');
          var maskedValueAsArray = maskedValue.split('');
          var unmasked = '';

          for (var index = 0; index < maskedValueAsArray.length; index++) {
            var el = maskedValueAsArray[index];
            var _mask = maskAsArray[index];
            var elHasMask = SUPPORTED_MASKS.indexOf(_mask) > -1;

            if (elHasMask) {
              var pattern = new RegExp(generatePatternFromMask(_mask), IS_UNICODE_PROPERTY_SUPPORTED ? 'u' : '');
              if (pattern.test(el)) unmasked += el;else break;
            }
          }

          unmask.__CACHE__[cacheKey] = unmasked.toLocaleLowerCase();
        }

        return unmask.__CACHE__[cacheKey];
      };
      /**
       * Given the masked string , find the next caret position depending on
       * what is missing to complete the mask
       *
       * @param {String} maskedValue masked string
       * @param {String} mask  the used mask to produce the masked string
       */


      var findCaretPosition = function findCaretPosition(maskedValue, mask) {
        if (typeof findCaretPosition.__CACHE__ === 'undefined') {
          findCaretPosition.__CACHE__ = {};
        }

        var cacheKey = "".concat(maskedValue, "-").concat(mask);

        if (!findCaretPosition.__CACHE__[cacheKey]) {
          var maskAsArray = mask.split('');
          var maskedValueAsArray = maskedValue.split('');

          if (maskedValueAsArray.length < maskAsArray.length) {
            maskedValueAsArray = maskedValueAsArray.concat(new Array(maskAsArray.length - maskedValueAsArray.length).join(' ').split(''));
          }

          var position = -1;

          for (var index = 0; index < maskAsArray.length; index++) {
            var el = maskAsArray[index];

            if (el !== maskedValueAsArray[index]) {
              // if (maskedValueAsArray[index] === ' ') return index
              if (SUPPORTED_MASKS.indexOf(el) > -1) {
                var pattern = new RegExp(generatePatternFromMask(el), IS_UNICODE_PROPERTY_SUPPORTED ? 'u' : '');

                if (!pattern.test(maskedValueAsArray[index])) {
                  position = index;
                  break;
                }
              }
            }
          }

          findCaretPosition.__CACHE__[cacheKey] = position < 0 ? maskedValueAsArray.length : position;
        }

        return findCaretPosition.__CACHE__[cacheKey];
      };
      /***/

    },
    /* 5 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__NumberInput__ = __webpack_require__(6);
      /*
       * This file is part of basis-input-masking lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__NumberInput__["a"
      /* default */
      ];
      /***/
    },
    /* 6 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_NumberMask__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_NumberMask___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_NumberMask__);

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of basis-input-masking lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var countDecimals = function countDecimals(value) {
        if (value % 1 != 0) {
          var split = value.toString().split('.');
          if (split.length === 2) return split[1].length;
        }

        return 0;
      };
      /**
       * The `NumberInput` will wrap text inputs and apply the given [bbj Number mask](https://github.com/BasisHub/bbj-masks#number-masks)
       *
       * **Options**
       *
       * _Options can be passed via data attributes . For data attributes, append the option name to data-, as in data-mask_
       *
       * | Option    | Default | Description                                                                                             |
       * |-----------|---------|---------------------------------------------------------------------------------------------------------|
       * | mask |         | The bbj number mask @see [BBj Number Masks](https://github.com/BasisHub/bbj-masks#number-masks) |
       * | min |         | The minimum value to accept for this input|
       * | max |         | The maximum value to accept for this input|
       * | step |         | A stepping interval to use when using up and down arrows to adjust the value, as well as for validation|
       * |grouping-separator | , | a char which will be used as a grouping separator |
       * |decimal-separator | . | a char which will be used as a decimal separator |
       * |force-trailing-zeros | false | Affects the output by switching the way a mask with "#" characters in the trailing positions is filled. for example, the function NumberMask.mask(.10:"#.##") returns .10 instead of .1|
       *
       *  <br>
       *
       * **Example :**
       * ```html
       *  <input class="bbj-number-masked" name="test" id="test" value="1234" data-mask="##,##0">
       *
       *  <script>
       *    document.addEventListener('DOMContentLoaded', function (e) {
       *      new Basis.InputMasking.NumberInput({
       *
       *         // @param {String} valueMasked  masked value
       *         // @param {Number} valueUnmasked  original value
       *         // @param {HTMLInputElement} input the actual input instance
       *         onUpdate: (valueMasked, valueUnmasked, input, isApplied, isInitial) => {
       *            // do something
       *         },
       *
       *         // @param {String|Object} error last occurred error. could be mask error or validation error
       *         // @param {HTMLInputElement} input the actual input instance
       *         onInvalid: (err , input) => {
       *            // do something
       *         }
       *      })
       *    })
       *  </script>
       * ```
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var NumberInput = /*#__PURE__*/function () {
        /**
         * Construct new NumberInput
         *
         * @param {?Object} options - The input options.
         * @param {HTMLElement|String} [options.elements=".bbj-number-masked"] - The class name or the node to use
         * @param {HTMLDocument} [options.document=document] - Document instance to use
         * @param {String} [options.cssClassError="bbj-mask-error"] - A css class to attach to the input when it is invalid
         * @param {String} [options.cssClassSuccess="bbj-mask-success"] - A css class to attach to the input when it is valid after the user interaction
         * @param {Function} [options.onUpdate=null] - A callback to be called on the new masked value is set
         * @param {Function} [options.onInvalid=null] - A callback to be called on the input or the mask is invalid
         */
        function NumberInput() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, NumberInput);

          this.options = _objectSpread(_objectSpread({}, {
            elements: '.bbj-number-masked',
            doc: document,
            cssClassError: 'bbj-mask-error',
            cssClassSuccess: 'bbj-mask-success',
            onUpdate: null,
            onInvalid: null
          }), options);
          this._actualInputHandler = this._actualInputHandler.bind(this);
          this._unmaskedInputHandler = this._unmaskedInputHandler.bind(this);
          this.refresh();
        }
        /**
         * Initialize the component and wrap the input elements for masking in case
         * they are not wrapped yet
         */


        _createClass(NumberInput, [{
          key: "refresh",
          value: function refresh() {
            var elements = typeof this.options.elements === 'string' ? this.options.doc.querySelectorAll(this.options.elements) : this.options.elements;
            var input, parentClass;

            for (var i = 0; i < elements.length; i++) {
              input = elements[i];

              if (input instanceof HTMLInputElement) {
                parentClass = input.parentNode.getAttribute('class');

                if (!input.getAttribute('id')) {
                  console.warn("BBjMasking: Input has no ID. Without an ID the input cannot be masked", input);
                  continue;
                } // we don't initialize the input's wrap twice


                var isWrapped = parentClass && parentClass.indexOf('numberInputMask__wrap') > -1;

                this._wrap(input, isWrapped);
              } else {
                console.warn("BBjMasking: Invalid input element. The element will be ignored", input);
              }
            }
          }
          /**
           * Unwrap the input elements and remove attached listeners
           */

        }, {
          key: "destroy",
          value: function destroy() {
            var elements = typeof this.options.elements === 'string' ? this.options.doc.querySelectorAll(this.options.elements) : this.options.elements;
            var input, parent, parentClass;

            for (var i = 0; i < elements.length; i++) {
              input = elements[i];
              parent = input.parentNode;
              parentClass = parent.getAttribute('class');

              if (parentClass && parentClass.indexOf('numberInputMask__wrap') > -1) {
                this._unwrap(parent);
              }
            }
          }
          /**
           * Create the number masking input wrapper
           *
           * @param {HTMLInputElement} actualInput the input element
           * @param {Boolean} isWrapped when true the input is already wrapped and we need to add what is
           *                            missing only
           *
           * @returns {HTMLSpanElement} wrapper instance
           *
           * @protected
           */

        }, {
          key: "_wrap",
          value: function _wrap(actualInput, isWrapped) {
            var actualInputId = actualInput.getAttribute('id'),
                actualInputName = actualInput.getAttribute('name'),
                actualInputStep = actualInput.dataset.step || null,
                actualInputMax = actualInput.dataset.max || null,
                actualInputMin = actualInput.dataset.min || null,
                actualInputGroupingSeparator = actualInput.dataset.groupingSeparator || ',',
                actualInputDecimalSeparator = actualInput.dataset.decimalSeparator || '.',
                actualInputForceTrailingZeros = actualInput.dataset.forceTrailingZeros || null,
                actualInputMask = actualInput.dataset.mask || '',
                actualInputClasses = actualInput.getAttribute('class'),
                actualInputRequired = actualInput.getAttribute('required') || null;
            var wrap = null,
                unmaskedInput = null;

            if (!isWrapped) {
              wrap = document.createElement('span');
              unmaskedInput = document.createElement('input'); // hidden input with the unmasked values for forms
            } else {
              wrap = actualInput.parentNode;
              unmaskedInput = wrap.querySelector('.numberInputMask__unmaskedInput');
            } // configure the actual input
            // -----------------------------------------------------


            if (!isWrapped) {
              actualInput.parentNode.insertBefore(wrap, actualInput); // move the input outside the wrapper

              if (!(actualInput.hasAttribute('readonly') || actualInput.hasAttribute('disabled'))) {
                actualInput.addEventListener('click', this._actualInputHandler);
                actualInput.addEventListener('focusin', this._actualInputHandler);
              }
            }

            actualInput.dataset.valueUnmasked = actualInput.value || 0;
            actualInput.dataset.groupingSeparator = actualInputGroupingSeparator;
            actualInput.dataset.decimalSeparator = actualInputDecimalSeparator;
            actualInput.dataset.forceTrailingZeros = actualInputForceTrailingZeros;
            actualInput.value = __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_NumberMask___default.a.mask(actualInput.dataset.valueUnmasked, actualInputMask, actualInputGroupingSeparator, actualInputDecimalSeparator, actualInputForceTrailingZeros).trim();
            actualInput.classList.add('numberInputMask__textInput', this.options.cssClassSuccess); // configure the unmasked input
            // ----------------------------------------------------

            unmaskedInput.value = actualInput.dataset.valueUnmasked;
            unmaskedInput.setAttribute('aria-hidden', 'true');
            unmaskedInput.setAttribute('type', 'hidden');
            unmaskedInput.setAttribute('class', actualInputClasses);
            if (actualInputId) unmaskedInput.setAttribute('id', "".concat(actualInputId, "-unmasked"));
            if (actualInputName) unmaskedInput.setAttribute('name', "".concat(actualInputName, "-unmasked"));
            if (actualInputRequired) unmaskedInput.setAttribute('required', 'required');
            if (actualInputStep) unmaskedInput.setAttribute('step', actualInputStep);else {
              var decimals = countDecimals(unmaskedInput.value);
              var step = '1';

              if (decimals > 0) {
                step = ".".concat(Array(decimals).join('0'), "1");
              }

              unmaskedInput.setAttribute('step', step);
            }
            if (actualInputMin) unmaskedInput.setAttribute('min', actualInputMin);
            if (actualInputMax) unmaskedInput.setAttribute('max', actualInputMax);
            unmaskedInput.dataset.inputId = actualInputId;
            unmaskedInput.dataset.mask = actualInputMask;
            unmaskedInput.dataset.groupingSeparator = actualInputGroupingSeparator;
            unmaskedInput.dataset.decimalSeparator = actualInputDecimalSeparator;
            if (actualInputForceTrailingZeros) unmaskedInput.dataset.forceTrailingZeros = actualInputForceTrailingZeros;

            if (!isWrapped) {
              unmaskedInput.classList.add('numberInputMask__unmaskedInput');
              unmaskedInput.addEventListener('keydown', this._unmaskedInputHandler);
              unmaskedInput.addEventListener('keyup', this._unmaskedInputHandler);
              unmaskedInput.addEventListener('focusout', this._unmaskedInputHandler); // configure the wrapper

              wrap.setAttribute('class', 'numberInputMask__wrap');
              wrap.appendChild(unmaskedInput);
              wrap.appendChild(actualInput);
            }

            if (!isNaN(Number(actualInput.dataset.valueUnmasked))) {
              if (this._validateInput(unmaskedInput, actualInput)) {
                this.__fireOnUpdate(actualInput.value, actualInput.dataset.valueUnmasked, actualInput);
              }
            } else {
              actualInput.classList.add(this.options.cssClassError);
            }

            return wrap;
          }
          /**
           * Unwrap the masked input and remove the value changed listener
           *
           * @param {HTMLSpanElement} wrapper the wrapper span instance
           *
           * @protected
           */

        }, {
          key: "_unwrap",
          value: function _unwrap(wrapper) {
            var actualInput = wrapper.querySelector('.numberInputMask__textInput'),
                actualInputId = actualInput.id,
                unmaskedInput = wrapper.querySelector("#".concat(actualInputId, "-unmasked"));
            unmaskedInput.removeEventListener('keyup', this._unmaskedInputHandler);
            unmaskedInput.removeEventListener('keypress', this._unmaskedInputHandler);
            unmaskedInput.removeEventListener('focusout', this._unmaskedInputHandler);
            wrapper.removeChild(unmaskedInput);
            actualInput.removeEventListener('click', this._actualInputHandler);
            actualInput.removeEventListener('focusin', this._actualInputHandler);
            actualInput.classList.remove('numberInputMask__textInput');
            actualInput.classList.remove(this.options.cssClassError);
            actualInput.classList.remove(this.options.cssClassSuccess);
            delete actualInput.dataset.valueUnmasked;
            wrapper.parentNode.insertBefore(actualInput, wrapper);
            wrapper.parentNode.removeChild(wrapper);
          }
          /**
           * Listen to click and focusin event on the actual input and toggle the number input
           *
           * @param {Event} e
           *
           * @protected
           */

        }, {
          key: "_actualInputHandler",
          value: function _actualInputHandler(e) {
            var actualInput = e.target,
                actualInputId = actualInput.id,
                unmaskedInput = this.options.doc.querySelector("#".concat(actualInputId, "-unmasked"));
            actualInput.setAttribute('aria-hidden', 'true');
            actualInput.setAttribute('type', 'hidden');
            unmaskedInput.removeAttribute('aria-hidden');
            unmaskedInput.setAttribute('type', 'number');

            this._validateInput(unmaskedInput, actualInput);

            setTimeout(function () {
              unmaskedInput.focus();
              var length = String(unmaskedInput.value).length;
              unmaskedInput.type = 'text';
              unmaskedInput.setSelectionRange(length, length);
              unmaskedInput.type = 'number';
            }, 0);
          }
          /**
           * Listen to the unmasked input keydown and focusout events and check
           * if the input value can be masked or not
           *
           * @param {Event} e
           *
           * @protected
           */

        }, {
          key: "_unmaskedInputHandler",
          value: function _unmaskedInputHandler(e) {
            var unmaskedInput = e.target,
                keyCode = e.keyCode,
                mask = unmaskedInput.dataset.mask,
                groupingSeparator = unmaskedInput.dataset.groupingSeparator,
                decimalSeparator = unmaskedInput.dataset.decimalSeparator,
                forceTrailingZeros = unmaskedInput.dataset.forceTrailingZeros,
                actualInputId = unmaskedInput.dataset.inputId,
                actualInput = this.options.doc.querySelector("#".concat(actualInputId));

            var restore = false,
                apply = false,
                maskedValue = false,
                isValid = this._validateInput(unmaskedInput, actualInput);

            try {
              maskedValue = __WEBPACK_IMPORTED_MODULE_0_bbj_masks_src_NumberMask___default.a.mask(unmaskedInput.value || 0, mask, groupingSeparator, decimalSeparator, forceTrailingZeros, false).trim();
            } catch (e) {
              maskedValue = false;

              this.__applyCssClassState(unmaskedInput, actualInput, 'error');

              this.__fireOnInvalid(e, actualInput);
            }

            restore = [13, 27].indexOf(keyCode) > -1 || e.type === 'focusout';
            apply = maskedValue && isValid;

            if (restore) {
              unmaskedInput.classList.remove(this.options.cssClassError);
              unmaskedInput.classList.remove(this.options.cssClassSuccess);
              unmaskedInput.setAttribute('aria-hidden', 'true');
              unmaskedInput.setAttribute('type', 'hidden');
              actualInput.removeAttribute('aria-hidden');
              actualInput.setAttribute('type', 'text');
              actualInput.classList.add(this.options.cssClassSuccess);

              if (apply) {
                actualInput.value = maskedValue;
                actualInput.dataset.valueUnmasked = unmaskedInput.value;

                this.__fireOnUpdate(maskedValue, unmaskedInput.value, actualInput);
              } else {
                unmaskedInput.value = actualInput.dataset.valueUnmasked;

                this.__applyCssClassState(unmaskedInput, actualInput, 'success');
              }
            }
          }
          /**
           * Trigger `checkValidity` on the input
           *
           * @param {HTMLInputElement} unmaskedInput
           * @param {HTMLInputElement} actualInput
           *
           * @returns {Boolean} true when valid , false otherwise
           *
           * @protected
           */

        }, {
          key: "_validateInput",
          value: function _validateInput(unmaskedInput, actualInput) {
            var isValid = true;
            var value = Number(unmaskedInput.value);

            if (unmaskedInput.getAttribute('type') === 'hidden' && !isNaN(value)) {
              var max = unmaskedInput.getAttribute('max');
              var min = unmaskedInput.getAttribute('min');
              var step = unmaskedInput.getAttribute('step');
              if (min) isValid = isValid && value >= Number(min);
              if (max) isValid = isValid && value <= Number(max);
              if (step) isValid = isValid && countDecimals(step) === countDecimals(unmaskedInput.value);
            } else isValid = unmaskedInput.checkValidity();

            if (isValid) {
              this.__applyCssClassState(unmaskedInput, actualInput, 'success');
            } else {
              this.__applyCssClassState(unmaskedInput, actualInput, 'error');

              this.__fireOnInvalid(unmaskedInput.validationMessage || 'Validity check fails', actualInput);
            }

            return isValid;
          }
          /**
           * @param {String} valueMasked  masked value
           * @param {Number} valueUnmasked  original value
           * @param {HTMLInputElement} input the actual input instance
           *
           * @private
           */

        }, {
          key: "__fireOnUpdate",
          value: function __fireOnUpdate(valueMasked, valueUnmasked, input) {
            if (this.options.onUpdate) {
              this.options.onUpdate(valueMasked, valueUnmasked, input);
            }
          }
          /**
           * @param {String|Object} error last occurred error. could be mask error or validation error
           * @param {HTMLInputElement} input the actual input instance
           *
           * @private
           */

        }, {
          key: "__fireOnInvalid",
          value: function __fireOnInvalid(error, input) {
            if (this.options.onInvalid) {
              this.options.onInvalid(error, input);
            }
          }
          /**
           * @private
           */

        }, {
          key: "__applyCssClassState",
          value: function __applyCssClassState(unmaskedInput, actualInput, state) {
            if (actualInput.hasAttribute('readonly') || actualInput.hasAttribute('disabled')) {
              actualInput.classList.remove(this.options.cssClassError);
              actualInput.classList.remove(this.options.cssClassSuccess);
              unmaskedInput.classList.remove(this.options.cssClassError);
              unmaskedInput.classList.remove(this.options.cssClassSuccess);
            } else {
              if (state === 'success') {
                actualInput.classList.remove(this.options.cssClassError);
                actualInput.classList.add(this.options.cssClassSuccess);
                unmaskedInput.classList.remove(this.options.cssClassError);
                unmaskedInput.classList.add(this.options.cssClassSuccess);
              }

              if (state === 'error') {
                actualInput.classList.add(this.options.cssClassError);
                actualInput.classList.remove(this.options.cssClassSuccess);
                unmaskedInput.classList.add(this.options.cssClassError);
                unmaskedInput.classList.remove(this.options.cssClassSuccess);
              }
            }
          }
        }]);

        return NumberInput;
      }();
      /* harmony default export */


      __webpack_exports__["a"] = NumberInput;
      /***/
    },
    /* 7 */

    /***/
    function (module, exports) {
      module.exports = __WEBPACK_EXTERNAL_MODULE_7__;
      /***/
    }
    /******/
    ])
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../BBjGridExWidget/client/node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/bbj-masks/dist/bbj-masks.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!./node_modules/bbj-masks/dist/bbj-masks.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(typeof self !== 'undefined' ? self : void 0, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 5);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = toInteger;

      function toInteger(dirtyNumber) {
        if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
          return NaN;
        }

        var number = Number(dirtyNumber);

        if (isNaN(number)) {
          return number;
        }

        return number < 0 ? Math.ceil(number) : Math.floor(number);
      }
      /***/

    },
    /* 1 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__NumberMask__ = __webpack_require__(6);
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__NumberMask__["a"
      /* default */
      ];
      /***/
    },
    /* 2 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__DateMask__ = __webpack_require__(7);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "e", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["e"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "g", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["g"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "h", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["h"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "b", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["b"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "d", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["d"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "f", function () {
        return __WEBPACK_IMPORTED_MODULE_0__DateMask__["f"];
      });
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["c"] = __WEBPACK_IMPORTED_MODULE_0__DateMask__["c"
      /* default */
      ];
      /***/
    },
    /* 3 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = tzParseTimezone;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__tzTokenizeDate_index_js__ = __webpack_require__(9);

      var MILLISECONDS_IN_HOUR = 3600000;
      var MILLISECONDS_IN_MINUTE = 60000;
      var patterns = {
        timezone: /([Z+-].*)$/,
        timezoneZ: /^(Z)$/,
        timezoneHH: /^([+-])(\d{2})$/,
        timezoneHHMM: /^([+-])(\d{2}):?(\d{2})$/,
        timezoneIANA: /(UTC|(?:[a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?))$/
      }; // Parse various time zone offset formats to an offset in milliseconds

      function tzParseTimezone(timezoneString, date) {
        var token;
        var absoluteOffset; // Z

        token = patterns.timezoneZ.exec(timezoneString);

        if (token) {
          return 0;
        }

        var hours; // ±hh

        token = patterns.timezoneHH.exec(timezoneString);

        if (token) {
          hours = parseInt(token[2], 10);

          if (!validateTimezone(hours)) {
            return NaN;
          }

          absoluteOffset = hours * MILLISECONDS_IN_HOUR;
          return token[1] === '+' ? -absoluteOffset : absoluteOffset;
        } // ±hh:mm or ±hhmm


        token = patterns.timezoneHHMM.exec(timezoneString);

        if (token) {
          hours = parseInt(token[2], 10);
          var minutes = parseInt(token[3], 10);

          if (!validateTimezone(hours, minutes)) {
            return NaN;
          }

          absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;
          return token[1] === '+' ? -absoluteOffset : absoluteOffset;
        } // IANA time zone


        token = patterns.timezoneIANA.exec(timezoneString);

        if (token) {
          // var [fYear, fMonth, fDay, fHour, fMinute, fSecond] = tzTokenizeDate(date, timezoneString)
          var tokens = Object(__WEBPACK_IMPORTED_MODULE_0__tzTokenizeDate_index_js__["a"
          /* default */
          ])(date, timezoneString);
          var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3], tokens[4], tokens[5]);
          var timestampWithMsZeroed = date.getTime() - date.getTime() % 1000;
          return -(asUTC - timestampWithMsZeroed);
        }

        return 0;
      }

      function validateTimezone(hours, minutes) {
        if (minutes != null && (minutes < 0 || minutes > 59)) {
          return false;
        }

        return true;
      }
      /***/

    },
    /* 4 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__StringMask__ = __webpack_require__(19);
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__StringMask__["a"
      /* default */
      ];
      /***/
    },
    /* 5 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "Utils", function () {
        return Utils;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__NumberMask__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__DateMask__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__StringMask__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__Types__ = __webpack_require__(20);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "Types", function () {
        return __WEBPACK_IMPORTED_MODULE_3__Types__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "NumberMask", function () {
        return __WEBPACK_IMPORTED_MODULE_0__NumberMask__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "DateMask", function () {
        return __WEBPACK_IMPORTED_MODULE_1__DateMask__["c"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "StringMask", function () {
        return __WEBPACK_IMPORTED_MODULE_2__StringMask__["a"];
      });
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var Utils = {
        Dates: {
          getDayOfYear: __WEBPACK_IMPORTED_MODULE_1__DateMask__["e"
          /* getDayOfYear */
          ],
          getWeekNumber: __WEBPACK_IMPORTED_MODULE_1__DateMask__["g"
          /* getWeekNumber */
          ],
          getWeekStartByLocale: __WEBPACK_IMPORTED_MODULE_1__DateMask__["h"
          /* getWeekStartByLocale */
          ],
          IS_DATE_REGEX: __WEBPACK_IMPORTED_MODULE_1__DateMask__["a"
          /* IS_DATE_REGEX */
          ],
          IS_TIME_REGEX: __WEBPACK_IMPORTED_MODULE_1__DateMask__["b"
          /* IS_TIME_REGEX */
          ],
          fixShortISO: __WEBPACK_IMPORTED_MODULE_1__DateMask__["d"
          /* fixShortISO */
          ],
          getTimezoneOrOffset: __WEBPACK_IMPORTED_MODULE_1__DateMask__["f"
          /* getTimezoneOrOffset */
          ]
        }
      };
      /* harmony default export */

      __webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_3__Types__["a"
      /* default */
      ];
      /***/
    },
    /* 6 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * NumberMask
       *
       * A javascript implementation for BBj numbers masking
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var NumberMask = /*#__PURE__*/function () {
        function NumberMask() {
          _classCallCheck(this, NumberMask);
        }

        _createClass(NumberMask, null, [{
          key: "mask",

          /**
           * Mask the given number with the given mask according to BBj rules
           *
           * @param {Number} number the number to format
           * @param {String} mask the mask to use for formatting
           * @param {String} [groupingSeparator=,] - a char which will be used as a grouping separator
           * @param {String} [decimalSeparator=.]  - a char which will be used as a decimal separator
           * @param {Boolean} [forceTrailingZeros=false] - Affects the output by switching the way a mask with "#" characters in the trailing positions is filled.
           *                                              for example, the function `NumberMask.mask(.10:"#.##")` returns ` .10` instead of ` .1 `
           * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask
           *                anyway , otherwise it will stop at first error and throw it.
           * 
           * @throws {MaskError} only if loose is disabled
           * 
           * @returns {String} the masked number
           */
          value: function mask(number, _mask) {
            var groupingSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';
            var decimalSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
            var forceTrailingZeros = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var loose = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
            var maskLen = _mask.length;

            if (0 === maskLen) {
              if (loose) return str; // friendly silent fail
              else throw {
                  name: 'MaskError',
                  message: "MaskError: Mask is empty"
                };
            } // Get magnitude and precision of MASK


            var maskBeforeDecimal = 0;
            var maskAfterDecimal = 0;
            var foundDecimal = false;

            for (var i = 0; i < maskLen; ++i) {
              var m = _mask.charAt(i);

              if (m == '0' || m == '#') {
                if (foundDecimal) ++maskAfterDecimal;else ++maskBeforeDecimal;
              } else if (m == '.') foundDecimal = true;
            }

            var num = NumberMask._round(number, maskAfterDecimal);

            var bytes = NumberMask._toCharArray(num); // Get magnitude and precision of NUMBER


            var inLen = bytes.length;
            var numBeforeDecimal = 0;
            var numAfterDecimal = 0;
            foundDecimal = false;

            for (var _i = 0; _i < inLen; ++_i) {
              if (bytes[_i] == '.') foundDecimal = true;else {
                if (foundDecimal) ++numAfterDecimal;else ++numBeforeDecimal;
              }
            } // always ignore mask overflow


            if (numBeforeDecimal > maskBeforeDecimal) {
              if (loose) return number.toString(); // friendly silent fail
              else throw {
                  name: 'MaskError',
                  message: "MaskError: Number is too large for mask"
                };
            } // round if mask is for a lower precision number


            if (numAfterDecimal > maskAfterDecimal) {
              num = NumberMask._round(num, maskAfterDecimal);
              bytes = NumberMask._toCharArray(num);
              inLen = bytes.length; // Get new magnitude and precision of NUMBER

              numBeforeDecimal = 0;
              numAfterDecimal = 0;
              foundDecimal = false;

              for (var _i2 = 0; _i2 < inLen; ++_i2) {
                if (bytes[_i2] == '.') foundDecimal = true;else {
                  if (foundDecimal) ++numAfterDecimal;else ++numBeforeDecimal;
                }
              } // always ignore mask overflow


              if (numBeforeDecimal > maskBeforeDecimal) {
                if (loose) return number.toString(); // friendly silent fail
                else throw {
                    name: 'MaskError',
                    message: "MaskError: Number is too large for mask"
                  };
              }
            }

            var fillByte = ' ',
                floatByte = ' ';
            var inPos = 0,
                outPos = 0,
                floatPos = 0;
            if (_mask.charAt(0) == '*') fillByte = '*';
            var fillInit = fillByte;
            var isNegative = NumberMask._getSign(num) < 0;
            var emitDecimal = inLen > 0 || _mask.indexOf('0') >= 0;
            var foundZero = false;
            var foundDigit = false;
            var currency = false;
            foundDecimal = false;
            var ret = new Array(maskLen);

            for (var maskPos = 0; maskPos < maskLen; ++maskPos) {
              var _m = _mask.charAt(maskPos);

              switch (_m) {
                case '0':
                  --maskBeforeDecimal;

                  if (maskBeforeDecimal < numBeforeDecimal && inPos < inLen) {
                    ret[outPos] = bytes[inPos];
                    ++inPos;
                    foundDigit = true;
                  } else {
                    ret[outPos] = '0';
                    foundZero = true;
                  }

                  ++outPos;
                  break;

                case '#':
                  --maskBeforeDecimal;

                  if (maskBeforeDecimal < numBeforeDecimal && inPos < inLen) {
                    ret[outPos] = bytes[inPos];
                    ++inPos;
                    foundDigit = true;
                  } else {
                    ret[outPos] = foundDecimal && forceTrailingZeros && NumberMask._getSign(num) != 0 ? '0' : fillByte;
                    if (!foundDecimal) floatPos = maskPos;
                  }

                  ++outPos;
                  break;

                case ',':
                  if (foundZero || inPos > 0) ret[outPos] = groupingSeparator;else {
                    ret[outPos] = fillByte;
                    if (!foundDecimal) floatPos = maskPos;
                  }
                  ++outPos;
                  break;

                case '-':
                  if (!foundDigit && floatByte == ' ') {
                    if (isNegative) floatByte = '-';
                    ret[outPos] = fillByte;
                    floatPos = foundDecimal ? -1 : maskPos;
                  } else ret[outPos] = isNegative ? '-' : fillByte;

                  ++outPos;
                  break;

                case '+':
                  if (!foundDigit && floatByte == ' ') {
                    floatByte = isNegative ? '-' : '+';
                    ret[outPos] = fillByte;
                    floatPos = foundDecimal ? -1 : maskPos;
                  } else ret[outPos] = isNegative ? '-' : '+';

                  ++outPos;
                  break;

                case '$':
                  if (!foundDigit && floatByte == ' ') {
                    floatByte = '$';
                    ret[outPos] = fillByte;
                    floatPos = foundDecimal ? -1 : maskPos;
                  } else {
                    ret[outPos] = '$';
                  }

                  ++outPos;
                  break;
                // case '&':
                //   currency = true
                //   if (!foundDigit && floatByte == ' ') {
                //     floatByte = '&'
                //     ret[outPos] = fillByte
                //     floatPos = foundDecimal ? -1 : maskPos
                //   } else {
                //     ret[outPos] = '&'
                //   }
                //   ++outPos
                //   break
                // case '@':
                //   currency = true
                //   if (!foundDigit && floatByte == ' ') {
                //     floatByte = '@'
                //     ret[outPos] = fillByte
                //     floatPos = foundDecimal ? -1 : maskPos
                //   } else {
                //     ret[outPos] = '@'
                //   }
                //   ++outPos
                //   break

                case '(':
                  if (!foundDigit && floatByte == ' ') {
                    if (isNegative) floatByte = '(';
                    ret[outPos] = fillByte;
                    floatPos = foundDecimal ? -1 : maskPos;
                  } else {
                    if (isNegative) {
                      ret[outPos] = '(';
                    } else {
                      ret[outPos] = foundDecimal ? ' ' : fillByte;
                    }
                  }

                  ++outPos;
                  break;

                case ')':
                  if (isNegative) {
                    ret[outPos] = ')';
                  } else {
                    ret[outPos] = foundDecimal ? ' ' : fillByte;
                  }

                  ++outPos;
                  break;

                case 'C':
                  if (maskPos < maskLen - 1 && _mask.charAt(maskPos + 1) == 'R') {
                    if (isNegative) {
                      ret[outPos] = 'C';
                      ret[outPos + 1] = 'R';
                    } else {
                      ret[outPos] = ' ';
                      ret[outPos + 1] = ' ';
                    }

                    outPos += 2;
                    ++maskPos;
                  } else {
                    ret[outPos] = 'C';
                    ++outPos;
                  }

                  break;

                case 'D':
                  if (maskPos < maskLen - 1 && _mask.charAt(maskPos + 1) == 'R') {
                    if (isNegative) {
                      ret[outPos] = 'C';
                      ret[outPos + 1] = 'R';
                    } else {
                      ret[outPos] = 'D';
                      ret[outPos + 1] = 'R';
                    }

                    outPos += 2;
                    ++maskPos;
                  } else {
                    ret[outPos] = 'D';
                    ++outPos;
                  }

                  break;

                case '*':
                  ret[outPos] = '*';
                  ++outPos;
                  break;

                case '.':
                  ret[outPos] = emitDecimal ? decimalSeparator : fillByte;
                  fillByte = ' ';
                  foundDecimal = true;
                  ++inPos;
                  ++outPos;
                  break;

                case 'B':
                  ret[outPos] = ' ';
                  ++outPos;
                  break;

                default:
                  ret[outPos] = _m;
                  ++outPos;
                  break;
              }
            }

            if (floatByte != ' ') {
              if (floatPos < 0) floatPos = outPos;

              while (floatPos >= maskLen) {
                --floatPos;
              }

              if (ret[floatPos] == fillInit) ret[floatPos] = floatByte;
            }

            return ret.join('');
          }
        }, {
          key: "_shift",
          value: function _shift(number, precision, reverseShift) {
            if (reverseShift) precision = -precision;
            var numArray = ('' + number).split('e');
            return +(numArray[0] + 'e' + (numArray[1] ? +numArray[1] + precision : precision));
          }
        }, {
          key: "_round",
          value: function _round(number, precision) {
            return NumberMask._shift(Math.round(NumberMask._shift(number, precision, false)), precision, true);
          }
        }, {
          key: "_toCharArray",
          value: function _toCharArray(number) {
            var signum = NumberMask._getSign(number);

            var chars = [];

            if (signum !== 0) {
              var string = signum < 0 ? "".concat(-1 * number.toString()) : number.toString();
              if (string.length > 1 && string.charAt(0) == '0') string = string.substring(1); // The string contains only [0-9] and '.'

              chars = string.split('');
            }

            return chars;
          }
          /**
           * Returns the sign of a number
           *
           * @param {Number} x number
           * @returns {Number} A number representing the sign of the given argument.
           *                   If the argument is a positive number, negative number, positive zero
           *                   or negative zero, the function will return 1, -1, 0 or -0 respectively.
           *                   Otherwise, NaN is returned.
           */

        }, {
          key: "_getSign",
          value: function _getSign(x) {
            return (x > 0) - (x < 0) || +x;
          }
        }]);

        return NumberMask;
      }();
      /* harmony default export */


      __webpack_exports__["a"] = NumberMask;
      /***/
    },
    /* 7 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return IS_TIME_REGEX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return IS_DATE_REGEX;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "h", function () {
        return getWeekStartByLocale;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "e", function () {
        return getDayOfYear;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "d", function () {
        return fixShortISO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "f", function () {
        return getTimezoneOrOffset;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "g", function () {
        return getWeekNumber;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_date_fns_tz_utcToZonedTime__ = __webpack_require__(8);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_weekstart__ = __webpack_require__(15);

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var IS_TIME_REGEX = /^(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$/;
      var IS_DATE_REGEX = /^(([12]\d{3})-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$/;
      /**
       * Find out when the first day of the week based on the passed locale
       *
       * @param {locale} locale
       *
       * @return {Number} a number 0 = sunday , 1 = monday , ....
       */

      var getWeekStartByLocale = function getWeekStartByLocale(locale) {
        return Object(__WEBPACK_IMPORTED_MODULE_1_weekstart__["a"
        /* getWeekStartByLocale */
        ])(locale);
      };
      /**
       *  Get day number in the year of the passed date
       *
       * @param {Date} date
       *
       * @return {Number} day number
       */


      var getDayOfYear = function getDayOfYear(date) {
        var start = new Date(date.getFullYear(), 0, 0);
        var diff = date - start + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000;
        var oneDay = 1000 * 60 * 60 * 24;
        var day = Math.floor(diff / oneDay);
        return day;
      };
      /**
       * Takes incomplete iso string and return a complete one
       *
       * @param {String} date incomplete iso string
       *
       * @return {String} complete iso string
       */


      var fixShortISO = function fixShortISO(date) {
        var value = date;
        var offset = (value.match(/z$|[+\-]\d\d:\d\d$/i) || [])[0];

        if (!offset) {
          offset = 'Z';
          value += offset;
        }

        if (IS_TIME_REGEX.test(value)) {
          value = "1970-01-01T".concat(value);
        } else if (IS_DATE_REGEX.test(value)) {
          value = "".concat(value.split(offset)[0], "T00:00:00").concat(offset);
        }

        return value;
      };
      /**
       * Get the browser timezone name , if not supported then the browser
       * timezone offset formatted
       *
       * @return {String} timezone of offset
       */


      var getTimezoneOrOffset = function getTimezoneOrOffset() {
        var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;

        if (!timezone) {
          var pad = function pad(number, length) {
            var str = '' + number;

            while (str.length < length) {
              str = '0' + str;
            }

            return str;
          };

          var offset = new Date().getTimezoneOffset();
          offset = (offset < 0 ? '+' : '-') + // Note the reversed sign!
          pad(parseInt(Math.abs(offset / 60)), 2) + pad(Math.abs(offset % 60), 2);
          return offset;
        }

        return timezone;
      };
      /**
       * Get the Week Number in the passed date
       *
       * @param {Date} date - Date object
       * @param {Number} weekStart A number which defines the first day of the week (0  = sunday , 1 = monday , ...)
       *
       * @returns {Number} the week number
       */


      var getWeekNumber = function getWeekNumber(date, weekStart) {
        var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
        var dayNum = d.getUTCDay() - (weekStart - 1) || 7;
        d.setUTCDate(d.getUTCDate() + 4 - dayNum);
        var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
        return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
      };
      /**
       * DateMask
       *
       * A javascript implementation for BBj dates masking
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var DateMask = /*#__PURE__*/function () {
        function DateMask() {
          _classCallCheck(this, DateMask);
        }

        _createClass(DateMask, null, [{
          key: "mask",

          /**
           * Mask date
           *
           * Mask the passed date with the passed mask
           *
           * @param {String} date date as a string
           * @param {String} mask mask as a string
           * @param {String} [locale=Browser's locale] the language to use ex(en-US). default is to the system language
           * @param {String} [timezone=System timezone] the time zone descriptor (e.g. America/Los_Angeles). default to the system
           *                          timezone
           *
           * @return {String} a date masked with the given mask
           */
          value: function mask(date, _mask, locale, timezone) {
            if (!date) return '';
            if (!_mask) return date;
            timezone = timezone || getTimezoneOrOffset();
            locale = locale || Intl.DateTimeFormat().resolvedOptions().locale || 'en-US'; // make sure we have a complete iso string

            date = date instanceof Date ? date : fixShortISO(date);
            var dateObject = Object(__WEBPACK_IMPORTED_MODULE_0_date_fns_tz_utcToZonedTime__["a"
            /* default */
            ])(date, timezone);

            var translation = DateMask._buildTranslation({
              year: dateObject.getFullYear(),
              month: dateObject.getMonth() + 1,
              monthShort: new Intl.DateTimeFormat([locale], {
                month: 'short'
              }).format(dateObject),
              monthLong: new Intl.DateTimeFormat([locale], {
                month: 'long'
              }).format(dateObject),
              day: dateObject.getDate(),
              dayShort: new Intl.DateTimeFormat([locale], {
                weekday: 'short'
              }).format(dateObject),
              dayLong: new Intl.DateTimeFormat([locale], {
                weekday: 'long'
              }).format(dateObject),
              minutes: dateObject.getMinutes(),
              seconds: dateObject.getSeconds(),

              get hours24() {
                return dateObject.getHours();
              },

              get hours12() {
                return this.hours24 % 12 || 12;
              },

              dayOfYear: getDayOfYear(dateObject),
              dayOfWeek: dateObject.getDay() + 1,
              // Sunday = 1 in BBj but Sunday = 0 in JS
              weekNumber: getWeekNumber(dateObject, getWeekStartByLocale(locale)),
              locale: locale,
              timezone: timezone
            });

            var result = _mask;

            for (var k in translation) {
              result = result.replace(new RegExp('(%' + k + ')', 'g'), translation[k]);
            }

            return result;
          }
          /**
           * Get a map object which contains all possible forms of masks
           *
           * @param {Object} dateDetails date
           *
           * @return {Object} forms masks
           */

        }, {
          key: "_buildTranslation",
          value: function _buildTranslation(dateDetails) {
            return {
              // year
              Yz: dateDetails.year.toString().substr(-2),
              Ys: dateDetails.year,
              Yl: dateDetails.year,
              Yp: String.fromCharCode(dateDetails.year),
              Yd: dateDetails.year,
              Y: dateDetails.year,
              // month
              Mz: String(dateDetails.month).length == 1 ? '0' + dateDetails.month : dateDetails.month,
              Ms: dateDetails.monthShort,
              Ml: dateDetails.monthLong,
              Mp: String.fromCharCode(dateDetails.month),
              Md: dateDetails.month,
              M: dateDetails.month,
              // day
              Dz: String(dateDetails.day).length == 1 ? '0' + dateDetails.day : dateDetails.day,
              Ds: dateDetails.dayShort,
              Dl: dateDetails.dayLong,
              Dp: String.fromCharCode(dateDetails.day),
              Dd: dateDetails.day,
              D: dateDetails.day,
              // hour 24
              Hz: String(dateDetails.hours24).length == 1 ? '0' + dateDetails.hours24 : dateDetails.hours24,
              Hs: dateDetails.hours24,
              Hl: dateDetails.hours24,
              Hp: String.fromCharCode(dateDetails.hours24),
              Hd: dateDetails.hours24,
              H: dateDetails.hours24,
              // hour 12
              hz: String(dateDetails.hours12).length == 1 ? '0' + dateDetails.hours12 : dateDetails.hours12,
              hs: dateDetails.hours12,
              hl: dateDetails.hours12,
              hp: String.fromCharCode(dateDetails.hours12),
              hd: dateDetails.hours12,
              h: dateDetails.hours12,
              // minutes
              mz: String(dateDetails.minutes).length == 1 ? '0' + dateDetails.minutes : dateDetails.minutes,
              ms: dateDetails.minutes,
              ml: dateDetails.minutes,
              mp: String.fromCharCode(dateDetails.minutes),
              md: dateDetails.minutes,
              m: dateDetails.minutes,
              // seconds
              sz: String(dateDetails.seconds).length == 1 ? '0' + dateDetails.seconds : dateDetails.seconds,
              ss: dateDetails.seconds,
              sl: dateDetails.seconds,
              sp: String.fromCharCode(dateDetails.seconds),
              sd: dateDetails.seconds,
              s: dateDetails.seconds,
              // AM , PM
              PP: dateDetails.hours24 > 12 ? 'PM' : 'PM',
              P: dateDetails.hours24 > 12 ? 'PM' : 'AM',
              pp: dateDetails.hours24 > 12 ? 'pm' : 'am',
              p: dateDetails.hours24 > 12 ? 'pm' : 'am',
              // Day of Year
              Jz: String(dateDetails.dayOfYear).length == 1 ? '0' + dateDetails.dayOfYear : dateDetails.dayOfYear,
              Js: dateDetails.dayOfYear,
              Jl: dateDetails.dayOfYear,
              Jd: dateDetails.dayOfYear,
              J: dateDetails.dayOfYear,
              // Day Of Week
              Wz: String(dateDetails.dayOfWeek).length == 1 ? '0' + dateDetails.dayOfWeek : dateDetails.dayOfWeek,
              Ws: dateDetails.dayOfWeek,
              Wl: dateDetails.dayOfWeek,
              Wp: String.fromCharCode(dateDetails.dayOfWeek),
              Wd: dateDetails.dayOfWeek,
              W: dateDetails.dayOfWeek,
              // week number
              wz: String(dateDetails.weekNumber).length == 1 ? '0' + dateDetails.weekNumber : dateDetails.weekNumber,
              ws: dateDetails.weekNumber,
              wl: dateDetails.weekNumber,
              wp: String.fromCharCode(dateDetails.weekNumber),
              wd: dateDetails.weekNumber,
              w: dateDetails.weekNumber
            };
          }
        }]);

        return DateMask;
      }();
      /* harmony default export */


      __webpack_exports__["c"] = DateMask;
      /***/
    },
    /* 8 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = utcToZonedTime;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_tzParseTimezone__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_date_fns_esm_subMilliseconds__ = __webpack_require__(10);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__toDate__ = __webpack_require__(13);
      /**
       * @name utcToZonedTime
       * @category Time Zone Helpers
       * @summary Get a date/time representing local time in a given time zone from the UTC date
       *
       * @description
       * Returns a date instance with values representing the local time in the time zone
       * specified of the UTC time from the date provided. In other words, when the new date
       * is formatted it will show the equivalent hours in the target time zone regardless
       * of the current system time zone.
       *
       * @param {Date|String|Number} date - the date with the relevant UTC time
       * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone
       * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
       * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
       * @returns {Date} the new date with the equivalent time in the time zone
       * @throws {TypeError} 2 arguments required
       * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
       *
       * @example
       * // In June 10am UTC is 6am in New York (-04:00)
       * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')
       * //=> Jun 25 2014 06:00:00
       */


      function utcToZonedTime(dirtyDate, timeZone, options) {
        var date = Object(__WEBPACK_IMPORTED_MODULE_2__toDate__["a"
        /* default */
        ])(dirtyDate, options); // This date has the UTC time values of the input date at the system time zone

        var utcDate = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()); // We just need to apply the offset indicated by the time zone to this localized date

        var offsetMilliseconds = Object(__WEBPACK_IMPORTED_MODULE_0__lib_tzParseTimezone__["a"
        /* default */
        ])(timeZone, date);
        return offsetMilliseconds ? Object(__WEBPACK_IMPORTED_MODULE_1_date_fns_esm_subMilliseconds__["a"
        /* default */
        ])(utcDate, offsetMilliseconds) : utcDate;
      }
      /***/

    },
    /* 9 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = tzTokenizeDate;
      /**
       * Returns the [year, month, day, hour, minute, seconds] tokens of the provided
       * `date` as it will be rendered in the `timeZone`.
       */

      function tzTokenizeDate(date, timeZone) {
        var dtf = getDateTimeFormat(timeZone);
        return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
      }

      var typeToPos = {
        year: 0,
        month: 1,
        day: 2,
        hour: 3,
        minute: 4,
        second: 5
      };

      function partsOffset(dtf, date) {
        var formatted = dtf.formatToParts(date);
        var filled = [];

        for (var i = 0; i < formatted.length; i++) {
          var pos = typeToPos[formatted[i].type];

          if (pos >= 0) {
            filled[pos] = parseInt(formatted[i].value, 10);
          }
        }

        return filled;
      }

      function hackyOffset(dtf, date) {
        var formatted = dtf.format(date).replace(/\u200E/g, '');
        var parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted); // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed
        // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]

        return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]];
      } // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used
      // to get deterministic local date/time output according to the `en-US` locale which
      // can be used to extract local time parts as necessary.


      var dtfCache = {};

      function getDateTimeFormat(timeZone) {
        if (!dtfCache[timeZone]) {
          // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`
          var testDateFormatted = new Intl.DateTimeFormat('en-US', {
            hour12: false,
            timeZone: 'America/New_York',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          }).format(new Date('2014-06-25T04:00:00.123Z'));
          var hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' || testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';
          dtfCache[timeZone] = hourCycleSupported ? new Intl.DateTimeFormat('en-US', {
            hour12: false,
            timeZone: timeZone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          }) : new Intl.DateTimeFormat('en-US', {
            hourCycle: 'h23',
            timeZone: timeZone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
          });
        }

        return dtfCache[timeZone];
      }
      /***/

    },
    /* 10 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = subMilliseconds;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__addMilliseconds_index_js__ = __webpack_require__(11);
      /**
       * @name subMilliseconds
       * @category Millisecond Helpers
       * @summary Subtract the specified number of milliseconds from the given date.
       *
       * @description
       * Subtract the specified number of milliseconds from the given date.
       *
       * ### v2.0.0 breaking changes:
       *
       * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
       *
       * @param {Date|Number} date - the date to be changed
       * @param {Number} amount - the amount of milliseconds to be subtracted
       * @returns {Date} the new date with the milliseconds subtracted
       * @throws {TypeError} 2 arguments required
       *
       * @example
       * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
       * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
       * //=> Thu Jul 10 2014 12:45:29.250
       */


      function subMilliseconds(dirtyDate, dirtyAmount) {
        if (arguments.length < 2) {
          throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');
        }

        var amount = Object(__WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__["a"
        /* default */
        ])(dirtyAmount);
        return Object(__WEBPACK_IMPORTED_MODULE_1__addMilliseconds_index_js__["a"
        /* default */
        ])(dirtyDate, -amount);
      }
      /***/

    },
    /* 11 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = addMilliseconds;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__toDate_index_js__ = __webpack_require__(12);
      /**
       * @name addMilliseconds
       * @category Millisecond Helpers
       * @summary Add the specified number of milliseconds to the given date.
       *
       * @description
       * Add the specified number of milliseconds to the given date.
       *
       * ### v2.0.0 breaking changes:
       *
       * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
       *
       * @param {Date|Number} date - the date to be changed
       * @param {Number} amount - the amount of milliseconds to be added
       * @returns {Date} the new date with the milliseconds added
       * @throws {TypeError} 2 arguments required
       *
       * @example
       * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
       * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
       * //=> Thu Jul 10 2014 12:45:30.750
       */


      function addMilliseconds(dirtyDate, dirtyAmount) {
        if (arguments.length < 2) {
          throw new TypeError('2 arguments required, but only ' + arguments.length + ' present');
        }

        var timestamp = Object(__WEBPACK_IMPORTED_MODULE_1__toDate_index_js__["a"
        /* default */
        ])(dirtyDate).getTime();
        var amount = Object(__WEBPACK_IMPORTED_MODULE_0__lib_toInteger_index_js__["a"
        /* default */
        ])(dirtyAmount);
        return new Date(timestamp + amount);
      }
      /***/

    },
    /* 12 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = toDate;
      /**
       * @name toDate
       * @category Common Helpers
       * @summary Convert the given argument to an instance of Date.
       *
       * @description
       * Convert the given argument to an instance of Date.
       *
       * If the argument is an instance of Date, the function returns its clone.
       *
       * If the argument is a number, it is treated as a timestamp.
       *
       * If the argument is none of the above, the function returns Invalid Date.
       *
       * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
       *
       * @param {Date|Number} argument - the value to convert
       * @returns {Date} the parsed date in the local time zone
       * @throws {TypeError} 1 argument required
       *
       * @example
       * // Clone the date:
       * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
       * //=> Tue Feb 11 2014 11:30:30
       *
       * @example
       * // Convert the timestamp to date:
       * const result = toDate(1392098430000)
       * //=> Tue Feb 11 2014 11:30:30
       */

      function toDate(argument) {
        if (arguments.length < 1) {
          throw new TypeError('1 argument required, but only ' + arguments.length + ' present');
        }

        var argStr = Object.prototype.toString.call(argument); // Clone the date

        if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {
          // Prevent the date to lose the milliseconds when passed to new Date() in IE10
          return new Date(argument.getTime());
        } else if (typeof argument === 'number' || argStr === '[object Number]') {
          return new Date(argument);
        } else {
          if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
            // eslint-disable-next-line no-console
            console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

            console.warn(new Error().stack);
          }

          return new Date(NaN);
        }
      }
      /***/

    },
    /* 13 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = toDate;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_date_fns_esm_lib_toInteger_index_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_date_fns_esm_lib_getTimezoneOffsetInMilliseconds_index_js__ = __webpack_require__(14);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__lib_tzParseTimezone__ = __webpack_require__(3);

      var MILLISECONDS_IN_HOUR = 3600000;
      var MILLISECONDS_IN_MINUTE = 60000;
      var DEFAULT_ADDITIONAL_DIGITS = 2;
      var patterns = {
        dateTimeDelimeter: /[T ]/,
        plainTime: /:/,
        timeZoneDelimeter: /[Z ]/i,
        // year tokens
        YY: /^(\d{2})$/,
        YYY: [/^([+-]\d{2})$/, // 0 additional digits
        /^([+-]\d{3})$/, // 1 additional digit
        /^([+-]\d{4})$/ // 2 additional digits
        ],
        YYYY: /^(\d{4})/,
        YYYYY: [/^([+-]\d{4})/, // 0 additional digits
        /^([+-]\d{5})/, // 1 additional digit
        /^([+-]\d{6})/ // 2 additional digits
        ],
        // date tokens
        MM: /^-(\d{2})$/,
        DDD: /^-?(\d{3})$/,
        MMDD: /^-?(\d{2})-?(\d{2})$/,
        Www: /^-?W(\d{2})$/,
        WwwD: /^-?W(\d{2})-?(\d{1})$/,
        HH: /^(\d{2}([.,]\d*)?)$/,
        HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
        HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,
        // timezone tokens (to identify the presence of a tz)
        timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?))$/
      };
      /**
       * @name toDate
       * @category Common Helpers
       * @summary Convert the given argument to an instance of Date.
       *
       * @description
       * Convert the given argument to an instance of Date.
       *
       * If the argument is an instance of Date, the function returns its clone.
       *
       * If the argument is a number, it is treated as a timestamp.
       *
       * If an argument is a string, the function tries to parse it.
       * Function accepts complete ISO 8601 formats as well as partial implementations.
       * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
       * If the function cannot parse the string or the values are invalid, it returns Invalid Date.
       *
       * If the argument is none of the above, the function returns Invalid Date.
       *
       * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
       * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.
       *
       * @param {Date|String|Number} argument - the value to convert
       * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
       * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
       * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.
       * @returns {Date} the parsed date in the local time zone
       * @throws {TypeError} 1 argument required
       * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
       *
       * @example
       * // Convert string '2014-02-11T11:30:30' to date:
       * var result = toDate('2014-02-11T11:30:30')
       * //=> Tue Feb 11 2014 11:30:30
       *
       * @example
       * // Convert string '+02014101' to date,
       * // if the additional number of digits in the extended year format is 1:
       * var result = toDate('+02014101', {additionalDigits: 1})
       * //=> Fri Apr 11 2014 00:00:00
       */

      function toDate(argument, dirtyOptions) {
        if (arguments.length < 1) {
          throw new TypeError('1 argument required, but only ' + arguments.length + ' present');
        }

        if (argument === null) {
          return new Date(NaN);
        }

        var options = dirtyOptions || {};
        var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Object(__WEBPACK_IMPORTED_MODULE_0_date_fns_esm_lib_toInteger_index_js__["a"
        /* default */
        ])(options.additionalDigits);

        if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
          throw new RangeError('additionalDigits must be 0, 1 or 2');
        } // Clone the date


        if (argument instanceof Date || _typeof(argument) === 'object' && Object.prototype.toString.call(argument) === '[object Date]') {
          // Prevent the date to lose the milliseconds when passed to new Date() in IE10
          return new Date(argument.getTime());
        } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {
          return new Date(argument);
        } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
          return new Date(NaN);
        }

        var dateStrings = splitDateString(argument);
        var parseYearResult = parseYear(dateStrings.date, additionalDigits);
        var year = parseYearResult.year;
        var restDateString = parseYearResult.restDateString;
        var date = parseDate(restDateString, year);

        if (isNaN(date)) {
          return new Date(NaN);
        }

        if (date) {
          var timestamp = date.getTime();
          var time = 0;
          var offset;

          if (dateStrings.time) {
            time = parseTime(dateStrings.time);

            if (isNaN(time)) {
              return new Date(NaN);
            }
          }

          if (dateStrings.timezone || options.timeZone) {
            offset = Object(__WEBPACK_IMPORTED_MODULE_2__lib_tzParseTimezone__["a"
            /* default */
            ])(dateStrings.timezone || options.timeZone, new Date(timestamp + time));

            if (isNaN(offset)) {
              return new Date(NaN);
            }
          } else {
            // get offset accurate to hour in timezones that change offset
            offset = Object(__WEBPACK_IMPORTED_MODULE_1_date_fns_esm_lib_getTimezoneOffsetInMilliseconds_index_js__["a"
            /* default */
            ])(new Date(timestamp + time));
            offset = Object(__WEBPACK_IMPORTED_MODULE_1_date_fns_esm_lib_getTimezoneOffsetInMilliseconds_index_js__["a"
            /* default */
            ])(new Date(timestamp + time + offset));
          }

          return new Date(timestamp + time + offset);
        } else {
          return new Date(NaN);
        }
      }

      function splitDateString(dateString) {
        var dateStrings = {};
        var array = dateString.split(patterns.dateTimeDelimeter);
        var timeString;

        if (patterns.plainTime.test(array[0])) {
          dateStrings.date = null;
          timeString = array[0];
        } else {
          dateStrings.date = array[0];
          timeString = array[1];
          dateStrings.timezone = array[2];

          if (patterns.timeZoneDelimeter.test(dateStrings.date)) {
            dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];
            timeString = dateString.substr(dateStrings.date.length, dateString.length);
          }
        }

        if (timeString) {
          var token = patterns.timezone.exec(timeString);

          if (token) {
            dateStrings.time = timeString.replace(token[1], '');
            dateStrings.timezone = token[1];
          } else {
            dateStrings.time = timeString;
          }
        }

        return dateStrings;
      }

      function parseYear(dateString, additionalDigits) {
        var patternYYY = patterns.YYY[additionalDigits];
        var patternYYYYY = patterns.YYYYY[additionalDigits];
        var token; // YYYY or ±YYYYY

        token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);

        if (token) {
          var yearString = token[1];
          return {
            year: parseInt(yearString, 10),
            restDateString: dateString.slice(yearString.length)
          };
        } // YY or ±YYY


        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);

        if (token) {
          var centuryString = token[1];
          return {
            year: parseInt(centuryString, 10) * 100,
            restDateString: dateString.slice(centuryString.length)
          };
        } // Invalid ISO-formatted year


        return {
          year: null
        };
      }

      function parseDate(dateString, year) {
        // Invalid ISO-formatted year
        if (year === null) {
          return null;
        }

        var token;
        var date;
        var month;
        var week; // YYYY

        if (dateString.length === 0) {
          date = new Date(0);
          date.setUTCFullYear(year);
          return date;
        } // YYYY-MM


        token = patterns.MM.exec(dateString);

        if (token) {
          date = new Date(0);
          month = parseInt(token[1], 10) - 1;

          if (!validateDate(year, month)) {
            return new Date(NaN);
          }

          date.setUTCFullYear(year, month);
          return date;
        } // YYYY-DDD or YYYYDDD


        token = patterns.DDD.exec(dateString);

        if (token) {
          date = new Date(0);
          var dayOfYear = parseInt(token[1], 10);

          if (!validateDayOfYearDate(year, dayOfYear)) {
            return new Date(NaN);
          }

          date.setUTCFullYear(year, 0, dayOfYear);
          return date;
        } // yyyy-MM-dd or YYYYMMDD


        token = patterns.MMDD.exec(dateString);

        if (token) {
          date = new Date(0);
          month = parseInt(token[1], 10) - 1;
          var day = parseInt(token[2], 10);

          if (!validateDate(year, month, day)) {
            return new Date(NaN);
          }

          date.setUTCFullYear(year, month, day);
          return date;
        } // YYYY-Www or YYYYWww


        token = patterns.Www.exec(dateString);

        if (token) {
          week = parseInt(token[1], 10) - 1;

          if (!validateWeekDate(year, week)) {
            return new Date(NaN);
          }

          return dayOfISOWeekYear(year, week);
        } // YYYY-Www-D or YYYYWwwD


        token = patterns.WwwD.exec(dateString);

        if (token) {
          week = parseInt(token[1], 10) - 1;
          var dayOfWeek = parseInt(token[2], 10) - 1;

          if (!validateWeekDate(year, week, dayOfWeek)) {
            return new Date(NaN);
          }

          return dayOfISOWeekYear(year, week, dayOfWeek);
        } // Invalid ISO-formatted date


        return null;
      }

      function parseTime(timeString) {
        var token;
        var hours;
        var minutes; // hh

        token = patterns.HH.exec(timeString);

        if (token) {
          hours = parseFloat(token[1].replace(',', '.'));

          if (!validateTime(hours)) {
            return NaN;
          }

          return hours % 24 * MILLISECONDS_IN_HOUR;
        } // hh:mm or hhmm


        token = patterns.HHMM.exec(timeString);

        if (token) {
          hours = parseInt(token[1], 10);
          minutes = parseFloat(token[2].replace(',', '.'));

          if (!validateTime(hours, minutes)) {
            return NaN;
          }

          return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;
        } // hh:mm:ss or hhmmss


        token = patterns.HHMMSS.exec(timeString);

        if (token) {
          hours = parseInt(token[1], 10);
          minutes = parseInt(token[2], 10);
          var seconds = parseFloat(token[3].replace(',', '.'));

          if (!validateTime(hours, minutes, seconds)) {
            return NaN;
          }

          return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;
        } // Invalid ISO-formatted time


        return null;
      }

      function dayOfISOWeekYear(isoWeekYear, week, day) {
        week = week || 0;
        day = day || 0;
        var date = new Date(0);
        date.setUTCFullYear(isoWeekYear, 0, 4);
        var fourthOfJanuaryDay = date.getUTCDay() || 7;
        var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
        date.setUTCDate(date.getUTCDate() + diff);
        return date;
      } // Validation functions


      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

      function isLeapYearIndex(year) {
        return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
      }

      function validateDate(year, month, date) {
        if (month < 0 || month > 11) {
          return false;
        }

        if (date != null) {
          if (date < 1) {
            return false;
          }

          var isLeapYear = isLeapYearIndex(year);

          if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {
            return false;
          }

          if (!isLeapYear && date > DAYS_IN_MONTH[month]) {
            return false;
          }
        }

        return true;
      }

      function validateDayOfYearDate(year, dayOfYear) {
        if (dayOfYear < 1) {
          return false;
        }

        var isLeapYear = isLeapYearIndex(year);

        if (isLeapYear && dayOfYear > 366) {
          return false;
        }

        if (!isLeapYear && dayOfYear > 365) {
          return false;
        }

        return true;
      }

      function validateWeekDate(year, week, day) {
        if (week < 0 || week > 52) {
          return false;
        }

        if (day != null && (day < 0 || day > 6)) {
          return false;
        }

        return true;
      }

      function validateTime(hours, minutes, seconds) {
        if (hours != null && (hours < 0 || hours >= 25)) {
          return false;
        }

        if (minutes != null && (minutes < 0 || minutes >= 60)) {
          return false;
        }

        if (seconds != null && (seconds < 0 || seconds >= 60)) {
          return false;
        }

        return true;
      }
      /***/

    },
    /* 14 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = getTimezoneOffsetInMilliseconds;
      var MILLISECONDS_IN_MINUTE = 60000;
      /**
       * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
       * They usually appear for dates that denote time before the timezones were introduced
       * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
       * and GMT+01:00:00 after that date)
       *
       * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
       * which would lead to incorrect calculations.
       *
       * This function returns the timezone offset in milliseconds that takes seconds in account.
       */

      function getTimezoneOffsetInMilliseconds(dirtyDate) {
        var date = new Date(dirtyDate.getTime());
        var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
        date.setSeconds(0, 0);
        var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;
        return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
      }
      /***/

    },
    /* 15 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* unused harmony export getWeekStartByRegion */

      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return getWeekStartByLocale$1;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__api_js__ = __webpack_require__(16);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__langRegionMap_js__ = __webpack_require__(17);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__regionDayMap_js__ = __webpack_require__(18);

      function getWeekStartByRegion$1(regionCode) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__api_js__["b"
        /* getWeekStartByRegion */
        ])(regionCode, __WEBPACK_IMPORTED_MODULE_2__regionDayMap_js__["a"
        /* default */
        ]);
      }

      function getWeekStartByLocale$1(locale) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__api_js__["a"
        /* getWeekStartByLocale */
        ])(locale, __WEBPACK_IMPORTED_MODULE_1__langRegionMap_js__["a"
        /* default */
        ], __WEBPACK_IMPORTED_MODULE_2__regionDayMap_js__["a"
        /* default */
        ]);
      }
      /***/

    },
    /* 16 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return getWeekStartByRegion;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return getWeekStartByLocale;
      });

      function getWeekStartByRegion(regionCode, regionDayMap) {
        var code = regionDayMap[typeof regionCode === 'string' ? regionCode.toUpperCase() : regionCode];
        return typeof code === 'number' ? code : 1;
      }

      function getWeekStartByLocale(locale, langRegionMap, regionDayMap) {
        if (locale) {
          var data = locale.toLowerCase().split(/[-_]/);
          var language = data[0];
          var country;

          if (data[1] && data[1].length === 4) {
            language += "_" + data[1];
            country = data[2];
          } else {
            country = data[1];
          }

          if (!country) {
            country = langRegionMap[language];
          }

          if (country) {
            return getWeekStartByRegion(country.match(/^\d+$/) ? Number(country) : country, regionDayMap);
          }
        }

        return 1;
      }
      /***/

    },
    /* 17 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var langRegionMap = {
        en: 'US',
        zh: 'CN',
        zh_hans: 'CN',
        hans: 'CN',
        wuu: 'CN',
        hsn: 'CN',
        hak: 'CN',
        nan: 'CN',
        gan: 'CN',
        hi: 'IN',
        te: 'IN',
        mr: 'IN',
        ta: 'IN',
        gu: 'IN',
        kn: 'IN',
        or: 'IN',
        ml: 'IN',
        pa_guru: 'IN',
        bho: 'IN',
        awa: 'IN',
        as: 'IN',
        mwr: 'IN',
        mai: 'IN',
        mag: 'IN',
        bgc: 'IN',
        hne: 'IN',
        dcc: 'IN',
        dz: 'BT',
        tn: 'BW',
        am: 'ET',
        om: 'ET',
        quc: 'GT',
        id: 'ID',
        jv: 'ID',
        su: 'ID',
        mad: 'ID',
        ms_arab: 'ID',
        ga: 'IE',
        he: 'IL',
        jam: 'JM',
        ja: 'JP',
        km: 'KH',
        ko: 'KR',
        lo: 'LA',
        mh: 'MH',
        my: 'MM',
        mt: 'MT',
        ne: 'NP',
        fil: 'PH',
        ceb: 'PH',
        ilo: 'PH',
        ur: 'PK',
        pa: 'PK',
        pa_arab: 'PK',
        arab: 'PK',
        lah: 'PK',
        ps: 'PK',
        sd: 'PK',
        sd_arab: 'PK',
        skr: 'PK',
        gn: 'PY',
        th: 'TH',
        tts: 'TH',
        aeb: 'TN',
        zh_hant: 'TW',
        hant: 'TW',
        sm: 'WS',
        zu: 'ZA',
        sn: 'ZW',
        arq: 'DZ',
        ar: 'EG',
        arz: 'EG',
        fa: 'IR',
        az_arab: 'IR',
        ary: 'MA',
        bn: 'BD',
        rkt: 'BD',
        dv: 'MV'
      };
      /* harmony default export */

      __webpack_exports__["a"] = langRegionMap;
      /***/
    },
    /* 18 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var regionDayMap = {
        AG: 0,
        ATG: 0,
        28: 0,
        AR: 0,
        ARG: 0,
        32: 0,
        AS: 0,
        ASM: 0,
        16: 0,
        AU: 0,
        AUS: 0,
        36: 0,
        BR: 0,
        BRA: 0,
        76: 0,
        BS: 0,
        BHS: 0,
        44: 0,
        BT: 0,
        BTN: 0,
        64: 0,
        BW: 0,
        BWA: 0,
        72: 0,
        BZ: 0,
        BLZ: 0,
        84: 0,
        CA: 0,
        CAN: 0,
        124: 0,
        CN: 0,
        CHN: 0,
        156: 0,
        CO: 0,
        COL: 0,
        170: 0,
        DM: 0,
        DMA: 0,
        212: 0,
        DO: 0,
        DOM: 0,
        214: 0,
        ET: 0,
        ETH: 0,
        231: 0,
        GT: 0,
        GTM: 0,
        320: 0,
        GU: 0,
        GUM: 0,
        316: 0,
        HK: 0,
        HKG: 0,
        344: 0,
        HN: 0,
        HND: 0,
        340: 0,
        ID: 0,
        IDN: 0,
        360: 0,
        IE: 0,
        IRL: 0,
        372: 0,
        IL: 0,
        ISR: 0,
        376: 0,
        IN: 0,
        IND: 0,
        356: 0,
        JM: 0,
        JAM: 0,
        388: 0,
        JP: 0,
        JPN: 0,
        392: 0,
        KE: 0,
        KEN: 0,
        404: 0,
        KH: 0,
        KHM: 0,
        116: 0,
        KR: 0,
        KOR: 0,
        410: 0,
        LA: 0,
        LA0: 0,
        418: 0,
        MH: 0,
        MHL: 0,
        584: 0,
        MM: 0,
        MMR: 0,
        104: 0,
        MO: 0,
        MAC: 0,
        446: 0,
        MT: 0,
        MLT: 0,
        470: 0,
        MX: 0,
        MEX: 0,
        484: 0,
        MZ: 0,
        MOZ: 0,
        508: 0,
        NI: 0,
        NIC: 0,
        558: 0,
        NP: 0,
        NPL: 0,
        524: 0,
        NZ: 0,
        NZL: 0,
        554: 0,
        PA: 0,
        PAN: 0,
        591: 0,
        PE: 0,
        PER: 0,
        604: 0,
        PH: 0,
        PHL: 0,
        608: 0,
        PK: 0,
        PAK: 0,
        586: 0,
        PR: 0,
        PRI: 0,
        630: 0,
        PY: 0,
        PRY: 0,
        600: 0,
        SA: 0,
        SAU: 0,
        682: 0,
        SG: 0,
        SGP: 0,
        702: 0,
        SV: 0,
        SLV: 0,
        222: 0,
        TH: 0,
        THA: 0,
        764: 0,
        TN: 0,
        TUN: 0,
        788: 0,
        TT: 0,
        TTO: 0,
        780: 0,
        TW: 0,
        TWN: 0,
        158: 0,
        UM: 0,
        UMI: 0,
        581: 0,
        US: 0,
        USA: 0,
        840: 0,
        VE: 0,
        VEN: 0,
        862: 0,
        VI: 0,
        VIR: 0,
        850: 0,
        WS: 0,
        WSM: 0,
        882: 0,
        YE: 0,
        YEM: 0,
        887: 0,
        ZA: 0,
        ZAF: 0,
        710: 0,
        ZW: 0,
        ZWE: 0,
        716: 0,
        AE: 6,
        ARE: 6,
        784: 6,
        AF: 6,
        AFG: 6,
        4: 6,
        BH: 6,
        BHR: 6,
        48: 6,
        DJ: 6,
        DJI: 6,
        262: 6,
        DZ: 6,
        DZA: 6,
        12: 6,
        EG: 6,
        EGY: 6,
        818: 6,
        IQ: 6,
        IRQ: 6,
        368: 6,
        IR: 6,
        IRN: 6,
        364: 6,
        JO: 6,
        JOR: 6,
        400: 6,
        KW: 6,
        KWT: 6,
        414: 6,
        LY: 6,
        LBY: 6,
        434: 6,
        MA: 6,
        MAR: 6,
        504: 6,
        OM: 6,
        OMN: 6,
        512: 6,
        QA: 6,
        QAT: 6,
        634: 6,
        SD: 6,
        SDN: 6,
        729: 6,
        SY: 6,
        SYR: 6,
        760: 6,
        BD: 5,
        BGD: 5,
        50: 5,
        MV: 5,
        MDV: 5,
        462: 5
      };
      /* harmony default export */

      __webpack_exports__["a"] = regionDayMap;
      /***/
    },
    /* 19 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */


      var isNumberRegex = /^\d+$/;
      var isWhitespaceRegex = /\s/;
      var punctuationList = '!"#$%&\'()*+,-./:;<=>?@[]^_`{|}~';
      /**
       * Check if the given string is in lower case
       *
       * @param {String} str
       */

      var isLowerCase = function isLowerCase(str) {
        return str == str.toLowerCase() && str != str.toUpperCase();
      };
      /**
       * Check if the given string is in upper case
       *
       * @param {String} str
       */


      var isUpperCase = function isUpperCase(str) {
        return str == str.toUpperCase() && str != str.toLowerCase();
      };

      var passOrThrowError = function passOrThrowError(loose, ret, i, str) {
        if (!loose) {
          var _char = str.charAt(i);

          var pos = i + 1;
          throw {
            name: 'StringMaskError',
            message: "StringMaskError: error applying mask at position \"".concat(pos, "\" , char \"").concat(_char, "\""),
            pos: pos,
            "char": _char
          };
        } else ret[i] = ' ';
      };
      /**
       * NumberMask
       *
       * A javascript implementation for BBj numbers masking
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var StringMask = /*#__PURE__*/function () {
        function StringMask() {
          _classCallCheck(this, StringMask);
        }

        _createClass(StringMask, null, [{
          key: "mask",

          /**
           * Mask the given string with the given mask according to BBj rules
           *
           * @param {String} str the string to mask
           * @param {String} mask the mask to use for formatting
           * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask
           *                anyway , otherwise it will stop at first error and throw it.
           * 
           * @throws {MaskIsTooShortError}
           * @throws {StringMaskError}
           * @throws {MaskError}
           * 
           * @returns {String} the masked string
           */
          value: function mask(str, _mask) {
            var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            str = String(str);
            _mask = String(_mask);
            var maskLen = _mask.length;
            var strLen = str.length;

            if (strLen > maskLen) {
              if (loose) return str; // friendly silent fail
              else throw {
                  name: 'MaskIsTooShortError',
                  message: "MaskIsTooShortError: Mask is shorter than the passed string"
                };
            }

            var ret = new Array(maskLen);
            var pos = 0; // to keep track of the current position in the str

            var maskByte = '';

            for (var i = 0; i < maskLen; i++) {
              maskByte = _mask.charAt(i);

              switch (maskByte) {
                case 'X':
                  // match any character
                  ret[i] = pos < strLen ? str.charAt(pos) : ' ';
                  ++pos;
                  break;

                case 'A':
                  // match letter; force upper case
                  if (pos < strLen) {
                    var _byte = str.charAt(pos);

                    if (isUpperCase(_byte)) ret[i] = _byte;else if (isLowerCase(_byte)) ret[i] = _byte.toUpperCase();else passOrThrowError(loose, ret, i, str);
                  } else ret[i] = ' ';

                  ++pos;
                  break;

                case 'a':
                  // match letter
                  if (pos < strLen) {
                    var _byte2 = str.charAt(pos);

                    if (isUpperCase(_byte2) || isLowerCase(_byte2)) ret[i] = _byte2;else passOrThrowError(loose, ret, i, str);
                  } else ret[i] = ' ';

                  ++pos;
                  break;

                case '0':
                  // match digit
                  if (pos < strLen) {
                    var _byte3 = str.charAt(pos);

                    if (isNumberRegex.test(_byte3)) ret[i] = _byte3;else passOrThrowError(loose, ret, i, str);
                  } else ret[i] = ' ';

                  ++pos;
                  break;

                case 'Z':
                  // match letter or digit; force upper case
                  if (pos < strLen) {
                    var _byte4 = str.charAt(pos);

                    if (isUpperCase(_byte4) || isNumberRegex.test(_byte4)) ret[i] = _byte4;else if (isLowerCase(_byte4)) ret[i] = _byte4.toUpperCase();else passOrThrowError(loose, ret, i, str);
                  } else ret[i] = ' ';

                  ++pos;
                  break;

                case 'z':
                  // match letter or digit
                  if (pos < strLen) {
                    var _byte5 = str.charAt(pos);

                    if (isUpperCase(_byte5) || isLowerCase(_byte5) || isNumberRegex.test(_byte5)) ret[i] = _byte5;else passOrThrowError(loose, ret, i, str);
                  } else ret[i] = ' ';

                  ++pos;
                  break;
                  break;

                case 'U':
                  // match letter (force upper case), digit, whitespace or punctuation.
                  if (pos < strLen) {
                    var _byte6 = str.charAt(pos);

                    if (isLowerCase(_byte6)) ret[i] = _byte6.toUpperCase();else if (isUpperCase(_byte6) || isNumberRegex.test(_byte6) || isWhitespaceRegex.test(_byte6) || punctuationList.indexOf(_byte6) > -1) ret[i] = _byte6;else passOrThrowError(loose, ret, i, str);
                  } else ret[i] = ' ';

                  ++pos;
                  break;

                default:
                  ret[i] = maskByte;
                  break;
              }
            }

            if (pos < strLen) {
              if (!loose) {
                throw {
                  name: 'MaskError',
                  message: 'Mask cannot be applied'
                };
              }
            }

            return ret.join('');
          }
        }]);

        return StringMask;
      }();
      /* harmony default export */


      __webpack_exports__["a"] = StringMask;
      /***/
    },
    /* 20 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__Types__ = __webpack_require__(21);
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /* harmony default export */


      __webpack_exports__["a"] = __WEBPACK_IMPORTED_MODULE_0__Types__["a"
      /* default */
      ];
      /***/
    },
    /* 21 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__NumberMask__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__DateMask__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__StringMask__ = __webpack_require__(4);

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /*
       * This file is part of bbj-masks lib.
       * (c) Basis Europe <eu@basis.com>
       *
       * For the full copyright and license information, please view the LICENSE
       * file that was distributed with this source code.
       */

      /**
       * Types
       *
       * BBj masks factory
       *
       * @author Hyyan Abo Fakher <habofakher@basis.com>
       */


      var Types = /*#__PURE__*/function () {
        function Types() {
          _classCallCheck(this, Types);
        }

        _createClass(Types, null, [{
          key: "number",

          /**
           * Mask the given number with the given mask according to BBj rules
           *
           * @param {Number} number the number to format
           * @param {String} mask the mask to use for formatting
           * @param {String} [groupingSeparator=,] - a char which will be used as a grouping separator
           * @param {String} [decimalSeparator=.]  - a char which will be used as a decimal separator
           * @param {Boolean} [forceTrailingZeros=false] - Affects the output by switching the way a mask with "#" characters in the trailing positions is filled.
           *                                              for example, the function `NumberMask.mask(.10:"#.##")` returns ` .10` instead of ` .1 `
           * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask
           *                anyway , otherwise it will stop at first error and throw it.
           *
           * @returns {String} the masked number
           */
          value: function number(_number, mask) {
            var groupingSeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ',';
            var decimalSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '.';
            var forceTrailingZeros = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var loose = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
            return __WEBPACK_IMPORTED_MODULE_0__NumberMask__["a"
            /* default */
            ].mask(_number, mask, groupingSeparator, decimalSeparator, forceTrailingZeros, loose);
          }
          /**
           * Mask a date according to bbj masking rules
           *
           * @param {String} date date as a string
           * @param {String} mask mask as a string
           * @param {String} [locale=Browser's locale] the language to use ex(en-US). default is to the system language
           * @param {String} [timezone=System timezone] the time zone descriptor (e.g. America/Los_Angeles). default to the system
           *                          timezone
           *
           * @return {String} number masked with the given mask
           */

        }, {
          key: "date",
          value: function date(_date, mask, locale, timezone) {
            return __WEBPACK_IMPORTED_MODULE_1__DateMask__["c"
            /* default */
            ].mask(_date, mask, locale, timezone);
          }
          /**
           * Mask the given string with the given mask according to BBj rules
           *
           * @param {String} str the string to mask
           * @param {String} mask the mask to use for formatting
           * @param {Boolean} [loose=true] when true , errors will be ignored and the method will try at apply the mask
           *                anyway , otherwise it will stop at first error and throw it.
           *
           * @throws {MaskIsTooShortError}
           * @throws {StringMaskError}
           * @throws {MaskError}
           *
           * @returns {String} the masked string
           */

        }, {
          key: "string",
          value: function string(str, mask) {
            var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
            return __WEBPACK_IMPORTED_MODULE_2__StringMask__["a"
            /* default */
            ].mask(str, mask, loose);
          }
        }]);

        return Types;
      }();
      /* harmony default export */


      __webpack_exports__["a"] = Types;
      /***/
    }
    /******/
    ])
  );
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/flatpickr/dist/flatpickr.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!./node_modules/flatpickr/dist/flatpickr.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* flatpickr v4.6.6, @license MIT */
(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);
})(void 0, function () {
  'use strict';
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
    Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }

      return t;
    };

    return _assign.apply(this, arguments);
  };

  function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
      s += arguments[i].length;
    }

    for (var r = Array(s), k = 0, i = 0; i < il; i++) {
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
        r[k] = a[j];
      }
    }

    return r;
  }

  var HOOKS = ["onChange", "onClose", "onDayCreate", "onDestroy", "onKeyDown", "onMonthChange", "onOpen", "onParseConfig", "onReady", "onValueUpdate", "onYearChange", "onPreCalendarPosition"];
  var defaults = {
    _disable: [],
    _enable: [],
    allowInput: false,
    allowInvalidPreload: false,
    altFormat: "F j, Y",
    altInput: false,
    altInputClass: "form-control input",
    animate: (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.navigator.userAgent.indexOf("MSIE") === -1,
    ariaDateFormat: "F j, Y",
    autoFillDefaultTime: true,
    clickOpens: true,
    closeOnSelect: true,
    conjunction: ", ",
    dateFormat: "Y-m-d",
    defaultHour: 12,
    defaultMinute: 0,
    defaultSeconds: 0,
    disable: [],
    disableMobile: false,
    enable: [],
    enableSeconds: false,
    enableTime: false,
    errorHandler: function errorHandler(err) {
      return typeof console !== "undefined" && console.warn(err);
    },
    getWeek: function getWeek(givenDate) {
      var date = new Date(givenDate.getTime());
      date.setHours(0, 0, 0, 0); // Thursday in current week decides the year.

      date.setDate(date.getDate() + 3 - (date.getDay() + 6) % 7); // January 4 is always in week 1.

      var week1 = new Date(date.getFullYear(), 0, 4); // Adjust to Thursday in week 1 and count number of weeks from date to week1.

      return 1 + Math.round(((date.getTime() - week1.getTime()) / 86400000 - 3 + (week1.getDay() + 6) % 7) / 7);
    },
    hourIncrement: 1,
    ignoredFocusElements: [],
    inline: false,
    locale: "default",
    minuteIncrement: 5,
    mode: "single",
    monthSelectorType: "dropdown",
    nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
    noCalendar: false,
    now: new Date(),
    onChange: [],
    onClose: [],
    onDayCreate: [],
    onDestroy: [],
    onKeyDown: [],
    onMonthChange: [],
    onOpen: [],
    onParseConfig: [],
    onReady: [],
    onValueUpdate: [],
    onYearChange: [],
    onPreCalendarPosition: [],
    plugins: [],
    position: "auto",
    positionElement: undefined,
    prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
    shorthandCurrentMonth: false,
    showMonths: 1,
    static: false,
    time_24hr: false,
    weekNumbers: false,
    wrap: false
  };
  var english = {
    weekdays: {
      shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      longhand: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
    },
    months: {
      shorthand: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      longhand: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
    },
    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
    firstDayOfWeek: 0,
    ordinal: function ordinal(nth) {
      var s = nth % 100;
      if (s > 3 && s < 21) return "th";

      switch (s % 10) {
        case 1:
          return "st";

        case 2:
          return "nd";

        case 3:
          return "rd";

        default:
          return "th";
      }
    },
    rangeSeparator: " to ",
    weekAbbreviation: "Wk",
    scrollTitle: "Scroll to increment",
    toggleTitle: "Click to toggle",
    amPM: ["AM", "PM"],
    yearAriaLabel: "Year",
    monthAriaLabel: "Month",
    hourAriaLabel: "Hour",
    minuteAriaLabel: "Minute",
    time_24hr: false
  };

  var pad = function pad(number, length) {
    if (length === void 0) {
      length = 2;
    }

    return ("000" + number).slice(length * -1);
  };

  var int = function int(bool) {
    return bool === true ? 1 : 0;
  };
  /* istanbul ignore next */


  function debounce(func, wait, immediate) {
    if (immediate === void 0) {
      immediate = false;
    }

    var timeout;
    return function () {
      var context = this,
          args = arguments;
      timeout !== null && clearTimeout(timeout);
      timeout = window.setTimeout(function () {
        timeout = null;
        if (!immediate) func.apply(context, args);
      }, wait);
      if (immediate && !timeout) func.apply(context, args);
    };
  }

  var arrayify = function arrayify(obj) {
    return obj instanceof Array ? obj : [obj];
  };

  function toggleClass(elem, className, bool) {
    if (bool === true) return elem.classList.add(className);
    elem.classList.remove(className);
  }

  function createElement(tag, className, content) {
    var e = window.document.createElement(tag);
    className = className || "";
    content = content || "";
    e.className = className;
    if (content !== undefined) e.textContent = content;
    return e;
  }

  function clearNode(node) {
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
  }

  function findParent(node, condition) {
    if (condition(node)) return node;else if (node.parentNode) return findParent(node.parentNode, condition);
    return undefined; // nothing found
  }

  function createNumberInput(inputClassName, opts) {
    var wrapper = createElement("div", "numInputWrapper"),
        numInput = createElement("input", "numInput " + inputClassName),
        arrowUp = createElement("span", "arrowUp"),
        arrowDown = createElement("span", "arrowDown");

    if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
      numInput.type = "number";
    } else {
      numInput.type = "text";
      numInput.pattern = "\\d*";
    }

    if (opts !== undefined) for (var key in opts) {
      numInput.setAttribute(key, opts[key]);
    }
    wrapper.appendChild(numInput);
    wrapper.appendChild(arrowUp);
    wrapper.appendChild(arrowDown);
    return wrapper;
  }

  function getEventTarget(event) {
    try {
      if (typeof event.composedPath === "function") {
        var path = event.composedPath();
        return path[0];
      }

      return event.target;
    } catch (error) {
      return event.target;
    }
  }

  var doNothing = function doNothing() {
    return undefined;
  };

  var monthToStr = function monthToStr(monthNumber, shorthand, locale) {
    return locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
  };

  var revFormat = {
    D: doNothing,
    F: function F(dateObj, monthName, locale) {
      dateObj.setMonth(locale.months.longhand.indexOf(monthName));
    },
    G: function G(dateObj, hour) {
      dateObj.setHours(parseFloat(hour));
    },
    H: function H(dateObj, hour) {
      dateObj.setHours(parseFloat(hour));
    },
    J: function J(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    K: function K(dateObj, amPM, locale) {
      dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
    },
    M: function M(dateObj, shortMonth, locale) {
      dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
    },
    S: function S(dateObj, seconds) {
      dateObj.setSeconds(parseFloat(seconds));
    },
    U: function U(_, unixSeconds) {
      return new Date(parseFloat(unixSeconds) * 1000);
    },
    W: function W(dateObj, weekNum, locale) {
      var weekNumber = parseInt(weekNum);
      var date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
      date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
      return date;
    },
    Y: function Y(dateObj, year) {
      dateObj.setFullYear(parseFloat(year));
    },
    Z: function Z(_, ISODate) {
      return new Date(ISODate);
    },
    d: function d(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    h: function h(dateObj, hour) {
      dateObj.setHours(parseFloat(hour));
    },
    i: function i(dateObj, minutes) {
      dateObj.setMinutes(parseFloat(minutes));
    },
    j: function j(dateObj, day) {
      dateObj.setDate(parseFloat(day));
    },
    l: doNothing,
    m: function m(dateObj, month) {
      dateObj.setMonth(parseFloat(month) - 1);
    },
    n: function n(dateObj, month) {
      dateObj.setMonth(parseFloat(month) - 1);
    },
    s: function s(dateObj, seconds) {
      dateObj.setSeconds(parseFloat(seconds));
    },
    u: function u(_, unixMillSeconds) {
      return new Date(parseFloat(unixMillSeconds));
    },
    w: doNothing,
    y: function y(dateObj, year) {
      dateObj.setFullYear(2000 + parseFloat(year));
    }
  };
  var tokenRegex = {
    D: "(\\w+)",
    F: "(\\w+)",
    G: "(\\d\\d|\\d)",
    H: "(\\d\\d|\\d)",
    J: "(\\d\\d|\\d)\\w+",
    K: "",
    M: "(\\w+)",
    S: "(\\d\\d|\\d)",
    U: "(.+)",
    W: "(\\d\\d|\\d)",
    Y: "(\\d{4})",
    Z: "(.+)",
    d: "(\\d\\d|\\d)",
    h: "(\\d\\d|\\d)",
    i: "(\\d\\d|\\d)",
    j: "(\\d\\d|\\d)",
    l: "(\\w+)",
    m: "(\\d\\d|\\d)",
    n: "(\\d\\d|\\d)",
    s: "(\\d\\d|\\d)",
    u: "(.+)",
    w: "(\\d\\d|\\d)",
    y: "(\\d{2})"
  };
  var formats = {
    // get the date in UTC
    Z: function Z(date) {
      return date.toISOString();
    },
    // weekday name, short, e.g. Thu
    D: function D(date, locale, options) {
      return locale.weekdays.shorthand[formats.w(date, locale, options)];
    },
    // full month name e.g. January
    F: function F(date, locale, options) {
      return monthToStr(formats.n(date, locale, options) - 1, false, locale);
    },
    // padded hour 1-12
    G: function G(date, locale, options) {
      return pad(formats.h(date, locale, options));
    },
    // hours with leading zero e.g. 03
    H: function H(date) {
      return pad(date.getHours());
    },
    // day (1-30) with ordinal suffix e.g. 1st, 2nd
    J: function J(date, locale) {
      return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();
    },
    // AM/PM
    K: function K(date, locale) {
      return locale.amPM[int(date.getHours() > 11)];
    },
    // shorthand month e.g. Jan, Sep, Oct, etc
    M: function M(date, locale) {
      return monthToStr(date.getMonth(), true, locale);
    },
    // seconds 00-59
    S: function S(date) {
      return pad(date.getSeconds());
    },
    // unix timestamp
    U: function U(date) {
      return date.getTime() / 1000;
    },
    W: function W(date, _, options) {
      return options.getWeek(date);
    },
    // full year e.g. 2016, padded (0001-9999)
    Y: function Y(date) {
      return pad(date.getFullYear(), 4);
    },
    // day in month, padded (01-30)
    d: function d(date) {
      return pad(date.getDate());
    },
    // hour from 1-12 (am/pm)
    h: function h(date) {
      return date.getHours() % 12 ? date.getHours() % 12 : 12;
    },
    // minutes, padded with leading zero e.g. 09
    i: function i(date) {
      return pad(date.getMinutes());
    },
    // day in month (1-30)
    j: function j(date) {
      return date.getDate();
    },
    // weekday name, full, e.g. Thursday
    l: function l(date, locale) {
      return locale.weekdays.longhand[date.getDay()];
    },
    // padded month number (01-12)
    m: function m(date) {
      return pad(date.getMonth() + 1);
    },
    // the month number (1-12)
    n: function n(date) {
      return date.getMonth() + 1;
    },
    // seconds 0-59
    s: function s(date) {
      return date.getSeconds();
    },
    // Unix Milliseconds
    u: function u(date) {
      return date.getTime();
    },
    // number of the day of the week
    w: function w(date) {
      return date.getDay();
    },
    // last two digits of year e.g. 16 for 2016
    y: function y(date) {
      return String(date.getFullYear()).substring(2);
    }
  };

  var createDateFormatter = function createDateFormatter(_a) {
    var _b = _a.config,
        config = _b === void 0 ? defaults : _b,
        _c = _a.l10n,
        l10n = _c === void 0 ? english : _c,
        _d = _a.isMobile,
        isMobile = _d === void 0 ? false : _d;
    return function (dateObj, frmt, overrideLocale) {
      var locale = overrideLocale || l10n;

      if (config.formatDate !== undefined && !isMobile) {
        return config.formatDate(dateObj, frmt, locale);
      }

      return frmt.split("").map(function (c, i, arr) {
        return formats[c] && arr[i - 1] !== "\\" ? formats[c](dateObj, locale, config) : c !== "\\" ? c : "";
      }).join("");
    };
  };

  var createDateParser = function createDateParser(_a) {
    var _b = _a.config,
        config = _b === void 0 ? defaults : _b,
        _c = _a.l10n,
        l10n = _c === void 0 ? english : _c;
    return function (date, givenFormat, timeless, customLocale) {
      if (date !== 0 && !date) return undefined;
      var locale = customLocale || l10n;
      var parsedDate;
      var dateOrig = date;
      if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== "string" && date.toFixed !== undefined // timestamp
      ) // create a copy
        parsedDate = new Date(date);else if (typeof date === "string") {
        // date string
        var format = givenFormat || (config || defaults).dateFormat;
        var datestr = String(date).trim();

        if (datestr === "today") {
          parsedDate = new Date();
          timeless = true;
        } else if (/Z$/.test(datestr) || /GMT$/.test(datestr) // datestrings w/ timezone
        ) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {
          parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));
          var matched = void 0,
              ops = [];

          for (var i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
            var token_1 = format[i];
            var isBackSlash = token_1 === "\\";
            var escaped = format[i - 1] === "\\" || isBackSlash;

            if (tokenRegex[token_1] && !escaped) {
              regexStr += tokenRegex[token_1];
              var match = new RegExp(regexStr).exec(date);

              if (match && (matched = true)) {
                ops[token_1 !== "Y" ? "push" : "unshift"]({
                  fn: revFormat[token_1],
                  val: match[++matchIndex]
                });
              }
            } else if (!isBackSlash) regexStr += "."; // don't really care


            ops.forEach(function (_a) {
              var fn = _a.fn,
                  val = _a.val;
              return parsedDate = fn(parsedDate, val, locale) || parsedDate;
            });
          }

          parsedDate = matched ? parsedDate : undefined;
        }
      }
      /* istanbul ignore next */

      if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
        config.errorHandler(new Error("Invalid date provided: " + dateOrig));
        return undefined;
      }

      if (timeless === true) parsedDate.setHours(0, 0, 0, 0);
      return parsedDate;
    };
  };
  /**
   * Compute the difference in dates, measured in ms
   */


  function compareDates(date1, date2, timeless) {
    if (timeless === void 0) {
      timeless = true;
    }

    if (timeless !== false) {
      return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);
    }

    return date1.getTime() - date2.getTime();
  }

  var isBetween = function isBetween(ts, ts1, ts2) {
    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  };

  var duration = {
    DAY: 86400000
  };

  if (typeof Object.assign !== "function") {
    Object.assign = function (target) {
      var args = [];

      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }

      if (!target) {
        throw TypeError("Cannot convert undefined or null to object");
      }

      var _loop_1 = function _loop_1(source) {
        if (source) {
          Object.keys(source).forEach(function (key) {
            return target[key] = source[key];
          });
        }
      };

      for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
        var source = args_1[_a];

        _loop_1(source);
      }

      return target;
    };
  }

  var DEBOUNCED_CHANGE_MS = 300;

  function FlatpickrInstance(element, instanceConfig) {
    var self = {
      config: _assign(_assign({}, defaults), flatpickr.defaultConfig),
      l10n: english
    };
    self.parseDate = createDateParser({
      config: self.config,
      l10n: self.l10n
    });
    self._handlers = [];
    self.pluginElements = [];
    self.loadedPlugins = [];
    self._bind = bind;
    self._setHoursFromDate = setHoursFromDate;
    self._positionCalendar = positionCalendar;
    self.changeMonth = changeMonth;
    self.changeYear = changeYear;
    self.clear = clear;
    self.close = close;
    self._createElement = createElement;
    self.destroy = destroy;
    self.isEnabled = isEnabled;
    self.jumpToDate = jumpToDate;
    self.open = open;
    self.redraw = redraw;
    self.set = set;
    self.setDate = setDate;
    self.toggle = toggle;

    function setupHelperFunctions() {
      self.utils = {
        getDaysInMonth: function getDaysInMonth(month, yr) {
          if (month === void 0) {
            month = self.currentMonth;
          }

          if (yr === void 0) {
            yr = self.currentYear;
          }

          if (month === 1 && (yr % 4 === 0 && yr % 100 !== 0 || yr % 400 === 0)) return 29;
          return self.l10n.daysInMonth[month];
        }
      };
    }

    function init() {
      self.element = self.input = element;
      self.isOpen = false;
      parseConfig();
      setupLocale();
      setupInputs();
      setupDates();
      setupHelperFunctions();
      if (!self.isMobile) build();
      bindEvents();

      if (self.selectedDates.length || self.config.noCalendar) {
        if (self.config.enableTime) {
          setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj || self.config.minDate : undefined);
        }

        updateValue(false);
      }

      setCalendarWidth();
      var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      /* TODO: investigate this further
                 Currently, there is weird positioning behavior in safari causing pages
        to scroll up. https://github.com/chmln/flatpickr/issues/563
                 However, most browsers are not Safari and positioning is expensive when used
        in scale. https://github.com/chmln/flatpickr/issues/1096
      */

      if (!self.isMobile && isSafari) {
        positionCalendar();
      }

      triggerEvent("onReady");
    }

    function bindToInstance(fn) {
      return fn.bind(self);
    }

    function setCalendarWidth() {
      var config = self.config;

      if (config.weekNumbers === false && config.showMonths === 1) {
        return;
      } else if (config.noCalendar !== true) {
        window.requestAnimationFrame(function () {
          if (self.calendarContainer !== undefined) {
            self.calendarContainer.style.visibility = "hidden";
            self.calendarContainer.style.display = "block";
          }

          if (self.daysContainer !== undefined) {
            var daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
            self.daysContainer.style.width = daysWidth + "px";
            self.calendarContainer.style.width = daysWidth + (self.weekWrapper !== undefined ? self.weekWrapper.offsetWidth : 0) + "px";
            self.calendarContainer.style.removeProperty("visibility");
            self.calendarContainer.style.removeProperty("display");
          }
        });
      }
    }
    /**
     * The handler for all events targeting the time inputs
     */


    function updateTime(e) {
      if (self.selectedDates.length === 0) {
        var defaultDate = self.config.minDate !== undefined ? new Date(self.config.minDate.getTime()) : new Date();

        var _a = getDefaultHours(),
            hours = _a.hours,
            minutes = _a.minutes,
            seconds = _a.seconds;

        defaultDate.setHours(hours, minutes, seconds, 0);
        self.setDate(defaultDate, false);
      }

      if (e !== undefined && e.type !== "blur") {
        timeWrapper(e);
      }

      var prevValue = self._input.value;
      setHoursFromInputs();
      updateValue();

      if (self._input.value !== prevValue) {
        self._debouncedChange();
      }
    }

    function ampm2military(hour, amPM) {
      return hour % 12 + 12 * int(amPM === self.l10n.amPM[1]);
    }

    function military2ampm(hour) {
      switch (hour % 24) {
        case 0:
        case 12:
          return 12;

        default:
          return hour % 12;
      }
    }
    /**
     * Syncs the selected date object time with user's time input
     */


    function setHoursFromInputs() {
      if (self.hourElement === undefined || self.minuteElement === undefined) return;
      var hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24,
          minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60,
          seconds = self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;

      if (self.amPM !== undefined) {
        hours = ampm2military(hours, self.amPM.textContent);
      }

      var limitMinHours = self.config.minTime !== undefined || self.config.minDate && self.minDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0;
      var limitMaxHours = self.config.maxTime !== undefined || self.config.maxDate && self.maxDateHasTime && self.latestSelectedDateObj && compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0;

      if (limitMaxHours) {
        var maxTime = self.config.maxTime !== undefined ? self.config.maxTime : self.config.maxDate;
        hours = Math.min(hours, maxTime.getHours());
        if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());
        if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());
      }

      if (limitMinHours) {
        var minTime = self.config.minTime !== undefined ? self.config.minTime : self.config.minDate;
        hours = Math.max(hours, minTime.getHours());
        if (hours === minTime.getHours()) minutes = Math.max(minutes, minTime.getMinutes());
        if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());
      }

      setHours(hours, minutes, seconds);
    }
    /**
     * Syncs time input values with a date
     */


    function setHoursFromDate(dateObj) {
      var date = dateObj || self.latestSelectedDateObj;

      if (date) {
        setHours(date.getHours(), date.getMinutes(), date.getSeconds());
      }
    }

    function getDefaultHours() {
      var hours = self.config.defaultHour;
      var minutes = self.config.defaultMinute;
      var seconds = self.config.defaultSeconds;

      if (self.config.minDate !== undefined) {
        var minHr = self.config.minDate.getHours();
        var minMinutes = self.config.minDate.getMinutes();
        hours = Math.max(hours, minHr);
        if (hours === minHr) minutes = Math.max(minMinutes, minutes);
        if (hours === minHr && minutes === minMinutes) seconds = self.config.minDate.getSeconds();
      }

      if (self.config.maxDate !== undefined) {
        var maxHr = self.config.maxDate.getHours();
        var maxMinutes = self.config.maxDate.getMinutes();
        hours = Math.min(hours, maxHr);
        if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);
        if (hours === maxHr && minutes === maxMinutes) seconds = self.config.maxDate.getSeconds();
      }

      return {
        hours: hours,
        minutes: minutes,
        seconds: seconds
      };
    }
    /**
     * Sets the hours, minutes, and optionally seconds
     * of the latest selected date object and the
     * corresponding time inputs
     * @param {Number} hours the hour. whether its military
     *                 or am-pm gets inferred from config
     * @param {Number} minutes the minutes
     * @param {Number} seconds the seconds (optional)
     */


    function setHours(hours, minutes, seconds) {
      if (self.latestSelectedDateObj !== undefined) {
        self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
      }

      if (!self.hourElement || !self.minuteElement || self.isMobile) return;
      self.hourElement.value = pad(!self.config.time_24hr ? (12 + hours) % 12 + 12 * int(hours % 12 === 0) : hours);
      self.minuteElement.value = pad(minutes);
      if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
      if (self.secondElement !== undefined) self.secondElement.value = pad(seconds);
    }
    /**
     * Handles the year input and incrementing events
     * @param {Event} event the keyup or increment event
     */


    function onYearInput(event) {
      var eventTarget = getEventTarget(event);
      var year = parseInt(eventTarget.value) + (event.delta || 0);

      if (year / 1000 > 1 || event.key === "Enter" && !/[^\d]/.test(year.toString())) {
        changeYear(year);
      }
    }
    /**
     * Essentially addEventListener + tracking
     * @param {Element} element the element to addEventListener to
     * @param {String} event the event name
     * @param {Function} handler the event handler
     */


    function bind(element, event, handler, options) {
      if (event instanceof Array) return event.forEach(function (ev) {
        return bind(element, ev, handler, options);
      });
      if (element instanceof Array) return element.forEach(function (el) {
        return bind(el, event, handler, options);
      });
      element.addEventListener(event, handler, options);

      self._handlers.push({
        element: element,
        event: event,
        handler: handler,
        options: options
      });
    }

    function triggerChange() {
      triggerEvent("onChange");
    }
    /**
     * Adds all the necessary event listeners
     */


    function bindEvents() {
      if (self.config.wrap) {
        ["open", "close", "toggle", "clear"].forEach(function (evt) {
          Array.prototype.forEach.call(self.element.querySelectorAll("[data-" + evt + "]"), function (el) {
            return bind(el, "click", self[evt]);
          });
        });
      }

      if (self.isMobile) {
        setupMobile();
        return;
      }

      var debouncedResize = debounce(onResize, 50);
      self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
      if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent)) bind(self.daysContainer, "mouseover", function (e) {
        if (self.config.mode === "range") onMouseOver(getEventTarget(e));
      });
      bind(window.document.body, "keydown", onKeyDown);
      if (!self.config.inline && !self.config.static) bind(window, "resize", debouncedResize);
      if (window.ontouchstart !== undefined) bind(window.document, "touchstart", documentClick);else bind(window.document, "click", documentClick);
      bind(window.document, "focus", documentClick, {
        capture: true
      });

      if (self.config.clickOpens === true) {
        bind(self._input, "focus", self.open);
        bind(self._input, "click", self.open);
      }

      if (self.daysContainer !== undefined) {
        bind(self.monthNav, "click", onMonthNavClick);
        bind(self.monthNav, ["keyup", "increment"], onYearInput);
        bind(self.daysContainer, "click", selectDate);
      }

      if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined) {
        var selText = function selText(e) {
          return getEventTarget(e).select();
        };

        bind(self.timeContainer, ["increment"], updateTime);
        bind(self.timeContainer, "blur", updateTime, {
          capture: true
        });
        bind(self.timeContainer, "click", timeIncrement);
        bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
        if (self.secondElement !== undefined) bind(self.secondElement, "focus", function () {
          return self.secondElement && self.secondElement.select();
        });

        if (self.amPM !== undefined) {
          bind(self.amPM, "click", function (e) {
            updateTime(e);
            triggerChange();
          });
        }
      }

      if (self.config.allowInput) bind(self._input, "blur", onBlur);
    }
    /**
     * Set the calendar view to a particular date.
     * @param {Date} jumpDate the date to set the view to
     * @param {boolean} triggerChange if change events should be triggered
     */


    function jumpToDate(jumpDate, triggerChange) {
      var jumpTo = jumpDate !== undefined ? self.parseDate(jumpDate) : self.latestSelectedDateObj || (self.config.minDate && self.config.minDate > self.now ? self.config.minDate : self.config.maxDate && self.config.maxDate < self.now ? self.config.maxDate : self.now);
      var oldYear = self.currentYear;
      var oldMonth = self.currentMonth;

      try {
        if (jumpTo !== undefined) {
          self.currentYear = jumpTo.getFullYear();
          self.currentMonth = jumpTo.getMonth();
        }
      } catch (e) {
        /* istanbul ignore next */
        e.message = "Invalid date supplied: " + jumpTo;
        self.config.errorHandler(e);
      }

      if (triggerChange && self.currentYear !== oldYear) {
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }

      if (triggerChange && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
        triggerEvent("onMonthChange");
      }

      self.redraw();
    }
    /**
     * The up/down arrow handler for time inputs
     * @param {Event} e the click event
     */


    function timeIncrement(e) {
      var eventTarget = getEventTarget(e);
      if (~eventTarget.className.indexOf("arrow")) incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
    }
    /**
     * Increments/decrements the value of input associ-
     * ated with the up/down arrow by dispatching an
     * "increment" event on the input.
     *
     * @param {Event} e the click event
     * @param {Number} delta the diff (usually 1 or -1)
     * @param {Element} inputElem the input element
     */


    function incrementNumInput(e, delta, inputElem) {
      var target = e && getEventTarget(e);
      var input = inputElem || target && target.parentNode && target.parentNode.firstChild;
      var event = createEvent("increment");
      event.delta = delta;
      input && input.dispatchEvent(event);
    }

    function build() {
      var fragment = window.document.createDocumentFragment();
      self.calendarContainer = createElement("div", "flatpickr-calendar");
      self.calendarContainer.tabIndex = -1;

      if (!self.config.noCalendar) {
        fragment.appendChild(buildMonthNav());
        self.innerContainer = createElement("div", "flatpickr-innerContainer");

        if (self.config.weekNumbers) {
          var _a = buildWeeks(),
              weekWrapper = _a.weekWrapper,
              weekNumbers = _a.weekNumbers;

          self.innerContainer.appendChild(weekWrapper);
          self.weekNumbers = weekNumbers;
          self.weekWrapper = weekWrapper;
        }

        self.rContainer = createElement("div", "flatpickr-rContainer");
        self.rContainer.appendChild(buildWeekdays());

        if (!self.daysContainer) {
          self.daysContainer = createElement("div", "flatpickr-days");
          self.daysContainer.tabIndex = -1;
        }

        buildDays();
        self.rContainer.appendChild(self.daysContainer);
        self.innerContainer.appendChild(self.rContainer);
        fragment.appendChild(self.innerContainer);
      }

      if (self.config.enableTime) {
        fragment.appendChild(buildTime());
      }

      toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
      toggleClass(self.calendarContainer, "animate", self.config.animate === true);
      toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
      self.calendarContainer.appendChild(fragment);
      var customAppend = self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;

      if (self.config.inline || self.config.static) {
        self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");

        if (self.config.inline) {
          if (!customAppend && self.element.parentNode) self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);else if (self.config.appendTo !== undefined) self.config.appendTo.appendChild(self.calendarContainer);
        }

        if (self.config.static) {
          var wrapper = createElement("div", "flatpickr-wrapper");
          if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);
          wrapper.appendChild(self.element);
          if (self.altInput) wrapper.appendChild(self.altInput);
          wrapper.appendChild(self.calendarContainer);
        }
      }

      if (!self.config.static && !self.config.inline) (self.config.appendTo !== undefined ? self.config.appendTo : window.document.body).appendChild(self.calendarContainer);
    }

    function createDay(className, date, dayNumber, i) {
      var dateIsEnabled = isEnabled(date, true),
          dayElement = createElement("span", "flatpickr-day " + className, date.getDate().toString());
      dayElement.dateObj = date;
      dayElement.$i = i;
      dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));

      if (className.indexOf("hidden") === -1 && compareDates(date, self.now) === 0) {
        self.todayDateElem = dayElement;
        dayElement.classList.add("today");
        dayElement.setAttribute("aria-current", "date");
      }

      if (dateIsEnabled) {
        dayElement.tabIndex = -1;

        if (isDateSelected(date)) {
          dayElement.classList.add("selected");
          self.selectedDateElem = dayElement;

          if (self.config.mode === "range") {
            toggleClass(dayElement, "startRange", self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0);
            toggleClass(dayElement, "endRange", self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0);
            if (className === "nextMonthDay") dayElement.classList.add("inRange");
          }
        }
      } else {
        dayElement.classList.add("flatpickr-disabled");
      }

      if (self.config.mode === "range") {
        if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add("inRange");
      }

      if (self.weekNumbers && self.config.showMonths === 1 && className !== "prevMonthDay" && dayNumber % 7 === 1) {
        self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
      }

      triggerEvent("onDayCreate", dayElement);
      return dayElement;
    }

    function focusOnDayElem(targetNode) {
      targetNode.focus();
      if (self.config.mode === "range") onMouseOver(targetNode);
    }

    function getFirstAvailableDay(delta) {
      var startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
      var endMonth = delta > 0 ? self.config.showMonths : -1;

      for (var m = startMonth; m != endMonth; m += delta) {
        var month = self.daysContainer.children[m];
        var startIndex = delta > 0 ? 0 : month.children.length - 1;
        var endIndex = delta > 0 ? month.children.length : -1;

        for (var i = startIndex; i != endIndex; i += delta) {
          var c = month.children[i];
          if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj)) return c;
        }
      }

      return undefined;
    }

    function getNextAvailableDay(current, delta) {
      var givenMonth = current.className.indexOf("Month") === -1 ? current.dateObj.getMonth() : self.currentMonth;
      var endMonth = delta > 0 ? self.config.showMonths : -1;
      var loopDelta = delta > 0 ? 1 : -1;

      for (var m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
        var month = self.daysContainer.children[m];
        var startIndex = givenMonth - self.currentMonth === m ? current.$i + delta : delta < 0 ? month.children.length - 1 : 0;
        var numMonthDays = month.children.length;

        for (var i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
          var c = month.children[i];
          if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj) && Math.abs(current.$i - i) >= Math.abs(delta)) return focusOnDayElem(c);
        }
      }

      self.changeMonth(loopDelta);
      focusOnDay(getFirstAvailableDay(loopDelta), 0);
      return undefined;
    }

    function focusOnDay(current, offset) {
      var dayFocused = isInView(document.activeElement || document.body);
      var startElem = current !== undefined ? current : dayFocused ? document.activeElement : self.selectedDateElem !== undefined && isInView(self.selectedDateElem) ? self.selectedDateElem : self.todayDateElem !== undefined && isInView(self.todayDateElem) ? self.todayDateElem : getFirstAvailableDay(offset > 0 ? 1 : -1);

      if (startElem === undefined) {
        self._input.focus();
      } else if (!dayFocused) {
        focusOnDayElem(startElem);
      } else {
        getNextAvailableDay(startElem, offset);
      }
    }

    function buildMonthDays(year, month) {
      var firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
      var prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
      var daysInMonth = self.utils.getDaysInMonth(month, year),
          days = window.document.createDocumentFragment(),
          isMultiMonth = self.config.showMonths > 1,
          prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay",
          nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
      var dayNumber = prevMonthDays + 1 - firstOfMonth,
          dayIndex = 0; // prepend days from the ending of previous month

      for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
        days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
      } // Start at 1 since there is no 0th day


      for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
        days.appendChild(createDay("", new Date(year, month, dayNumber), dayNumber, dayIndex));
      } // append days from the next month


      for (var dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
        days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
      } //updateNavigationCurrentMonth();


      var dayContainer = createElement("div", "dayContainer");
      dayContainer.appendChild(days);
      return dayContainer;
    }

    function buildDays() {
      if (self.daysContainer === undefined) {
        return;
      }

      clearNode(self.daysContainer); // TODO: week numbers for each month

      if (self.weekNumbers) clearNode(self.weekNumbers);
      var frag = document.createDocumentFragment();

      for (var i = 0; i < self.config.showMonths; i++) {
        var d = new Date(self.currentYear, self.currentMonth, 1);
        d.setMonth(self.currentMonth + i);
        frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
      }

      self.daysContainer.appendChild(frag);
      self.days = self.daysContainer.firstChild;

      if (self.config.mode === "range" && self.selectedDates.length === 1) {
        onMouseOver();
      }
    }

    function buildMonthSwitch() {
      if (self.config.showMonths > 1 || self.config.monthSelectorType !== "dropdown") return;

      var shouldBuildMonth = function shouldBuildMonth(month) {
        if (self.config.minDate !== undefined && self.currentYear === self.config.minDate.getFullYear() && month < self.config.minDate.getMonth()) {
          return false;
        }

        return !(self.config.maxDate !== undefined && self.currentYear === self.config.maxDate.getFullYear() && month > self.config.maxDate.getMonth());
      };

      self.monthsDropdownContainer.tabIndex = -1;
      self.monthsDropdownContainer.innerHTML = "";

      for (var i = 0; i < 12; i++) {
        if (!shouldBuildMonth(i)) continue;
        var month = createElement("option", "flatpickr-monthDropdown-month");
        month.value = new Date(self.currentYear, i).getMonth().toString();
        month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
        month.tabIndex = -1;

        if (self.currentMonth === i) {
          month.selected = true;
        }

        self.monthsDropdownContainer.appendChild(month);
      }
    }

    function buildMonth() {
      var container = createElement("div", "flatpickr-month");
      var monthNavFragment = window.document.createDocumentFragment();
      var monthElement;

      if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
        monthElement = createElement("span", "cur-month");
      } else {
        self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
        self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
        bind(self.monthsDropdownContainer, "change", function (e) {
          var target = getEventTarget(e);
          var selectedMonth = parseInt(target.value, 10);
          self.changeMonth(selectedMonth - self.currentMonth);
          triggerEvent("onMonthChange");
        });
        buildMonthSwitch();
        monthElement = self.monthsDropdownContainer;
      }

      var yearInput = createNumberInput("cur-year", {
        tabindex: "-1"
      });
      var yearElement = yearInput.getElementsByTagName("input")[0];
      yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);

      if (self.config.minDate) {
        yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
      }

      if (self.config.maxDate) {
        yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
        yearElement.disabled = !!self.config.minDate && self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
      }

      var currentMonth = createElement("div", "flatpickr-current-month");
      currentMonth.appendChild(monthElement);
      currentMonth.appendChild(yearInput);
      monthNavFragment.appendChild(currentMonth);
      container.appendChild(monthNavFragment);
      return {
        container: container,
        yearElement: yearElement,
        monthElement: monthElement
      };
    }

    function buildMonths() {
      clearNode(self.monthNav);
      self.monthNav.appendChild(self.prevMonthNav);

      if (self.config.showMonths) {
        self.yearElements = [];
        self.monthElements = [];
      }

      for (var m = self.config.showMonths; m--;) {
        var month = buildMonth();
        self.yearElements.push(month.yearElement);
        self.monthElements.push(month.monthElement);
        self.monthNav.appendChild(month.container);
      }

      self.monthNav.appendChild(self.nextMonthNav);
    }

    function buildMonthNav() {
      self.monthNav = createElement("div", "flatpickr-months");
      self.yearElements = [];
      self.monthElements = [];
      self.prevMonthNav = createElement("span", "flatpickr-prev-month");
      self.prevMonthNav.innerHTML = self.config.prevArrow;
      self.nextMonthNav = createElement("span", "flatpickr-next-month");
      self.nextMonthNav.innerHTML = self.config.nextArrow;
      buildMonths();
      Object.defineProperty(self, "_hidePrevMonthArrow", {
        get: function get() {
          return self.__hidePrevMonthArrow;
        },
        set: function set(bool) {
          if (self.__hidePrevMonthArrow !== bool) {
            toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
            self.__hidePrevMonthArrow = bool;
          }
        }
      });
      Object.defineProperty(self, "_hideNextMonthArrow", {
        get: function get() {
          return self.__hideNextMonthArrow;
        },
        set: function set(bool) {
          if (self.__hideNextMonthArrow !== bool) {
            toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
            self.__hideNextMonthArrow = bool;
          }
        }
      });
      self.currentYearElement = self.yearElements[0];
      updateNavigationCurrentMonth();
      return self.monthNav;
    }

    function buildTime() {
      self.calendarContainer.classList.add("hasTime");
      if (self.config.noCalendar) self.calendarContainer.classList.add("noCalendar");
      self.timeContainer = createElement("div", "flatpickr-time");
      self.timeContainer.tabIndex = -1;
      var separator = createElement("span", "flatpickr-time-separator", ":");
      var hourInput = createNumberInput("flatpickr-hour", {
        "aria-label": self.l10n.hourAriaLabel
      });
      self.hourElement = hourInput.getElementsByTagName("input")[0];
      var minuteInput = createNumberInput("flatpickr-minute", {
        "aria-label": self.l10n.minuteAriaLabel
      });
      self.minuteElement = minuteInput.getElementsByTagName("input")[0];
      self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
      self.hourElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getHours() : self.config.time_24hr ? self.config.defaultHour : military2ampm(self.config.defaultHour));
      self.minuteElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : self.config.defaultMinute);
      self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
      self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
      self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
      self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
      self.minuteElement.setAttribute("min", "0");
      self.minuteElement.setAttribute("max", "59");
      self.timeContainer.appendChild(hourInput);
      self.timeContainer.appendChild(separator);
      self.timeContainer.appendChild(minuteInput);
      if (self.config.time_24hr) self.timeContainer.classList.add("time24hr");

      if (self.config.enableSeconds) {
        self.timeContainer.classList.add("hasSeconds");
        var secondInput = createNumberInput("flatpickr-second");
        self.secondElement = secondInput.getElementsByTagName("input")[0];
        self.secondElement.value = pad(self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : self.config.defaultSeconds);
        self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
        self.secondElement.setAttribute("min", "0");
        self.secondElement.setAttribute("max", "59");
        self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
        self.timeContainer.appendChild(secondInput);
      }

      if (!self.config.time_24hr) {
        // add self.amPM if appropriate
        self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj ? self.hourElement.value : self.config.defaultHour) > 11)]);
        self.amPM.title = self.l10n.toggleTitle;
        self.amPM.tabIndex = -1;
        self.timeContainer.appendChild(self.amPM);
      }

      return self.timeContainer;
    }

    function buildWeekdays() {
      if (!self.weekdayContainer) self.weekdayContainer = createElement("div", "flatpickr-weekdays");else clearNode(self.weekdayContainer);

      for (var i = self.config.showMonths; i--;) {
        var container = createElement("div", "flatpickr-weekdaycontainer");
        self.weekdayContainer.appendChild(container);
      }

      updateWeekdays();
      return self.weekdayContainer;
    }

    function updateWeekdays() {
      if (!self.weekdayContainer) {
        return;
      }

      var firstDayOfWeek = self.l10n.firstDayOfWeek;

      var weekdays = __spreadArrays(self.l10n.weekdays.shorthand);

      if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
        weekdays = __spreadArrays(weekdays.splice(firstDayOfWeek, weekdays.length), weekdays.splice(0, firstDayOfWeek));
      }

      for (var i = self.config.showMonths; i--;) {
        self.weekdayContainer.children[i].innerHTML = "\n      <span class='flatpickr-weekday'>\n        " + weekdays.join("</span><span class='flatpickr-weekday'>") + "\n      </span>\n      ";
      }
    }
    /* istanbul ignore next */


    function buildWeeks() {
      self.calendarContainer.classList.add("hasWeeks");
      var weekWrapper = createElement("div", "flatpickr-weekwrapper");
      weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
      var weekNumbers = createElement("div", "flatpickr-weeks");
      weekWrapper.appendChild(weekNumbers);
      return {
        weekWrapper: weekWrapper,
        weekNumbers: weekNumbers
      };
    }

    function changeMonth(value, isOffset) {
      if (isOffset === void 0) {
        isOffset = true;
      }

      var delta = isOffset ? value : value - self.currentMonth;
      if (delta < 0 && self._hidePrevMonthArrow === true || delta > 0 && self._hideNextMonthArrow === true) return;
      self.currentMonth += delta;

      if (self.currentMonth < 0 || self.currentMonth > 11) {
        self.currentYear += self.currentMonth > 11 ? 1 : -1;
        self.currentMonth = (self.currentMonth + 12) % 12;
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }

      buildDays();
      triggerEvent("onMonthChange");
      updateNavigationCurrentMonth();
    }

    function clear(triggerChangeEvent, toInitial) {
      if (triggerChangeEvent === void 0) {
        triggerChangeEvent = true;
      }

      if (toInitial === void 0) {
        toInitial = true;
      }

      self.input.value = "";
      if (self.altInput !== undefined) self.altInput.value = "";
      if (self.mobileInput !== undefined) self.mobileInput.value = "";
      self.selectedDates = [];
      self.latestSelectedDateObj = undefined;

      if (toInitial === true) {
        self.currentYear = self._initialDate.getFullYear();
        self.currentMonth = self._initialDate.getMonth();
      }

      if (self.config.enableTime === true) {
        var _a = getDefaultHours(),
            hours = _a.hours,
            minutes = _a.minutes,
            seconds = _a.seconds;

        setHours(hours, minutes, seconds);
      }

      self.redraw();
      if (triggerChangeEvent) // triggerChangeEvent is true (default) or an Event
        triggerEvent("onChange");
    }

    function close() {
      self.isOpen = false;

      if (!self.isMobile) {
        if (self.calendarContainer !== undefined) {
          self.calendarContainer.classList.remove("open");
        }

        if (self._input !== undefined) {
          self._input.classList.remove("active");
        }
      }

      triggerEvent("onClose");
    }

    function destroy() {
      if (self.config !== undefined) triggerEvent("onDestroy");

      for (var i = self._handlers.length; i--;) {
        var h = self._handlers[i];
        h.element.removeEventListener(h.event, h.handler, h.options);
      }

      self._handlers = [];

      if (self.mobileInput) {
        if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);
        self.mobileInput = undefined;
      } else if (self.calendarContainer && self.calendarContainer.parentNode) {
        if (self.config.static && self.calendarContainer.parentNode) {
          var wrapper = self.calendarContainer.parentNode;
          wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);

          if (wrapper.parentNode) {
            while (wrapper.firstChild) {
              wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
            }

            wrapper.parentNode.removeChild(wrapper);
          }
        } else self.calendarContainer.parentNode.removeChild(self.calendarContainer);
      }

      if (self.altInput) {
        self.input.type = "text";
        if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);
        delete self.altInput;
      }

      if (self.input) {
        self.input.type = self.input._type;
        self.input.classList.remove("flatpickr-input");
        self.input.removeAttribute("readonly");
      }

      ["_showTimeInput", "latestSelectedDateObj", "_hideNextMonthArrow", "_hidePrevMonthArrow", "__hideNextMonthArrow", "__hidePrevMonthArrow", "isMobile", "isOpen", "selectedDateElem", "minDateHasTime", "maxDateHasTime", "days", "daysContainer", "_input", "_positionElement", "innerContainer", "rContainer", "monthNav", "todayDateElem", "calendarContainer", "weekdayContainer", "prevMonthNav", "nextMonthNav", "monthsDropdownContainer", "currentMonthElement", "currentYearElement", "navigationCurrentMonth", "selectedDateElem", "config"].forEach(function (k) {
        try {
          delete self[k];
        } catch (_) {}
      });
    }

    function isCalendarElem(elem) {
      if (self.config.appendTo && self.config.appendTo.contains(elem)) return true;
      return self.calendarContainer.contains(elem);
    }

    function documentClick(e) {
      if (self.isOpen && !self.config.inline) {
        var eventTarget_1 = getEventTarget(e);
        var isCalendarElement = isCalendarElem(eventTarget_1);
        var isInput = eventTarget_1 === self.input || eventTarget_1 === self.altInput || self.element.contains(eventTarget_1) || // web components
        // e.path is not present in all browsers. circumventing typechecks
        e.path && e.path.indexOf && (~e.path.indexOf(self.input) || ~e.path.indexOf(self.altInput));
        var lostFocus = e.type === "blur" ? isInput && e.relatedTarget && !isCalendarElem(e.relatedTarget) : !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget);
        var isIgnored = !self.config.ignoredFocusElements.some(function (elem) {
          return elem.contains(eventTarget_1);
        });

        if (lostFocus && isIgnored) {
          if (self.timeContainer !== undefined && self.minuteElement !== undefined && self.hourElement !== undefined && self.input.value !== "" && self.input.value !== undefined) {
            updateTime();
          }

          self.close();

          if (self.config && self.config.mode === "range" && self.selectedDates.length === 1) {
            self.clear(false);
            self.redraw();
          }
        }
      }
    }

    function changeYear(newYear) {
      if (!newYear || self.config.minDate && newYear < self.config.minDate.getFullYear() || self.config.maxDate && newYear > self.config.maxDate.getFullYear()) return;
      var newYearNum = newYear,
          isNewYear = self.currentYear !== newYearNum;
      self.currentYear = newYearNum || self.currentYear;

      if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
        self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
      } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
        self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
      }

      if (isNewYear) {
        self.redraw();
        triggerEvent("onYearChange");
        buildMonthSwitch();
      }
    }

    function isEnabled(date, timeless) {
      if (timeless === void 0) {
        timeless = true;
      }

      var dateToCheck = self.parseDate(date, undefined, timeless); // timeless

      if (self.config.minDate && dateToCheck && compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0 || self.config.maxDate && dateToCheck && compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0) return false;
      if (self.config.enable.length === 0 && self.config.disable.length === 0) return true;
      if (dateToCheck === undefined) return false;
      var bool = self.config.enable.length > 0,
          array = bool ? self.config.enable : self.config.disable;

      for (var i = 0, d = void 0; i < array.length; i++) {
        d = array[i];
        if (typeof d === "function" && d(dateToCheck) // disabled by function
        ) return bool;else if (d instanceof Date && dateToCheck !== undefined && d.getTime() === dateToCheck.getTime()) // disabled by date
          return bool;else if (typeof d === "string" && dateToCheck !== undefined) {
          // disabled by date string
          var parsed = self.parseDate(d, undefined, true);
          return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
        } else if ( // disabled by range
        _typeof(d) === "object" && dateToCheck !== undefined && d.from && d.to && dateToCheck.getTime() >= d.from.getTime() && dateToCheck.getTime() <= d.to.getTime()) return bool;
      }

      return !bool;
    }

    function isInView(elem) {
      if (self.daysContainer !== undefined) return elem.className.indexOf("hidden") === -1 && elem.className.indexOf("flatpickr-disabled") === -1 && self.daysContainer.contains(elem);
      return false;
    }

    function onBlur(e) {
      var isInput = e.target === self._input;

      if (isInput && !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
        self.setDate(self._input.value, true, e.target === self.altInput ? self.config.altFormat : self.config.dateFormat);
      }
    }

    function onKeyDown(e) {
      // e.key                      e.keyCode
      // "Backspace"                        8
      // "Tab"                              9
      // "Enter"                           13
      // "Escape"     (IE "Esc")           27
      // "ArrowLeft"  (IE "Left")          37
      // "ArrowUp"    (IE "Up")            38
      // "ArrowRight" (IE "Right")         39
      // "ArrowDown"  (IE "Down")          40
      // "Delete"     (IE "Del")           46
      var eventTarget = getEventTarget(e);
      var isInput = self.config.wrap ? element.contains(eventTarget) : eventTarget === self._input;
      var allowInput = self.config.allowInput;
      var allowKeydown = self.isOpen && (!allowInput || !isInput);
      var allowInlineKeydown = self.config.inline && isInput && !allowInput;

      if (e.keyCode === 13 && isInput) {
        if (allowInput) {
          self.setDate(self._input.value, true, eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat);
          return eventTarget.blur();
        } else {
          self.open();
        }
      } else if (isCalendarElem(eventTarget) || allowKeydown || allowInlineKeydown) {
        var isTimeObj = !!self.timeContainer && self.timeContainer.contains(eventTarget);

        switch (e.keyCode) {
          case 13:
            if (isTimeObj) {
              e.preventDefault();
              updateTime();
              focusAndClose();
            } else selectDate(e);

            break;

          case 27:
            // escape
            e.preventDefault();
            focusAndClose();
            break;

          case 8:
          case 46:
            if (isInput && !self.config.allowInput) {
              e.preventDefault();
              self.clear();
            }

            break;

          case 37:
          case 39:
            if (!isTimeObj && !isInput) {
              e.preventDefault();

              if (self.daysContainer !== undefined && (allowInput === false || document.activeElement && isInView(document.activeElement))) {
                var delta_1 = e.keyCode === 39 ? 1 : -1;
                if (!e.ctrlKey) focusOnDay(undefined, delta_1);else {
                  e.stopPropagation();
                  changeMonth(delta_1);
                  focusOnDay(getFirstAvailableDay(1), 0);
                }
              }
            } else if (self.hourElement) self.hourElement.focus();

            break;

          case 38:
          case 40:
            e.preventDefault();
            var delta = e.keyCode === 40 ? 1 : -1;

            if (self.daysContainer && eventTarget.$i !== undefined || eventTarget === self.input || eventTarget === self.altInput) {
              if (e.ctrlKey) {
                e.stopPropagation();
                changeYear(self.currentYear - delta);
                focusOnDay(getFirstAvailableDay(1), 0);
              } else if (!isTimeObj) focusOnDay(undefined, delta * 7);
            } else if (eventTarget === self.currentYearElement) {
              changeYear(self.currentYear - delta);
            } else if (self.config.enableTime) {
              if (!isTimeObj && self.hourElement) self.hourElement.focus();
              updateTime(e);

              self._debouncedChange();
            }

            break;

          case 9:
            if (isTimeObj) {
              var elems = [self.hourElement, self.minuteElement, self.secondElement, self.amPM].concat(self.pluginElements).filter(function (x) {
                return x;
              });
              var i = elems.indexOf(eventTarget);

              if (i !== -1) {
                var target = elems[i + (e.shiftKey ? -1 : 1)];
                e.preventDefault();

                (target || self._input).focus();
              }
            } else if (!self.config.noCalendar && self.daysContainer && self.daysContainer.contains(eventTarget) && e.shiftKey) {
              e.preventDefault();

              self._input.focus();
            }

            break;
        }
      }

      if (self.amPM !== undefined && eventTarget === self.amPM) {
        switch (e.key) {
          case self.l10n.amPM[0].charAt(0):
          case self.l10n.amPM[0].charAt(0).toLowerCase():
            self.amPM.textContent = self.l10n.amPM[0];
            setHoursFromInputs();
            updateValue();
            break;

          case self.l10n.amPM[1].charAt(0):
          case self.l10n.amPM[1].charAt(0).toLowerCase():
            self.amPM.textContent = self.l10n.amPM[1];
            setHoursFromInputs();
            updateValue();
            break;
        }
      }

      if (isInput || isCalendarElem(eventTarget)) {
        triggerEvent("onKeyDown", e);
      }
    }

    function onMouseOver(elem) {
      if (self.selectedDates.length !== 1 || elem && (!elem.classList.contains("flatpickr-day") || elem.classList.contains("flatpickr-disabled"))) return;
      var hoverDate = elem ? elem.dateObj.getTime() : self.days.firstElementChild.dateObj.getTime(),
          initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(),
          rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()),
          rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
      var containsDisabled = false;
      var minRange = 0,
          maxRange = 0;

      for (var t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
        if (!isEnabled(new Date(t), true)) {
          containsDisabled = containsDisabled || t > rangeStartDate && t < rangeEndDate;
          if (t < initialDate && (!minRange || t > minRange)) minRange = t;else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;
        }
      }

      for (var m = 0; m < self.config.showMonths; m++) {
        var month = self.daysContainer.children[m];

        var _loop_1 = function _loop_1(i, l) {
          var dayElem = month.children[i],
              date = dayElem.dateObj;
          var timestamp = date.getTime();
          var outOfRange = minRange > 0 && timestamp < minRange || maxRange > 0 && timestamp > maxRange;

          if (outOfRange) {
            dayElem.classList.add("notAllowed");
            ["inRange", "startRange", "endRange"].forEach(function (c) {
              dayElem.classList.remove(c);
            });
            return "continue";
          } else if (containsDisabled && !outOfRange) return "continue";

          ["startRange", "inRange", "endRange", "notAllowed"].forEach(function (c) {
            dayElem.classList.remove(c);
          });

          if (elem !== undefined) {
            elem.classList.add(hoverDate <= self.selectedDates[0].getTime() ? "startRange" : "endRange");
            if (initialDate < hoverDate && timestamp === initialDate) dayElem.classList.add("startRange");else if (initialDate > hoverDate && timestamp === initialDate) dayElem.classList.add("endRange");
            if (timestamp >= minRange && (maxRange === 0 || timestamp <= maxRange) && isBetween(timestamp, initialDate, hoverDate)) dayElem.classList.add("inRange");
          }
        };

        for (var i = 0, l = month.children.length; i < l; i++) {
          _loop_1(i, l);
        }
      }
    }

    function onResize() {
      if (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();
    }

    function open(e, positionElement) {
      if (positionElement === void 0) {
        positionElement = self._positionElement;
      }

      if (self.isMobile === true) {
        if (e) {
          e.preventDefault();
          var eventTarget = getEventTarget(e);
          eventTarget && eventTarget.blur();
        }

        if (self.mobileInput !== undefined) {
          self.mobileInput.focus();
          self.mobileInput.click();
        }

        triggerEvent("onOpen");
        return;
      }

      if (self._input.disabled || self.config.inline) return;
      var wasOpen = self.isOpen;
      self.isOpen = true;

      if (!wasOpen) {
        self.calendarContainer.classList.add("open");

        self._input.classList.add("active");

        triggerEvent("onOpen");
        positionCalendar(positionElement);
      }

      if (self.config.enableTime === true && self.config.noCalendar === true) {
        if (self.config.allowInput === false && (e === undefined || !self.timeContainer.contains(e.relatedTarget))) {
          setTimeout(function () {
            return self.hourElement.select();
          }, 50);
        }
      }
    }

    function minMaxDateSetter(type) {
      return function (date) {
        var dateObj = self.config["_" + type + "Date"] = self.parseDate(date, self.config.dateFormat);
        var inverseDateObj = self.config["_" + (type === "min" ? "max" : "min") + "Date"];

        if (dateObj !== undefined) {
          self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] = dateObj.getHours() > 0 || dateObj.getMinutes() > 0 || dateObj.getSeconds() > 0;
        }

        if (self.selectedDates) {
          self.selectedDates = self.selectedDates.filter(function (d) {
            return isEnabled(d);
          });
          if (!self.selectedDates.length && type === "min") setHoursFromDate(dateObj);
          updateValue();
        }

        if (self.daysContainer) {
          redraw();
          if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();else self.currentYearElement.removeAttribute(type);
          self.currentYearElement.disabled = !!inverseDateObj && dateObj !== undefined && inverseDateObj.getFullYear() === dateObj.getFullYear();
        }
      };
    }

    function parseConfig() {
      var boolOpts = ["wrap", "weekNumbers", "allowInput", "allowInvalidPreload", "clickOpens", "time_24hr", "enableTime", "noCalendar", "altInput", "shorthandCurrentMonth", "inline", "static", "enableSeconds", "disableMobile"];

      var userConfig = _assign(_assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);

      var formats = {};
      self.config.parseDate = userConfig.parseDate;
      self.config.formatDate = userConfig.formatDate;
      Object.defineProperty(self.config, "enable", {
        get: function get() {
          return self.config._enable;
        },
        set: function set(dates) {
          self.config._enable = parseDateRules(dates);
        }
      });
      Object.defineProperty(self.config, "disable", {
        get: function get() {
          return self.config._disable;
        },
        set: function set(dates) {
          self.config._disable = parseDateRules(dates);
        }
      });
      var timeMode = userConfig.mode === "time";

      if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
        var defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
        formats.dateFormat = userConfig.noCalendar || timeMode ? "H:i" + (userConfig.enableSeconds ? ":S" : "") : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
      }

      if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
        var defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
        formats.altFormat = userConfig.noCalendar || timeMode ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K") : defaultAltFormat + (" h:i" + (userConfig.enableSeconds ? ":S" : "") + " K");
      }

      Object.defineProperty(self.config, "minDate", {
        get: function get() {
          return self.config._minDate;
        },
        set: minMaxDateSetter("min")
      });
      Object.defineProperty(self.config, "maxDate", {
        get: function get() {
          return self.config._maxDate;
        },
        set: minMaxDateSetter("max")
      });

      var minMaxTimeSetter = function minMaxTimeSetter(type) {
        return function (val) {
          self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
        };
      };

      Object.defineProperty(self.config, "minTime", {
        get: function get() {
          return self.config._minTime;
        },
        set: minMaxTimeSetter("min")
      });
      Object.defineProperty(self.config, "maxTime", {
        get: function get() {
          return self.config._maxTime;
        },
        set: minMaxTimeSetter("max")
      });

      if (userConfig.mode === "time") {
        self.config.noCalendar = true;
        self.config.enableTime = true;
      }

      Object.assign(self.config, formats, userConfig);

      for (var i = 0; i < boolOpts.length; i++) {
        // https://github.com/microsoft/TypeScript/issues/31663
        self.config[boolOpts[i]] = self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === "true";
      }

      HOOKS.filter(function (hook) {
        return self.config[hook] !== undefined;
      }).forEach(function (hook) {
        self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
      });
      self.isMobile = !self.config.disableMobile && !self.config.inline && self.config.mode === "single" && !self.config.disable.length && !self.config.enable.length && !self.config.weekNumbers && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

      for (var i = 0; i < self.config.plugins.length; i++) {
        var pluginConf = self.config.plugins[i](self) || {};

        for (var key in pluginConf) {
          if (HOOKS.indexOf(key) > -1) {
            self.config[key] = arrayify(pluginConf[key]).map(bindToInstance).concat(self.config[key]);
          } else if (typeof userConfig[key] === "undefined") self.config[key] = pluginConf[key];
        }
      }

      if (!userConfig.altInputClass) {
        self.config.altInputClass = getInputElem().className + " " + self.config.altInputClass;
      }

      triggerEvent("onParseConfig");
    }

    function getInputElem() {
      return self.config.wrap ? element.querySelector("[data-input]") : element;
    }

    function setupLocale() {
      if (_typeof(self.config.locale) !== "object" && typeof flatpickr.l10ns[self.config.locale] === "undefined") self.config.errorHandler(new Error("flatpickr: invalid locale " + self.config.locale));
      self.l10n = _assign(_assign({}, flatpickr.l10ns.default), _typeof(self.config.locale) === "object" ? self.config.locale : self.config.locale !== "default" ? flatpickr.l10ns[self.config.locale] : undefined);
      tokenRegex.K = "(" + self.l10n.amPM[0] + "|" + self.l10n.amPM[1] + "|" + self.l10n.amPM[0].toLowerCase() + "|" + self.l10n.amPM[1].toLowerCase() + ")";

      var userConfig = _assign(_assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));

      if (userConfig.time_24hr === undefined && flatpickr.defaultConfig.time_24hr === undefined) {
        self.config.time_24hr = self.l10n.time_24hr;
      }

      self.formatDate = createDateFormatter(self);
      self.parseDate = createDateParser({
        config: self.config,
        l10n: self.l10n
      });
    }

    function positionCalendar(customPositionElement) {
      if (self.calendarContainer === undefined) return;
      triggerEvent("onPreCalendarPosition");
      var positionElement = customPositionElement || self._positionElement;
      var calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, function (acc, child) {
        return acc + child.offsetHeight;
      }, 0),
          calendarWidth = self.calendarContainer.offsetWidth,
          configPos = self.config.position.split(" "),
          configPosVertical = configPos[0],
          configPosHorizontal = configPos.length > 1 ? configPos[1] : null,
          inputBounds = positionElement.getBoundingClientRect(),
          distanceFromBottom = window.innerHeight - inputBounds.bottom,
          showOnTop = configPosVertical === "above" || configPosVertical !== "below" && distanceFromBottom < calendarHeight && inputBounds.top > calendarHeight;
      var top = window.pageYOffset + inputBounds.top + (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
      toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
      toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
      if (self.config.inline) return;
      var left = window.pageXOffset + inputBounds.left;
      var isCenter = false;
      var isRight = false;

      if (configPosHorizontal === "center") {
        left -= (calendarWidth - inputBounds.width) / 2;
        isCenter = true;
      } else if (configPosHorizontal === "right") {
        left -= calendarWidth - inputBounds.width;
        isRight = true;
      }

      toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
      toggleClass(self.calendarContainer, "arrowCenter", isCenter);
      toggleClass(self.calendarContainer, "arrowRight", isRight);
      var right = window.document.body.offsetWidth - (window.pageXOffset + inputBounds.right);
      var rightMost = left + calendarWidth > window.document.body.offsetWidth;
      var centerMost = right + calendarWidth > window.document.body.offsetWidth;
      toggleClass(self.calendarContainer, "rightMost", rightMost);
      if (self.config.static) return;
      self.calendarContainer.style.top = top + "px";

      if (!rightMost) {
        self.calendarContainer.style.left = left + "px";
        self.calendarContainer.style.right = "auto";
      } else if (!centerMost) {
        self.calendarContainer.style.left = "auto";
        self.calendarContainer.style.right = right + "px";
      } else {
        var doc = getDocumentStyleSheet(); // some testing environments don't have css support

        if (doc === undefined) return;
        var bodyWidth = window.document.body.offsetWidth;
        var centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
        var centerBefore = ".flatpickr-calendar.centerMost:before";
        var centerAfter = ".flatpickr-calendar.centerMost:after";
        var centerIndex = doc.cssRules.length;
        var centerStyle = "{left:" + inputBounds.left + "px;right:auto;}";
        toggleClass(self.calendarContainer, "rightMost", false);
        toggleClass(self.calendarContainer, "centerMost", true);
        doc.insertRule(centerBefore + "," + centerAfter + centerStyle, centerIndex);
        self.calendarContainer.style.left = centerLeft + "px";
        self.calendarContainer.style.right = "auto";
      }
    }

    function getDocumentStyleSheet() {
      var editableSheet = null;

      for (var i = 0; i < document.styleSheets.length; i++) {
        var sheet = document.styleSheets[i];

        try {
          sheet.cssRules;
        } catch (err) {
          continue;
        }

        editableSheet = sheet;
        break;
      }

      return editableSheet != null ? editableSheet : createStyleSheet();
    }

    function createStyleSheet() {
      var style = document.createElement("style");
      document.head.appendChild(style);
      return style.sheet;
    }

    function redraw() {
      if (self.config.noCalendar || self.isMobile) return;
      buildMonthSwitch();
      updateNavigationCurrentMonth();
      buildDays();
    }

    function focusAndClose() {
      self._input.focus();

      if (window.navigator.userAgent.indexOf("MSIE") !== -1 || navigator.msMaxTouchPoints !== undefined) {
        // hack - bugs in the way IE handles focus keeps the calendar open
        setTimeout(self.close, 0);
      } else {
        self.close();
      }
    }

    function selectDate(e) {
      e.preventDefault();
      e.stopPropagation();

      var isSelectable = function isSelectable(day) {
        return day.classList && day.classList.contains("flatpickr-day") && !day.classList.contains("flatpickr-disabled") && !day.classList.contains("notAllowed");
      };

      var t = findParent(getEventTarget(e), isSelectable);
      if (t === undefined) return;
      var target = t;
      var selectedDate = self.latestSelectedDateObj = new Date(target.dateObj.getTime());
      var shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth || selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) && self.config.mode !== "range";
      self.selectedDateElem = target;
      if (self.config.mode === "single") self.selectedDates = [selectedDate];else if (self.config.mode === "multiple") {
        var selectedIndex = isDateSelected(selectedDate);
        if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);else self.selectedDates.push(selectedDate);
      } else if (self.config.mode === "range") {
        if (self.selectedDates.length === 2) {
          self.clear(false, false);
        }

        self.latestSelectedDateObj = selectedDate;
        self.selectedDates.push(selectedDate); // unless selecting same date twice, sort ascendingly

        if (compareDates(selectedDate, self.selectedDates[0], true) !== 0) self.selectedDates.sort(function (a, b) {
          return a.getTime() - b.getTime();
        });
      }
      setHoursFromInputs();

      if (shouldChangeMonth) {
        var isNewYear = self.currentYear !== selectedDate.getFullYear();
        self.currentYear = selectedDate.getFullYear();
        self.currentMonth = selectedDate.getMonth();

        if (isNewYear) {
          triggerEvent("onYearChange");
          buildMonthSwitch();
        }

        triggerEvent("onMonthChange");
      }

      updateNavigationCurrentMonth();
      buildDays();
      updateValue(); // maintain focus

      if (!shouldChangeMonth && self.config.mode !== "range" && self.config.showMonths === 1) focusOnDayElem(target);else if (self.selectedDateElem !== undefined && self.hourElement === undefined) {
        self.selectedDateElem && self.selectedDateElem.focus();
      }
      if (self.hourElement !== undefined) self.hourElement !== undefined && self.hourElement.focus();

      if (self.config.closeOnSelect) {
        var single = self.config.mode === "single" && !self.config.enableTime;
        var range = self.config.mode === "range" && self.selectedDates.length === 2 && !self.config.enableTime;

        if (single || range) {
          focusAndClose();
        }
      }

      triggerChange();
    }

    var CALLBACKS = {
      locale: [setupLocale, updateWeekdays],
      showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
      minDate: [jumpToDate],
      maxDate: [jumpToDate]
    };

    function set(option, value) {
      if (option !== null && _typeof(option) === "object") {
        Object.assign(self.config, option);

        for (var key in option) {
          if (CALLBACKS[key] !== undefined) CALLBACKS[key].forEach(function (x) {
            return x();
          });
        }
      } else {
        self.config[option] = value;
        if (CALLBACKS[option] !== undefined) CALLBACKS[option].forEach(function (x) {
          return x();
        });else if (HOOKS.indexOf(option) > -1) self.config[option] = arrayify(value);
      }

      self.redraw();
      updateValue(true);
    }

    function setSelectedDate(inputDate, format) {
      var dates = [];
      if (inputDate instanceof Array) dates = inputDate.map(function (d) {
        return self.parseDate(d, format);
      });else if (inputDate instanceof Date || typeof inputDate === "number") dates = [self.parseDate(inputDate, format)];else if (typeof inputDate === "string") {
        switch (self.config.mode) {
          case "single":
          case "time":
            dates = [self.parseDate(inputDate, format)];
            break;

          case "multiple":
            dates = inputDate.split(self.config.conjunction).map(function (date) {
              return self.parseDate(date, format);
            });
            break;

          case "range":
            dates = inputDate.split(self.l10n.rangeSeparator).map(function (date) {
              return self.parseDate(date, format);
            });
            break;
        }
      } else self.config.errorHandler(new Error("Invalid date supplied: " + JSON.stringify(inputDate)));
      self.selectedDates = self.config.allowInvalidPreload ? dates : dates.filter(function (d) {
        return d instanceof Date && isEnabled(d, false);
      });
      if (self.config.mode === "range") self.selectedDates.sort(function (a, b) {
        return a.getTime() - b.getTime();
      });
    }

    function setDate(date, triggerChange, format) {
      if (triggerChange === void 0) {
        triggerChange = false;
      }

      if (format === void 0) {
        format = self.config.dateFormat;
      }

      if (date !== 0 && !date || date instanceof Array && date.length === 0) return self.clear(triggerChange);
      setSelectedDate(date, format);
      self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
      self.redraw();
      jumpToDate(undefined, triggerChange);
      setHoursFromDate();

      if (self.selectedDates.length === 0) {
        self.clear(false);
      }

      updateValue(triggerChange);
      if (triggerChange) triggerEvent("onChange");
    }

    function parseDateRules(arr) {
      return arr.slice().map(function (rule) {
        if (typeof rule === "string" || typeof rule === "number" || rule instanceof Date) {
          return self.parseDate(rule, undefined, true);
        } else if (rule && _typeof(rule) === "object" && rule.from && rule.to) return {
          from: self.parseDate(rule.from, undefined),
          to: self.parseDate(rule.to, undefined)
        };

        return rule;
      }).filter(function (x) {
        return x;
      }); // remove falsy values
    }

    function setupDates() {
      self.selectedDates = [];
      self.now = self.parseDate(self.config.now) || new Date(); // Workaround IE11 setting placeholder as the input's value

      var preloadedDate = self.config.defaultDate || ((self.input.nodeName === "INPUT" || self.input.nodeName === "TEXTAREA") && self.input.placeholder && self.input.value === self.input.placeholder ? null : self.input.value);
      if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);
      self._initialDate = self.selectedDates.length > 0 ? self.selectedDates[0] : self.config.minDate && self.config.minDate.getTime() > self.now.getTime() ? self.config.minDate : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime() ? self.config.maxDate : self.now;
      self.currentYear = self._initialDate.getFullYear();
      self.currentMonth = self._initialDate.getMonth();
      if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];
      if (self.config.minTime !== undefined) self.config.minTime = self.parseDate(self.config.minTime, "H:i");
      if (self.config.maxTime !== undefined) self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
      self.minDateHasTime = !!self.config.minDate && (self.config.minDate.getHours() > 0 || self.config.minDate.getMinutes() > 0 || self.config.minDate.getSeconds() > 0);
      self.maxDateHasTime = !!self.config.maxDate && (self.config.maxDate.getHours() > 0 || self.config.maxDate.getMinutes() > 0 || self.config.maxDate.getSeconds() > 0);
    }

    function setupInputs() {
      self.input = getInputElem();
      /* istanbul ignore next */

      if (!self.input) {
        self.config.errorHandler(new Error("Invalid input element specified"));
        return;
      } // hack: store previous type to restore it after destroy()


      self.input._type = self.input.type;
      self.input.type = "text";
      self.input.classList.add("flatpickr-input");
      self._input = self.input;

      if (self.config.altInput) {
        // replicate self.element
        self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
        self._input = self.altInput;
        self.altInput.placeholder = self.input.placeholder;
        self.altInput.disabled = self.input.disabled;
        self.altInput.required = self.input.required;
        self.altInput.tabIndex = self.input.tabIndex;
        self.altInput.type = "text";
        self.input.setAttribute("type", "hidden");
        if (!self.config.static && self.input.parentNode) self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
      }

      if (!self.config.allowInput) self._input.setAttribute("readonly", "readonly");
      self._positionElement = self.config.positionElement || self._input;
    }

    function setupMobile() {
      var inputType = self.config.enableTime ? self.config.noCalendar ? "time" : "datetime-local" : "date";
      self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
      self.mobileInput.tabIndex = 1;
      self.mobileInput.type = inputType;
      self.mobileInput.disabled = self.input.disabled;
      self.mobileInput.required = self.input.required;
      self.mobileInput.placeholder = self.input.placeholder;
      self.mobileFormatStr = inputType === "datetime-local" ? "Y-m-d\\TH:i:S" : inputType === "date" ? "Y-m-d" : "H:i:S";

      if (self.selectedDates.length > 0) {
        self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
      }

      if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
      if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
      if (self.input.getAttribute("step")) self.mobileInput.step = String(self.input.getAttribute("step"));
      self.input.type = "hidden";
      if (self.altInput !== undefined) self.altInput.type = "hidden";

      try {
        if (self.input.parentNode) self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
      } catch (_a) {}

      bind(self.mobileInput, "change", function (e) {
        self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
        triggerEvent("onChange");
        triggerEvent("onClose");
      });
    }

    function toggle(e) {
      if (self.isOpen === true) return self.close();
      self.open(e);
    }

    function triggerEvent(event, data) {
      // If the instance has been destroyed already, all hooks have been removed
      if (self.config === undefined) return;
      var hooks = self.config[event];

      if (hooks !== undefined && hooks.length > 0) {
        for (var i = 0; hooks[i] && i < hooks.length; i++) {
          hooks[i](self.selectedDates, self.input.value, self, data);
        }
      }

      if (event === "onChange") {
        self.input.dispatchEvent(createEvent("change")); // many front-end frameworks bind to the input event

        self.input.dispatchEvent(createEvent("input"));
      }
    }

    function createEvent(name) {
      var e = document.createEvent("Event");
      e.initEvent(name, true, true);
      return e;
    }

    function isDateSelected(date) {
      for (var i = 0; i < self.selectedDates.length; i++) {
        if (compareDates(self.selectedDates[i], date) === 0) return "" + i;
      }

      return false;
    }

    function isDateInRange(date) {
      if (self.config.mode !== "range" || self.selectedDates.length < 2) return false;
      return compareDates(date, self.selectedDates[0]) >= 0 && compareDates(date, self.selectedDates[1]) <= 0;
    }

    function updateNavigationCurrentMonth() {
      if (self.config.noCalendar || self.isMobile || !self.monthNav) return;
      self.yearElements.forEach(function (yearElement, i) {
        var d = new Date(self.currentYear, self.currentMonth, 1);
        d.setMonth(self.currentMonth + i);

        if (self.config.showMonths > 1 || self.config.monthSelectorType === "static") {
          self.monthElements[i].textContent = monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
        } else {
          self.monthsDropdownContainer.value = d.getMonth().toString();
        }

        yearElement.value = d.getFullYear().toString();
      });
      self._hidePrevMonthArrow = self.config.minDate !== undefined && (self.currentYear === self.config.minDate.getFullYear() ? self.currentMonth <= self.config.minDate.getMonth() : self.currentYear < self.config.minDate.getFullYear());
      self._hideNextMonthArrow = self.config.maxDate !== undefined && (self.currentYear === self.config.maxDate.getFullYear() ? self.currentMonth + 1 > self.config.maxDate.getMonth() : self.currentYear > self.config.maxDate.getFullYear());
    }

    function getDateStr(format) {
      return self.selectedDates.map(function (dObj) {
        return self.formatDate(dObj, format);
      }).filter(function (d, i, arr) {
        return self.config.mode !== "range" || self.config.enableTime || arr.indexOf(d) === i;
      }).join(self.config.mode !== "range" ? self.config.conjunction : self.l10n.rangeSeparator);
    }
    /**
     * Updates the values of inputs associated with the calendar
     */


    function updateValue(triggerChange) {
      if (triggerChange === void 0) {
        triggerChange = true;
      }

      if (self.mobileInput !== undefined && self.mobileFormatStr) {
        self.mobileInput.value = self.latestSelectedDateObj !== undefined ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr) : "";
      }

      self.input.value = getDateStr(self.config.dateFormat);

      if (self.altInput !== undefined) {
        self.altInput.value = getDateStr(self.config.altFormat);
      }

      if (triggerChange !== false) triggerEvent("onValueUpdate");
    }

    function onMonthNavClick(e) {
      var eventTarget = getEventTarget(e);
      var isPrevMonth = self.prevMonthNav.contains(eventTarget);
      var isNextMonth = self.nextMonthNav.contains(eventTarget);

      if (isPrevMonth || isNextMonth) {
        changeMonth(isPrevMonth ? -1 : 1);
      } else if (self.yearElements.indexOf(eventTarget) >= 0) {
        eventTarget.select();
      } else if (eventTarget.classList.contains("arrowUp")) {
        self.changeYear(self.currentYear + 1);
      } else if (eventTarget.classList.contains("arrowDown")) {
        self.changeYear(self.currentYear - 1);
      }
    }

    function timeWrapper(e) {
      e.preventDefault();
      var isKeyDown = e.type === "keydown",
          eventTarget = getEventTarget(e),
          input = eventTarget;

      if (self.amPM !== undefined && eventTarget === self.amPM) {
        self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
      }

      var min = parseFloat(input.getAttribute("min")),
          max = parseFloat(input.getAttribute("max")),
          step = parseFloat(input.getAttribute("step")),
          curValue = parseInt(input.value, 10),
          delta = e.delta || (isKeyDown ? e.which === 38 ? 1 : -1 : 0);
      var newValue = curValue + step * delta;

      if (typeof input.value !== "undefined" && input.value.length === 2) {
        var isHourElem = input === self.hourElement,
            isMinuteElem = input === self.minuteElement;

        if (newValue < min) {
          newValue = max + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
          if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);
        } else if (newValue > max) {
          newValue = input === self.hourElement ? newValue - max - int(!self.amPM) : min;
          if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);
        }

        if (self.amPM && isHourElem && (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)) {
          self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
        }

        input.value = pad(newValue);
      }
    }

    init();
    return self;
  }
  /* istanbul ignore next */


  function _flatpickr(nodeList, config) {
    // static list
    var nodes = Array.prototype.slice.call(nodeList).filter(function (x) {
      return x instanceof HTMLElement;
    });
    var instances = [];

    for (var i = 0; i < nodes.length; i++) {
      var node = nodes[i];

      try {
        if (node.getAttribute("data-fp-omit") !== null) continue;

        if (node._flatpickr !== undefined) {
          node._flatpickr.destroy();

          node._flatpickr = undefined;
        }

        node._flatpickr = FlatpickrInstance(node, config || {});
        instances.push(node._flatpickr);
      } catch (e) {
        console.error(e);
      }
    }

    return instances.length === 1 ? instances[0] : instances;
  }
  /* istanbul ignore next */


  if (typeof HTMLElement !== "undefined" && typeof HTMLCollection !== "undefined" && typeof NodeList !== "undefined") {
    // browser env
    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
      return _flatpickr(this, config);
    };

    HTMLElement.prototype.flatpickr = function (config) {
      return _flatpickr([this], config);
    };
  }
  /* istanbul ignore next */


  var flatpickr = function flatpickr(selector, config) {
    if (typeof selector === "string") {
      return _flatpickr(window.document.querySelectorAll(selector), config);
    } else if (selector instanceof Node) {
      return _flatpickr([selector], config);
    } else {
      return _flatpickr(selector, config);
    }
  };
  /* istanbul ignore next */


  flatpickr.defaultConfig = {};
  flatpickr.l10ns = {
    en: _assign({}, english),
    default: _assign({}, english)
  };

  flatpickr.localize = function (l10n) {
    flatpickr.l10ns.default = _assign(_assign({}, flatpickr.l10ns.default), l10n);
  };

  flatpickr.setDefaults = function (config) {
    flatpickr.defaultConfig = _assign(_assign({}, flatpickr.defaultConfig), config);
  };

  flatpickr.parseDate = createDateParser({});
  flatpickr.formatDate = createDateFormatter({});
  flatpickr.compareDates = compareDates;
  /* istanbul ignore next */

  if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
    jQuery.fn.flatpickr = function (config) {
      return _flatpickr(this, config);
    };
  } // eslint-disable-next-line @typescript-eslint/camelcase


  Date.prototype.fp_incr = function (days) {
    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  };

  if (typeof window !== "undefined") {
    window.flatpickr = flatpickr;
  }

  return flatpickr;
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/jss/jss.js":
/*!*************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4!./node_modules/jss/jss.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * JSS v0.6 - JavaScript Stylesheets
 * https://github.com/Box9/jss
 *
 * Copyright (c) 2011, David Tang
 * MIT Licensed (http://www.opensource.org/licenses/mit-license.php)
 */
var jss = function () {
  var adjSelAttrRegex = /((?:\.|#)[^\.\s#]+)((?:\.|#)[^\.\s#]+)/g;
  var doubleColonPseudoElRegex = /(::)(before|after|first-line|first-letter|selection)/;
  var singleColonPseudoElRegex = /([^:])(:)(before|after|first-line|first-letter|selection)/;
  var singleColonForPseudoElements; // flag for older browsers

  function getSelectorsAndRules(sheet) {
    var rules = sheet.cssRules || sheet.rules || [];
    var results = {};

    for (var i = 0; i < rules.length; i++) {
      // Older browsers and FF report pseudo element selectors in an outdated format
      var selectorText = toDoubleColonPseudoElements(rules[i].selectorText);

      if (!results[selectorText]) {
        results[selectorText] = [];
      }

      results[selectorText].push({
        sheet: sheet,
        index: i,
        style: rules[i].style
      });
    }

    return results;
  }

  function getRules(sheet, selector) {
    var rules = sheet.cssRules || sheet.rules || [];
    var results = []; // Browsers report selectors in lowercase

    selector = selector.toLowerCase();

    for (var i = 0; i < rules.length; i++) {
      var selectorText = rules[i].selectorText; // Note - certain rules (e.g. @rules) don't have selectorText

      if (selectorText && (selectorText == selector || selectorText == swapAdjSelAttr(selector) || selectorText == swapPseudoElSyntax(selector))) {
        results.push({
          sheet: sheet,
          index: i,
          style: rules[i].style
        });
      }
    }

    return results;
  }

  function addRule(sheet, selector) {
    var rules = sheet.cssRules || sheet.rules || [];
    var index = rules.length;
    var pseudoElementRule = addPseudoElementRule(sheet, selector, rules, index);

    if (!pseudoElementRule) {
      addRuleToSheet(sheet, selector, index);
    }

    return {
      sheet: sheet,
      index: index,
      style: rules[index].style
    };
  }

  ;

  function addRuleToSheet(sheet, selector, index) {
    if (sheet.insertRule) {
      sheet.insertRule(selector + ' { }', index);
    } else {
      sheet.addRule(selector, null, index);
    }
  } // Handles single colon syntax for older browsers and bugzilla.mozilla.org/show_bug.cgi?id=949651


  function addPseudoElementRule(sheet, selector, rules, index) {
    var doubleColonSelector;
    var singleColonSelector;

    if (doubleColonPseudoElRegex.exec(selector)) {
      doubleColonSelector = selector;
      singleColonSelector = toSingleColonPseudoElements(selector);
    } else if (singleColonPseudoElRegex.exec(selector)) {
      doubleColonSelector = toDoubleColonPseudoElements(selector);
      singleColonSelector = selector;
    } else {
      return false; // Not dealing with a pseudo element
    }

    if (!singleColonForPseudoElements) {
      // Assume modern browser and then check if successful
      addRuleToSheet(sheet, doubleColonSelector, index);

      if (rules.length <= index) {
        singleColonForPseudoElements = true;
      }
    }

    if (singleColonForPseudoElements) {
      addRuleToSheet(sheet, singleColonSelector, index);
    }

    return true;
  }

  function toDoubleColonPseudoElements(selector) {
    return selector.replace(singleColonPseudoElRegex, function (match, submatch1, submatch2, submatch3) {
      return submatch1 + '::' + submatch3;
    });
  }

  function toSingleColonPseudoElements(selector) {
    return selector.replace(doubleColonPseudoElRegex, function (match, submatch1, submatch2) {
      return ':' + submatch2;
    });
  }

  function removeRule(rule) {
    var sheet = rule.sheet;

    if (sheet.deleteRule) {
      sheet.deleteRule(rule.index);
    } else if (sheet.removeRule) {
      sheet.removeRule(rule.index);
    }
  }

  function extend(dest, src) {
    for (var key in src) {
      if (!src.hasOwnProperty(key)) continue;
      dest[key] = src[key];
    }

    return dest;
  }

  function aggregateStyles(rules) {
    var aggregate = {};

    for (var i = 0; i < rules.length; i++) {
      extend(aggregate, declaredProperties(rules[i].style));
    }

    return aggregate;
  }

  function declaredProperties(style) {
    var declared = {};

    for (var i = 0; i < style.length; i++) {
      declared[style[i]] = style[toCamelCase(style[i])];
    }

    return declared;
  } // IE9 stores rules with attributes (classes or ID's) adjacent in the opposite order as defined
  // causing them to not be found, so this method swaps [#|.]sel1[#|.]sel2 to become [#|.]sel2[#|.]sel1


  function swapAdjSelAttr(selector) {
    var swap = '';
    var lastIndex = 0;

    while ((match = adjSelAttrRegex.exec(selector)) != null) {
      if (match[0] === '') break;
      swap += selector.substring(lastIndex, match.index);
      swap += selector.substr(match.index + match[1].length, match[2].length);
      swap += selector.substr(match.index, match[1].length);
      lastIndex = match.index + match[0].length;
    }

    swap += selector.substr(lastIndex);
    return swap;
  }

  ; // FF and older browsers store rules with pseudo elements using single-colon syntax

  function swapPseudoElSyntax(selector) {
    if (doubleColonPseudoElRegex.exec(selector)) {
      return toSingleColonPseudoElements(selector);
    }

    return selector;
  }

  function setStyleProperties(rule, properties) {
    for (var key in properties) {
      var value = properties[key];
      var importantIndex = value.indexOf(' !important'); // Modern browsers seem to handle overrides fine, but IE9 doesn't

      rule.style.removeProperty(key);

      if (importantIndex > 0) {
        rule.style.setProperty(key, value.substr(0, importantIndex), 'important');
      } else {
        rule.style.setProperty(key, value);
      }
    }
  }

  function toCamelCase(str) {
    return str.replace(/-([a-z])/g, function (match, submatch) {
      return submatch.toUpperCase();
    });
  }

  function transformCamelCasedPropertyNames(oldProps) {
    var newProps = {};

    for (var key in oldProps) {
      newProps[unCamelCase(key)] = oldProps[key];
    }

    return newProps;
  }

  function unCamelCase(str) {
    return str.replace(/([A-Z])/g, function (match, submatch) {
      return '-' + submatch.toLowerCase();
    });
  }

  var Jss = function Jss(doc) {
    this.doc = doc;
    this.head = this.doc.head || this.doc.getElementsByTagName('head')[0];
    this.sheets = this.doc.styleSheets || [];
  };

  Jss.prototype = {
    // Returns JSS rules (selector is optional)
    get: function get(selector) {
      if (!this.defaultSheet) {
        return {};
      }

      if (selector) {
        return aggregateStyles(getRules(this.defaultSheet, selector));
      }

      var rules = getSelectorsAndRules(this.defaultSheet);

      for (selector in rules) {
        rules[selector] = aggregateStyles(rules[selector]);
      }

      return rules;
    },
    // Returns all rules (selector is required)
    getAll: function getAll(selector) {
      var properties = {};

      for (var i = 0; i < this.sheets.length; i++) {
        extend(properties, aggregateStyles(getRules(this.sheets[i], selector)));
      }

      return properties;
    },
    // Adds JSS rules for the selector based on the given properties
    set: function set(selector, properties) {
      if (!this.defaultSheet) {
        this.defaultSheet = this._createSheet();
      }

      properties = transformCamelCasedPropertyNames(properties);
      var rules = getRules(this.defaultSheet, selector);

      if (!rules.length) {
        rules = [addRule(this.defaultSheet, selector)];
      }

      for (var i = 0; i < rules.length; i++) {
        setStyleProperties(rules[i], properties);
      }
    },
    // Removes JSS rules (selector is optional)
    remove: function remove(selector) {
      if (!this.defaultSheet) return;

      if (!selector) {
        this._removeSheet(this.defaultSheet);

        delete this.defaultSheet;
        return;
      }

      var rules = getRules(this.defaultSheet, selector);

      for (var i = 0; i < rules.length; i++) {
        removeRule(rules[i]);
      }

      return rules.length;
    },
    _createSheet: function _createSheet() {
      var styleNode = this.doc.createElement('style');
      styleNode.type = 'text/css';
      styleNode.rel = 'stylesheet';
      this.head.appendChild(styleNode);
      return styleNode.sheet;
    },
    _removeSheet: function _removeSheet(sheet) {
      var node = sheet.ownerNode;
      node.parentNode.removeChild(node);
    }
  };
  var exports = new Jss(document);

  exports.forDocument = function (doc) {
    return new Jss(doc);
  };

  return exports;
}();

 true && module.exports && (module.exports = jss); // CommonJS support

/***/ }),

/***/ "./node_modules/deep-parse-json/index.js":
/*!***********************************************!*\
  !*** ./node_modules/deep-parse-json/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * [Recursively parses a stringified JSON]
 * @param  {[type]} jsonString [stringified json to parse]
 * @return {[type]}            [normalized Javascript object]
 */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function deepParseJson(jsonString) {
  // if not stringified json rather a simple string value then JSON.parse will throw error
  // otherwise continue recursion
  if (typeof jsonString === 'string') {
    try {
      return deepParseJson(JSON.parse(jsonString));
    } catch (err) {
      return jsonString;
    }
  } else if (Array.isArray(jsonString)) {
    // if an array is received, map over the array and deepParse each value
    return jsonString.map(function (val) {
      return deepParseJson(val);
    });
  } else if (_typeof(jsonString) === 'object' && jsonString !== null) {
    // if an object is received then deepParse each element in the object
    // typeof null returns 'object' too, so we have to eliminate that
    return Object.keys(jsonString).reduce(function (obj, key) {
      obj[key] = deepParseJson(jsonString[key]);
      return obj;
    }, {});
  } else {
    // otherwise return whatever was received
    return jsonString;
  }
}

module.exports = {
  deepParseJson: deepParseJson
};

/***/ }),

/***/ "./node_modules/expose-loader/index.js?BBj.Masks!./node_modules/bbj-masks/dist/bbj-masks.js-exposed":
/*!*************************************************************************************************!*\
  !*** ./node_modules/expose-loader?BBj.Masks!./node_modules/bbj-masks/dist/bbj-masks.js-exposed ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {if(!global["BBj"]) global["BBj"] = {};
module.exports = global["BBj"]["Masks"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./bbj-masks.js */ "./node_modules/babel-loader/lib/index.js?!./node_modules/bbj-masks/dist/bbj-masks.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/expose-loader/index.js?Basis.AgGridComponents!../../basis-aggrid-components/dist/basis-aggrid-components.js-exposed":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/expose-loader?Basis.AgGridComponents!D:/Github/basis-aggrid-components/dist/basis-aggrid-components.js-exposed ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {if(!global["Basis"]) global["Basis"] = {};
module.exports = global["Basis"]["AgGridComponents"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./basis-aggrid-components.js */ "./node_modules/babel-loader/lib/index.js?!../../basis-aggrid-components/dist/basis-aggrid-components.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../BBjGridExWidget/client/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/expose-loader/index.js?Basis.InputMasking!../../basis-input-masking/dist/basis-input-masking.js-exposed":
/*!*************************************************************************************************************************!*\
  !*** ./node_modules/expose-loader?Basis.InputMasking!D:/Github/basis-input-masking/dist/basis-input-masking.js-exposed ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {if(!global["Basis"]) global["Basis"] = {};
module.exports = global["Basis"]["InputMasking"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./basis-input-masking.js */ "./node_modules/babel-loader/lib/index.js?!../../basis-input-masking/dist/basis-input-masking.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../BBjGridExWidget/client/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/expose-loader/index.js?flatpickr!./node_modules/flatpickr/dist/flatpickr.js-exposed":
/*!*************************************************************************************************!*\
  !*** ./node_modules/expose-loader?flatpickr!./node_modules/flatpickr/dist/flatpickr.js-exposed ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["flatpickr"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./flatpickr.js */ "./node_modules/babel-loader/lib/index.js?!./node_modules/flatpickr/dist/flatpickr.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/expose-loader/index.js?jss!./node_modules/jss/jss.js-exposed":
/*!**************************************************************************!*\
  !*** ./node_modules/expose-loader?jss!./node_modules/jss/jss.js-exposed ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jss"] = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4!./jss.js */ "./node_modules/babel-loader/lib/index.js?!./node_modules/jss/jss.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/flatpickr/dist/flatpickr.css":
/*!***************************************************!*\
  !*** ./node_modules/flatpickr/dist/flatpickr.css ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../postcss-loader/src!./flatpickr.css */ "./node_modules/postcss-loader/src/index.js!./node_modules/flatpickr/dist/flatpickr.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = function() {
                return window.parent.document.head
              };

var update = __webpack_require__(/*! ../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/lodash-es/_Symbol.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/_Symbol.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _root = _interopRequireDefault(__webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Built-in value references. */
var _Symbol = _root.default.Symbol;
var _default = _Symbol;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_apply.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/_apply.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);

    case 1:
      return func.call(thisArg, args[0]);

    case 2:
      return func.call(thisArg, args[0], args[1]);

    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }

  return func.apply(thisArg, args);
}

var _default = apply;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_arrayLikeKeys.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_arrayLikeKeys.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseTimes = _interopRequireDefault(__webpack_require__(/*! ./_baseTimes.js */ "./node_modules/lodash-es/_baseTimes.js"));

var _isArguments = _interopRequireDefault(__webpack_require__(/*! ./isArguments.js */ "./node_modules/lodash-es/isArguments.js"));

var _isArray = _interopRequireDefault(__webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js"));

var _isBuffer = _interopRequireDefault(__webpack_require__(/*! ./isBuffer.js */ "./node_modules/lodash-es/isBuffer.js"));

var _isIndex = _interopRequireDefault(__webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js"));

var _isTypedArray = _interopRequireDefault(__webpack_require__(/*! ./isTypedArray.js */ "./node_modules/lodash-es/isTypedArray.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = (0, _isArray.default)(value),
      isArg = !isArr && (0, _isArguments.default)(value),
      isBuff = !isArr && !isArg && (0, _isBuffer.default)(value),
      isType = !isArr && !isArg && !isBuff && (0, _isTypedArray.default)(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? (0, _baseTimes.default)(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    (0, _isIndex.default)(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

var _default = arrayLikeKeys;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_arrayMap.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_arrayMap.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

var _default = arrayMap;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_assignValue.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_assignValue.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseAssignValue = _interopRequireDefault(__webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js"));

var _eq = _interopRequireDefault(__webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty.call(object, key) && (0, _eq.default)(objValue, value)) || value === undefined && !(key in object)) {
    (0, _baseAssignValue.default)(object, key, value);
  }
}

var _default = assignValue;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseAssignValue.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseAssignValue.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty = _interopRequireDefault(__webpack_require__(/*! ./_defineProperty.js */ "./node_modules/lodash-es/_defineProperty.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty.default) {
    (0, _defineProperty.default)(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

var _default = baseAssignValue;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseGetTag.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseGetTag.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Symbol2 = _interopRequireDefault(__webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js"));

var _getRawTag = _interopRequireDefault(__webpack_require__(/*! ./_getRawTag.js */ "./node_modules/lodash-es/_getRawTag.js"));

var _objectToString = _interopRequireDefault(__webpack_require__(/*! ./_objectToString.js */ "./node_modules/lodash-es/_objectToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = _Symbol2.default ? _Symbol2.default.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? (0, _getRawTag.default)(value) : (0, _objectToString.default)(value);
}

var _default = baseGetTag;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseIsArguments.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsArguments.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseGetTag = _interopRequireDefault(__webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js"));

var _isObjectLike = _interopRequireDefault(__webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return (0, _isObjectLike.default)(value) && (0, _baseGetTag.default)(value) == argsTag;
}

var _default = baseIsArguments;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseIsNative.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsNative.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isFunction = _interopRequireDefault(__webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js"));

var _isMasked = _interopRequireDefault(__webpack_require__(/*! ./_isMasked.js */ "./node_modules/lodash-es/_isMasked.js"));

var _isObject = _interopRequireDefault(__webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js"));

var _toSource = _interopRequireDefault(__webpack_require__(/*! ./_toSource.js */ "./node_modules/lodash-es/_toSource.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!(0, _isObject.default)(value) || (0, _isMasked.default)(value)) {
    return false;
  }

  var pattern = (0, _isFunction.default)(value) ? reIsNative : reIsHostCtor;
  return pattern.test((0, _toSource.default)(value));
}

var _default = baseIsNative;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseIsTypedArray.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_baseIsTypedArray.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseGetTag = _interopRequireDefault(__webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js"));

var _isLength = _interopRequireDefault(__webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js"));

var _isObjectLike = _interopRequireDefault(__webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return (0, _isObjectLike.default)(value) && (0, _isLength.default)(value.length) && !!typedArrayTags[(0, _baseGetTag.default)(value)];
}

var _default = baseIsTypedArray;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseKeys.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeys.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isPrototype = _interopRequireDefault(__webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js"));

var _nativeKeys = _interopRequireDefault(__webpack_require__(/*! ./_nativeKeys.js */ "./node_modules/lodash-es/_nativeKeys.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!(0, _isPrototype.default)(object)) {
    return (0, _nativeKeys.default)(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

var _default = baseKeys;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseKeysIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseKeysIn.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isObject = _interopRequireDefault(__webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js"));

var _isPrototype = _interopRequireDefault(__webpack_require__(/*! ./_isPrototype.js */ "./node_modules/lodash-es/_isPrototype.js"));

var _nativeKeysIn = _interopRequireDefault(__webpack_require__(/*! ./_nativeKeysIn.js */ "./node_modules/lodash-es/_nativeKeysIn.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeysIn(object) {
  if (!(0, _isObject.default)(object)) {
    return (0, _nativeKeysIn.default)(object);
  }

  var isProto = (0, _isPrototype.default)(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

var _default = baseKeysIn;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_basePropertyOf.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_basePropertyOf.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function (key) {
    return object == null ? undefined : object[key];
  };
}

var _default = basePropertyOf;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_baseRest.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _identity = _interopRequireDefault(__webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js"));

var _overRest = _interopRequireDefault(__webpack_require__(/*! ./_overRest.js */ "./node_modules/lodash-es/_overRest.js"));

var _setToString = _interopRequireDefault(__webpack_require__(/*! ./_setToString.js */ "./node_modules/lodash-es/_setToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return (0, _setToString.default)((0, _overRest.default)(func, start, _identity.default), func + '');
}

var _default = baseRest;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseSetToString.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/_baseSetToString.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constant = _interopRequireDefault(__webpack_require__(/*! ./constant.js */ "./node_modules/lodash-es/constant.js"));

var _defineProperty = _interopRequireDefault(__webpack_require__(/*! ./_defineProperty.js */ "./node_modules/lodash-es/_defineProperty.js"));

var _identity = _interopRequireDefault(__webpack_require__(/*! ./identity.js */ "./node_modules/lodash-es/identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !_defineProperty.default ? _identity.default : function (func, string) {
  return (0, _defineProperty.default)(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': (0, _constant.default)(string),
    'writable': true
  });
};
var _default = baseSetToString;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseTimes.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseTimes.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

var _default = baseTimes;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_baseToString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Symbol2 = _interopRequireDefault(__webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js"));

var _arrayMap = _interopRequireDefault(__webpack_require__(/*! ./_arrayMap.js */ "./node_modules/lodash-es/_arrayMap.js"));

var _isArray = _interopRequireDefault(__webpack_require__(/*! ./isArray.js */ "./node_modules/lodash-es/isArray.js"));

var _isSymbol = _interopRequireDefault(__webpack_require__(/*! ./isSymbol.js */ "./node_modules/lodash-es/isSymbol.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = _Symbol2.default ? _Symbol2.default.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if ((0, _isArray.default)(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return (0, _arrayMap.default)(value, baseToString) + '';
  }

  if ((0, _isSymbol.default)(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

var _default = baseToString;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseUnary.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_baseUnary.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

var _default = baseUnary;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_baseValues.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_baseValues.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayMap = _interopRequireDefault(__webpack_require__(/*! ./_arrayMap.js */ "./node_modules/lodash-es/_arrayMap.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return (0, _arrayMap.default)(props, function (key) {
    return object[key];
  });
}

var _default = baseValues;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_copyObject.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_copyObject.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assignValue = _interopRequireDefault(__webpack_require__(/*! ./_assignValue.js */ "./node_modules/lodash-es/_assignValue.js"));

var _baseAssignValue = _interopRequireDefault(__webpack_require__(/*! ./_baseAssignValue.js */ "./node_modules/lodash-es/_baseAssignValue.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      (0, _baseAssignValue.default)(object, key, newValue);
    } else {
      (0, _assignValue.default)(object, key, newValue);
    }
  }

  return object;
}

var _default = copyObject;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_coreJsData.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_coreJsData.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _root = _interopRequireDefault(__webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used to detect overreaching core-js shims. */
var coreJsData = _root.default['__core-js_shared__'];
var _default = coreJsData;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_createAssigner.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_createAssigner.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseRest = _interopRequireDefault(__webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js"));

var _isIterateeCall = _interopRequireDefault(__webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return (0, _baseRest.default)(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && (0, _isIterateeCall.default)(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }

    object = Object(object);

    while (++index < length) {
      var source = sources[index];

      if (source) {
        assigner(object, source, index, customizer);
      }
    }

    return object;
  });
}

var _default = createAssigner;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_customDefaultsAssignIn.js":
/*!***********************************************************!*\
  !*** ./node_modules/lodash-es/_customDefaultsAssignIn.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eq = _interopRequireDefault(__webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
 * of source objects to the destination object for all destination properties
 * that resolve to `undefined`.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to assign.
 * @param {Object} object The parent object of `objValue`.
 * @returns {*} Returns the value to assign.
 */

function customDefaultsAssignIn(objValue, srcValue, key, object) {
  if (objValue === undefined || (0, _eq.default)(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
    return srcValue;
  }

  return objValue;
}

var _default = customDefaultsAssignIn;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_defineProperty.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_defineProperty.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _getNative = _interopRequireDefault(__webpack_require__(/*! ./_getNative.js */ "./node_modules/lodash-es/_getNative.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defineProperty = function () {
  try {
    var func = (0, _getNative.default)(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

var _default = defineProperty;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_escapeHtmlChar.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_escapeHtmlChar.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basePropertyOf = _interopRequireDefault(__webpack_require__(/*! ./_basePropertyOf.js */ "./node_modules/lodash-es/_basePropertyOf.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used to map characters to HTML entities. */
var htmlEscapes = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};
/**
 * Used by `_.escape` to convert characters to HTML entities.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */

var escapeHtmlChar = (0, _basePropertyOf.default)(htmlEscapes);
var _default = escapeHtmlChar;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_escapeStringChar.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash-es/_escapeStringChar.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used to escape characters for inclusion in compiled string literals. */
var stringEscapes = {
  '\\': '\\',
  "'": "'",
  '\n': 'n',
  '\r': 'r',
  "\u2028": 'u2028',
  "\u2029": 'u2029'
};
/**
 * Used by `_.template` to escape characters for inclusion in compiled string literals.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */

function escapeStringChar(chr) {
  return '\\' + stringEscapes[chr];
}

var _default = escapeStringChar;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_freeGlobal.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_freeGlobal.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Detect free variable `global` from Node.js. */
var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;
var _default = freeGlobal;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/lodash-es/_getNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getNative.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseIsNative = _interopRequireDefault(__webpack_require__(/*! ./_baseIsNative.js */ "./node_modules/lodash-es/_baseIsNative.js"));

var _getValue = _interopRequireDefault(__webpack_require__(/*! ./_getValue.js */ "./node_modules/lodash-es/_getValue.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = (0, _getValue.default)(object, key);
  return (0, _baseIsNative.default)(value) ? value : undefined;
}

var _default = getNative;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_getPrototype.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_getPrototype.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _overArg = _interopRequireDefault(__webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Built-in value references. */
var getPrototype = (0, _overArg.default)(Object.getPrototypeOf, Object);
var _default = getPrototype;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_getRawTag.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/_getRawTag.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Symbol2 = _interopRequireDefault(__webpack_require__(/*! ./_Symbol.js */ "./node_modules/lodash-es/_Symbol.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = _Symbol2.default ? _Symbol2.default.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

var _default = getRawTag;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_getValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_getValue.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

var _default = getValue;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_isIndex.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_isIndex.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = _typeof(value);

  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

var _default = isIndex;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_isIterateeCall.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_isIterateeCall.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _eq = _interopRequireDefault(__webpack_require__(/*! ./eq.js */ "./node_modules/lodash-es/eq.js"));

var _isArrayLike = _interopRequireDefault(__webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js"));

var _isIndex = _interopRequireDefault(__webpack_require__(/*! ./_isIndex.js */ "./node_modules/lodash-es/_isIndex.js"));

var _isObject = _interopRequireDefault(__webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!(0, _isObject.default)(object)) {
    return false;
  }

  var type = _typeof(index);

  if (type == 'number' ? (0, _isArrayLike.default)(object) && (0, _isIndex.default)(index, object.length) : type == 'string' && index in object) {
    return (0, _eq.default)(object[index], value);
  }

  return false;
}

var _default = isIterateeCall;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_isMasked.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_isMasked.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _coreJsData = _interopRequireDefault(__webpack_require__(/*! ./_coreJsData.js */ "./node_modules/lodash-es/_coreJsData.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used to detect methods masquerading as native. */
var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(_coreJsData.default && _coreJsData.default.keys && _coreJsData.default.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

var _default = isMasked;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_isPrototype.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_isPrototype.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}

var _default = isPrototype;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_nativeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeys.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _overArg = _interopRequireDefault(__webpack_require__(/*! ./_overArg.js */ "./node_modules/lodash-es/_overArg.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = (0, _overArg.default)(Object.keys, Object);
var _default = nativeKeys;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_nativeKeysIn.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/_nativeKeysIn.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];

  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }

  return result;
}

var _default = nativeKeysIn;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_nodeUtil.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_nodeUtil.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _freeGlobal = _interopRequireDefault(__webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Detect free variable `exports`. */
var freeExports = ( false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && ( false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && _freeGlobal.default.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

var _default = nodeUtil;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash-es/_objectToString.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash-es/_objectToString.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

var _default = objectToString;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_overArg.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/_overArg.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

var _default = overArg;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_overRest.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_overRest.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apply = _interopRequireDefault(__webpack_require__(/*! ./_apply.js */ "./node_modules/lodash-es/_apply.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }

    index = -1;
    var otherArgs = Array(start + 1);

    while (++index < start) {
      otherArgs[index] = args[index];
    }

    otherArgs[start] = transform(array);
    return (0, _apply.default)(func, this, otherArgs);
  };
}

var _default = overRest;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_reEscape.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_reEscape.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used to match template delimiters. */
var reEscape = /<%-([\s\S]+?)%>/g;
var _default = reEscape;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_reEvaluate.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/_reEvaluate.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used to match template delimiters. */
var reEvaluate = /<%([\s\S]+?)%>/g;
var _default = reEvaluate;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_reInterpolate.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash-es/_reInterpolate.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used to match template delimiters. */
var reInterpolate = /<%=([\s\S]+?)%>/g;
var _default = reInterpolate;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_root.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash-es/_root.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _freeGlobal = _interopRequireDefault(__webpack_require__(/*! ./_freeGlobal.js */ "./node_modules/lodash-es/_freeGlobal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Detect free variable `self`. */
var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = _freeGlobal.default || freeSelf || Function('return this')();
var _default = root;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_setToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/_setToString.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseSetToString = _interopRequireDefault(__webpack_require__(/*! ./_baseSetToString.js */ "./node_modules/lodash-es/_baseSetToString.js"));

var _shortOut = _interopRequireDefault(__webpack_require__(/*! ./_shortOut.js */ "./node_modules/lodash-es/_shortOut.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = (0, _shortOut.default)(_baseSetToString.default);
var _default = setToString;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_shortOut.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_shortOut.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

function shortOut(func) {
  var count = 0,
      lastCalled = 0;
  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;

    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }

    return func.apply(undefined, arguments);
  };
}

var _default = shortOut;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/_toSource.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/_toSource.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

var _default = toSource;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/assignInWith.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/assignInWith.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _copyObject = _interopRequireDefault(__webpack_require__(/*! ./_copyObject.js */ "./node_modules/lodash-es/_copyObject.js"));

var _createAssigner = _interopRequireDefault(__webpack_require__(/*! ./_createAssigner.js */ "./node_modules/lodash-es/_createAssigner.js"));

var _keysIn = _interopRequireDefault(__webpack_require__(/*! ./keysIn.js */ "./node_modules/lodash-es/keysIn.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This method is like `_.assignIn` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignInWith = (0, _createAssigner.default)(function (object, source, srcIndex, customizer) {
  (0, _copyObject.default)(source, (0, _keysIn.default)(source), object, customizer);
});
var _default = assignInWith;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/attempt.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/attempt.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _apply = _interopRequireDefault(__webpack_require__(/*! ./_apply.js */ "./node_modules/lodash-es/_apply.js"));

var _baseRest = _interopRequireDefault(__webpack_require__(/*! ./_baseRest.js */ "./node_modules/lodash-es/_baseRest.js"));

var _isError = _interopRequireDefault(__webpack_require__(/*! ./isError.js */ "./node_modules/lodash-es/isError.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Attempts to invoke `func`, returning either the result or the caught error
 * object. Any additional arguments are provided to `func` when it's invoked.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Function} func The function to attempt.
 * @param {...*} [args] The arguments to invoke `func` with.
 * @returns {*} Returns the `func` result or error object.
 * @example
 *
 * // Avoid throwing errors for invalid selectors.
 * var elements = _.attempt(function(selector) {
 *   return document.querySelectorAll(selector);
 * }, '>_>');
 *
 * if (_.isError(elements)) {
 *   elements = [];
 * }
 */
var attempt = (0, _baseRest.default)(function (func, args) {
  try {
    return (0, _apply.default)(func, undefined, args);
  } catch (e) {
    return (0, _isError.default)(e) ? e : new Error(e);
  }
});
var _default = attempt;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/constant.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/constant.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

var _default = constant;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/eq.js":
/*!**************************************!*\
  !*** ./node_modules/lodash-es/eq.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

var _default = eq;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/escape.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/escape.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _escapeHtmlChar = _interopRequireDefault(__webpack_require__(/*! ./_escapeHtmlChar.js */ "./node_modules/lodash-es/_escapeHtmlChar.js"));

var _toString = _interopRequireDefault(__webpack_require__(/*! ./toString.js */ "./node_modules/lodash-es/toString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"']/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
/**
 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
 * corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */

function escape(string) {
  string = (0, _toString.default)(string);
  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, _escapeHtmlChar.default) : string;
}

var _default = escape;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/identity.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/identity.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var _default = identity;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isArguments.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArguments.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseIsArguments = _interopRequireDefault(__webpack_require__(/*! ./_baseIsArguments.js */ "./node_modules/lodash-es/_baseIsArguments.js"));

var _isObjectLike = _interopRequireDefault(__webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = (0, _baseIsArguments.default)(function () {
  return arguments;
}()) ? _baseIsArguments.default : function (value) {
  return (0, _isObjectLike.default)(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
var _default = isArguments;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isArray.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
var _default = isArray;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isArrayLike.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash-es/isArrayLike.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isFunction = _interopRequireDefault(__webpack_require__(/*! ./isFunction.js */ "./node_modules/lodash-es/isFunction.js"));

var _isLength = _interopRequireDefault(__webpack_require__(/*! ./isLength.js */ "./node_modules/lodash-es/isLength.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && (0, _isLength.default)(value.length) && !(0, _isFunction.default)(value);
}

var _default = isArrayLike;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isBuffer.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isBuffer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _root = _interopRequireDefault(__webpack_require__(/*! ./_root.js */ "./node_modules/lodash-es/_root.js"));

var _stubFalse = _interopRequireDefault(__webpack_require__(/*! ./stubFalse.js */ "./node_modules/lodash-es/stubFalse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** Detect free variable `exports`. */
var freeExports = ( false ? undefined : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && ( false ? undefined : _typeof(module)) == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? _root.default.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

var isBuffer = nativeIsBuffer || _stubFalse.default;
var _default = isBuffer;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash-es/isError.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash-es/isError.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseGetTag = _interopRequireDefault(__webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js"));

var _isObjectLike = _interopRequireDefault(__webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js"));

var _isPlainObject = _interopRequireDefault(__webpack_require__(/*! ./isPlainObject.js */ "./node_modules/lodash-es/isPlainObject.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */

function isError(value) {
  if (!(0, _isObjectLike.default)(value)) {
    return false;
  }

  var tag = (0, _baseGetTag.default)(value);
  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !(0, _isPlainObject.default)(value);
}

var _default = isError;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash-es/isFunction.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseGetTag = _interopRequireDefault(__webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js"));

var _isObject = _interopRequireDefault(__webpack_require__(/*! ./isObject.js */ "./node_modules/lodash-es/isObject.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!(0, _isObject.default)(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = (0, _baseGetTag.default)(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var _default = isFunction;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isLength.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isLength.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

var _default = isLength;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = _typeof(value);

  return value != null && (type == 'object' || type == 'function');
}

var _default = isObject;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isObjectLike.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isObjectLike.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && _typeof(value) == 'object';
}

var _default = isObjectLike;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isPlainObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash-es/isPlainObject.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseGetTag = _interopRequireDefault(__webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js"));

var _getPrototype = _interopRequireDefault(__webpack_require__(/*! ./_getPrototype.js */ "./node_modules/lodash-es/_getPrototype.js"));

var _isObjectLike = _interopRequireDefault(__webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** `Object#toString` result references. */
var objectTag = '[object Object]';
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */

var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */

function isPlainObject(value) {
  if (!(0, _isObjectLike.default)(value) || (0, _baseGetTag.default)(value) != objectTag) {
    return false;
  }

  var proto = (0, _getPrototype.default)(value);

  if (proto === null) {
    return true;
  }

  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

var _default = isPlainObject;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isSymbol.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/isSymbol.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseGetTag = _interopRequireDefault(__webpack_require__(/*! ./_baseGetTag.js */ "./node_modules/lodash-es/_baseGetTag.js"));

var _isObjectLike = _interopRequireDefault(__webpack_require__(/*! ./isObjectLike.js */ "./node_modules/lodash-es/isObjectLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return _typeof(value) == 'symbol' || (0, _isObjectLike.default)(value) && (0, _baseGetTag.default)(value) == symbolTag;
}

var _default = isSymbol;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/isTypedArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash-es/isTypedArray.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseIsTypedArray = _interopRequireDefault(__webpack_require__(/*! ./_baseIsTypedArray.js */ "./node_modules/lodash-es/_baseIsTypedArray.js"));

var _baseUnary = _interopRequireDefault(__webpack_require__(/*! ./_baseUnary.js */ "./node_modules/lodash-es/_baseUnary.js"));

var _nodeUtil = _interopRequireDefault(__webpack_require__(/*! ./_nodeUtil.js */ "./node_modules/lodash-es/_nodeUtil.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* Node.js helper references. */
var nodeIsTypedArray = _nodeUtil.default && _nodeUtil.default.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? (0, _baseUnary.default)(nodeIsTypedArray) : _baseIsTypedArray.default;
var _default = isTypedArray;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/keys.js":
/*!****************************************!*\
  !*** ./node_modules/lodash-es/keys.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayLikeKeys = _interopRequireDefault(__webpack_require__(/*! ./_arrayLikeKeys.js */ "./node_modules/lodash-es/_arrayLikeKeys.js"));

var _baseKeys = _interopRequireDefault(__webpack_require__(/*! ./_baseKeys.js */ "./node_modules/lodash-es/_baseKeys.js"));

var _isArrayLike = _interopRequireDefault(__webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return (0, _isArrayLike.default)(object) ? (0, _arrayLikeKeys.default)(object) : (0, _baseKeys.default)(object);
}

var _default = keys;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/keysIn.js":
/*!******************************************!*\
  !*** ./node_modules/lodash-es/keysIn.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _arrayLikeKeys = _interopRequireDefault(__webpack_require__(/*! ./_arrayLikeKeys.js */ "./node_modules/lodash-es/_arrayLikeKeys.js"));

var _baseKeysIn = _interopRequireDefault(__webpack_require__(/*! ./_baseKeysIn.js */ "./node_modules/lodash-es/_baseKeysIn.js"));

var _isArrayLike = _interopRequireDefault(__webpack_require__(/*! ./isArrayLike.js */ "./node_modules/lodash-es/isArrayLike.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return (0, _isArrayLike.default)(object) ? (0, _arrayLikeKeys.default)(object, true) : (0, _baseKeysIn.default)(object);
}

var _default = keysIn;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/stubFalse.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash-es/stubFalse.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

var _default = stubFalse;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/template.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/template.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assignInWith = _interopRequireDefault(__webpack_require__(/*! ./assignInWith.js */ "./node_modules/lodash-es/assignInWith.js"));

var _attempt = _interopRequireDefault(__webpack_require__(/*! ./attempt.js */ "./node_modules/lodash-es/attempt.js"));

var _baseValues = _interopRequireDefault(__webpack_require__(/*! ./_baseValues.js */ "./node_modules/lodash-es/_baseValues.js"));

var _customDefaultsAssignIn = _interopRequireDefault(__webpack_require__(/*! ./_customDefaultsAssignIn.js */ "./node_modules/lodash-es/_customDefaultsAssignIn.js"));

var _escapeStringChar = _interopRequireDefault(__webpack_require__(/*! ./_escapeStringChar.js */ "./node_modules/lodash-es/_escapeStringChar.js"));

var _isError = _interopRequireDefault(__webpack_require__(/*! ./isError.js */ "./node_modules/lodash-es/isError.js"));

var _isIterateeCall = _interopRequireDefault(__webpack_require__(/*! ./_isIterateeCall.js */ "./node_modules/lodash-es/_isIterateeCall.js"));

var _keys = _interopRequireDefault(__webpack_require__(/*! ./keys.js */ "./node_modules/lodash-es/keys.js"));

var _reInterpolate = _interopRequireDefault(__webpack_require__(/*! ./_reInterpolate.js */ "./node_modules/lodash-es/_reInterpolate.js"));

var _templateSettings = _interopRequireDefault(__webpack_require__(/*! ./templateSettings.js */ "./node_modules/lodash-es/templateSettings.js"));

var _toString = _interopRequireDefault(__webpack_require__(/*! ./toString.js */ "./node_modules/lodash-es/toString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Error message constants. */
var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
/** Used to match empty string literals in compiled template source. */

var reEmptyStringLeading = /\b__p \+= '';/g,
    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
/**
 * Used to validate the `validate` option in `_.template` variable.
 *
 * Forbids characters which could potentially change the meaning of the function argument definition:
 * - "()," (modification of function parameters)
 * - "=" (default value)
 * - "[]{}" (destructuring of function parameters)
 * - "/" (beginning of a comment)
 * - whitespace
 */

var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
/**
 * Used to match
 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
 */

var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
/** Used to ensure capturing order of template delimiters. */

var reNoMatch = /($^)/;
/** Used to match unescaped characters in compiled string literals. */

var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a compiled template function that can interpolate data properties
 * in "interpolate" delimiters, HTML-escape interpolated data properties in
 * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
 * properties may be accessed as free variables in the template. If a setting
 * object is given, it takes precedence over `_.templateSettings` values.
 *
 * **Note:** In the development build `_.template` utilizes
 * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
 * for easier debugging.
 *
 * For more information on precompiling templates see
 * [lodash's custom builds documentation](https://lodash.com/custom-builds).
 *
 * For more information on Chrome extension sandboxes see
 * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The template string.
 * @param {Object} [options={}] The options object.
 * @param {RegExp} [options.escape=_.templateSettings.escape]
 *  The HTML "escape" delimiter.
 * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
 *  The "evaluate" delimiter.
 * @param {Object} [options.imports=_.templateSettings.imports]
 *  An object to import into the template as free variables.
 * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
 *  The "interpolate" delimiter.
 * @param {string} [options.sourceURL='templateSources[n]']
 *  The sourceURL of the compiled template.
 * @param {string} [options.variable='obj']
 *  The data object variable name.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the compiled template function.
 * @example
 *
 * // Use the "interpolate" delimiter to create a compiled template.
 * var compiled = _.template('hello <%= user %>!');
 * compiled({ 'user': 'fred' });
 * // => 'hello fred!'
 *
 * // Use the HTML "escape" delimiter to escape data property values.
 * var compiled = _.template('<b><%- value %></b>');
 * compiled({ 'value': '<script>' });
 * // => '<b>&lt;script&gt;</b>'
 *
 * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
 * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the internal `print` function in "evaluate" delimiters.
 * var compiled = _.template('<% print("hello " + user); %>!');
 * compiled({ 'user': 'barney' });
 * // => 'hello barney!'
 *
 * // Use the ES template literal delimiter as an "interpolate" delimiter.
 * // Disable support by replacing the "interpolate" delimiter.
 * var compiled = _.template('hello ${ user }!');
 * compiled({ 'user': 'pebbles' });
 * // => 'hello pebbles!'
 *
 * // Use backslashes to treat delimiters as plain text.
 * var compiled = _.template('<%= "\\<%- value %\\>" %>');
 * compiled({ 'value': 'ignored' });
 * // => '<%- value %>'
 *
 * // Use the `imports` option to import `jQuery` as `jq`.
 * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
 * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
 * compiled({ 'users': ['fred', 'barney'] });
 * // => '<li>fred</li><li>barney</li>'
 *
 * // Use the `sourceURL` option to specify a custom sourceURL for the template.
 * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
 * compiled(data);
 * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
 *
 * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
 * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
 * compiled.source;
 * // => function(data) {
 * //   var __t, __p = '';
 * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
 * //   return __p;
 * // }
 *
 * // Use custom template delimiters.
 * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
 * var compiled = _.template('hello {{ user }}!');
 * compiled({ 'user': 'mustache' });
 * // => 'hello mustache!'
 *
 * // Use the `source` property to inline compiled templates for meaningful
 * // line numbers in error messages and stack traces.
 * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
 *   var JST = {\
 *     "main": ' + _.template(mainText).source + '\
 *   };\
 * ');
 */

function template(string, options, guard) {
  // Based on John Resig's `tmpl` implementation
  // (http://ejohn.org/blog/javascript-micro-templating/)
  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
  var settings = _templateSettings.default.imports._.templateSettings || _templateSettings.default;

  if (guard && (0, _isIterateeCall.default)(string, options, guard)) {
    options = undefined;
  }

  string = (0, _toString.default)(string);
  options = (0, _assignInWith.default)({}, options, settings, _customDefaultsAssignIn.default);
  var imports = (0, _assignInWith.default)({}, options.imports, settings.imports, _customDefaultsAssignIn.default),
      importsKeys = (0, _keys.default)(imports),
      importsValues = (0, _baseValues.default)(imports, importsKeys);
  var isEscaping,
      isEvaluating,
      index = 0,
      interpolate = options.interpolate || reNoMatch,
      source = "__p += '"; // Compile the regexp to match each delimiter.

  var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === _reInterpolate.default ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
  // The sourceURL gets injected into the source that's eval-ed, so be careful
  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
  // and escape the comment, thus injecting code that gets evaled.

  var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
  string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
    interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

    source += string.slice(index, offset).replace(reUnescapedString, _escapeStringChar.default); // Replace delimiters with snippets.

    if (escapeValue) {
      isEscaping = true;
      source += "' +\n__e(" + escapeValue + ") +\n'";
    }

    if (evaluateValue) {
      isEvaluating = true;
      source += "';\n" + evaluateValue + ";\n__p += '";
    }

    if (interpolateValue) {
      source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
    }

    index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
    // order to produce the correct `offset` value.

    return match;
  });
  source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
  // code to add the data object to the top of the scope chain.

  var variable = hasOwnProperty.call(options, 'variable') && options.variable;

  if (!variable) {
    source = 'with (obj) {\n' + source + '\n}\n';
  } // Throw an error if a forbidden character was found in `variable`, to prevent
  // potential command injection attacks.
  else if (reForbiddenIdentifierChars.test(variable)) {
      throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    } // Cleanup code by stripping empty strings.


  source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

  source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
  var result = (0, _attempt.default)(function () {
    return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
  }); // Provide the compiled function's source by its `toString` method or
  // the `source` property as a convenience for inlining compiled templates.

  result.source = source;

  if ((0, _isError.default)(result)) {
    throw result;
  }

  return result;
}

var _default = template;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/templateSettings.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash-es/templateSettings.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _escape = _interopRequireDefault(__webpack_require__(/*! ./escape.js */ "./node_modules/lodash-es/escape.js"));

var _reEscape = _interopRequireDefault(__webpack_require__(/*! ./_reEscape.js */ "./node_modules/lodash-es/_reEscape.js"));

var _reEvaluate = _interopRequireDefault(__webpack_require__(/*! ./_reEvaluate.js */ "./node_modules/lodash-es/_reEvaluate.js"));

var _reInterpolate = _interopRequireDefault(__webpack_require__(/*! ./_reInterpolate.js */ "./node_modules/lodash-es/_reInterpolate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * By default, the template delimiters used by lodash are like those in
 * embedded Ruby (ERB) as well as ES2015 template strings. Change the
 * following template settings to use alternative delimiters.
 *
 * @static
 * @memberOf _
 * @type {Object}
 */
var templateSettings = {
  /**
   * Used to detect `data` property values to be HTML-escaped.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'escape': _reEscape.default,

  /**
   * Used to detect code to be evaluated.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'evaluate': _reEvaluate.default,

  /**
   * Used to detect `data` property values to inject.
   *
   * @memberOf _.templateSettings
   * @type {RegExp}
   */
  'interpolate': _reInterpolate.default,

  /**
   * Used to reference the data object in the template text.
   *
   * @memberOf _.templateSettings
   * @type {string}
   */
  'variable': '',

  /**
   * Used to import variables into the compiled template.
   *
   * @memberOf _.templateSettings
   * @type {Object}
   */
  'imports': {
    /**
     * A reference to the `lodash` function.
     *
     * @memberOf _.templateSettings.imports
     * @type {Function}
     */
    '_': {
      'escape': _escape.default
    }
  }
};
var _default = templateSettings;
exports.default = _default;

/***/ }),

/***/ "./node_modules/lodash-es/toString.js":
/*!********************************************!*\
  !*** ./node_modules/lodash-es/toString.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseToString = _interopRequireDefault(__webpack_require__(/*! ./_baseToString.js */ "./node_modules/lodash-es/_baseToString.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : (0, _baseToString.default)(value);
}

var _default = toString;
exports.default = _default;

/***/ }),

/***/ "./node_modules/postcss-loader/src/index.js!./node_modules/flatpickr/dist/flatpickr.css":
/*!*************************************************************************************!*\
  !*** ./node_modules/postcss-loader/src!./node_modules/flatpickr/dist/flatpickr.css ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".flatpickr-calendar {\n  background: transparent;\n  opacity: 0;\n  display: none;\n  text-align: center;\n  visibility: hidden;\n  padding: 0;\n  -webkit-animation: none;\n          animation: none;\n  direction: ltr;\n  border: 0;\n  font-size: 14px;\n  line-height: 24px;\n  border-radius: 5px;\n  position: absolute;\n  width: 307.875px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  background: #fff;\n  -webkit-box-shadow: 1px 0 0 #e6e6e6, -1px 0 0 #e6e6e6, 0 1px 0 #e6e6e6, 0 -1px 0 #e6e6e6, 0 3px 13px rgba(0,0,0,0.08);\n          box-shadow: 1px 0 0 #e6e6e6, -1px 0 0 #e6e6e6, 0 1px 0 #e6e6e6, 0 -1px 0 #e6e6e6, 0 3px 13px rgba(0,0,0,0.08);\n}\n.flatpickr-calendar.open,\n.flatpickr-calendar.inline {\n  opacity: 1;\n  max-height: 640px;\n  visibility: visible;\n}\n.flatpickr-calendar.open {\n  display: inline-block;\n  z-index: 99999;\n}\n.flatpickr-calendar.animate.open {\n  -webkit-animation: fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);\n          animation: fpFadeInDown 300ms cubic-bezier(0.23, 1, 0.32, 1);\n}\n.flatpickr-calendar.inline {\n  display: block;\n  position: relative;\n  top: 2px;\n}\n.flatpickr-calendar.static {\n  position: absolute;\n  top: calc(100% + 2px);\n}\n.flatpickr-calendar.static.open {\n  z-index: 999;\n  display: block;\n}\n.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7) {\n  -webkit-box-shadow: none !important;\n          box-shadow: none !important;\n}\n.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1) {\n  -webkit-box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n          box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n}\n.flatpickr-calendar .hasWeeks .dayContainer,\n.flatpickr-calendar .hasTime .dayContainer {\n  border-bottom: 0;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.flatpickr-calendar .hasWeeks .dayContainer {\n  border-left: 0;\n}\n.flatpickr-calendar.hasTime .flatpickr-time {\n  height: 40px;\n  border-top: 1px solid #e6e6e6;\n}\n.flatpickr-calendar.noCalendar.hasTime .flatpickr-time {\n  height: auto;\n}\n.flatpickr-calendar:before,\n.flatpickr-calendar:after {\n  position: absolute;\n  display: block;\n  pointer-events: none;\n  border: solid transparent;\n  content: '';\n  height: 0;\n  width: 0;\n  left: 22px;\n}\n.flatpickr-calendar.rightMost:before,\n.flatpickr-calendar.arrowRight:before,\n.flatpickr-calendar.rightMost:after,\n.flatpickr-calendar.arrowRight:after {\n  left: auto;\n  right: 22px;\n}\n.flatpickr-calendar.arrowCenter:before,\n.flatpickr-calendar.arrowCenter:after {\n  left: 50%;\n  right: 50%;\n}\n.flatpickr-calendar:before {\n  border-width: 5px;\n  margin: 0 -5px;\n}\n.flatpickr-calendar:after {\n  border-width: 4px;\n  margin: 0 -4px;\n}\n.flatpickr-calendar.arrowTop:before,\n.flatpickr-calendar.arrowTop:after {\n  bottom: 100%;\n}\n.flatpickr-calendar.arrowTop:before {\n  border-bottom-color: #e6e6e6;\n}\n.flatpickr-calendar.arrowTop:after {\n  border-bottom-color: #fff;\n}\n.flatpickr-calendar.arrowBottom:before,\n.flatpickr-calendar.arrowBottom:after {\n  top: 100%;\n}\n.flatpickr-calendar.arrowBottom:before {\n  border-top-color: #e6e6e6;\n}\n.flatpickr-calendar.arrowBottom:after {\n  border-top-color: #fff;\n}\n.flatpickr-calendar:focus {\n  outline: 0;\n}\n.flatpickr-wrapper {\n  position: relative;\n  display: inline-block;\n}\n.flatpickr-months {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.flatpickr-months .flatpickr-month {\n  background: transparent;\n  color: rgba(0,0,0,0.9);\n  fill: rgba(0,0,0,0.9);\n  height: 34px;\n  line-height: 1;\n  text-align: center;\n  position: relative;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  overflow: hidden;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n}\n.flatpickr-months .flatpickr-prev-month,\n.flatpickr-months .flatpickr-next-month {\n  text-decoration: none;\n  cursor: pointer;\n  position: absolute;\n  top: 0;\n  height: 34px;\n  padding: 10px;\n  z-index: 3;\n  color: rgba(0,0,0,0.9);\n  fill: rgba(0,0,0,0.9);\n}\n.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,\n.flatpickr-months .flatpickr-next-month.flatpickr-disabled {\n  display: none;\n}\n.flatpickr-months .flatpickr-prev-month i,\n.flatpickr-months .flatpickr-next-month i {\n  position: relative;\n}\n.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,\n.flatpickr-months .flatpickr-next-month.flatpickr-prev-month {\n/*\n      /*rtl:begin:ignore*/\n/*\n      */\n  left: 0;\n/*\n      /*rtl:end:ignore*/\n/*\n      */\n}\n/*\n      /*rtl:begin:ignore*/\n/*\n      /*rtl:end:ignore*/\n.flatpickr-months .flatpickr-prev-month.flatpickr-next-month,\n.flatpickr-months .flatpickr-next-month.flatpickr-next-month {\n/*\n      /*rtl:begin:ignore*/\n/*\n      */\n  right: 0;\n/*\n      /*rtl:end:ignore*/\n/*\n      */\n}\n/*\n      /*rtl:begin:ignore*/\n/*\n      /*rtl:end:ignore*/\n.flatpickr-months .flatpickr-prev-month:hover,\n.flatpickr-months .flatpickr-next-month:hover {\n  color: #959ea9;\n}\n.flatpickr-months .flatpickr-prev-month:hover svg,\n.flatpickr-months .flatpickr-next-month:hover svg {\n  fill: #f64747;\n}\n.flatpickr-months .flatpickr-prev-month svg,\n.flatpickr-months .flatpickr-next-month svg {\n  width: 14px;\n  height: 14px;\n}\n.flatpickr-months .flatpickr-prev-month svg path,\n.flatpickr-months .flatpickr-next-month svg path {\n  -webkit-transition: fill 0.1s;\n  transition: fill 0.1s;\n  fill: inherit;\n}\n.numInputWrapper {\n  position: relative;\n  height: auto;\n}\n.numInputWrapper input,\n.numInputWrapper span {\n  display: inline-block;\n}\n.numInputWrapper input {\n  width: 100%;\n}\n.numInputWrapper input::-ms-clear {\n  display: none;\n}\n.numInputWrapper input::-webkit-outer-spin-button,\n.numInputWrapper input::-webkit-inner-spin-button {\n  margin: 0;\n  -webkit-appearance: none;\n}\n.numInputWrapper span {\n  position: absolute;\n  right: 0;\n  width: 14px;\n  padding: 0 4px 0 2px;\n  height: 50%;\n  line-height: 50%;\n  opacity: 0;\n  cursor: pointer;\n  border: 1px solid rgba(57,57,57,0.15);\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.numInputWrapper span:hover {\n  background: rgba(0,0,0,0.1);\n}\n.numInputWrapper span:active {\n  background: rgba(0,0,0,0.2);\n}\n.numInputWrapper span:after {\n  display: block;\n  content: \"\";\n  position: absolute;\n}\n.numInputWrapper span.arrowUp {\n  top: 0;\n  border-bottom: 0;\n}\n.numInputWrapper span.arrowUp:after {\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-bottom: 4px solid rgba(57,57,57,0.6);\n  top: 26%;\n}\n.numInputWrapper span.arrowDown {\n  top: 50%;\n}\n.numInputWrapper span.arrowDown:after {\n  border-left: 4px solid transparent;\n  border-right: 4px solid transparent;\n  border-top: 4px solid rgba(57,57,57,0.6);\n  top: 40%;\n}\n.numInputWrapper span svg {\n  width: inherit;\n  height: auto;\n}\n.numInputWrapper span svg path {\n  fill: rgba(0,0,0,0.5);\n}\n.numInputWrapper:hover {\n  background: rgba(0,0,0,0.05);\n}\n.numInputWrapper:hover span {\n  opacity: 1;\n}\n.flatpickr-current-month {\n  font-size: 135%;\n  line-height: inherit;\n  font-weight: 300;\n  color: inherit;\n  position: absolute;\n  width: 75%;\n  left: 12.5%;\n  padding: 7.48px 0 0 0;\n  line-height: 1;\n  height: 34px;\n  display: inline-block;\n  text-align: center;\n  -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n}\n.flatpickr-current-month span.cur-month {\n  font-family: inherit;\n  font-weight: 700;\n  color: inherit;\n  display: inline-block;\n  margin-left: 0.5ch;\n  padding: 0;\n}\n.flatpickr-current-month span.cur-month:hover {\n  background: rgba(0,0,0,0.05);\n}\n.flatpickr-current-month .numInputWrapper {\n  width: 6ch;\n  width: 7ch\\0;\n  display: inline-block;\n}\n.flatpickr-current-month .numInputWrapper span.arrowUp:after {\n  border-bottom-color: rgba(0,0,0,0.9);\n}\n.flatpickr-current-month .numInputWrapper span.arrowDown:after {\n  border-top-color: rgba(0,0,0,0.9);\n}\n.flatpickr-current-month input.cur-year {\n  background: transparent;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: inherit;\n  cursor: text;\n  padding: 0 0 0 0.5ch;\n  margin: 0;\n  display: inline-block;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: 300;\n  line-height: inherit;\n  height: auto;\n  border: 0;\n  border-radius: 0;\n  vertical-align: initial;\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.flatpickr-current-month input.cur-year:focus {\n  outline: 0;\n}\n.flatpickr-current-month input.cur-year[disabled],\n.flatpickr-current-month input.cur-year[disabled]:hover {\n  font-size: 100%;\n  color: rgba(0,0,0,0.5);\n  background: transparent;\n  pointer-events: none;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months {\n  appearance: menulist;\n  background: transparent;\n  border: none;\n  border-radius: 0;\n  box-sizing: border-box;\n  color: inherit;\n  cursor: pointer;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: 300;\n  height: auto;\n  line-height: inherit;\n  margin: -1px 0 0 0;\n  outline: none;\n  padding: 0 0 0 0.5ch;\n  position: relative;\n  vertical-align: initial;\n  -webkit-box-sizing: border-box;\n  -webkit-appearance: menulist;\n  -moz-appearance: menulist;\n  width: auto;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months:focus,\n.flatpickr-current-month .flatpickr-monthDropdown-months:active {\n  outline: none;\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months:hover {\n  background: rgba(0,0,0,0.05);\n}\n.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month {\n  background-color: transparent;\n  outline: none;\n  padding: 0;\n}\n.flatpickr-weekdays {\n  background: transparent;\n  text-align: center;\n  overflow: hidden;\n  width: 100%;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n      -ms-flex-align: center;\n          align-items: center;\n  height: 28px;\n}\n.flatpickr-weekdays .flatpickr-weekdaycontainer {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n}\nspan.flatpickr-weekday {\n  cursor: default;\n  font-size: 90%;\n  background: transparent;\n  color: rgba(0,0,0,0.54);\n  line-height: 1;\n  margin: 0;\n  text-align: center;\n  display: block;\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  font-weight: bolder;\n}\n.dayContainer,\n.flatpickr-weeks {\n  padding: 1px 0 0 0;\n}\n.flatpickr-days {\n  position: relative;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: start;\n  -webkit-align-items: flex-start;\n      -ms-flex-align: start;\n          align-items: flex-start;\n  width: 307.875px;\n}\n.flatpickr-days:focus {\n  outline: 0;\n}\n.dayContainer {\n  padding: 0;\n  outline: 0;\n  text-align: left;\n  width: 307.875px;\n  min-width: 307.875px;\n  max-width: 307.875px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  display: inline-block;\n  display: -ms-flexbox;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: flex;\n  -webkit-flex-wrap: wrap;\n          flex-wrap: wrap;\n  -ms-flex-wrap: wrap;\n  -ms-flex-pack: justify;\n  -webkit-justify-content: space-around;\n          justify-content: space-around;\n  -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n  opacity: 1;\n}\n.dayContainer + .dayContainer {\n  -webkit-box-shadow: -1px 0 0 #e6e6e6;\n          box-shadow: -1px 0 0 #e6e6e6;\n}\n.flatpickr-day {\n  background: none;\n  border: 1px solid transparent;\n  border-radius: 150px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #393939;\n  cursor: pointer;\n  font-weight: 400;\n  width: 14.2857143%;\n  -webkit-flex-basis: 14.2857143%;\n      -ms-flex-preferred-size: 14.2857143%;\n          flex-basis: 14.2857143%;\n  max-width: 39px;\n  height: 39px;\n  line-height: 39px;\n  margin: 0;\n  display: inline-block;\n  position: relative;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  text-align: center;\n}\n.flatpickr-day.inRange,\n.flatpickr-day.prevMonthDay.inRange,\n.flatpickr-day.nextMonthDay.inRange,\n.flatpickr-day.today.inRange,\n.flatpickr-day.prevMonthDay.today.inRange,\n.flatpickr-day.nextMonthDay.today.inRange,\n.flatpickr-day:hover,\n.flatpickr-day.prevMonthDay:hover,\n.flatpickr-day.nextMonthDay:hover,\n.flatpickr-day:focus,\n.flatpickr-day.prevMonthDay:focus,\n.flatpickr-day.nextMonthDay:focus {\n  cursor: pointer;\n  outline: 0;\n  background: #e6e6e6;\n  border-color: #e6e6e6;\n}\n.flatpickr-day.today {\n  border-color: #959ea9;\n}\n.flatpickr-day.today:hover,\n.flatpickr-day.today:focus {\n  border-color: #959ea9;\n  background: #959ea9;\n  color: #fff;\n}\n.flatpickr-day.selected,\n.flatpickr-day.startRange,\n.flatpickr-day.endRange,\n.flatpickr-day.selected.inRange,\n.flatpickr-day.startRange.inRange,\n.flatpickr-day.endRange.inRange,\n.flatpickr-day.selected:focus,\n.flatpickr-day.startRange:focus,\n.flatpickr-day.endRange:focus,\n.flatpickr-day.selected:hover,\n.flatpickr-day.startRange:hover,\n.flatpickr-day.endRange:hover,\n.flatpickr-day.selected.prevMonthDay,\n.flatpickr-day.startRange.prevMonthDay,\n.flatpickr-day.endRange.prevMonthDay,\n.flatpickr-day.selected.nextMonthDay,\n.flatpickr-day.startRange.nextMonthDay,\n.flatpickr-day.endRange.nextMonthDay {\n  background: #569ff7;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  color: #fff;\n  border-color: #569ff7;\n}\n.flatpickr-day.selected.startRange,\n.flatpickr-day.startRange.startRange,\n.flatpickr-day.endRange.startRange {\n  border-radius: 50px 0 0 50px;\n}\n.flatpickr-day.selected.endRange,\n.flatpickr-day.startRange.endRange,\n.flatpickr-day.endRange.endRange {\n  border-radius: 0 50px 50px 0;\n}\n.flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n+1)),\n.flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n+1)),\n.flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n+1)) {\n  -webkit-box-shadow: -10px 0 0 #569ff7;\n          box-shadow: -10px 0 0 #569ff7;\n}\n.flatpickr-day.selected.startRange.endRange,\n.flatpickr-day.startRange.startRange.endRange,\n.flatpickr-day.endRange.startRange.endRange {\n  border-radius: 50px;\n}\n.flatpickr-day.inRange {\n  border-radius: 0;\n  -webkit-box-shadow: -5px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n          box-shadow: -5px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;\n}\n.flatpickr-day.flatpickr-disabled,\n.flatpickr-day.flatpickr-disabled:hover,\n.flatpickr-day.prevMonthDay,\n.flatpickr-day.nextMonthDay,\n.flatpickr-day.notAllowed,\n.flatpickr-day.notAllowed.prevMonthDay,\n.flatpickr-day.notAllowed.nextMonthDay {\n  color: rgba(57,57,57,0.3);\n  background: transparent;\n  border-color: transparent;\n  cursor: default;\n}\n.flatpickr-day.flatpickr-disabled,\n.flatpickr-day.flatpickr-disabled:hover {\n  cursor: not-allowed;\n  color: rgba(57,57,57,0.1);\n}\n.flatpickr-day.week.selected {\n  border-radius: 0;\n  -webkit-box-shadow: -5px 0 0 #569ff7, 5px 0 0 #569ff7;\n          box-shadow: -5px 0 0 #569ff7, 5px 0 0 #569ff7;\n}\n.flatpickr-day.hidden {\n  visibility: hidden;\n}\n.rangeMode .flatpickr-day {\n  margin-top: 1px;\n}\n.flatpickr-weekwrapper {\n  float: left;\n}\n.flatpickr-weekwrapper .flatpickr-weeks {\n  padding: 0 12px;\n  -webkit-box-shadow: 1px 0 0 #e6e6e6;\n          box-shadow: 1px 0 0 #e6e6e6;\n}\n.flatpickr-weekwrapper .flatpickr-weekday {\n  float: none;\n  width: 100%;\n  line-height: 28px;\n}\n.flatpickr-weekwrapper span.flatpickr-day,\n.flatpickr-weekwrapper span.flatpickr-day:hover {\n  display: block;\n  width: 100%;\n  max-width: none;\n  color: rgba(57,57,57,0.3);\n  background: transparent;\n  cursor: default;\n  border: none;\n}\n.flatpickr-innerContainer {\n  display: block;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: hidden;\n}\n.flatpickr-rContainer {\n  display: inline-block;\n  padding: 0;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.flatpickr-time {\n  text-align: center;\n  outline: 0;\n  display: block;\n  height: 0;\n  line-height: 40px;\n  max-height: 40px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  overflow: hidden;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n}\n.flatpickr-time:after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n.flatpickr-time .numInputWrapper {\n  -webkit-box-flex: 1;\n  -webkit-flex: 1;\n      -ms-flex: 1;\n          flex: 1;\n  width: 40%;\n  height: 40px;\n  float: left;\n}\n.flatpickr-time .numInputWrapper span.arrowUp:after {\n  border-bottom-color: #393939;\n}\n.flatpickr-time .numInputWrapper span.arrowDown:after {\n  border-top-color: #393939;\n}\n.flatpickr-time.hasSeconds .numInputWrapper {\n  width: 26%;\n}\n.flatpickr-time.time24hr .numInputWrapper {\n  width: 49%;\n}\n.flatpickr-time input {\n  background: transparent;\n  -webkit-box-shadow: none;\n          box-shadow: none;\n  border: 0;\n  border-radius: 0;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  height: inherit;\n  line-height: inherit;\n  color: #393939;\n  font-size: 14px;\n  position: relative;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-appearance: textfield;\n  -moz-appearance: textfield;\n  appearance: textfield;\n}\n.flatpickr-time input.flatpickr-hour {\n  font-weight: bold;\n}\n.flatpickr-time input.flatpickr-minute,\n.flatpickr-time input.flatpickr-second {\n  font-weight: 400;\n}\n.flatpickr-time input:focus {\n  outline: 0;\n  border: 0;\n}\n.flatpickr-time .flatpickr-time-separator,\n.flatpickr-time .flatpickr-am-pm {\n  height: inherit;\n  float: left;\n  line-height: inherit;\n  color: #393939;\n  font-weight: bold;\n  width: 2%;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-align-self: center;\n      -ms-flex-item-align: center;\n          align-self: center;\n}\n.flatpickr-time .flatpickr-am-pm {\n  outline: 0;\n  width: 18%;\n  cursor: pointer;\n  text-align: center;\n  font-weight: 400;\n}\n.flatpickr-time input:hover,\n.flatpickr-time .flatpickr-am-pm:hover,\n.flatpickr-time input:focus,\n.flatpickr-time .flatpickr-am-pm:focus {\n  background: #eee;\n}\n.flatpickr-input[readonly] {\n  cursor: pointer;\n}\n@-webkit-keyframes fpFadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n            transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n@keyframes fpFadeInDown {\n  from {\n    opacity: 0;\n    -webkit-transform: translate3d(0, -20px, 0);\n            transform: translate3d(0, -20px, 0);\n  }\n  to {\n    opacity: 1;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n"

/***/ }),

/***/ "./node_modules/postcss-loader/src/index.js!./src/style/classes.css":
/*!*****************************************************************!*\
  !*** ./node_modules/postcss-loader/src!./src/style/classes.css ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/*\r\n* This file is part of the BBjGridExWidget plugin.\r\n* (c) Basis Europe <eu@basis.cloud>\r\n*\r\n* For the full copyright and license information, please view the LICENSE\r\n* file that was distributed with this source code.\r\n*/\r\n\r\n.gw-alignment-cell-right,\r\n.gw-alignment-cell-right .ag-cell-value,\r\n.gw-alignment-cell-right .templateRenderer {\r\n  text-align: right;\r\n  -webkit-box-pack: end;\r\n      -ms-flex-pack: end;\r\n          justify-content: flex-end;\r\n  -webkit-box-flex: 1;\r\n      -ms-flex: 1;\r\n          flex: 1;\r\n}\r\n\r\n.gw-alignment-cell-center,\r\n.gw-alignment-cell-center .ag-cell-value,\r\n.gw-alignment-cell-center .templateRenderer {\r\n  text-align: center;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n  -webkit-box-flex: 1;\r\n      -ms-flex: 1;\r\n          flex: 1;\r\n}\r\n\r\n.gw-alignment-cell-right .boolSwitch,\r\n.gw-alignment-cell-center .boolSwitch {\r\n  text-align: initial;\r\n}\r\n\r\n.gw-alignment-cell-center .boolSwitch__wrapper,\r\n.gw-alignment-cell-right .boolSwitch__wrapper {\r\n  width: auto;\r\n  height: auto;\r\n}\r\n\r\n.gw-alignment-cell-center .boolSwitch__wrapper {\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n}\r\n\r\n.gw-alignment-cell-right .boolSwitch__wrapper {\r\n  -webkit-box-pack: right;\r\n      -ms-flex-pack: right;\r\n          justify-content: right;\r\n}\r\n\r\n.gw-alignment-header-right .ag-header-cell-label {\r\n  -webkit-box-orient: horizontal;\r\n  -webkit-box-direction: reverse;\r\n      -ms-flex-direction: row-reverse;\r\n          flex-direction: row-reverse;\r\n}\r\n\r\n.gw-alignment-header-center .ag-header-cell-label {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-pack: center;\r\n      -ms-flex-pack: center;\r\n          justify-content: center;\r\n}\r\n\r\n.gw-alignment-header-center .ag-header-cell-text {\r\n  margin-left: -16px !important;\r\n}\r\n\r\n.gw-alignment-header-right .ag-cell-label-container,\r\n.gw-alignment-header-center .ag-cell-label-container {\r\n  -webkit-box-orient: horizontal;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: row;\r\n          flex-direction: row;\r\n}\r\n\r\n.gw-tooltip {\r\n  position: absolute;\r\n  overflow: hidden;\r\n  pointer-events: none;\r\n  -webkit-transition: opacity 1s;\r\n  transition: opacity 1s;\r\n  border-radius: 3.1px;\r\n  padding: 10px;\r\n  -webkit-transition: opacity 260ms;\r\n  transition: opacity 260ms;\r\n}\r\n\r\n.gw-tooltip-light {\r\n  background-color: white;\r\n  -webkit-box-shadow: 0 0 6px rgba(0, 0, 0, 0.25);\r\n          box-shadow: 0 0 6px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.gw-tooltip-dark {\r\n  background-color: #1c1f20;\r\n  -webkit-box-shadow: 0 0 6px #5c5c5c;\r\n          box-shadow: 0 0 6px #5c5c5c;\r\n  color: white;\r\n}\r\n\r\n.ag-selection-checkbox.ag-invisible {\r\n  display: none !important;\r\n}\r\n\r\n.ag-cell-wrapper {\r\n  height: 100%;\r\n}\r\n"

/***/ }),

/***/ "./node_modules/postcss-loader/src/index.js!./src/style/suggestion-editor.css":
/*!***************************************************************************!*\
  !*** ./node_modules/postcss-loader/src!./src/style/suggestion-editor.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".autocompleteInputWrapper__input {\r\n  padding-left: 6px;\r\n  border: thin solid var(--ag-input-focus-border-color, rgba(33, 150, 243, 0.4));\r\n  border-radius: 3px;\r\n  background-color: var(--ag-background-color);\r\n  color: inherit;\r\n  outline: none;\r\n}\r\n\r\n.ag-theme-alpine .autocompleteInputWrapper__input,\r\n.ag-theme-balham .autocompleteInputWrapper__input,\r\n.ag-theme-material .autocompleteInputWrapper__input {\r\n  background-color: var(--ag-background-color, #fff);\r\n}\r\n\r\n.ag-theme-alpine-dark .autocompleteInputWrapper__input,\r\n.ag-theme-balham-dark .autocompleteInputWrapper__input {\r\n  background-color: var(--ag-background-color, #2d3436);\r\n}\r\n\r\n.autocomplete {\r\n  background-color: var(--ag-background-color, #fff);\r\n  z-index: 1000;\r\n  -webkit-box-sizing: border-box;\r\n          box-sizing: border-box;\r\n  border: thin solid var(--ag-input-focus-border-color, rgba(33, 150, 243, 0.4));\r\n  border-top: 0;\r\n  border-radius: 3px;\r\n  border-top-left-radius: 0;\r\n  border-top-right-radius: 0;\r\n  overflow: auto;\r\n  -webkit-box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\r\n          box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.autocomplete.dark {\r\n  background-color: var(--ag-background-color, #2d3436);\r\n  color: var(--ag-data-color, var(--ag-foreground-color, #fff));\r\n}\r\n\r\n.autocomplete .suggestion-group {\r\n  background: #eee;\r\n  padding: 5px 6px;\r\n  font-weight: bold;\r\n}\r\n\r\n.autocomplete.dark .suggestion-group {\r\n  background: var(--ag-background-color, #181d1f);\r\n}\r\n\r\n.autocomplete .suggestion-item {\r\n  padding: 10px;\r\n  cursor: pointer;\r\n}\r\n\r\n.autocomplete .suggestion-item:hover {\r\n  background-color: var(--ag-row-hover-color, rgba(33, 150, 244, 0.1));\r\n}\r\n\r\n.autocomplete .suggestion-item.selected {\r\n  background-color: var(\r\n    --ag-selected-row-background-color,\r\n    rgba(33, 150, 243, 0.3)\r\n  );\r\n}\r\n\r\n.autocomplete .empty {\r\n  padding: 8px 6px;\r\n}\r\n\r\n.autocomplete-input-error {\r\n  -webkit-box-shadow: 0 -2px 0 #e91e63 inset;\r\n          box-shadow: 0 -2px 0 #e91e63 inset;\r\n}\r\n\r\n.autocomplete-input-success {\r\n  -webkit-box-shadow: 0 -2px 0 #4caf50 inset;\r\n          box-shadow: 0 -2px 0 #4caf50 inset;\r\n}\r\n"

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target) {
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */
module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  } // blank or null?


  if (!css || typeof css !== "string") {
    return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/"); // convert each url(...)

  /*
  This regular expression is just a way to recursively match brackets within
  a string.
  	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
     (  = Start a capturing group
       (?:  = Start a non-capturing group
           [^)(]  = Match anything that isn't a parentheses
           |  = OR
           \(  = Match a start parentheses
               (?:  = Start another non-capturing groups
                   [^)(]+  = Match anything that isn't a parentheses
                   |  = OR
                   \(  = Match a start parentheses
                       [^)(]*  = Match anything that isn't a parentheses
                   \)  = Match a end parentheses
               )  = End Group
               *\) = Match anything and then a close parens
           )  = Close non-capturing group
           *  = Match anything
        )  = Close capturing group
   \)  = Match a close parens
  	 /gi  = Get all matches, not the first.  Be case insensitive.
   */

  var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
    // strip quotes (if they exist)
    var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
      return $1;
    }).replace(/^'(.*)'$/, function (o, $1) {
      return $1;
    }); // already a full url? no change

    if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
      return fullMatch;
    } // convert the url to a full url


    var newUrl;

    if (unquotedOrigUrl.indexOf("//") === 0) {
      //TODO: should we add protocol?
      newUrl = unquotedOrigUrl;
    } else if (unquotedOrigUrl.indexOf("/") === 0) {
      // path should be relative to the base url
      newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
    } else {
      // path should be relative to current directory
      newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
    } // send back the fixed url(...)


    return "url(" + JSON.stringify(newUrl) + ")";
  }); // send back the fixed css

  return fixedCss;
};

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./src/api/cells.js":
/*!**************************!*\
  !*** ./src/api/cells.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_startEditingCell = gw_startEditingCell;
exports.gw_stopEditing = gw_stopEditing;
exports.gw_tabToNextCell = gw_tabToNextCell;
exports.gw_tabToPreviousCell = gw_tabToPreviousCell;
exports.gw_setFocusedCell = gw_setFocusedCell;
exports.gw_getRangeSelections = gw_getRangeSelections;
exports.gw_parseAddCellRange = gw_parseAddCellRange;
exports.gw_addCellRange = gw_addCellRange;
exports.gw_clearRangeSelection = gw_clearRangeSelection;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

var _utilities2 = __webpack_require__(/*! events/utilities */ "./src/events/utilities.js");

var _rows = __webpack_require__(/*! ./rows */ "./src/api/rows.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var _require = __webpack_require__(/*! deep-parse-json */ "./node_modules/deep-parse-json/index.js"),
    deepParseJson = _require.deepParseJson;
/**
 * Start cell editing
 *
 * @param {String} id The grid's id
 * @param {String|number} row The row index or key
 * @param {String} colKey The column's key
 * @param {String|Number} keyPress  Key press
 * @param {String} charPress
 * @param {String} rowPinned Set to 'top' or 'bottom' to started editing a pinned row
 */


function gw_startEditingCell(id, row, colKey, keyPress, charPress, rowPinned) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var api = options.api;
  var node = api.getRowNode(row) || api.getDisplayedRowAtIndex(row);
  console.log(row, node);
  options.api.startEditingCell({
    rowIndex: node ? node.rowIndex : row,
    keyPress: Number(keyPress),
    colKey: colKey,
    charPress: charPress,
    rowPinned: rowPinned
  });
}
/**
 * Stop cell editing
 *
 * @param {String} id The grid's id
 * @param {Boolean} cancel when true cancel edits , save edits otherwise
 */


function gw_stopEditing(id, cancel) {
  (0, _utilities.gw_getGrid)(id).options.api.stopEditing(cancel);
}
/**
 * Navigates the grid focus to the next cell, as if tabbing.
 *
 * @param {String} id  the grid id
 */


function gw_tabToNextCell(id) {
  (0, _utilities.gw_getGrid)(id).options.api.tabToNextCell();
}
/**
 * Navigates the grid focus to the previous cell, as if shift-tabbing.
 *
 * @param {String} id  the grid id
 */


function gw_tabToPreviousCell(id) {
  (0, _utilities.gw_getGrid)(id).options.api.tabToPreviousCell();
}
/**
 * Set Focus on the given row and column
 *
 * @param {String} id The grid's id
 * @param {String|Number} row The row's index/id
 * @param {String} column The column id
 * @param {String} floating null, 'top', or 'bottom'.
 */


function gw_setFocusedCell(id, row, column) {
  var floating = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var options = (0, _utilities.gw_getGrid)(id).options;
  var grid = (0, _utilities.gw_getGrid)(id); // ignore focus calls if editing

  if (options.api.getEditingCells().length > 0) {
    return;
  }

  if (!JSON.parse((0, _rows.gw_getRows)(id, 'forEachNodeAfterFilterAndSort', '')).length) {
    grid.container.focus();
    return;
  }

  var r, c, f;

  if (row == -1) {
    // try to retain the focus
    var lastFocusedCell = options.api.getFocusedCell();

    if (lastFocusedCell) {
      r = lastFocusedCell.rowIndex;
      c = lastFocusedCell.column.colId;
      f = lastFocusedCell.rowPinned;
    } else {
      r = 0;
      c = options.columnApi.getAllGridColumns()[0].colId;
      f = floating;
    }
  } else {
    r = !row ? 0 : Number.isInteger(+row) ? +row : options.api.getRowNode(row).rowIndex;
    c = column ? column : options.columnApi.getAllGridColumns()[0].colId;
    f = floating;
  }

  (0, _utilities.gw_getGrid)(id).options.api.setFocusedCell(r, c, f);
}
/**
 * Get Range Selections
 *
 * The method will create a range json model for each range which can be parsed in BBj side.
 *
 * @param {Number} id grid's id
 *
 * @returns {String} selected ranges as JSON
 */


function gw_getRangeSelections(id) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var context = options.context;
  var api = options.api;
  var ranges = api.getCellRanges();
  var model = api.getModel();
  var result = [];
  ranges.forEach(function (range) {
    // const start = gw_parseNode(model.getRow(range.startRow.rowIndex), options.context);
    // const end = gw_parseNode(model.getRow(range.endRow.rowIndex), options.context);
    //if (start !== false && end !== false) {
    var columns = range.columns.reduce(function (accumulator, current) {
      if ('ag-Grid-AutoColumn' !== current.colId) {
        accumulator.push(current.colId);
      }

      return accumulator;
    }, []).filter(Boolean);
    var starIndex = Math.min(range.startRow.rowIndex, range.endRow.rowIndex);
    var endIndex = Math.max(range.startRow.rowIndex, range.endRow.rowIndex);
    var rows = [];

    for (var rowIndex = starIndex; rowIndex <= endIndex; rowIndex++) {
      var node = model.getRow(rowIndex);

      if (node) {
        var parsedNode = (0, _utilities2.gw_parseNode)(node, context);

        if (parsedNode) {
          rows.push(parsedNode);
        }
      }
    }

    if (rows.length && columns.length) {
      result.push({
        r: rows,
        c: columns
      });
    } //}

  });
  return JSON.stringify(result);
}
/**
 * Parse the cells range in a format the grid can understand when it is passed
 * to `api.addCellRange`
 *
 * @param {Object} options The grid's options
 * @param {Object} range  bounded or unbounded range model
 */


function gw_parseAddCellRange(options, range) {
  var pr = deepParseJson(JSON.stringify(range));
  var start = !(pr.start || null) ? 0 : Number.isInteger(+pr.start) ? +pr.start : options.api.getRowNode(pr.start).rowIndex;
  var end = !(pr.end || null) ? options.rowData.length - 1 : Number.isInteger(+pr.end) ? +pr.end : options.api.getRowNode(pr.end).rowIndex;
  return {
    rowStartIndex: Math.abs(start),
    rowEndIndex: Math.abs(end),
    columns: pr.columns
  };
}
/**
 * Add new cell range
 *
 * @param {Number} id grid's id
 * @param {Object} range  bounded or unbounded range model
 */


function gw_addCellRange(id, range) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  options.api.addCellRange(gw_parseAddCellRange(options, range));
}
/**
 * Clears the selected range.
 *
 * @param {Number} id grid's id
 */


function gw_clearRangeSelection(id) {
  (0, _utilities.gw_getGrid)(id).options.api.clearRangeSelection();
}

/***/ }),

/***/ "./src/api/charts.js":
/*!***************************!*\
  !*** ./src/api/charts.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_getChartToolbarItems = gw_getChartToolbarItems;
exports.gw_addChartRange = gw_addChartRange;
exports.gw_destroyChart = gw_destroyChart;

var _utilities = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

var _cells = __webpack_require__(/*! api/cells */ "./src/api/cells.js");

/* eslint-disable no-prototype-builtins */

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var _require = __webpack_require__(/*! deep-parse-json */ "./node_modules/deep-parse-json/index.js"),
    deepParseJson = _require.deepParseJson;
/**
 * The array contains references to created charts from BBj.
 * Every reference is a ChartRef object which provides the application with the
 * destroyChart() method that is required when the application wants to dispose the chart.
 */

/**
 * Return the chart toolbar items defined in the grid's context
 *
 * @param {Object} params
 * @returns {Array} array of supported chart items
 */


function gw_getChartToolbarItems(params) {
  return params.api.gridOptionsWrapper.gridOptions.context.chartToolbarItems || [];
}
/**
 * Add new chart range
 *
 * @param {String} id grid's id
 * @param {Object} range  bounded or unbounded range model
 *
 * @return {String} a unique id for the generate chart
 */


function gw_addChartRange(id, range) {
  var grid = (0, _utilities.gw_getGrid)(id);
  var options = grid.options;
  var pr = deepParseJson(JSON.stringify(range));
  pr.cellRange = (0, _cells.gw_parseAddCellRange)(options, pr.cellRange);
  var ref = options.api.createRangeChart(pr);
  var uuid = (0, _utilities.gw_uuid)();
  grid.created_charts = grid.created_charts || {};
  grid.created_charts[uuid] = ref;
  return uuid;
}
/**
 * Destroy created charts
 *
 * Destroy already created chart by id or all created charts
 * when the `uuid` is omitted.
 *
 * @param {String} id grid's id
 * @param {String} uuid The chart's id
 */


function gw_destroyChart(id, uuid) {
  var grid = (0, _utilities.gw_getGrid)(id);

  if (uuid) {
    if (grid.hasOwnProperty('created_charts') && grid.created_charts.hasOwnProperty(uuid)) {
      grid.created_charts[uuid].destroyChart();
    }
  } else {
    if (grid.hasOwnProperty('created_charts')) {
      for (var i in grid.created_charts) {
        if (grid.created_charts.hasOwnProperty(i)) {
          var chart = grid.created_charts[i];
          chart.destroyChart();
        }
      }
    }
  }
}

/***/ }),

/***/ "./src/api/columns.js":
/*!****************************!*\
  !*** ./src/api/columns.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_extendColumnDefinitions = gw_extendColumnDefinitions;
exports.gw_setColumnDefinitions = gw_setColumnDefinitions;
exports.gw_sizeColumnsToFit = gw_sizeColumnsToFit;
exports.gw_autoSizeColumns = gw_autoSizeColumns;
exports.gw_ensureColumnVisible = gw_ensureColumnVisible;
exports.gw_setColumnWidth = gw_setColumnWidth;
exports.gw_pinColumn = gw_pinColumn;
exports.gw_moveColumn = gw_moveColumn;
exports.gw_isShowSelectionCheckbox = gw_isShowSelectionCheckbox;
exports.gw_isHeaderCheckboxSelection = gw_isHeaderCheckboxSelection;
exports.gw_addRowGroupColumn = gw_addRowGroupColumn;
exports.gw_removeRowGroupColumn = gw_removeRowGroupColumn;
exports.gw_getPivotMode = gw_getPivotMode;
exports.gw_setPivotMode = gw_setPivotMode;
exports.gw_addPivotColumns = gw_addPivotColumns;
exports.gw_removePivotColumns = gw_removePivotColumns;
exports.gw_addValueColumns = gw_addValueColumns;
exports.gw_removeValueColumns = gw_removeValueColumns;
exports.gw_setSortModel = gw_setSortModel;
exports.gw_refreshHeader = gw_refreshHeader;
exports.gw_setColumnVisible = gw_setColumnVisible;
exports.gw_addAlignedGrid = gw_addAlignedGrid;
exports.gw_removeAlignedGrid = gw_removeAlignedGrid;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

var _expression = __webpack_require__(/*! ../expression */ "./src/expression.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@Basis.AgGridComponents.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var _require = __webpack_require__(/*! deep-parse-json */ "./node_modules/deep-parse-json/index.js"),
    deepParseJson = _require.deepParseJson;
/**
 * Extend the column definitions
 *
 * Extend the column definitions with options which can not be handled in BBj
 * (ex: attaching callbacks)
 *
 * @param {Array} definitions array of column definitions
 */


function gw_extendColumnDefinitions(definitions) {
  var _loop = function _loop(i) {
    var def = definitions[i];
    def.colId = String(def.colId);
    def.field = String(def.field);
    def.checkboxSelection = def.checkboxSelection || gw_isShowSelectionCheckbox;
    def.headerCheckboxSelection = def.headerCheckboxSelection || gw_isHeaderCheckboxSelection;
    var tooltipValueGetterExpression = def.tooltipValueGetter;

    if (tooltipValueGetterExpression) {
      def.tooltipValueGetter = function (params) {
        return (0, _expression.gw_executeExpression)(tooltipValueGetterExpression, params);
      };
    }

    def.tooltipComponent = 'HTMLTooltip'; // eslint-disable-next-line no-prototype-builtins

    if (def.hasOwnProperty('editable') && typeof def.editable === 'string') {
      var editable = def.editable;

      def.editable = function (params) {
        return (0, _expression.gw_executeExpression)(editable, params);
      };
    } // eslint-disable-next-line no-prototype-builtins


    if (def.hasOwnProperty('rowSpan') && typeof def.rowSpan === 'string') {
      var rowSpan = def.rowSpan;

      def.rowSpan = function (params) {
        return (0, _expression.gw_executeExpression)(rowSpan, params);
      };
    } // eslint-disable-next-line no-prototype-builtins


    if (def.hasOwnProperty('colSpan') && typeof def.colSpan === 'string') {
      var colSpan = def.colSpan;

      def.colSpan = function (params) {
        return (0, _expression.gw_executeExpression)(colSpan, params);
      };
    } // eslint-disable-next-line no-prototype-builtins


    if (def.hasOwnProperty('children')) {
      gw_extendColumnDefinitions(def.children);
    }
  };

  for (var i in definitions) {
    _loop(i);
  }
}
/**
 * Update the column definitions
 *
 * @param {String} id The grid id
 * @param {Array} definitions array of column definitions
 */


function gw_setColumnDefinitions(id, definitions) {
  var grid = (0, _utilities.gw_getGrid)(id);
  var deepParsedDefinitions = deepParseJson(JSON.stringify(definitions));
  gw_extendColumnDefinitions(deepParsedDefinitions);
  grid.options.api.setColumnDefs(deepParsedDefinitions);
  grid.options.columnDefs = deepParsedDefinitions;
}
/**
 * Make the currently visible columns fit the screen
 *
 * @param {String} id The grid's id
 * @param {Number} the width to use to fit all columns in
 */


function gw_sizeColumnsToFit(id, width) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var api = options.api;
  var columnsAPI = options.columnApi;

  if (width) {
    columnsAPI.sizeColumnsToFit(Number(width));
  } else {
    api.sizeColumnsToFit();
  }
}
/**
 * Work out the best width to fit the contents of the cells in the column.
 *
 * @param {String} id The grid's id
 * @param {Boolean} [skipHeader=false] when true indicate that the header content (headerName) should not be considered when
 *                             calculating the width of the column
 * @param {Array|null} [columns=null] an array of columns ids to auto size or null to auto size all columns
 */


function gw_autoSizeColumns(id) {
  var skipHeader = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var columns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var options = (0, _utilities.gw_getGrid)(id).options;
  var columnsAPI = options.columnApi;

  if (!(columns && columns.length)) {
    var allColumnIds = [];
    columnsAPI.getAllColumns().forEach(function (column) {
      allColumnIds.push(column.colId);
    });
    columnsAPI.autoSizeColumns(allColumnIds, Boolean(skipHeader));
  } else {
    columnsAPI.autoSizeColumns(columns, Boolean(skipHeader));
  }
}
/**
 * Ensures the column is visible, scrolling the table if needed.
 *
 * @param {String} id  the grid's id
 * @param {String} columnId  the column id
 */


function gw_ensureColumnVisible(id, columnId) {
  (0, _utilities.gw_getGrid)(id).options.api.ensureColumnVisible(columnId);
}
/**
 * Set Column Width
 *
 * @param {String} id The grid id
 * @param {String} columnId The column id
 * @param {Number|String} width The new column width
 */


function gw_setColumnWidth(id, columnId, width) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.setColumnWidth(columnId, Number(width));
}
/**
 * Pin Column
 *
 * Pin a column to a specific direction
 *
 * @param {String} id The grid id
 * @param {String} columnId The column id
 * @param {String} pin The pin direction
 */


function gw_pinColumn(id, columnId, pin) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.setColumnPinned(columnId, pin);
}
/**
 * Move Column
 *
 * Move column to a specific index
 *
 * @param {String} id The grid id
 * @param {String} columnId The column id
 * @param {Number|String} toIndex The new column index
 */


function gw_moveColumn(id, columnId, toIndex) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.moveColumn(columnId, toIndex);
}
/**
 * Show / Hide selection checkbox based on the first column
 *
 * The function make sure that the selection checkbox is always shown on the
 * first column
 *
 * @param {Object} param
 *
 * @return {Boolean} true when first column , false if not the first column or if the
 *                   grid's `Context.showSelectionCheckbox` is false
 */


function gw_isShowSelectionCheckbox(param) {
  if (!param.context.showSelectionCheckbox) {
    return false;
  }

  var columns = param.columnApi.getAllDisplayedColumns();
  return columns[0] === param.column;
}
/**
 * Show / Hide header selection checkbox based on the first column
 *
 * The function make sure that the header selection checkbox is always shown on the
 * first column
 *
 * @param {Object} param
 *
 * @return {Boolean} true when first column , false if not the first column or if the
 *                   grid's `Context.showHeaderSelectionCheckbox` is false
 */


function gw_isHeaderCheckboxSelection(param) {
  var context = param.api.gridOptionsWrapper.gridOptions.context;

  if (!context.showHeaderSelectionCheckbox) {
    return false;
  }

  var columns = param.columnApi.getAllDisplayedColumns();
  return columns[0] === param.column;
}
/**
 * Enable row grouping for columns
 *
 * @param {String} id the grid id
 * @param {String} columns  a comma separated string of columns
 * @param {Boolean} set  When true , `setRowGroupColumns` will be used , `addRowGroupColumns` otherwise
 */


function gw_addRowGroupColumn(id, columns, set) {
  (0, _utilities.gw_getGrid)(id).options.columnApi[set ? 'setRowGroupColumns' : 'addRowGroupColumns'](columns.split(',').map(function (i) {
    return i.trim();
  }));
}
/**
 * Disable row grouping for columns
 *
 * @param {String} id the grid id
 * @param {String} columns  a comma separated string of columns
 */


function gw_removeRowGroupColumn(id, columns) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.removeRowGroupColumns(columns.split(',').map(function (i) {
    return i.trim();
  }));
}

function gw_getPivotMode(id) {
  return (0, _utilities.gw_getGrid)(id).options.columnApi.isPivotMode();
}
/**
 * Enable / disbale pivot mode
 *
 * @param {String} id the grid id
 * @param {Boolean} mode when true
 */


function gw_setPivotMode(id, mode) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.setPivotMode(!!Number(mode));
}
/**
 * Enable pivot for columns
 *
 * @param {String} id the grid id
 * @param {String} columns  a comma separated string of columns
 * @param {Boolean} set  When true , `addPivotColumns` will be used , `setPivotColumns` otherwise
 */


function gw_addPivotColumns(id, columns, set) {
  (0, _utilities.gw_getGrid)(id).options.columnApi[set ? 'setPivotColumns' : 'addPivotColumns'](columns.split(',').map(function (i) {
    return i.trim();
  }));
}
/**
 * Disable pivot for columns
 *
 * @param {String} id the grid id
 * @param {String} columns  a comma separated string of columns
 */


function gw_removePivotColumns(id, columns) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.removePivotColumns(columns.split(',').map(function (i) {
    return i.trim();
  }));
}
/**
 * Enable value for columns
 *
 * @param {String} id the grid id
 * @param {String} columns  a comma separated string of columns
 */


function gw_addValueColumns(id, columns) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.addValueColumns(columns.split(',').map(function (i) {
    return i.trim();
  }));
}
/**
 * Disable value for columns
 *
 * @param {String} id the grid id
 * @param {String} columns  a comma separated string of columns
 */


function gw_removeValueColumns(id, columns) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.removeValueColumns(columns.split(',').map(function (i) {
    return i.trim();
  }));
}
/**
 * Set the column sorting model
 *
 * @param {String} id the grid id
 * @param {String} model model as json array
 */


function gw_setSortModel(id, model) {
  var asArray = JSON.parse(model);
  var options = (0, _utilities.gw_getGrid)(id).options;
  var parsedModel = [];
  asArray.forEach(function (i) {
    for (var key in i) {
      parsedModel.push({
        colId: key,
        sort: i[key]
      });
    }
  });
  options.columnApi.applyColumnState({
    state: parsedModel,
    applyOrder: false,
    defaultState: options.columnApi.getColumnState()
  });
}
/**
 * Redraws the header. Useful if a column name changes,
 * or something else that changes how the column header is displayed.
 *
 * @param {String} id grid's id
 */


function gw_refreshHeader(id) {
  (0, _utilities.gw_getGrid)(id).options.api.redrawRows();
}
/**
 * Update column viability
 *
 * @param {String} id grid's id
 * @param {String} columns  a comma separated list of column ids
 * @param {Boolean} visible true to make the columns visible , false to hide
 */


function gw_setColumnVisible(id, columns, visible) {
  (0, _utilities.gw_getGrid)(id).options.columnApi.setColumnsVisible(columns.split(','), Boolean(visible));
}
/**
 * Align two grid together
 *
 * @param {String} id The current grid's id
 * @param {String} gridId The target grid's id
 */


function gw_addAlignedGrid(id, gridId) {
  var currentGridOption = (0, _utilities.gw_getGrid)(id).options;

  var register = function register() {
    var targetGridOption = (0, _utilities.gw_getGrid)(gridId).options;
    currentGridOption.alignedGrids.push(targetGridOption);
  };

  try {
    register();
  } catch (err) {
    currentGridOption.alignedGrids.push(gridId);
    window.addEventListener("".concat(gridId, "-ready"), function () {
      var indexOf = currentGridOption.alignedGrids.indexOf(gridId);

      if (indexOf > -1) {
        currentGridOption.alignedGrids.splice(indexOf, 1);
        register();
      }
    });
  }
}
/**
 * Remove aligned grids
 *
 * @param {String} id The current grid's id
 * @param {String} gridId The target grid's id
 */


function gw_removeAlignedGrid(id, gridId) {
  var currentGridOption = (0, _utilities.gw_getGrid)(id).options;
  var alignedGrids = currentGridOption.alignedGrids;

  for (var x = 0; x < alignedGrids.length; x++) {
    var grid = alignedGrids[x];

    if (typeof grid === 'string' && grid === gridId || grid.context.id === gridId) {
      alignedGrids.splice(x, 1);
    }
  }
}

/***/ }),

/***/ "./src/api/context.js":
/*!****************************!*\
  !*** ./src/api/context.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_updateContext = gw_updateContext;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Update context
 *
 * @param {String} id The grid's id
 * @param {String} key The context's key to update
 * @param {String} value  The new context's value
 */
// export function gw_legacyUpdateContext(id, key, value) {
// 	gw_getGrid(id)
// 		.options
// 		.context[key] = JSON.parse(value);
// }

/**
 * Update context
 *
 * @param {String} id The grid's id
 * @param {Object} context The new context object
 */
function gw_updateContext(id, context) {
  (0, _utilities.gw_getGrid)(id).options.context = context;
}

/***/ }),

/***/ "./src/api/index.js":
/*!**************************!*\
  !*** ./src/api/index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _init = __webpack_require__(/*! ./init.js */ "./src/api/init.js");

Object.keys(_init).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _init[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _init[key];
    }
  });
});

var _columns = __webpack_require__(/*! ./columns.js */ "./src/api/columns.js");

Object.keys(_columns).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _columns[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _columns[key];
    }
  });
});

var _rows = __webpack_require__(/*! ./rows.js */ "./src/api/rows.js");

Object.keys(_rows).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _rows[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _rows[key];
    }
  });
});

var _cells = __webpack_require__(/*! ./cells.js */ "./src/api/cells.js");

Object.keys(_cells).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _cells[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _cells[key];
    }
  });
});

var _state = __webpack_require__(/*! ./state.js */ "./src/api/state.js");

Object.keys(_state).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _state[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _state[key];
    }
  });
});

var _toolpanel = __webpack_require__(/*! ./toolpanel.js */ "./src/api/toolpanel.js");

Object.keys(_toolpanel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _toolpanel[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _toolpanel[key];
    }
  });
});

var _statusbar = __webpack_require__(/*! ./statusbar.js */ "./src/api/statusbar.js");

Object.keys(_statusbar).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _statusbar[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _statusbar[key];
    }
  });
});

var _overlays = __webpack_require__(/*! ./overlays.js */ "./src/api/overlays.js");

Object.keys(_overlays).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _overlays[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _overlays[key];
    }
  });
});

var _context = __webpack_require__(/*! ./context.js */ "./src/api/context.js");

Object.keys(_context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _context[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _context[key];
    }
  });
});

var _charts = __webpack_require__(/*! ./charts.js */ "./src/api/charts.js");

Object.keys(_charts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _charts[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _charts[key];
    }
  });
});

var _jss = __webpack_require__(/*! ./jss.js */ "./src/api/jss.js");

Object.keys(_jss).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _jss[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _jss[key];
    }
  });
});

var _utilities = __webpack_require__(/*! ./utilities.js */ "./src/api/utilities.js");

Object.keys(_utilities).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _utilities[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _utilities[key];
    }
  });
});

/***/ }),

/***/ "./src/api/init.js":
/*!*************************!*\
  !*** ./src/api/init.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_init = gw_init;

var _columns = __webpack_require__(/*! ./columns */ "./src/api/columns.js");

var _rows = __webpack_require__(/*! ./rows */ "./src/api/rows.js");

var _menus = __webpack_require__(/*! ./menus */ "./src/api/menus.js");

var _charts = __webpack_require__(/*! ./charts */ "./src/api/charts.js");

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

var _events = __webpack_require__(/*! events */ "./src/events/index.js");

var _template = _interopRequireDefault(__webpack_require__(/*! lodash-es/template */ "./node_modules/lodash-es/template.js"));

var _HTMLTooltip = _interopRequireDefault(__webpack_require__(/*! ../components/HTMLTooltip.js */ "./src/components/HTMLTooltip.js"));

var _SuggestionEditor = _interopRequireDefault(__webpack_require__(/*! ../components/SuggestionEditor.js */ "./src/components/SuggestionEditor.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = __webpack_require__(/*! deep-parse-json */ "./node_modules/deep-parse-json/index.js"),
    deepParseJson = _require.deepParseJson;

function gw_init(options, license, data) {
  if (agGrid.LicenseManager && license) {
    agGrid.LicenseManager.setLicenseKey(license);
  }

  var id = options.context.id;
  var container = (0, _utilities.gw_getDocument)().getElementById(id);
  var containerClone = container.cloneNode(true);
  container.parentNode.replaceChild(containerClone, container);
  container = containerClone; // we make the grid options available as soon as possible

  var grid = (0, _utilities.gw_addGrid)(id, {
    container: container,
    options: options
  }); // TODO: use ag grid destroy

  container.innerHTML = '';
  var parsedOptions = gw_parseOptions(options);
  parsedOptions.rowData = data;
  var instance = new agGrid.Grid(container, parsedOptions);
  grid.instance = instance;
  grid.options = parsedOptions;
  console.log("%c Grid [".concat(id, "] settings : "), 'background: #222; color: #bada55', parsedOptions);
}
/**
 * Parse Options
 *
 * Parse the grid options and return
 * an object which can be passed to the grid
 *
 * @param {Object} options Grid options as Json Object
 *
 * @return {Object} options object
 */


function gw_parseOptions(options) {
  var deepParsedOptions = deepParseJson(JSON.stringify(options));
  var id = deepParsedOptions.context.id;
  var getDataPathTemplate = deepParsedOptions.context.getDataPath || ''; // TODO: do we need to control this setting from BBj ?

  var debounceDuration = 250;

  var finalOptions = _objectSpread(_objectSpread({}, deepParsedOptions), {
    getDocument: function getDocument() {
      return (0, _utilities.gw_getDocument)();
    },
    onCellEditingStarted: function onCellEditingStarted(e) {
      (0, _events.gw_onCellEditingEvent)(id, e);
    },
    onCellEditingStopped: function onCellEditingStopped(e) {
      (0, _events.gw_onCellEditingEvent)(id, e);
    },
    onCellValueChanged: function onCellValueChanged(e) {
      (0, _events.gw_onCellEditingEvent)(id, e);
    },
    onRowEditingStarted: function onRowEditingStarted(e) {
      (0, _events.gw_onRowEditingEvent)(id, e);
    },
    onRowValueChanged: function onRowValueChanged(e) {
      (0, _events.gw_onRowEditingEvent)(id, e);
    },
    onRowEditingStopped: function onRowEditingStopped(e) {
      (0, _events.gw_onRowEditingEvent)(id, e);
    },
    onGridReady: function onGridReady(e) {
      (0, _events.gw_onReadyEvent)(id, e);
    },
    onFilterChanged: function onFilterChanged(e) {
      (0, _events.gw_onFilterChanged)(id, e);
    },
    getRowId: function getRowId(data) {
      return (0, _rows.gw_getRowNodeId)(id, data);
    },
    getContextMenuItems: function getContextMenuItems(params) {
      return (0, _menus.gw_getContextMenu)(id, params);
    },
    getChartToolbarItems: _charts.gw_getChartToolbarItems,
    popupParent: (0, _utilities.gw_getDocument)().body,
    onRowDoubleClicked: (0, _events.gw_debounce)(_events.gw_onRowDoubleClicked, debounceDuration),
    onRowClicked: (0, _events.gw_debounce)(_events.gw_onRowClicked, debounceDuration),
    onCellClicked: (0, _events.gw_debounce)(_events.gw_onCellClickEvent, debounceDuration),
    onCellDoubleClicked: (0, _events.gw_debounce)(_events.gw_onCellClickEvent, debounceDuration),
    onSelectionChanged: (0, _events.gw_debounce)(_events.gw_onSelectionChanged, debounceDuration),
    onRangeSelectionChanged: (0, _events.gw_debounce)(_events.gw_onRangeSelectionChanged, debounceDuration),
    components: {
      BooleanFilter: Basis.AgGridComponents.BooleanFilter,
      BooleanRenderer: Basis.AgGridComponents.BooleanRenderer,
      BooleanEditor: Basis.AgGridComponents.BooleanEditor,
      NumberEditor: Basis.AgGridComponents.NumberEditor,
      TextEditor: Basis.AgGridComponents.TextEditor,
      DateTimeEditor: Basis.AgGridComponents.DateTimeEditor,
      DateTimeFilter: Basis.AgGridComponents.DateTimeFilter,
      ImageRenderer: Basis.AgGridComponents.ImageRenderer,
      TemplateRenderer: Basis.AgGridComponents.TemplateRenderer,
      HTMLTooltip: _HTMLTooltip.default,
      SuggestionEditor: _SuggestionEditor.default
    },
    context: _objectSpread(_objectSpread({}, deepParsedOptions.context), {
      document: (0, _utilities.gw_getDocument)(),
      window: (0, _utilities.gw_getWindow)()
    }),
    alignedGrids: []
  });

  if ( // eslint-disable-next-line no-prototype-builtins
  finalOptions.context.hasOwnProperty('navigateToNextCell') && finalOptions.context.navigateToNextCell) {
    finalOptions.navigateToNextCell = function (params) {
      return (0, _rows.gw_navigateToNextRow)(id, params);
    };
  }

  if (getDataPathTemplate && finalOptions.treeData) {
    var getDataPathTemplateComplied = (0, _template.default)(getDataPathTemplate);

    finalOptions.getDataPath = function (data) {
      return getDataPathTemplateComplied({
        data: data
      });
    };
  } // extend the column definitions


  (0, _columns.gw_extendColumnDefinitions)(finalOptions.columnDefs);
  return finalOptions;
}

/***/ }),

/***/ "./src/api/jss.js":
/*!************************!*\
  !*** ./src/api/jss.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_setStyle = gw_setStyle;
exports.gw_removeStyle = gw_removeStyle;

__webpack_require__(/*! expose-loader?jss!jss/jss.js */ "./node_modules/expose-loader/index.js?jss!./node_modules/jss/jss.js-exposed");

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Add new style
 *
 * Add new style to the document
 *
 * @param {String} selector css selector
 * @param {String} rules Json string for an array of rules
 */
function gw_setStyle(selector, rules) {
  jss.forDocument((0, _utilities.gw_getDocument)()).set(selector, JSON.parse(rules));
}
/**
 * Remove style
 *
 * Remove added style from thes document
 *
 * @param {String} selector css selector
 */


function gw_removeStyle(selector) {
  jss.forDocument((0, _utilities.gw_getDocument)()).remove(selector);
}

/***/ }),

/***/ "./src/api/menus.js":
/*!**************************!*\
  !*** ./src/api/menus.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_getContextMenu = gw_getContextMenu;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

var _utilities2 = __webpack_require__(/*! events/utilities */ "./src/events/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
function gw_getContextMenu(gridId, params) {
  var buildContextMenuAction = function buildContextMenuAction(params, id) {
    return function () {
      var node = (0, _utilities2.gw_parseNodeFromEvent)(params);
      var colId = params.column.colId;
      var value = params.value;
      (0, _utilities2.gw_sendEvent)((0, _utilities.gw_getGrid)(gridId).options.context, {
        type: 'gw.contextmenu',
        detail: JSON.stringify({
          r: node,
          c: colId,
          v: value,
          i: id
        })
      }, id);
    };
  };

  var parseMenu = function parseMenu(menu) {
    menu.forEach(function (item) {
      if (typeof item === 'string') {
        return;
      }

      item['action'] = buildContextMenuAction(params, item.id);

      if (item['cssClasses'] && !Array.isArray(item['cssClasses'])) {
        item['cssClasses'] = item['cssClasses'].split(' ');
      }

      if (item['subMenu']) {
        item['subMenu'] = parseMenu(item['subMenu']);
      }
    });
    return menu;
  };

  return parseMenu((0, _utilities.gw_getGrid)(gridId).options.context.contextMenu);
}

/***/ }),

/***/ "./src/api/overlays.js":
/*!*****************************!*\
  !*** ./src/api/overlays.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_showLoadingOverlay = gw_showLoadingOverlay;
exports.gw_showNoRowsOverlay = gw_showNoRowsOverlay;
exports.gw_hideOverlay = gw_hideOverlay;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Show loading overlay
 *
 * @param {String} id the grid id
 */
function gw_showLoadingOverlay(id) {
  (0, _utilities.gw_getGrid)(id).options.api.showLoadingOverlay();
}
/**
 * Show 'no rows' overlay
 *
 * @param {String} id the grid id
 */


function gw_showNoRowsOverlay(id) {
  (0, _utilities.gw_getGrid)(id).options.api.showNoRowsOverlay();
}
/**
 * Clear all overlays
 *
 * @param {String} id the grid id
 */


function gw_hideOverlay(id) {
  (0, _utilities.gw_getGrid)(id).options.api.hideOverlay();
}

/***/ }),

/***/ "./src/api/rows.js":
/*!*************************!*\
  !*** ./src/api/rows.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_setQuickFilter = gw_setQuickFilter;
exports.gw_expandAll = gw_expandAll;
exports.gw_collapseAll = gw_collapseAll;
exports.gw_ensureIndexVisible = gw_ensureIndexVisible;
exports.gw_navigateToNextRow = gw_navigateToNextRow;
exports.gw_getRowNodeId = gw_getRowNodeId;
exports.gw_setRowData = gw_setRowData;
exports.gw_updateRowData = gw_updateRowData;
exports.gw_setRowsHeight = gw_setRowsHeight;
exports.gw_setRowHeight = gw_setRowHeight;
exports.gw_resetRowHeights = gw_resetRowHeights;
exports.gw_setSelectedRows = gw_setSelectedRows;
exports.gw_selectAll = gw_selectAll;
exports.gw_deselectAll = gw_deselectAll;
exports.gw_getSelectedRows = gw_getSelectedRows;
exports.gw_getSelectedRow = gw_getSelectedRow;
exports.gw_getRow = gw_getRow;
exports.gw_getRows = gw_getRows;
exports.gw_redrawRows = gw_redrawRows;
exports.gw_setPinnedTopRowData = gw_setPinnedTopRowData;
exports.gw_setPinnedBottomRowData = gw_setPinnedBottomRowData;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

var _utilities2 = __webpack_require__(/*! events/utilities */ "./src/events/utilities.js");

var _expression = __webpack_require__(/*! ../expression */ "./src/expression.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@Basis.AgGridComponents.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
function gw_setQuickFilter(id, filter) {
  (0, _utilities.gw_getGrid)(id).options.api.setQuickFilter(filter);
}

function gw_expandAll(id) {
  (0, _utilities.gw_getGrid)(id).options.api.expandAll();
}

function gw_collapseAll(id) {
  (0, _utilities.gw_getGrid)(id).options.api.collapseAll();
}
/**
 * Ensures the row index is visible by vertically scrolling the grid
 *
 * @param {String} id  the grid's id
 * @param {String|Number} index the row index or key
 * @param {String} position {'top', 'middle', 'bottom', undefined/null}
 */


function gw_ensureIndexVisible(id, index, position) {
  var api = (0, _utilities.gw_getGrid)(id).options.api;
  var node = api.getRowNode(index);

  if (node) {
    api.ensureNodeVisible(node, position);
  } else {
    api.ensureIndexVisible(Number(index), position);
  }
}

function gw_navigateToNextRow(id, params) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var previousCell = params.previousCellPosition;
  var suggestedNextCell = params.nextCellPosition;
  var KEY_UP = 'ArrowUp';
  var KEY_DOWN = 'ArrowDown';
  var KEY_LEFT = 'ArrowLeft';
  var KEY_RIGHT = 'ArrowRight';

  switch (params.key) {
    case KEY_DOWN:
      // set selected cell on current cell + 1
      if (suggestedNextCell && !suggestedNextCell.rowPinned) {
        if (previousCell.rowPinned) {
          var row = options.api.getDisplayedRowAtIndex(options.api.getFirstDisplayedRow());

          if (row) {
            row.setSelected(true);
          }
        } else {
          options.api.forEachNode(function (node) {
            if (previousCell.rowIndex + 1 === node.rowIndex) {
              node.setSelected(true);
            }
          });
        }
      }

      return suggestedNextCell;

    case KEY_UP:
      // set selected cell on current cell - 1
      if (suggestedNextCell && !suggestedNextCell.rowPinned) {
        if (previousCell.rowPinned) {
          var _row = options.api.getDisplayedRowAtIndex(options.api.getLastDisplayedRow());

          if (_row) {
            _row.setSelected(true);
          }
        } else {
          options.api.forEachNode(function (node) {
            if (previousCell.rowIndex - 1 === node.rowIndex) {
              node.setSelected(true);
            }
          });
        }
      }

      return suggestedNextCell;

    case KEY_LEFT:
    case KEY_RIGHT:
      return suggestedNextCell;

    default:
      throw new Error('You have super strange keyboard');
  }
}
/**
 * Returns a row based on `getRowNodeId` config defined in the grid context
 *
 * @param {String} id the grid's id
 * @param {Object} grid  the grid object
 */


function gw_getRowNodeId(_id, grid) {
  var rowNodeId = grid.api.gridOptionsWrapper.gridOptions.context.getRowNodeId;
  return grid.data[rowNodeId];
}
/**
 * Update the grid's data set
 *
 * @param {String} id the grid's id
 * @param {Object} json json object which contains the new dataset to update the grid
 */


function gw_setRowData(id, json) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  options.api.setRowData(json);
  options.rowData = json;
}
/**
 * Update the grid with a transaction object
 *
 * @param {String} id  the grid id
 * @param {Object} transaction
 */


function gw_updateRowData(id, transaction, batchUpdate) {
  var options = (0, _utilities.gw_getGrid)(id).options;

  if (transaction.remove.length) {
    var items = [];
    transaction.remove.forEach(function (index) {
      items.push(options.api.getRowNode(index).data);
    });
    transaction.remove = items;
  }

  if (transaction.add.length) {
    transaction.add = transaction.add.reverse();
  }

  if (!batchUpdate) {
    options.api.applyTransaction(transaction);
  } else {
    options.api.applyTransactionAsync(transaction);
  }
}
/**
 * Set the height of all rows
 *
 * @param {String} id the grid id
 * @param {Number} height the row height
 */


function gw_setRowsHeight(id, height) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var api = options.api;
  api.forEachNode(function (row) {
    row.setRowHeight(height);
  });
  api.onRowHeightChanged();
}
/**
 * Set the given row height
 *
 * @param {String} id the grid id
 * @param {Number|String} index the row index or key
 * @param {Number} height the new height
 */


function gw_setRowHeight(id, index, height) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var api = options.api;
  var row = api.getRowNode(index) || api.getDisplayedRowAtIndex(index);

  if (row) {
    row.setRowHeight(height);
    options.api.onRowHeightChanged();
  } else {
    console.warn("Failed to set height for row ".concat(index, ". Row cannot be found"));
  }
}
/**
 * Reset the row height
 *
 * @param {String} id  the grid id
 */


function gw_resetRowHeights(id) {
  (0, _utilities.gw_getGrid)(id).options.api.resetRowHeights();
}
/**
 * Select row or more based on the row id or index
 *
 * @param {String} id the grid's id
 * @param {Array} rows an array of row keys and indexes to select
 */


function gw_setSelectedRows(id, rows) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var api = options.api;
  api.forEachNodeAfterFilterAndSort(function (node) {
    if (rows.indexOf(String(node.rowIndex)) > -1 || rows.indexOf(String(node.id)) > -1) {
      node.setSelected(true);
      node.expanded = true;
    }
  });
  api.onGroupExpandedOrCollapsed();
}

function gw_selectAll(id, filtered) {
  var options = (0, _utilities.gw_getGrid)(id).options;

  if (1 === filtered) {
    options.api.selectAllFiltered();
  } else {
    options.api.selectAll();
  }
}

function gw_deselectAll(id, filtered) {
  var options = (0, _utilities.gw_getGrid)(id).options;

  if (1 === filtered) {
    options.api.deselectAllFiltered();
  } else {
    options.api.deselectAll();
  }
}
/**
 * Get the current selected rows
 *
 * @param {Number} id grid's id
 *
 * @returns {String}  selected rows as JSON
 */


function gw_getSelectedRows(id) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var nodes = options.api.getSelectedNodes();
  var parsed = [];
  nodes.forEach(function (node) {
    parsed.push((0, _utilities2.gw_parseNode)(node, options.context));
  });
  return JSON.stringify(parsed);
}
/**
 * Get the last selected row
 *
 * @param {Number} id grid's id
 *
 * @returns {String} selected row as JSON
 */


function gw_getSelectedRow(id) {
  var rows = JSON.parse(gw_getSelectedRows(id));

  if (rows.length) {
    return JSON.stringify(rows[rows.length - 1]);
  }

  return '';
}
/**
 * Get the row by its id or index
 *
 * @param {String} id grid's id
 * @param {String|Number} index
 *
 * @return {String} row as JSON
 */


function gw_getRow(id, index) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  return JSON.stringify((0, _utilities2.gw_parseNode)(options.api.getRowNode(index), options.context));
}
/**
 * Get rows from the grid
 *
 * @param {String} id The grid's id
 * @param {String} phase The rows phase
 * @param {String} filterExpression A filter expression
 *
 * @return {String} Json stringified array of rows
 */


function gw_getRows(id, phase, filterExpression) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var parsed = [];
  options.api[phase](function (node) {
    if (!node.group) {
      if (filterExpression) {
        var canProcess = (0, _expression.gw_executeExpression)(filterExpression, {
          value: node.data,
          context: options.context,
          oldValue: null,
          newValue: null,
          node: node,
          data: node.data,
          colDef: null,
          rowIndex: node.rowIndex,
          api: node.gridApi,
          columnApi: node.columnApi,
          getValue: function getValue() {
            return node.data;
          },
          column: null,
          columnGroup: // eslint-disable-next-line no-prototype-builtins
          node.hasOwnProperty('parent') && node.parent.hasOwnProperty('key') ? node.parent.key : ''
        });

        if (canProcess) {
          parsed.push((0, _utilities2.gw_parseNode)(node, options.context));
        }
      } else {
        parsed.push((0, _utilities2.gw_parseNode)(node, options.context));
      }
    }
  });
  return JSON.stringify(parsed);
}
/**
 * Gets the grid to remove a row from the DOM and recreate it again from scratch.
 *
 * @param {String} id grid's id
 */


function gw_redrawRows(id) {
  (0, _utilities.gw_getGrid)(id).options.api.redrawRows();
}
/**
 * Pin an array of tow to the top of the grid
 *
 * @param {String} id the grid's id
 * @param {Array} data array of rows
 */


function gw_setPinnedTopRowData(id, data) {
  (0, _utilities.gw_getGrid)(id).options.api.setPinnedTopRowData(data);
}
/**
 * Pin an array of tow to the bottom of the grid
 *
 * @param {String} id the grid's id
 * @param {Array} data array of rows
 */


function gw_setPinnedBottomRowData(id, data) {
  (0, _utilities.gw_getGrid)(id).options.api.setPinnedBottomRowData(data);
}

/***/ }),

/***/ "./src/api/state.js":
/*!**************************!*\
  !*** ./src/api/state.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_setState = gw_setState;
exports.gw_getState = gw_getState;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
function gw_setState(id, state) {
  var options = (0, _utilities.gw_getGrid)(id).options;

  try {
    options.columnApi.applyColumnState({
      state: state.columns,
      applyOrder: true
    });
    options.columnApi.setColumnGroupState(state.groups);
    options.api.setFilterModel(state.filters);
  } catch (e) {
    console.warn('Failed to parse grid state from JSON', e);
  }
}

function gw_getState(id) {
  var options = (0, _utilities.gw_getGrid)(id).options;
  var columns = options.columnApi.getColumnState();
  var groups = options.columnApi.getColumnGroupState();
  var filters = options.api.getFilterModel();

  try {
    return JSON.stringify({
      columns: columns,
      groups: groups,
      filters: filters
    });
  } catch (e) {
    console.warn('Failed to convert the grid state to json', e);
  }
}

/***/ }),

/***/ "./src/api/statusbar.js":
/*!******************************!*\
  !*** ./src/api/statusbar.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_setStatusbarComponentVisibility = gw_setStatusbarComponentVisibility;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
function gw_setStatusbarComponentVisibility(id, key, visibility) {
  (0, _utilities.gw_getGrid)(id).options.api.getStatusPanel(key).setVisible(Boolean(visibility));
}

/***/ }),

/***/ "./src/api/toolpanel.js":
/*!******************************!*\
  !*** ./src/api/toolpanel.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_setSideBarVisible = gw_setSideBarVisible;
exports.gw_openToolpanel = gw_openToolpanel;
exports.gw_closeToolpanel = gw_closeToolpanel;
exports.gw_setFunctionsReadOnly = gw_setFunctionsReadOnly;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
function gw_setSideBarVisible(id, value) {
  (0, _utilities.gw_getGrid)(id).options.api.setSideBarVisible(Boolean(value));
}

function gw_openToolpanel(gridId, toolpanelId) {
  (0, _utilities.gw_getGrid)(gridId).options.api.openToolPanel(toolpanelId);
}

function gw_closeToolpanel(gridId, toolpanelId) {
  (0, _utilities.gw_getGrid)(gridId).options.api.closeToolPanel(toolpanelId);
}

function gw_setFunctionsReadOnly(id, readonly) {
  (0, _utilities.gw_getGrid)(id).options.api.setFunctionsReadOnly(Boolean(readonly));
}

/***/ }),

/***/ "./src/api/utilities.js":
/*!******************************!*\
  !*** ./src/api/utilities.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_getDocument = gw_getDocument;
exports.gw_getWindow = gw_getWindow;
exports.gw_escape = gw_escape;
exports.gw_uuid = gw_uuid;
exports.gw_getGrid = gw_getGrid;
exports.gw_addGrid = gw_addGrid;

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@Basis.AgGridComponents.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Get document
 *
 * Get the document instance according to the current BBj env
 *
 * @return {Object} Document instance
 */
function gw_getDocument() {
  return typeof $doc !== 'undefined' ? $doc : document;
}
/**
 * Get window
 *
 * Get the window instance according to the current BBj env
 *
 * @return {Object} Window instance
 */


function gw_getWindow() {
  return typeof $wnd !== 'undefined' ? $wnd : window;
}
/**
 * Escape Value
 *
 * Change null and undefined to empty string
 *
 * @param {*} value
 *
 * @return {String} escaped value
 */


function gw_escape(value) {
  return value !== null && value !== undefined ? value : '';
}
/**
 * Generate a unique uuid
 * @see https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
 */


function gw_uuid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
}
/**
 * Get Grid
 *
 * Retrieve the grid instance from `window.BBjGridExWidget` array
 *
 * @param {String} id The grid's id
 *
 * @return {Object|null} The grid's instance ofr null
 * @throws TypeError when the grid instance is not found
 */


function gw_getGrid(id) {
  window.BBjGridExWidget = window.BBjGridExWidget || {};
  var grid = window.BBjGridExWidget[id] || null;

  if (!grid) {
    var registeredGrids = JSON.stringify(Object.keys(window.BBjGridExWidget)); //getFuncArgs(func).forEach((key, i) => argsObj[key] = args[i]);

    throw new TypeError("\n\n[Grid Not Found] The method asked for non-existent grid instance.\n-------------------------------------------------------------------\nRequired Grid Id : ".concat(id, "   \nRegistered Grids : ").concat(registeredGrids, "\n"));
  }

  return grid;
}
/**
 * Add Grid
 *
 * Store a new grid instance by in the `window.BBjGridExWidget` array
 *
 * @param {String} id The grid's id
 * @param {Object} options  The grid's options
 *
 * @return {Object} Stored grid
 */


function gw_addGrid(id, options) {
  window.BBjGridExWidget = window.BBjGridExWidget || {};
  window.BBjGridExWidget[id] = options;
  return gw_getGrid(id);
}

/***/ }),

/***/ "./src/components/HTMLTooltip.js":
/*!***************************************!*\
  !*** ./src/components/HTMLTooltip.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * An improved tooltip component which supports HTML and behaves the same in both GUI and BUI
 *
 * @author Hyyan Abo Fakher
 */
var HTMLTooltip = /*#__PURE__*/function () {
  function HTMLTooltip() {
    _classCallCheck(this, HTMLTooltip);
  }

  _createClass(HTMLTooltip, [{
    key: "init",

    /**
     * Construct the component
     *
     * @param {Object} params the tooltip component params
     */
    value: function init(params) {
      var eGui = this.eGui = document.createElement('div');
      var tooltipValueGetter = params.colDef.tooltipValueGetter;
      var isHeader = params.rowIndex === undefined;
      var isGroupedHeader = isHeader && !!params.colDef.children;
      console.log(params); // eslint-disable-next-line no-prototype-builtins

      var data = !isHeader && !isGroupedHeader ? params.api.getDisplayedRowAtIndex(params.rowIndex).data : null;
      var theme = params.api.gridOptionsWrapper.eGridDiv.className.endsWith('dark') ? 'gw-tooltip-dark' : 'gw-tooltip-light';
      var tooltipField = params.colDef.tooltipField ? // eslint-disable-next-line no-prototype-builtins
      data && data.hasOwnProperty(params.colDef.tooltipField) ? data[params.colDef.tooltipField] : null : null;

      var passedParams = _objectSpread(_objectSpread(_objectSpread({}, params), {
        data: data
      }), {
        isHeader: isHeader,
        isGroupedHeader: isGroupedHeader,
        tooltipField: tooltipField
      });

      eGui.classList.add('gw-tooltip', theme);
      eGui.innerHTML = isHeader || isGroupedHeader ? params.value : tooltipField ? tooltipField : tooltipValueGetter ? tooltipValueGetter(passedParams) : params.value;
    }
    /**
     * Get the gui Instance
     *
     * @return {HTMLElement}
     */

  }, {
    key: "getGui",
    value: function getGui() {
      return this.eGui;
    }
  }]);

  return HTMLTooltip;
}();

var _default = HTMLTooltip;
exports.default = _default;

/***/ }),

/***/ "./src/components/SuggestionEditor.js":
/*!********************************************!*\
  !*** ./src/components/SuggestionEditor.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _autocompleter = _interopRequireDefault(__webpack_require__(/*! autocompleter */ "./node_modules/autocompleter/autocomplete.js"));

var _template = _interopRequireDefault(__webpack_require__(/*! lodash-es/template */ "./node_modules/lodash-es/template.js"));

var _utilities = __webpack_require__(/*! events/utilities */ "./src/events/utilities.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * An autocomplete cell editor written specifically to BBjGridExWidget
 *
 * @author Hyyan Abo Fakher
 */
var SuggestionEditor = /*#__PURE__*/function () {
  function SuggestionEditor() {
    _classCallCheck(this, SuggestionEditor);
  }

  _createClass(SuggestionEditor, [{
    key: "init",

    /**
     * Initialize the component
     *
     * @param {Object} params
     *
     * @return void
     */
    value: function init(params) {
      var pattern = params.textPattern || null;
      var required = params.textRequired || false;
      var title = params.textTitle || null;
      var debounceWaitMs = params.debounceWaitMs || 250;
      var startValue;
      this._focusAfterAttached = params.cellStartedEdit;

      if (this._focusAfterAttached) {
        var keyPressBackspaceOrDelete = params.keyPress == 32 || params.keyPress == 46; // space // delete

        if (keyPressBackspaceOrDelete) {
          startValue = '';
        } else if (params.charPress) {
          startValue = params.charPress;
        } else {
          startValue = params.value;

          if (params.keyPress != 113) {
            //F2
            this._highlightAllOnFocus = true;
          }
        }
      } else {
        startValue = params.value;
      }

      this._params = params;
      this._gui = document.createElement('div');
      this._gui.className = 'autocompleteInputWrapper ag-cell-edit-wrapper';
      this._gui.tabIndex = '0';
      this._gui.innerHTML =
      /* html */
      "\n    <div class=\"ag-cell-editor ag-labeled ag-label-align-left ag-text-field ag-input-field\">\n      <div class=\"ag-wrapper ag-input-wrapper ag-text-field-input-wrapper\">\n      </div>\n    </div>\n    "; // input

      this._input = document.createElement('input');
      this._input.className = 'autocompleteInputWrapper__input ag-cell-edit-input ag-input-field-input ag-text-field-input';
      this._input.type = 'text';
      this._input.value = startValue;
      this._input.tabIndex = 0;

      this._gui.querySelector('.ag-input-wrapper').appendChild(this._input);

      if (pattern !== null) {
        this._input.setAttribute('pattern', pattern);
      }

      if (required === true) {
        this._input.setAttribute('required', 'required');
      }

      if (title !== null && title !== 'default') {
        this._input.title = title;
      }

      this._onChange = this._onChange.bind(this);

      this._input.addEventListener('input', this._onChange);

      this._input.addEventListener('change', this._onChange); // setup the autocomplete component


      this._renderItemTemplate = this._params.itemTemplate ? (0, _template.default)(this._params.itemTemplate) : '';
      this._renderGroupTemplate = this._params.groupTemplate ? (0, _template.default)(this._params.groupTemplate) : '';
      console.log(params);
      this._autocomplete = (0, _autocompleter.default)({
        input: this._input,
        debounceWaitMs: debounceWaitMs,
        // without this option enabled , the list wont be closed in GUI
        preventSubmit: true,
        fetch: this._onAutocompleteFetch.bind(this),
        onSelect: this._onAutocompleteSelect.bind(this),
        renderGroup: this._onAutocompleteRenderGroup.bind(this),
        render: this._onAutocompleteRenderItem.bind(this),
        customize: this._onAutocompleteCustomize.bind(this),
        emptyMsg: this._params.emptyMessage || null,
        minLength: this._params.minLength || 2,
        showOnFocus: this._params.showOnFocus || false,
        className: params.api.gridOptionsWrapper.eGridDiv.className.endsWith('dark') ? 'dark' : 'light'
      });
    }
    /**
     * Return the DOM element of the component, this is what the grid puts into the cell
     *
     * @return {HTMLElement}
     */

  }, {
    key: "getGui",
    value: function getGui() {
      return this._gui;
    }
    /**
     * Gets called once after GUI is attached to DOM.
     *
     * Make sure container is always focused to listen to key changes
     */

  }, {
    key: "afterGuiAttached",
    value: function afterGuiAttached() {
      if (this._highlightAllOnFocus) {
        this._input.select();
      } else {
        if (this._focusAfterAttached) {
          this.focusIn();
        }
      }
    }
    /**
     * Get The component value
     *
     * @return {Number}
     */

  }, {
    key: "getValue",
    value: function getValue() {
      return this._input.value;
    }
    /**
     * If doing full row edit, then gets called when tabbing into the cell.
     */

  }, {
    key: "focusIn",
    value: function focusIn() {
      this._input.focus();
    }
    /**
     * Gets called once when editing is finished (eg if enter is pressed).
     *
     * @returns {Boolean} true when the result of the edit will be ignored. false otherwise
     */

  }, {
    key: "isCancelAfterEnd",
    value: function isCancelAfterEnd() {
      var _this = this;

      var allowCustomValues = this._params.allowCustomValues || false;

      var isValid = this._validateInput(this._input);

      if (isValid && allowCustomValues === false && this._lastFetchedData) {
        var filteredItems = this._lastFetchedData.filter(function (x) {
          return x.value === _this._input.value;
        });

        isValid = filteredItems.length === 1;
      }

      return !isValid;
    }
    /**
     * Gets called when the component is destroyed.
     *
     * Clear the registered event listeners and destroy the autocomplete
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._input.removeEventListener('input', this._onChange);

      this._input.removeEventListener('change', this._onChange);

      this._autocomplete.destroy();
    }
    /**
     * This method will be called to prepare suggestions and then pass them to autocomplete.
     *
     * @param {String} text the text in the input field
     * @param {Function} update a callback function that must be called after suggestions are prepared
     *
     * @returns {Boolean} false when the request is ignored , false otherwise
     */

  }, {
    key: "_onAutocompleteFetch",
    value: function _onAutocompleteFetch(text, update) {
      var _this2 = this;

      var suppressSuggestionOnInvalidInput = this._params.suppressSuggestionOnInvalidInput || false;

      var isValid = this._validateInput(this._input);

      if (suppressSuggestionOnInvalidInput && !isValid) {
        return false;
      }

      var id = this._params.eventId;
      document.addEventListener(id, function (event) {
        _this2._lastFetchedData = event.detail;
        update(event.detail);
      });
      window.basisDispatchCustomEvent(this._params.eGridCell, {
        type: 'gw.suggestion',
        detail: JSON.stringify({
          id: id,
          text: text,
          column: this._params.colDef.field,
          row: (0, _utilities.gw_parseNode)(this._params.node, this._params.api.gridOptionsWrapper.gridOptions.context)
        })
      });
      return true;
    }
    /**
     * This method will be called when user choose an item in autocomplete.
     *
     * @param {Object} item The selected item
     */

  }, {
    key: "_onAutocompleteSelect",
    value: function _onAutocompleteSelect(item) {
      this._input.value = item.value;
    }
    /**
     * This overrides the rendering function of autocomplete items.
     *
     * It will be called for each suggestion
     *
     * @param {Object} item suggestion object
     * @param {String} currentValue The current input field value
     *
     * @returns {HTMLElement}
     */

  }, {
    key: "_onAutocompleteRenderItem",
    value: function _onAutocompleteRenderItem(item, currentValue) {
      var div = document.createElement('div');
      div.className = 'suggestion-item';

      if (this._renderItemTemplate) {
        div.innerHTML = this._renderItemTemplate({
          item: item,
          currentValue: currentValue
        });
      } else {
        div.innerHTML = item.label;
      }

      return div;
    }
    /**
     * This overrides the rendering function of autocomplete groups.
     *
     * It will be called for each group
     *
     * @param {String} groupName The group name
     * @param {String} currentValue The current input field value
     *
     * @returns {HTMLElement}
     */

  }, {
    key: "_onAutocompleteRenderGroup",
    value: function _onAutocompleteRenderGroup(groupName, currentValue) {
      var div = document.createElement('div');
      div.className = 'suggestion-group';

      if (this._renderGroupTemplate) {
        div.innerHTML = this._renderGroupTemplate({
          groupName: groupName,
          currentValue: currentValue
        });
      } else {
        div.innerHTML = groupName;
      }

      return div;
    }
    /**
     * Hook on the autocomplete container render and change the width and the
     * height according to the options
     *
     * @param {HTMLElement} input
     * @param {HTMLElement} inputRect
     * @param {HTMLElement} container
     * @param {Number} maxHeight
     */
    // eslint-disable-next-line no-unused-vars

  }, {
    key: "_onAutocompleteCustomize",
    value: function _onAutocompleteCustomize(input, inputRect, container, maxHeight) {
      if (this._params.width) {
        container.style.width = "".concat(this._params.width, "px");
      }

      if (this._params.height) {
        container.style.height = "".concat(this._params.height, "px");
      }

      if (maxHeight < 100) {
        container.style.top = '';
        container.style.bottom = window.innerHeight - inputRect.bottom + input.offsetHeight + 'px';
        container.style.maxHeight = this._params.height ? "".concat(this._params.height, "px") : '200px';
      }
    }
    /**
     * List to the input changes and validate it
     *
     * @param {Event} The event object
     *
     * @returns {Boolean} true when valid , false otherwise
     */

  }, {
    key: "_onChange",
    value: function _onChange(event) {
      return this._validateInput(event.target);
    }
    /**
     * Do validate the given input element
     *
     * @param {HTMLInputElement} input input element
     *
     * @return {Boolean} true when valid , false otherwise
     */

  }, {
    key: "_validateInput",
    value: function _validateInput(input) {
      var isValid = input.checkValidity();

      if (!isValid) {
        input.classList.add('autocomplete-input-error');
        input.classList.remove('autocomplete-input-success');
      } else {
        input.classList.remove('autocomplete-input-error');
        input.classList.add('autocomplete-input-success');
      }

      return isValid;
    }
  }]);

  return SuggestionEditor;
}();

var _default = SuggestionEditor;
exports.default = _default;

/***/ }),

/***/ "./src/events/constants.js":
/*!*********************************!*\
  !*** ./src/events/constants.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GW_EVENT_READY = exports.GW_EVENT_FILTER_CHANGED = exports.GW_EVENT_KEYPRESS = exports.GW_EVENT_RANGE_SELECTION_CHANGED = exports.GW_EVENT_GRID_STATE_CHANGE = exports.GW_EVENT_ROW_VALUE_CHANGED = exports.GW_EVENT_ROW_EDITING_STOPPED = exports.GW_EVENT_ROW_EDITING_STARTED = exports.GW_EVENT_CELL_VALUE_CHANGED = exports.GW_EVENT_CELL_EDITING_STOPPED = exports.GW_EVENT_CELL_EDITING_STARTED = exports.GW_EVENT_CELL_DOUBLE_CLICK = exports.GW_EVENT_CELL_CLICK = exports.GW_EVENT_ROW_DOUBLE_CLICK = exports.GW_EVENT_ROW_CLICK = exports.GW_EVENT_ROW_SELECT = void 0;

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
// selection constants
var GW_EVENT_ROW_SELECT = 69;
exports.GW_EVENT_ROW_SELECT = GW_EVENT_ROW_SELECT;
var GW_EVENT_ROW_CLICK = 5011;
exports.GW_EVENT_ROW_CLICK = GW_EVENT_ROW_CLICK;
var GW_EVENT_ROW_DOUBLE_CLICK = 52;
exports.GW_EVENT_ROW_DOUBLE_CLICK = GW_EVENT_ROW_DOUBLE_CLICK;
var GW_EVENT_CELL_CLICK = 5001;
exports.GW_EVENT_CELL_CLICK = GW_EVENT_CELL_CLICK;
var GW_EVENT_CELL_DOUBLE_CLICK = 5002; // editing constants

exports.GW_EVENT_CELL_DOUBLE_CLICK = GW_EVENT_CELL_DOUBLE_CLICK;
var GW_EVENT_CELL_EDITING_STARTED = 5003;
exports.GW_EVENT_CELL_EDITING_STARTED = GW_EVENT_CELL_EDITING_STARTED;
var GW_EVENT_CELL_EDITING_STOPPED = 5004;
exports.GW_EVENT_CELL_EDITING_STOPPED = GW_EVENT_CELL_EDITING_STOPPED;
var GW_EVENT_CELL_VALUE_CHANGED = 5005;
exports.GW_EVENT_CELL_VALUE_CHANGED = GW_EVENT_CELL_VALUE_CHANGED;
var GW_EVENT_ROW_EDITING_STARTED = 5006;
exports.GW_EVENT_ROW_EDITING_STARTED = GW_EVENT_ROW_EDITING_STARTED;
var GW_EVENT_ROW_EDITING_STOPPED = 5007;
exports.GW_EVENT_ROW_EDITING_STOPPED = GW_EVENT_ROW_EDITING_STOPPED;
var GW_EVENT_ROW_VALUE_CHANGED = 5012; // state constants

exports.GW_EVENT_ROW_VALUE_CHANGED = GW_EVENT_ROW_VALUE_CHANGED;
var GW_EVENT_GRID_STATE_CHANGE = 5008; // range selection

exports.GW_EVENT_GRID_STATE_CHANGE = GW_EVENT_GRID_STATE_CHANGE;
var GW_EVENT_RANGE_SELECTION_CHANGED = 5009; // keyboard events

exports.GW_EVENT_RANGE_SELECTION_CHANGED = GW_EVENT_RANGE_SELECTION_CHANGED;
var GW_EVENT_KEYPRESS = 5010; // filters

exports.GW_EVENT_KEYPRESS = GW_EVENT_KEYPRESS;
var GW_EVENT_FILTER_CHANGED = 5013; // ready

exports.GW_EVENT_FILTER_CHANGED = GW_EVENT_FILTER_CHANGED;
var GW_EVENT_READY = 5014;
exports.GW_EVENT_READY = GW_EVENT_READY;

/***/ }),

/***/ "./src/events/editing.js":
/*!*******************************!*\
  !*** ./src/events/editing.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_onCellEditingEvent = gw_onCellEditingEvent;
exports.gw_onRowEditingEvent = gw_onRowEditingEvent;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _utilities2 = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

var _constants = __webpack_require__(/*! ./constants */ "./src/events/constants.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CELL_EDITING_EVENTS_MAP = {
  cellEditingStarted: _constants.GW_EVENT_CELL_EDITING_STARTED,
  cellEditingStopped: _constants.GW_EVENT_CELL_EDITING_STOPPED,
  cellValueChanged: _constants.GW_EVENT_CELL_VALUE_CHANGED
};
var ROW_EDITING_EVENTS_MAP = {
  rowEditingStarted: _constants.GW_EVENT_ROW_EDITING_STARTED,
  rowEditingStopped: _constants.GW_EVENT_ROW_EDITING_STOPPED,
  rowValueChanged: _constants.GW_EVENT_ROW_VALUE_CHANGED
};
/**
 * An handler for the grid `cellEditingStarted` , `cellEditingStopped` and
 * `cellValueChanged` events
 *
 * @param {String} id The grid's id
 * @param {Object} e  The event payload
 *
 * @listens agGrid.cellEditingStarted
 * @listens agGrid.cellEditingStopped
 * @listens agGrid.cellValueChanged
 *
 * @fires gw.cellEditingStarted
 * @fires gw.cellEditingStopped
 * @fires gw.cellValueChanged
 */

function gw_onCellEditingEvent(id, e) {
  var value = e.hasOwnProperty('newValue') ? (0, _utilities2.gw_escape)(e.newValue) : (0, _utilities2.gw_escape)(e.value);
  var oldValue = e.hasOwnProperty('oldValue') ? (0, _utilities2.gw_escape)(e.oldValue) : e.hasOwnProperty('newValue') ? (0, _utilities2.gw_escape)(e.newValue) : (0, _utilities2.gw_escape)(e.value);

  if (value == oldValue && e.type === 'cellValueChanged') {
    return;
  }

  var parsed = (0, _utilities.gw_parseNodeFromEvent)(e);
  var type = e.type;
  var colId = e.column.colId;

  if (parsed) {
    (0, _utilities.gw_sendEvent)((0, _utilities2.gw_getGrid)(id).options.context, {
      type: "gw.".concat(type),
      detail: JSON.stringify({
        r: _objectSpread(_objectSpread({}, parsed), {
          cr: e.data
        }),
        // row (we always include the client row data)
        v: value,
        // new value
        o: oldValue,
        // old value
        c: colId // column

      })
    }, CELL_EDITING_EVENTS_MAP[type]);
  }
}
/**
 * An handler for the grid `rowEditingStarted` , `rowEditingStopped` and `rowValueChanged` events
 *
 * @param {String} id The grid's id
 * @param {Object} e  The event payload
 *
 * @listens agGrid.rowEditingStarted
 * @listens agGrid.rowEditingStopped
 * @listens agGrid.rowValueChanged
 *
 * @fires gw.rowEditingStarted
 * @fires gw.rowEditingStopped
 * @fires gw.rowValueChanged
 */


function gw_onRowEditingEvent(id, e) {
  var parsed = (0, _utilities.gw_parseNodeFromEvent)(e);

  if (parsed) {
    var type = e.type;
    (0, _utilities.gw_sendEvent)((0, _utilities2.gw_getGrid)(id).options.context, {
      type: "gw.".concat(e.type),
      detail: JSON.stringify(_objectSpread(_objectSpread({}, parsed), {
        cr: e.data
      })) // row (we always include the client row data)

    }, ROW_EDITING_EVENTS_MAP[type]);
  }
}

/***/ }),

/***/ "./src/events/filters.js":
/*!*******************************!*\
  !*** ./src/events/filters.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_onFilterChanged = gw_onFilterChanged;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _constants = __webpack_require__(/*! ./constants */ "./src/events/constants.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * An handler for the grid `filterChanged` event
 *
 * @param {String} the grid's id
 * @param {Object} e The event's payload
 *
 * @listens agGrid.filterChanged
 * @fires gw.filterChanged
 */
function gw_onFilterChanged(id, e) {
  var context = e.api.gridOptionsWrapper.gridOptions.context;
  (0, _utilities.gw_sendEvent)(context, {
    type: 'gw.filterChanged',
    detail: {}
  }, _constants.GW_EVENT_FILTER_CHANGED);
}

/***/ }),

/***/ "./src/events/index.js":
/*!*****************************!*\
  !*** ./src/events/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "gw_onRowClicked", {
  enumerable: true,
  get: function get() {
    return _selections.gw_onRowClicked;
  }
});
Object.defineProperty(exports, "gw_onRowDoubleClicked", {
  enumerable: true,
  get: function get() {
    return _selections.gw_onRowDoubleClicked;
  }
});
Object.defineProperty(exports, "gw_onSelectionChanged", {
  enumerable: true,
  get: function get() {
    return _selections.gw_onSelectionChanged;
  }
});
Object.defineProperty(exports, "gw_onCellClickEvent", {
  enumerable: true,
  get: function get() {
    return _selections.gw_onCellClickEvent;
  }
});
Object.defineProperty(exports, "gw_onRangeSelectionChanged", {
  enumerable: true,
  get: function get() {
    return _selections.gw_onRangeSelectionChanged;
  }
});
Object.defineProperty(exports, "gw_onCellEditingEvent", {
  enumerable: true,
  get: function get() {
    return _editing.gw_onCellEditingEvent;
  }
});
Object.defineProperty(exports, "gw_onRowEditingEvent", {
  enumerable: true,
  get: function get() {
    return _editing.gw_onRowEditingEvent;
  }
});
Object.defineProperty(exports, "gw_onReadyEvent", {
  enumerable: true,
  get: function get() {
    return _ready.gw_onReadyEvent;
  }
});
Object.defineProperty(exports, "gw_debounce", {
  enumerable: true,
  get: function get() {
    return _utilities.gw_debounce;
  }
});
Object.defineProperty(exports, "gw_onFilterChanged", {
  enumerable: true,
  get: function get() {
    return _filters.gw_onFilterChanged;
  }
});

var _selections = __webpack_require__(/*! ./selections */ "./src/events/selections.js");

var _editing = __webpack_require__(/*! ./editing */ "./src/events/editing.js");

var _ready = __webpack_require__(/*! ./ready */ "./src/events/ready.js");

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _filters = __webpack_require__(/*! ./filters */ "./src/events/filters.js");

/***/ }),

/***/ "./src/events/keyboard.js":
/*!********************************!*\
  !*** ./src/events/keyboard.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_onKeydown = gw_onKeydown;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _constants = __webpack_require__(/*! ./constants */ "./src/events/constants.js");

var _utilities2 = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Compose a model of the keydown event and send it to BBj
 *
 * @param {String} id  the grid's id
 * @param {Event} keydownEvent keydown event
 */
function gw_onKeydown(id, keydownEvent) {
  (0, _utilities.gw_sendEvent)((0, _utilities2.gw_getGrid)(id).options.context, {
    type: "gw.keypress",
    detail: JSON.stringify({
      c: keydownEvent.key,
      kc: keydownEvent.which || Number(keydownEvent.keyCode),
      ak: keydownEvent.altKey,
      sk: keydownEvent.shiftKey,
      ck: keydownEvent.ctrlKey
    })
  }, _constants.GW_EVENT_KEYPRESS);
}

/***/ }),

/***/ "./src/events/ready.js":
/*!*****************************!*\
  !*** ./src/events/ready.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_onReadyEvent = gw_onReadyEvent;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _state = __webpack_require__(/*! ./state */ "./src/events/state.js");

var _keyboard = __webpack_require__(/*! ./keyboard */ "./src/events/keyboard.js");

var _utilities2 = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

var _constants = __webpack_require__(/*! ./constants */ "./src/events/constants.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * On Ready Event
 *
 * The method will ignore first ready event and then register a debounced state
 * callback to send state events to BBj
 *
 * @param {String} id The grid's id
 * @param {Object} e  The event payload
 *
 * @listens agGrid.gridReady
 * @fires gw.ready
 */
// eslint-disable-next-line no-unused-vars
function gw_onReadyEvent(id, _e) {
  var grid = (0, _utilities2.gw_getGrid)(id);
  (0, _utilities.gw_sendEvent)(grid.options.context, {
    type: 'gw.gridReady',
    detail: {}
  }, _constants.GW_EVENT_READY); // register state debounce monitor

  var stateDebounce = (0, _utilities.gw_debounce)(function (changeEvent) {
    (0, _state.gw_onStateChanged)(id, changeEvent);
  }, 500);
  ['sortChanged', 'filterChanged', 'columnVisible', 'columnPinned', 'columnResized', 'columnMoved', 'newColumnsLoaded', 'gridColumnsChanged', 'displayedColumnsChanged', 'virtualColumnsChanged', 'columnEverythingChanged', //'gridSizeChanged',
  'expandOrCollapseAll' //'toolPanelVisibleChanged'
  ].forEach(function (event) {
    grid.options.api.addEventListener(event, stateDebounce);
  }); // collect key downs information to be reported with other events

  grid.container.addEventListener('keydown', function (keydownEvent) {
    grid.keys = {
      c: keydownEvent.key,
      kc: keydownEvent.which || Number(keydownEvent.keyCode),
      ak: keydownEvent.altKey,
      sk: keydownEvent.shiftKey,
      ck: keydownEvent.ctrlKey
    };
  }); // clear collect keydown information

  grid.container.addEventListener('keyup', // eslint-disable-next-line no-unused-vars
  (0, _utilities.gw_debounce)(function (_e) {
    grid.keys = null;
  }, 250)); // register keyboard debounce monitor

  grid.container.addEventListener('keydown', (0, _utilities.gw_debounce)(function (keydownEvent) {
    (0, _keyboard.gw_onKeydown)(id, keydownEvent);
  }, 500));
  window.dispatchEvent(new CustomEvent("".concat(id, "-ready"), {
    detail: grid
  }));
}

/***/ }),

/***/ "./src/events/selections.js":
/*!**********************************!*\
  !*** ./src/events/selections.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_onRowDoubleClicked = gw_onRowDoubleClicked;
exports.gw_onRowClicked = gw_onRowClicked;
exports.gw_onSelectionChanged = gw_onSelectionChanged;
exports.gw_onRangeSelectionChanged = gw_onRangeSelectionChanged;
exports.gw_onCellClickEvent = gw_onCellClickEvent;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _utilities2 = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

var _constants = __webpack_require__(/*! ./constants */ "./src/events/constants.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var CELL_CLICKING_EVENTS_MAP = {
  cellClicked: _constants.GW_EVENT_CELL_CLICK,
  cellDoubleClicked: _constants.GW_EVENT_CELL_DOUBLE_CLICK
};
/**
 * An handler for the grid `rowDoubleClicked` event
 *
 * The function will send a bbj event with `GW_NODE` as payload
 *
 * @param {Object} e The event's payload
 *
 * @listens agGrid.rowDoubleClicked
 * @fires gw.rowDoubleClick
 */

function gw_onRowDoubleClicked(e) {
  var context = e.api.gridOptionsWrapper.gridOptions.context;
  (0, _utilities.gw_sendEvent)(context, {
    type: 'gw.rowDoubleClick',
    detail: JSON.stringify({
      k: (0, _utilities2.gw_getGrid)(context.id).keys
    })
  }, _constants.GW_EVENT_ROW_DOUBLE_CLICK);
}
/**
 * A handler for the grid `rowClicked` event
 *
 * @param {Object} e  The event payload
 *
 * @listens agGrid.rowClicked
 * @fires gw.rowClick
 */


function gw_onRowClicked(e) {
  var context = e.api.gridOptionsWrapper.gridOptions.context;
  (0, _utilities.gw_sendEvent)(context, {
    type: 'gw.rowClick',
    detail: JSON.stringify({
      k: (0, _utilities2.gw_getGrid)(context.id).keys
    })
  }, _constants.GW_EVENT_ROW_CLICK);
}
/**
 * A handler for the grid `selectionChanged` event
 *
 * @param {Object} e  The event payload
 *
 * @listens agGrid.selectionChanged
 * @fires gw.rowSelect
 */


function gw_onSelectionChanged(e) {
  var context = e.api.gridOptionsWrapper.gridOptions.context;
  (0, _utilities.gw_sendEvent)(context, {
    type: 'gw.rowSelect',
    detail: ''
  }, _constants.GW_EVENT_ROW_SELECT);
}
/**
 * A handler for the grid `rangeSelectionChanged` event
 *
 * @param {Object} e
 *
 * @listens agGrid.rangeSelectionChanged
 * @fires gw.rangeSelection
 */


function gw_onRangeSelectionChanged(e) {
  var context = e.api.gridOptionsWrapper.gridOptions.context;
  (0, _utilities.gw_sendEvent)(context, {
    type: 'gw.rangeSelection',
    detail: ''
  }, _constants.GW_EVENT_RANGE_SELECTION_CHANGED);
}
/**
 * A handler for the grid `cellClickEvent` & `cellDoubleClicked` event
 *
 * @param {String} id The grid's id
 * @param {Object} e  The event payload
 *
 * @listens agGrid.cellClickEvent
 * @listens agGrid.cellDoubleClicked
 *
 * @fires gw.cellClicked
 * @fires gw.cellDoubleClicked
 */


function gw_onCellClickEvent(e) {
  var context = e.api.gridOptionsWrapper.gridOptions.context;
  var id = context.id;
  var parsed = (0, _utilities.gw_parseNodeFromEvent)(e);

  if (parsed) {
    var type = e.type;
    (0, _utilities.gw_sendEvent)(context, {
      type: "gw.".concat(e.type),
      detail: JSON.stringify({
        r: parsed,
        // row
        v: (0, _utilities2.gw_escape)(e.value),
        // new value
        o: (0, _utilities2.gw_escape)(e.value),
        // odl value
        c: e.column.colId,
        // columns
        k: (0, _utilities2.gw_getGrid)(id).keys
      })
    }, CELL_CLICKING_EVENTS_MAP[type]);
  }
}

/***/ }),

/***/ "./src/events/state.js":
/*!*****************************!*\
  !*** ./src/events/state.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_onStateChanged = gw_onStateChanged;

var _utilities = __webpack_require__(/*! ./utilities */ "./src/events/utilities.js");

var _utilities2 = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

var _constants = __webpack_require__(/*! ./constants */ "./src/events/constants.js");

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * An handler for the grid `stateChanged` events
 *
 * @param {String} id The grid's id
 * @param {Object} e  The event payload
 *
 * @listens agGrid.stateChanged
 * @listens agGrid.rowEditingStopped
 *
 * @fires gw.stateChanged
 */
// eslint-disable-next-line no-unused-vars
function gw_onStateChanged(id, _e) {
  (0, _utilities.gw_sendEvent)((0, _utilities2.gw_getGrid)(id).options.context, {
    type: 'gw.stateChanged',
    detail: []
  }, _constants.GW_EVENT_GRID_STATE_CHANGE);
}

/***/ }),

/***/ "./src/events/utilities.js":
/*!*********************************!*\
  !*** ./src/events/utilities.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_debounce = gw_debounce;
exports.gw_sendEvent = gw_sendEvent;
exports.gw_parseNode = gw_parseNode;
exports.gw_parseNodeFromEvent = gw_parseNodeFromEvent;

var _utilities = __webpack_require__(/*! api/utilities */ "./src/api/utilities.js");

/* eslint-disable no-prototype-builtins */

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/** https://davidwalsh.name/javascript-debounce-function */
function gw_debounce(func, wait, immediate) {
  var timeout;
  return function () {
    var context = this,
        args = arguments;

    var later = function later() {
      timeout = null;

      if (!immediate) {
        func.apply(context, args);
      }
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      func.apply(context, args);
    }
  };
}
/**
 * Send an event to BBj side
 *
 * @param {Array} context the grid's context
 * @param {*} payload the event payload
 * @param {String} eventId the event's id
 */


function gw_sendEvent(context) {
  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var eventId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var registeredInterests = context.interests || [];

  if (registeredInterests.includes(eventId)) {
    var div = (0, _utilities.gw_getDocument)().getElementById("".concat(context.id)); // bui or webapp

    if ([5, 6].indexOf(context.platform) > -1) {
      var htmlviewId = "htmlview-".concat(context.id);
      var container = (0, _utilities.gw_getDocument)().getElementsByClassName(htmlviewId)[0];

      if (typeof container.basisDispatchCustomEvent === 'function') {
        container.basisDispatchCustomEvent(div, payload);
      } else {
        window.basisDispatchCustomEvent(div, payload);
      }
    } else {
      window.basisDispatchCustomEvent(div, payload);
    }
  }
}
/**
 * @typedef {Object} BBjGridExWidgetRow
 *
 * @property {number} id
 * @property {number} index
 * @property {number} parentKey
 * @property {number} childIndex
 * @property {boolean} selected
 */

/**
 * Parse a node as BBjGridExWidgetRow
 *
 * @param {Object} node ag grid node
 * @param {Object} context  ag grid context
 *
 * @returns {BBjGridExWidgetRow|Boolean} object formatted as BBjGridExWidgetRow.
 *                                       false if the node is for group node
 */


function gw_parseNode(node, context) {
  if (true === node.group) {
    return false;
  } // we do not manage groups


  var getRowNodeId = node.rowPinned ? '__ROW_INDEX' : context.getRowNodeId;
  return {
    i: context.hasOwnProperty('getRowNodeId') && node.data[getRowNodeId] ? node.data[getRowNodeId] : node.id,
    // id
    x: node.rowIndex,
    // index
    p: node.hasOwnProperty('parent') && node.parent.hasOwnProperty('key') ? node.parent.key : '',
    // parent key
    c: node.rowPinned ? -1 : node.childIndex,
    //childIndex
    s: Boolean(node.selected),
    // selected
    // client row
    cr: context.hasOwnProperty('includeClientRowData') && context['includeClientRowData'] === true ? node.data : null,
    pp: node.rowPinned // pin position

  };
}
/**
 * Parse node from event
 *
 * Parse node in the paSsed event as BBjGridExWidgetRow
 *
 * @param {Object} e
 *
 * @returns {BBjGridExWidgetRow}
 */


function gw_parseNodeFromEvent(e) {
  return gw_parseNode(e.node, e.context);
}

/***/ }),

/***/ "./src/expression.js":
/*!***************************!*\
  !*** ./src/expression.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.gw_compileExpression = gw_compileExpression;
exports.gw_executeExpression = gw_executeExpression;

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Build a js function from the given expression
 *
 * @param {String} expression
 *
 * @return {Function}
 */
function gw_compileExpression(expression) {
  // Check to see if the expression cache has been initialized
  if (typeof gw_compileExpression.expressionCache == 'undefined') {
    gw_compileExpression.expressionCache = [];
  } // check cache first


  if (gw_compileExpression.expressionCache[expression]) {
    return gw_compileExpression.expressionCache[expression];
  } // if not found in cache, return the function


  var functionBody = null; // if the expression has the 'return' word in it, then use as is,
  // if not, then wrap it with return and ';' to make a function

  if (expression.indexOf('return') >= 0) {
    functionBody = expression;
  } else {
    functionBody = 'return ' + expression + ';';
  }

  var theFunction = new Function('x, ctx, oldValue, newValue, value, node, data, colDef, rowIndex, api, columnApi, getValue, column, columnGroup', functionBody); // store in cache

  gw_compileExpression.expressionCache[expression] = theFunction;
  return theFunction;
}
/**
 * Build and executed an expression with the passed params
 *
 * @param {String} expression
 * @param {Object} params
 *
 * @return mixed
 */


function gw_executeExpression(expression, params) {
  try {
    var javaScriptFunction = gw_compileExpression(expression); // the params don't have all these values, rather we add every possible
    // value a params can have, which makes whatever is in the params available.

    var result = javaScriptFunction(params.value, params.context, params.oldValue, params.newValue, params.value, params.node, params.data, params.colDef, params.rowIndex, params.api, params.columnApi, params.getValue, params.column, params.columnGroup);
    return result;
  } catch (e) {
    // the expression failed, which can happen, as it's the client that
    // provides the expression. so print a nice message
    console.log('Processing of the expression failed');
    console.log('Expression = ' + expression);
    console.log('Params =', params);
    console.log('Exception = ' + e);
    return null;
  }
}

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

__webpack_require__(/*! expose-loader?BBj.Masks!bbj-masks/dist/bbj-masks.js */ "./node_modules/expose-loader/index.js?BBj.Masks!./node_modules/bbj-masks/dist/bbj-masks.js-exposed");

__webpack_require__(/*! expose-loader?Basis.InputMasking!basis-input-masking/dist/basis-input-masking.js */ "./node_modules/expose-loader/index.js?Basis.InputMasking!../../basis-input-masking/dist/basis-input-masking.js-exposed");

__webpack_require__(/*! expose-loader?flatpickr!flatpickr/dist/flatpickr.js */ "./node_modules/expose-loader/index.js?flatpickr!./node_modules/flatpickr/dist/flatpickr.js-exposed");

__webpack_require__(/*! expose-loader?Basis.AgGridComponents!basis-aggrid-components/dist/basis-aggrid-components.js */ "./node_modules/expose-loader/index.js?Basis.AgGridComponents!../../basis-aggrid-components/dist/basis-aggrid-components.js-exposed");

var _polyfills = __webpack_require__(/*! ./polyfills.js */ "./src/polyfills.js");

Object.keys(_polyfills).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _polyfills[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _polyfills[key];
    }
  });
});

var _api = __webpack_require__(/*! ./api */ "./src/api/index.js");

Object.keys(_api).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _api[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _api[key];
    }
  });
});

/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
__webpack_require__(/*! flatpickr/dist/flatpickr.css */ "./node_modules/flatpickr/dist/flatpickr.css");

__webpack_require__(/*! ./style/classes.css */ "./src/style/classes.css");

__webpack_require__(/*! ./style/suggestion-editor.css */ "./src/style/suggestion-editor.css");

/***/ }),

/***/ "./src/polyfills.js":
/*!**************************!*\
  !*** ./src/polyfills.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
 * This file is part of the BBjGridExWidget plugin.
 * (c) Basis Europe <eu@basis.cloud>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/** https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent  */
// eslint-disable-next-line no-extra-semi
;

(function () {
  if (typeof window.CustomEvent === 'function') {
    return false;
  } //If not IE


  function CustomEvent(event, params) {
    params = params || {
      bubbles: false,
      cancelable: false,
      detail: undefined
    };
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }

  CustomEvent.prototype = window.Event.prototype;
  window.CustomEvent = CustomEvent;
})();

/***/ }),

/***/ "./src/style/classes.css":
/*!*******************************!*\
  !*** ./src/style/classes.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/postcss-loader/src!./classes.css */ "./node_modules/postcss-loader/src/index.js!./src/style/classes.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = function() {
                return window.parent.document.head
              };

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./src/style/suggestion-editor.css":
/*!*****************************************!*\
  !*** ./src/style/suggestion-editor.css ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/postcss-loader/src!./suggestion-editor.css */ "./node_modules/postcss-loader/src/index.js!./src/style/suggestion-editor.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = function() {
                return window.parent.document.head
              };

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./src/index.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./src/index.js */"./src/index.js");


/***/ })

/******/ })));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2F1dG9jb21wbGV0ZS50cyIsIndlYnBhY2s6Ly8vL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly8vd2VicGFjazovd2VicGFjay9ib290c3RyYXAgY2I2NzlkNmI4MmE0ZGM0YTdhMGQiLCJ3ZWJwYWNrOi8vLy9zcmMvQ29tcG9uZW50L2luZGV4LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2NvcmUtZGVjb3JhdG9ycy9zcmMvYXV0b2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL3NyYy9vdmVycmlkZS5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvc3JjL3ByaXZhdGUvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXEuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvQm9vbGVhblN3aXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3NyYy9UZW1wbGF0ZVJlbmRlcmVyL2luZGV4LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0l0ZXJhdGVlQ2FsbC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUludGVycG9sYXRlLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvc3JjL3JlYWRvbmx5LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2VzbS91dGNUb1pvbmVkVGltZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9lc20vX2xpYi90elBhcnNlVGltZXpvbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvRXZlbnRzTWl4aW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvRGF0ZVRpbWVJbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3NyYy9Cb29sZWFuRWRpdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8vc3JjL0Jvb2xlYW5FZGl0b3IvQm9vbGVhbkVkaXRvci5qcyIsIndlYnBhY2s6Ly8vL3NyYy9Db21wb25lbnQvQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8vc3JjL0Jvb2xlYW5Td2l0Y2gvQm9vbGVhblN3aXRjaC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvc3JjL2xhenktaW5pdGlhbGl6ZS5qcyIsIndlYnBhY2s6Ly8vL3NyYy9Cb29sZWFuU3dpdGNoL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy9zcmMvQm9vbGVhblN3aXRjaC9zdHlsZS5zY3NzPzc2YTMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8vc3JjL0Jvb2xlYW5SZW5kZXJlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3NyYy9Cb29sZWFuUmVuZGVyZXIvQm9vbGVhblJlbmRlcmVyLmpzIiwid2VicGFjazovLy8vc3JjL0Jvb2xlYW5GaWx0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvQm9vbGVhbkZpbHRlci9Cb29sZWFuRmlsdGVyLmpzIiwid2VicGFjazovLy8vc3JjL0Jvb2xlYW5GaWx0ZXIvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vL3NyYy9Cb29sZWFuRmlsdGVyL3N0eWxlLnNjc3M/MGQ1ZSIsIndlYnBhY2s6Ly8vL3NyYy9OdW1iZXJFZGl0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvTnVtYmVyRWRpdG9yL051bWJlckVkaXRvci5qcyIsIndlYnBhY2s6Ly8vL3NyYy9OdW1iZXJFZGl0b3Ivc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vL3NyYy9OdW1iZXJFZGl0b3Ivc3R5bGUuc2Nzcz9hYTBlIiwid2VicGFjazovLy8vc3JjL1RleHRFZGl0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvVGV4dEVkaXRvci9UZXh0RWRpdG9yLmpzIiwid2VicGFjazovLy8vc3JjL1RleHRFZGl0b3Ivc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly8vL3NyYy9UZXh0RWRpdG9yL3N0eWxlLnNjc3M/MDkxYiIsIndlYnBhY2s6Ly8vL3NyYy9UZW1wbGF0ZVJlbmRlcmVyL1RlbXBsYXRlUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RlbXBsYXRlLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9hc3NpZ25JbldpdGguanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5T2JqZWN0LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jcmVhdGVBc3NpZ25lci5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX292ZXJSZXN0LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlU2V0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2F0dGVtcHQuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVmFsdWVzLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbi5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VzY2FwZVN0cmluZ0NoYXIuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RlbXBsYXRlU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VzY2FwZUh0bWxDaGFyLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcmVFc2NhcGUuanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUV2YWx1YXRlLmpzIiwid2VicGFjazovLy8vc3JjL0ltYWdlUmVuZGVyZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9zcmMvSW1hZ2VSZW5kZXJlci9JbWFnZVJlbmRlcmVyLmpzIiwid2VicGFjazovLy8vc3JjL0RhdGVUaW1lRmlsdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8vc3JjL0RhdGVUaW1lRmlsdGVyL0RhdGVUaW1lRmlsdGVyLmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2VzbS9fbGliL3R6VG9rZW5pemVEYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3NyYy9FdmVudHNNaXhpbi9FdmVudHNNaXhpbi5qcyIsIndlYnBhY2s6Ly8vL3NyYy9EYXRlVGltZUlucHV0L0RhdGVUaW1lSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy9zcmMvRGF0ZVRpbWVJbnB1dC9zdHlsZS5zY3NzIiwid2VicGFjazovLy8vc3JjL0RhdGVUaW1lSW5wdXQvc3R5bGUuc2Nzcz80ZjY3Iiwid2VicGFjazovLy8vc3JjL0RhdGVUaW1lRmlsdGVyL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy9zcmMvRGF0ZVRpbWVGaWx0ZXIvc3R5bGUuc2Nzcz83NmZiIiwid2VicGFjazovLy8vc3JjL0RhdGVUaW1lRWRpdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8vc3JjL0RhdGVUaW1lRWRpdG9yL0RhdGVUaW1lRWRpdG9yLmpzIiwid2VicGFjazovLy93ZWJwYWNrOi93ZWJwYWNrL2Jvb3RzdHJhcCA2YjNiNDU4MjZkZjAxM2FmYWJhYiIsIndlYnBhY2s6Ly8vd2VicGFjazovZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcImJiai1tYXNrcy9zcmMvU3RyaW5nTWFza1wiLFwiY29tbW9uanMyXCI6XCJiYmotbWFza3Mvc3JjL1N0cmluZ01hc2tcIixcImFtZFwiOlwiYmJqLW1hc2tzL3NyYy9TdHJpbmdNYXNrXCIsXCJyb290XCI6W1wiQkJqXCIsXCJNYXNrc1wiLFwiU3RyaW5nTWFza1wiXX0iLCJ3ZWJwYWNrOi8vLy9zcmMvVGV4dElucHV0L2luZGV4LmpzIiwid2VicGFjazovLy8vc3JjL1RleHRJbnB1dC9UZXh0SW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy9zcmMvVGV4dElucHV0L3Rvb2xzLmpzIiwid2VicGFjazovLy8vc3JjL051bWJlcklucHV0L2luZGV4LmpzIiwid2VicGFjazovLy8vc3JjL051bWJlcklucHV0L051bWJlcklucHV0LmpzIiwid2VicGFjazovLy93ZWJwYWNrOi9leHRlcm5hbCB7XCJjb21tb25qc1wiOlwiYmJqLW1hc2tzL3NyYy9OdW1iZXJNYXNrXCIsXCJjb21tb25qczJcIjpcImJiai1tYXNrcy9zcmMvTnVtYmVyTWFza1wiLFwiYW1kXCI6XCJiYmotbWFza3Mvc3JjL051bWJlck1hc2tcIixcInJvb3RcIjpbXCJCQmpcIixcIk1hc2tzXCIsXCJOdW1iZXJNYXNrXCJdfSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmJqLW1hc2tzL2Rpc3QvYmJqLW1hc2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9mbGF0cGlja3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9qc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXAtcGFyc2UtanNvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmJqLW1hc2tzL2Rpc3QvYmJqLW1hc2tzLmpzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vL0Q6L0dpdGh1Yi9iYXNpcy1hZ2dyaWQtY29tcG9uZW50cy9kaXN0L2Jhc2lzLWFnZ3JpZC1jb21wb25lbnRzLmpzLWV4cG9zZWQiLCJ3ZWJwYWNrOi8vL0Q6L0dpdGh1Yi9iYXNpcy1pbnB1dC1tYXNraW5nL2Rpc3QvYmFzaXMtaW5wdXQtbWFza2luZy5qcy1leHBvc2VkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9mbGF0cGlja3IuanMtZXhwb3NlZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2pzcy5qcy1leHBvc2VkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9mbGF0cGlja3IuY3NzPzA5NDciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVJlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVNldFRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVVuYXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VWYWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUFzc2lnbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2N1c3RvbURlZmF1bHRzQXNzaWduSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXNjYXBlSHRtbENoYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXNjYXBlU3RyaW5nQ2hhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUV2YWx1YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3JlSW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcm9vdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zaG9ydE91dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL190b1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2Fzc2lnbkluV2l0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2F0dGVtcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNUeXBlZEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RlbXBsYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdGVtcGxhdGVTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mbGF0cGlja3IvZGlzdC9mbGF0cGlja3IuY3NzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS9jbGFzc2VzLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvc3VnZ2VzdGlvbi1lZGl0b3IuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2NlbGxzLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvY2hhcnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvY29sdW1ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9qc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9tZW51cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL292ZXJsYXlzLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvcm93cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL3N0YXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvc3RhdHVzYmFyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvdG9vbHBhbmVsLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvdXRpbGl0aWVzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0hUTUxUb29sdGlwLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL1N1Z2dlc3Rpb25FZGl0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy9lZGl0aW5nLmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudHMvZmlsdGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9ldmVudHMva2V5Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy9yZWFkeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzL3NlbGVjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy9zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXZlbnRzL3V0aWxpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZXhwcmVzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BvbHlmaWxscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvY2xhc3Nlcy5jc3M/MDU1NSIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUvc3VnZ2VzdGlvbi1lZGl0b3IuY3NzPzNmMjQiXSwibmFtZXMiOlsiQ29tcG9uZW50IiwiZGVmaW5lUHJvcGVydHkiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImZuIiwibWFwU3RvcmUiLCJzdXBlclN0b3JlIiwiYmluZCIsImRlc2NzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImtsYXNzIiwia2V5cyIsImdldE93bktleXMiLCJpIiwibCIsImtleSIsImRlc2MiLCJhdXRvYmluZE1ldGhvZCIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImNvbnN0cnVjdG9yIiwidGFyZ2V0IiwiZ2V0IiwiZ2V0Qm91bmRTdXBlciIsImJvdW5kRm4iLCJ3cml0YWJsZSIsInNldCIsImNyZWF0ZURlZmF1bHRTZXR0ZXIiLCJhcmdzIiwiYXV0b2JpbmRDbGFzcyIsImhhbmRsZSIsIkdFTkVSSUNfRlVOQ1RJT05fRVJST1IiLCJGVU5DVElPTl9SRUdFWFAiLCJTeW50YXhFcnJvclJlcG9ydGVyIiwiZGVzY3JpcHRvciIsInRvcGljIiwibmFtZSIsInBhcmFtcyIsInBhcmVudEtsYXNzIiwiY2hpbGRLbGFzcyIsInBhcmVudERlc2NyaXB0b3IiLCJjaGlsZERlc2NyaXB0b3IiLCJjb25kaXRpb24iLCJtc2ciLCJyZXBvcnRlciIsInBhcmVudCIsImNoaWxkIiwicGFyZW50VmFsdWVUeXBlIiwiY2hpbGRWYWx1ZVR5cGUiLCJpc0Z1bmN0aW9uT3ZlclVuZGVmaW5lZCIsImNoZWNrRnVuY3Rpb25TaWduYXR1cmVzIiwicGFyZW50SGFzR2V0dGVyIiwiY2hpbGRIYXNHZXR0ZXIiLCJwYXJlbnRIYXNTZXR0ZXIiLCJjaGlsZEhhc1NldHRlciIsInBhcmVudFR5cGUiLCJnZXREZXNjcmlwdG9yVHlwZSIsImNoaWxkVHlwZSIsImNoZWNrRGF0YURlc2NyaXB0b3JzIiwiY2hlY2tBY2Nlc3NvckRlc2NyaXB0b3JzIiwic3VnZ2VzdGlvblRyYW5zZm9ybXMiLCJzdWdnZXN0aW9uIiwic3VwZXJLbGFzcyIsInN1cGVyRGVzY3JpcHRvciIsInN1Z2dlc3RlZEtleSIsImZpbmRQb3NzaWJsZUFsdGVybmF0aXZlcyIsImNoZWNrRGVzY3JpcHRvcnMiLCJkZWNvcmF0ZSIsIm1vZHVsZSIsImxpc3QiLCJjb250ZW50IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIml0ZW0iLCJtb2R1bGVzIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwibWVkaWFRdWVyeSIsImNzc01hcHBpbmciLCJ1c2VTb3VyY2VNYXAiLCJzb3VyY2VNYXBwaW5nIiwidG9Db21tZW50Iiwic291cmNlVVJMcyIsImJhc2U2NCIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJkYXRhIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsInN5bVRvU3RyaW5nVGFnIiwiU3ltYm9sIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImlzRGVzY3JpcHRvciIsImVudHJ5QXJncyIsImhhbmRsZURlc2NyaXB0b3IiLCJBcnJheSIsIk1ldGEiLCJsYXp5SW5pdGlhbGl6ZSIsIk1FVEFfS0VZIiwib2JqIiwibmV3VmFsdWUiLCJ3YXJuIiwiY29uc29sZSIsInNlZW5EZXByZWNhdGlvbnMiLCJ0eXBlIiwiaXNPYmplY3QiLCJyb290IiwiZnJlZVNlbGYiLCJzZWxmIiwiZnJlZUdsb2JhbCIsIkZ1bmN0aW9uIiwib3RoZXIiLCJlcSIsImlzTGVuZ3RoIiwiaXNGdW5jdGlvbiIsImlzQXJyYXlMaWtlIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsIk1hdGgiLCJyZXF1aXJlZCIsIkJvb2xlYW5Td2l0Y2giLCJUZW1wbGF0ZVJlbmRlcmVyIiwib2JqZWN0IiwiYmFzZUFzc2lnblZhbHVlIiwiZnVuYyIsImdldE5hdGl2ZSIsImFzeW5jVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsInByb3h5VGFnIiwidGFnIiwiZ2xvYmFsIiwiZyIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJpZGVudGl0eSIsImJhc2VSZXN0IiwiYXBwbHkiLCJpc0luZGV4IiwiaW5kZXgiLCJpc0l0ZXJhdGVlQ2FsbCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJyZUlzVWludCIsImxlbmd0aCIsIm9iamVjdFByb3RvIiwiaGFzT3duUHJvcGVydHkiLCJpc0FyciIsImlzQXJyYXkiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNCdWZmZXIiLCJpc1R5cGUiLCJpc1R5cGVkQXJyYXkiLCJza2lwSW5kZXhlcyIsInJlc3VsdCIsImJhc2VUaW1lcyIsImluaGVyaXRlZCIsImFycmF5TGlrZUtleXMiLCJvcmlnaW5hbE1vZHVsZSIsIkN0b3IiLCJwcm90byIsImlzUHJvdG90eXBlIiwiZG9tRXhjVGFnIiwiZXJyb3JUYWciLCJpc1BsYWluT2JqZWN0IiwiaXNFcnJvciIsInRyYW5zZm9ybSIsIm92ZXJBcmciLCJhcnJheSIsIml0ZXJhdGVlIiwiYXJyYXlNYXAiLCJyZUludGVycG9sYXRlIiwiYmFzZVRvU3RyaW5nIiwidG9TdHJpbmciLCJkYXRlIiwidG9EYXRlIiwidXRjRGF0ZSIsIm9mZnNldE1pbGxpc2Vjb25kcyIsInR6UGFyc2VUaW1lem9uZSIsInN1Yk1pbGxpc2Vjb25kcyIsIk1JTExJU0VDT05EU19JTl9IT1VSIiwiTUlMTElTRUNPTkRTX0lOX01JTlVURSIsInBhdHRlcm5zIiwidGltZXpvbmUiLCJ0aW1lem9uZVoiLCJ0aW1lem9uZUhIIiwidGltZXpvbmVISE1NIiwidGltZXpvbmVJQU5BIiwidG9rZW4iLCJob3VycyIsInBhcnNlSW50IiwidmFsaWRhdGVUaW1lem9uZSIsImFic29sdXRlT2Zmc2V0IiwibWludXRlcyIsInRva2VucyIsInR6VG9rZW5pemVEYXRlIiwiYXNVVEMiLCJEYXRlIiwidGltZXN0YW1wV2l0aE1zWmVyb2VkIiwiRXZlbnRzTWl4aW4iLCJEYXRlVGltZUlucHV0IiwiQm9vbGVhbkVkaXRvciIsIkJvb2xlYW4iLCJTdHJpbmciLCJrZXlQcmVzc0JhY2tzcGFjZU9yRGVsZXRlIiwic3dpdGNoZXIiLCJ0cnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwidmFsdWVBc1N0cmluZyIsIl9ndWkiLCJmYWxsYmFjayIsIm9wdGlvbiIsIkFHcmlkQ29tcG9uZW50c01ldGFDb25maWciLCJjb250ZXh0Iiwid2luIiwiZG9jIiwiaW5pdGlhbFZhbHVlIiwibGlzdGVuZXIiLCJib29sU3dpdGNoIiwiZG9jdW1lbnQiLCJsYWJlbCIsImUiLCJvdmVycmlkZSIsImF1dG9iaW5kIiwiaW5pdGlhbGl6ZXIiLCJyZXQiLCJyZXF1aXJlIiwib3B0aW9ucyIsIndpbmRvdyIsInVwZGF0ZSIsImxvY2F0aW9uIiwiYmFzZVVybCIsImN1cnJlbnREaXIiLCJmaXhlZENzcyIsInVucXVvdGVkT3JpZ1VybCIsIm5ld1VybCIsIkJvb2xlYW5SZW5kZXJlciIsImlzSW5pdCIsImJvb2xlYW5UcnVlUmVuZGVyVmFsdWUiLCJib29sZWFuRmFsc2VSZW5kZXJWYWx1ZSIsImJvb2xlYW5UcnVlVmFsdWUiLCJib29sZWFuRmFsc2VWYWx1ZSIsIkJvb2xlYW5GaWx0ZXIiLCJ0b1RpdGxlQ2FzZSIsIndvcmQiLCJzdHJpcEhUTUwiLCJ0bXAiLCJfYm9vbGVhbkZpbHRlclRyYW5zbGF0aW9uIiwidHJhbnNsYXRlIiwiaXNDbGVhckZpbHRlciIsImlzUmVzZXRCdXR0b24iLCJpc0FwcGx5QnV0dG9uIiwicmVzZXQiLCJib2R5IiwiYXBwbHlGaWx0ZXJQYW5lbCIsIm1vZGVsIiwiZmlsdGVyVHlwZSIsImZpbHRlclRleHRBc1N0cmluZyIsIk51bWJlckVkaXRvciIsIm1pbiIsIm1heCIsInN0ZXAiLCJtYXNrIiwic3RhcnRWYWx1ZSIsImdyb3VwaW5nU2VwYXJhdG9yIiwiZGVjaW1hbFNlcGFyYXRvciIsImZvcmNlVHJhaWxpbmdaZXJvcyIsIkJhc2lzIiwiZWxlbWVudHMiLCJvblVwZGF0ZSIsIm9uSW52YWxpZCIsIl9vbk51bWJlcklucHV0SW52YWxpZCIsImNhc3RlZCIsInJldFZhbHVlIiwiZXZlbnQiLCJpc1ZhbGlkIiwiX21hc2tlZCIsInVubWFza2VkIiwiZXJyb3IiLCJpbnB1dCIsImlzTmF2aWdhdGlvbktleSIsIlRleHRFZGl0b3IiLCJwYXR0ZXJuIiwidGl0bGUiLCJfb25UZXh0SW5wdXRJbnZhbGlkIiwidGVtcGxhdGUiLCJyZUVtcHR5U3RyaW5nTGVhZGluZyIsInJlRW1wdHlTdHJpbmdNaWRkbGUiLCJyZUVtcHR5U3RyaW5nVHJhaWxpbmciLCJyZUVzVGVtcGxhdGUiLCJyZU5vTWF0Y2giLCJyZVVuZXNjYXBlZFN0cmluZyIsInNldHRpbmdzIiwidGVtcGxhdGVTZXR0aW5ncyIsImd1YXJkIiwic3RyaW5nIiwiYXNzaWduSW5XaXRoIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImltcG9ydHMiLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJiYXNlVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJzb3VyY2UiLCJyZURlbGltaXRlcnMiLCJSZWdFeHAiLCJzb3VyY2VVUkwiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNjYXBlU3RyaW5nQ2hhciIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJvZmZzZXQiLCJtYXRjaCIsInZhcmlhYmxlIiwiYXR0ZW1wdCIsImNyZWF0ZUFzc2lnbmVyIiwiY29weU9iamVjdCIsImtleXNJbiIsImlzTmV3IiwicHJvcHMiLCJjdXN0b21pemVyIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImdldFZhbHVlIiwiYmFzZUlzTmF0aXZlIiwicmVSZWdFeHBDaGFyIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwicmVJc05hdGl2ZSIsImlzTWFza2VkIiwidG9Tb3VyY2UiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwibWFza1NyY0tleSIsInVpZCIsImNvcmVKc0RhdGEiLCJzb3VyY2VzIiwiYXNzaWduZXIiLCJuYXRpdmVNYXgiLCJzdGFydCIsIm90aGVyQXJncyIsInNob3J0T3V0IiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIm5hdGl2ZU5vdyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwiYXJndW1lbnRzIiwiYmFzZUtleXNJbiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiYmFzZUlzQXJndW1lbnRzIiwiYXJnc1RhZyIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiQnVmZmVyIiwibmF0aXZlSXNCdWZmZXIiLCJzdHViRmFsc2UiLCJub2RlSXNUeXBlZEFycmF5Iiwibm9kZVV0aWwiLCJiYXNlVW5hcnkiLCJiYXNlSXNUeXBlZEFycmF5IiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwidHlwZWRBcnJheVRhZ3MiLCJmcmVlUHJvY2VzcyIsInR5cGVzIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsIm9iamVjdEN0b3JTdHJpbmciLCJnZXRQcm90b3R5cGUiLCJzdHJpbmdFc2NhcGVzIiwiYmFzZUtleXMiLCJuYXRpdmVLZXlzIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwiZXNjYXBlIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwiZXNjYXBlSHRtbENoYXIiLCJodG1sRXNjYXBlcyIsImJhc2VQcm9wZXJ0eU9mIiwiSU5GSU5JVFkiLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiaXNTeW1ib2wiLCJzeW1ib2xUYWciLCJJbWFnZVJlbmRlcmVyIiwiaW1hZ2VXaWR0aCIsImltYWdlSGVpZ2h0IiwiaW1hZ2VMaXN0IiwiRGF0ZVRpbWVGaWx0ZXIiLCJUT0tFTlMiLCJUT0tFTl9FUVVBTCIsIlRPS0VOX05PVF9FUVVBTCIsIlRPS0VOX0xFU1MiLCJUT0tFTl9HUkVBVEVSIiwiVE9LRU5fUkFOR0UiLCJUT0tFTl9BTkQiLCJUT0tFTl9PUiIsIkNvbmRpdGlvblBhbmVsIiwid2l0aEV2ZW50c01peGluIiwiX2ZpbHRlclRpbWVJbnB1dCIsIl9maWx0ZXJUb0RhdGVUaW1lSW5wdXQiLCJfZmlsdGVyT3B0aW9ucyIsIl9kZWZhdWx0T3B0aW9uIiwib3B0aW9uc1RyYW5zbGF0aW9ucyIsInNlbGVjdCIsInN0YXRlIiwiZ3VpIiwiZmlsdGVyT3B0aW9ucyIsInNlbGVjdEVsIiwiZmlsdGVySW5wdXQiLCJmaWx0ZXJUb0lucHV0IiwiZXZ0IiwiZWwiLCJmaWx0ZXJEYXRlVG8iLCJPTl9DT05ESVRJT05fQ0hBTkdFRCIsInJlYWRvbmx5IiwiZmlsdGVyIiwiZmlsdGVyVG8iLCJKb2luQ29uZGl0aW9uUGFuZWwiLCJfZmlyc3RDb25kaXRpb25QYW5lbCIsIl9zZWNvbmRDb25kaXRpb25QYW5lbCIsIl9vcGVyYXRvclBhbmVsIiwiX3BhcmFtcyIsImlkT25lIiwiaWRUd28iLCJzdXBwcmVzc0FuZE9yQ29uZGl0aW9uIiwic2Vjb25kQ29uZGl0aW9uR3VpIiwib3BlcmF0b3JQYW5lbEd1aSIsIk9OX0pPSU5fQ09ORElUSU9OX0NIQU5HRUQiLCJjb25kaXRpb24xIiwiY29uZGl0aW9uMiIsIm9wZXJhdG9yIiwiX0pvaW5Db25kaXRpb25QYW5lbCIsIl9zdGF0ZSIsIl9kb2VzRmlsdGVyUGFzc09wdGlvbnMiLCJlbmFibGVUaW1lIiwiaW5SYW5nZUluY2x1c2l2ZSIsInZhbHVlR2V0dGVyIiwiZG9lc1Bhc3NGaXJzdENvbmRpdGlvbiIsImRvZXNQYXNzU2Vjb25kQ29uZGl0aW9uIiwiY2xvbmUiLCJkYXRlVGltZU1hc2siLCJsb2NhbGUiLCJJbnRsIiwiQkJqIiwiZmlyc3RDb25kaXRpb25Bc1N0cmluZyIsInNlY29uZENvbmRpdGlvbkFzU3RyaW5nIiwib3BlcmF0b3JBc1N0cmluZyIsInBhc3NlZCIsInV0Y1RvWm9uZWRUaW1lIiwiaXNBcHBseUJ1dHRvbkFjdGl2ZSIsImR0ZiIsImdldERhdGVUaW1lRm9ybWF0IiwicGFydHNPZmZzZXQiLCJoYWNreU9mZnNldCIsInR5cGVUb1BvcyIsInllYXIiLCJtb250aCIsImRheSIsImhvdXIiLCJtaW51dGUiLCJzZWNvbmQiLCJmb3JtYXR0ZWQiLCJmaWxsZWQiLCJwb3MiLCJwYXJzZWQiLCJkdGZDYWNoZSIsInRlc3REYXRlRm9ybWF0dGVkIiwiaG91cjEyIiwidGltZVpvbmUiLCJob3VyQ3ljbGVTdXBwb3J0ZWQiLCJob3VyQ3ljbGUiLCJyZXF1aXJlZEFyZ3MiLCJhbW91bnQiLCJ0b0ludGVnZXIiLCJhZGRNaWxsaXNlY29uZHMiLCJ0aW1lc3RhbXAiLCJhcmdTdHIiLCJhcmd1bWVudCIsIkRFRkFVTFRfQURESVRJT05BTF9ESUdJVFMiLCJkYXRlVGltZURlbGltZXRlciIsInBsYWluVGltZSIsInRpbWVab25lRGVsaW1ldGVyIiwiWVkiLCJZWVkiLCJZWVlZIiwiWVlZWVkiLCJNTSIsIkRERCIsIk1NREQiLCJXd3ciLCJXd3dEIiwiSEgiLCJISE1NIiwiSEhNTVNTIiwiZGlydHlPcHRpb25zIiwiYWRkaXRpb25hbERpZ2l0cyIsImRhdGVTdHJpbmdzIiwic3BsaXREYXRlU3RyaW5nIiwicGFyc2VZZWFyUmVzdWx0IiwicGFyc2VZZWFyIiwicmVzdERhdGVTdHJpbmciLCJwYXJzZURhdGUiLCJ0aW1lIiwicGFyc2VUaW1lIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsImRhdGVTdHJpbmciLCJ0aW1lU3RyaW5nIiwicGF0dGVybllZWSIsInBhdHRlcm5ZWVlZWSIsInllYXJTdHJpbmciLCJjZW50dXJ5U3RyaW5nIiwidmFsaWRhdGVEYXRlIiwiZGF5T2ZZZWFyIiwidmFsaWRhdGVEYXlPZlllYXJEYXRlIiwid2VlayIsInZhbGlkYXRlV2Vla0RhdGUiLCJkYXlPZklTT1dlZWtZZWFyIiwiZGF5T2ZXZWVrIiwicGFyc2VGbG9hdCIsInZhbGlkYXRlVGltZSIsInNlY29uZHMiLCJmb3VydGhPZkphbnVhcnlEYXkiLCJkaWZmIiwiREFZU19JTl9NT05USCIsIkRBWVNfSU5fTU9OVEhfTEVBUF9ZRUFSIiwiaXNMZWFwWWVhciIsImlzTGVhcFllYXJJbmRleCIsImRpcnR5RGF0ZSIsImJhc2VUaW1lem9uZU9mZnNldCIsImhhc05lZ2F0aXZlVVRDT2Zmc2V0IiwibWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQiLCJnZXREYXRlTWlsbGlzZWNvbmRzUGFydCIsImhhbmRsZXJzIiwiaGFuZGxlciIsImlzRWRpdG9yIiwicGlja2VyIiwic2VsZWN0ZWREYXRlIiwidGltZV8yNGhyIiwiZW5hYmxlU2Vjb25kcyIsIm5vQ2FsZW5kYXIiLCJkYXRlRm9ybWF0IiwiZmxhdHBpY2tyIiwid3JhcCIsImFsbG93SW5wdXQiLCJvbkNoYW5nZSIsImZvcm1hdERhdGUiLCJtYXhEYXRlIiwibWluRGF0ZSIsImRlZmF1bHRIb3VyIiwiZGVmYXVsdE1pbnV0ZSIsImRpc2FibGVNb2JpbGUiLCJ3ZWVrTnVtYmVycyIsImZvcm1hdCIsImRhdGVUaW1lRm9ybWF0dGVyIiwiZXhwcmVzc2lvbiIsInNlbGVjdGVkRGF0ZXMiLCJ3ZWVrRGF5c1Nob3J0Iiwid2Vla0RheXNMb25nIiwid2Vla2RheSIsIm1vbnRoc1Nob3J0IiwibW9udGhzTG9uZyIsIndlZWtkYXlzIiwic2hvcnRoYW5kIiwibG9uZ2hhbmQiLCJtb250aHMiLCJkYXlzSW5Nb250aCIsImZpcnN0RGF5T2ZXZWVrIiwib3JkaW5hbCIsInJhbmdlU2VwYXJhdG9yIiwid2Vla0FiYnJldmlhdGlvbiIsInNjcm9sbFRpdGxlIiwidG9nZ2xlVGl0bGUiLCJhbVBNIiwieWVhckFyaWFMYWJlbCIsImhvdXJBcmlhTGFiZWwiLCJtaW51dGVBcmlhTGFiZWwiLCJPTl9EQVRFX0NIQU5HRUQiLCJEYXRlVGltZUVkaXRvciIsIl9pbnB1dCIsIl92YWx1ZSIsIlRleHRJbnB1dCIsImNzc0NsYXNzRXJyb3IiLCJjc3NDbGFzc1N1Y2Nlc3MiLCJwYXJlbnRDbGFzcyIsImlzV3JhcHBlZCIsImlucHV0SWQiLCJpbnB1dE5hbWUiLCJvcmlnaW5hbFBhdHRlcm4iLCJkZWZhdWx0UGF0dGVybiIsImdlbmVyYXRlUGF0dGVybkZyb21NYXNrIiwidW5tYXNrSW5wdXQiLCJtYXNrSWZOb3RNYXNrZWQiLCJ1bm1hc2siLCJ0ZXh0SW5wdXQiLCJldmVudFR5cGUiLCJrZXlDb2RlIiwia2V5Q29udGVudCIsImluc2VydFBvc2l0aW9uIiwiZmluZENhcmV0UG9zaXRpb24iLCJtYXNrRXJyb3IiLCJzZWxlY3Rpb25TdGFydCIsInVubWFza2VkVmFsdWUiLCJTdHJpbmdNYXNrIiwic2V0VGltZW91dCIsInBvc2l0aW9uIiwidmFsdWVNYXNrZWQiLCJ2YWx1ZVVubWFza2VkIiwiU1VQUE9SVEVEX01BU0tTIiwiSVNfVU5JQ09ERV9QUk9QRVJUWV9TVVBQT1JURUQiLCJldmFsIiwiaXNNYXNrZWRWYWx1ZSIsImNhY2hlS2V5IiwibWFza0FzQXJyeSIsInJlZ2V4IiwiYyIsIm1hc2tBc0FycmF5IiwibWFza2VkVmFsdWVBc0FycmF5IiwibWFza2VkVmFsdWUiLCJlbEhhc01hc2siLCJOdW1iZXJJbnB1dCIsImNvdW50RGVjaW1hbHMiLCJzcGxpdCIsImFjdHVhbElucHV0IiwiYWN0dWFsSW5wdXRJZCIsImFjdHVhbElucHV0TmFtZSIsImFjdHVhbElucHV0U3RlcCIsImFjdHVhbElucHV0TWF4IiwiYWN0dWFsSW5wdXRNaW4iLCJhY3R1YWxJbnB1dEdyb3VwaW5nU2VwYXJhdG9yIiwiYWN0dWFsSW5wdXREZWNpbWFsU2VwYXJhdG9yIiwiYWN0dWFsSW5wdXRGb3JjZVRyYWlsaW5nWmVyb3MiLCJhY3R1YWxJbnB1dE1hc2siLCJhY3R1YWxJbnB1dENsYXNzZXMiLCJhY3R1YWxJbnB1dFJlcXVpcmVkIiwidW5tYXNrZWRJbnB1dCIsIk51bWJlck1hc2siLCJkZWNpbWFscyIsIndyYXBwZXIiLCJyZXN0b3JlIiwid2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJmYWN0b3J5IiwiZGVmaW5lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhbGwiLCJtIiwiZCIsImdldHRlciIsIm8iLCJuIiwiX19lc01vZHVsZSIsImdldERlZmF1bHQiLCJnZXRNb2R1bGVFeHBvcnRzIiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJwIiwicyIsIl9fd2VicGFja19leHBvcnRzX18iLCJOYU4iLCJjZWlsIiwiZmxvb3IiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX051bWJlck1hc2tfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fRGF0ZU1hc2tfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fdHpUb2tlbml6ZURhdGVfaW5kZXhfanNfXyIsInRpbWV6b25lU3RyaW5nIiwiZXhlYyIsIlVUQyIsImdldFRpbWUiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1N0cmluZ01hc2tfXyIsIlV0aWxzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19EYXRlTWFza19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19TdHJpbmdNYXNrX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1R5cGVzX18iLCJEYXRlcyIsImdldERheU9mWWVhciIsImdldFdlZWtOdW1iZXIiLCJnZXRXZWVrU3RhcnRCeUxvY2FsZSIsIklTX0RBVEVfUkVHRVgiLCJJU19USU1FX1JFR0VYIiwiZml4U2hvcnRJU08iLCJnZXRUaW1lem9uZU9yT2Zmc2V0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX21hc2siLCJ1bmRlZmluZWQiLCJsb29zZSIsIm1hc2tMZW4iLCJzdHIiLCJtZXNzYWdlIiwibWFza0JlZm9yZURlY2ltYWwiLCJtYXNrQWZ0ZXJEZWNpbWFsIiwiZm91bmREZWNpbWFsIiwiY2hhckF0IiwibnVtIiwiX3JvdW5kIiwiYnl0ZXMiLCJfdG9DaGFyQXJyYXkiLCJpbkxlbiIsIm51bUJlZm9yZURlY2ltYWwiLCJudW1BZnRlckRlY2ltYWwiLCJfaSIsIl9pMiIsImZpbGxCeXRlIiwiZmxvYXRCeXRlIiwiaW5Qb3MiLCJvdXRQb3MiLCJmbG9hdFBvcyIsImZpbGxJbml0IiwiaXNOZWdhdGl2ZSIsIl9nZXRTaWduIiwiZW1pdERlY2ltYWwiLCJpbmRleE9mIiwiZm91bmRaZXJvIiwiZm91bmREaWdpdCIsImN1cnJlbmN5IiwibWFza1BvcyIsIl9tIiwiam9pbiIsIl9zaGlmdCIsInByZWNpc2lvbiIsInJldmVyc2VTaGlmdCIsIm51bUFycmF5Iiwicm91bmQiLCJzaWdudW0iLCJjaGFycyIsImNvbmNhdCIsInN1YnN0cmluZyIsIngiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfZGF0ZV9mbnNfdHpfdXRjVG9ab25lZFRpbWVfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV93ZWVrc3RhcnRfXyIsImdldEZ1bGxZZWFyIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJvbmVEYXkiLCJ0ZXN0IiwiRGF0ZVRpbWVGb3JtYXQiLCJyZXNvbHZlZE9wdGlvbnMiLCJwYWQiLCJhYnMiLCJ3ZWVrU3RhcnQiLCJnZXRNb250aCIsImdldERhdGUiLCJkYXlOdW0iLCJnZXRVVENEYXkiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInllYXJTdGFydCIsImdldFVUQ0Z1bGxZZWFyIiwiRGF0ZU1hc2siLCJkYXRlT2JqZWN0IiwidHJhbnNsYXRpb24iLCJfYnVpbGRUcmFuc2xhdGlvbiIsIm1vbnRoU2hvcnQiLCJtb250aExvbmciLCJkYXlTaG9ydCIsImRheUxvbmciLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImhvdXJzMjQiLCJnZXRIb3VycyIsImhvdXJzMTIiLCJnZXREYXkiLCJ3ZWVrTnVtYmVyIiwiayIsInJlcGxhY2UiLCJkYXRlRGV0YWlscyIsIll6Iiwic3Vic3RyIiwiWXMiLCJZbCIsIllwIiwiZnJvbUNoYXJDb2RlIiwiWWQiLCJZIiwiTXoiLCJNcyIsIk1sIiwiTXAiLCJNZCIsIk0iLCJEeiIsIkRzIiwiRGwiLCJEcCIsIkRkIiwiRCIsIkh6IiwiSHMiLCJIbCIsIkhwIiwiSGQiLCJIIiwiaHoiLCJocyIsImhsIiwiaHAiLCJoZCIsImgiLCJteiIsIm1zIiwibWwiLCJtcCIsIm1kIiwic3oiLCJzcyIsInNsIiwic3AiLCJzZCIsIlBQIiwiUCIsInBwIiwiSnoiLCJKcyIsIkpsIiwiSmQiLCJKIiwiV3oiLCJXcyIsIldsIiwiV3AiLCJXZCIsIlciLCJ3eiIsIndzIiwid2wiLCJ3cCIsIndkIiwidyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGliX3R6UGFyc2VUaW1lem9uZV9fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2RhdGVfZm5zX2VzbV9zdWJNaWxsaXNlY29uZHNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdG9EYXRlX18iLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRUb1BhcnRzIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19saWJfdG9JbnRlZ2VyX2luZGV4X2pzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2FkZE1pbGxpc2Vjb25kc19pbmRleF9qc19fIiwiZGlydHlBbW91bnQiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3RvRGF0ZV9pbmRleF9qc19fIiwiRXJyb3IiLCJzdGFjayIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9kYXRlX2Zuc19lc21fbGliX3RvSW50ZWdlcl9pbmRleF9qc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2RhdGVfZm5zX2VzbV9saWJfZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kc19pbmRleF9qc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19saWJfdHpQYXJzZVRpbWV6b25lX18iLCJSYW5nZUVycm9yIiwic2xpY2UiLCJzZXRVVENGdWxsWWVhciIsImlzb1dlZWtZZWFyIiwic2V0U2Vjb25kcyIsImdldFdlZWtTdGFydEJ5TG9jYWxlJDEiLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2FwaV9qc19fIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19sYW5nUmVnaW9uTWFwX2pzX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3JlZ2lvbkRheU1hcF9qc19fIiwiZ2V0V2Vla1N0YXJ0QnlSZWdpb24kMSIsInJlZ2lvbkNvZGUiLCJnZXRXZWVrU3RhcnRCeVJlZ2lvbiIsInJlZ2lvbkRheU1hcCIsImNvZGUiLCJ0b1VwcGVyQ2FzZSIsImxhbmdSZWdpb25NYXAiLCJ0b0xvd2VyQ2FzZSIsImxhbmd1YWdlIiwiY291bnRyeSIsImVuIiwiemgiLCJ6aF9oYW5zIiwiaGFucyIsInd1dSIsImhzbiIsImhhayIsIm5hbiIsImdhbiIsImhpIiwidGUiLCJtciIsInRhIiwiZ3UiLCJrbiIsIm9yIiwicGFfZ3VydSIsImJobyIsImF3YSIsImFzIiwibXdyIiwibWFpIiwibWFnIiwiYmdjIiwiaG5lIiwiZGNjIiwiZHoiLCJ0biIsImFtIiwib20iLCJxdWMiLCJqdiIsInN1IiwibWFkIiwibXNfYXJhYiIsImdhIiwiaGUiLCJqYW0iLCJqYSIsImttIiwia28iLCJsbyIsIm1oIiwibXkiLCJtdCIsIm5lIiwiZmlsIiwiY2ViIiwiaWxvIiwidXIiLCJwYSIsInBhX2FyYWIiLCJhcmFiIiwibGFoIiwicHMiLCJzZF9hcmFiIiwic2tyIiwiZ24iLCJ0aCIsInR0cyIsImFlYiIsInpoX2hhbnQiLCJoYW50Iiwic20iLCJ6dSIsInNuIiwiYXJxIiwiYXIiLCJhcnoiLCJmYSIsImF6X2FyYWIiLCJhcnkiLCJibiIsInJrdCIsImR2IiwiQUciLCJBVEciLCJBUiIsIkFSRyIsIkFTIiwiQVNNIiwiQVUiLCJBVVMiLCJCUiIsIkJSQSIsIkJTIiwiQkhTIiwiQlQiLCJCVE4iLCJCVyIsIkJXQSIsIkJaIiwiQkxaIiwiQ0EiLCJDQU4iLCJDTiIsIkNITiIsIkNPIiwiQ09MIiwiRE0iLCJETUEiLCJETyIsIkRPTSIsIkVUIiwiRVRIIiwiR1QiLCJHVE0iLCJHVSIsIkdVTSIsIkhLIiwiSEtHIiwiSE4iLCJITkQiLCJJRCIsIklETiIsIklFIiwiSVJMIiwiSUwiLCJJU1IiLCJJTiIsIklORCIsIkpNIiwiSkFNIiwiSlAiLCJKUE4iLCJLRSIsIktFTiIsIktIIiwiS0hNIiwiS1IiLCJLT1IiLCJMQSIsIkxBMCIsIk1IIiwiTUhMIiwiTU1SIiwiTU8iLCJNQUMiLCJNVCIsIk1MVCIsIk1YIiwiTUVYIiwiTVoiLCJNT1oiLCJOSSIsIk5JQyIsIk5QIiwiTlBMIiwiTloiLCJOWkwiLCJQQSIsIlBBTiIsIlBFIiwiUEVSIiwiUEgiLCJQSEwiLCJQSyIsIlBBSyIsIlBSIiwiUFJJIiwiUFkiLCJQUlkiLCJTQSIsIlNBVSIsIlNHIiwiU0dQIiwiU1YiLCJTTFYiLCJUSCIsIlRIQSIsIlROIiwiVFVOIiwiVFQiLCJUVE8iLCJUVyIsIlRXTiIsIlVNIiwiVU1JIiwiVVMiLCJVU0EiLCJWRSIsIlZFTiIsIlZJIiwiVklSIiwiV1MiLCJXU00iLCJZRSIsIllFTSIsIlpBIiwiWkFGIiwiWlciLCJaV0UiLCJBRSIsIkFSRSIsIkFGIiwiQUZHIiwiQkgiLCJCSFIiLCJESiIsIkRKSSIsIkRaIiwiRFpBIiwiRUciLCJFR1kiLCJJUSIsIklSUSIsIklSIiwiSVJOIiwiSk8iLCJKT1IiLCJLVyIsIktXVCIsIkxZIiwiTEJZIiwiTUEiLCJNQVIiLCJPTSIsIk9NTiIsIlFBIiwiUUFUIiwiU0QiLCJTRE4iLCJTWSIsIlNZUiIsIkJEIiwiQkdEIiwiTVYiLCJNRFYiLCJpc051bWJlclJlZ2V4IiwiaXNXaGl0ZXNwYWNlUmVnZXgiLCJwdW5jdHVhdGlvbkxpc3QiLCJpc0xvd2VyQ2FzZSIsImlzVXBwZXJDYXNlIiwicGFzc09yVGhyb3dFcnJvciIsIl9jaGFyIiwic3RyTGVuIiwibWFza0J5dGUiLCJfYnl0ZSIsIl9ieXRlMiIsIl9ieXRlMyIsIl9ieXRlNCIsIl9ieXRlNSIsIl9ieXRlNiIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fVHlwZXNfXyIsIlR5cGVzIiwiX251bWJlciIsIl9kYXRlIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJ0IiwiX19zcHJlYWRBcnJheXMiLCJpbCIsInIiLCJhIiwiaiIsImpsIiwiSE9PS1MiLCJkZWZhdWx0cyIsIl9kaXNhYmxlIiwiX2VuYWJsZSIsImFsbG93SW52YWxpZFByZWxvYWQiLCJhbHRGb3JtYXQiLCJhbHRJbnB1dCIsImFsdElucHV0Q2xhc3MiLCJhbmltYXRlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYXJpYURhdGVGb3JtYXQiLCJhdXRvRmlsbERlZmF1bHRUaW1lIiwiY2xpY2tPcGVucyIsImNsb3NlT25TZWxlY3QiLCJjb25qdW5jdGlvbiIsImRlZmF1bHRTZWNvbmRzIiwiZGlzYWJsZSIsImVuYWJsZSIsImVycm9ySGFuZGxlciIsImVyciIsImdldFdlZWsiLCJnaXZlbkRhdGUiLCJzZXRIb3VycyIsInNldERhdGUiLCJ3ZWVrMSIsImhvdXJJbmNyZW1lbnQiLCJpZ25vcmVkRm9jdXNFbGVtZW50cyIsImlubGluZSIsIm1pbnV0ZUluY3JlbWVudCIsIm1vZGUiLCJtb250aFNlbGVjdG9yVHlwZSIsIm5leHRBcnJvdyIsIm5vdyIsIm9uQ2xvc2UiLCJvbkRheUNyZWF0ZSIsIm9uRGVzdHJveSIsIm9uS2V5RG93biIsIm9uTW9udGhDaGFuZ2UiLCJvbk9wZW4iLCJvblBhcnNlQ29uZmlnIiwib25SZWFkeSIsIm9uVmFsdWVVcGRhdGUiLCJvblllYXJDaGFuZ2UiLCJvblByZUNhbGVuZGFyUG9zaXRpb24iLCJwbHVnaW5zIiwicG9zaXRpb25FbGVtZW50IiwicHJldkFycm93Iiwic2hvcnRoYW5kQ3VycmVudE1vbnRoIiwic2hvd01vbnRocyIsInN0YXRpYyIsImVuZ2xpc2giLCJudGgiLCJtb250aEFyaWFMYWJlbCIsImludCIsImJvb2wiLCJkZWJvdW5jZSIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiYXJyYXlpZnkiLCJ0b2dnbGVDbGFzcyIsImVsZW0iLCJjbGFzc05hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJjbGVhck5vZGUiLCJub2RlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiZmluZFBhcmVudCIsInBhcmVudE5vZGUiLCJjcmVhdGVOdW1iZXJJbnB1dCIsImlucHV0Q2xhc3NOYW1lIiwib3B0cyIsIm51bUlucHV0IiwiYXJyb3dVcCIsImFycm93RG93biIsInNldEF0dHJpYnV0ZSIsImFwcGVuZENoaWxkIiwiZ2V0RXZlbnRUYXJnZXQiLCJjb21wb3NlZFBhdGgiLCJwYXRoIiwiZG9Ob3RoaW5nIiwibW9udGhUb1N0ciIsIm1vbnRoTnVtYmVyIiwicmV2Rm9ybWF0IiwiRiIsImRhdGVPYmoiLCJtb250aE5hbWUiLCJzZXRNb250aCIsIkciLCJLIiwic2hvcnRNb250aCIsIlMiLCJVIiwiXyIsInVuaXhTZWNvbmRzIiwid2Vla051bSIsInNldEZ1bGxZZWFyIiwiWiIsIklTT0RhdGUiLCJzZXRNaW51dGVzIiwidSIsInVuaXhNaWxsU2Vjb25kcyIsInkiLCJ0b2tlblJlZ2V4IiwiZm9ybWF0cyIsInRvSVNPU3RyaW5nIiwiY3JlYXRlRGF0ZUZvcm1hdHRlciIsIl9hIiwiX2IiLCJjb25maWciLCJfYyIsImwxMG4iLCJfZCIsImlzTW9iaWxlIiwiZnJtdCIsIm92ZXJyaWRlTG9jYWxlIiwibWFwIiwiYXJyIiwiY3JlYXRlRGF0ZVBhcnNlciIsImdpdmVuRm9ybWF0IiwidGltZWxlc3MiLCJjdXN0b21Mb2NhbGUiLCJwYXJzZWREYXRlIiwiZGF0ZU9yaWciLCJ0b0ZpeGVkIiwiZGF0ZXN0ciIsInRyaW0iLCJtYXRjaGVkIiwib3BzIiwibWF0Y2hJbmRleCIsInJlZ2V4U3RyIiwidG9rZW5fMSIsImlzQmFja1NsYXNoIiwiZXNjYXBlZCIsInZhbCIsImZvckVhY2giLCJjb21wYXJlRGF0ZXMiLCJkYXRlMSIsImRhdGUyIiwiaXNCZXR3ZWVuIiwidHMiLCJ0czEiLCJ0czIiLCJkdXJhdGlvbiIsIkRBWSIsIl9sb29wXzEiLCJhcmdzXzEiLCJERUJPVU5DRURfQ0hBTkdFX01TIiwiRmxhdHBpY2tySW5zdGFuY2UiLCJlbGVtZW50IiwiaW5zdGFuY2VDb25maWciLCJkZWZhdWx0Q29uZmlnIiwiX2hhbmRsZXJzIiwicGx1Z2luRWxlbWVudHMiLCJsb2FkZWRQbHVnaW5zIiwiX2JpbmQiLCJfc2V0SG91cnNGcm9tRGF0ZSIsInNldEhvdXJzRnJvbURhdGUiLCJfcG9zaXRpb25DYWxlbmRhciIsInBvc2l0aW9uQ2FsZW5kYXIiLCJjaGFuZ2VNb250aCIsImNoYW5nZVllYXIiLCJjbGVhciIsImNsb3NlIiwiX2NyZWF0ZUVsZW1lbnQiLCJkZXN0cm95IiwiaXNFbmFibGVkIiwianVtcFRvRGF0ZSIsIm9wZW4iLCJyZWRyYXciLCJ0b2dnbGUiLCJzZXR1cEhlbHBlckZ1bmN0aW9ucyIsInV0aWxzIiwiZ2V0RGF5c0luTW9udGgiLCJ5ciIsImN1cnJlbnRNb250aCIsImN1cnJlbnRZZWFyIiwiaW5pdCIsImlzT3BlbiIsInBhcnNlQ29uZmlnIiwic2V0dXBMb2NhbGUiLCJzZXR1cElucHV0cyIsInNldHVwRGF0ZXMiLCJidWlsZCIsImJpbmRFdmVudHMiLCJsYXRlc3RTZWxlY3RlZERhdGVPYmoiLCJ1cGRhdGVWYWx1ZSIsInNldENhbGVuZGFyV2lkdGgiLCJpc1NhZmFyaSIsInRyaWdnZXJFdmVudCIsImJpbmRUb0luc3RhbmNlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsZW5kYXJDb250YWluZXIiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJkaXNwbGF5IiwiZGF5c0NvbnRhaW5lciIsImRheXNXaWR0aCIsImRheXMiLCJvZmZzZXRXaWR0aCIsIndpZHRoIiwid2Vla1dyYXBwZXIiLCJyZW1vdmVQcm9wZXJ0eSIsInVwZGF0ZVRpbWUiLCJkZWZhdWx0RGF0ZSIsImdldERlZmF1bHRIb3VycyIsInRpbWVXcmFwcGVyIiwicHJldlZhbHVlIiwic2V0SG91cnNGcm9tSW5wdXRzIiwiX2RlYm91bmNlZENoYW5nZSIsImFtcG0ybWlsaXRhcnkiLCJtaWxpdGFyeTJhbXBtIiwiaG91ckVsZW1lbnQiLCJtaW51dGVFbGVtZW50Iiwic2Vjb25kRWxlbWVudCIsImxpbWl0TWluSG91cnMiLCJtaW5UaW1lIiwibWluRGF0ZUhhc1RpbWUiLCJsaW1pdE1heEhvdXJzIiwibWF4VGltZSIsIm1heERhdGVIYXNUaW1lIiwibWluSHIiLCJtaW5NaW51dGVzIiwibWF4SHIiLCJtYXhNaW51dGVzIiwib25ZZWFySW5wdXQiLCJldmVudFRhcmdldCIsImRlbHRhIiwiZXYiLCJhZGRFdmVudExpc3RlbmVyIiwicHVzaCIsInRyaWdnZXJDaGFuZ2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0dXBNb2JpbGUiLCJkZWJvdW5jZWRSZXNpemUiLCJvblJlc2l6ZSIsIm9uTW91c2VPdmVyIiwib250b3VjaHN0YXJ0IiwiZG9jdW1lbnRDbGljayIsImNhcHR1cmUiLCJtb250aE5hdiIsIm9uTW9udGhOYXZDbGljayIsInNlbGVjdERhdGUiLCJ0aW1lQ29udGFpbmVyIiwic2VsVGV4dCIsInRpbWVJbmNyZW1lbnQiLCJvbkJsdXIiLCJqdW1wRGF0ZSIsImp1bXBUbyIsIm9sZFllYXIiLCJvbGRNb250aCIsImJ1aWxkTW9udGhTd2l0Y2giLCJpbmNyZW1lbnROdW1JbnB1dCIsImNvbnRhaW5zIiwiaW5wdXRFbGVtIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwidGFiSW5kZXgiLCJidWlsZE1vbnRoTmF2IiwiaW5uZXJDb250YWluZXIiLCJidWlsZFdlZWtzIiwickNvbnRhaW5lciIsImJ1aWxkV2Vla2RheXMiLCJidWlsZERheXMiLCJidWlsZFRpbWUiLCJjdXN0b21BcHBlbmQiLCJhcHBlbmRUbyIsIm5vZGVUeXBlIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJjcmVhdGVEYXkiLCJkYXlOdW1iZXIiLCJkYXRlSXNFbmFibGVkIiwiZGF5RWxlbWVudCIsIiRpIiwidG9kYXlEYXRlRWxlbSIsImlzRGF0ZVNlbGVjdGVkIiwic2VsZWN0ZWREYXRlRWxlbSIsImlzRGF0ZUluUmFuZ2UiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJmb2N1c09uRGF5RWxlbSIsInRhcmdldE5vZGUiLCJmb2N1cyIsImdldEZpcnN0QXZhaWxhYmxlRGF5Iiwic3RhcnRNb250aCIsImVuZE1vbnRoIiwiY2hpbGRyZW4iLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJnZXROZXh0QXZhaWxhYmxlRGF5IiwiY3VycmVudCIsImdpdmVuTW9udGgiLCJsb29wRGVsdGEiLCJudW1Nb250aERheXMiLCJmb2N1c09uRGF5IiwiZGF5Rm9jdXNlZCIsImlzSW5WaWV3IiwiYWN0aXZlRWxlbWVudCIsInN0YXJ0RWxlbSIsImJ1aWxkTW9udGhEYXlzIiwiZmlyc3RPZk1vbnRoIiwicHJldk1vbnRoRGF5cyIsImlzTXVsdGlNb250aCIsInByZXZNb250aERheUNsYXNzIiwibmV4dE1vbnRoRGF5Q2xhc3MiLCJkYXlJbmRleCIsImRheUNvbnRhaW5lciIsImZyYWciLCJzaG91bGRCdWlsZE1vbnRoIiwibW9udGhzRHJvcGRvd25Db250YWluZXIiLCJpbm5lckhUTUwiLCJzZWxlY3RlZCIsImJ1aWxkTW9udGgiLCJjb250YWluZXIiLCJtb250aE5hdkZyYWdtZW50IiwibW9udGhFbGVtZW50Iiwic2VsZWN0ZWRNb250aCIsInllYXJJbnB1dCIsInRhYmluZGV4IiwieWVhckVsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRpc2FibGVkIiwiYnVpbGRNb250aHMiLCJwcmV2TW9udGhOYXYiLCJ5ZWFyRWxlbWVudHMiLCJtb250aEVsZW1lbnRzIiwibmV4dE1vbnRoTmF2IiwiX19oaWRlUHJldk1vbnRoQXJyb3ciLCJfX2hpZGVOZXh0TW9udGhBcnJvdyIsImN1cnJlbnRZZWFyRWxlbWVudCIsInVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgiLCJzZXBhcmF0b3IiLCJob3VySW5wdXQiLCJtaW51dGVJbnB1dCIsInNlY29uZElucHV0IiwiZ2V0QXR0cmlidXRlIiwid2Vla2RheUNvbnRhaW5lciIsInVwZGF0ZVdlZWtkYXlzIiwic3BsaWNlIiwiaXNPZmZzZXQiLCJfaGlkZVByZXZNb250aEFycm93IiwiX2hpZGVOZXh0TW9udGhBcnJvdyIsInRyaWdnZXJDaGFuZ2VFdmVudCIsInRvSW5pdGlhbCIsIm1vYmlsZUlucHV0IiwiX2luaXRpYWxEYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxhc3RDaGlsZCIsIl90eXBlIiwicmVtb3ZlQXR0cmlidXRlIiwiaXNDYWxlbmRhckVsZW0iLCJldmVudFRhcmdldF8xIiwiaXNDYWxlbmRhckVsZW1lbnQiLCJpc0lucHV0IiwibG9zdEZvY3VzIiwicmVsYXRlZFRhcmdldCIsImlzSWdub3JlZCIsInNvbWUiLCJuZXdZZWFyIiwibmV3WWVhck51bSIsImlzTmV3WWVhciIsImRhdGVUb0NoZWNrIiwiZnJvbSIsInRvIiwiYWxsb3dLZXlkb3duIiwiYWxsb3dJbmxpbmVLZXlkb3duIiwiYmx1ciIsImlzVGltZU9iaiIsInByZXZlbnREZWZhdWx0IiwiZm9jdXNBbmRDbG9zZSIsImRlbHRhXzEiLCJjdHJsS2V5Iiwic3RvcFByb3BhZ2F0aW9uIiwiZWxlbXMiLCJzaGlmdEtleSIsImhvdmVyRGF0ZSIsImZpcnN0RWxlbWVudENoaWxkIiwiaW5pdGlhbERhdGUiLCJyYW5nZVN0YXJ0RGF0ZSIsInJhbmdlRW5kRGF0ZSIsImNvbnRhaW5zRGlzYWJsZWQiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwiZGF5RWxlbSIsIm91dE9mUmFuZ2UiLCJfcG9zaXRpb25FbGVtZW50IiwiY2xpY2siLCJ3YXNPcGVuIiwibWluTWF4RGF0ZVNldHRlciIsImludmVyc2VEYXRlT2JqIiwiYm9vbE9wdHMiLCJ1c2VyQ29uZmlnIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJkYXRhc2V0IiwiZGF0ZXMiLCJwYXJzZURhdGVSdWxlcyIsInRpbWVNb2RlIiwiZGVmYXVsdERhdGVGb3JtYXQiLCJkZWZhdWx0QWx0Rm9ybWF0IiwiX21pbkRhdGUiLCJfbWF4RGF0ZSIsIm1pbk1heFRpbWVTZXR0ZXIiLCJfbWluVGltZSIsIl9tYXhUaW1lIiwiaG9vayIsInBsdWdpbkNvbmYiLCJnZXRJbnB1dEVsZW0iLCJxdWVyeVNlbGVjdG9yIiwibDEwbnMiLCJkZWZhdWx0IiwiY3VzdG9tUG9zaXRpb25FbGVtZW50IiwiY2FsZW5kYXJIZWlnaHQiLCJyZWR1Y2UiLCJhY2MiLCJvZmZzZXRIZWlnaHQiLCJjYWxlbmRhcldpZHRoIiwiY29uZmlnUG9zIiwiY29uZmlnUG9zVmVydGljYWwiLCJjb25maWdQb3NIb3Jpem9udGFsIiwiaW5wdXRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJkaXN0YW5jZUZyb21Cb3R0b20iLCJpbm5lckhlaWdodCIsImJvdHRvbSIsInNob3dPblRvcCIsInRvcCIsInBhZ2VZT2Zmc2V0IiwibGVmdCIsInBhZ2VYT2Zmc2V0IiwiaXNDZW50ZXIiLCJpc1JpZ2h0IiwicmlnaHQiLCJyaWdodE1vc3QiLCJjZW50ZXJNb3N0IiwiZ2V0RG9jdW1lbnRTdHlsZVNoZWV0IiwiYm9keVdpZHRoIiwiY2VudGVyTGVmdCIsImNlbnRlckJlZm9yZSIsImNlbnRlckFmdGVyIiwiY2VudGVySW5kZXgiLCJjc3NSdWxlcyIsImNlbnRlclN0eWxlIiwiaW5zZXJ0UnVsZSIsImVkaXRhYmxlU2hlZXQiLCJzdHlsZVNoZWV0cyIsInNoZWV0IiwiY3JlYXRlU3R5bGVTaGVldCIsImhlYWQiLCJtc01heFRvdWNoUG9pbnRzIiwiaXNTZWxlY3RhYmxlIiwic2hvdWxkQ2hhbmdlTW9udGgiLCJzZWxlY3RlZEluZGV4Iiwic29ydCIsImIiLCJzaW5nbGUiLCJyYW5nZSIsIkNBTExCQUNLUyIsInNldFNlbGVjdGVkRGF0ZSIsImlucHV0RGF0ZSIsInJ1bGUiLCJwcmVsb2FkZWREYXRlIiwibm9kZU5hbWUiLCJwbGFjZWhvbGRlciIsImlucHV0VHlwZSIsIm1vYmlsZUZvcm1hdFN0ciIsImRlZmF1bHRWYWx1ZSIsImhvb2tzIiwiaW5pdEV2ZW50IiwiZ2V0RGF0ZVN0ciIsImRPYmoiLCJpc1ByZXZNb250aCIsImlzTmV4dE1vbnRoIiwiaXNLZXlEb3duIiwiY3VyVmFsdWUiLCJ3aGljaCIsImlzSG91ckVsZW0iLCJpc01pbnV0ZUVsZW0iLCJfZmxhdHBpY2tyIiwibm9kZUxpc3QiLCJub2RlcyIsIkhUTUxFbGVtZW50IiwiaW5zdGFuY2VzIiwiSFRNTENvbGxlY3Rpb24iLCJOb2RlTGlzdCIsInNlbGVjdG9yIiwiTm9kZSIsImxvY2FsaXplIiwic2V0RGVmYXVsdHMiLCJqUXVlcnkiLCJmcF9pbmNyIiwianNzIiwiYWRqU2VsQXR0clJlZ2V4IiwiZG91YmxlQ29sb25Qc2V1ZG9FbFJlZ2V4Iiwic2luZ2xlQ29sb25Qc2V1ZG9FbFJlZ2V4Iiwic2luZ2xlQ29sb25Gb3JQc2V1ZG9FbGVtZW50cyIsImdldFNlbGVjdG9yc0FuZFJ1bGVzIiwicnVsZXMiLCJyZXN1bHRzIiwic2VsZWN0b3JUZXh0IiwidG9Eb3VibGVDb2xvblBzZXVkb0VsZW1lbnRzIiwiZ2V0UnVsZXMiLCJzd2FwQWRqU2VsQXR0ciIsInN3YXBQc2V1ZG9FbFN5bnRheCIsImFkZFJ1bGUiLCJwc2V1ZG9FbGVtZW50UnVsZSIsImFkZFBzZXVkb0VsZW1lbnRSdWxlIiwiYWRkUnVsZVRvU2hlZXQiLCJkb3VibGVDb2xvblNlbGVjdG9yIiwic2luZ2xlQ29sb25TZWxlY3RvciIsInRvU2luZ2xlQ29sb25Qc2V1ZG9FbGVtZW50cyIsInN1Ym1hdGNoMSIsInN1Ym1hdGNoMiIsInN1Ym1hdGNoMyIsInJlbW92ZVJ1bGUiLCJkZWxldGVSdWxlIiwiZXh0ZW5kIiwiZGVzdCIsInNyYyIsImFnZ3JlZ2F0ZVN0eWxlcyIsImFnZ3JlZ2F0ZSIsImRlY2xhcmVkUHJvcGVydGllcyIsImRlY2xhcmVkIiwidG9DYW1lbENhc2UiLCJzd2FwIiwibGFzdEluZGV4Iiwic2V0U3R5bGVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImltcG9ydGFudEluZGV4Iiwic2V0UHJvcGVydHkiLCJzdWJtYXRjaCIsInRyYW5zZm9ybUNhbWVsQ2FzZWRQcm9wZXJ0eU5hbWVzIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsInVuQ2FtZWxDYXNlIiwiSnNzIiwic2hlZXRzIiwiZGVmYXVsdFNoZWV0IiwiZ2V0QWxsIiwiX2NyZWF0ZVNoZWV0IiwiX3JlbW92ZVNoZWV0Iiwic3R5bGVOb2RlIiwicmVsIiwib3duZXJOb2RlIiwiZm9yRG9jdW1lbnQiLCJkZWVwUGFyc2VKc29uIiwianNvblN0cmluZyIsInRoaXNBcmciLCJ0b1N0cmluZ1RhZyIsInNyY1ZhbHVlIiwiY2hyIiwiSUVfUFJPVE8iLCJwcm9jZXNzIiwiYmluZGluZyIsImFyZyIsInNyY0luZGV4IiwiSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCIsInJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzIiwiZXZhbHVhdGUiLCJlc2NhcGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJjc3MiLCJwcm90b2NvbCIsImhvc3QiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCIkMSIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiZ3dfc3RhcnRFZGl0aW5nQ2VsbCIsInJvdyIsImNvbEtleSIsImtleVByZXNzIiwiY2hhclByZXNzIiwicm93UGlubmVkIiwiYXBpIiwiZ2V0Um93Tm9kZSIsImdldERpc3BsYXllZFJvd0F0SW5kZXgiLCJsb2ciLCJzdGFydEVkaXRpbmdDZWxsIiwicm93SW5kZXgiLCJnd19zdG9wRWRpdGluZyIsImNhbmNlbCIsInN0b3BFZGl0aW5nIiwiZ3dfdGFiVG9OZXh0Q2VsbCIsInRhYlRvTmV4dENlbGwiLCJnd190YWJUb1ByZXZpb3VzQ2VsbCIsInRhYlRvUHJldmlvdXNDZWxsIiwiZ3dfc2V0Rm9jdXNlZENlbGwiLCJjb2x1bW4iLCJmbG9hdGluZyIsImdyaWQiLCJnZXRFZGl0aW5nQ2VsbHMiLCJmIiwibGFzdEZvY3VzZWRDZWxsIiwiZ2V0Rm9jdXNlZENlbGwiLCJjb2xJZCIsImNvbHVtbkFwaSIsImdldEFsbEdyaWRDb2x1bW5zIiwiaXNJbnRlZ2VyIiwic2V0Rm9jdXNlZENlbGwiLCJnd19nZXRSYW5nZVNlbGVjdGlvbnMiLCJyYW5nZXMiLCJnZXRDZWxsUmFuZ2VzIiwiZ2V0TW9kZWwiLCJjb2x1bW5zIiwiYWNjdW11bGF0b3IiLCJzdGFySW5kZXgiLCJzdGFydFJvdyIsImVuZFJvdyIsInJvd3MiLCJnZXRSb3ciLCJwYXJzZWROb2RlIiwiZ3dfcGFyc2VBZGRDZWxsUmFuZ2UiLCJwciIsImVuZCIsInJvd0RhdGEiLCJyb3dTdGFydEluZGV4Iiwicm93RW5kSW5kZXgiLCJnd19hZGRDZWxsUmFuZ2UiLCJhZGRDZWxsUmFuZ2UiLCJnd19jbGVhclJhbmdlU2VsZWN0aW9uIiwiY2xlYXJSYW5nZVNlbGVjdGlvbiIsImd3X2dldENoYXJ0VG9vbGJhckl0ZW1zIiwiZ3JpZE9wdGlvbnNXcmFwcGVyIiwiZ3JpZE9wdGlvbnMiLCJjaGFydFRvb2xiYXJJdGVtcyIsImd3X2FkZENoYXJ0UmFuZ2UiLCJjZWxsUmFuZ2UiLCJyZWYiLCJjcmVhdGVSYW5nZUNoYXJ0IiwidXVpZCIsImNyZWF0ZWRfY2hhcnRzIiwiZ3dfZGVzdHJveUNoYXJ0IiwiZGVzdHJveUNoYXJ0IiwiY2hhcnQiLCJnd19leHRlbmRDb2x1bW5EZWZpbml0aW9ucyIsImRlZmluaXRpb25zIiwiZGVmIiwiZmllbGQiLCJjaGVja2JveFNlbGVjdGlvbiIsImd3X2lzU2hvd1NlbGVjdGlvbkNoZWNrYm94IiwiaGVhZGVyQ2hlY2tib3hTZWxlY3Rpb24iLCJnd19pc0hlYWRlckNoZWNrYm94U2VsZWN0aW9uIiwidG9vbHRpcFZhbHVlR2V0dGVyRXhwcmVzc2lvbiIsInRvb2x0aXBWYWx1ZUdldHRlciIsInRvb2x0aXBDb21wb25lbnQiLCJlZGl0YWJsZSIsInJvd1NwYW4iLCJjb2xTcGFuIiwiZ3dfc2V0Q29sdW1uRGVmaW5pdGlvbnMiLCJkZWVwUGFyc2VkRGVmaW5pdGlvbnMiLCJzZXRDb2x1bW5EZWZzIiwiY29sdW1uRGVmcyIsImd3X3NpemVDb2x1bW5zVG9GaXQiLCJjb2x1bW5zQVBJIiwic2l6ZUNvbHVtbnNUb0ZpdCIsImd3X2F1dG9TaXplQ29sdW1ucyIsInNraXBIZWFkZXIiLCJhbGxDb2x1bW5JZHMiLCJnZXRBbGxDb2x1bW5zIiwiYXV0b1NpemVDb2x1bW5zIiwiZ3dfZW5zdXJlQ29sdW1uVmlzaWJsZSIsImNvbHVtbklkIiwiZW5zdXJlQ29sdW1uVmlzaWJsZSIsImd3X3NldENvbHVtbldpZHRoIiwic2V0Q29sdW1uV2lkdGgiLCJnd19waW5Db2x1bW4iLCJwaW4iLCJzZXRDb2x1bW5QaW5uZWQiLCJnd19tb3ZlQ29sdW1uIiwidG9JbmRleCIsIm1vdmVDb2x1bW4iLCJwYXJhbSIsInNob3dTZWxlY3Rpb25DaGVja2JveCIsImdldEFsbERpc3BsYXllZENvbHVtbnMiLCJzaG93SGVhZGVyU2VsZWN0aW9uQ2hlY2tib3giLCJnd19hZGRSb3dHcm91cENvbHVtbiIsImd3X3JlbW92ZVJvd0dyb3VwQ29sdW1uIiwicmVtb3ZlUm93R3JvdXBDb2x1bW5zIiwiZ3dfZ2V0UGl2b3RNb2RlIiwiaXNQaXZvdE1vZGUiLCJnd19zZXRQaXZvdE1vZGUiLCJzZXRQaXZvdE1vZGUiLCJnd19hZGRQaXZvdENvbHVtbnMiLCJnd19yZW1vdmVQaXZvdENvbHVtbnMiLCJyZW1vdmVQaXZvdENvbHVtbnMiLCJnd19hZGRWYWx1ZUNvbHVtbnMiLCJhZGRWYWx1ZUNvbHVtbnMiLCJnd19yZW1vdmVWYWx1ZUNvbHVtbnMiLCJyZW1vdmVWYWx1ZUNvbHVtbnMiLCJnd19zZXRTb3J0TW9kZWwiLCJhc0FycmF5IiwicGFyc2VkTW9kZWwiLCJhcHBseUNvbHVtblN0YXRlIiwiYXBwbHlPcmRlciIsImRlZmF1bHRTdGF0ZSIsImdldENvbHVtblN0YXRlIiwiZ3dfcmVmcmVzaEhlYWRlciIsInJlZHJhd1Jvd3MiLCJnd19zZXRDb2x1bW5WaXNpYmxlIiwidmlzaWJsZSIsInNldENvbHVtbnNWaXNpYmxlIiwiZ3dfYWRkQWxpZ25lZEdyaWQiLCJncmlkSWQiLCJjdXJyZW50R3JpZE9wdGlvbiIsInJlZ2lzdGVyIiwidGFyZ2V0R3JpZE9wdGlvbiIsImFsaWduZWRHcmlkcyIsImd3X3JlbW92ZUFsaWduZWRHcmlkIiwiZ3dfdXBkYXRlQ29udGV4dCIsImd3X2luaXQiLCJsaWNlbnNlIiwiYWdHcmlkIiwiTGljZW5zZU1hbmFnZXIiLCJzZXRMaWNlbnNlS2V5IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250YWluZXJDbG9uZSIsImNsb25lTm9kZSIsInJlcGxhY2VDaGlsZCIsInBhcnNlZE9wdGlvbnMiLCJnd19wYXJzZU9wdGlvbnMiLCJHcmlkIiwiZGVlcFBhcnNlZE9wdGlvbnMiLCJnZXREYXRhUGF0aFRlbXBsYXRlIiwiZ2V0RGF0YVBhdGgiLCJkZWJvdW5jZUR1cmF0aW9uIiwiZmluYWxPcHRpb25zIiwiZ2V0RG9jdW1lbnQiLCJvbkNlbGxFZGl0aW5nU3RhcnRlZCIsIm9uQ2VsbEVkaXRpbmdTdG9wcGVkIiwib25DZWxsVmFsdWVDaGFuZ2VkIiwib25Sb3dFZGl0aW5nU3RhcnRlZCIsIm9uUm93VmFsdWVDaGFuZ2VkIiwib25Sb3dFZGl0aW5nU3RvcHBlZCIsIm9uR3JpZFJlYWR5Iiwib25GaWx0ZXJDaGFuZ2VkIiwiZ2V0Um93SWQiLCJnZXRDb250ZXh0TWVudUl0ZW1zIiwiZ2V0Q2hhcnRUb29sYmFySXRlbXMiLCJwb3B1cFBhcmVudCIsIm9uUm93RG91YmxlQ2xpY2tlZCIsImd3X29uUm93RG91YmxlQ2xpY2tlZCIsIm9uUm93Q2xpY2tlZCIsImd3X29uUm93Q2xpY2tlZCIsIm9uQ2VsbENsaWNrZWQiLCJnd19vbkNlbGxDbGlja0V2ZW50Iiwib25DZWxsRG91YmxlQ2xpY2tlZCIsIm9uU2VsZWN0aW9uQ2hhbmdlZCIsImd3X29uU2VsZWN0aW9uQ2hhbmdlZCIsIm9uUmFuZ2VTZWxlY3Rpb25DaGFuZ2VkIiwiZ3dfb25SYW5nZVNlbGVjdGlvbkNoYW5nZWQiLCJjb21wb25lbnRzIiwiQWdHcmlkQ29tcG9uZW50cyIsIkhUTUxUb29sdGlwIiwiU3VnZ2VzdGlvbkVkaXRvciIsIm5hdmlnYXRlVG9OZXh0Q2VsbCIsInRyZWVEYXRhIiwiZ2V0RGF0YVBhdGhUZW1wbGF0ZUNvbXBsaWVkIiwiZ3dfc2V0U3R5bGUiLCJnd19yZW1vdmVTdHlsZSIsImd3X2dldENvbnRleHRNZW51IiwiYnVpbGRDb250ZXh0TWVudUFjdGlvbiIsImRldGFpbCIsInYiLCJwYXJzZU1lbnUiLCJtZW51IiwiY29udGV4dE1lbnUiLCJnd19zaG93TG9hZGluZ092ZXJsYXkiLCJzaG93TG9hZGluZ092ZXJsYXkiLCJnd19zaG93Tm9Sb3dzT3ZlcmxheSIsInNob3dOb1Jvd3NPdmVybGF5IiwiZ3dfaGlkZU92ZXJsYXkiLCJoaWRlT3ZlcmxheSIsImd3X3NldFF1aWNrRmlsdGVyIiwic2V0UXVpY2tGaWx0ZXIiLCJnd19leHBhbmRBbGwiLCJleHBhbmRBbGwiLCJnd19jb2xsYXBzZUFsbCIsImNvbGxhcHNlQWxsIiwiZ3dfZW5zdXJlSW5kZXhWaXNpYmxlIiwiZW5zdXJlTm9kZVZpc2libGUiLCJlbnN1cmVJbmRleFZpc2libGUiLCJnd19uYXZpZ2F0ZVRvTmV4dFJvdyIsInByZXZpb3VzQ2VsbCIsInByZXZpb3VzQ2VsbFBvc2l0aW9uIiwic3VnZ2VzdGVkTmV4dENlbGwiLCJuZXh0Q2VsbFBvc2l0aW9uIiwiS0VZX1VQIiwiS0VZX0RPV04iLCJLRVlfTEVGVCIsIktFWV9SSUdIVCIsImdldEZpcnN0RGlzcGxheWVkUm93Iiwic2V0U2VsZWN0ZWQiLCJmb3JFYWNoTm9kZSIsImdldExhc3REaXNwbGF5ZWRSb3ciLCJnd19nZXRSb3dOb2RlSWQiLCJfaWQiLCJyb3dOb2RlSWQiLCJnZXRSb3dOb2RlSWQiLCJnd19zZXRSb3dEYXRhIiwianNvbiIsInNldFJvd0RhdGEiLCJnd191cGRhdGVSb3dEYXRhIiwidHJhbnNhY3Rpb24iLCJiYXRjaFVwZGF0ZSIsIml0ZW1zIiwicmV2ZXJzZSIsImFwcGx5VHJhbnNhY3Rpb24iLCJhcHBseVRyYW5zYWN0aW9uQXN5bmMiLCJnd19zZXRSb3dzSGVpZ2h0IiwiaGVpZ2h0Iiwic2V0Um93SGVpZ2h0Iiwib25Sb3dIZWlnaHRDaGFuZ2VkIiwiZ3dfc2V0Um93SGVpZ2h0IiwiZ3dfcmVzZXRSb3dIZWlnaHRzIiwicmVzZXRSb3dIZWlnaHRzIiwiZ3dfc2V0U2VsZWN0ZWRSb3dzIiwiZm9yRWFjaE5vZGVBZnRlckZpbHRlckFuZFNvcnQiLCJleHBhbmRlZCIsIm9uR3JvdXBFeHBhbmRlZE9yQ29sbGFwc2VkIiwiZ3dfc2VsZWN0QWxsIiwiZmlsdGVyZWQiLCJzZWxlY3RBbGxGaWx0ZXJlZCIsInNlbGVjdEFsbCIsImd3X2Rlc2VsZWN0QWxsIiwiZGVzZWxlY3RBbGxGaWx0ZXJlZCIsImRlc2VsZWN0QWxsIiwiZ3dfZ2V0U2VsZWN0ZWRSb3dzIiwiZ2V0U2VsZWN0ZWROb2RlcyIsImd3X2dldFNlbGVjdGVkUm93IiwiZ3dfZ2V0Um93IiwiZ3dfZ2V0Um93cyIsInBoYXNlIiwiZmlsdGVyRXhwcmVzc2lvbiIsImdyb3VwIiwiY2FuUHJvY2VzcyIsIm9sZFZhbHVlIiwiY29sRGVmIiwiZ3JpZEFwaSIsImNvbHVtbkdyb3VwIiwiZ3dfcmVkcmF3Um93cyIsImd3X3NldFBpbm5lZFRvcFJvd0RhdGEiLCJzZXRQaW5uZWRUb3BSb3dEYXRhIiwiZ3dfc2V0UGlubmVkQm90dG9tUm93RGF0YSIsInNldFBpbm5lZEJvdHRvbVJvd0RhdGEiLCJnd19zZXRTdGF0ZSIsInNldENvbHVtbkdyb3VwU3RhdGUiLCJncm91cHMiLCJzZXRGaWx0ZXJNb2RlbCIsImZpbHRlcnMiLCJnd19nZXRTdGF0ZSIsImdldENvbHVtbkdyb3VwU3RhdGUiLCJnZXRGaWx0ZXJNb2RlbCIsImd3X3NldFN0YXR1c2JhckNvbXBvbmVudFZpc2liaWxpdHkiLCJnZXRTdGF0dXNQYW5lbCIsInNldFZpc2libGUiLCJnd19zZXRTaWRlQmFyVmlzaWJsZSIsInNldFNpZGVCYXJWaXNpYmxlIiwiZ3dfb3BlblRvb2xwYW5lbCIsInRvb2xwYW5lbElkIiwib3BlblRvb2xQYW5lbCIsImd3X2Nsb3NlVG9vbHBhbmVsIiwiY2xvc2VUb29sUGFuZWwiLCJnd19zZXRGdW5jdGlvbnNSZWFkT25seSIsInNldEZ1bmN0aW9uc1JlYWRPbmx5IiwiZ3dfZ2V0RG9jdW1lbnQiLCIkZG9jIiwiZ3dfZ2V0V2luZG93IiwiJHduZCIsImd3X2VzY2FwZSIsImd3X3V1aWQiLCJyYW5kb20iLCJnd19nZXRHcmlkIiwiQkJqR3JpZEV4V2lkZ2V0IiwicmVnaXN0ZXJlZEdyaWRzIiwiZ3dfYWRkR3JpZCIsImVHdWkiLCJpc0hlYWRlciIsImlzR3JvdXBlZEhlYWRlciIsInRoZW1lIiwiZUdyaWREaXYiLCJlbmRzV2l0aCIsInRvb2x0aXBGaWVsZCIsInBhc3NlZFBhcmFtcyIsInRleHRQYXR0ZXJuIiwidGV4dFJlcXVpcmVkIiwidGV4dFRpdGxlIiwiZGVib3VuY2VXYWl0TXMiLCJfZm9jdXNBZnRlckF0dGFjaGVkIiwiY2VsbFN0YXJ0ZWRFZGl0IiwiX2hpZ2hsaWdodEFsbE9uRm9jdXMiLCJfb25DaGFuZ2UiLCJfcmVuZGVySXRlbVRlbXBsYXRlIiwiaXRlbVRlbXBsYXRlIiwiX3JlbmRlckdyb3VwVGVtcGxhdGUiLCJncm91cFRlbXBsYXRlIiwiX2F1dG9jb21wbGV0ZSIsInByZXZlbnRTdWJtaXQiLCJmZXRjaCIsIl9vbkF1dG9jb21wbGV0ZUZldGNoIiwib25TZWxlY3QiLCJfb25BdXRvY29tcGxldGVTZWxlY3QiLCJyZW5kZXJHcm91cCIsIl9vbkF1dG9jb21wbGV0ZVJlbmRlckdyb3VwIiwicmVuZGVyIiwiX29uQXV0b2NvbXBsZXRlUmVuZGVySXRlbSIsImN1c3RvbWl6ZSIsIl9vbkF1dG9jb21wbGV0ZUN1c3RvbWl6ZSIsImVtcHR5TXNnIiwiZW1wdHlNZXNzYWdlIiwibWluTGVuZ3RoIiwic2hvd09uRm9jdXMiLCJmb2N1c0luIiwiYWxsb3dDdXN0b21WYWx1ZXMiLCJfdmFsaWRhdGVJbnB1dCIsIl9sYXN0RmV0Y2hlZERhdGEiLCJmaWx0ZXJlZEl0ZW1zIiwidGV4dCIsInN1cHByZXNzU3VnZ2VzdGlvbk9uSW52YWxpZElucHV0IiwiZXZlbnRJZCIsImJhc2lzRGlzcGF0Y2hDdXN0b21FdmVudCIsImVHcmlkQ2VsbCIsImN1cnJlbnRWYWx1ZSIsImRpdiIsImdyb3VwTmFtZSIsImlucHV0UmVjdCIsIm1heEhlaWdodCIsImNoZWNrVmFsaWRpdHkiLCJHV19FVkVOVF9ST1dfU0VMRUNUIiwiR1dfRVZFTlRfUk9XX0NMSUNLIiwiR1dfRVZFTlRfUk9XX0RPVUJMRV9DTElDSyIsIkdXX0VWRU5UX0NFTExfQ0xJQ0siLCJHV19FVkVOVF9DRUxMX0RPVUJMRV9DTElDSyIsIkdXX0VWRU5UX0NFTExfRURJVElOR19TVEFSVEVEIiwiR1dfRVZFTlRfQ0VMTF9FRElUSU5HX1NUT1BQRUQiLCJHV19FVkVOVF9DRUxMX1ZBTFVFX0NIQU5HRUQiLCJHV19FVkVOVF9ST1dfRURJVElOR19TVEFSVEVEIiwiR1dfRVZFTlRfUk9XX0VESVRJTkdfU1RPUFBFRCIsIkdXX0VWRU5UX1JPV19WQUxVRV9DSEFOR0VEIiwiR1dfRVZFTlRfR1JJRF9TVEFURV9DSEFOR0UiLCJHV19FVkVOVF9SQU5HRV9TRUxFQ1RJT05fQ0hBTkdFRCIsIkdXX0VWRU5UX0tFWVBSRVNTIiwiR1dfRVZFTlRfRklMVEVSX0NIQU5HRUQiLCJHV19FVkVOVF9SRUFEWSIsIkNFTExfRURJVElOR19FVkVOVFNfTUFQIiwiY2VsbEVkaXRpbmdTdGFydGVkIiwiY2VsbEVkaXRpbmdTdG9wcGVkIiwiY2VsbFZhbHVlQ2hhbmdlZCIsIlJPV19FRElUSU5HX0VWRU5UU19NQVAiLCJyb3dFZGl0aW5nU3RhcnRlZCIsInJvd0VkaXRpbmdTdG9wcGVkIiwicm93VmFsdWVDaGFuZ2VkIiwiZ3dfb25DZWxsRWRpdGluZ0V2ZW50IiwiY3IiLCJnd19vblJvd0VkaXRpbmdFdmVudCIsImd3X29uRmlsdGVyQ2hhbmdlZCIsImd3X29uS2V5ZG93biIsImtleWRvd25FdmVudCIsImtjIiwiYWsiLCJhbHRLZXkiLCJzayIsImNrIiwiZ3dfb25SZWFkeUV2ZW50IiwiX2UiLCJzdGF0ZURlYm91bmNlIiwiY2hhbmdlRXZlbnQiLCJDdXN0b21FdmVudCIsIkNFTExfQ0xJQ0tJTkdfRVZFTlRTX01BUCIsImNlbGxDbGlja2VkIiwiY2VsbERvdWJsZUNsaWNrZWQiLCJnd19vblN0YXRlQ2hhbmdlZCIsImd3X2RlYm91bmNlIiwibGF0ZXIiLCJjYWxsTm93IiwiZ3dfc2VuZEV2ZW50IiwicGF5bG9hZCIsInJlZ2lzdGVyZWRJbnRlcmVzdHMiLCJpbnRlcmVzdHMiLCJpbmNsdWRlcyIsInBsYXRmb3JtIiwiaHRtbHZpZXdJZCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJnd19wYXJzZU5vZGUiLCJjaGlsZEluZGV4IiwiZ3dfcGFyc2VOb2RlRnJvbUV2ZW50IiwiZ3dfY29tcGlsZUV4cHJlc3Npb24iLCJleHByZXNzaW9uQ2FjaGUiLCJmdW5jdGlvbkJvZHkiLCJ0aGVGdW5jdGlvbiIsImd3X2V4ZWN1dGVFeHByZXNzaW9uIiwiamF2YVNjcmlwdEZ1bmN0aW9uIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJpbml0Q3VzdG9tRXZlbnQiLCJFdmVudCJdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xGQzs7Ozs7O0FBaUVELFdBQXdCLFlBQXhCLENBQWlFLFFBQWpFLEVBQWtHOztBQUc5RixRQUFNLEdBQUcsR0FBRyxRQUFaO0FBRUEsUUFBTSxTQUFTLEdBQW1CLEdBQUcsQ0FBQyxhQUFKLENBQWtCLEtBQWxCLENBQWxDO0FBQ0EsUUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLEtBQWpDO0FBQ0EsUUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQTVCO0FBQ0EsUUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLE9BQVYsQ0FBa0IsU0FBbEIsTUFBaUMsQ0FBQyxDQUFsQyxJQUF1QyxTQUFTLENBQUMsT0FBVixDQUFrQixRQUFsQixNQUFnQyxDQUFDLENBQTlGO0FBQ0EsUUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQVQsSUFBMkIsQ0FBbEQ7QUFDQSxRQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBVCxJQUEwQixLQUFoRCxDQVY4RixDOztBQWE5RixRQUFNLGNBQWMsR0FBRyxhQUFhLEdBQUcsT0FBSCxHQUFhLE9BQWpEO0FBRUEsUUFBSSxLQUFLLEdBQVEsRUFBakI7QUFDQSxRQUFJLFVBQVUsR0FBRyxFQUFqQjtBQUNBLFFBQUksTUFBTSxHQUFHLENBQWI7QUFDQSxRQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBN0I7QUFDQSxRQUFJLFFBQUo7QUFDQSxRQUFJLGVBQWUsR0FBRyxDQUF0QjtBQUNBLFFBQUksYUFBSjs7QUFFQSxRQUFJLFFBQVEsQ0FBQyxTQUFULEtBQXVCLFNBQTNCLEVBQXNDO0FBQ2xDLFlBQU0sR0FBRyxRQUFRLENBQUMsU0FBbEI7QUFDSDs7QUFFRCxRQUFJLENBQUMsUUFBUSxDQUFDLEtBQWQsRUFBcUI7QUFDakIsWUFBTSxJQUFJLEtBQUosQ0FBVSxpQkFBVixDQUFOO0FBQ0g7O0FBRUQsUUFBTSxLQUFLLEdBQXFCLFFBQVEsQ0FBQyxLQUF6QztBQUVBLGFBQVMsQ0FBQyxTQUFWLEdBQXNCLG1CQUFtQixRQUFRLENBQUMsU0FBVCxJQUFzQixFQUF6QyxDQUF0QixDQWpDOEYsQzs7QUFvQzlGLGtCQUFjLENBQUMsUUFBZixHQUEwQixVQUExQjs7Ozs7QUFLQSxhQUFTLE1BQVQsR0FBZTtBQUNYLFVBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxVQUF6Qjs7QUFDQSxVQUFJLE1BQUosRUFBWTtBQUNSLGNBQU0sQ0FBQyxXQUFQLENBQW1CLFNBQW5CO0FBQ0g7QUFDSjs7Ozs7O0FBS0QsYUFBUyxrQkFBVCxHQUEyQjtBQUN2QixVQUFJLGFBQUosRUFBbUI7QUFDZixjQUFNLENBQUMsWUFBUCxDQUFvQixhQUFwQjtBQUNIO0FBQ0o7Ozs7OztBQUtELGFBQVMsTUFBVCxHQUFlO0FBQ1gsVUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFmLEVBQTJCO0FBQ3ZCLFdBQUcsQ0FBQyxJQUFKLENBQVMsV0FBVCxDQUFxQixTQUFyQjtBQUNIO0FBQ0o7Ozs7OztBQUtELGFBQVMsa0JBQVQsR0FBMkI7QUFDdkIsYUFBTyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQW5CO0FBQ0g7Ozs7OztBQUtELGFBQVMsS0FBVCxHQUFjOztBQUVWLHFCQUFlO0FBRWYsV0FBSyxHQUFHLEVBQVI7QUFDQSxnQkFBVSxHQUFHLEVBQWI7QUFDQSxjQUFRLEdBQUcsU0FBWDtBQUNBLFlBQU07QUFDVDs7Ozs7O0FBS0QsYUFBUyxjQUFULEdBQXVCO0FBQ25CLFVBQUksQ0FBQyxrQkFBa0IsRUFBdkIsRUFBMkI7QUFDdkI7QUFDSDs7QUFFRCxvQkFBYyxDQUFDLE1BQWYsR0FBd0IsTUFBeEI7QUFDQSxvQkFBYyxDQUFDLEtBQWYsR0FBdUIsS0FBSyxDQUFDLFdBQU4sR0FBb0IsSUFBM0M7QUFFQSxVQUFJLFNBQVMsR0FBRyxDQUFoQjtBQUNBLFVBQUksU0FBSjs7QUFFQSxlQUFTLElBQVQsR0FBYTtBQUNULFlBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxlQUFsQjtBQUNBLFlBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFOLElBQW1CLEdBQUcsQ0FBQyxJQUFKLENBQVMsU0FBNUIsSUFBeUMsQ0FBM0Q7QUFDQSxZQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBTixJQUFvQixHQUFHLENBQUMsSUFBSixDQUFTLFVBQTdCLElBQTJDLENBQTlEO0FBQ0EsWUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFdBQVAsSUFBc0IsS0FBSyxDQUFDLFNBQTlDO0FBQ0EsWUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVAsSUFBc0IsS0FBSyxDQUFDLFVBQS9DO0FBRUEsaUJBQVMsR0FBRyxLQUFLLENBQUMscUJBQU4sRUFBWjtBQUVBLFlBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFWLEdBQWdCLEtBQUssQ0FBQyxZQUF0QixHQUFxQyxTQUFyQyxHQUFpRCxTQUE3RDtBQUNBLFlBQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFWLEdBQWlCLFVBQWpCLEdBQThCLFVBQTNDO0FBRUEsc0JBQWMsQ0FBQyxHQUFmLEdBQXFCLEdBQUcsR0FBRyxJQUEzQjtBQUNBLHNCQUFjLENBQUMsSUFBZixHQUFzQixJQUFJLEdBQUcsSUFBN0I7QUFFQSxpQkFBUyxHQUFHLE1BQU0sQ0FBQyxXQUFQLElBQXNCLFNBQVMsQ0FBQyxHQUFWLEdBQWdCLEtBQUssQ0FBQyxZQUE1QyxDQUFaOztBQUVBLFlBQUksU0FBUyxHQUFHLENBQWhCLEVBQW1CO0FBQ2YsbUJBQVMsR0FBRyxDQUFaO0FBQ0g7O0FBRUQsc0JBQWMsQ0FBQyxHQUFmLEdBQXFCLEdBQUcsR0FBRyxJQUEzQjtBQUNBLHNCQUFjLENBQUMsTUFBZixHQUF3QixFQUF4QjtBQUNBLHNCQUFjLENBQUMsSUFBZixHQUFzQixJQUFJLEdBQUcsSUFBN0I7QUFDQSxzQkFBYyxDQUFDLFNBQWYsR0FBMkIsU0FBUyxHQUFHLElBQXZDO0FBQ0gsT0FwQ2tCLEM7OztBQXVDbkIsVUFBSTtBQUNKLFVBQUk7O0FBRUosVUFBSSxRQUFRLENBQUMsU0FBVCxJQUFzQixTQUExQixFQUFxQztBQUNqQyxnQkFBUSxDQUFDLFNBQVQsQ0FBbUIsS0FBbkIsRUFBMEIsU0FBMUIsRUFBcUMsU0FBckMsRUFBZ0QsU0FBaEQ7QUFDSDtBQUNKOzs7Ozs7QUFLRCxhQUFTLE1BQVQsR0FBZTs7QUFHWCxhQUFPLFNBQVMsQ0FBQyxVQUFqQixFQUE2QjtBQUN6QixpQkFBUyxDQUFDLFdBQVYsQ0FBc0IsU0FBUyxDQUFDLFVBQWhDO0FBQ0gsT0FMVSxDOzs7QUFRWCxVQUFJLE1BQU0sR0FBRyxnQkFBUyxJQUFULEVBQWtCLFlBQWxCLEVBQXNDO0FBQy9DLFlBQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxhQUFKLENBQWtCLEtBQWxCLENBQXBCO0FBQ0EsbUJBQVcsQ0FBQyxXQUFaLEdBQTBCLElBQUksQ0FBQyxLQUFMLElBQWMsRUFBeEM7QUFDQSxlQUFPLFdBQVA7QUFDSCxPQUpEOztBQUtBLFVBQUksUUFBUSxDQUFDLE1BQWIsRUFBcUI7QUFDakIsY0FBTSxHQUFHLFFBQVEsQ0FBQyxNQUFsQjtBQUNILE9BZlUsQzs7O0FBa0JYLFVBQUksV0FBVyxHQUFHLHFCQUFTLFNBQVQsRUFBNEIsWUFBNUIsRUFBZ0Q7QUFDOUQsWUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLGFBQUosQ0FBa0IsS0FBbEIsQ0FBakI7QUFDQSxnQkFBUSxDQUFDLFdBQVQsR0FBdUIsU0FBdkI7QUFDQSxlQUFPLFFBQVA7QUFDSCxPQUpEOztBQUtBLFVBQUksUUFBUSxDQUFDLFdBQWIsRUFBMEI7QUFDdEIsbUJBQVcsR0FBRyxRQUFRLENBQUMsV0FBdkI7QUFDSDs7QUFFRCxVQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsc0JBQUosRUFBakI7QUFDQSxVQUFJLFNBQVMsR0FBRyxNQUFoQjtBQUVBLFdBQUssQ0FBQyxPQUFOLENBQWMsVUFBUyxJQUFULEVBQWdCO0FBQzFCLFlBQUksSUFBSSxDQUFDLEtBQUwsSUFBYyxJQUFJLENBQUMsS0FBTCxLQUFlLFNBQWpDLEVBQTRDO0FBQ3hDLG1CQUFTLEdBQUcsSUFBSSxDQUFDLEtBQWpCO0FBQ0EsY0FBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFOLEVBQWEsVUFBYixDQUE1Qjs7QUFDQSxjQUFJLFFBQUosRUFBYztBQUNWLG9CQUFRLENBQUMsU0FBVCxJQUFzQixRQUF0QjtBQUNBLG9CQUFRLENBQUMsV0FBVCxDQUFxQixRQUFyQjtBQUNIO0FBQ0o7O0FBQ0QsWUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUQsRUFBTyxVQUFQLENBQWxCOztBQUNBLFlBQUksR0FBSixFQUFTO0FBQ0wsYUFBRyxDQUFDLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFVBQVMsRUFBVCxFQUF1QjtBQUNqRCxvQkFBUSxDQUFDLFFBQVQsQ0FBa0IsSUFBbEIsRUFBd0IsS0FBeEI7QUFDQSxpQkFBSztBQUNMLGNBQUUsQ0FBQyxjQUFIO0FBQ0EsY0FBRSxDQUFDLGVBQUg7QUFDSCxXQUxEOztBQU1BLGNBQUksSUFBSSxLQUFLLFFBQWIsRUFBdUI7QUFDbkIsZUFBRyxDQUFDLFNBQUosSUFBaUIsV0FBakI7QUFDSDs7QUFDRCxrQkFBUSxDQUFDLFdBQVQsQ0FBcUIsR0FBckI7QUFDSDtBQUNKLE9BdEJEO0FBdUJBLGVBQVMsQ0FBQyxXQUFWLENBQXNCLFFBQXRCOztBQUNBLFVBQUksS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQixZQUFJLFFBQVEsQ0FBQyxRQUFiLEVBQXVCO0FBQ25CLGNBQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxhQUFKLENBQWtCLEtBQWxCLENBQWQ7QUFDQSxlQUFLLENBQUMsU0FBTixHQUFrQixPQUFsQjtBQUNBLGVBQUssQ0FBQyxXQUFOLEdBQW9CLFFBQVEsQ0FBQyxRQUE3QjtBQUNBLG1CQUFTLENBQUMsV0FBVixDQUFzQixLQUF0QjtBQUNILFNBTEQsTUFLTztBQUNILGVBQUs7QUFDTDtBQUNIO0FBQ0o7O0FBRUQsWUFBTTtBQUNOLG9CQUFjO0FBRWQsa0JBQVk7QUFDZjs7QUFFRCxhQUFTLGlCQUFULEdBQTBCO0FBQ3RCLFVBQUksa0JBQWtCLEVBQXRCLEVBQTBCO0FBQ3RCLGNBQU07QUFDVDtBQUNKOztBQUVELGFBQVMsa0JBQVQsR0FBMkI7QUFDdkIsdUJBQWlCO0FBQ3BCOztBQUVELGFBQVMsa0JBQVQsQ0FBNEIsQ0FBNUIsRUFBb0M7QUFDaEMsVUFBSSxDQUFDLENBQUMsTUFBRixLQUFhLFNBQWpCLEVBQTRCO0FBQ3hCLHlCQUFpQjtBQUNwQixPQUZELE1BRU87QUFDSCxTQUFDLENBQUMsY0FBRjtBQUNIO0FBQ0o7O0FBRUQsYUFBUyxpQkFBVCxDQUEyQixFQUEzQixFQUE0QztBQUN4QyxVQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsS0FBSCxJQUFZLEVBQUUsQ0FBQyxPQUFmLElBQTBCLENBQTFDO0FBRUEsVUFBTSxNQUFNLEdBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFmOztBQUNBLFdBQWtCLDZCQUFsQixFQUFrQixvQkFBbEIsRUFBa0IsSUFBbEIsRUFBMEI7QUFBckIsWUFBTSxHQUFHLGVBQVQ7O0FBQ0QsWUFBSSxPQUFPLEtBQUssR0FBaEIsRUFBcUI7QUFDakI7QUFDSDtBQUNKOztBQUVELFVBQUksT0FBTztBQUFBO0FBQVAsU0FBc0IsT0FBTztBQUFBO0FBQWpDLFFBQStDO0FBQzNDO0FBQ0gsU0FadUMsQzs7O0FBZXhDLFVBQUksT0FBTztBQUFBO0FBQVAsU0FBeUIsa0JBQWtCLEVBQS9DLEVBQW1EO0FBQy9DO0FBQ0g7O0FBRUQsZ0JBQVU7QUFBQTtBQUFBLE9BQVY7QUFDSDs7Ozs7O0FBS0QsYUFBUyxZQUFULEdBQXFCO0FBQ2pCLFVBQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxzQkFBVixDQUFpQyxVQUFqQyxDQUFqQjs7QUFDQSxVQUFJLFFBQVEsQ0FBQyxNQUFULEdBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLFlBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFELENBQXRCLENBRHFCLEM7O0FBSXJCLFlBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxzQkFBekI7O0FBQ0EsWUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLFNBQVQsQ0FBbUIsT0FBbkIsQ0FBMkIsT0FBM0IsTUFBd0MsQ0FBQyxDQUFyRCxJQUEwRCxDQUFDLFFBQVEsQ0FBQyxzQkFBeEUsRUFBZ0c7QUFDNUYsaUJBQU8sR0FBRyxRQUFWO0FBQ0g7O0FBRUQsWUFBSSxPQUFPLENBQUMsU0FBUixHQUFvQixTQUFTLENBQUMsU0FBbEMsRUFBNkM7QUFDekMsbUJBQVMsQ0FBQyxTQUFWLEdBQXNCLE9BQU8sQ0FBQyxTQUE5QjtBQUNILFNBRkQsTUFFTztBQUNILGNBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxTQUFSLEdBQW9CLE9BQU8sQ0FBQyxZQUFqRDtBQUNBLGNBQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxTQUFWLEdBQXNCLFNBQVMsQ0FBQyxZQUF4RDs7QUFDQSxjQUFJLFlBQVksR0FBRyxlQUFuQixFQUFvQztBQUNoQyxxQkFBUyxDQUFDLFNBQVYsSUFBdUIsWUFBWSxHQUFHLGVBQXRDO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7Ozs7OztBQUtELGFBQVMsVUFBVCxHQUFtQjtBQUNmLFVBQUksS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQixnQkFBUSxHQUFHLFNBQVg7QUFDSCxPQUZELE1BRU87QUFDSCxZQUFJLFFBQVEsS0FBSyxLQUFLLENBQUMsQ0FBRCxDQUF0QixFQUEyQjtBQUN2QixrQkFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTixHQUFlLENBQWhCLENBQWhCO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsZUFBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTixHQUFlLENBQTVCLEVBQStCLENBQUMsR0FBRyxDQUFuQyxFQUFzQyxDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLGdCQUFJLFFBQVEsS0FBSyxLQUFLLENBQUMsQ0FBRCxDQUFsQixJQUF5QixDQUFDLEtBQUssQ0FBbkMsRUFBc0M7QUFDbEMsc0JBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUwsQ0FBaEI7QUFDQTtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0o7Ozs7OztBQUtELGFBQVMsVUFBVCxHQUFtQjtBQUNmLFVBQUksS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNsQixnQkFBUSxHQUFHLFNBQVg7QUFDSDs7QUFDRCxVQUFJLENBQUMsUUFBRCxJQUFhLFFBQVEsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUFoQixDQUFuQyxFQUF1RDtBQUNuRCxnQkFBUSxHQUFHLEtBQUssQ0FBQyxDQUFELENBQWhCO0FBQ0E7QUFDSDs7QUFDRCxXQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFJLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBcEMsRUFBd0MsQ0FBQyxFQUF6QyxFQUE2QztBQUN6QyxZQUFJLFFBQVEsS0FBSyxLQUFLLENBQUMsQ0FBRCxDQUF0QixFQUEyQjtBQUN2QixrQkFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBTCxDQUFoQjtBQUNBO0FBQ0g7QUFDSjtBQUNKOztBQUVELGFBQVMsbUJBQVQsQ0FBNkIsRUFBN0IsRUFBOEM7QUFDMUMsVUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUgsSUFBWSxFQUFFLENBQUMsT0FBZixJQUEwQixDQUExQzs7QUFFQSxVQUFJLE9BQU87QUFBQTtBQUFQLFNBQXVCLE9BQU87QUFBQTtBQUE5QixTQUFnRCxPQUFPO0FBQUE7QUFBM0QsUUFBMEU7QUFDdEUsY0FBTSxvQkFBb0IsR0FBRyxrQkFBa0IsRUFBL0M7O0FBRUEsY0FBSSxPQUFPO0FBQUE7QUFBWCxZQUEwQjtBQUN0QixtQkFBSztBQUNSLGFBRkQsTUFFTztBQUNILGdCQUFJLENBQUMsa0JBQUQsSUFBdUIsS0FBSyxDQUFDLE1BQU4sR0FBZSxDQUExQyxFQUE2QztBQUN6QztBQUNIOztBQUNELG1CQUFPO0FBQUE7QUFBUCxjQUNNLFVBQVUsRUFEaEIsR0FFTSxVQUFVLEVBRmhCO0FBR0Esa0JBQU07QUFDVDs7QUFFRCxZQUFFLENBQUMsY0FBSDs7QUFDQSxjQUFJLG9CQUFKLEVBQTBCO0FBQ3RCLGNBQUUsQ0FBQyxlQUFIO0FBQ0g7O0FBRUQ7QUFDSDs7QUFFRCxVQUFJLE9BQU87QUFBQTtBQUFYLFFBQTRCO0FBQ3hCLGNBQUksUUFBSixFQUFjO0FBQ1Ysb0JBQVEsQ0FBQyxRQUFULENBQWtCLFFBQWxCLEVBQTRCLEtBQTVCO0FBQ0EsaUJBQUs7QUFDUjs7QUFFRCxjQUFJLGFBQUosRUFBbUI7QUFDZixjQUFFLENBQUMsY0FBSDtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxhQUFTLGlCQUFULEdBQTBCO0FBQ3RCLFVBQUksV0FBSixFQUFpQjtBQUNiLGtCQUFVO0FBQUE7QUFBQSxTQUFWO0FBQ0g7QUFDSjs7QUFFRCxhQUFTLFVBQVQsQ0FBb0IsT0FBcEIsRUFBeUM7Ozs7O0FBS3JDLFVBQU0sb0JBQW9CLEdBQUcsRUFBRSxlQUEvQjtBQUVBLFVBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFsQjs7QUFDQSxVQUFJLEdBQUcsQ0FBQyxNQUFKLElBQWMsTUFBZCxJQUF3QixPQUFPO0FBQUE7QUFBbkMsUUFBNEQ7QUFDeEQsNEJBQWtCO0FBQ2xCLHVCQUFhLEdBQUcsTUFBTSxDQUFDLFVBQVAsQ0FBa0I7QUFDOUIsb0JBQVEsQ0FBQyxLQUFULENBQWUsR0FBZixFQUFvQixVQUFTLFFBQVQsRUFBOEI7QUFDOUMsa0JBQUksZUFBZSxLQUFLLG9CQUFwQixJQUE0QyxRQUFoRCxFQUEwRDtBQUN0RCxxQkFBSyxHQUFHLFFBQVI7QUFDQSwwQkFBVSxHQUFHLEdBQWI7QUFDQSx3QkFBUSxHQUFHLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBZixHQUFtQixLQUFLLENBQUMsQ0FBRCxDQUF4QixHQUE4QixTQUF6QztBQUNBLHNCQUFNO0FBQ1Q7QUFDSixhQVBELEVBT0M7QUFBQTtBQVBEO0FBUUgsV0FUZSxFQVNiLE9BQU87QUFBQTtBQUFQLFlBQW9DLGNBQXBDLEdBQXFELENBVHhDLENBQWhCO0FBVUgsU0FaRCxNQVlPO0FBQ0gsYUFBSztBQUNSO0FBQ0o7O0FBRUQsYUFBUyxnQkFBVCxHQUF5Qjs7QUFFckIsZ0JBQVUsQ0FBQztBQUNQLFlBQUksR0FBRyxDQUFDLGFBQUosS0FBc0IsS0FBMUIsRUFBaUM7QUFDN0IsZUFBSztBQUNSO0FBQ0osT0FKUyxFQUlQLEdBSk8sQ0FBVjtBQUtIOzs7Ozs7QUFLRCxhQUFTLENBQUMsZ0JBQVYsQ0FBMkIsV0FBM0IsRUFBd0MsVUFBUyxHQUFULEVBQW1CO0FBQ3ZELFNBQUcsQ0FBQyxlQUFKO0FBQ0EsU0FBRyxDQUFDLGNBQUo7QUFDSCxLQUhEOzs7Ozs7QUFTQSxhQUFTLENBQUMsZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBb0M7QUFBTSxrQkFBSyxDQUFDLEtBQU47QUFBYSxLQUF2RDs7Ozs7QUFLQSxhQUFTLE9BQVQsR0FBZ0I7QUFDWixXQUFLLENBQUMsbUJBQU4sQ0FBMEIsT0FBMUIsRUFBbUMsaUJBQW5DO0FBQ0EsV0FBSyxDQUFDLG1CQUFOLENBQTBCLFNBQTFCLEVBQXFDLG1CQUFyQztBQUNBLFdBQUssQ0FBQyxtQkFBTixDQUEwQixjQUExQixFQUEwQyxpQkFBMUM7QUFDQSxXQUFLLENBQUMsbUJBQU4sQ0FBMEIsTUFBMUIsRUFBa0MsZ0JBQWxDO0FBQ0EsWUFBTSxDQUFDLG1CQUFQLENBQTJCLFFBQTNCLEVBQXFDLGtCQUFyQztBQUNBLFNBQUcsQ0FBQyxtQkFBSixDQUF3QixRQUF4QixFQUFrQyxrQkFBbEMsRUFBc0QsSUFBdEQ7QUFDQSx3QkFBa0I7QUFDbEIsV0FBSztBQUNSLEtBcGE2RixDOzs7QUF1YTlGLFNBQUssQ0FBQyxnQkFBTixDQUF1QixTQUF2QixFQUFrQyxtQkFBbEM7QUFDQSxTQUFLLENBQUMsZ0JBQU4sQ0FBdUIsY0FBdkIsRUFBdUMsaUJBQXZDO0FBQ0EsU0FBSyxDQUFDLGdCQUFOLENBQXVCLE1BQXZCLEVBQStCLGdCQUEvQjtBQUNBLFNBQUssQ0FBQyxnQkFBTixDQUF1QixPQUF2QixFQUFnQyxpQkFBaEM7QUFDQSxVQUFNLENBQUMsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0Msa0JBQWxDO0FBQ0EsT0FBRyxDQUFDLGdCQUFKLENBQXFCLFFBQXJCLEVBQStCLGtCQUEvQixFQUFtRCxJQUFuRDtBQUVBLFdBQU87QUFDSCxhQUFPO0FBREosS0FBUDtBQUdIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbGZEO0FBQ0EscUhBQ0EsMkJBREEsS0FFQSxVQUNBO0FBQUE7QUFBQTtBQUFBLHFHQURBLEtBRUEsRUFHQTtBQUNDLENBVEQsRUFTQywyQ0FURCxFQVNDO0FBQ0Q7Ozs7O0FDVkE7QUFBQTs7QUFDQTtBQUFBOzs7QUFFQTtBQUFBOztBQUNBOztBQUFBOzs7QUFFQTtBQUFBOztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7O0FBQ0E7OztBQUFBO0FBQ0E7QUFBQSxxQkFEQTs7QUFFQTtBQUFBLGtCQUZBOztBQUdBO0FBQUE7QUFDQTs7QUFKQTs7O0FBTUE7QUFBQTs7QUFDQTs7QUFBQTs7O0FBRUE7QUFBQTs7QUFDQTs7QUFBQTs7O0FBRUE7QUFBQTs7QUFDQTs7QUFBQTtBQUNBO0FBQUE7Ozs7O0FBR0E7QUFBQTs7QUFDQTs7O0FBQUE7OztBQUVBO0FBQUE7O0FBQ0E7O0FBQUE7OztBQUVBO0FBQUE7O0FBQ0E7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUEsK0JBREE7O0FBRUE7QUFBQSw0QkFGQTs7QUFHQTtBQUFBO0FBQ0E7O0FBSkE7QUFLQTtBQUFBO0FBQ0E7O0FBQUEsT0FSQTs7O0FBVUE7QUFBQTs7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUEyQjtBQUE0QixTQUR2RDtBQUVBO0FBQUE7QUFBaUM7QUFBZSxTQUZoRDtBQUdBOztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7QUFBQSxPQU5BOzs7QUFRQTtBQUFBOztBQUNBOzs7QUFBQTtBQUFzRDtBQUErRCxPQUFySDs7O0FBRUE7QUFBQTs7QUFDQTs7O0FBQUE7OztBQUVBO0FBQUE7O0FBQ0E7O0FBQUE7Ozs7Ozs7Ozs7OztBQzdEQTs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUllQTs7O0FBQUFBO0FBQWY7QUFBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VDUlBDLGMsR0FBbUNDLE0sQ0FBbkNELGM7VUFBZ0JFLGMsR0FBbUJELE0sQ0FBbkJDLGM7QUFFeEI7O0FBRUEsc0NBQWdDO0FBQzlCLFlBQUksbUJBQUosYUFBb0M7QUFDbEMsZ0JBQU0sdUNBQ2tCQyxFQUFFLENBRHBCLHFFQUNnRkEsRUFBRSxDQURsRixNQUFOLHlFQUFNLEVBQU47QUFJRDs7QUFFRCxZQUFJLENBQUosVUFBZTtBQUNaQyxrQkFBUSxHQUFHLElBQVhBLE9BQVcsRUFBWEE7QUFDRjs7QUFFRCxZQUFJQSxRQUFRLENBQVJBLGFBQUosT0FBaUM7QUFDL0JBLGtCQUFRLENBQVJBLFNBQWtCLElBQWxCQSxPQUFrQixFQUFsQkE7QUFDRDs7QUFFRCxZQUFNQyxVQUFVLEdBQUdELFFBQVEsQ0FBUkEsSUFBbkIsR0FBbUJBLENBQW5COztBQUVBLFlBQUlDLFVBQVUsQ0FBVkEsWUFBSixPQUFrQztBQUNoQ0Esb0JBQVUsQ0FBVkEsUUFBbUJDO0FBQUFBO0FBQUFBLGFBQUksRUFBSkEsRUFBbkJELEdBQW1CQyxDQUFuQkQ7QUFDRDs7QUFFRCxlQUFPQSxVQUFVLENBQVZBLElBQVAsRUFBT0EsQ0FBUDtBQUNEOztBQUVELG9DQUE4QjtBQUM1QixZQUFNRSxLQUFLLEdBQUdDO0FBQUFBO0FBQUFBLFdBQTBCQyxLQUFLLENBQTdDLFNBQWNELENBQWQ7QUFDQSxZQUFNRSxJQUFJLEdBQUdDO0FBQUFBO0FBQUFBLFdBQWIsS0FBYUEsQ0FBYjs7QUFFQSxhQUFLLElBQUlDLENBQUMsR0FBTCxHQUFXQyxDQUFDLEdBQUdILElBQUksQ0FBeEIsUUFBaUNFLENBQUMsR0FBbEMsR0FBd0NBLENBQXhDLElBQTZDO0FBQzNDLGNBQU1FLEdBQUcsR0FBR0osSUFBSSxDQUFoQixDQUFnQixDQUFoQjtBQUNBLGNBQU1LLElBQUksR0FBR1IsS0FBSyxDQUFsQixHQUFrQixDQUFsQjs7QUFFQSxjQUFJLE9BQU9RLElBQUksQ0FBWCx3QkFBb0NELEdBQUcsS0FBM0MsZUFBK0Q7QUFDN0Q7QUFDRDs7QUFFRGQsd0JBQWMsQ0FBQ1MsS0FBSyxDQUFOLGdCQUF1Qk8sY0FBYyxDQUFDUCxLQUFLLENBQU4sZ0JBQW5EVCxJQUFtRCxDQUFyQyxDQUFkQTtBQUNEO0FBQ0Y7O0FBRUQsaURBQThFO0FBQUEsWUFBaENHLEVBQWdDLFFBQXZDYyxLQUF1QztBQUFBLFlBQTVCQyxZQUE0QixRQUE1QkEsWUFBNEI7QUFBQSxZQUFkQyxVQUFjLFFBQWRBLFVBQWM7O0FBQzVFLFlBQUksY0FBSixZQUE4QjtBQUM1QixnQkFBTSx3RUFBTixFQUFNLEVBQU47QUFDRDs7QUFIMkUsWUFLcEVDLFdBTG9FLEdBS3BEQyxNQUxvRDtBQU81RSxlQUFPO0FBQ0xILHNCQUFZLEVBRFA7QUFFTEMsb0JBQVUsRUFGTDtBQUlMRyxhQUpLLGlCQUlDO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsZ0JBQUksU0FBSixRQUFxQjtBQUNuQjtBQUxFLGNBUUo7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLGdCQUFJLG9DQUFvQ3BCLGNBQWMsQ0FBZEEsSUFBYyxDQUFkQSxpQkFBeEMsYUFBMEY7QUFDeEY7QUFiRSxjQWdCSjs7O0FBQ0EsZ0JBQUksb0NBQW9DWSxHQUFHLElBQUksaUJBQS9DLFdBQTJFO0FBQ3pFLHFCQUFPUyxhQUFhLE9BQXBCLEVBQW9CLENBQXBCO0FBQ0Q7O0FBRUQsZ0JBQU1DLE9BQU8sR0FBR2xCO0FBQUFBO0FBQUFBLGVBQUksRUFBSkEsRUFBaEIsSUFBZ0JBLENBQWhCO0FBRUFOLDBCQUFjLFlBQVk7QUFDeEJrQiwwQkFBWSxFQURZO0FBRXhCTyxzQkFBUSxFQUZnQjtBQUd4QjtBQUNBTix3QkFBVSxFQUpjO0FBS3hCRixtQkFBSyxFQUFFTztBQUxpQixhQUFaLENBQWR4QjtBQVFBO0FBbkNHO0FBcUNMMEIsYUFBRyxFQUFFQztBQUFBQTtBQUFBQSxhQUFtQixHQUFuQkE7QUFyQ0EsU0FBUDtBQXVDRDs7QUFFRCw0QkFBc0I7QUFDcEIsWUFBSUMsSUFBSSxDQUFKQSxXQUFKLEdBQXVCO0FBQ3JCLGlCQUFPQyxhQUFhLENBQWJBLGlDQUFQLElBQU9BLEVBQVA7QUFERixlQUVPO0FBQ0wsaUJBQU9iLGNBQWMsQ0FBZEEsaUNBQVAsSUFBT0EsRUFBUDtBQUNEO0FBQ0Y7O0FBRWMsMEJBQTJCO0FBQUEsMENBQU5ZLElBQU07QUFBTkEsY0FBTSxNQUFOQSxHQUFNLGVBQU5BO0FBQU07O0FBQ3hDLFlBQUlBLElBQUksQ0FBSkEsV0FBSixHQUF1QjtBQUNyQixpQkFBTyxZQUFZO0FBQ2pCLG1CQUFPRSxNQUFNLENBQWIsU0FBYSxDQUFiO0FBREY7QUFERixlQUlPO0FBQ0wsaUJBQU9BLE1BQU0sQ0FBYixJQUFhLENBQWI7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVHSCxVQUFNQyxzQkFBc0IsR0FBNUI7QUFDQSxVQUFNQyxlQUFlLEdBQXJCOztVQUVNQyxtQjs7O29DQTBCTUMsVSxFQUFZO0FBQ3BCLGdCQUFJQSxVQUFVLEtBQWQsV0FBOEI7QUFDNUI7QUFDRDs7QUFFRCxnQkFBSSxXQUFKLFlBQTJCO0FBQ3pCLHFCQUFPQSxVQUFVLENBQWpCO0FBQ0Q7O0FBRUQsZ0JBQUksU0FBSixZQUF5QjtBQUN2QixxQkFBT0EsVUFBVSxDQUFqQjtBQUNEOztBQUVELGdCQUFJLFNBQUosWUFBeUI7QUFDdkIscUJBQU9BLFVBQVUsQ0FBakI7QUFDRDtBQUNGOzs7aURBVXNCQyxLLEVBQU87QUFDNUI7QUFDRTtBQUNFLHVCQUFPLCtCQUFQLEtBQU8sQ0FBUDs7QUFDRjtBQUNFLHVCQUFPLEtBQVA7QUFKSjtBQU1EOzs7b0RBRXlCaEMsRSxFQUFJO0FBQUE7O0FBQzVCLG1CQUFPLEVBQUUsQ0FBRixvQ0FJSDtBQUFBLGtCQUFRaUMsSUFBUix1RUFBZSxLQUFJLENBQW5CO0FBQUEsa0JBQXlCQyxNQUF6QjtBQUFBLHFCQUFvQ0QsSUFBSSxHQUF4QztBQUpKLGFBQU8sQ0FBUDtBQU1EOzs7OEJBOURTO0FBQ1IsbUJBQU8scUJBQVA7QUFDRDs7OzhCQUVvQjtBQUNuQiw2QkFBVSw2QkFBVixrQkFBK0MsS0FBL0M7QUFDRDs7OzhCQUVtQjtBQUNsQiw2QkFBVSw0QkFBVixrQkFBOEMsS0FBOUM7QUFDRDs7OzhCQUVpQjtBQUNoQixtQkFBTyxlQUFlLEtBQXRCLGdCQUFPLENBQVA7QUFDRDs7OzhCQUVnQjtBQUNmLG1CQUFPLGVBQWUsS0FBdEIsZUFBTyxDQUFQO0FBQ0Q7Ozs4QkFvQjZCO0FBQzVCLG1CQUFPLDRCQUE0QixLQUFuQyxXQUFPLENBQVA7QUFDRDs7OzhCQUU0QjtBQUMzQixtQkFBTyw0QkFBNEIsS0FBbkMsVUFBTyxDQUFQO0FBQ0Q7OztBQW9CRCxpR0FBd0U7QUFBQTs7QUFBQSxlQXJFeEVFLFdBcUV3RTtBQUFBLGVBcEV4RUMsVUFvRXdFO0FBQUEsZUFuRXhFQyxnQkFtRXdFO0FBQUEsZUFsRXhFQyxlQWtFd0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDRDs7OztpQ0FFTUMsUyxFQUFxQjtBQUFBLGdCQUFWQyxHQUFVLHVFQUFKLEVBQUk7O0FBQzFCLGdCQUFJRCxTQUFTLEtBQWIsTUFBd0I7QUFDdEIseUJBQVdYLHNCQUFzQixHQUFqQztBQUNEO0FBQ0Y7OztnQ0FFS1ksRyxFQUFLO0FBQUE7O0FBQ1RBLGVBQUcsR0FBRyxHQUFHLENBQ1A7QUFDQTtBQUZPLGFBQUgsb0JBR2lCLGFBQUM7QUFBQSxxQkFBSSxNQUFJLENBQVI7QUFIbEIsa0NBSWdCLGFBQUM7QUFBQSxxQkFBSSxNQUFJLENBQVI7QUFKdkJBLGFBQU0sQ0FBTkE7QUFLQSxrQkFBTSxnQkFBTixHQUFNLENBQU47QUFDRDs7Ozs7O0FBR0gsNkNBQXVDO0FBQ3JDLFlBQUlULFVBQVUsQ0FBVkEsZUFBSixPQUFJQSxDQUFKLEVBQXdDO0FBQ3RDO0FBQ0Q7O0FBRUQsWUFBSUEsVUFBVSxDQUFWQSx5QkFBb0NBLFVBQVUsQ0FBVkEsZUFBeEMsS0FBd0NBLENBQXhDLEVBQTBFO0FBQ3hFO0FBTm1DLFVBU3JDO0FBQ0E7OztBQUNBO0FBQ0Q7O0FBRUQsZ0VBQTBEO0FBQ3hEVSxnQkFBUSxDQUFSQSxPQUFnQkMsTUFBTSxDQUFOQSxXQUFrQkMsS0FBSyxDQUF2Q0Y7QUFDRDs7QUFFRCw2REFBdUQ7QUFDckQsWUFBTUcsZUFBZSxXQUFVRixNQUFNLENBQXJDLEtBQXFCLENBQXJCOztBQUNBLFlBQU1HLGNBQWMsV0FBVUYsS0FBSyxDQUFuQyxLQUFvQixDQUFwQjs7QUFFQSxZQUFJQyxlQUFlLEtBQWZBLGVBQW1DQyxjQUFjLEtBQXJELGFBQXVFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUosa0JBQVEsQ0FBUkE7QUFDRDs7QUFFRCxZQUFJRyxlQUFlLEtBQW5CLGdCQUF3QztBQUN0QyxjQUFNRSx1QkFBdUIsR0FBSUQsY0FBYyxLQUFkQSxjQUFpQ0QsZUFBZSxLQUQzQyxTQUN0QyxDQURzQyxDQUV0QztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxjQUFJRSx1QkFBdUIsSUFBSUYsZUFBZSxLQUE5QyxXQUE4RDtBQUM1REgsb0JBQVEsQ0FBUkE7QUFDRDtBQXJCa0QsVUF3QnJEOzs7QUFDQTtBQUNFO0FBQ0VNLG1DQUF1QixDQUFDTCxNQUFNLENBQVAsT0FBZUMsS0FBSyxDQUFwQixPQUF2QkksUUFBdUIsQ0FBdkJBO0FBQ0E7O0FBRUY7QUFDRU4sb0JBQVEsQ0FBUkE7QUFDQTtBQVBKO0FBU0Q7O0FBRUQsaUVBQTJEO0FBQ3pELFlBQU1PLGVBQWUsR0FBRyxPQUFPTixNQUFNLENBQWIsUUFBeEI7QUFDQSxZQUFNTyxjQUFjLEdBQUcsT0FBT04sS0FBSyxDQUFaLFFBQXZCO0FBQ0EsWUFBTU8sZUFBZSxHQUFHLE9BQU9SLE1BQU0sQ0FBYixRQUF4QjtBQUNBLFlBQU1TLGNBQWMsR0FBRyxPQUFPUixLQUFLLENBQVosUUFBdkI7O0FBRUEsWUFBSUssZUFBZSxJQUFuQixnQkFBdUM7QUFDckMsY0FBSSxvQkFBSixpQkFBeUM7QUFDdkNQLG9CQUFRLENBQVJBO0FBQ0Q7O0FBRUQsY0FBSSxtQkFBSixnQkFBdUM7QUFDckNBLG9CQUFRLENBQVJBO0FBQ0Q7O0FBRURNLGlDQUF1QixDQUFDTCxNQUFNLENBQVAsS0FBYUMsS0FBSyxDQUFsQixLQUF2QkksUUFBdUIsQ0FBdkJBO0FBQ0Q7O0FBRUQsWUFBSUcsZUFBZSxJQUFuQixnQkFBdUM7QUFDckMsY0FBSSxvQkFBSixpQkFBeUM7QUFDdkNULG9CQUFRLENBQVJBO0FBQ0Q7O0FBRUQsY0FBSSxtQkFBSixnQkFBdUM7QUFDckNBLG9CQUFRLENBQVJBO0FBQ0Q7O0FBRURNLGlDQUF1QixDQUFDTCxNQUFNLENBQVAsS0FBYUMsS0FBSyxDQUFsQixLQUF2QkksUUFBdUIsQ0FBdkJBO0FBQ0Q7QUFDRjs7QUFFRCx5REFBbUQ7QUFDakQsWUFBTUssVUFBVSxHQUFHQyxpQkFBaUIsQ0FBcEMsTUFBb0MsQ0FBcEM7QUFDQSxZQUFNQyxTQUFTLEdBQUdELGlCQUFpQixDQUFuQyxLQUFtQyxDQUFuQzs7QUFFQSxZQUFJRCxVQUFVLEtBQWQsV0FBOEI7QUFDNUJYLGtCQUFRLENBQVJBO0FBQ0Q7O0FBRUQ7QUFDRTtBQUNFYyxnQ0FBb0IsZ0JBQXBCQSxRQUFvQixDQUFwQkE7QUFDQTs7QUFFRjtBQUNFQyxvQ0FBd0IsZ0JBQXhCQSxRQUF3QixDQUF4QkE7QUFDQTtBQVBKO0FBU0Q7O0FBRUQsVUFBTUMsb0JBQW9CLEdBQUcsQ0FDM0IsZUFBRztBQUFBLGVBQUk5QyxHQUFHLENBQVAsV0FBSUEsRUFBSjtBQUR3QixTQUUzQixlQUFHO0FBQUEsZUFBSUEsR0FBRyxDQUFQLFdBQUlBLEVBQUo7QUFGd0IsU0FHM0IsZUFBRztBQUFBLGVBQUlBLEdBQUcsR0FBUDtBQUh3QixTQUkzQixlQUFHO0FBQUEsZUFBSUEsR0FBRyxDQUFIQSxTQUFhLENBQWpCLENBQUlBLENBQUo7QUFKd0IsU0FLM0IsZUFBRztBQUFBLGVBQUlBLEdBQUcsQ0FBSEEsU0FBYUEsR0FBRyxDQUFwQixNQUFJQSxDQUFKO0FBTEwsT0FBNkIsQ0FBN0I7O0FBUUEseURBQW1EO0FBQ2pELGFBQUssSUFBSUYsQ0FBQyxHQUFMLEdBQVdDLENBQUMsR0FBRytDLG9CQUFvQixDQUF4QyxRQUFpRGhELENBQUMsR0FBbEQsR0FBd0RBLENBQXhELElBQTZEO0FBQzNELGNBQU1ULEVBQUUsR0FBR3lELG9CQUFvQixDQUEvQixDQUErQixDQUEvQjtBQUNBLGNBQU1DLFVBQVUsR0FBRzFELEVBQUUsQ0FBckIsR0FBcUIsQ0FBckI7O0FBRUEsY0FBSTBELFVBQVUsSUFBZCxZQUE4QjtBQUM1QjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDRDs7QUFFRCx5REFBbUQ7QUFDakQzQixrQkFBVSxDQUFWQTtBQUNBLFlBQU00QixVQUFVLEdBQUc3RCxNQUFNLENBQU5BLGVBQW5CLE1BQW1CQSxDQUFuQjtBQUNBLFlBQU04RCxlQUFlLEdBQUc5RCxNQUFNLENBQU5BLHFDQUF4QixHQUF3QkEsQ0FBeEI7QUFDQSxZQUFNMkMsUUFBUSxHQUFHLDZEQUFqQixVQUFpQixDQUFqQjs7QUFFQSxZQUFJbUIsZUFBZSxLQUFuQixXQUFtQztBQUNqQyxjQUFNQyxZQUFZLEdBQUdDLHdCQUF3QixhQUE3QyxHQUE2QyxDQUE3QztBQUNBLGNBQU1KLFVBQVUsR0FBR0csWUFBWSx5REFBL0I7QUFDQXBCLGtCQUFRLENBQVJBO0FBQ0Q7O0FBRURzQix3QkFBZ0IsOEJBQWhCQSxRQUFnQixDQUFoQkE7QUFFQTtBQUNEOztBQUVjLDBCQUEyQjtBQUFBLDBDQUFOdEMsSUFBTTtBQUFOQSxjQUFNLE1BQU5BLEdBQU0sZUFBTkE7QUFBTTs7QUFDeEMsZUFBT3VDO0FBQUFBO0FBQUFBLFdBQVEsZ0JBQVJBLEVBQVAsSUFBT0EsQ0FBUDs7Ozs7Ozs7O0FDalBGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsWUFBTSxDQUFOQSxVQUFpQix3QkFBdUI7QUFDdkMsWUFBSUMsSUFBSSxHQUQrQixFQUN2QyxDQUR1QyxDQUd2Qzs7QUFDQUEsWUFBSSxDQUFKQSxXQUFnQixvQkFBb0I7QUFDbkMsaUJBQU8sU0FBUyxnQkFBZ0I7QUFDL0IsZ0JBQUlDLE9BQU8sR0FBR0Msc0JBQXNCLE9BQXBDLFlBQW9DLENBQXBDOztBQUNBLGdCQUFHQyxJQUFJLENBQVAsQ0FBTyxDQUFQLEVBQVk7QUFDWCxxQkFBTyxZQUFZQSxJQUFJLENBQWhCLENBQWdCLENBQWhCLG1CQUFQO0FBREQsbUJBRU87QUFDTjtBQUNBO0FBTkssa0JBQVAsRUFBTyxDQUFQO0FBTHNDLFNBSXZDSCxDQUp1QyxDQWV2Qzs7O0FBQ0FBLFlBQUksQ0FBSkEsSUFBUywrQkFBOEI7QUFDdEMsY0FBRyxtQkFBSCxVQUNDSSxPQUFPLEdBQUcsQ0FBQyxnQkFBWEEsRUFBVyxDQUFELENBQVZBO0FBQ0QsY0FBSUMsc0JBQXNCLEdBQTFCOztBQUNBLGVBQUksSUFBSTlELENBQUMsR0FBVCxHQUFlQSxDQUFDLEdBQUcsS0FBbkIsUUFBZ0NBLENBQWhDLElBQXFDO0FBQ3BDLGdCQUFJK0QsRUFBRSxHQUFHLFFBQVQsQ0FBUyxDQUFUO0FBQ0EsZ0JBQUcsY0FBSCxVQUNDRCxzQkFBc0IsQ0FBdEJBLEVBQXNCLENBQXRCQTtBQUNEOztBQUNELGVBQUk5RCxDQUFDLEdBQUwsR0FBV0EsQ0FBQyxHQUFHNkQsT0FBTyxDQUF0QixRQUErQjdELENBQS9CLElBQW9DO0FBQ25DLGdCQUFJNEQsSUFBSSxHQUFHQyxPQUFPLENBRGlCLENBQ2pCLENBQWxCLENBRG1DLENBRW5DO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGdCQUFHLE9BQU9ELElBQUksQ0FBWCxDQUFXLENBQVgsaUJBQStCLENBQUNFLHNCQUFzQixDQUFDRixJQUFJLENBQTlELENBQThELENBQUwsQ0FBekQsRUFBb0U7QUFDbkUsa0JBQUdJLFVBQVUsSUFBSSxDQUFDSixJQUFJLENBQXRCLENBQXNCLENBQXRCLEVBQTJCO0FBQzFCQSxvQkFBSSxDQUFKQSxDQUFJLENBQUpBO0FBREQscUJBRU8sZ0JBQWU7QUFDckJBLG9CQUFJLENBQUpBLENBQUksQ0FBSkEsR0FBVSxNQUFNQSxJQUFJLENBQVYsQ0FBVSxDQUFWLDRCQUFWQTtBQUNBOztBQUNESCxrQkFBSSxDQUFKQTtBQUNBO0FBQ0Q7QUF2QkZBOztBQXlCQTtBQXpDREQ7O0FBNENBLDBEQUFvRDtBQUNuRCxZQUFJRSxPQUFPLEdBQUdFLElBQUksQ0FBSkEsQ0FBSSxDQUFKQSxJQUFkO0FBQ0EsWUFBSUssVUFBVSxHQUFHTCxJQUFJLENBQXJCLENBQXFCLENBQXJCOztBQUNBLFlBQUksQ0FBSixZQUFpQjtBQUNoQjtBQUNBOztBQUVELFlBQUlNLFlBQVksSUFBSSxnQkFBcEIsWUFBZ0Q7QUFDL0MsY0FBSUMsYUFBYSxHQUFHQyxTQUFTLENBQTdCLFVBQTZCLENBQTdCO0FBQ0EsY0FBSUMsVUFBVSxHQUFHLFVBQVUsQ0FBVixZQUF1QixrQkFBa0I7QUFDekQsbUJBQU8sbUJBQW1CSixVQUFVLENBQTdCLHNCQUFQO0FBREQsV0FBaUIsQ0FBakI7QUFJQSxpQkFBTyxvQ0FBb0MsQ0FBcEMsYUFBb0MsQ0FBcEMsT0FBUCxJQUFPLENBQVA7QUFDQTs7QUFFRCxlQUFPLGVBQVAsSUFBTyxDQUFQO1FBR0Q7OztBQUNBLG9DQUE4QjtBQUM3QjtBQUNBLFlBQUlLLE1BQU0sR0FBR0MsSUFBSSxDQUFDQyxRQUFRLENBQUNDLGtCQUFrQixDQUFDQyxJQUFJLENBQUpBLFVBQTlDLFNBQThDQSxDQUFELENBQW5CLENBQVQsQ0FBakI7QUFDQSxZQUFJQyxJQUFJLEdBQUcsaUVBQVg7QUFFQSxlQUFPLGdCQUFQOzs7Ozs7Ozs7QUMxRUQ7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FIQTtBQUlBLE9BUEE7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxPQVBEOztBQVNBO0FBQ0E7QUFDQSxPQUZBOztBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQSwyREFEQSxDQUVBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSyxlQUpMLENBSUs7QUFDTDtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFDQTtBQUNBLFNBeEJBO0FBeUJDLE9BNUJEOztBQThCQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQWMsbUJBQU8sQ0FBQyxFQUFELENBQXJCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUEsa0ZBUEEsQ0FTQTtBQUNBOztBQUNBLHdHQVhBLENBYUE7O0FBQ0EsNkRBZEEsQ0FnQkE7O0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTs7QUFFQSwwQkFBaUIsaUJBQWpCLEVBQW9DLEdBQXBDLEVBQW9DO0FBQ3BDO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQWlCLG9CQUFqQixFQUF1QyxHQUF2QyxFQUF1QztBQUN2Qzs7QUFFQTtBQUNBLDhCQUFtQix5QkFBbkIsRUFBOEMsR0FBOUM7QUFBOEM7QUFBOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0F6QkE7QUEwQkEsT0FqREE7O0FBbURBO0FBQ0Esd0JBQWdCLGlCQUFoQixFQUFtQyxHQUFuQyxFQUFtQztBQUNuQztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNEJBQWlCLHlCQUFqQixFQUE0QyxHQUE1QyxFQUE0QztBQUM1QztBQUNBOztBQUVBLG1CQUFRLHFCQUFSLEVBQStCLEdBQS9CLEVBQStCO0FBQy9CO0FBQ0E7QUFDRyxXQVZILE1BVUc7QUFDSDs7QUFFQSw0QkFBaUIscUJBQWpCLEVBQXdDLEdBQXhDLEVBQXdDO0FBQ3hDO0FBQ0E7O0FBRUE7QUFBMkIseUJBQTNCO0FBQTJCLHFCQUEzQjtBQUEyQjtBQUEzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQWdCLGVBQWhCLEVBQWlDLEdBQWpDLEVBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFjLG9CQUFkO0FBQWMsd0JBQWQ7QUFBYztBQUFkO0FBRUE7QUFBa0Qsa0JBQWxEO0FBQWtEO0FBQWxELGtCQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDRyxXQUZILE1BRUc7QUFDSDtBQUNHLFdBRkEsTUFFQTtBQUNIO0FBQ0E7O0FBQ0E7QUFDRSxTQVRGLE1BU0U7QUFDRjtBQUNFLFNBRkEsTUFFQTtBQUNGO0FBQ0E7QUFDRSxTQUhBLE1BR0E7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDRSxTQUZGO0FBR0E7O0FBRUE7QUFDQSwwQ0FEQSxDQUdBOztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDTSxXQUpOLE1BSU07QUFDTjtBQUNBO0FBQ0EsZ0NBQ0E7QUFDQSxhQUZBO0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBRUUsU0FSRixNQVFFLElBQ0YsaUJBQ0EseUJBREEsSUFFQSx5Q0FGQSxJQUdBLHlDQUhBLElBSUEsMEJBSkEsSUFLQSwwQkFORSxFQU9GO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7QUFDQSxXQUpBO0FBS0UsU0FmQSxNQWVBO0FBQ0Y7QUFDQTs7QUFDQTtBQUNBO0FBQ0EsV0FGQTtBQUdBOztBQUVBO0FBRUE7QUFDQTtBQUNBLGdCQUNBLDBCQUNBLDBCQURBLElBRUEsa0NBSEEsRUFJQTtBQUNBO0FBQ0E7O0FBRUE7QUFDRyxXQVZILE1BVUc7QUFDSDtBQUNBO0FBQ0EsU0FkQTtBQWVBOztBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQSxTQUpBO0FBS0MsT0FSRDs7QUFVQTtBQUNBOztBQUVBO0FBQ0E7QUFDRSxTQUZGLE1BRUU7QUFDRjtBQUNBO0FBRUE7O0FBRUE7QUFDQTtBQUNHLFdBRkgsTUFFRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNFLFNBRkYsTUFFRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEVBQXVELDZEQUF2RCxHQUF1RCxLQUF2RDtBQUNBOztBQUVBO0FBQTZCO0FBQTdCO0FBRUE7QUFFQTtBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3ZYQTs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUlBOzs7QUFDQSxVQUFJQyxPQUFPLEdBQVg7QUFBQSxVQUNJQyxZQUFZLEdBRGhCO0FBR0E7O0FBQ0EsVUFBSUMsY0FBYyxHQUFHQztBQUFBQTtBQUFBQSxVQUFTQTtBQUFBQTtBQUFBQSxRQUFILFdBQU5BLEdBQXJCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsaUNBQTJCO0FBQ3pCLFlBQUkxRSxLQUFLLElBQVQsTUFBbUI7QUFDakIsaUJBQU9BLEtBQUssS0FBTEEsMkJBQVA7QUFDRDs7QUFDRCxlQUFReUUsY0FBYyxJQUFJQSxjQUFjLElBQUl6RixNQUFNLENBQTNDLEtBQTJDLENBQTFDeUYsR0FDSkU7QUFBQUE7QUFBQUEsV0FERyxLQUNIQSxDQURJRixHQUVKRztBQUFBQTtBQUFBQSxXQUZKLEtBRUlBLENBRko7QUFHRDtBQUVjQzs7O0FBQUFBLGlDQUFmLFVBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxtQ0FBNkI7QUFDM0IsZUFBTzdFLEtBQUssSUFBTEEsUUFBaUIsa0JBQXhCO0FBQ0Q7QUFFYzhFOzs7QUFBQUEsaUNBQWYsWUFBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1VDMUJQL0YsYyxHQUMrQ0MsTSxDQUQvQ0QsYztVQUFnQmdHLHdCLEdBQytCL0YsTSxDQUQvQitGLHdCO1VBQ2hCQyxtQixHQUErQ2hHLE0sQ0FBL0NnRyxtQjtVQUFxQkMscUIsR0FBMEJqRyxNLENBQTFCaUcscUI7O0FBRXRCLGtDQUE0QjtBQUNqQyxZQUFJLFNBQVMsQ0FBQ25GLElBQUksQ0FBbEIsZ0JBQW1DO0FBQ2pDO0FBQ0Q7O0FBRUQsWUFBTUwsSUFBSSxHQUFHLGdDQUFiLEtBQWEsQ0FBYjs7QUFFQSxhQUFLLElBQUlFLENBQUMsR0FBTCxHQUFXQyxDQUFDLEdBQUdILElBQUksQ0FBeEIsUUFBaUNFLENBQUMsR0FBbEMsR0FBd0NBLENBQXhDLElBQTZDO0FBQzNDLGNBQUlHLElBQUksQ0FBSkEsZUFBb0JMLElBQUksQ0FBNUIsQ0FBNEIsQ0FBeEJLLENBQUosRUFBa0M7QUFDaEM7QUFDRDtBQUNGOztBQUVEO0FBQ0Q7O0FBRU0scURBQStDO0FBQ3BELFlBQUlvRixZQUFZLENBQUNDLFNBQVMsQ0FBQ0EsU0FBUyxDQUFUQSxTQUEzQixDQUEwQixDQUFWLENBQWhCLEVBQW1EO0FBQ2pELGlCQUFPQyxnQkFBZ0IsQ0FBaEJBLG9EQUFQLEVBQU9BLEdBQVA7QUFERixlQUVPO0FBQ0wsaUJBQU8sWUFBWTtBQUNqQixtQkFBT0EsZ0JBQWdCLENBQWhCQSxpQ0FBb0JDLEtBQUssQ0FBTEEscUJBQXBCRCxTQUFvQkMsQ0FBcEJELFVBQVAsU0FBT0EsR0FBUDtBQURGO0FBR0Q7QUFDRjs7VUFFS0UsSTs7Ozs7Ozs7Ozs7O21HQUNIQztBQUFBQTtBQUFBQSxPOzs7OztpQkFDb0IsRTs7NEZBRXBCQTtBQUFBQTtBQUFBQSxPOzs7OztpQkFDb0IsRTs7b0dBRXBCQTtBQUFBQTtBQUFBQSxPOzs7OztpQkFDNEIsRTs7OEZBRTVCQTtBQUFBQTtBQUFBQSxPOzs7OztpQkFDc0IsSTs7d0ZBRXRCQTtBQUFBQTtBQUFBQSxPOzs7OztpQkFDZ0IsSTs7O0FBR25CLFVBQU1DLFFBQVEsR0FBSSxrQkFBRCxVQUFDLEdBQ2RkLE1BQU0sQ0FETyxxQkFDUCxDQURRLEdBQWxCOztBQUlPLDRCQUFzQjtBQUMzQixZQUFJZSxHQUFHLENBQUhBLDZCQUFKLE9BQTRDO0FBQzFDMUcsd0JBQWMsZ0JBQWdCO0FBQzVCO0FBQ0FpQixpQkFBSyxFQUFFO0FBRnFCLFdBQWhCLENBQWRqQjtBQUlEOztBQUVELGVBQU8wRyxHQUFHLENBQVYsUUFBVSxDQUFWO0FBQ0Q7O0FBRU0sVUFBTS9GLFVBQVUsR0FBR3VGLHFCQUFxQixHQUN6QyxrQkFBa0I7QUFDaEIsZUFBT0QsbUJBQW1CLENBQW5CQSxNQUFtQixDQUFuQkEsUUFDR0MscUJBQXFCLENBRC9CLE1BQytCLENBRHhCRCxDQUFQO0FBRnVDLFVBQXhDOztBQVFBLDhDQUF3QztBQUM3QyxZQUFNMUYsS0FBSyxHQUFYO0FBRUFJLGtCQUFVLENBQVZBLEdBQVUsQ0FBVkEsU0FDRSxlQUFHO0FBQUEsaUJBQUtKLEtBQUssQ0FBTEEsR0FBSyxDQUFMQSxHQUFheUYsd0JBQXdCLE1BQTFDLEdBQTBDLENBQTFDO0FBRExyRjtBQUlBO0FBQ0Q7O0FBRU0sd0NBQWtDO0FBQ3ZDLGVBQU8sdUJBQXVCO0FBQzVCVixnQkFBTSxDQUFOQSwwQkFBaUM7QUFDL0JpQix3QkFBWSxFQURtQjtBQUUvQk8sb0JBQVEsRUFGdUI7QUFHL0I7QUFDQU4sc0JBQVUsRUFKcUI7QUFLL0JGLGlCQUFLLEVBQUUwRjtBQUx3QixXQUFqQzFHO0FBUUE7QUFURjtBQVdEOztBQUVNLGlDQUEyQjtBQUNoQyxZQUFJRSxFQUFFLENBQU4sTUFBYTtBQUNYLGlCQUFPQSxFQUFFLENBQUZBLEtBQVAsT0FBT0EsQ0FBUDtBQURGLGVBRU87QUFDTCxpQkFBTyx3QkFBd0I7QUFDN0IsbUJBQU9BLEVBQUUsQ0FBRkEsZUFBUCxTQUFPQSxDQUFQO0FBREY7QUFHRDtBQUNGOztBQUVNLFVBQU15RyxJQUFJLEdBQUksWUFBTTtBQUN6QixZQUFJLGtGQUErQixDQUEvQixXQUEyQyxPQUFPQyxPQUFPLENBQWQsU0FBL0MsWUFBbUY7QUFDakYsaUJBQU8sWUFBTSxDQUFiO0FBREYsZUFFTztBQUNMLGlCQUFPdkcsSUFBSSxDQUFDdUcsT0FBTyxDQUFSLE1BQVgsT0FBVyxDQUFYO0FBQ0Q7QUFMSSxPQUFjLEVBQWQ7O0FBUVAsVUFBTUMsZ0JBQWdCLEdBQXRCOztBQUNPLHdDQUFrQztBQUN2QyxZQUFJQSxnQkFBZ0IsQ0FBaEJBLEdBQWdCLENBQWhCQSxLQUFKLE1BQW9DO0FBQ2xDQSwwQkFBZ0IsQ0FBaEJBLEdBQWdCLENBQWhCQTtBQUNBRixjQUFJLENBQUMsa0JBQUxBLEdBQUksQ0FBSkE7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0SEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLCtCQUF5QjtBQUN2QixZQUFJRyxJQUFJLFdBQVIsS0FBUSxDQUFSOztBQUNBLGVBQU85RixLQUFLLElBQUxBLFNBQWtCOEYsSUFBSSxJQUFKQSxZQUFvQkEsSUFBSSxJQUFqRCxVQUFPOUYsQ0FBUDtBQUNEO0FBRWMrRjs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQzlCZjs7QUFBQTtBQUVBOzs7QUFDQSxVQUFJckIsT0FBTSxHQUFHc0I7QUFBQUE7QUFBQUEsUUFBYjtBQUVldEI7O0FBQUFBLGlDQUFmLE9BQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNIZjs7O0FBQ0EsVUFBSXVCLFFBQVEsR0FBRyxtRkFBbUNDLElBQUksQ0FBSkEsV0FBbkMsVUFBZjtBQUVBOztBQUNBLFVBQUlGLElBQUksR0FBR0c7QUFBQUE7QUFBQUEsdUJBQTBCQyxRQUFRLENBQTdDLGFBQTZDLENBQVJBLEVBQXJDO0FBRWVKOztBQUFBQSxpQ0FBZixJQUFlQTs7Ozs7Ozs7QUNSZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGdDQUEwQjtBQUN4QixlQUFPaEcsS0FBSyxLQUFMQSxTQUFvQkEsS0FBSyxLQUFMQSxTQUFtQnFHLEtBQUssS0FBbkQ7QUFDRDtBQUVjQzs7O0FBQUFBLGlDQUFmLEVBQWVBOzs7Ozs7OztBQ3BDZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxrQ0FBNEI7QUFDMUIsZUFBT3RHLEtBQUssSUFBTEEsUUFBaUJ1RztBQUFBQTtBQUFBQSxXQUFTdkcsS0FBSyxDQUEvQkEsTUFBaUJ1RyxDQUFqQnZHLElBQTJDLENBQUN3RztBQUFBQTtBQUFBQSxXQUFuRCxLQUFtREEsQ0FBbkQ7QUFDRDtBQUVjQzs7O0FBQUFBLGlDQUFmLFdBQWVBOzs7Ozs7OztBQ2hDZjs7QUFBQTs7QUFBZSxzQ0FBZ0M7QUFDN0MsWUFBSUMsV0FBVyxLQUFYQSxRQUF3QkEsV0FBVyxLQUFuQ0EsUUFBZ0RBLFdBQVcsS0FBL0QsT0FBMkU7QUFDekU7QUFDRDs7QUFFRCxZQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBbkIsV0FBbUIsQ0FBbkI7O0FBRUEsWUFBSUMsS0FBSyxDQUFULE1BQVMsQ0FBVCxFQUFtQjtBQUNqQjtBQUNEOztBQUVELGVBQU9GLE1BQU0sR0FBTkEsSUFBYUcsSUFBSSxDQUFKQSxLQUFiSCxNQUFhRyxDQUFiSCxHQUFpQ0csSUFBSSxDQUFKQSxNQUF4QyxNQUF3Q0EsQ0FBeEM7Ozs7Ozs7Ozs7QUNYRjs7QUFBQTs7QUFBZSw0Q0FBc0M7QUFDbkQsWUFBSW5HLElBQUksQ0FBSkEsU0FBSixVQUE0QjtBQUMxQixnQkFBTSxjQUFjb0csUUFBUSxHQUFSQSxlQUEwQkEsUUFBUSxHQUFSQSxVQUExQkEsK0JBQThFcEcsSUFBSSxDQUFsRm9HLFNBQXBCLFVBQU0sQ0FBTjtBQUNEOzs7Ozs7Ozs7O0FDSEg7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJZUM7OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7OztBQ1ZmOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVDOzs7QUFBQUE7QUFBZjtBQUFlQTs7Ozs7Ozs7QUNWZjs7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsbURBQTZDO0FBQzNDLFlBQUlwSCxHQUFHLElBQUhBLGVBQXNCZDtBQUExQjtBQUEwQkEsU0FBMUIsRUFBMEM7QUFDeENBO0FBQUFBO0FBQUFBLGFBQWMsTUFBZEEsRUFBYyxHQUFkQSxFQUE0QjtBQUMxQiw0QkFEMEI7QUFFMUIsMEJBRjBCO0FBRzFCLHFCQUgwQjtBQUkxQix3QkFBWTtBQUpjLFdBQTVCQTtBQURGLGVBT087QUFDTG1JLGdCQUFNLENBQU5BLEdBQU0sQ0FBTkE7QUFDRDtBQUNGO0FBRWNDOzs7QUFBQUEsaUNBQWYsZUFBZUE7Ozs7Ozs7O0FDeEJmOztBQUFBOztBQUVBLFVBQUlwSSxjQUFjLEdBQUksWUFBVztBQUMvQixZQUFJO0FBQ0YsY0FBSXFJLElBQUksR0FBR0M7QUFBQUE7QUFBQUEsYUFBUyxNQUFUQSxFQUFYLGdCQUFXQSxDQUFYO0FBQ0FELGNBQUksU0FBSkEsRUFBSSxDQUFKQTtBQUNBO0FBSEYsVUFJRSxVQUFVLENBQUU7QUFMaEIsT0FBc0IsRUFBdEI7QUFRZXJJOzs7QUFBQUEsaUNBQWYsY0FBZUE7Ozs7Ozs7O0FDVmY7O0FBQUE7QUFBQTs7O0FBQUE7QUFHQTs7O0FBQ0EsVUFBSXVJLFFBQVEsR0FBWjtBQUFBLFVBQ0lDLE9BQU8sR0FEWDtBQUFBLFVBRUlDLE1BQU0sR0FGVjtBQUFBLFVBR0lDLFFBQVEsR0FIWjtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsaUNBQTJCO0FBQ3pCLFlBQUksQ0FBQzFCO0FBQUFBO0FBQUFBLFdBQUwsS0FBS0EsQ0FBTCxFQUFzQjtBQUNwQjtBQUZ1QixVQUl6QjtBQUNBOzs7QUFDQSxZQUFJMkIsR0FBRyxHQUFHN0M7QUFBQUE7QUFBQUEsV0FBVixLQUFVQSxDQUFWO0FBQ0EsZUFBTzZDLEdBQUcsSUFBSEEsV0FBa0JBLEdBQUcsSUFBckJBLFVBQW1DQSxHQUFHLElBQXRDQSxZQUFzREEsR0FBRyxJQUFoRTtBQUNEO0FBRWNsQjs7O0FBQUFBLGlDQUFmLFVBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BDZjs7O0FBQ0EsWUFBSUwsVUFBVSxHQUFHLHlGQUF1Q3dCLE1BQU0sQ0FBTkEsV0FBdkMsVUFBakI7QUFFZXhCOztBQUFBQSxtQ0FBZixVQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hmLFksQ0FFQTs7QUFDQXlCLE9BQUMsR0FBSSxZQUFXO0FBQ2Y7QUFEREEsT0FBSyxFQUFMQTs7QUFJQSxVQUFJO0FBQ0g7QUFDQUEsU0FBQyxHQUFHQSxDQUFDLElBQUl4QixRQUFRLENBQWJ3QixhQUFhLENBQVJ4QixFQUFMd0IsSUFBa0MsQ0FBQyxHQUFELE1BQXRDQSxNQUFzQyxDQUF0Q0E7QUFGRCxRQUdFLFVBQVM7QUFDVjtBQUNBLFlBQUcsb0VBQUgsVUFDQ0EsQ0FBQyxHQUFEQTtRQUdGO0FBQ0E7QUFDQTs7O0FBRUF6RSxZQUFNLENBQU5BOzs7Ozs7OztBQ3BCQTs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLHFDQUErQjtBQUM3QixlQUFPMEU7QUFBQUE7QUFBQUEsV0FBWUM7QUFBQUE7QUFBQUEsV0FBUSxJQUFSQSxFQUFRLEtBQVJBLEVBQXNCQztBQUF2QjtBQUF1QkEsU0FBdEJELENBQVpELEVBQTZDVCxJQUFJLEdBQXhELEVBQU9TLENBQVA7QUFDRDtBQUVjRzs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQ2hCZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSwrQkFBeUI7QUFDdkI7QUFDRDtBQUVjRDs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQ3BCZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSwwQ0FBb0M7QUFDbEMsZ0JBQVFwSCxJQUFJLENBQVo7QUFDRTtBQUFRLG1CQUFPeUcsSUFBSSxDQUFKQSxLQUFQLE9BQU9BLENBQVA7O0FBQ1I7QUFBUSxtQkFBT0EsSUFBSSxDQUFKQSxjQUFtQnpHLElBQUksQ0FBOUIsQ0FBOEIsQ0FBdkJ5RyxDQUFQOztBQUNSO0FBQVEsbUJBQU9BLElBQUksQ0FBSkEsY0FBbUJ6RyxJQUFJLENBQXZCeUcsQ0FBdUIsQ0FBdkJBLEVBQTRCekcsSUFBSSxDQUF2QyxDQUF1QyxDQUFoQ3lHLENBQVA7O0FBQ1I7QUFBUSxtQkFBT0EsSUFBSSxDQUFKQSxjQUFtQnpHLElBQUksQ0FBdkJ5RyxDQUF1QixDQUF2QkEsRUFBNEJ6RyxJQUFJLENBQWhDeUcsQ0FBZ0MsQ0FBaENBLEVBQXFDekcsSUFBSSxDQUFoRCxDQUFnRCxDQUF6Q3lHLENBQVA7QUFKVjs7QUFNQSxlQUFPQSxJQUFJLENBQUpBLGVBQVAsSUFBT0EsQ0FBUDtBQUNEO0FBRWNhOzs7QUFBQUEsaUNBQWYsS0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2ZmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxvREFBOEM7QUFDNUMsWUFBSSxDQUFDbEM7QUFBQUE7QUFBQUEsV0FBTCxNQUFLQSxDQUFMLEVBQXVCO0FBQ3JCO0FBQ0Q7O0FBQ0QsWUFBSUQsSUFBSSxXQUFSLEtBQVEsQ0FBUjs7QUFDQSxZQUFJQSxJQUFJLElBQUpBLFdBQ0tXO0FBQUFBO0FBQUFBLHNCQUF1QnlCO0FBQUFBO0FBQUFBLFdBQU8sS0FBUEEsRUFBZWhCLE1BQU0sQ0FEakRwQixNQUM0Qm9DLENBRDVCcEMsR0FFS0EsSUFBSSxJQUFKQSxZQUFvQnFDLEtBQUssSUFGbEMsUUFHTTtBQUNKLGlCQUFPN0I7QUFBQUE7QUFBQUEsYUFBR1ksTUFBTSxDQUFQLEtBQU8sQ0FBVFosRUFBUCxLQUFPQSxDQUFQO0FBQ0Q7O0FBQ0Q7QUFDRDtBQUVjOEI7OztBQUFBQSxpQ0FBZixjQUFlQTs7Ozs7Ozs7QUM3QmY7O0FBQ0EsVUFBSUMsZ0JBQWdCLEdBQXBCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSwrQkFBeUI7QUFDdkIsZUFBTyw0QkFDTHJJLEtBQUssR0FBRyxDQURILEtBQ1NBLEtBQUssR0FBTEEsS0FEVCxLQUMyQkEsS0FBSyxJQUR2QztBQUVEO0FBRWN1Rzs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQ2Y7OztBQUNBLFVBQUk4QixnQkFBZ0IsR0FBcEI7QUFFQTs7QUFDQSxVQUFJQyxRQUFRLEdBQVo7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLHNDQUFnQztBQUM5QixZQUFJeEMsSUFBSSxXQUFSLEtBQVEsQ0FBUjs7QUFDQXlDLGNBQU0sR0FBR0EsTUFBTSxJQUFOQSwwQkFBVEE7QUFFQSxlQUFPLENBQUMsQ0FBRCxXQUNKekMsSUFBSSxJQUFKQSxZQUNFQSxJQUFJLElBQUpBLFlBQW9Cd0MsUUFBUSxDQUFSQSxLQUZsQixLQUVrQkEsQ0FGbEIsS0FHQXRJLEtBQUssR0FBRyxDQUFSQSxDQUhBLElBR2NBLEtBQUssR0FBTEEsS0FBZEEsQ0FIQSxJQUdnQ0EsS0FBSyxHQUg1QztBQUlEO0FBRWNrSTs7O0FBQUFBLGlDQUFmLE9BQWVBOzs7Ozs7OztBQ3hCZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQU9BOzs7QUFDQSxVQUFJTSxXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsK0NBQXlDO0FBQ3ZDLFlBQUlFLEtBQUssR0FBR0M7QUFBQUE7QUFBQUEsV0FBWixLQUFZQSxDQUFaO0FBQUEsWUFDSUMsS0FBSyxHQUFHLFVBQVVDO0FBQUFBO0FBQUFBLFdBRHRCLEtBQ3NCQSxDQUR0QjtBQUFBLFlBRUlDLE1BQU0sR0FBRyxVQUFVLENBQVYsU0FBb0JDO0FBQUFBO0FBQUFBLFdBRmpDLEtBRWlDQSxDQUZqQztBQUFBLFlBR0lDLE1BQU0sR0FBRyxVQUFVLENBQVYsU0FBb0IsQ0FBcEIsVUFBK0JDO0FBQUFBO0FBQUFBLFdBSDVDLEtBRzRDQSxDQUg1QztBQUFBLFlBSUlDLFdBQVcsR0FBR1IsS0FBSyxJQUFMQSxtQkFKbEI7QUFBQSxZQUtJUyxNQUFNLEdBQUdELFdBQVcsR0FBR0U7QUFBQUE7QUFBQUEsV0FBVXBKLEtBQUssQ0FBTixNQUFUb0osRUFBSCxNQUFHQSxDQUFILEdBTHhCO0FBQUEsWUFNSWIsTUFBTSxHQUFHWSxNQUFNLENBTm5COztBQVFBLGFBQUssSUFBTCxjQUF1QjtBQUNyQixjQUFJLENBQUNFLFNBQVMsSUFBSVosY0FBYyxDQUFkQSxZQUFkLEdBQWNBLENBQWQsS0FDQSxFQUFFUyxXQUFXLE1BQ1Y7QUFDQXJKLGFBQUcsSUFBSEEsWUFDQTtBQUNDaUosZ0JBQU0sS0FBS2pKLEdBQUcsSUFBSEEsWUFBbUJBLEdBQUcsSUFGbENBLFFBRU8sQ0FGUEEsSUFHQTtBQUNDbUosZ0JBQU0sS0FBS25KLEdBQUcsSUFBSEEsWUFBbUJBLEdBQUcsSUFBdEJBLGdCQUEwQ0EsR0FBRyxJQUp6REEsWUFJTyxDQUpQQSxJQUtBO0FBQ0FxSTtBQUFBQTtBQUFBQSxhQUFPLEdBQVBBLEVBVFAsTUFTT0EsQ0FSVSxDQUFiLENBREosRUFVUTtBQUNOaUIsa0JBQU0sQ0FBTkE7QUFDRDtBQUNGOztBQUNEO0FBQ0Q7QUFFY0c7OztBQUFBQSxpQ0FBZixhQUFlQTs7Ozs7Ozs7QUNoRGY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFJWCxPQUFPLEdBQUd0RCxLQUFLLENBQW5CO0FBRWVzRDs7QUFBQUEsaUNBQWYsT0FBZUE7Ozs7Ozs7QUN6QmZ4RixZQUFNLENBQU5BLFVBQWlCLDBCQUF5QjtBQUN6QyxZQUFHLENBQUNvRyxjQUFjLENBQWxCLGlCQUFvQztBQUNuQyxjQUFJcEcsTUFBTSxHQUFHbkUsTUFBTSxDQUFOQSxPQURzQixjQUN0QkEsQ0FBYixDQURtQyxDQUVuQzs7QUFDQSxjQUFHLENBQUNtRSxNQUFNLENBQVYsVUFBcUJBLE1BQU0sQ0FBTkE7QUFDckJuRSxnQkFBTSxDQUFOQSxpQ0FBd0M7QUFDdkNrQixzQkFBVSxFQUQ2QjtBQUV2Q0csZUFBRyxFQUFFLGVBQVc7QUFDZixxQkFBTzhDLE1BQU0sQ0FBYjtBQUNBO0FBSnNDLFdBQXhDbkU7QUFNQUEsZ0JBQU0sQ0FBTkEsNkJBQW9DO0FBQ25Da0Isc0JBQVUsRUFEeUI7QUFFbkNHLGVBQUcsRUFBRSxlQUFXO0FBQ2YscUJBQU84QyxNQUFNLENBQWI7QUFDQTtBQUprQyxXQUFwQ25FO0FBTUFBLGdCQUFNLENBQU5BLGtDQUF5QztBQUN4Q2tCLHNCQUFVLEVBQUU7QUFENEIsV0FBekNsQjtBQUdBbUUsZ0JBQU0sQ0FBTkE7QUFDQTs7QUFDRDtBQXRCREE7Ozs7Ozs7OztBQ0FBOztBQUNBLFVBQUlxRixXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0Esa0NBQTRCO0FBQzFCLFlBQUl3SyxJQUFJLEdBQUd4SixLQUFLLElBQUlBLEtBQUssQ0FBekI7QUFBQSxZQUNJeUosS0FBSyxHQUFJLDZCQUE2QkQsSUFBSSxDQUFsQyxTQUFDLElBRGI7QUFHQSxlQUFPeEosS0FBSyxLQUFaO0FBQ0Q7QUFFYzBKOzs7QUFBQUEsaUNBQWYsV0FBZUE7Ozs7Ozs7O0FDakJmOztBQUFBO0FBQUE7OztBQUFBO0FBQUE7OztBQUFBO0FBSUE7OztBQUNBLFVBQUlDLFNBQVMsR0FBYjtBQUFBLFVBQ0lDLFFBQVEsR0FEWjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSw4QkFBd0I7QUFDdEIsWUFBSSxDQUFDOUU7QUFBQUE7QUFBQUEsV0FBTCxLQUFLQSxDQUFMLEVBQTBCO0FBQ3hCO0FBQ0Q7O0FBQ0QsWUFBSTRDLEdBQUcsR0FBRzdDO0FBQUFBO0FBQUFBLFdBQVYsS0FBVUEsQ0FBVjtBQUNBLGVBQU82QyxHQUFHLElBQUhBLFlBQW1CQSxHQUFHLElBQXRCQSxhQUNKLE9BQU8xSCxLQUFLLENBQVosdUJBQW9DLE9BQU9BLEtBQUssQ0FBWixRQUFwQyxZQUFxRSxDQUFDNko7QUFBQUE7QUFBQUEsV0FEekUsS0FDeUVBLENBRHpFO0FBRUQ7QUFFY0M7OztBQUFBQSxpQ0FBZixPQUFlQTs7Ozs7Ozs7QUNuQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSx3Q0FBa0M7QUFDaEMsZUFBTyxlQUFjO0FBQ25CLGlCQUFPMUMsSUFBSSxDQUFDMkMsU0FBUyxDQUFyQixHQUFxQixDQUFWLENBQVg7QUFERjtBQUdEO0FBRWNDOzs7QUFBQUEsaUNBQWYsT0FBZUE7Ozs7Ozs7O0FDZGY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLHlDQUFtQztBQUNqQyxZQUFJN0IsS0FBSyxHQUFHLENBQVo7QUFBQSxZQUNJSSxNQUFNLEdBQUcwQixLQUFLLElBQUxBLFdBQW9CQSxLQUFLLENBRHRDO0FBQUEsWUFFSWQsTUFBTSxHQUFHOUQsS0FBSyxDQUZsQixNQUVrQixDQUZsQjs7QUFJQSxlQUFPLFVBQVAsUUFBeUI7QUFDdkI4RCxnQkFBTSxDQUFOQSxLQUFNLENBQU5BLEdBQWdCZSxRQUFRLENBQUNELEtBQUssQ0FBTixLQUFNLENBQU4sU0FBeEJkLEtBQXdCLENBQXhCQTtBQUNEOztBQUNEO0FBQ0Q7QUFFY2dCOzs7QUFBQUEsaUNBQWYsUUFBZUE7Ozs7Ozs7O0FDcEJmOztBQUNBLFVBQUlDLGFBQWEsR0FBakI7QUFFZUE7O0FBQUFBLGlDQUFmLGFBQWVBOzs7Ozs7OztBQ0hmOztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSwrQkFBeUI7QUFDdkIsZUFBT3BLLEtBQUssSUFBTEEsWUFBcUJxSztBQUFBQTtBQUFBQSxXQUE1QixLQUE0QkEsQ0FBNUI7QUFDRDtBQUVjQzs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQzNCZjs7QUFBQTtBQUFBOztBQUFBOztBQUVBLHlEQUFtRDtBQUNqRHJKLGtCQUFVLENBQVZBO0FBQ0E7QUFDRDs7QUFFYywwQkFBMkI7QUFBQSwwQ0FBTk4sSUFBTTtBQUFOQSxjQUFNLE1BQU5BLEdBQU0sZUFBTkE7QUFBTTs7QUFDeEMsZUFBT3VDO0FBQUFBO0FBQUFBLFdBQVEsZ0JBQVJBLEVBQVAsSUFBT0EsQ0FBUDs7Ozs7Ozs7OztBQ1JGOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNlLDREQUFzRDtBQUNuRSxZQUFJcUgsSUFBSSxHQUFHQztBQUFBQTtBQUFBQSxXQUFNLFNBQU5BLEVBRHdELE9BQ3hEQSxDQUFYLENBRG1FLENBR25FOztBQUNBLFlBQUlDLE9BQU8sR0FBRyxTQUNaRixJQUFJLENBRFEsY0FDWkEsRUFEWSxFQUVaQSxJQUFJLENBRlEsV0FFWkEsRUFGWSxFQUdaQSxJQUFJLENBSFEsVUFHWkEsRUFIWSxFQUlaQSxJQUFJLENBSlEsV0FJWkEsRUFKWSxFQUtaQSxJQUFJLENBTFEsYUFLWkEsRUFMWSxFQU1aQSxJQUFJLENBTlEsYUFNWkEsRUFOWSxFQU9aQSxJQUFJLENBWDZELGtCQVdqRUEsRUFQWSxDQUFkLENBSm1FLENBYW5FOztBQUNBLFlBQUlHLGtCQUFrQixHQUFHQztBQUFBQTtBQUFBQSxXQUFlLFFBQWZBLEVBQXpCLE9BQXlCQSxDQUF6QjtBQUVBLGVBQU9ELGtCQUFrQixHQUNyQkU7QUFBQUE7QUFBQUEsV0FBZSxPQUFmQSxFQURxQixrQkFDckJBLENBRHFCLEdBQXpCOzs7Ozs7Ozs7O0FDNUNGOztBQUFBO0FBQUE7O0FBQUE7O0FBRUEsVUFBSUMsb0JBQW9CLEdBQXhCO0FBQ0EsVUFBSUMsc0JBQXNCLEdBQTFCO0FBRUEsVUFBSUMsUUFBUSxHQUFHO0FBQ2JDLGdCQUFRLEVBREs7QUFFYkMsaUJBQVMsRUFGSTtBQUdiQyxrQkFBVSxFQUhHO0FBSWJDLG9CQUFZLEVBSkM7QUFLYkMsb0JBQVksRUFBRTtBQUxELE9BQWYsQyxDQVFBOztBQUNlLHFEQUErQztBQUM1RDtBQUNBLFlBRjRELGNBRTVELENBRjRELENBSTVEOztBQUNBQyxhQUFLLEdBQUdOLFFBQVEsQ0FBUkEsZUFBUk0sY0FBUU4sQ0FBUk07O0FBQ0EsbUJBQVc7QUFDVDtBQUNEOztBQUVELFlBVjRELEtBVTVELENBVjRELENBWTVEOztBQUNBQSxhQUFLLEdBQUdOLFFBQVEsQ0FBUkEsZ0JBQVJNLGNBQVFOLENBQVJNOztBQUNBLG1CQUFXO0FBQ1RDLGVBQUssR0FBR0MsUUFBUSxDQUFDRixLQUFLLENBQU4sQ0FBTSxDQUFOLEVBQWhCQyxFQUFnQixDQUFoQkE7O0FBRUEsY0FBSSxDQUFDRSxnQkFBZ0IsQ0FBckIsS0FBcUIsQ0FBckIsRUFBOEI7QUFDNUI7QUFDRDs7QUFFREMsd0JBQWMsR0FBR0gsS0FBSyxHQUF0Qkc7QUFDQSxpQkFBT0osS0FBSyxDQUFMQSxDQUFLLENBQUxBLFdBQW1CLENBQW5CQSxpQkFBUDtBQXRCMEQsVUF5QjVEOzs7QUFDQUEsYUFBSyxHQUFHTixRQUFRLENBQVJBLGtCQUFSTSxjQUFRTixDQUFSTTs7QUFDQSxtQkFBVztBQUNUQyxlQUFLLEdBQUdDLFFBQVEsQ0FBQ0YsS0FBSyxDQUFOLENBQU0sQ0FBTixFQUFoQkMsRUFBZ0IsQ0FBaEJBO0FBQ0EsY0FBSUksT0FBTyxHQUFHSCxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBdEIsRUFBc0IsQ0FBdEI7O0FBRUEsY0FBSSxDQUFDRyxnQkFBZ0IsUUFBckIsT0FBcUIsQ0FBckIsRUFBdUM7QUFDckM7QUFDRDs7QUFFREMsd0JBQWMsR0FDWkgsS0FBSyxHQUFMQSx1QkFBK0JJLE9BQU8sR0FEeENEO0FBRUEsaUJBQU9KLEtBQUssQ0FBTEEsQ0FBSyxDQUFMQSxXQUFtQixDQUFuQkEsaUJBQVA7QUFyQzBELFVBd0M1RDs7O0FBQ0FBLGFBQUssR0FBR04sUUFBUSxDQUFSQSxrQkFBUk0sY0FBUU4sQ0FBUk07O0FBQ0EsbUJBQVc7QUFDVDtBQUNBLGNBQUlNLE1BQU0sR0FBR0M7QUFBQUE7QUFBQUEsYUFBYyxJQUFkQSxFQUFiLGNBQWFBLENBQWI7QUFDQSxjQUFJQyxLQUFLLEdBQUdDLElBQUksQ0FBSkEsSUFDVkgsTUFBTSxDQURJRyxDQUNKLENBRElBLEVBRVZILE1BQU0sQ0FBTkEsQ0FBTSxDQUFOQSxHQUZVRyxHQUdWSCxNQUFNLENBSElHLENBR0osQ0FISUEsRUFJVkgsTUFBTSxDQUpJRyxDQUlKLENBSklBLEVBS1ZILE1BQU0sQ0FMSUcsQ0FLSixDQUxJQSxFQU1WSCxNQUFNLENBTlIsQ0FNUSxDQU5JRyxDQUFaO0FBUUEsY0FBSUMscUJBQXFCLEdBQUd4QixJQUFJLENBQUpBLFlBQWtCQSxJQUFJLENBQUpBLFlBQTlDO0FBQ0EsaUJBQU8sRUFBRXNCLEtBQUssR0FBZCxxQkFBTyxDQUFQO0FBQ0Q7O0FBRUQ7QUFDRDs7QUFFRCxnREFBMEM7QUFDeEMsWUFBSUgsT0FBTyxJQUFQQSxTQUFvQkEsT0FBTyxHQUFQQSxLQUFlQSxPQUFPLEdBQTlDLEVBQUlBLENBQUosRUFBc0Q7QUFDcEQ7QUFDRDs7QUFFRDs7Ozs7Ozs7OztBQy9FRjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJZU07OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7OztBQ1ZmOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVDOzs7QUFBQUE7QUFBZjtBQUFlQTs7Ozs7Ozs7O0FDVmY7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ05BOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVDOzs7QUFBQUE7QUFBZjtBQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztVQUNNQSxhOzs7Ozs7Ozs7Ozs7OztBQUNKO0FBQ0Y7QUFDQTsrQkFDTzlLLE0sRUFBUTtBQUFBOztBQUNYLGdCQUFJQSxNQUFNLENBQU5BLGFBQUosTUFBOEI7QUFDNUIsNEJBQWMrSyxPQUFPLENBQUMvSyxNQUFNLENBQTVCLFFBQXFCLENBQXJCO0FBREYsbUJBRU8sSUFBSUEsTUFBTSxDQUFOQSxjQUFKLE1BQStCO0FBQ3BDLDRCQUFjK0ssT0FBTyxDQUFDL0ssTUFBTSxDQUE1QixTQUFxQixDQUFyQjtBQUNEOztBQUVELDhCQUFrQixVQUNoQiwyQ0FBMkMsQ0FEN0MsSUFDNkMsQ0FBM0MsQ0FEZ0IsQ0FBbEI7QUFJQSwrQkFBbUIsVUFDakIsNENBQTRDLENBRDlDLEtBQzhDLENBQTVDLENBRGlCLENBQW5CO0FBSUEsb0NBQXdCLCtDQUd0QixnQkFIRixDQUdFLENBSHNCLENBQXhCO0FBS0EscUNBQXlCLGdEQUd2QixpQkFIRixDQUdFLENBSHVCLENBQXpCO0FBTUEsOEJBQWtCLG9CQUFvQixhQUFDO0FBQUEscUJBQUlnTCxNQUFNLENBQVYsQ0FBVSxDQUFWO0FBQXZDLGFBQWtCLENBQWxCO0FBQ0EsK0JBQW1CLHFCQUFxQixhQUFDO0FBQUEscUJBQUlBLE1BQU0sQ0FBVixDQUFVLENBQVY7QUFBekMsYUFBbUIsQ0FBbkI7QUFFQSxzQ0FBMEJoTCxNQUFNLENBQWhDOztBQUNBLGdCQUFJLEtBQUosb0JBQTZCO0FBQzNCLGtCQUFJaUwseUJBQXlCLEdBQzNCakwsTUFBTSxDQUFOQSxrQkFBeUJBLE1BQU0sQ0FBTkEsWUFGQSxFQUMzQixDQUQyQixDQUVzQjs7QUFFakQsNkNBQStCO0FBQzdCO0FBREYscUJBRU8sSUFBSUEsTUFBTSxDQUFOQSxjQUFKLE1BQStCO0FBQ3BDLDhCQUFjQSxNQUFNLENBQXBCO0FBREsscUJBRUE7QUFDTCw4QkFBY0EsTUFBTSxDQUFwQjtBQUNEO0FBVkgsbUJBV087QUFDTCw0QkFBY0EsTUFBTSxDQUFwQjtBQUNEOztBQUVELDBCQUFjLG1CQUNaLEtBRFksUUFFWixLQUZZLFlBR1osS0FIRixXQUFjLENBQWQ7QUFNQSw2QkFBaUIsSUFBSTRGO0FBQUo7QUFBSUEsYUFBSixDQUFrQixLQUFsQixRQUErQixvQkFBWTtBQUMxRCxtQkFBSSxDQUFKLFNBQWMsS0FBSSxDQUFKLGNBQ1pzRixRQUFRLENBREksU0FDWkEsRUFEWSxFQUVaLEtBQUksQ0FGUSxZQUdaLEtBQUksQ0FITixXQUFjLENBQWQ7QUFERixhQUFpQixDQUFqQjs7QUFPQTtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O21DQUNXO0FBQ1AsbUJBQU8sZUFBUCxNQUFPLEVBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FDWTtBQUNSO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTs7Ozs2Q0FDcUI7QUFDakIsZ0JBQUksS0FBSixvQkFBNkI7QUFDM0I7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztxQ0FDYTtBQUNULG1CQUFPLGNBQWMsS0FBZCxtQkFBc0MsS0FBN0M7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7b0NBQ1k7QUFDUjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztvQ0FDWTtBQUNSOztBQUNBOztBQUNBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3FDQUNhO0FBQ1Q7O0FBQ0E7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7d0NBQ2dCdE0sSyxFQUFPdU0sUyxFQUFXQyxVLEVBQVk7QUFDMUMsZ0JBQU1DLGFBQWEsR0FBR0wsTUFBTSxDQUE1QixLQUE0QixDQUE1QjtBQUVBLG1CQUFPRyxTQUFTLENBQVRBLHlCQUFtQyxDQUFuQ0EsV0FFSEMsVUFBVSxDQUFWQSx5QkFBb0MsQ0FBcENBLFlBRko7QUFLRDs7OztRQTdJeUIxTjtBQUFBQTtBQUFBQSxPO0FBZ0pib047OztBQUFBQSxpQ0FBZixhQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDM0tmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7VUFDTXBOLFM7Ozs7ZUFNSjROLEksR0FBTyxJOzs7Ozs7QUFFUDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFOytCQUNLdEwsTSxFQUFRO0FBQ1h3RSxtQkFBTyxDQUFQQSxlQUNLLGlCQURMQTtBQUdEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OzttQ0FDVztBQUNQLG1CQUFPLEtBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7O29DQUNZLENBQ1I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O29DQUNZekUsSSxFQUFNQyxNLEVBQXlCO0FBQUEsZ0JBQWpCdUwsUUFBaUIsdUVBQU4sSUFBTTtBQUN2Qzs7QUFFQSxnQkFBSXZMLE1BQU0sSUFBSUEsTUFBTSxDQUFOQSxlQUFWQSxJQUFVQSxDQUFWQSxJQUF5Q0EsTUFBTSxDQUFOQSxJQUFNLENBQU5BLEtBQTdDLE1BQW9FO0FBQ2xFd0wsb0JBQU0sR0FBR3hMLE1BQU0sQ0FBZndMLElBQWUsQ0FBZkE7QUFERixtQkFFTztBQUNMO0FBQ0Esa0JBQ0V4TCxNQUFNLENBQU5BLDRCQUNBQSxNQUFNLENBQU5BLHNCQURBQSxJQUNBQSxDQURBQSxJQUVBQSxNQUFNLENBQU5BLGlCQUhGLE1BSUU7QUFDQXdMLHNCQUFNLEdBQUd4TCxNQUFNLENBQU5BLE9BQVR3TCxJQUFTeEwsQ0FBVHdMO0FBTEYscUJBTU87QUFDTDtBQUNBLG9CQUFJQyx5QkFBeUIsR0FBN0I7O0FBQ0Esb0JBQUl6TCxNQUFNLENBQU5BLGVBQUosU0FBSUEsQ0FBSixFQUFzQztBQUNwQ3lMLDJDQUF5QixHQUN2QnpMLE1BQU0sQ0FBTkEscUNBQTRDQSxNQUFNLENBQU5BLFFBRDlDeUw7QUFFRDs7QUFFRCxvQkFDRUEseUJBQXlCLElBQ3pCQSx5QkFBeUIsQ0FBekJBLGVBQXlDekwsTUFBTSxDQUFOQSxPQUR6Q3lMLEtBQ0FBLENBREFBLElBRUFBLHlCQUF5QixDQUFDekwsTUFBTSxDQUFOQSxPQUExQnlMLEtBQXlCLENBQXpCQSxnQkFGQUEsSUFFQUEsQ0FGQUEsSUFHQUEseUJBQXlCLENBQUN6TCxNQUFNLENBQU5BLE9BQTFCeUwsS0FBeUIsQ0FBekJBLFdBSkYsTUFLRTtBQUNBRCx3QkFBTSxHQUFHQyx5QkFBeUIsQ0FBQ3pMLE1BQU0sQ0FBTkEsT0FBMUJ5TCxLQUF5QixDQUF6QkEsQ0FBVEQsSUFBU0MsQ0FBVEQ7QUFORix1QkFPTyxJQUNMQyx5QkFBeUIsSUFDekJBLHlCQUF5QixDQUF6QkEsZUFEQUEsSUFDQUEsQ0FEQUEsSUFFQUEseUJBQXlCLENBQXpCQSxJQUF5QixDQUF6QkEsS0FISyxNQUlMO0FBQ0FELHdCQUFNLEdBQUdDLHlCQUF5QixDQUFsQ0QsSUFBa0MsQ0FBbENBO0FBTEssdUJBTUE7QUFDTDtBQUNBLHNCQUFNRSxPQUFPLEdBQUcxTCxNQUFNLENBQXRCOztBQUNBLHNCQUNFMEwsT0FBTyxJQUNQQSxPQUFPLENBQVBBLGVBREFBLElBQ0FBLENBREFBLElBRUFBLE9BQU8sQ0FBUEEsSUFBTyxDQUFQQSxLQUhGLE1BSUU7QUFDQUYsMEJBQU0sR0FBR0UsT0FBTyxDQUFoQkYsSUFBZ0IsQ0FBaEJBO0FBTEYseUJBTU87QUFDTDtBQUNBQSwwQkFBTSxHQUFOQTtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVELG1CQUFPLHlDQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztpQ0FDU3hMLE0sRUFBUTtBQUNiLGdCQUFNMkwsR0FBRyxHQUFHLDhDQUFaOztBQUVBLGdCQUFJLENBQUosS0FBVTtBQUNSLG9CQUFNLFVBQU4sNkNBQU0sQ0FBTjtBQUNEOztBQUVEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztpQ0FDUzNMLE0sRUFBUTtBQUNiLGdCQUFNNEwsR0FBRyxHQUFHLGtEQUFaOztBQUVBLGdCQUFJLENBQUosS0FBVTtBQUNSLG9CQUFNLFVBQU4sK0NBQU0sQ0FBTjtBQUNEOztBQUVEO0FBQ0Q7Ozs7O0FBR1lsTzs7O0FBQUFBLGlDQUFmLFNBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaktmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7VUFDTWtJLGE7Ozs7QUFDSjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFLGlDQUFtRDtBQUFBOztBQUFBLGNBQXZDaUcsWUFBdUMsdUVBQXhCLEtBQXdCO0FBQUEsY0FBakJDLFFBQWlCLHVFQUFOLElBQU07O0FBQUE7O0FBQ2pEOztBQUNBOztBQUNBOztBQUNBOztBQUppRDtBQUtsRDtBQUVEO0FBQ0Y7QUFDQTs7Ozs7K0JBRU85TCxNLEVBQVE7QUFDWDtBQUNBLDRCQUFnQixtQkFBaEIsSUFBZ0IsQ0FBaEI7QUFDQSw4QkFBa0IscUJBQWxCLElBQWtCLENBQWxCO0FBRUEsd0JBQVksa0NBQVosS0FBWSxDQUFaO0FBQ0E7QUFDQSxpQ0FBcUIsQ0FBckI7QUFFQTtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O21DQUNXO0FBQ1AsZ0JBQU00TCxHQUFHLEdBQUcsWUFBWSxLQUF4QixPQUFZLENBQVo7QUFFQSxnQkFBTUcsVUFBVSxHQUFHQyxRQUFRLENBQVJBLGNBQW5CLEtBQW1CQSxDQUFuQjtBQUNBRCxzQkFBVSxDQUFWQSxZQUpPLFlBSVBBLENBSk8sQ0FNUDs7QUFDQSwwQkFBY0gsR0FBRyxDQUFIQSxjQUFkLE9BQWNBLENBQWQ7QUFDQSwwQ0FBdUJsRyxJQUFJLENBQTNCLE1BQXVCQSxFQUF2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFzQixLQUF0QixTQUFzQixFQUF0QjtBQUNBLG1DQUF1QixLQUF2QixVQUF1QixFQUF2QjtBQUNBLG1DQWRPLEdBY1AsQ0FkTyxDQWdCUDs7QUFDQSxnQkFBTXVHLEtBQUssR0FBR0QsUUFBUSxDQUFSQSxjQUFkLE9BQWNBLENBQWQ7QUFDQUMsaUJBQUssQ0FBTEE7QUFDQUEsaUJBQUssQ0FBTEEsS0FBSyxDQUFMQSxHQUFZLFlBQVpBO0FBQ0FBLGlCQUFLLENBQUxBO0FBQWtCO0FBcEJYLHVIQW9CUEEsQ0FwQk8sQ0F5QlA7O0FBQ0FGLHNCQUFVLENBQVZBLFlBQXVCLEtBQXZCQTtBQUNBQSxzQkFBVSxDQUFWQTtBQUVBQSxzQkFBVSxDQUFWQSwwQkFBcUMsS0FBckNBOztBQUNBLGtEQUFzQyxLQUF0Qzs7QUFFQTtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUVZO0FBQ1IsZ0JBQU1BLFVBQVUsR0FBRyx3QkFBbkIsYUFBbUIsQ0FBbkI7O0FBQ0FBLHNCQUFVLENBQVZBLDZCQUF3QyxLQUF4Q0E7O0FBQ0EscURBQXlDLEtBQXpDO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7a0NBQ1U7QUFDTjs7QUFDQTtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztzQ0FDY0QsUSxFQUFVO0FBQ3BCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3dDQUNnQjtBQUNaLG1CQUFPLEtBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7cUNBQ2FsTixLLEVBQU87QUFDaEI7O0FBQ0EsZ0JBQUksS0FBSixRQUFpQjtBQUNmO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7c0NBQ2M7QUFDVixtQkFBTyxLQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7bUNBQ1c7QUFDUCw0QkFBZ0IsQ0FBQyxLQUFqQixTQUFpQixFQUFqQjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztzQ0FDY0EsSyxFQUFPO0FBQ2pCOztBQUNBLGdCQUFJLEtBQUosUUFBaUI7QUFDZjtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3VDQUNlO0FBQ1gsbUJBQU8sS0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7bUNBR1dzTixDLEVBQUc7QUFDVixnQkFBSSxLQUFKLFdBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQ7O0FBRUEsZ0JBQUksS0FBSixXQUFvQjtBQUNsQjtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O3FDQUVhQSxDLEVBQUc7QUFDWixnQkFBSSxLQUFKLFdBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQsZ0JBQU16TixHQUFHLEdBQUd5TixDQUFDLENBQURBLFNBQVdBLENBQUMsQ0FMWixPQUtaLENBTFksQ0FPWjs7QUFDQSxnQkFBSXpOLEdBQUcsSUFBUCxJQUFlO0FBQ2I7O0FBQ0Esa0JBQUksS0FBSixXQUFvQjtBQUNsQjtBQUNEOztBQUNEeU4sZUFBQyxDQUFEQTtBQUxGLGNBT0E7QUFQQSxpQkFRSyxJQUFJek4sR0FBRyxJQUFQLElBQWU7QUFDbEI7O0FBQ0Esb0JBQUksS0FBSixXQUFvQjtBQUNsQjtBQUNEOztBQUNEeU4saUJBQUMsQ0FBREE7QUFMRyxnQkFPTDtBQVBLLG1CQVFBLElBQUl6TixHQUFHLElBQVAsSUFBZTtBQUNsQjs7QUFDQSxzQkFBSSxLQUFKLFdBQW9CO0FBQ2xCO0FBQ0Q7O0FBQ0R5TixtQkFBQyxDQUFEQTtBQUNEO0FBQ0Y7Ozs7UUF0TnlCeE87QUFBQUE7QUFBQUEsTyx5REFpQnpCeU87QUFBQUE7QUFBQUEsTyx5SUFzREFBO0FBQUFBO0FBQUFBLE8sNklBeUZBQztBQUFBQTtBQUFBQSxPLGdKQXNCQUE7QUFBQUE7QUFBQUEsTztBQW1DWXhHOztBQUFBQSxpQ0FBZixhQUFlQTs7Ozs7Ozs7QUM1T2Y7O0FBQUE7QUFBQTs7QUFBQTs7VUFDUWpJLGMsR0FBbUJDLE0sQ0FBbkJELGM7O0FBRVIseURBQW1EO0FBQUEsWUFDekNrQixZQUR5QyxHQUNRZ0IsVUFEUjtBQUFBLFlBQzNCZixVQUQyQixHQUNRZSxVQURSO0FBQUEsWUFDZndNLFdBRGUsR0FDUXhNLFVBRFI7QUFBQSxZQUNGakIsS0FERSxHQUNRaUIsVUFEUjtBQUVqRCxlQUFPO0FBQ0xoQixzQkFBWSxFQURQO0FBRUxDLG9CQUFVLEVBRkw7QUFJTEcsYUFKSyxpQkFJQztBQUNKO0FBQ0E7QUFDQSxnQkFBSSxTQUFKLFFBQXFCO0FBQ25CO0FBQ0Q7O0FBRUQsZ0JBQU1xTixHQUFHLEdBQUdELFdBQVcsR0FBR0EsV0FBVyxDQUFYQSxLQUFILElBQUdBLENBQUgsR0FBdkI7QUFFQTFPLDBCQUFjLFlBQVk7QUFDeEJrQiwwQkFBWSxFQURZO0FBRXhCQyx3QkFBVSxFQUZjO0FBR3hCTSxzQkFBUSxFQUhnQjtBQUl4QlIsbUJBQUssRUFBRTBOO0FBSmlCLGFBQVosQ0FBZDNPO0FBT0E7QUFwQkc7QUF1QkwwQixhQUFHLEVBQUVDO0FBQUFBO0FBQUFBLGFBQW1CLEdBQW5CQTtBQXZCQSxTQUFQO0FBeUJEOztBQUVjLGdDQUFpQztBQUFBLDBDQUFOQyxJQUFNO0FBQU5BLGNBQU0sTUFBTkEsR0FBTSxlQUFOQTtBQUFNOztBQUM5QyxlQUFPdUM7QUFBQUE7QUFBQUEsV0FBUSxnQkFBUkEsRUFBUCxJQUFPQSxDQUFQOzs7Ozs7Ozs7QUNoQ0YsVUFBSUcsT0FBTyxHQUFHc0ssbUJBQU8sQ0FBckIsRUFBcUIsQ0FBckI7O0FBRUEsVUFBRyxtQkFBSCxVQUFnQ3RLLE9BQU8sR0FBRyxDQUFDLENBQUNGLE9BQUQsWUFBWEUsRUFBVyxDQUFELENBQVZBO0FBRWhDO0FBQ0E7QUFJQSxVQUFJdUssT0FBTyxHQUFHO0FBQUMsZUFBTTtBQUFQLE9BQWQ7QUFFQUEsYUFBTyxDQUFQQTs7QUFDQUEsYUFBTyxDQUFQQSxhQUFxQixZQUFXO0FBQ2hCLGVBQU9DLE1BQU0sQ0FBTkEsZ0JBQVA7QUFEaEJEOztBQUlBLFVBQUlFLE1BQU0sR0FBR0gsbUJBQU8sQ0FBUEEsQ0FBTyxDQUFQQSxVQUFiLE9BQWFBLENBQWI7O0FBRUEsVUFBR3RLLE9BQU8sQ0FBVixRQUFtQkYsTUFBTSxDQUFOQSxVQUFpQkUsT0FBTyxDQUF4QkY7O0FBRW5CLGlCQUFlLEU7Ozs7Ozs7O0FDckJmLGlDQUEyQixtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUF1RCxLQUF2RCxDQUEzQixDLENBQ0E7QUFHQTs7QUFDQSxvQkFBYyxRQUFkLEVBQXVCLHlvREFBdkIsRUFBK3BELEVBQS9wRCxHLENBRUE7Ozs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLFlBQU0sQ0FBTkEsVUFBaUIsZUFBZTtBQUM5QjtBQUNBLFlBQUk0SyxRQUFRLEdBQUcsaUNBQWlDRixNQUFNLENBQXREOztBQUVBLFlBQUksQ0FBSixVQUFlO0FBQ2IsZ0JBQU0sVUFBTixrQ0FBTSxDQUFOO0FBTDRCLFVBUS9COzs7QUFDQSxZQUFJLFFBQVEsZUFBWixVQUFxQztBQUNuQztBQUNBOztBQUVELFlBQUlHLE9BQU8sR0FBR0QsUUFBUSxDQUFSQSxrQkFBMkJBLFFBQVEsQ0FBakQ7QUFDQSxZQUFJRSxVQUFVLEdBQUdELE9BQU8sR0FBR0QsUUFBUSxDQUFSQSw4QkFkRyxHQWNIQSxDQUEzQixDQWQ4QixDQWdCL0I7O0FBQ0E7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQyxZQUFJRyxRQUFRLEdBQUcsR0FBRyxDQUFILCtEQUFtRSw4QkFBNkI7QUFDOUc7QUFDQSxjQUFJQyxlQUFlLEdBQUcsT0FBTyxDQUFQLDJCQUVBLGlCQUFlO0FBQUU7QUFGakIsaUNBR0EsaUJBQWU7QUFBRTtBQUx1RSxXQUV4RixDQUF0QixDQUY4RyxDQU85Rzs7QUFDQSxjQUFJLHlEQUFKLGVBQUksQ0FBSixFQUErRTtBQUM3RTtBQVQ0RyxZQVk5Rzs7O0FBQ0E7O0FBRUEsY0FBSUEsZUFBZSxDQUFmQSxrQkFBSixHQUF5QztBQUN0QztBQUNGQyxrQkFBTSxHQUFOQTtBQUZELGlCQUdPLElBQUlELGVBQWUsQ0FBZkEsaUJBQUosR0FBd0M7QUFDOUM7QUFDQUMsa0JBQU0sR0FBR0osT0FBTyxHQUY4QixlQUU5Q0ksQ0FGOEMsQ0FFVjtBQUY5QixpQkFHQTtBQUNOO0FBQ0FBLGtCQUFNLEdBQUdILFVBQVUsR0FBR0UsZUFBZSxDQUFmQSxpQkFGaEIsRUFFZ0JBLENBQXRCQyxDQUZNLENBRXNEO0FBdkJpRCxZQTBCOUc7OztBQUNBLGlCQUFPLFNBQVMvSixJQUFJLENBQUpBLFVBQVQsTUFBU0EsQ0FBVCxHQUFQO0FBckU4QixTQTBDaEIsQ0FBZixDQTFDK0IsQ0F3RS9COztBQUNBO0FBekVEbEI7Ozs7Ozs7OztBQ2RBOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVrTDs7O0FBQUFBO0FBQWY7QUFBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1ZmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7VUFDTUEsZTs7OztBQUNKO0FBQ0Y7QUFDQTs7O0FBQ0UsbUNBQWM7QUFBQTs7QUFBQTs7QUFDWiw4QkFEWSxJQUNaLEVBRFksQ0FHWjs7QUFDQSx1QkFBWWpCLFFBQVEsQ0FBUkEsY0FBWixNQUFZQSxDQUFaO0FBQ0E7QUFDQTtBQU5ZO0FBUWI7QUFFRDtBQUNGO0FBQ0E7Ozs7OytCQUNPaE0sTSxFQUFRO0FBQ1g7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OzttQ0FDVztBQUNQLG1CQUFPLEtBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FDWTtBQUNSLGdCQUFJLEtBQUosV0FBb0I7QUFDbEI7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFOzs7O2tDQUNRQSxNLEVBQVFrTixNLEVBQVE7QUFDdEIsZ0JBQUl0TyxLQUFLLEdBQUdvQixNQUFNLENBQU5BLGlCQUF3QkEsTUFBTSxDQUE5QkEsaUJBQWdEQSxNQUFNLENBQWxFOztBQUVBLGdCQUFJcEIsS0FBSyxLQUFMQSxRQUFrQixpQkFBdEIsYUFBb0Q7QUFDbEQ7QUFERixtQkFFTztBQUNMQSxtQkFBSyxHQUFHb00sTUFBTSxDQUFkcE0sS0FBYyxDQUFkQTtBQUNBLGtCQUFNdU8sc0JBQXNCLEdBQUduQyxNQUFNLENBQ25DLGlEQURGLFFBQ0UsQ0FEbUMsQ0FBckM7QUFHQSxrQkFBTW9DLHVCQUF1QixHQUFHcEMsTUFBTSxDQUNwQyxrREFERixRQUNFLENBRG9DLENBQXRDO0FBR0Esa0JBQU1xQyxnQkFBZ0IsR0FBRyxVQUNmLDJDQUEyQyxDQUQ1QixJQUM0QixDQUEzQyxDQURlLE1BRWxCLGFBQUM7QUFBQSx1QkFBSXJDLE1BQU0sQ0FBVixDQUFVLENBQVY7QUFGUixlQUF5QixDQUF6QjtBQUdBLGtCQUFNc0MsaUJBQWlCLEdBQUcsVUFDaEIsNENBQTRDLENBRDVCLEtBQzRCLENBQTVDLENBRGdCLE1BRW5CLGFBQUM7QUFBQSx1QkFBSXRDLE1BQU0sQ0FBVixDQUFVLENBQVY7QUFiSCxlQVdxQixDQUExQixDQVhLLENBZUw7O0FBQ0Esa0JBQUlxQyxnQkFBZ0IsQ0FBaEJBLGlCQUFrQyxDQUF0QyxHQUEwQztBQUN4QyxvQkFDRSxDQUFDRixzQkFBc0IsQ0FBdkIsVUFDQUEsc0JBQXNCLEtBRnhCLFVBR0U7QUFDQSxzQkFBTWpDLFFBQVEsR0FBRyxrQkFBakIsTUFBaUIsQ0FBakI7O0FBQ0FBLDBCQUFRLENBQVJBO0FBQ0E7O0FBQ0Esd0NBQXNCQSxRQUFRLENBQTlCLE1BQXNCQSxFQUF0QjtBQVBGLHVCQVFPO0FBQ0w7QUFDRDtBQVhILGdCQWFBO0FBYkEsbUJBY0ssSUFBSW9DLGlCQUFpQixDQUFqQkEsaUJBQW1DLENBQXZDLEdBQTJDO0FBQzlDLHNCQUNFLENBQUNGLHVCQUF1QixDQUF4QixVQUNBQSx1QkFBdUIsS0FGekIsVUFHRTtBQUNBLHdCQUFNbEMsU0FBUSxHQUFHLGtCQUFqQixNQUFpQixDQUFqQjs7QUFDQUEsNkJBQVEsQ0FBUkE7O0FBQ0E7O0FBQ0EsMENBQXNCQSxTQUFRLENBQTlCLE1BQXNCQSxFQUF0QjtBQVBGLHlCQVFPO0FBQ0w7QUFDRDtBQVhFLHVCQVlFO0FBQ0w7QUFDRDtBQUNGOztBQUVEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozt1Q0FDZWxMLE0sRUFBUTtBQUNuQixnQkFBSSxDQUFDLEtBQUwsV0FBcUI7QUFDbkIsK0JBQWlCLElBQUk0RjtBQUFyQjtBQUFxQkEsZUFBSixFQUFqQjs7QUFDQTs7QUFDQTtBQUNEOztBQUVELG1CQUFPLEtBQVA7QUFDRDs7OztRQXBIMkJsSTtBQUFBQTtBQUFBQSxPO0FBdUhmdVA7OztBQUFBQSxpQ0FBZixlQUFlQTs7Ozs7Ozs7QUNwSmY7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJZU07OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQU1BLFVBQU1DLFdBQVcsR0FBRyxTQUFkQSxXQUFjLFNBQVU7QUFDNUIsZUFBTyxNQUFNLENBQU4sNkJBR0EsZ0JBQUk7QUFBQSxpQkFBSUMsSUFBSSxDQUFKQSwwQkFBK0JBLElBQUksQ0FBSkEsTUFBbkMsQ0FBbUNBLENBQW5DO0FBSEosZ0JBQVAsR0FBTyxDQUFQO0FBREY7O0FBUUEsVUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksT0FBUTtBQUN4QixZQUFNQyxHQUFHLEdBQUczQixRQUFRLENBQVJBLGNBQVosS0FBWUEsQ0FBWjtBQUNBMkIsV0FBRyxDQUFIQTtBQUNBLGVBQU9BLEdBQUcsQ0FBSEEsZUFBbUJBLEdBQUcsQ0FBdEJBLGFBQVA7QUFIRjtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7VUFDTUosYTs7OztBQUNKO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUU7QUFDRjtBQUNBOzs7QUFDRSxpQ0FBYztBQUFBOztBQUFBOztBQUNaO0FBRFksZ0JBSmRLLHlCQUljLEdBSmMsRUFJZDtBQUdaLHVCQUFZNUIsUUFBUSxDQUFSQSxjQUFaLEtBQVlBLENBQVo7QUFDQTtBQUNBO0FBTFk7QUFNYjtBQUVEO0FBQ0Y7QUFDQTs7Ozs7K0JBRU9oTSxNLEVBQVE7QUFDWCxnQkFBTTZOLFNBQVMsR0FBRzdOLE1BQU0sQ0FBTkEsdUJBQWxCLGlCQUFrQkEsRUFBbEI7QUFDQSxnQkFBTThOLGFBQWEsR0FBRyxzQ0FBdEIsS0FBc0IsQ0FBdEI7QUFDQSxnQkFBTUMsYUFBYSxHQUFHLHNDQUF0QixLQUFzQixDQUF0QjtBQUNBLGdCQUFNQyxhQUFhLEdBQUcsc0NBQXRCLEtBQXNCLENBQXRCO0FBRUEsOEJBQWtCLFVBQ1IsMkNBQTJDLENBRG5DLElBQ21DLENBQTNDLENBRFEsTUFFWCxhQUFDO0FBQUEscUJBQUloRCxNQUFNLENBQVYsQ0FBVSxDQUFWO0FBRlIsYUFBa0IsQ0FBbEI7QUFJQSwrQkFBbUIsVUFDVCw0Q0FBNEMsQ0FEbkMsS0FDbUMsQ0FBNUMsQ0FEUyxNQUVaLGFBQUM7QUFBQSxxQkFBSUEsTUFBTSxDQUFWLENBQVUsQ0FBVjtBQUZSLGFBQW1CLENBQW5CO0FBSUEsa0NBQXNCQSxNQUFNLENBQzFCLCtDQUErQyxnQkFEakQsQ0FDaUQsQ0FBL0MsQ0FEMEIsQ0FBNUI7QUFJQSxtQ0FBdUJBLE1BQU0sQ0FDM0IsZ0RBQWdELGlCQURsRCxDQUNrRCxDQUFoRCxDQUQyQixDQUE3QjtBQUlBLDZDQUFpQyxtREFHL0I7QUFDRSxzQkFBTTZDLFNBQVMsZ0JBRWJMLFdBQVcsQ0FBQ3hDLE1BQU0sQ0FBQyxLQUh2QixjQUdzQixDQUFQLENBRkUsQ0FEakI7QUFLRSx1QkFBTzZDLFNBQVMsaUJBRWRMLFdBQVcsQ0FBQ3hDLE1BQU0sQ0FBQyxLQVB2QixlQU9zQixDQUFQLENBRkcsQ0FMbEI7QUFTRWlELG1CQUFLLEVBQUVKLFNBQVMsaUJBRWRBLFNBQVMsZ0JBRkssY0FFTCxDQUZLO0FBVGxCLGFBSCtCLENBQWpDO0FBbUJBO0FBQ0E7QUFFQSxrQ0FBc0IsK0JBNUNYLGFBNENXLENBQXRCLENBNUNXLENBOENYOztBQUNBLGdCQUFNSyxJQUFJLEdBQUdsQyxRQUFRLENBQVJBLGNBQWIsS0FBYUEsQ0FBYjtBQUNBa0MsZ0JBQUksQ0FBSkE7QUFDQUEsZ0JBQUksQ0FBSkE7QUFDQUEsZ0JBQUksQ0FBSkE7QUFBaUI7QUFBakJBLGtjQU9jLCtCQVBkQSxNQU9jLENBUGRBLG9hQWVjLCtCQWZkQSxPQWVjLENBZmRBLDhEQW1CUTtBQUNJO0FBREosNGJBTVksK0JBTlosNEVBbkJSQTtBQWlDQUEsZ0JBQUksQ0FBSkEsMkJBQWdDLEtBQWhDQTs7QUFFQSxrQ0FyRlcsSUFxRlgsRUFyRlcsQ0F1Rlg7OztBQUNBLGdCQUFNQyxnQkFBZ0IsR0FBR25DLFFBQVEsQ0FBUkEsY0FBekIsS0FBeUJBLENBQXpCO0FBQ0FtQyw0QkFBZ0IsQ0FBaEJBO0FBQ0FBLDRCQUFnQixDQUFoQkE7QUFBNkI7QUFBN0JBLG9HQUN5RSxrQkFEekVBLDJDQUVrQ04sU0FBUyxnQkFGM0NNLGNBRTJDLENBRjNDQSxvR0FNeUUsa0JBTnpFQSwyQ0FPa0NOLFNBQVMsZ0JBUDNDTSxjQU8yQyxDQVAzQ0Esb0dBV3lFLGtCQVh6RUEsMkNBWWtDTixTQUFTLGdCQVozQ00sY0FZMkMsQ0FaM0NBOztBQWtCQSxnQkFBSUwsYUFBYSxJQUFiQSxpQkFBSixlQUFxRDtBQUNuREssOEJBQWdCLENBQWhCQTtBQUNEOztBQUVEQSw0QkFBZ0IsQ0FBaEJBLDBCQUVFLEtBRkZBOztBQUtBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7b0NBRVk7QUFDUixrR0FFaUMsS0FGakM7O0FBSUEscUdBRWdDLEtBRmhDO0FBR0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozt5Q0FDaUJuTyxNLEVBQVE7QUFDckI7QUFDQSxnQkFBTXBCLEtBQUssR0FBR29NLE1BQU0sRUFDbEI7QUFDQSwrREFDSSwrQkFESixNQUNJLENBREosR0FFSSx5QkFKTixNQUlNLENBSmMsQ0FBcEI7QUFPQSxtQkFBTyw4QkFDSCxpQ0FBaUMsQ0FEOUIsSUFFSCxrQ0FBa0MsQ0FGdEM7QUFHRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7MkNBQ21CO0FBQ2YsbUJBQ0UsNkJBQ0EscUJBREEsYUFFQSxxQkFIRjtBQUtEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O3FDQUNhO0FBQ1QsZ0JBQUksQ0FBQyxLQUFMLGNBQUssRUFBTCxFQUE0QjtBQUMxQjtBQUNEOztBQUVELGdCQUFNb0QsS0FBSyxHQUFHO0FBQUV4UCxtQkFBSyxFQUFFLEtBQVQ7QUFBMkJ5UCx3QkFBVSxFQUFFO0FBQXZDLGFBQWQ7QUFDQTtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O21DQUNXRCxLLEVBQU87QUFDZDtBQUNBLCtCQUFtQkEsS0FBSyxJQUFJQSxLQUFLLENBQUxBLGVBQVRBLE9BQVNBLENBQVRBLEdBQXlDQSxLQUFLLENBQTlDQSxRQUFuQjtBQUVBLGdCQUFNRSxrQkFBa0IsR0FBR3RELE1BQU0sQ0FBQyxLQUFsQyxXQUFpQyxDQUFqQzs7QUFDQSxnQkFBTWtELElBQUksR0FBRyx3QkFBYixzQkFBYSxDQUFiOztBQUNBQSxnQkFBSSxDQUFKQSxnREFBcUQsYUFBSztBQUN4RCxrQkFBSTNQLENBQUMsQ0FBREEsU0FBSixvQkFBbUM7QUFDakNBLGlCQUFDLENBQURBO0FBREYscUJBRU87QUFDTEEsaUJBQUMsQ0FBREE7QUFDRDtBQUxIMlA7QUFPRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7MkNBQ21CRSxLLEVBQU87QUFDdEIsZ0JBQUksQ0FBSixPQUFZO0FBQ1Y7QUFDRDs7QUFFRCxtQkFBT1YsU0FBUyxDQUNkVSxLQUFLLENBQUxBLG1CQUNJLCtCQURKQSxNQUNJLENBREpBLEdBRUksK0JBSE4sT0FHTSxDQUhVLENBQWhCO0FBS0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7a0NBQ1U7QUFDTixnQkFBTUYsSUFBSSxHQUFHLHdCQUFiLHNCQUFhLENBQWI7O0FBQ0FBLGdCQUFJLENBQUpBLGdEQUFxRCxhQUFLO0FBQ3hEM1AsZUFBQyxDQUFEQTtBQURGMlA7QUFJQUEsZ0JBQUksQ0FBSkE7QUFDQUEsZ0JBQUksQ0FBSkE7O0FBQ0EsZ0JBQUk7QUFDRkEsa0JBQUksQ0FBSkE7QUFERixjQUVFLFVBQVU7QUFDVjtBQUNEOztBQUVEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3lDQUNpQkYsYSxFQUFlOUIsQyxFQUFHO0FBQy9CLGdCQUFNbE4sTUFBTSxHQUFHa04sQ0FBQyxDQUFoQjtBQUNBLCtCQUFtQmxOLE1BQU0sQ0FBekI7O0FBRUEsZ0JBQU1rUCxJQUFJLEdBQUcsd0JBQWIsc0JBQWEsQ0FBYjs7QUFFQSxzQkFBVTtBQUNSLGtCQUFJbFAsTUFBTSxDQUFOQSxtQkFBSixZQUFJQSxDQUFKLEVBQTZDO0FBQzNDa1Asb0JBQUksQ0FBSkE7QUFDQUEsb0JBQUksQ0FBSkE7O0FBQ0Esb0JBQUk7QUFDRkEsc0JBQUksQ0FBSkE7QUFERixrQkFFRSxVQUFVO0FBQ1Y7QUFDRDtBQVBILHFCQVFPLElBQUlsUCxNQUFNLENBQU5BLG1CQUFKLGFBQUlBLENBQUosRUFBOEM7QUFDbkRrUCxvQkFBSSxDQUFKQTtBQUNBQSxvQkFBSSxDQUFKQTs7QUFDQSxvQkFBSTtBQUNGQSxzQkFBSSxDQUFKQTtBQURGLGtCQUVFLFVBQVU7QUFDVjtBQUNEO0FBUEkscUJBUUE7QUFDTEEsb0JBQUksQ0FBSkE7QUFDQUEsb0JBQUksQ0FBSkE7O0FBQ0Esb0JBQUk7QUFDRkEsc0JBQUksQ0FBSkE7QUFERixrQkFFRSxVQUFVO0FBQ1Y7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsZ0JBQUksVUFBSixlQUE2QjtBQUMzQjtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3VEQUUrQmhDLEMsRUFBRztBQUM5QixnQkFBTWxOLE1BQU0sR0FBR2tOLENBQUMsQ0FBaEI7O0FBRUEsZ0JBQUlsTixNQUFNLENBQU5BLGFBQUosVUFBa0M7QUFDaEMsa0JBQUlBLE1BQU0sQ0FBTkEsbUJBQUosT0FBSUEsQ0FBSixFQUF3QztBQUN0Qzs7QUFDQTtBQUZGLHFCQUdPLElBQUlBLE1BQU0sQ0FBTkEsbUJBQUosT0FBSUEsQ0FBSixFQUF3QztBQUM3QztBQURLLHFCQUVBLElBQUlBLE1BQU0sQ0FBTkEsbUJBQUosT0FBSUEsQ0FBSixFQUF3QztBQUM3QztBQUNEO0FBQ0Y7QUFDRjs7OztRQXRVeUJ0QjtBQUFBQTtBQUFBQSxPLGlFQXFCekJ5TztBQUFBQTtBQUFBQSxPLHlJQTRIQUE7QUFBQUE7QUFBQUEsTyxpS0F1S0FDO0FBQUFBO0FBQUFBLE87QUFpQlltQjs7QUFBQUEsaUNBQWYsYUFBZUE7Ozs7Ozs7QUNyWGYsVUFBSXRMLE9BQU8sR0FBR3NLLG1CQUFPLENBQXJCLEVBQXFCLENBQXJCOztBQUVBLFVBQUcsbUJBQUgsVUFBZ0N0SyxPQUFPLEdBQUcsQ0FBQyxDQUFDRixPQUFELFlBQVhFLEVBQVcsQ0FBRCxDQUFWQTtBQUVoQztBQUNBO0FBSUEsVUFBSXVLLE9BQU8sR0FBRztBQUFDLGVBQU07QUFBUCxPQUFkO0FBRUFBLGFBQU8sQ0FBUEE7O0FBQ0FBLGFBQU8sQ0FBUEEsYUFBcUIsWUFBVztBQUNoQixlQUFPQyxNQUFNLENBQU5BLGdCQUFQO0FBRGhCRDs7QUFJQSxVQUFJRSxNQUFNLEdBQUdILG1CQUFPLENBQVBBLENBQU8sQ0FBUEEsVUFBYixPQUFhQSxDQUFiOztBQUVBLFVBQUd0SyxPQUFPLENBQVYsUUFBbUJGLE1BQU0sQ0FBTkEsVUFBaUJFLE9BQU8sQ0FBeEJGOztBQUVuQixpQkFBZSxFOzs7Ozs7OztBQ3JCZixpQ0FBMkIsbUJBQU8sQ0FBQyxDQUFELENBQVAsQ0FBdUQsS0FBdkQsQ0FBM0IsQyxDQUNBO0FBR0E7O0FBQ0Esb0JBQWMsUUFBZCxFQUF1Qix5TEFBdkIsRUFBK00sRUFBL00sRyxDQUVBOzs7Ozs7Ozs7QUNQQTs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlld007OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O1VBQ01BLFk7Ozs7Ozs7Ozs7Ozs7O0FBQ0o7QUFDRjtBQUNBOytCQUVPdk8sTSxFQUFRO0FBQ1gsZ0JBQU13TyxHQUFHLEdBQUcsaUNBQVosTUFBWSxDQUFaO0FBQ0EsZ0JBQU1DLEdBQUcsR0FBRyxpQ0FBWixNQUFZLENBQVo7QUFDQSxnQkFBTUMsSUFBSSxHQUFHLGtDQUFiLE1BQWEsQ0FBYjtBQUNBLGdCQUFNQyxJQUFJLEdBQUcsNkJBQWIsTUFBYSxDQUFiO0FBRUE7QUFFQSx1Q0FBMkIzTyxNQUFNLENBQWpDOztBQUNBLGdCQUFJLEtBQUoscUJBQThCO0FBQzVCLGtCQUFJaUwseUJBQXlCLEdBQzNCakwsTUFBTSxDQUFOQSxrQkFBeUJBLE1BQU0sQ0FBTkEsWUFGQyxFQUM1QixDQUQ0QixDQUVxQjs7QUFFakQsNkNBQStCO0FBQzdCNE8sMEJBQVUsR0FBVkE7QUFERixxQkFFTyxJQUFJNU8sTUFBTSxDQUFWLFdBQXNCO0FBQzNCNE8sMEJBQVUsR0FBRzVPLE1BQU0sQ0FBbkI0TztBQURLLHFCQUVBO0FBQ0xBLDBCQUFVLEdBQUc1TyxNQUFNLENBQW5CNE87O0FBQ0Esb0JBQUk1TyxNQUFNLENBQU5BLFlBQUosS0FBNEI7QUFDMUI7QUFDQTtBQUNEO0FBQ0Y7QUFkSCxtQkFlTztBQUNMNE8sd0JBQVUsR0FBRzVPLE1BQU0sQ0FBbkI0TztBQXpCUyxjQTRCWDs7O0FBQ0EsMkJBN0JXLE1BNkJYLENBN0JXLENBK0JYOztBQUNBLHdCQUFZNUMsUUFBUSxDQUFSQSxjQUFaLE9BQVlBLENBQVo7QUFDQTtBQUNBO0FBQ0E7QUFBc0I7QUFuQ1gsNk5BbUNYLENBbkNXLENBMENYOztBQUNBLHFDQUF5QnRHLElBQUksQ0FBSkEsK0JBM0NkLEVBMkNjQSxDQUF6QixDQTNDVyxDQTZDSzs7QUFDaEIsMEJBQWNzRyxRQUFRLENBQVJBLGNBQWQsT0FBY0EsQ0FBZDtBQUNBO0FBQ0EsMENBQXVCLEtBQXZCO0FBQ0EsK0JBQW1CMkMsSUFBSSxZQUF2QjtBQUNBO0FBQ0EsbUNBbkRXLENBbURYLENBbkRXLENBcURYOztBQUNBLHFFQUF5RCxLQUF6RDs7QUFFQSxnQkFBSUgsR0FBRyxLQUFQLE1BQWtCO0FBQ2hCRyxrQkFBSSxHQUFJLDBCQUFKLE1BQXNDLGtCQUExQ0E7QUFDRDs7QUFFRCxnQkFBSUYsR0FBRyxLQUFQLE1BQWtCO0FBQ2hCRSxrQkFBSSxHQUFJLDBCQUFKLE1BQXNDLGtCQUExQ0E7QUFDRDs7QUFFRCxnQkFBSUQsSUFBSSxLQUFSLE1BQW1CO0FBQ2pCQyxrQkFBSSxHQUFJLDJCQUFKLE9BQXdDLG1CQUE1Q0E7QUFqRVMsY0FvRVg7OztBQUNBLHNCQUFVO0FBQ1Isa0JBQU1FLGlCQUFpQixHQUFHLGtEQUd4QixpQ0FIRixNQUdFLENBSHdCLENBQTFCO0FBS0Esa0JBQU1DLGdCQUFnQixHQUFHLGlEQUd2QixtQ0FIRixNQUdFLENBSHVCLENBQXpCO0FBS0Esa0JBQU1DLGtCQUFrQixHQUFHLDJDQUEzQixNQUEyQixDQUEzQjs7QUFLQSxrQkFBSUYsaUJBQWlCLEtBQXJCLE1BQWdDO0FBQzlCO0FBQ0Q7O0FBRUQsa0JBQUlDLGdCQUFnQixLQUFwQixNQUErQjtBQUM3QjtBQUNEOztBQUVELGtCQUFJQyxrQkFBa0IsS0FBdEIsTUFBaUM7QUFDL0I7QUFDRDs7QUFFRDtBQUNBLGtDQUFvQixJQUFJQyxLQUFLLENBQUxBLGFBQUosWUFBbUM7QUFDckRDLHdCQUFRLEVBQUUsQ0FBQyxLQUQwQyxNQUMzQyxDQUQyQztBQUVyRDtBQUNBQyx3QkFBUSxFQUFFLEtBSDJDO0FBSXJEQyx5QkFBUyxFQUFFLEtBQUtDO0FBSnFDLGVBQW5DLENBQXBCO0FBN0JGLG1CQW1DTztBQUNMLHNEQUF3QyxLQUF4Qzs7QUFDQSxvREFBc0MsS0FBdEM7O0FBQ0EscURBQXVDLEtBQXZDO0FBQ0Q7O0FBRUQsa0RBQXNDLEtBOUczQixtQkE4R1gsRUE5R1csQ0FnSFg7OztBQUNBO0FBQ0EsZ0NBQW9CVCxJQUFJLElBQUlBLElBQUksQ0FBaEM7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FFWTtBQUNSLGdCQUFJLENBQUMsS0FBTCxjQUF3QjtBQUN0Qix5REFBMkMsS0FBM0M7O0FBQ0EsdURBQXlDLEtBQXpDOztBQUNBLHdEQUEwQyxLQUExQztBQUhGLG1CQUlPO0FBQ0w7QUFDRDs7QUFFRCxxREFBeUMsS0FBekM7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7NkNBQ3FCO0FBQ2pCLGdCQUFJLENBQUMsS0FBTCxjQUF3QjtBQUN0QixrQ0FBb0IsS0FBcEI7QUFDRDs7QUFFRCxnQkFBSSxLQUFKLHNCQUErQjtBQUM3QjtBQURGLG1CQUVPO0FBQ0wsa0JBQUksS0FBSixxQkFBOEI7QUFDNUI7QUFDRDtBQUNGO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3FDQUNhO0FBQ1QsZ0JBQU1VLE1BQU0sR0FBRzdKLE1BQU0sQ0FBQyxLQUF0QixhQUFxQixDQUFyQjtBQUNBLGdCQUFNOEosUUFBUSxHQUFHN0osS0FBSyxDQUFMQSxNQUFLLENBQUxBLEdBQWdCLEtBQWhCQSxnQkFBakI7QUFDQSxtQkFBTywrQkFBK0Isd0JBQXRDLFFBQXNDLENBQXRDO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7b0NBQ1k7QUFDUixnQkFBSSxDQUFDLEtBQUwsY0FBd0I7QUFDdEI7QUFERixtQkFFTztBQUNMO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7b0NBQ1k7QUFDUjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUVZOEosSyxFQUFPO0FBQ2YsZ0JBQU1DLE9BQU8sR0FBRyxvQkFBb0JELEtBQUssQ0FBekMsTUFBZ0IsQ0FBaEI7O0FBQ0EseUJBQWE7QUFDWCxtQ0FBcUIsWUFBckI7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7K0NBRXVCRSxPLEVBQVNDLFEsRUFBVTtBQUN0QztBQUNBLGlCQUZzQyxPQUV0QyxHQUZzQyxDQUd0Qzs7QUFDQSxnQkFBSSxLQUFKLGdDQUF5QztBQUN2QyxxQ0FBdUIsS0FBdkI7O0FBQ0E7QUFDRDtBQUNGO0FBQ0Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O2dEQUV3QkMsSyxFQUFPQyxLLEVBQU87QUFDbEMsaUJBRGtDLE9BQ2xDLEdBRGtDLENBRWxDOztBQUNBLGlDQUFxQixhQUFyQjs7QUFDQSxnQkFBSSxpQkFBSixVQUErQjtBQUM3QkEsbUJBQUssQ0FBTEE7QUFERixtQkFFTztBQUNMQSxtQkFBSyxDQUFMQSxrQkFBd0JELEtBQUssQ0FBN0JDO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7OENBRXNCMUQsQyxFQUFHO0FBQ3JCLGdCQUFNek4sR0FBRyxHQUFHOFEsS0FBSyxDQUFMQSxTQUFlQSxLQUFLLENBQWhDO0FBRUEsZ0JBQU1NLGVBQWUsR0FDbkIsR0FBRyxLQUFILE1BQWM7QUFDZHBSLGVBQUcsS0FESCxNQUNjO0FBQ2RBLGVBQUcsS0FGSCxNQUVjO0FBQ2RBLGVBQUcsS0FISCxNQUdjO0FBQ2RBLGVBQUcsS0FKSCxNQUljO0FBQ2RBLGVBQUcsS0FMSCxNQUtjO0FBQ2RBLGVBQUcsS0FOSCxNQU1jO0FBQ2RBLGVBQUcsS0FQSCxNQU9jO0FBQ2RBLGVBQUcsS0FaZ0IsRUFHckIsQ0FIcUIsQ0FZUjs7QUFFYixpQ0FBcUI7QUFDbkI4USxtQkFBSyxDQURjLGVBQ25CQSxHQURtQixDQUVuQjs7QUFDQTtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OzRDQUVvQkEsSyxFQUFPO0FBQ3ZCLGdCQUFNQyxPQUFPLEdBQUcsb0JBQW9CRCxLQUFLLENBQXpDLE1BQWdCLENBQWhCOztBQUVBLGdCQUFJLENBQUosU0FBYztBQUNaO0FBQ0Q7O0FBRUQsZ0JBQU05USxHQUFHLEdBQUc4USxLQUFLLENBQUxBLFNBQWVBLEtBQUssQ0FBaEM7O0FBRUEsZ0JBQUk5USxHQUFHLElBQUhBLE1BQWFBLEdBQUcsSUFBcEIsSUFBNEI7QUFDMUI7QUFDQSxtQ0FBcUIsWUFBckI7QUFDQThRLG1CQUFLLENBQUxBO0FBSEYsbUJBSU8sSUFBSTlRLEdBQUcsSUFBSEEsTUFBYUEsR0FBRyxLQUFwQixHQUE0QjtBQUNqQztBQUNBLG1DQUFxQixZQUFyQjtBQWZxQixjQWtCdkI7OztBQUNBLGdCQUFJLEtBQUosZ0NBQXlDO0FBQ3ZDLHFDQUF1QixLQUF2Qjs7QUFDQTtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozt5Q0FDaUJtUixLLEVBQU87QUFDcEIsZ0JBQU1KLE9BQU8sR0FBR0ksS0FBSyxDQUFyQixhQUFnQkEsRUFBaEI7O0FBRUEsZ0JBQUksQ0FBSixTQUFjO0FBQ1pBLG1CQUFLLENBQUxBO0FBQ0FBLG1CQUFLLENBQUxBLGlCQUZZLGtCQUVaQSxFQUZZLENBR1o7O0FBQ0EsbUNBQXFCLGFBQXJCO0FBSkYsbUJBS087QUFDTEEsbUJBQUssQ0FBTEE7QUFDQUEsbUJBQUssQ0FBTEE7QUFDRDs7QUFFRDtBQUNEOzs7O1FBelR3QmxTO0FBQUFBO0FBQUFBLE8seURBSXhCeU87QUFBQUE7QUFBQUEsTyx5SUF5SEFBO0FBQUFBO0FBQUFBLE8sOElBa0VBQztBQUFBQTtBQUFBQSxPLDJKQWVBQTtBQUFBQTtBQUFBQSxPLHVLQWdCQUE7QUFBQUE7QUFBQUEsTyxzS0FpQkFBO0FBQUFBO0FBQUFBLE8sa0tBMkJBQTtBQUFBQTtBQUFBQSxPO0FBa0RZbUM7O0FBQUFBLGlDQUFmLFlBQWVBOzs7Ozs7O0FDelZmLFVBQUl0TSxPQUFPLEdBQUdzSyxtQkFBTyxDQUFyQixFQUFxQixDQUFyQjs7QUFFQSxVQUFHLG1CQUFILFVBQWdDdEssT0FBTyxHQUFHLENBQUMsQ0FBQ0YsT0FBRCxZQUFYRSxFQUFXLENBQUQsQ0FBVkE7QUFFaEM7QUFDQTtBQUlBLFVBQUl1SyxPQUFPLEdBQUc7QUFBQyxlQUFNO0FBQVAsT0FBZDtBQUVBQSxhQUFPLENBQVBBOztBQUNBQSxhQUFPLENBQVBBLGFBQXFCLFlBQVc7QUFDaEIsZUFBT0MsTUFBTSxDQUFOQSxnQkFBUDtBQURoQkQ7O0FBSUEsVUFBSUUsTUFBTSxHQUFHSCxtQkFBTyxDQUFQQSxDQUFPLENBQVBBLFVBQWIsT0FBYUEsQ0FBYjs7QUFFQSxVQUFHdEssT0FBTyxDQUFWLFFBQW1CRixNQUFNLENBQU5BLFVBQWlCRSxPQUFPLENBQXhCRjs7QUFFbkIsaUJBQWUsRTs7Ozs7Ozs7QUNyQmYsaUNBQTJCLG1CQUFPLENBQUMsQ0FBRCxDQUFQLENBQXVELEtBQXZELENBQTNCLEMsQ0FDQTtBQUdBOztBQUNBLG9CQUFjLFFBQWQsRUFBdUIscTNCQUF2QixFQUEyNEIsRUFBMzRCLEcsQ0FFQTs7Ozs7Ozs7O0FDUEE7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJZStOOzs7QUFBQUE7QUFBZjtBQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1ZmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztVQUNNQSxVOzs7Ozs7Ozs7Ozs7OztBQUNKO0FBQ0Y7QUFDQTsrQkFFTzlQLE0sRUFBUTtBQUNYLGdCQUFNK1AsT0FBTyxHQUFHLDhCQUFoQixNQUFnQixDQUFoQjtBQUNBLGdCQUFNcEssUUFBUSxHQUFHLCtCQUFqQixNQUFpQixDQUFqQjtBQUNBLGdCQUFNZ0osSUFBSSxHQUFHLDJCQUFiLE1BQWEsQ0FBYjtBQUNBLGdCQUFNcUIsS0FBSyxHQUFHLDRCQUFkLE1BQWMsQ0FBZDtBQUVBO0FBRUEsdUNBQTJCaFEsTUFBTSxDQUFqQzs7QUFDQSxnQkFBSSxLQUFKLHFCQUE4QjtBQUM1QixrQkFBSWlMLHlCQUF5QixHQUMzQmpMLE1BQU0sQ0FBTkEsa0JBQXlCQSxNQUFNLENBQU5BLFlBRkMsRUFDNUIsQ0FENEIsQ0FFcUI7O0FBRWpELDZDQUErQjtBQUM3QjRPLDBCQUFVLEdBQVZBO0FBREYscUJBRU8sSUFBSTVPLE1BQU0sQ0FBVixXQUFzQjtBQUMzQjRPLDBCQUFVLEdBQUc1TyxNQUFNLENBQW5CNE87QUFESyxxQkFFQTtBQUNMQSwwQkFBVSxHQUFHNU8sTUFBTSxDQUFuQjRPOztBQUNBLG9CQUFJNU8sTUFBTSxDQUFOQSxZQUFKLEtBQTRCO0FBQzFCO0FBQ0E7QUFDRDtBQUNGO0FBZEgsbUJBZU87QUFDTDRPLHdCQUFVLEdBQUc1TyxNQUFNLENBQW5CNE87QUFDRDs7QUFFRDtBQUVBLHdCQUFZNUMsUUFBUSxDQUFSQSxjQUFaLEtBQVlBLENBQVo7QUFDQTtBQUNBO0FBQ0E7QUFBc0I7QUFqQ1gsNk5BaUNYLENBakNXLENBd0NYOztBQUNBLDBCQUFjQSxRQUFRLENBQVJBLGNBQWQsT0FBY0EsQ0FBZDtBQUNBO0FBRUEsMENBQXVCdEcsSUFBSSxDQUFKQSwrQkE1Q1osRUE0Q1lBLENBQXZCLEVBNUNXLENBOENPOztBQUNsQjtBQUNBO0FBQ0E7O0FBRUEscUVBQXlELEtBQXpEOztBQUVBLGdCQUFJcUssT0FBTyxLQUFYLE1BQXNCO0FBQ3BCO0FBQ0Q7O0FBRUQsZ0JBQUlwSyxRQUFRLEtBQVosTUFBdUI7QUFDckI7QUFDRDs7QUFFRCxnQkFBSXFLLEtBQUssS0FBVCxNQUFvQjtBQUNsQixrQkFBSUEsS0FBSyxLQUFULFdBQXlCO0FBQ3ZCO0FBQ0Q7QUFISCxtQkFJTyxVQUFVO0FBQ2Y7QUFsRVMsY0FxRVg7OztBQUNBLHNCQUFVO0FBQ1I7QUFDQSxnQ0FBa0IsSUFBSWhCLEtBQUssQ0FBTEEsYUFBSixVQUFpQztBQUNqREMsd0JBQVEsRUFBRSxDQUFDLEtBRHNDLE1BQ3ZDLENBRHVDO0FBRWpEckQsbUJBQUcsRUFBRSxZQUY0QyxNQUU1QyxDQUY0QztBQUdqRHNELHdCQUFRLEVBQUUsS0FIdUM7QUFJakRDLHlCQUFTLEVBQUUsS0FBS2M7QUFKaUMsZUFBakMsQ0FBbEI7QUFGRixtQkFRTztBQUNMLHNEQUF3QyxLQUF4Qzs7QUFDQSxvREFBc0MsS0FBdEM7O0FBQ0Esb0RBQXNDLEtBQXRDOztBQUNBLHFEQUF1QyxLQUF2QztBQUNEOztBQUVELGtEQUFzQyxLQXJGM0IsbUJBcUZYLEVBckZXLENBdUZYOzs7QUFDQTtBQUNBLGdDQUFvQnRCLElBQUksSUFBSUEsSUFBSSxDQUFoQztBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUVZO0FBQ1IsZ0JBQUksQ0FBQyxLQUFMLGNBQXdCO0FBQ3RCLHlEQUEyQyxLQUEzQzs7QUFDQSx1REFBeUMsS0FBekM7O0FBQ0EsdURBQXlDLEtBQXpDOztBQUNBLHdEQUEwQyxLQUExQztBQUpGLG1CQUtPO0FBQ0w7QUFDRDs7QUFFRCxxREFBeUMsS0FBekM7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7NkNBQ3FCO0FBQ2pCLGdCQUFJLENBQUMsS0FBTCxjQUF3QjtBQUN0QixrQ0FBb0IsS0FBcEI7QUFDRDs7QUFFRCxnQkFBSSxLQUFKLHNCQUErQjtBQUM3QjtBQURGLG1CQUVPO0FBQ0wsa0JBQUksS0FBSixxQkFBOEI7QUFDNUI7QUFDRDtBQUNGO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3FDQUNhO0FBQ1QsbUJBQU8sd0JBQXdCLEtBQS9CLGFBQU8sQ0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUNZO0FBQ1I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7b0NBQ1k7QUFDUjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7NkNBRXFCYyxPLEVBQVNDLFEsRUFBVUUsSyxFQUFPO0FBQzNDO0FBQ0FBLGlCQUFLLENBQUxBO0FBQ0EsaUJBSDJDLE9BRzNDLEdBSDJDLENBSTNDOztBQUNBLGdCQUFJLEtBQUosZ0NBQXlDO0FBQ3ZDLHFDQUF1QixLQUF2Qjs7QUFDQTtBQUNEO0FBQ0Y7QUFDRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OENBRXNCRCxLLEVBQU9DLEssRUFBTztBQUNoQyxpQkFEZ0MsT0FDaEMsR0FEZ0MsQ0FFaEM7O0FBQ0EsaUNBQXFCLGFBQXJCOztBQUNBLGdCQUFJLGlCQUFKLFVBQStCO0FBQzdCQSxtQkFBSyxDQUFMQTtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OzhDQUVzQjFELEMsRUFBRztBQUNyQixnQkFBTXpOLEdBQUcsR0FBRzhRLEtBQUssQ0FBTEEsU0FBZUEsS0FBSyxDQUFoQztBQUVBLGdCQUFNTSxlQUFlLEdBQ25CLEdBQUcsS0FBSCxNQUFjO0FBQ2RwUixlQUFHLEtBREgsTUFDYztBQUNkQSxlQUFHLEtBRkgsTUFFYztBQUNkQSxlQUFHLEtBSEgsTUFHYztBQUNkQSxlQUFHLEtBSkgsTUFJYztBQUNkQSxlQUFHLEtBTEgsTUFLYztBQUNkQSxlQUFHLEtBTkgsTUFNYztBQUNkQSxlQUFHLEtBUEgsTUFPYztBQUNkQSxlQUFHLEtBWmdCLEVBR3JCLENBSHFCLENBWVI7O0FBRWIsaUNBQXFCO0FBQ25COFEsbUJBQUssQ0FEYyxlQUNuQkEsR0FEbUIsQ0FFbkI7O0FBQ0E7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozs0Q0FFb0JBLEssRUFBTztBQUN2QixnQkFBTUMsT0FBTyxHQUFHLG9CQUFvQkQsS0FBSyxDQUF6QyxNQUFnQixDQUFoQjs7QUFFQSxnQkFBSSxDQUFKLFNBQWM7QUFDWjtBQUNEOztBQUVELGdCQUFNOVEsR0FBRyxHQUFHOFEsS0FBSyxDQUFMQSxTQUFlQSxLQUFLLENBQWhDOztBQUVBLGdCQUFJOVEsR0FBRyxJQUFIQSxNQUFhQSxHQUFHLEtBQXBCLEdBQTRCO0FBQzFCO0FBQ0EsbUNBQXFCLFlBQXJCO0FBWHFCLGNBY3ZCOzs7QUFDQSxnQkFBSSxLQUFKLGdDQUF5QztBQUN2QyxxQ0FBdUIsS0FBdkI7O0FBQ0E7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUVZOFEsSyxFQUFPO0FBQ2YsZ0JBQU1DLE9BQU8sR0FBRyxvQkFBb0JELEtBQUssQ0FBekMsTUFBZ0IsQ0FBaEI7O0FBQ0EseUJBQWE7QUFDWCxtQ0FBcUIsWUFBckI7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBQ2lCSyxLLEVBQU87QUFDcEIsZ0JBQU1KLE9BQU8sR0FBR0ksS0FBSyxDQUFyQixhQUFnQkEsRUFBaEI7O0FBRUEsZ0JBQUksQ0FBSixTQUFjO0FBQ1pBLG1CQUFLLENBQUxBO0FBQ0FBLG1CQUFLLENBQUxBLGlCQUZZLGtCQUVaQSxFQUZZLENBR1o7O0FBQ0EsbUNBQXFCLGFBQXJCO0FBSkYsbUJBS087QUFDTEEsbUJBQUssQ0FBTEE7QUFDQUEsbUJBQUssQ0FBTEE7QUFDRDs7QUFFRDtBQUNEOzs7O1FBdFJzQmxTO0FBQUFBO0FBQUFBLE8seURBSXRCeU87QUFBQUE7QUFBQUEsTyx5SUFnR0FBO0FBQUFBO0FBQUFBLE8sdUpBaUVBQztBQUFBQTtBQUFBQSxPLG1LQWlCQUE7QUFBQUE7QUFBQUEsTyxvS0FlQUE7QUFBQUE7QUFBQUEsTyxrS0EyQkFBO0FBQUFBO0FBQUFBLE8sd0pBeUJBQTtBQUFBQTtBQUFBQSxPO0FBZ0NZMEQ7O0FBQUFBLGlDQUFmLFVBQWVBOzs7Ozs7O0FDblRmLFVBQUk3TixPQUFPLEdBQUdzSyxtQkFBTyxDQUFyQixFQUFxQixDQUFyQjs7QUFFQSxVQUFHLG1CQUFILFVBQWdDdEssT0FBTyxHQUFHLENBQUMsQ0FBQ0YsT0FBRCxZQUFYRSxFQUFXLENBQUQsQ0FBVkE7QUFFaEM7QUFDQTtBQUlBLFVBQUl1SyxPQUFPLEdBQUc7QUFBQyxlQUFNO0FBQVAsT0FBZDtBQUVBQSxhQUFPLENBQVBBOztBQUNBQSxhQUFPLENBQVBBLGFBQXFCLFlBQVc7QUFDaEIsZUFBT0MsTUFBTSxDQUFOQSxnQkFBUDtBQURoQkQ7O0FBSUEsVUFBSUUsTUFBTSxHQUFHSCxtQkFBTyxDQUFQQSxDQUFPLENBQVBBLFVBQWIsT0FBYUEsQ0FBYjs7QUFFQSxVQUFHdEssT0FBTyxDQUFWLFFBQW1CRixNQUFNLENBQU5BLFVBQWlCRSxPQUFPLENBQXhCRjs7QUFFbkIsaUJBQWUsRTs7Ozs7Ozs7QUNyQmYsaUNBQTJCLG1CQUFPLENBQUMsQ0FBRCxDQUFQLENBQXVELEtBQXZELENBQTNCLEMsQ0FDQTtBQUdBOztBQUNBLG9CQUFjLFFBQWQsRUFBdUIsKzFCQUF2QixFQUFxM0IsRUFBcjNCLEcsQ0FFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztVQUNNOEQsZ0I7Ozs7QUFDSjtBQUNGO0FBQ0E7OztBQUNFLG9DQUFjO0FBQUE7O0FBQUE7O0FBQ1osOEJBRFksSUFDWixFQURZLENBR1o7O0FBQ0EsdUJBQVltRyxRQUFRLENBQVJBLGNBQVosS0FBWUEsQ0FBWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUlk7QUFTYjtBQUVEO0FBQ0Y7QUFDQTs7Ozs7K0JBQ09oTSxNLEVBQVE7QUFDWDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O21DQUNXO0FBQ1AsbUJBQU8sS0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztrQ0FDVUEsTSxFQUFRa04sTSxFQUFRO0FBQ3RCLHdCQUFZO0FBQ1YsdUNBQXlCZ0Q7QUFBQUE7QUFBQUEsaUJBQ3ZCLHlDQURGLEVBQ0UsQ0FEdUJBLENBQXpCO0FBR0Q7O0FBRUQ7O0FBRUEsZ0JBQUksT0FBTyxLQUFQLHNCQUFKLFlBQWtEO0FBQ2hEak8scUJBQU8sR0FBRyx1QkFBdUI7QUFBRWpDLHNCQUFNLEVBQU5BO0FBQUYsZUFBdkIsQ0FBVmlDO0FBREYsbUJBRU87QUFDTEEscUJBQU8sR0FBR2pDLE1BQU0sQ0FBTkEsaUJBQXdCQSxNQUFNLENBQTlCQSxpQkFBZ0RBLE1BQU0sQ0FBaEVpQztBQUNEOztBQUVEO0FBRUE7QUFDRDs7OztRQXZENEJ2RTtBQUFBQTtBQUFBQSxPO0FBMERoQm1JOzs7QUFBQUEsaUNBQWYsZ0JBQWVBOzs7Ozs7OztBQ2hGZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQVlBOzs7QUFDQSxVQUFJc0ssb0JBQW9CLEdBQXhCO0FBQUEsVUFDSUMsbUJBQW1CLEdBRHZCO0FBQUEsVUFFSUMscUJBQXFCLEdBRnpCO0FBSUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBSUMsWUFBWSxHQUFoQjtBQUVBOztBQUNBLFVBQUlDLFNBQVMsR0FBYjtBQUVBOztBQUNBLFVBQUlDLGlCQUFpQixHQUFyQjtBQUVBOztBQUNBLFVBQUlwSixXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsZ0RBQTBDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFlBQUlxSixRQUFRLEdBQUdDO0FBQUFBO0FBQUFBLHdDQUErQ0E7QUFBOUQ7QUFBOERBLFNBQTlEOztBQUVBLFlBQUlDLEtBQUssSUFBSTNKO0FBQUFBO0FBQUFBLFdBQWMsTUFBZEEsRUFBYyxPQUFkQSxFQUFiLEtBQWFBLENBQWIsRUFBcUQ7QUFDbkR3RixpQkFBTyxHQUFQQTtBQUNEOztBQUNEb0UsY0FBTSxHQUFHMUg7QUFBQUE7QUFBQUEsV0FBVDBILE1BQVMxSCxDQUFUMEg7QUFDQXBFLGVBQU8sR0FBR3FFO0FBQUFBO0FBQUFBLFdBQVksRUFBWkEsRUFBWSxPQUFaQSxFQUFZLFFBQVpBLEVBQW9DQztBQUE5Q3RFO0FBQThDc0UsU0FBcENELENBQVZyRTtBQUVBLFlBQUl1RSxPQUFPLEdBQUdGO0FBQUFBO0FBQUFBLFdBQVksRUFBWkEsRUFBaUJyRSxPQUFPLENBQVosT0FBWnFFLEVBQWtDSixRQUFRLENBQTlCLE9BQVpJLEVBQW9EQztBQUFsRTtBQUFrRUEsU0FBcERELENBQWQ7QUFBQSxZQUNJRyxXQUFXLEdBQUczUztBQUFBQTtBQUFBQSxXQURsQixPQUNrQkEsQ0FEbEI7QUFBQSxZQUVJNFMsYUFBYSxHQUFHQztBQUFBQTtBQUFBQSxXQUFVLE9BQVZBLEVBRnBCLFdBRW9CQSxDQUZwQjtBQUlBO0FBQUE7QUFBQSxZQUVJbkssS0FBSyxHQUZUO0FBQUEsWUFHSW9LLFdBQVcsR0FBRzNFLE9BQU8sQ0FBUEEsZUFIbEI7QUFBQSxZQUlJNEUsTUFBTSxHQXBCOEIsVUFnQnhDLENBaEJ3QyxDQXNCeEM7O0FBQ0EsWUFBSUMsWUFBWSxHQUFHQyxNQUFNLENBQ3ZCLENBQUM5RSxPQUFPLENBQVBBLFVBQUQsMEJBQ0EyRSxXQUFXLENBRFgsZUFFQSxDQUFDQSxXQUFXLEtBQUtuSTtBQUFoQm1JO0FBQWdCbkksU0FBaEJtSSxrQkFBRCxXQUZBLGVBR0EsQ0FBQzNFLE9BQU8sQ0FBUEEsWUFBRCxXQUhBLFNBRHVCLE1BdkJlLEdBdUJmLENBQXpCLENBdkJ3QyxDQThCeEM7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsWUFBSStFLFNBQVMsR0FBR2xLLGNBQWMsQ0FBZEEsNkJBQ1gsbUJBQ0EsQ0FBQ21GLE9BQU8sQ0FBUEEsWUFBRCx1QkFEQSxHQUNBLENBREEsR0FEV25GLE9BQWhCO0FBTUF1SixjQUFNLENBQU5BLHNCQUE2Qix3RkFBdUY7QUFDbEhZLDBCQUFnQixLQUFLQSxnQkFBZ0IsR0FENkUsZUFDbEcsQ0FBaEJBLENBRGtILENBR2xIOztBQUNBSixnQkFBTSxJQUFJUixNQUFNLENBQU5BLGdEQUF1RGE7QUFKaUQ7QUFJakRBLFdBQXZEYixDQUFWUSxDQUprSCxDQU1sSDs7QUFDQSwyQkFBaUI7QUFDZk0sc0JBQVUsR0FBVkE7QUFDQU4sa0JBQU0sSUFBSSw0QkFBVkE7QUFDRDs7QUFDRCw2QkFBbUI7QUFDakJPLHdCQUFZLEdBQVpBO0FBQ0FQLGtCQUFNLElBQUkseUJBQVZBO0FBQ0Q7O0FBQ0QsZ0NBQXNCO0FBQ3BCQSxrQkFBTSxJQUFJLHNDQUFWQTtBQUNEOztBQUNEckssZUFBSyxHQUFHNkssTUFBTSxHQUFHQyxLQUFLLENBbEI0RixNQWtCbEg5SyxDQWxCa0gsQ0FvQmxIO0FBQ0E7O0FBQ0E7QUF0QkY2SjtBQXlCQVEsY0FBTSxJQWpFa0MsTUFpRXhDQSxDQWpFd0MsQ0FtRXhDO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQUlVLFFBQVEsR0FBR3pLLGNBQWMsQ0FBZEEsNkJBQTRDbUYsT0FBTyxDQUFsRTs7QUFDQSxZQUFJLENBQUosVUFBZTtBQUNiNEUsZ0JBQU0sR0FBRyw0QkFBVEE7QUF6RXNDLFVBMkV4Qzs7O0FBQ0FBLGNBQU0sR0FBRyxDQUFDTyxZQUFZLEdBQUdQLE1BQU0sQ0FBTkEsOEJBQUgsRUFBR0EsQ0FBSCxHQUFiLDBFQTVFK0IsS0E0RS9CLENBQVRBLENBNUV3QyxDQWdGeEM7O0FBQ0FBLGNBQU0sR0FBRyxlQUFlVSxRQUFRLElBQXZCLG9CQUNOQSxRQUFRLFFBREYsaURBTU5KLFVBQVUsd0JBTkosT0FVTkMsWUFBWSxHQUNULG9DQURTLDBEQVZOLGtCQUFUUDtBQWtCQSxZQUFJckosTUFBTSxHQUFHZ0s7QUFBQUE7QUFBQUEsV0FBUSxZQUFXO0FBQzlCLGlCQUFPL00sUUFBUSxjQUFjdU0sU0FBUyxHQUFUQSxZQUF0QnZNLE1BQVEsQ0FBUkEsa0JBQVAsYUFBT0EsQ0FBUDtBQXBHc0MsU0FtRzNCK00sQ0FBYixDQW5Hd0MsQ0F3R3hDO0FBQ0E7O0FBQ0FoSyxjQUFNLENBQU5BOztBQUNBLFlBQUlXO0FBQUFBO0FBQUFBLFdBQUosTUFBSUEsQ0FBSixFQUFxQjtBQUNuQjtBQUNEOztBQUNEO0FBQ0Q7QUFFY3dIOzs7QUFBQUEsaUNBQWYsUUFBZUE7Ozs7Ozs7O0FDNVBmOztBQUFBO0FBQUE7OztBQUFBO0FBQUE7OztBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSVcsWUFBWSxHQUFHbUI7QUFBQUE7QUFBQUEsU0FBZSxnREFBK0M7QUFDL0VDO0FBQUFBO0FBQUFBLFdBQVUsTUFBVkEsRUFBbUJDO0FBQUFBO0FBQUFBLFdBQVQsTUFBU0EsQ0FBbkJELEVBQVUsTUFBVkE7QUFERixPQUFtQkQsQ0FBbkI7QUFJZW5COztBQUFBQSxpQ0FBZixZQUFlQTs7Ozs7Ozs7QUNyQ2Y7O0FBQUE7QUFBQTs7O0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsNkRBQXVEO0FBQ3JELFlBQUlzQixLQUFLLEdBQUcsQ0FBWjtBQUNBck0sY0FBTSxLQUFLQSxNQUFNLEdBQWpCQSxFQUFNLENBQU5BO0FBRUEsWUFBSWlCLEtBQUssR0FBRyxDQUFaO0FBQUEsWUFDSUksTUFBTSxHQUFHaUwsS0FBSyxDQURsQjs7QUFHQSxlQUFPLFVBQVAsUUFBeUI7QUFDdkIsY0FBSTNULEdBQUcsR0FBRzJULEtBQUssQ0FBZixLQUFlLENBQWY7QUFFQSxjQUFJOU4sUUFBUSxHQUFHK04sVUFBVSxHQUNyQkEsVUFBVSxDQUFDdk0sTUFBTSxDQUFQLEdBQU8sQ0FBUCxFQUFjc0wsTUFBTSxDQUFwQixHQUFvQixDQUFwQixlQURXLE1BQ1gsQ0FEVyxHQUF6Qjs7QUFJQSxjQUFJOU0sUUFBUSxLQUFaLFdBQTRCO0FBQzFCQSxvQkFBUSxHQUFHOE0sTUFBTSxDQUFqQjlNLEdBQWlCLENBQWpCQTtBQUNEOztBQUNELHFCQUFXO0FBQ1R5QjtBQUFBQTtBQUFBQSxlQUFlLE1BQWZBLEVBQWUsR0FBZkE7QUFERixpQkFFTztBQUNMdU07QUFBQUE7QUFBQUEsZUFBVyxNQUFYQSxFQUFXLEdBQVhBO0FBQ0Q7QUFDRjs7QUFDRDtBQUNEO0FBRWNMOzs7QUFBQUEsaUNBQWYsVUFBZUE7Ozs7Ozs7O0FDdkNmOztBQUFBO0FBQUE7OztBQUFBO0FBR0E7OztBQUNBLFVBQUk3SyxXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLCtDQUF5QztBQUN2QyxZQUFJbUwsUUFBUSxHQUFHek0sTUFBTSxDQUFyQixHQUFxQixDQUFyQjs7QUFDQSxZQUFJLEVBQUV1QixjQUFjLENBQWRBLHFCQUFvQ25DO0FBQUFBO0FBQUFBLFdBQUUsUUFBRkEsRUFBdEMsS0FBc0NBLENBQXRDLEtBQ0N0RyxLQUFLLEtBQUxBLGFBQXVCLEVBQUVILEdBQUcsSUFEakMsTUFDNEIsQ0FENUIsRUFDK0M7QUFDN0NzSDtBQUFBQTtBQUFBQSxhQUFlLE1BQWZBLEVBQWUsR0FBZkE7QUFDRDtBQUNGO0FBRWN1TTs7O0FBQUFBLGlDQUFmLFdBQWVBOzs7Ozs7OztBQzNCZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLHNDQUFnQztBQUM5QixZQUFJMVQsS0FBSyxHQUFHNFQ7QUFBQUE7QUFBQUEsV0FBUSxNQUFSQSxFQUFaLEdBQVlBLENBQVo7QUFDQSxlQUFPQztBQUFBQTtBQUFBQSw0QkFBUDtBQUNEO0FBRWN4TTs7O0FBQUFBLGlDQUFmLFNBQWVBOzs7Ozs7OztBQ2hCZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFJeU0sWUFBWSxHQUFoQjtBQUVBOztBQUNBLFVBQUlDLFlBQVksR0FBaEI7QUFFQTs7QUFDQSxVQUFJQyxTQUFTLEdBQUc1TixRQUFRLENBQXhCO0FBQUEsVUFDSW9DLFdBQVcsR0FBR3hKLE1BQU0sQ0FEeEI7QUFHQTs7QUFDQSxVQUFJaVYsWUFBWSxHQUFHRCxTQUFTLENBQTVCO0FBRUE7O0FBQ0EsVUFBSXZMLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBOztBQUNBLFVBQUkwTCxVQUFVLEdBQUd4QixNQUFNLENBQUMsTUFDdEJ1QixZQUFZLENBQVpBLHFIQURzQixPQUN0QkEsQ0FEc0IsR0FBeEIsR0FBdUIsQ0FBdkI7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLG1DQUE2QjtBQUMzQixZQUFJLENBQUNsTztBQUFBQTtBQUFBQSxXQUFELEtBQUNBLENBQUQsSUFBb0JvTztBQUFBQTtBQUFBQSxXQUF4QixLQUF3QkEsQ0FBeEIsRUFBeUM7QUFDdkM7QUFDRDs7QUFDRCxZQUFJaEQsT0FBTyxHQUFHM0s7QUFBQUE7QUFBQUEsaUNBQWQ7QUFDQSxlQUFPMkssT0FBTyxDQUFQQSxLQUFhaUQ7QUFBQUE7QUFBQUEsV0FBcEIsS0FBb0JBLENBQWJqRCxDQUFQO0FBQ0Q7QUFFYzBDOzs7QUFBQUEsaUNBQWYsWUFBZUE7Ozs7Ozs7O0FDOUNmOztBQUFBO0FBRUE7OztBQUNBLFVBQUlyTCxXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBSTZMLG9CQUFvQixHQUFHN0wsV0FBVyxDQUF0QztBQUVBOztBQUNBLFVBQUkvRCxjQUFjLEdBQUdDO0FBQUFBO0FBQUFBLFVBQVNBO0FBQUFBO0FBQUFBLFFBQUgsV0FBTkEsR0FBckI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxnQ0FBMEI7QUFDeEIsWUFBSTRQLEtBQUssR0FBRzdMLGNBQWMsQ0FBZEEsWUFBWixjQUFZQSxDQUFaO0FBQUEsWUFDSWYsR0FBRyxHQUFHMUgsS0FBSyxDQURmLGNBQ2UsQ0FEZjs7QUFHQSxZQUFJO0FBQ0ZBLGVBQUssQ0FBTEEsY0FBSyxDQUFMQTtBQUNBLGNBQUk4USxRQUFRLEdBQVo7QUFGRixVQUdFLFVBQVUsQ0FBRTs7QUFFZCxZQUFJM0gsTUFBTSxHQUFHa0wsb0JBQW9CLENBQXBCQSxLQUFiLEtBQWFBLENBQWI7O0FBQ0Esc0JBQWM7QUFDWixxQkFBVztBQUNUclUsaUJBQUssQ0FBTEEsY0FBSyxDQUFMQTtBQURGLGlCQUVPO0FBQ0wsbUJBQU9BLEtBQUssQ0FBWixjQUFZLENBQVo7QUFDRDtBQUNGOztBQUNEO0FBQ0Q7QUFFYzJFOzs7QUFBQUEsaUNBQWYsU0FBZUE7Ozs7Ozs7O0FDN0NmOztBQUNBLFVBQUk2RCxXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFJcVYsb0JBQW9CLEdBQUc3TCxXQUFXLENBQXRDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EscUNBQStCO0FBQzdCLGVBQU82TCxvQkFBb0IsQ0FBcEJBLEtBQVAsS0FBT0EsQ0FBUDtBQUNEO0FBRWN6UDs7O0FBQUFBLGlDQUFmLGNBQWVBOzs7Ozs7OztBQ3JCZjs7QUFBQTtBQUVBOzs7QUFDQSxVQUFJMlAsVUFBVSxHQUFJLFlBQVc7QUFDM0IsWUFBSUMsR0FBRyxHQUFHLGNBQWNDO0FBQUFBO0FBQUFBLGFBQWNBO0FBQUFBO0FBQUFBLFVBQWRBLFFBQWlDQTtBQUFBQTtBQUFBQSxlQUFqQ0EsWUFBeEIsRUFBVSxDQUFWO0FBQ0EsZUFBT0QsR0FBRyxHQUFJLG1CQUFKLE1BQVY7QUFGRixPQUFrQixFQUFsQjtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSw4QkFBd0I7QUFDdEIsZUFBTyxDQUFDLENBQUQsY0FBaUJELFVBQVUsSUFBbEM7QUFDRDtBQUVjSjs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQ25CZjs7QUFBQTtBQUVBOzs7QUFDQSxVQUFJTSxVQUFVLEdBQUd6TztBQUFBQTtBQUFBQSxRQUFqQixvQkFBaUJBLENBQWpCO0FBRWV5Tzs7QUFBQUEsaUNBQWYsVUFBZUE7Ozs7Ozs7O0FDTGY7O0FBQ0EsVUFBSVQsU0FBUyxHQUFHNU4sUUFBUSxDQUF4QjtBQUVBOztBQUNBLFVBQUk2TixZQUFZLEdBQUdELFNBQVMsQ0FBNUI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSw4QkFBd0I7QUFDdEIsWUFBSTVNLElBQUksSUFBUixNQUFrQjtBQUNoQixjQUFJO0FBQ0YsbUJBQU82TSxZQUFZLENBQVpBLEtBQVAsSUFBT0EsQ0FBUDtBQURGLFlBRUUsVUFBVSxDQUFFOztBQUNkLGNBQUk7QUFDRixtQkFBUTdNLElBQUksR0FBWjtBQURGLFlBRUUsVUFBVSxDQUFFO0FBQ2Y7O0FBQ0Q7QUFDRDtBQUVjZ047OztBQUFBQSxpQ0FBZixRQUFlQTs7Ozs7Ozs7QUN6QmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxxQ0FBK0I7QUFDN0IsZUFBT2xOLE1BQU0sSUFBTkEsbUJBQTZCQSxNQUFNLENBQTFDLEdBQTBDLENBQTFDO0FBQ0Q7QUFFYzBNOzs7QUFBQUEsaUNBQWYsUUFBZUE7Ozs7Ozs7O0FDWmY7O0FBQUE7QUFBQTs7O0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0Esd0NBQWtDO0FBQ2hDLGVBQU81TDtBQUFBQTtBQUFBQSxXQUFTLDJCQUEwQjtBQUN4QyxjQUFJRyxLQUFLLEdBQUcsQ0FBWjtBQUFBLGNBQ0lJLE1BQU0sR0FBR21NLE9BQU8sQ0FEcEI7QUFBQSxjQUVJakIsVUFBVSxHQUFHbEwsTUFBTSxHQUFOQSxJQUFhbU0sT0FBTyxDQUFDbk0sTUFBTSxHQUEzQkEsQ0FBb0IsQ0FBcEJBLEdBRmpCO0FBQUEsY0FHSXdKLEtBQUssR0FBR3hKLE1BQU0sR0FBTkEsSUFBYW1NLE9BQU8sQ0FBcEJuTSxDQUFvQixDQUFwQkEsR0FIWjtBQUtBa0wsb0JBQVUsR0FBSWtCLFFBQVEsQ0FBUkEsY0FBdUIscUJBQXhCLFVBQUNBLElBQ1RwTSxNQUFNLElBREUsVUFBQ29NLElBQWRsQjs7QUFJQSxjQUFJMUIsS0FBSyxJQUFJM0o7QUFBQUE7QUFBQUEsYUFBZXNNLE9BQU8sQ0FBUixDQUFRLENBQXRCdE0sRUFBMkJzTSxPQUFPLENBQXBCLENBQW9CLENBQWxDdE0sRUFBYixLQUFhQSxDQUFiLEVBQTREO0FBQzFEcUwsc0JBQVUsR0FBR2xMLE1BQU0sR0FBTkEsZ0JBQWJrTDtBQUNBbEwsa0JBQU0sR0FBTkE7QUFDRDs7QUFDRHJCLGdCQUFNLEdBQUdsSSxNQUFNLENBQWZrSSxNQUFlLENBQWZBOztBQUNBLGlCQUFPLFVBQVAsUUFBeUI7QUFDdkIsZ0JBQUlzTCxNQUFNLEdBQUdrQyxPQUFPLENBQXBCLEtBQW9CLENBQXBCOztBQUNBLHdCQUFZO0FBQ1ZDLHNCQUFRLHdCQUFSQSxVQUFRLENBQVJBO0FBQ0Q7QUFDRjs7QUFDRDtBQXJCRixTQUFPM00sQ0FBUDtBQXVCRDtBQUVjb0w7OztBQUFBQSxpQ0FBZixjQUFlQTs7Ozs7Ozs7QUNwQ2Y7O0FBQUE7QUFFQTs7O0FBQ0EsVUFBSXdCLFNBQVMsR0FBRzlOLElBQUksQ0FBcEI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsZ0RBQTBDO0FBQ3hDK04sYUFBSyxHQUFHRCxTQUFTLENBQUNDLEtBQUssS0FBTEEsWUFBdUJ6TixJQUFJLENBQUpBLFNBQXZCeU4sSUFBRCxPQUFqQkEsQ0FBaUIsQ0FBakJBO0FBQ0EsZUFBTyxZQUFXO0FBQ2hCLGNBQUlsVSxJQUFJLEdBQVI7QUFBQSxjQUNJd0gsS0FBSyxHQUFHLENBRFo7QUFBQSxjQUVJSSxNQUFNLEdBQUdxTSxTQUFTLENBQUNqVSxJQUFJLENBQUpBLFNBQUQsT0FGdEIsQ0FFc0IsQ0FGdEI7QUFBQSxjQUdJc0osS0FBSyxHQUFHNUUsS0FBSyxDQUhqQixNQUdpQixDQUhqQjs7QUFLQSxpQkFBTyxVQUFQLFFBQXlCO0FBQ3ZCNEUsaUJBQUssQ0FBTEEsS0FBSyxDQUFMQSxHQUFldEosSUFBSSxDQUFDa1UsS0FBSyxHQUF6QjVLLEtBQW1CLENBQW5CQTtBQUNEOztBQUNEOUIsZUFBSyxHQUFHLENBQVJBO0FBQ0EsY0FBSTJNLFNBQVMsR0FBR3pQLEtBQUssQ0FBQ3dQLEtBQUssR0FBM0IsQ0FBcUIsQ0FBckI7O0FBQ0EsaUJBQU8sVUFBUCxPQUF3QjtBQUN0QkMscUJBQVMsQ0FBVEEsS0FBUyxDQUFUQSxHQUFtQm5VLElBQUksQ0FBdkJtVSxLQUF1QixDQUF2QkE7QUFDRDs7QUFDREEsbUJBQVMsQ0FBVEEsS0FBUyxDQUFUQSxHQUFtQi9LLFNBQVMsQ0FBNUIrSyxLQUE0QixDQUE1QkE7QUFDQSxpQkFBTzdNO0FBQUFBO0FBQUFBLGFBQUssSUFBTEEsRUFBSyxJQUFMQSxFQUFQLFNBQU9BLENBQVA7QUFmRjtBQWlCRDtBQUVjSDs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQ25DZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFVBQUlELFdBQVcsR0FBR2tOO0FBQUFBO0FBQUFBLFNBQVNDO0FBQTNCO0FBQTJCQSxPQUFURCxDQUFsQjtBQUVlbE47O0FBQUFBLGlDQUFmLFdBQWVBOzs7Ozs7OztBQ2JmOztBQUFBO0FBQUE7OztBQUFBO0FBQUE7OztBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSW1OLGVBQWUsR0FBRyxDQUFDalc7QUFBRDtBQUFDQSxPQUFELEdBQWtCZ0o7QUFBbEI7QUFBa0JBLE9BQWxCLEdBQTZCLHdCQUF1QjtBQUN4RSxlQUFPaEo7QUFBQUE7QUFBQUEsV0FBYyxJQUFkQSxFQUFjLFVBQWRBLEVBQWlDO0FBQ3RDLDBCQURzQztBQUV0Qyx3QkFGc0M7QUFHdEMsbUJBQVNrVztBQUFBQTtBQUFBQSxhQUg2QixNQUc3QkEsQ0FINkI7QUFJdEMsc0JBQVk7QUFKMEIsU0FBakNsVyxDQUFQO0FBREY7QUFTZWlXOztBQUFBQSxpQ0FBZixlQUFlQTs7Ozs7Ozs7QUNyQmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsK0JBQXlCO0FBQ3ZCLGVBQU8sWUFBVztBQUNoQjtBQURGO0FBR0Q7QUFFY0M7OztBQUFBQSxpQ0FBZixRQUFlQTs7Ozs7Ozs7QUN6QmY7O0FBQ0EsVUFBSUMsU0FBUyxHQUFiO0FBQUEsVUFDSUMsUUFBUSxHQURaO0FBR0E7O0FBQ0EsVUFBSUMsU0FBUyxHQUFHdEosSUFBSSxDQUFwQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSw4QkFBd0I7QUFDdEIsWUFBSXVKLEtBQUssR0FBVDtBQUFBLFlBQ0lDLFVBQVUsR0FEZDtBQUdBLGVBQU8sWUFBVztBQUNoQixjQUFJQyxLQUFLLEdBQUdILFNBQVo7QUFBQSxjQUNJSSxTQUFTLEdBQUdMLFFBQVEsSUFBSUksS0FBSyxHQURqQyxVQUN3QixDQUR4QjtBQUdBRCxvQkFBVSxHQUFWQTs7QUFDQSxjQUFJRSxTQUFTLEdBQWIsR0FBbUI7QUFDakIsZ0JBQUksV0FBSixXQUEwQjtBQUN4QixxQkFBT0MsU0FBUyxDQUFoQixDQUFnQixDQUFoQjtBQUNEO0FBSEgsaUJBSU87QUFDTEosaUJBQUssR0FBTEE7QUFDRDs7QUFDRCxpQkFBT2pPLElBQUksQ0FBSkEsaUJBQVAsU0FBT0EsQ0FBUDtBQVpGO0FBY0Q7QUFFYzJOOzs7QUFBQUEsaUNBQWYsUUFBZUE7Ozs7Ozs7O0FDcENmOztBQUFBO0FBQUE7OztBQUFBO0FBQUE7OztBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsOEJBQXdCO0FBQ3RCLGVBQU90TztBQUFBQTtBQUFBQSxxQkFBc0I2QztBQUFBQTtBQUFBQSxXQUFhLE1BQWJBLEVBQXRCN0MsSUFBc0I2QyxDQUF0QjdDLEdBQW9EaVA7QUFBQUE7QUFBQUEsV0FBM0QsTUFBMkRBLENBQTNEO0FBQ0Q7QUFFY3BDOzs7QUFBQUEsaUNBQWYsTUFBZUE7Ozs7Ozs7O0FDL0JmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxzQ0FBZ0M7QUFDOUIsWUFBSW5MLEtBQUssR0FBRyxDQUFaO0FBQUEsWUFDSWdCLE1BQU0sR0FBRzlELEtBQUssQ0FEbEIsQ0FDa0IsQ0FEbEI7O0FBR0EsZUFBTyxVQUFQLEdBQW9CO0FBQ2xCOEQsZ0JBQU0sQ0FBTkEsS0FBTSxDQUFOQSxHQUFnQmUsUUFBUSxDQUF4QmYsS0FBd0IsQ0FBeEJBO0FBQ0Q7O0FBQ0Q7QUFDRDtBQUVjQzs7O0FBQUFBLGlDQUFmLFNBQWVBOzs7Ozs7OztBQ25CZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUdBOzs7QUFDQSxVQUFJWixXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBOztBQUNBLFVBQUltTixvQkFBb0IsR0FBR25OLFdBQVcsQ0FBdEM7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBSUssV0FBVyxHQUFHO0FBQUE7QUFBQSxTQUFnQixZQUFXO0FBQUU7QUFBN0IsT0FBZ0IsRUFBaEIsSUFBc0QrTTtBQUF0RDtBQUFzREEsT0FBdEQsR0FBd0UsaUJBQWdCO0FBQ3hHLGVBQU85UTtBQUFBQTtBQUFBQSxxQkFBdUIyRCxjQUFjLENBQWRBLFlBQXZCM0QsUUFBdUIyRCxDQUF2QjNELElBQ0wsQ0FBQzZRLG9CQUFvQixDQUFwQkEsWUFESCxRQUNHQSxDQURIO0FBREY7QUFLZTlNOztBQUFBQSxpQ0FBZixXQUFlQTs7Ozs7Ozs7QUNuQ2Y7O0FBQUE7QUFBQTs7O0FBQUE7QUFHQTs7O0FBQ0EsVUFBSWdOLE9BQU8sR0FBWDtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLHNDQUFnQztBQUM5QixlQUFPL1E7QUFBQUE7QUFBQUEscUJBQXVCRDtBQUFBQTtBQUFBQSxxQkFBOUI7QUFDRDtBQUVjK1E7OztBQUFBQSxpQ0FBZixlQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDZGY7OztBQUNBLFlBQUlFLFdBQVcsR0FBRyxrRUFBeUMsQ0FBQ0MsT0FBTyxDQUFqRCxZQUFsQjtBQUVBOztBQUNBLFlBQUlDLFVBQVUsR0FBR0YsV0FBVyxJQUFJLHlDQUFmQSxzQkFBc0QsQ0FBQzNTLE1BQU0sQ0FBN0QyUyxZQUFqQjtBQUVBOztBQUNBLFlBQUlHLGFBQWEsR0FBR0QsVUFBVSxJQUFJQSxVQUFVLENBQVZBLFlBQWxDO0FBRUE7O0FBQ0EsWUFBSUUsTUFBTSxHQUFHRCxhQUFhLEdBQUdqUTtBQUFBQTtBQUFBQSxVQUFILFNBQTFCO0FBRUE7O0FBQ0EsWUFBSW1RLGNBQWMsR0FBR0QsTUFBTSxHQUFHQSxNQUFNLENBQVQsV0FBM0I7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQUluTixRQUFRLEdBQUdvTixjQUFjLElBQUlDO0FBQWpDO0FBQWlDQSxTQUFqQztBQUVlck47O0FBQUFBLG1DQUFmLFFBQWVBOzs7Ozs7Ozs7O0FDckNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLDJCQUFxQjtBQUNuQjtBQUNEO0FBRWNxTjs7O0FBQUFBLGlDQUFmLFNBQWVBOzs7Ozs7OztBQ2pCZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUlBOzs7QUFDQSxVQUFJQyxnQkFBZ0IsR0FBR0M7QUFBQUE7QUFBQUEsV0FBWUE7QUFBQUE7QUFBQUEsUUFBbkM7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQUlyTixZQUFZLEdBQUdvTixnQkFBZ0IsR0FBR0U7QUFBQUE7QUFBQUEsU0FBSCxnQkFBR0EsQ0FBSCxHQUFpQ0M7QUFBcEU7QUFBb0VBLE9BQXBFO0FBRWV2Tjs7QUFBQUEsaUNBQWYsWUFBZUE7Ozs7Ozs7O0FDMUJmOztBQUFBO0FBQUE7OztBQUFBO0FBQUE7OztBQUFBO0FBSUE7OztBQUNBLFVBQUk0TSxPQUFPLEdBQVg7QUFBQSxVQUNJWSxRQUFRLEdBRFo7QUFBQSxVQUVJQyxPQUFPLEdBRlg7QUFBQSxVQUdJQyxPQUFPLEdBSFg7QUFBQSxVQUlJL00sUUFBUSxHQUpaO0FBQUEsVUFLSXJDLE9BQU8sR0FMWDtBQUFBLFVBTUlxUCxNQUFNLEdBTlY7QUFBQSxVQU9JQyxTQUFTLEdBUGI7QUFBQSxVQVFJQyxTQUFTLEdBUmI7QUFBQSxVQVNJQyxTQUFTLEdBVGI7QUFBQSxVQVVJQyxNQUFNLEdBVlY7QUFBQSxVQVdJQyxTQUFTLEdBWGI7QUFBQSxVQVlJQyxVQUFVLEdBWmQ7QUFjQSxVQUFJQyxjQUFjLEdBQWxCO0FBQUEsVUFDSUMsV0FBVyxHQURmO0FBQUEsVUFFSUMsVUFBVSxHQUZkO0FBQUEsVUFHSUMsVUFBVSxHQUhkO0FBQUEsVUFJSUMsT0FBTyxHQUpYO0FBQUEsVUFLSUMsUUFBUSxHQUxaO0FBQUEsVUFNSUMsUUFBUSxHQU5aO0FBQUEsVUFPSUMsUUFBUSxHQVBaO0FBQUEsVUFRSUMsZUFBZSxHQVJuQjtBQUFBLFVBU0lDLFNBQVMsR0FUYjtBQUFBLFVBVUlDLFNBQVMsR0FWYjtBQVlBOztBQUNBLFVBQUlDLGNBQWMsR0FBbEI7QUFDQUEsb0JBQWMsQ0FBZEEsVUFBYyxDQUFkQSxHQUE2QkEsY0FBYyxDQUFkQSxVQUFjLENBQWRBLEdBQzdCQSxjQUFjLENBQWRBLE9BQWMsQ0FBZEEsR0FBMEJBLGNBQWMsQ0FBZEEsUUFBYyxDQUFkQSxHQUMxQkEsY0FBYyxDQUFkQSxRQUFjLENBQWRBLEdBQTJCQSxjQUFjLENBQWRBLFFBQWMsQ0FBZEEsR0FDM0JBLGNBQWMsQ0FBZEEsZUFBYyxDQUFkQSxHQUFrQ0EsY0FBYyxDQUFkQSxTQUFjLENBQWRBLEdBQ2xDQSxjQUFjLENBQWRBLFNBQWMsQ0FBZEEsR0FKQUE7QUFLQUEsb0JBQWMsQ0FBZEEsT0FBYyxDQUFkQSxHQUEwQkEsY0FBYyxDQUFkQSxRQUFjLENBQWRBLEdBQzFCQSxjQUFjLENBQWRBLGNBQWMsQ0FBZEEsR0FBaUNBLGNBQWMsQ0FBZEEsT0FBYyxDQUFkQSxHQUNqQ0EsY0FBYyxDQUFkQSxXQUFjLENBQWRBLEdBQThCQSxjQUFjLENBQWRBLE9BQWMsQ0FBZEEsR0FDOUJBLGNBQWMsQ0FBZEEsUUFBYyxDQUFkQSxHQUEyQkEsY0FBYyxDQUFkQSxPQUFjLENBQWRBLEdBQzNCQSxjQUFjLENBQWRBLE1BQWMsQ0FBZEEsR0FBeUJBLGNBQWMsQ0FBZEEsU0FBYyxDQUFkQSxHQUN6QkEsY0FBYyxDQUFkQSxTQUFjLENBQWRBLEdBQTRCQSxjQUFjLENBQWRBLFNBQWMsQ0FBZEEsR0FDNUJBLGNBQWMsQ0FBZEEsTUFBYyxDQUFkQSxHQUF5QkEsY0FBYyxDQUFkQSxTQUFjLENBQWRBLEdBQ3pCQSxjQUFjLENBQWRBLFVBQWMsQ0FBZEEsR0FQQUE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSx1Q0FBaUM7QUFDL0IsZUFBT2hUO0FBQUFBO0FBQUFBLHFCQUNMeUI7QUFBQUE7QUFBQUEsV0FBU3ZHLEtBQUssQ0FEVDhFLE1BQ0x5QixDQURLekIsSUFDcUIsQ0FBQyxDQUFDZ1QsY0FBYyxDQUFDalQ7QUFBQUE7QUFBQUEsV0FEN0MsS0FDNkNBLENBQUQsQ0FENUM7QUFFRDtBQUVjMlI7OztBQUFBQSxpQ0FBZixnQkFBZUE7Ozs7Ozs7O0FDM0RmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLCtCQUF5QjtBQUN2QixlQUFPLGlCQUFnQjtBQUNyQixpQkFBT3BQLElBQUksQ0FBWCxLQUFXLENBQVg7QUFERjtBQUdEO0FBRWNtUDs7O0FBQUFBLGlDQUFmLFNBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1hmOzs7QUFDQSxZQUFJVCxXQUFXLEdBQUcsa0VBQXlDLENBQUNDLE9BQU8sQ0FBakQsWUFBbEI7QUFFQTs7QUFDQSxZQUFJQyxVQUFVLEdBQUdGLFdBQVcsSUFBSSx5Q0FBZkEsc0JBQXNELENBQUMzUyxNQUFNLENBQTdEMlMsWUFBakI7QUFFQTs7QUFDQSxZQUFJRyxhQUFhLEdBQUdELFVBQVUsSUFBSUEsVUFBVSxDQUFWQSxZQUFsQztBQUVBOztBQUNBLFlBQUkrQixXQUFXLEdBQUc5QixhQUFhLElBQUk5UDtBQUFBQTtBQUFBQSxVQUFuQztBQUVBOztBQUNBLFlBQUltUSxRQUFRLEdBQUksWUFBVztBQUN6QixjQUFJO0FBQ0Y7QUFDQSxnQkFBSTBCLEtBQUssR0FBR2hDLFVBQVUsSUFBSUEsVUFBVSxDQUF4QkEsV0FBb0NBLFVBQVUsQ0FBVkEsZ0JBQWhEOztBQUVBLHVCQUFXO0FBQ1Q7QUFMQSxjQVFGOzs7QUFDQSxtQkFBTytCLFdBQVcsSUFBSUEsV0FBVyxDQUExQkEsV0FBc0NBLFdBQVcsQ0FBWEEsUUFBN0MsTUFBNkNBLENBQTdDO0FBVEYsWUFVRSxVQUFVLENBQUU7QUFYaEIsU0FBZ0IsRUFBaEI7QUFjZXpCOzs7QUFBQUEsbUNBQWYsUUFBZUE7Ozs7Ozs7Ozs7QUM3QmY7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFJQTs7O0FBQ0EsVUFBSTlOLFdBQVcsR0FBR3hKLE1BQU0sQ0FBeEI7QUFFQTs7QUFDQSxVQUFJeUosY0FBYyxHQUFHRCxXQUFXLENBQWhDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0Esa0NBQTRCO0FBQzFCLFlBQUksQ0FBQ3pDO0FBQUFBO0FBQUFBLFdBQUwsTUFBS0EsQ0FBTCxFQUF1QjtBQUNyQixpQkFBT2tTO0FBQUFBO0FBQUFBLGFBQVAsTUFBT0EsQ0FBUDtBQUNEOztBQUNELFlBQUlDLE9BQU8sR0FBR3hPO0FBQUFBO0FBQUFBLFdBQWQsTUFBY0EsQ0FBZDtBQUFBLFlBQ0lQLE1BQU0sR0FEVjs7QUFHQSxhQUFLLElBQUwsZUFBd0I7QUFDdEIsY0FBSSxFQUFFdEosR0FBRyxJQUFIQSxrQkFBeUJxWSxPQUFPLElBQUksQ0FBQ3pQLGNBQWMsQ0FBZEEsYUFBM0MsR0FBMkNBLENBQXJDNUksQ0FBRixDQUFKLEVBQStFO0FBQzdFc0osa0JBQU0sQ0FBTkE7QUFDRDtBQUNGOztBQUNEO0FBQ0Q7QUFFY3VNOzs7QUFBQUEsaUNBQWYsVUFBZUE7Ozs7Ozs7O0FDaENmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxvQ0FBOEI7QUFDNUIsWUFBSXZNLE1BQU0sR0FBVjs7QUFDQSxZQUFJakMsTUFBTSxJQUFWLE1BQW9CO0FBQ2xCLGVBQUssSUFBTCxPQUFnQmxJLE1BQU0sQ0FBdEIsTUFBc0IsQ0FBdEIsRUFBZ0M7QUFDOUJtSyxrQkFBTSxDQUFOQTtBQUNEO0FBQ0Y7O0FBQ0Q7QUFDRDtBQUVjOE87OztBQUFBQSxpQ0FBZixZQUFlQTs7Ozs7Ozs7QUNuQmY7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSTlFLE9BQU8sR0FBR25MO0FBQUFBO0FBQUFBLFNBQVMsc0JBQXFCO0FBQzFDLFlBQUk7QUFDRixpQkFBT0M7QUFBQUE7QUFBQUEsYUFBSyxJQUFMQSxFQUFLLFNBQUxBLEVBQVAsSUFBT0EsQ0FBUDtBQURGLFVBRUUsVUFBVTtBQUNWLGlCQUFPNkI7QUFBQUE7QUFBQUEsc0JBQWlCLFVBQXhCLENBQXdCLENBQXhCO0FBQ0Q7QUFMSCxPQUFjOUIsQ0FBZDtBQVFlbUw7O0FBQUFBLGlDQUFmLE9BQWVBOzs7Ozs7OztBQ2xDZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUlBOzs7QUFDQSxVQUFJMkQsU0FBUyxHQUFiO0FBRUE7O0FBQ0EsVUFBSTlDLFNBQVMsR0FBRzVOLFFBQVEsQ0FBeEI7QUFBQSxVQUNJb0MsV0FBVyxHQUFHeEosTUFBTSxDQUR4QjtBQUdBOztBQUNBLFVBQUlpVixZQUFZLEdBQUdELFNBQVMsQ0FBNUI7QUFFQTs7QUFDQSxVQUFJdkwsY0FBYyxHQUFHRCxXQUFXLENBQWhDO0FBRUE7O0FBQ0EsVUFBSTJQLGdCQUFnQixHQUFHbEUsWUFBWSxDQUFaQSxLQUF2QixNQUF1QkEsQ0FBdkI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxvQ0FBOEI7QUFDNUIsWUFBSSxDQUFDblA7QUFBQUE7QUFBQUEsV0FBRCxLQUFDQSxDQUFELElBQXdCRDtBQUFBQTtBQUFBQSxxQkFBNUIsV0FBNEQ7QUFDMUQ7QUFDRDs7QUFDRCxZQUFJNEUsS0FBSyxHQUFHMk87QUFBQUE7QUFBQUEsV0FBWixLQUFZQSxDQUFaOztBQUNBLFlBQUkzTyxLQUFLLEtBQVQsTUFBb0I7QUFDbEI7QUFDRDs7QUFDRCxZQUFJRCxJQUFJLEdBQUdmLGNBQWMsQ0FBZEEsOEJBQTZDZ0IsS0FBSyxDQUE3RDtBQUNBLGVBQU8sNkJBQTZCRCxJQUFJLFlBQWpDLFFBQ0x5SyxZQUFZLENBQVpBLGNBREY7QUFFRDtBQUVjcEs7OztBQUFBQSxpQ0FBZixhQUFlQTs7Ozs7Ozs7QUM3RGY7O0FBQUE7QUFFQTs7O0FBQ0EsVUFBSXVPLFlBQVksR0FBR3BPO0FBQUFBO0FBQUFBLFNBQVFoTCxNQUFNLENBQVAsY0FBUGdMLEVBQW5CLE1BQW1CQSxDQUFuQjtBQUVlb087O0FBQUFBLGlDQUFmLFlBQWVBOzs7Ozs7OztBQ0xmOztBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLHlDQUFtQztBQUNqQyxlQUFPak87QUFBQUE7QUFBQUEsV0FBUSxLQUFSQSxFQUFnQixlQUFjO0FBQ25DLGlCQUFPakQsTUFBTSxDQUFiLEdBQWEsQ0FBYjtBQURGLFNBQU9pRCxDQUFQO0FBR0Q7QUFFY21JOzs7QUFBQUEsaUNBQWYsVUFBZUE7Ozs7Ozs7O0FDbEJmOztBQUFBO0FBRUE7OztBQUNBLFVBQUk5SixXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSx1RUFBaUU7QUFDL0QsWUFBSW1MLFFBQVEsS0FBUkEsYUFDQ3JOO0FBQUFBO0FBQUFBLFdBQUUsUUFBRkEsRUFBYWtDLFdBQVcsQ0FBeEJsQyxHQUF3QixDQUF4QkEsS0FBa0MsQ0FBQ21DLGNBQWMsQ0FBZEEsYUFEeEMsR0FDd0NBLENBRHhDLEVBQzJFO0FBQ3pFO0FBQ0Q7O0FBQ0Q7QUFDRDtBQUVjeUo7OztBQUFBQSxpQ0FBZixzQkFBZUE7Ozs7Ozs7O0FDNUJmOztBQUNBLFVBQUltRyxhQUFhLEdBQUc7QUFDbEIsY0FEa0I7QUFFbEIsYUFGa0I7QUFHbEIsY0FIa0I7QUFJbEIsY0FKa0I7QUFLbEIsa0JBTGtCO0FBTWxCLGtCQUFVO0FBTlEsT0FBcEI7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxxQ0FBK0I7QUFDN0IsZUFBTyxPQUFPQSxhQUFhLENBQTNCLEdBQTJCLENBQTNCO0FBQ0Q7QUFFY3hGOzs7QUFBQUEsaUNBQWYsZ0JBQWVBOzs7Ozs7OztBQ3JCZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSw0QkFBc0I7QUFDcEIsZUFBT3BNO0FBQUFBO0FBQUFBLHFCQUFzQjZDO0FBQUFBO0FBQUFBLFdBQXRCN0MsTUFBc0I2QyxDQUF0QjdDLEdBQThDNlI7QUFBQUE7QUFBQUEsV0FBckQsTUFBcURBLENBQXJEO0FBQ0Q7QUFFYzdZOzs7QUFBQUEsaUNBQWYsSUFBZUE7Ozs7Ozs7O0FDcENmOztBQUFBO0FBQUE7OztBQUFBO0FBR0E7OztBQUNBLFVBQUkrSSxXQUFXLEdBQUd4SixNQUFNLENBQXhCO0FBRUE7O0FBQ0EsVUFBSXlKLGNBQWMsR0FBR0QsV0FBVyxDQUFoQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGdDQUEwQjtBQUN4QixZQUFJLENBQUNrQjtBQUFBQTtBQUFBQSxXQUFMLE1BQUtBLENBQUwsRUFBMEI7QUFDeEIsaUJBQU82TztBQUFBQTtBQUFBQSxhQUFQLE1BQU9BLENBQVA7QUFDRDs7QUFDRCxZQUFJcFAsTUFBTSxHQUFWOztBQUNBLGFBQUssSUFBTCxPQUFnQm5LLE1BQU0sQ0FBdEIsTUFBc0IsQ0FBdEIsRUFBZ0M7QUFDOUIsY0FBSXlKLGNBQWMsQ0FBZEEscUJBQW9DNUksR0FBRyxJQUEzQyxlQUE4RDtBQUM1RHNKLGtCQUFNLENBQU5BO0FBQ0Q7QUFDRjs7QUFDRDtBQUNEO0FBRWNtUDs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQzdCZjs7QUFBQTtBQUVBOzs7QUFDQSxVQUFJQyxVQUFVLEdBQUd2TztBQUFBQTtBQUFBQSxTQUFRaEwsTUFBTSxDQUFQLElBQVBnTCxFQUFqQixNQUFpQkEsQ0FBakI7QUFFZXVPOztBQUFBQSxpQ0FBZixVQUFlQTs7Ozs7Ozs7QUNMZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSXpHLGdCQUFnQixHQUFHO0FBRXJCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLGtCQUFVMEc7QUFSVztBQVFYQSxTQVJXOztBQVVyQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRSxvQkFBWUM7QUFoQlM7QUFnQlRBLFNBaEJTOztBQWtCckI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0UsdUJBQWVyTztBQXhCTTtBQXdCTkEsU0F4Qk07O0FBMEJyQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRSxvQkFoQ3FCOztBQWtDckI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0UsbUJBQVc7QUFFVDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxlQUFLO0FBQUUsc0JBQVVzTztBQUFBQTtBQUFBQTtBQUFaO0FBUkk7QUF4Q1UsT0FBdkI7QUFvRGU1Rzs7QUFBQUEsaUNBQWYsZ0JBQWVBOzs7Ozs7OztBQ2xFZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUdBOzs7QUFDQSxVQUFJNkcsZUFBZSxHQUFuQjtBQUFBLFVBQ0lDLGtCQUFrQixHQUFHbEcsTUFBTSxDQUFDaUcsZUFBZSxDQUQvQyxNQUMrQixDQUQvQjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLDhCQUF3QjtBQUN0QjNHLGNBQU0sR0FBRzFIO0FBQUFBO0FBQUFBLFdBQVQwSCxNQUFTMUgsQ0FBVDBIO0FBQ0EsZUFBUUEsTUFBTSxJQUFJNEcsa0JBQWtCLENBQWxCQSxLQUFYLE1BQVdBLENBQVY1RyxHQUNKQSxNQUFNLENBQU5BLHlCQUFnQzZHO0FBRDdCO0FBQzZCQSxTQUFoQzdHLENBRElBLEdBQVI7QUFHRDtBQUVjMEc7OztBQUFBQSxpQ0FBZixNQUFlQTs7Ozs7Ozs7QUMxQ2Y7O0FBQUE7QUFFQTs7O0FBQ0EsVUFBSUksV0FBVyxHQUFHO0FBQ2hCLGFBRGdCO0FBRWhCLGFBRmdCO0FBR2hCLGFBSGdCO0FBSWhCLGFBSmdCO0FBS2hCLGFBQUs7QUFMVyxPQUFsQjtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQUlELGNBQWMsR0FBR0U7QUFBQUE7QUFBQUEsU0FBckIsV0FBcUJBLENBQXJCO0FBRWVGOztBQUFBQSxpQ0FBZixjQUFlQTs7Ozs7Ozs7QUNwQmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0Esc0NBQWdDO0FBQzlCLGVBQU8sZUFBYztBQUNuQixpQkFBTzNSLE1BQU0sSUFBTkEsbUJBQTZCQSxNQUFNLENBQTFDLEdBQTBDLENBQTFDO0FBREY7QUFHRDtBQUVjNlI7OztBQUFBQSxpQ0FBZixjQUFlQTs7Ozs7Ozs7QUNiZjs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUtBOzs7QUFDQSxVQUFJQyxRQUFRLEdBQUcsSUFBZjtBQUVBOztBQUNBLFVBQUlDLFdBQVcsR0FBR3ZVO0FBQUFBO0FBQUFBLFVBQVNBO0FBQUFBO0FBQUFBLFFBQUgsU0FBTkEsR0FBbEI7QUFBQSxVQUNJd1UsY0FBYyxHQUFHRCxXQUFXLEdBQUdBLFdBQVcsQ0FBZCxXQURoQztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsbUNBQTZCO0FBQzNCO0FBQ0EsWUFBSSxnQkFBSixVQUE4QjtBQUM1QjtBQUNEOztBQUNELFlBQUl0UTtBQUFBQTtBQUFBQSxXQUFKLEtBQUlBLENBQUosRUFBb0I7QUFDbEI7QUFDQSxpQkFBT3dCO0FBQUFBO0FBQUFBLGFBQVEsS0FBUkEsa0JBQVA7QUFDRDs7QUFDRCxZQUFJZ1A7QUFBQUE7QUFBQUEsV0FBSixLQUFJQSxDQUFKLEVBQXFCO0FBQ25CLGlCQUFPRCxjQUFjLEdBQUdBLGNBQWMsQ0FBZEEsS0FBSCxLQUFHQSxDQUFILEdBQXJCO0FBQ0Q7O0FBQ0QsWUFBSS9QLE1BQU0sR0FBSW5KLEtBQUssR0FBbkI7QUFDQSxlQUFRbUosTUFBTSxJQUFOQSxPQUFrQixJQUFELEtBQUMsSUFBYyxDQUFqQyxRQUFDQSxHQUFELElBQUNBLEdBQVI7QUFDRDtBQUVja0I7OztBQUFBQSxpQ0FBZixZQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pDZjs7O0FBQ0EsVUFBSStPLFNBQVMsR0FBYjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsK0JBQXlCO0FBQ3ZCLGVBQU8sOEJBQ0p0VTtBQUFBQTtBQUFBQSxxQkFBdUJEO0FBQUFBO0FBQUFBLHFCQUQxQjtBQUVEO0FBRWNzVTs7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQzVCZjs7QUFDQSxVQUFJWCxRQUFRLEdBQVo7QUFFZUE7O0FBQUFBLGlDQUFmLFFBQWVBOzs7Ozs7OztBQ0hmOztBQUNBLFVBQUlDLFVBQVUsR0FBZDtBQUVlQTs7QUFBQUEsaUNBQWYsVUFBZUE7Ozs7Ozs7O0FDSGY7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJZVk7OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1ZmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O1VBQ01BLGE7Ozs7Ozs7Ozs7Ozs7O0FBQ0o7QUFDRjtBQUNBO2tDQUNValksTSxFQUFRa04sTSxFQUFRO0FBQ3RCLGdCQUFNdE8sS0FBSyxHQUFHb0IsTUFBTSxDQUFwQjtBQUNBLGdCQUFNa1ksVUFBVSxHQUFHLDZDQUFuQixNQUFtQixDQUFuQjtBQUNBLGdCQUFNQyxXQUFXLEdBQUcsOENBQXBCLE1BQW9CLENBQXBCO0FBQ0EsZ0JBQUlDLFNBQVMsR0FBRyxvQ0FBaEIsTUFBZ0IsQ0FBaEI7O0FBRUEsZ0JBQUk7QUFDRkEsdUJBQVMsR0FBR25WLElBQUksQ0FBSkEsTUFBWm1WLFNBQVluVixDQUFabVY7QUFERixjQUVFLFVBQVU7QUFDVkEsdUJBQVMsR0FBR0EsU0FBUyxJQUFyQkE7QUFDRDtBQUVEOzs7QUFDQSxnQkFBSUEsU0FBUyxJQUFJQSxTQUFTLENBQVRBLGVBQWpCLEtBQWlCQSxDQUFqQixFQUFrRDtBQUNoRHBZLG9CQUFNLENBQU5BO0FBQXdCO0FBQXhCQSx5REFFV29ZLFNBQVMsQ0FBQ3BZLE1BQU0sQ0FGM0JBLEtBRW9CLENBRnBCQTtBQURGLG1CQVFPO0FBQ0xBLG9CQUFNLENBQU5BO0FBQ0Q7O0FBRUQ7QUFDRDs7OztRQTlCeUI2RjtBQUFBQTtBQUFBQSxPO0FBaUNib1M7OztBQUFBQSxpQ0FBZixhQUFlQTs7Ozs7Ozs7QUMxRGY7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJZUk7OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQVNBLFVBQU1DLE1BQU0sR0FBRztBQUNiQyxtQkFBVyxFQURFO0FBRWJDLHVCQUFlLEVBRkY7QUFHYkMsa0JBQVUsRUFIRztBQUliQyxxQkFBYSxFQUpBO0FBS2JDLG1CQUFXLEVBTEU7QUFNYkMsaUJBQVMsRUFOSTtBQU9iQyxnQkFBUSxFQUFFO0FBUEcsT0FBZjs7VUFXTUMsYyxHQURMQztBQUFBQTtBQUFBQSxTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0JBeUJDQyxnQixHQUFtQixJQUFJbk87QUFBSjtBQUFJQSxXQUFKLEU7Z0JBS25Cb08sc0IsR0FBeUIsSUFBSXBPO0FBQUo7QUFBSUEsV0FBSixFO2dCQU96QnFPLGMsR0FBaUIsRTtnQkFPakJDLGMsR0FBaUIsQ0FBQyxDOzs7Ozs7O0FBQ2xCO0FBQ0Y7QUFDQTsrQkFFT25aLE0sRUFBUTtBQUFBO0FBQUE7O0FBQ1gsZ0JBQU02TixTQUFTLEdBQUc3TixNQUFNLENBQU5BLHVCQUFsQixpQkFBa0JBLEVBQWxCO0FBRUEsa0NBQXNCLHdDQUF3QyxDQUM1RHNZLE1BQU0sQ0FEc0QsYUFFNURBLE1BQU0sQ0FGc0QsaUJBRzVEQSxNQUFNLENBSHNELFlBSTVEQSxNQUFNLENBSnNELGVBSzVEQSxNQUFNLENBTFIsV0FBOEQsQ0FBeEMsQ0FBdEI7QUFRQSxrQ0FBc0Isd0NBR3BCLDRCQUE0QkEsTUFBTSxDQUFsQyxlQUFrRCxDQUFsRCxJQUNJQSxNQUFNLENBRFYsY0FFSSxvQkFMTixDQUtNLENBTGdCLENBQXRCO0FBUUEsOEJBQWtCLEtBQWxCO0FBRUEsZ0JBQU1jLG1CQUFtQixxRUFDdEJkLE1BQU0sQ0FEZ0IsYUFDRHpLLFNBQVMsQ0FBQ3lLLE1BQU0sQ0FBUCxhQURSLFFBQ1EsQ0FEUix5Q0FFdEJBLE1BQU0sQ0FGZ0IsaUJBRUd6SyxTQUFTLENBQUN5SyxNQUFNLENBQVAsYUFGWixXQUVZLENBRloseUNBR3RCQSxNQUFNLENBSGdCLFlBR0Z6SyxTQUFTLENBQUN5SyxNQUFNLENBQVAsWUFIUCxXQUdPLENBSFAseUNBSXRCQSxNQUFNLENBSmdCLGVBSUN6SyxTQUFTLENBQUN5SyxNQUFNLENBQVAsZUFKVixjQUlVLENBSlYseUNBS3RCQSxNQUFNLENBTGdCLGFBS0R6SyxTQUFTLENBQUN5SyxNQUFNLENBQVAsYUFMUixVQUtRLENBTFIsR0FBekIsb0JBQXlCLENBQXpCO0FBUUEsd0JBQVl0TSxRQUFRLENBQVJBLGNBQVosS0FBWUEsQ0FBWjtBQUNBO0FBQ0E7QUFBc0I7QUFBdEIseUZBRUksZ0RBRkosMEJBSU0sd0JBQ0Esa0JBQU07QUFBQTtBQUFJO0FBQUosd0dBR0ZSLE1BQU0sS0FBSyxNQUFJLENBQWZBLDhCQUhFLDRDQUtBNE4sbUJBQW1CLENBTG5CLE1BS21CLENBTG5CO0FBQUE7QUFMWixhQUlNLENBSk47O0FBc0JBOztBQUNBLHFDQUF5QnZPO0FBQUFBO0FBQUFBLGNBQXpCLGlCQUF3RCx3QkFBZ0I7QUFDdEUsb0JBQUksQ0FBSjs7QUFDQSxvQkFBSSxDQUFKLE9BQVlpTyxjQUFjLENBQTFCLHNCQUFpRCxNQUFJLENBQXJEO0FBRkY7O0FBS0E7O0FBQ0EsMkNBQ0VqTztBQUFBQTtBQUFBQSxjQURGLGlCQUVFLHdCQUFnQjtBQUNkLG9CQUFJLENBQUo7O0FBQ0Esb0JBQUksQ0FBSixPQUFZaU8sY0FBYyxDQUExQixzQkFBaUQsTUFBSSxDQUFyRDtBQUpKOztBQVFBLHdFQUVlLHNCQUZmLE1BRWUsRUFGZjs7QUFHQSxzRUFFZSw0QkFGZixNQUVlLEVBRmY7O0FBSUEsZ0JBQU1PLE1BQU0sR0FBRyx3QkFBZixtQkFBZSxDQUFmOztBQUNBQSxrQkFBTSxDQUFOQSwyQkFBa0MsS0FBbENBO0FBRUEsMEJBQWMsS0FBZDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUVZO0FBQ1IscUJBQVNQLGNBQWMsQ0FBdkI7O0FBQ0E7O0FBQ0E7O0FBQ0EsdUZBRWlDLEtBRmpDOztBQUdBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7a0NBQ1U7QUFDTjtBQUNBOztBQUNBOztBQUNBOztBQUVBLHdCQUFZQSxjQUFjLENBQTFCLHNCQUFpRCxLQUFqRDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OzttQ0FDV1EsSyxFQUFPO0FBQ2RBLGlCQUFLLEdBQUdBLEtBQUssSUFBYkE7QUFDQSxnQ0FBb0JBLEtBQUssQ0FBTEEsVUFBcEI7QUFDQSxrQ0FBc0JBLEtBQUssQ0FBTEEsWUFBdEI7QUFDQSw4QkFBa0JBLEtBQUssQ0FBTEEsUUFBYyxLQUFoQztBQUVBLGdCQUFNQyxHQUFHLEdBQUcsS0FBWjtBQUNBLGdCQUFNQyxhQUFhLEdBQUcsS0FBdEI7QUFDQSxnQkFBTUMsUUFBUSxHQUFHRixHQUFHLENBQUhBLGNBQWpCLG1CQUFpQkEsQ0FBakI7QUFDQSxnQkFBTUcsV0FBVyxHQUFHLEtBQXBCO0FBQ0EsZ0JBQU1DLGFBQWEsR0FBRyxLQUF0QjtBQUVBRixvQkFBUSxDQUFSQSxnQkFBeUJELGFBQWEsQ0FBYkEsUUFBc0IsV0FBL0NDLElBQXlCRCxDQUF6QkM7QUFDQUMsdUJBQVcsQ0FBWEEsUUFBb0IsV0FBcEJBO0FBQ0FDLHlCQUFhLENBQWJBLFFBQXNCLFdBZFIsUUFjZEEsRUFkYyxDQWdCZDtBQUNBOztBQUNBLGdCQUFJLGlCQUFKLFVBQStCO0FBQzdCLGtCQUFNQyxHQUFHLEdBQUc1TixRQUFRLENBQVJBLFlBQVosWUFBWUEsQ0FBWjtBQUNBNE4saUJBQUcsQ0FBSEE7QUFDQUgsc0JBQVEsQ0FBUkE7QUFIRixtQkFJTztBQUNMQSxzQkFBUSxDQUFSQTtBQUNEOztBQUVELHdCQUFZWCxjQUFjLENBQTFCLHNCQUFpRCxLQUFqRDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozt3Q0FFZ0I1TSxDLEVBQUc7QUFDZixnQkFBTTJOLEVBQUUsR0FBRzNOLENBQUMsQ0FBWjs7QUFDQSxnQkFBTTROLFlBQVksR0FBRyx3QkFBckIsb0JBQXFCLENBQXJCOztBQUVBLDhCQUFrQkQsRUFBRSxDQUFGQSxRQUFXQSxFQUFFLENBQWJBLGVBQWxCOztBQUVBLGdCQUFJLG9CQUFvQnZCLE1BQU0sQ0FBOUIsYUFBNEM7QUFDMUN3QiwwQkFBWSxDQUFaQTtBQURGLG1CQUVPO0FBQ0xBLDBCQUFZLENBQVpBO0FBQ0Q7O0FBRUQsd0JBQVloQixjQUFjLENBQTFCLHNCQUFpRCxLQUFqRDtBQUNEOzs7O1FBaE4wQnBiO0FBQUFBO0FBQUFBLE8sV0FRcEJxYyxvQixHQUF1QixxQyx1RUFEN0JDO0FBQUFBO0FBQUFBLE87Ozs7Ozs7eUZBT0FBO0FBQUFBO0FBQUFBLE87Ozs7O2lCQUNPO0FBQ050VixnQkFBSSxFQUFFNFQsTUFBTSxDQUROO0FBRU4yQixrQkFBTSxFQUZBO0FBR05DLG9CQUFRLEVBQUU7QUFISixXOztnRUFnQ1AvTjtBQUFBQTtBQUFBQSxPLDRJQXFGQUE7QUFBQUE7QUFBQUEsTyxxSkE4REFDO0FBQUFBO0FBQUFBLE8scUdBbk1GMk0sSzs7VUFxTktvQixrQixHQURMcEI7QUFBQUE7QUFBQUEsUzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lCQTBCQ3FCLG9CLEdBQXVCLG9CO2lCQUt2QkMscUIsR0FBd0Isb0I7aUJBS3hCQyxjLEdBQWlCLEk7aUJBT2pCQyxPLEdBQVUsSTs7Ozs7OztBQUNWO0FBQ0Y7QUFDQTsrQkFFT3ZhLE0sRUFBUTtBQUNYLGdCQUFNNk4sU0FBUyxHQUFHN04sTUFBTSxDQUFOQSx1QkFBbEIsaUJBQWtCQSxFQUFsQjtBQUVBOztBQUVBOztBQUNBLHlDQUNFOFksY0FBYyxDQURoQixzQkFFRSxLQUZGOztBQUtBOztBQUNBLDBDQUNFQSxjQUFjLENBRGhCLHNCQUVFLEtBRkY7O0FBSUE7O0FBRUEsd0JBQVk5TSxRQUFRLENBQVJBLGNBQVosS0FBWUEsQ0FBWjtBQUNBOztBQUNBLGtDQUFzQiwwQkFwQlgsTUFvQlcsRUFBdEIsRUFwQlcsQ0FzQlg7OztBQUNBLGdCQUFNd08sS0FBSyxHQUFHLE1BQU05VSxJQUFJLENBQUpBLGdDQUFwQixDQUFvQkEsQ0FBcEI7QUFBQSxnQkFDTStVLEtBQUssR0FBRyxNQUFNL1UsSUFBSSxDQUFKQSxnQ0FEcEIsQ0FDb0JBLENBRHBCO0FBR0Esa0NBQXNCc0csUUFBUSxDQUFSQSxjQUF0QixLQUFzQkEsQ0FBdEI7QUFDQTtBQUNBO0FBQWdDO0FBQWhDLHFTQUdRNkIsU0FBUyxpQkFIakIsS0FHaUIsQ0FIakIsNlJBT0V5SyxNQUFNLENBUFIsNlZBY1F6SyxTQUFTLGdCQWRqQixJQWNpQixDQWRqQixnUkFrQkV5SyxNQUFNLENBbEJSOztBQXVCQSxrQ0FBc0IsS0FBdEI7O0FBQ0EsMkRBQStDLEtBQS9DOztBQUVBLGtDQUFzQiwyQkFBdEIsTUFBc0IsRUFBdEI7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FFWTtBQUNSOztBQUNBOztBQUNBLDhEQUFrRCxLQUFsRDs7QUFDQSxxQkFBUzZCLGtCQUFrQixDQUEzQjtBQUNBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7a0NBQ1U7QUFDTjs7QUFDQTs7QUFDQSx3QkFBWXJCLGNBQWMsQ0FBMUIsc0JBQWlELEtBQWpEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O21DQUNXUSxLLEVBQU87QUFBQTs7QUFDZEEsaUJBQUssR0FBR0EsS0FBSyxJQUFiQTtBQUNBLGtDQUFzQkEsS0FBSyxDQUFMQSxZQUFrQmhCLE1BQU0sQ0FBOUM7QUFDQSxvQ0FBd0JnQixLQUFLLENBQUxBLGNBQXhCO0FBQ0Esb0NBQXdCQSxLQUFLLENBQUxBLGNBQXhCOztBQUVBLCtDQUFtQyxXQUFuQzs7QUFDQSxnREFBb0MsV0FBcEM7O0FBQ0Esa0VBQXNELGlCQUFTO0FBQzdELGtCQUFJMUosS0FBSyxDQUFMQSxtQkFBeUIsTUFBSSxDQUFKLE1BQTdCLFFBQUlBLENBQUosRUFBbUQ7QUFDakRBLHFCQUFLLENBQUxBO0FBREYscUJBRU87QUFDTEEscUJBQUssQ0FBTEE7QUFDRDtBQUxIOztBQVFBLHdCQUFZdUssa0JBQWtCLENBQTlCLDJCQUEwRCxLQUExRDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozs2Q0FFcUJqTyxDLEVBQUc7QUFDcEIsZ0JBQU1sTixNQUFNLEdBQUdrTixDQUFDLENBQWhCO0FBRUEsa0NBQXNCbE4sTUFBTSxDQUE1Qjs7QUFFQSxnQkFBSUEsTUFBTSxDQUFOQSxtQkFBSixJQUFJQSxDQUFKLEVBQXFDO0FBQ25DOztBQUdBO0FBSkYsbUJBT087QUFDTDs7QUFHQTtBQUdEOztBQUVELHdCQUFZbWIsa0JBQWtCLENBQTlCLDJCQUEwRCxLQUExRDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O21EQUUyQmIsSyxFQUFPO0FBQzlCO0FBRUEsZ0JBQU1vQixzQkFBc0IsR0FBRyx5Q0FFN0IsS0FGNkIsU0FBL0IsS0FBK0IsQ0FBL0I7O0FBTUEsZ0JBQUksQ0FBSix3QkFBNkI7QUFBQSwwQ0FDUSxXQURSO0FBQUEsa0JBQ25CVCxNQURtQjtBQUFBLGtCQUNYQyxRQURXO0FBQUEsa0JBQ0R4VixJQURDOztBQUUzQixrQkFBTWlXLGtCQUFrQixHQUFHLDJCQUEzQixNQUEyQixFQUEzQjs7QUFDQSxrQkFBTUMsZ0JBQWdCLEdBQUcsS0FBekI7QUFDQSxrQkFBTXZhLFNBQVMsR0FDYnFFLElBQUksS0FBSzRULE1BQU0sQ0FBZjVULGNBQThCLFdBQVcsQ0FBekNBLFdBQXFELENBRHZEOztBQUdBLDZCQUFlO0FBQ2JpVyxrQ0FBa0IsQ0FBbEJBO0FBQ0FDLGdDQUFnQixDQUFoQkE7QUFGRixxQkFHTztBQUNMRCxrQ0FBa0IsQ0FBbEJBO0FBQ0FDLGdDQUFnQixDQUFoQkE7QUFDRDtBQUNGOztBQUVELHdCQUFZVCxrQkFBa0IsQ0FBOUIsMkJBQTBELEtBQTFEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7b0RBRTRCYixLLEVBQU87QUFDL0I7QUFDQSx3QkFBWWEsa0JBQWtCLENBQTlCLDJCQUEwRCxLQUExRDtBQUNEOzs7O1FBMU44QnpjO0FBQUFBO0FBQUFBLE8sV0FReEJtZCx5QixHQUNMLDhDLDZFQUZEYjtBQUFBQTtBQUFBQSxPOzs7Ozs7OzBGQVFBQTtBQUFBQTtBQUFBQSxPOzs7OztpQkFDTztBQUNOYyxzQkFBVSxFQURKO0FBRU5DLHNCQUFVLEVBRko7QUFHTkMsb0JBQVEsRUFBRTFDLE1BQU0sQ0FBQ087QUFIWCxXOztnRUE4QlAxTTtBQUFBQTtBQUFBQSxPLDRJQTZEQUE7QUFBQUE7QUFBQUEsTywwSkErQ0FDO0FBQUFBO0FBQUFBLE8sMktBNEJBQTtBQUFBQTtBQUFBQSxPLGtMQWdDQUE7QUFBQUE7QUFBQUEsTyxpSEF2TkYyTSxLO0FBOE5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O1VBQ01WLGM7Ozs7Ozs7Ozs7Ozs7OztpQkFJSjRDLG1CLEdBQXNCLHdCO2lCQU90QkMsTSxHQUFTLEU7aUJBT1RYLE8sR0FBVSxFO2lCQUtWWSxzQixHQUF5QixJOzs7Ozs7O0FBRXpCO0FBQ0Y7QUFDQTsrQkFFT25iLE0sRUFBUTtBQUFBOztBQUNYLGdCQUFNNk4sU0FBUyxHQUFHN04sTUFBTSxDQUFOQSx1QkFBbEIsaUJBQWtCQSxFQUFsQjtBQUNBLGdCQUFNOE4sYUFBYSxHQUFHLHNDQUF0QixLQUFzQixDQUF0QjtBQUNBLGdCQUFNQyxhQUFhLEdBQUcsc0NBQXRCLEtBQXNCLENBQXRCO0FBQ0EsZ0JBQU1DLGFBQWEsR0FBRyxzQ0FBdEIsS0FBc0IsQ0FBdEI7QUFFQSx3QkFBWWhDLFFBQVEsQ0FBUkEsY0FBWixLQUFZQSxDQUFaOztBQUVBOztBQUNBLHdDQUNFbU8sa0JBQWtCLENBRHBCLDJCQUVFLGlCQUFTO0FBQ1Asa0JBQUksQ0FBQyxNQUFJLENBQVQsOEJBQXdDO0FBQ3RDLHNCQUFJLENBQUo7QUFDRDtBQUxMOztBQVNBLGtDQUFzQix5QkFBdEIsTUFBc0IsRUFBdEI7O0FBRUEsZ0JBQU1oTSxnQkFBZ0IsR0FBR25DLFFBQVEsQ0FBUkEsY0FBekIsS0FBeUJBLENBQXpCO0FBQ0FtQyw0QkFBZ0IsQ0FBaEJBO0FBQ0FBLDRCQUFnQixDQUFoQkE7QUFBNkI7QUFBN0JBLG9HQUN5RSxrQkFEekVBLDJDQUVrQ04sU0FBUyxnQkFGM0NNLGNBRTJDLENBRjNDQSxvR0FNeUUsa0JBTnpFQSwyQ0FPa0NOLFNBQVMsZ0JBUDNDTSxjQU8yQyxDQVAzQ0Esb0dBV3lFLGtCQVh6RUEsMkNBWWtDTixTQUFTLGdCQVozQ00sY0FZMkMsQ0FaM0NBOztBQWtCQSxnQkFBSUwsYUFBYSxJQUFiQSxpQkFBSixlQUFxRDtBQUNuREssOEJBQWdCLENBQWhCQTtBQUNEOztBQUVEQSw0QkFBZ0IsQ0FBaEJBLDBCQUVFLEtBRkZBOztBQUtBOztBQUVBLDBCQUFjLHlCQUFkO0FBQ0E7QUFFQSwwQ0FBOEI7QUFDNUJpTix3QkFBVSxFQUFFLHFDQUFxQyxLQUFyQyxTQURnQixJQUNoQixDQURnQjtBQUU1QkMsOEJBQWdCLEVBQUUsbUNBQW1DLEtBQW5DLFNBRlUsS0FFVixDQUZVO0FBRzVCO0FBQ0FDLHlCQUFXLEVBQUUsbURBQ1QsYUFEUyxvQkFFVCxhQUFhQTtBQU5XLGFBQTlCO0FBUUQ7QUFFRDtBQUNGO0FBQ0E7Ozs7b0NBRVk7QUFDUjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBQ2lCdGIsTSxFQUFRO0FBQ3JCLGdCQUFNcEIsS0FBSyxHQUFHLHdDQUFkLE1BQWMsQ0FBZDs7QUFEcUIsK0JBRXdCLEtBRnhCO0FBQUEsZ0JBRWJrYyxVQUZhO0FBQUEsZ0JBRURDLFVBRkM7QUFBQSxnQkFFV0MsUUFGWDs7QUFHckIsZ0JBQU1PLHNCQUFzQixHQUFHLG9DQUEvQixLQUErQixDQUEvQjs7QUFDQSxnQkFBTUMsdUJBQXVCLEdBQUcsb0NBQWhDLEtBQWdDLENBQWhDOztBQUVBLG1CQUFPUixRQUFRLEtBQUsxQyxNQUFNLENBQW5CMEMsV0FDSE8sc0JBQXNCLElBRG5CUCwwQkFFSE8sc0JBQXNCLElBRjFCO0FBR0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OzJDQUNtQjtBQUFBLGdCQUNQVCxVQURPLEdBQ1EsS0FEUixNQUNRLENBRFI7O0FBR2YsZ0JBQUlBLFVBQVUsSUFBSUEsVUFBVSxDQUE1QixRQUFxQztBQUNuQyxrQkFBSUEsVUFBVSxDQUFWQSxZQUF1QkEsVUFBVSxDQUFWQSxTQUFvQnhDLE1BQU0sQ0FBckQsYUFBbUU7QUFDakUsdUJBQU93QyxVQUFVLENBQVZBLG1CQUE4QkEsVUFBVSxDQUFWQSxhQUFyQztBQUNEOztBQUVELHFCQUFPQSxVQUFVLENBQVZBLFdBQVA7QUFDRDs7QUFFRDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O3FDQUNhO0FBQUE7O0FBQ1QsZ0JBQU1XLEtBQUssR0FBR3hZLElBQUksQ0FBSkEsTUFBV0EsSUFBSSxDQUFKQSxVQUFlLEtBQXhDLE1BQXlCQSxDQUFYQSxDQUFkO0FBQ0MsYUFBQ3dZLEtBQUssQ0FBTixZQUFtQkEsS0FBSyxDQUF4QixvQkFBNkMsd0JBQWtCO0FBQzlELGtCQUFJcGIsU0FBUyxDQUFiLFFBQXNCO0FBQ3BCQSx5QkFBUyxDQUFUQSxTQUFtQixNQUFJLENBQUosMEJBQXdCOUIsQ0FBQyxHQUF6QixXQUFuQjhCLFdBQW1CLEVBQW5CQTtBQUNEOztBQUNELGtCQUFJQSxTQUFTLENBQWIsVUFBd0I7QUFDdEJBLHlCQUFTLENBQVRBLFdBQXFCLE1BQUksQ0FBSiwwQkFDUDlCLENBQUMsR0FETSxhQUFyQjhCLFdBQXFCLEVBQXJCQTtBQUdEO0FBUkY7QUFXRG9iLGlCQUFLLENBQUxBO0FBQ0FBLGlCQUFLLENBQUxBO0FBQ0FBLGlCQUFLLENBQUxBLHdCQWZTLFVBZVRBLENBZlMsQ0FpQlQ7O0FBQ0EsbUJBQU9BLEtBQUssQ0FBTEEsZ0NBQ0w7QUFDQUEsaUJBQUssQ0FBTEEsMEJBRktBLFFBRUxBLENBRktBLElBR0xBLEtBQUssQ0FBTEEsV0FIS0EsaUJBS0hBLEtBQUssQ0FMVDtBQU1EO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O21DQUNXck4sSyxFQUFPO0FBQ2QsZ0JBQ0VBLEtBQUssSUFDTDtBQUNBLGFBQUNBLEtBQUssQ0FBTEEsZUFGREEsWUFFQ0EsQ0FGREEsSUFHQTtBQUNBLGFBQUNBLEtBQUssQ0FBTEEsZUFMSCxZQUtHQSxDQUxILEVBTUU7QUFDQUEsbUJBQUssR0FBRztBQUNOME0sMEJBQVUsRUFBRTFNO0FBRE4sZUFBUkE7QUFHRDs7QUFDRDs7QUFDQTs7QUFDQTtBQUVBLDBCQUFjLHlCQUFkO0FBQ0MsYUFBQyxZQUFELFlBQXlCLFlBQXpCLG9CQUF5RCxxQkFBYTtBQUNyRSxrQkFBSS9OLFNBQVMsQ0FBYixRQUFzQjtBQUNwQkEseUJBQVMsQ0FBVEEsU0FBbUIsU0FBU0EsU0FBUyxDQUFyQ0EsTUFBbUIsQ0FBbkJBO0FBQ0Q7O0FBQ0Qsa0JBQUlBLFNBQVMsQ0FBYixVQUF3QjtBQUN0QkEseUJBQVMsQ0FBVEEsV0FBcUIsU0FBU0EsU0FBUyxDQUF2Q0EsUUFBcUIsQ0FBckJBO0FBQ0Q7QUFORjtBQVFGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OzsyQ0FDbUIrTixLLEVBQU87QUFDdEIsZ0JBQUksQ0FBSixPQUFZO0FBQ1Y7QUFDRDs7QUFFRCxnQkFBTXNOLFlBQVksR0FBRywrQkFFbkIsS0FGbUIsU0FHbkI7QUFDQSx5RkFKRixZQUlFLENBSm1CLENBQXJCO0FBT0EsZ0JBQU1DLE1BQU0sR0FBRyxpQ0FFYixLQUZhLFNBR2JDLElBQUksQ0FBSkEsNkNBSEYsT0FBZSxDQUFmOztBQVpzQiw4QkFrQnVCM1ksSUFBSSxDQUFKQSxNQUMzQ0EsSUFBSSxDQUFKQSxVQW5Cb0IsS0FtQnBCQSxDQUQyQ0EsQ0FsQnZCO0FBQUEsZ0JBa0JkNlgsVUFsQmM7QUFBQSxnQkFrQkZDLFVBbEJFO0FBQUEsZ0JBa0JVQyxRQWxCVjs7QUFzQnJCLDZDQUFpQyxxQkFBYTtBQUM3QyxrQkFBSTNhLFNBQVMsQ0FBYixRQUFzQjtBQUNwQkEseUJBQVMsQ0FBVEEsU0FBbUJ3YixHQUFHLENBQUhBLG9CQUNqQnhiLFNBQVMsQ0FEUXdiLHNCQUFuQnhiLE1BQW1Cd2IsQ0FBbkJ4YjtBQUtEOztBQUVELGtCQUFJQSxTQUFTLENBQWIsVUFBd0I7QUFDdEJBLHlCQUFTLENBQVRBLFdBQXFCd2IsR0FBRyxDQUFIQSxvQkFDbkJ4YixTQUFTLENBRFV3Yix3QkFBckJ4YixNQUFxQndiLENBQXJCeGI7QUFLRDtBQWZGO0FBa0JELGdCQUFNeWIsc0JBQXNCLGFBQU1oQixVQUFVLENBQVZBLFVBQU4sZ0JBQzFCQSxVQUFVLENBQVZBLFdBQXNCLE9BQU9BLFVBQVUsQ0FBdkNBLFdBREYsRUFBNEIsQ0FBNUI7QUFHQSxnQkFBTWlCLHVCQUF1QixhQUFNaEIsVUFBVSxDQUFWQSxVQUFOLGdCQUMzQkEsVUFBVSxDQUFWQSxXQUFzQixPQUFPQSxVQUFVLENBQXZDQSxXQURGLEVBQTZCLENBQTdCO0FBR0EsZ0JBQU1pQixnQkFBZ0IsYUFBTWpCLFVBQVUsQ0FBVkEsZ0NBQTVCLEVBQXNCLENBQXRCO0FBRUEsbUJBQU8scUdBQVAsSUFBTyxFQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OzZDQUNxQjFhLFMsRUFBV3pCLEssRUFBTztBQUNuQyxnQkFBSSxDQUFDeUIsU0FBUyxDQUFWLFVBQXFCLENBQXpCLE9BQWlDO0FBQy9CO0FBQ0Q7O0FBSGtDLGdCQUszQjRaLE1BTDJCLEdBS0E1WixTQUxBO0FBQUEsZ0JBS25CNlosUUFMbUIsR0FLQTdaLFNBTEE7QUFBQSxnQkFLVHFFLElBTFMsR0FLQXJFLFNBTEE7QUFNbkMsZ0JBQU11SixRQUFRLEdBQUdpUyxHQUFHLENBQUhBLGtCQUFqQixtQkFBaUJBLEVBQWpCO0FBQ0EsZ0JBQU1SLGdCQUFnQixHQUFHLDRCQUF6QjtBQUNBLGdCQUFNRCxVQUFVLEdBQUcsNEJBQW5CO0FBQ0EsZ0JBQUlhLE1BQU0sR0FBVjs7QUFFQSxnQkFBSUosR0FBRyxDQUFIQSxxQ0FBSixLQUFJQSxDQUFKLEVBQXFEO0FBQ25EamQsbUJBQUssR0FBR0EsS0FBSyxHQUFHaWQsR0FBRyxDQUFIQSw4QkFBaEJqZCxLQUFnQmlkLENBQWhCamQ7QUFDQyx5Q0FBMkIsZ0JBQVE7QUFDbEMsb0JBQUl1SyxJQUFJLFlBQVIsTUFBMEI7QUFDeEJBLHNCQUFJLENBQUpBO0FBQ0FBLHNCQUFJLENBQUpBO0FBQ0FBLHNCQUFJLENBQUpBO0FBQ0Q7QUFMRjtBQUZILG1CQVNPLElBQUkwUyxHQUFHLENBQUhBLHFDQUFKLEtBQUlBLENBQUosRUFBcUQ7QUFDMURqZCxtQkFBSyxHQUFHaWQsR0FBRyxDQUFIQSw4QkFBUmpkLEtBQVFpZCxDQUFSamQ7QUFyQmlDLGNBd0JuQzs7O0FBQ0FBLGlCQUFLLEdBQUdzZDtBQUFBQTtBQUFBQSxlQUFjLEtBQWRBLEVBekIyQixRQXlCM0JBLENBQVJ0ZCxDQXpCbUMsQ0EwQm5DO0FBQ0E7O0FBRUEsZ0JBQUksQ0FBSixZQUFpQjtBQUNmO0FBQ0E7QUFDQTtBQUFDLGdEQUFrQyxnQkFBUTtBQUN6QyxvQkFBSXVLLElBQUksWUFBUixNQUEwQjtBQUN4QkEsc0JBQUksQ0FBSkE7QUFDQUEsc0JBQUksQ0FBSkE7QUFDQUEsc0JBQUksQ0FBSkE7QUFDQUEsc0JBQUksQ0FBSkE7QUFDRDtBQU5GO0FBUUY7O0FBRUQsZ0JBQUl6RSxJQUFJLEtBQUs0VCxNQUFNLENBQW5CLGFBQWlDO0FBQy9CMkQsb0JBQU0sR0FBR2hDLE1BQU0sR0FBTkEsbUJBQTRCQSxNQUFNLEdBQU5BLFNBQXJDZ0M7QUFERixtQkFFTyxJQUFJdlgsSUFBSSxLQUFLNFQsTUFBTSxDQUFuQixpQkFBcUM7QUFDMUMyRCxvQkFBTSxHQUFHLEVBQUVoQyxNQUFNLEdBQU5BLG1CQUE0QkEsTUFBTSxHQUFOQSxTQUF2Q2dDLEtBQVMsQ0FBVEE7QUFESyxtQkFFQSxJQUFJdlgsSUFBSSxLQUFLNFQsTUFBTSxDQUFuQixlQUFtQztBQUN4QzJELG9CQUFNLEdBQUdoQyxNQUFNLEdBQWZnQztBQURLLG1CQUVBLElBQUl2WCxJQUFJLEtBQUs0VCxNQUFNLENBQW5CLFlBQWdDO0FBQ3JDMkQsb0JBQU0sR0FBR2hDLE1BQU0sR0FBZmdDO0FBREssbUJBRUEsSUFBSXZYLElBQUksS0FBSzRULE1BQU0sQ0FBZjVULGVBQUosVUFBNkM7QUFDbEQsb0NBQXNCO0FBQ3BCdVgsc0JBQU0sR0FDSCxDQUFDaEMsTUFBTSxHQUFOQSxTQUNDQSxNQUFNLEdBQU5BLG1CQUE0QkEsTUFBTSxHQUFOQSxTQUQ5QixVQUVDQyxRQUFRLEdBRlYsS0FBQyxJQUdBQSxRQUFRLEdBQVJBLG1CQUE4QkEsUUFBUSxHQUFSQSxTQUpqQytCO0FBREYscUJBTU87QUFDTEEsc0JBQU0sR0FBR2hDLE1BQU0sR0FBTkEsU0FBa0JDLFFBQVEsR0FBbkMrQjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozt1REFFK0IvUCxDLEVBQUc7QUFDOUIsZ0JBQU1sTixNQUFNLEdBQUdrTixDQUFDLENBQWhCOztBQUVBLGdCQUFJbE4sTUFBTSxDQUFOQSxhQUFKLFVBQWtDO0FBQ2hDLGtCQUFJQSxNQUFNLENBQU5BLG1CQUFKLE9BQUlBLENBQUosRUFBd0M7QUFDdEM7O0FBQ0E7QUFGRixxQkFHTyxJQUFJQSxNQUFNLENBQU5BLG1CQUFKLE9BQUlBLENBQUosRUFBd0M7QUFDN0M7QUFESyxxQkFFQSxJQUFJQSxNQUFNLENBQU5BLG1CQUFKLE9BQUlBLENBQUosRUFBd0M7QUFDN0M7QUFDRDtBQUNGO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs0REFFb0NzYSxLLEVBQU82QyxtQixFQUFxQjtBQUM1RDs7QUFDQSxnQkFBSSxVQUFKLHFCQUFtQztBQUNqQztBQUNEO0FBQ0Y7Ozs7UUEvVzBCemU7QUFBQUE7QUFBQUEsTyxtRUE0QjFCeU87QUFBQUE7QUFBQUEsTyw0SUFvRUFBO0FBQUFBO0FBQUFBLE8sb0tBa1BBQztBQUFBQTtBQUFBQSxPLDhMQXVCQUE7QUFBQUE7QUFBQUEsTztBQVNZaU07O0FBQUFBLGlDQUFmLGNBQWVBOzs7Ozs7OztBQzMxQmY7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDZSw4Q0FBd0M7QUFDckQsWUFBSStELEdBQUcsR0FBR0MsaUJBQWlCLENBQTNCLFFBQTJCLENBQTNCO0FBQ0EsZUFBT0QsR0FBRyxDQUFIQSxnQkFBb0JFLFdBQVcsTUFBL0JGLElBQStCLENBQS9CQSxHQUE2Q0csV0FBVyxNQUEvRCxJQUErRCxDQUEvRDtBQUNEOztBQUVELFVBQUlDLFNBQVMsR0FBRztBQUNkQyxZQUFJLEVBRFU7QUFFZEMsYUFBSyxFQUZTO0FBR2RDLFdBQUcsRUFIVztBQUlkQyxZQUFJLEVBSlU7QUFLZEMsY0FBTSxFQUxRO0FBTWRDLGNBQU0sRUFBRTtBQU5NLE9BQWhCOztBQVNBLHNDQUFnQztBQUM5QixZQUFJQyxTQUFTLEdBQUdYLEdBQUcsQ0FBSEEsY0FBaEIsSUFBZ0JBLENBQWhCO0FBQ0EsWUFBSVksTUFBTSxHQUFWOztBQUNBLGFBQUssSUFBSXplLENBQUMsR0FBVixHQUFnQkEsQ0FBQyxHQUFHd2UsU0FBUyxDQUE3QixRQUFzQ3hlLENBQXRDLElBQTJDO0FBQ3pDLGNBQUkwZSxHQUFHLEdBQUdULFNBQVMsQ0FBQ08sU0FBUyxDQUFUQSxDQUFTLENBQVRBLENBQXBCLElBQW1CLENBQW5COztBQUVBLGNBQUlFLEdBQUcsSUFBUCxHQUFjO0FBQ1pELGtCQUFNLENBQU5BLEdBQU0sQ0FBTkEsR0FBYzdTLFFBQVEsQ0FBQzRTLFNBQVMsQ0FBVEEsQ0FBUyxDQUFUQSxDQUFELE9BQXRCQyxFQUFzQixDQUF0QkE7QUFDRDtBQUNGOztBQUNEO0FBQ0Q7O0FBRUQsc0NBQWdDO0FBQzlCLFlBQUlELFNBQVMsR0FBR1gsR0FBRyxDQUFIQSxnQ0FBaEIsRUFBZ0JBLENBQWhCO0FBQ0EsWUFBSWMsTUFBTSxHQUFHLCtDQUZpQixTQUVqQixDQUFiLENBRjhCLENBRzlCO0FBQ0E7O0FBQ0EsZUFBTyxDQUFDQSxNQUFNLENBQVAsQ0FBTyxDQUFQLEVBQVlBLE1BQU0sQ0FBbEIsQ0FBa0IsQ0FBbEIsRUFBdUJBLE1BQU0sQ0FBN0IsQ0FBNkIsQ0FBN0IsRUFBa0NBLE1BQU0sQ0FBeEMsQ0FBd0MsQ0FBeEMsRUFBNkNBLE1BQU0sQ0FBbkQsQ0FBbUQsQ0FBbkQsRUFBd0RBLE1BQU0sQ0FBckUsQ0FBcUUsQ0FBOUQsQ0FBUDtRQUdGO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSUMsUUFBUSxHQUFaOztBQUNBLDJDQUFxQztBQUNuQyxZQUFJLENBQUNBLFFBQVEsQ0FBYixRQUFhLENBQWIsRUFBeUI7QUFDdkI7QUFDQSxjQUFJQyxpQkFBaUIsR0FBRyxJQUFJeEIsSUFBSSxDQUFSLHdCQUFpQztBQUN2RHlCLGtCQUFNLEVBRGlEO0FBRXZEQyxvQkFBUSxFQUYrQztBQUd2RGIsZ0JBQUksRUFIbUQ7QUFJdkRDLGlCQUFLLEVBSmtEO0FBS3ZEQyxlQUFHLEVBTG9EO0FBTXZEQyxnQkFBSSxFQU5tRDtBQU92REMsa0JBQU0sRUFQaUQ7QUFRdkRDLGtCQUFNLEVBQUU7QUFSK0MsV0FBakMsU0FTZCxTQVRWLDBCQVNVLENBVGMsQ0FBeEI7QUFVQSxjQUFJUyxrQkFBa0IsR0FDcEJILGlCQUFpQixLQUFqQkEsMEJBQ0FBLGlCQUFpQixLQUZuQjtBQUlBRCxrQkFBUSxDQUFSQSxRQUFRLENBQVJBLEdBQXFCSSxrQkFBa0IsR0FDbkMsSUFBSTNCLElBQUksQ0FBUix3QkFBaUM7QUFDL0J5QixrQkFBTSxFQUR5QjtBQUUvQkMsb0JBQVEsRUFGdUI7QUFHL0JiLGdCQUFJLEVBSDJCO0FBSS9CQyxpQkFBSyxFQUowQjtBQUsvQkMsZUFBRyxFQUw0QjtBQU0vQkMsZ0JBQUksRUFOMkI7QUFPL0JDLGtCQUFNLEVBUHlCO0FBUS9CQyxrQkFBTSxFQUFFO0FBUnVCLFdBQWpDLENBRG1DLEdBV25DLElBQUlsQixJQUFJLENBQVIsd0JBQWlDO0FBQy9CNEIscUJBQVMsRUFEc0I7QUFFL0JGLG9CQUFRLEVBRnVCO0FBRy9CYixnQkFBSSxFQUgyQjtBQUkvQkMsaUJBQUssRUFKMEI7QUFLL0JDLGVBQUcsRUFMNEI7QUFNL0JDLGdCQUFJLEVBTjJCO0FBTy9CQyxrQkFBTSxFQVB5QjtBQVEvQkMsa0JBQU0sRUFBRTtBQVJ1QixXQUFqQyxDQVhKSztBQXFCRDs7QUFDRCxlQUFPQSxRQUFRLENBQWYsUUFBZSxDQUFmOzs7Ozs7Ozs7O0FDbEZGOztBQUFBO0FBQUE7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRWUsdURBQWlEO0FBQzlETTtBQUFBQTtBQUFBQSxXQUFZLENBQVpBO0FBQ0EsWUFBSUMsTUFBTSxHQUFHQztBQUFBQTtBQUFBQSxXQUFiLFdBQWFBLENBQWI7QUFDQSxlQUFPQztBQUFBQTtBQUFBQSxXQUFlLFNBQWZBLEVBQTJCLENBQWxDLE1BQU9BLENBQVA7Ozs7Ozs7Ozs7QUM3QkY7O0FBQUE7QUFBQTs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFZSx1REFBaUQ7QUFDOURIO0FBQUFBO0FBQUFBLFdBQVksQ0FBWkE7QUFDQSxZQUFJSSxTQUFTLEdBQUd6VTtBQUFBQTtBQUFBQSxzQkFBaEIsT0FBZ0JBLEVBQWhCO0FBQ0EsWUFBSXNVLE1BQU0sR0FBR0M7QUFBQUE7QUFBQUEsV0FBYixXQUFhQSxDQUFiO0FBQ0EsZUFBTyxTQUFTRSxTQUFTLEdBQXpCLE1BQU8sQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM3QkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFZSxnQ0FBMEI7QUFDdkNKO0FBQUFBO0FBQUFBLFdBQVksQ0FBWkE7QUFDQSxZQUFJSyxNQUFNLEdBQUdsZ0IsTUFBTSxDQUFOQSx3QkFGMEIsUUFFMUJBLENBQWIsQ0FGdUMsQ0FFZ0I7O0FBRXZELFlBQUltZ0IsUUFBUSxZQUFSQSxRQUE0QixrQ0FBZ0NELE1BQU0sS0FBdEUsaUJBQTRGO0FBQzFGO0FBQ0EsaUJBQU8sU0FBU0MsUUFBUSxDQUF4QixPQUFnQkEsRUFBVCxDQUFQO0FBRkYsZUFHTyxJQUFJLGdDQUFnQ0QsTUFBTSxLQUExQyxtQkFBa0U7QUFDdkUsaUJBQU8sU0FBUCxRQUFPLENBQVA7QUFESyxlQUVBO0FBQ0wsY0FBSSxDQUFDLGdDQUFnQ0EsTUFBTSxLQUF2QyxzQkFBa0UsbUJBQXRFLGFBQXNHO0FBQ3BHO0FBQ0F0WixtQkFBTyxDQUFQQSxLQUZvRyxrSkFFcEdBLEVBRm9HLENBRThEOztBQUVsS0EsbUJBQU8sQ0FBUEEsS0FBYSxZQUFiQTtBQUNEOztBQUVELGlCQUFPLFNBQVAsR0FBTyxDQUFQO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUNILFVBQUlpRixvQkFBb0IsR0FBeEI7QUFDQSxVQUFJQyxzQkFBc0IsR0FBMUI7QUFDQSxVQUFJc1UseUJBQXlCLEdBQTdCO0FBRUEsVUFBSXJVLFFBQVEsR0FBRztBQUNic1UseUJBQWlCLEVBREo7QUFFYkMsaUJBQVMsRUFGSTtBQUdiQyx5QkFBaUIsRUFISjtBQUtiO0FBQ0FDLFVBQUUsRUFOVztBQU9iQyxXQUFHLEVBQUUsa0JBQ2M7QUFEZCx5QkFFYztBQUZkLHdCQUdhO0FBSGIsU0FQUTtBQVliQyxZQUFJLEVBWlM7QUFhYkMsYUFBSyxFQUFFLGlCQUNXO0FBRFgsd0JBRVc7QUFGWCx1QkFHVTtBQUhWLFNBYk07QUFtQmI7QUFDQUMsVUFBRSxFQXBCVztBQXFCYkMsV0FBRyxFQXJCVTtBQXNCYkMsWUFBSSxFQXRCUztBQXVCYkMsV0FBRyxFQXZCVTtBQXdCYkMsWUFBSSxFQXhCUztBQTBCYkMsVUFBRSxFQTFCVztBQTJCYkMsWUFBSSxFQTNCUztBQTRCYkMsY0FBTSxFQTVCTztBQThCYjtBQUNBblYsZ0JBQVEsRUFBRTtBQS9CRyxPQUFmO0FBa0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ2UsOENBQXdDO0FBQ3JELFlBQUl5SyxTQUFTLENBQVRBLFNBQUosR0FBMEI7QUFDeEIsZ0JBQU0sY0FDSixtQ0FBbUNBLFNBQVMsQ0FBNUMsU0FERixVQUFNLENBQU47QUFHRDs7QUFFRCxZQUFJMEosUUFBUSxLQUFaLE1BQXVCO0FBQ3JCLGlCQUFPLFNBQVAsR0FBTyxDQUFQO0FBQ0Q7O0FBRUQsWUFBSXZSLE9BQU8sR0FBR3dTLFlBQVksSUFBMUI7QUFFQSxZQUFJQyxnQkFBZ0IsR0FDbEJ6UyxPQUFPLENBQVBBLHVEQUVJbVI7QUFBQUE7QUFBQUEsV0FBVW5SLE9BQU8sQ0FIdkIsZ0JBR01tUixDQUhOOztBQUlBLFlBQ0VzQixnQkFBZ0IsS0FBaEJBLEtBQ0FBLGdCQUFnQixLQURoQkEsS0FFQUEsZ0JBQWdCLEtBSGxCLEdBSUU7QUFDQSxnQkFBTSxlQUFOLG9DQUFNLENBQU47QUF0Qm1ELFVBeUJyRDs7O0FBQ0EsWUFDRWxCLFFBQVEsWUFBUkEsUUFDQyxrQ0FDQ25nQixNQUFNLENBQU5BLHNDQUhKLGlCQUlFO0FBQ0E7QUFDQSxpQkFBTyxTQUFTbWdCLFFBQVEsQ0FBeEIsT0FBZ0JBLEVBQVQsQ0FBUDtBQU5GLGVBT08sSUFDTCxnQ0FDQW5nQixNQUFNLENBQU5BLHNDQUZLLG1CQUdMO0FBQ0EsaUJBQU8sU0FBUCxRQUFPLENBQVA7QUFKSyxlQUtBLElBQ0wsRUFDRSxnQ0FDQUEsTUFBTSxDQUFOQSxzQ0FIRyxpQkFDTCxDQURLLEVBS0w7QUFDQSxpQkFBTyxTQUFQLEdBQU8sQ0FBUDtBQUNEOztBQUVELFlBQUlzaEIsV0FBVyxHQUFHQyxlQUFlLENBQWpDLFFBQWlDLENBQWpDO0FBRUEsWUFBSUMsZUFBZSxHQUFHQyxTQUFTLENBQUNILFdBQVcsQ0FBWixNQUEvQixnQkFBK0IsQ0FBL0I7QUFDQSxZQUFJekMsSUFBSSxHQUFHMkMsZUFBZSxDQUExQjtBQUNBLFlBQUlFLGNBQWMsR0FBR0YsZUFBZSxDQUFwQztBQUVBLFlBQUlqVyxJQUFJLEdBQUdvVyxTQUFTLGlCQUFwQixJQUFvQixDQUFwQjs7QUFFQSxZQUFJOVosS0FBSyxDQUFULElBQVMsQ0FBVCxFQUFpQjtBQUNmLGlCQUFPLFNBQVAsR0FBTyxDQUFQO0FBQ0Q7O0FBRUQsa0JBQVU7QUFDUixjQUFJb1ksU0FBUyxHQUFHMVUsSUFBSSxDQUFwQixPQUFnQkEsRUFBaEI7QUFDQSxjQUFJcVcsSUFBSSxHQUFSO0FBQ0E7O0FBRUEsY0FBSU4sV0FBVyxDQUFmLE1BQXNCO0FBQ3BCTSxnQkFBSSxHQUFHQyxTQUFTLENBQUNQLFdBQVcsQ0FBNUJNLElBQWdCLENBQWhCQTs7QUFFQSxnQkFBSS9aLEtBQUssQ0FBVCxJQUFTLENBQVQsRUFBaUI7QUFDZixxQkFBTyxTQUFQLEdBQU8sQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsY0FBSXlaLFdBQVcsQ0FBWEEsWUFBd0IxUyxPQUFPLENBQW5DLFVBQThDO0FBQzVDb0Ysa0JBQU0sR0FBR3JJO0FBQUFBO0FBQUFBLGVBQ1AyVixXQUFXLENBQVhBLFlBQXdCMVMsT0FBTyxDQURULFFBQWZqRCxFQUVQLFNBQVNzVSxTQUFTLEdBRnBCak0sSUFFRSxDQUZPckksQ0FBVHFJOztBQUlBLGdCQUFJbk0sS0FBSyxDQUFULE1BQVMsQ0FBVCxFQUFtQjtBQUNqQixxQkFBTyxTQUFQLEdBQU8sQ0FBUDtBQUNEOztBQUNEbU0sa0JBQU0sR0FBR3JJO0FBQUFBO0FBQUFBLGVBQ1AyVixXQUFXLENBQVhBLFlBQXdCMVMsT0FBTyxDQURULFFBQWZqRCxFQUVQLFNBQVNzVSxTQUFTLEdBQVRBLE9BRlhqTSxNQUVFLENBRk9ySSxDQUFUcUk7O0FBSUEsZ0JBQUluTSxLQUFLLENBQVQsTUFBUyxDQUFULEVBQW1CO0FBQ2pCLHFCQUFPLFNBQVAsR0FBTyxDQUFQO0FBQ0Q7QUFkSCxpQkFlTztBQUNMO0FBQ0FtTSxrQkFBTSxHQUFHOE47QUFBQUE7QUFBQUEsZUFBZ0MsU0FBUzdCLFNBQVMsR0FBM0RqTSxJQUF5QyxDQUFoQzhOLENBQVQ5TjtBQUNBQSxrQkFBTSxHQUFHOE47QUFBQUE7QUFBQUEsZUFDUCxTQUFTN0IsU0FBUyxHQUFUQSxPQURYak0sTUFDRSxDQURPOE4sQ0FBVDlOO0FBR0Q7O0FBRUQsaUJBQU8sU0FBU2lNLFNBQVMsR0FBVEEsT0FBaEIsTUFBTyxDQUFQO0FBcENGLGVBcUNPO0FBQ0wsaUJBQU8sU0FBUCxHQUFPLENBQVA7QUFDRDtBQUNGOztBQUVELDJDQUFxQztBQUNuQyxZQUFJcUIsV0FBVyxHQUFmO0FBQ0EsWUFBSXJXLEtBQUssR0FBRzhXLFVBQVUsQ0FBVkEsTUFBaUJoVyxRQUFRLENBQXJDLGlCQUFZZ1csQ0FBWjtBQUNBOztBQUVBLFlBQUloVyxRQUFRLENBQVJBLGVBQXdCZCxLQUFLLENBQWpDLENBQWlDLENBQTdCYyxDQUFKLEVBQXVDO0FBQ3JDdVYscUJBQVcsQ0FBWEE7QUFDQVUsb0JBQVUsR0FBRy9XLEtBQUssQ0FBbEIrVyxDQUFrQixDQUFsQkE7QUFGRixlQUdPO0FBQ0xWLHFCQUFXLENBQVhBLE9BQW1CclcsS0FBSyxDQUF4QnFXLENBQXdCLENBQXhCQTtBQUNBVSxvQkFBVSxHQUFHL1csS0FBSyxDQUFsQitXLENBQWtCLENBQWxCQTtBQUNBVixxQkFBVyxDQUFYQSxXQUF1QnJXLEtBQUssQ0FBNUJxVyxDQUE0QixDQUE1QkE7O0FBQ0EsY0FBSXZWLFFBQVEsQ0FBUkEsdUJBQWdDdVYsV0FBVyxDQUEvQyxJQUFJdlYsQ0FBSixFQUF1RDtBQUNyRHVWLHVCQUFXLENBQVhBLE9BQW1CUyxVQUFVLENBQVZBLE1BQWlCaFcsUUFBUSxDQUF6QmdXLG1CQUFuQlQsQ0FBbUJTLENBQW5CVDtBQUNBVSxzQkFBVSxHQUFHRCxVQUFVLENBQVZBLE9BQWtCVCxXQUFXLENBQVhBLEtBQWxCUyxRQUEyQ0EsVUFBVSxDQUFsRUMsTUFBYUQsQ0FBYkM7QUFDRDtBQUNGOztBQUVELHdCQUFnQjtBQUNkLGNBQUkzVixLQUFLLEdBQUdOLFFBQVEsQ0FBUkEsY0FBWixVQUFZQSxDQUFaOztBQUNBLHFCQUFXO0FBQ1R1Vix1QkFBVyxDQUFYQSxPQUFtQlUsVUFBVSxDQUFWQSxRQUFtQjNWLEtBQUssQ0FBeEIyVixDQUF3QixDQUF4QkEsRUFBbkJWLEVBQW1CVSxDQUFuQlY7QUFDQUEsdUJBQVcsQ0FBWEEsV0FBdUJqVixLQUFLLENBQTVCaVYsQ0FBNEIsQ0FBNUJBO0FBRkYsaUJBR087QUFDTEEsdUJBQVcsQ0FBWEE7QUFDRDtBQUNGOztBQUVEO0FBQ0Q7O0FBRUQsdURBQWlEO0FBQy9DLFlBQUlXLFVBQVUsR0FBR2xXLFFBQVEsQ0FBUkEsSUFBakIsZ0JBQWlCQSxDQUFqQjtBQUNBLFlBQUltVyxZQUFZLEdBQUduVyxRQUFRLENBQVJBLE1BQW5CLGdCQUFtQkEsQ0FBbkI7QUFFQSxZQUorQyxLQUkvQyxDQUorQyxDQU0vQzs7QUFDQU0sYUFBSyxHQUFHTixRQUFRLENBQVJBLHlCQUFrQ21XLFlBQVksQ0FBWkEsS0FBMUM3VixVQUEwQzZWLENBQTFDN1Y7O0FBQ0EsbUJBQVc7QUFDVCxjQUFJOFYsVUFBVSxHQUFHOVYsS0FBSyxDQUF0QixDQUFzQixDQUF0QjtBQUNBLGlCQUFPO0FBQ0x3UyxnQkFBSSxFQUFFdFMsUUFBUSxhQURULEVBQ1MsQ0FEVDtBQUVMbVYsMEJBQWMsRUFBRUssVUFBVSxDQUFWQSxNQUFpQkksVUFBVSxDQUEzQko7QUFGWCxXQUFQO0FBVjZDLFVBZ0IvQzs7O0FBQ0ExVixhQUFLLEdBQUdOLFFBQVEsQ0FBUkEsdUJBQWdDa1csVUFBVSxDQUFWQSxLQUF4QzVWLFVBQXdDNFYsQ0FBeEM1Vjs7QUFDQSxtQkFBVztBQUNULGNBQUkrVixhQUFhLEdBQUcvVixLQUFLLENBQXpCLENBQXlCLENBQXpCO0FBQ0EsaUJBQU87QUFDTHdTLGdCQUFJLEVBQUV0UyxRQUFRLGdCQUFSQSxFQUFRLENBQVJBLEdBREQ7QUFFTG1WLDBCQUFjLEVBQUVLLFVBQVUsQ0FBVkEsTUFBaUJLLGFBQWEsQ0FBOUJMO0FBRlgsV0FBUDtBQXBCNkMsVUEwQi9DOzs7QUFDQSxlQUFPO0FBQ0xsRCxjQUFJLEVBQUU7QUFERCxTQUFQO0FBR0Q7O0FBRUQsMkNBQXFDO0FBQ25DO0FBQ0EsWUFBSUEsSUFBSSxLQUFSLE1BQW1CO0FBQ2pCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsWUFUbUMsSUFTbkMsQ0FUbUMsQ0FXbkM7O0FBQ0EsWUFBSWtELFVBQVUsQ0FBVkEsV0FBSixHQUE2QjtBQUMzQnhXLGNBQUksR0FBRyxTQUFQQSxDQUFPLENBQVBBO0FBQ0FBLGNBQUksQ0FBSkE7QUFDQTtBQWZpQyxVQWtCbkM7OztBQUNBYyxhQUFLLEdBQUdOLFFBQVEsQ0FBUkEsUUFBUk0sVUFBUU4sQ0FBUk07O0FBQ0EsbUJBQVc7QUFDVGQsY0FBSSxHQUFHLFNBQVBBLENBQU8sQ0FBUEE7QUFDQXVULGVBQUssR0FBR3ZTLFFBQVEsQ0FBQ0YsS0FBSyxDQUFOLENBQU0sQ0FBTixFQUFSRSxFQUFRLENBQVJBLEdBQVJ1Uzs7QUFFQSxjQUFJLENBQUN1RCxZQUFZLE9BQWpCLEtBQWlCLENBQWpCLEVBQWdDO0FBQzlCLG1CQUFPLFNBQVAsR0FBTyxDQUFQO0FBQ0Q7O0FBRUQ5VyxjQUFJLENBQUpBO0FBQ0E7QUE3QmlDLFVBZ0NuQzs7O0FBQ0FjLGFBQUssR0FBR04sUUFBUSxDQUFSQSxTQUFSTSxVQUFRTixDQUFSTTs7QUFDQSxtQkFBVztBQUNUZCxjQUFJLEdBQUcsU0FBUEEsQ0FBTyxDQUFQQTtBQUNBLGNBQUkrVyxTQUFTLEdBQUcvVixRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBeEIsRUFBd0IsQ0FBeEI7O0FBRUEsY0FBSSxDQUFDa1cscUJBQXFCLE9BQTFCLFNBQTBCLENBQTFCLEVBQTZDO0FBQzNDLG1CQUFPLFNBQVAsR0FBTyxDQUFQO0FBQ0Q7O0FBRURoWCxjQUFJLENBQUpBO0FBQ0E7QUEzQ2lDLFVBOENuQzs7O0FBQ0FjLGFBQUssR0FBR04sUUFBUSxDQUFSQSxVQUFSTSxVQUFRTixDQUFSTTs7QUFDQSxtQkFBVztBQUNUZCxjQUFJLEdBQUcsU0FBUEEsQ0FBTyxDQUFQQTtBQUNBdVQsZUFBSyxHQUFHdlMsUUFBUSxDQUFDRixLQUFLLENBQU4sQ0FBTSxDQUFOLEVBQVJFLEVBQVEsQ0FBUkEsR0FBUnVTO0FBQ0EsY0FBSUMsR0FBRyxHQUFHeFMsUUFBUSxDQUFDRixLQUFLLENBQU4sQ0FBTSxDQUFOLEVBQWxCLEVBQWtCLENBQWxCOztBQUVBLGNBQUksQ0FBQ2dXLFlBQVksY0FBakIsR0FBaUIsQ0FBakIsRUFBcUM7QUFDbkMsbUJBQU8sU0FBUCxHQUFPLENBQVA7QUFDRDs7QUFFRDlXLGNBQUksQ0FBSkE7QUFDQTtBQTFEaUMsVUE2RG5DOzs7QUFDQWMsYUFBSyxHQUFHTixRQUFRLENBQVJBLFNBQVJNLFVBQVFOLENBQVJNOztBQUNBLG1CQUFXO0FBQ1RtVyxjQUFJLEdBQUdqVyxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBUkUsRUFBUSxDQUFSQSxHQUFQaVc7O0FBRUEsY0FBSSxDQUFDQyxnQkFBZ0IsT0FBckIsSUFBcUIsQ0FBckIsRUFBbUM7QUFDakMsbUJBQU8sU0FBUCxHQUFPLENBQVA7QUFDRDs7QUFFRCxpQkFBT0MsZ0JBQWdCLE9BQXZCLElBQXVCLENBQXZCO0FBdEVpQyxVQXlFbkM7OztBQUNBclcsYUFBSyxHQUFHTixRQUFRLENBQVJBLFVBQVJNLFVBQVFOLENBQVJNOztBQUNBLG1CQUFXO0FBQ1RtVyxjQUFJLEdBQUdqVyxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBUkUsRUFBUSxDQUFSQSxHQUFQaVc7QUFDQSxjQUFJRyxTQUFTLEdBQUdwVyxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBUkUsRUFBUSxDQUFSQSxHQUFoQjs7QUFFQSxjQUFJLENBQUNrVyxnQkFBZ0IsYUFBckIsU0FBcUIsQ0FBckIsRUFBOEM7QUFDNUMsbUJBQU8sU0FBUCxHQUFPLENBQVA7QUFDRDs7QUFFRCxpQkFBT0MsZ0JBQWdCLGFBQXZCLFNBQXVCLENBQXZCO0FBbkZpQyxVQXNGbkM7OztBQUNBO0FBQ0Q7O0FBRUQscUNBQStCO0FBQzdCO0FBQ0E7QUFDQSxZQUg2QixPQUc3QixDQUg2QixDQUs3Qjs7QUFDQXJXLGFBQUssR0FBR04sUUFBUSxDQUFSQSxRQUFSTSxVQUFRTixDQUFSTTs7QUFDQSxtQkFBVztBQUNUQyxlQUFLLEdBQUdzVyxVQUFVLENBQUN2VyxLQUFLLENBQUxBLENBQUssQ0FBTEEsY0FBbkJDLEdBQW1CRCxDQUFELENBQWxCQzs7QUFFQSxjQUFJLENBQUN1VyxZQUFZLENBQWpCLEtBQWlCLENBQWpCLEVBQTBCO0FBQ3hCO0FBQ0Q7O0FBRUQsaUJBQVF2VyxLQUFLLEdBQU4sRUFBQ0EsR0FBUjtBQWQyQixVQWlCN0I7OztBQUNBRCxhQUFLLEdBQUdOLFFBQVEsQ0FBUkEsVUFBUk0sVUFBUU4sQ0FBUk07O0FBQ0EsbUJBQVc7QUFDVEMsZUFBSyxHQUFHQyxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBaEJDLEVBQWdCLENBQWhCQTtBQUNBSSxpQkFBTyxHQUFHa1csVUFBVSxDQUFDdlcsS0FBSyxDQUFMQSxDQUFLLENBQUxBLGNBQXJCSyxHQUFxQkwsQ0FBRCxDQUFwQks7O0FBRUEsY0FBSSxDQUFDbVcsWUFBWSxRQUFqQixPQUFpQixDQUFqQixFQUFtQztBQUNqQztBQUNEOztBQUVELGlCQUNHdlcsS0FBSyxHQUFOLEVBQUNBLEdBQUQsb0JBQUNBLEdBQXFDSSxPQUFPLEdBRC9DO0FBM0IyQixVQWdDN0I7OztBQUNBTCxhQUFLLEdBQUdOLFFBQVEsQ0FBUkEsWUFBUk0sVUFBUU4sQ0FBUk07O0FBQ0EsbUJBQVc7QUFDVEMsZUFBSyxHQUFHQyxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBaEJDLEVBQWdCLENBQWhCQTtBQUNBSSxpQkFBTyxHQUFHSCxRQUFRLENBQUNGLEtBQUssQ0FBTixDQUFNLENBQU4sRUFBbEJLLEVBQWtCLENBQWxCQTtBQUNBLGNBQUlvVyxPQUFPLEdBQUdGLFVBQVUsQ0FBQ3ZXLEtBQUssQ0FBTEEsQ0FBSyxDQUFMQSxjQUF6QixHQUF5QkEsQ0FBRCxDQUF4Qjs7QUFFQSxjQUFJLENBQUN3VyxZQUFZLGlCQUFqQixPQUFpQixDQUFqQixFQUE0QztBQUMxQztBQUNEOztBQUVELGlCQUNHdlcsS0FBSyxHQUFOLEVBQUNBLEdBQUQsb0JBQUNBLEdBQ0RJLE9BQU8sR0FEUCxzQkFBQ0osR0FFRHdXLE9BQU8sR0FIVDtBQTNDMkIsVUFrRDdCOzs7QUFDQTtBQUNEOztBQUVELHdEQUFrRDtBQUNoRE4sWUFBSSxHQUFHQSxJQUFJLElBQVhBO0FBQ0F6RCxXQUFHLEdBQUdBLEdBQUcsSUFBVEE7QUFDQSxZQUFJeFQsSUFBSSxHQUFHLFNBQVgsQ0FBVyxDQUFYO0FBQ0FBLFlBQUksQ0FBSkE7QUFDQSxZQUFJd1gsa0JBQWtCLEdBQUd4WCxJQUFJLENBQUpBLGVBQXpCO0FBQ0EsWUFBSXlYLElBQUksR0FBR1IsSUFBSSxHQUFKQSxjQUFYO0FBQ0FqWCxZQUFJLENBQUpBLFdBQWdCQSxJQUFJLENBQUpBLGVBQWhCQTtBQUNBO1FBR0Y7OztBQUVBLFVBQUkwWCxhQUFhLEdBQUcsNkNBQXBCLEVBQW9CLENBQXBCO0FBQ0EsVUFBSUMsdUJBQXVCLEdBQUcsNkNBQTlCLEVBQThCLENBQTlCOztBQUVBLHFDQUErQjtBQUM3QixlQUFPckUsSUFBSSxHQUFKQSxhQUFxQkEsSUFBSSxHQUFKQSxXQUFrQkEsSUFBSSxHQUFKQSxRQUE5QztBQUNEOztBQUVELCtDQUF5QztBQUN2QyxZQUFJQyxLQUFLLEdBQUxBLEtBQWFBLEtBQUssR0FBdEIsSUFBNkI7QUFDM0I7QUFDRDs7QUFFRCxZQUFJdlQsSUFBSSxJQUFSLE1BQWtCO0FBQ2hCLGNBQUlBLElBQUksR0FBUixHQUFjO0FBQ1o7QUFDRDs7QUFFRCxjQUFJNFgsVUFBVSxHQUFHQyxlQUFlLENBQWhDLElBQWdDLENBQWhDOztBQUNBLGNBQUlELFVBQVUsSUFBSTVYLElBQUksR0FBRzJYLHVCQUF1QixDQUFoRCxLQUFnRCxDQUFoRCxFQUF5RDtBQUN2RDtBQUNEOztBQUNELGNBQUksZUFBZTNYLElBQUksR0FBRzBYLGFBQWEsQ0FBdkMsS0FBdUMsQ0FBdkMsRUFBZ0Q7QUFDOUM7QUFDRDtBQUNGOztBQUVEO0FBQ0Q7O0FBRUQsc0RBQWdEO0FBQzlDLFlBQUlYLFNBQVMsR0FBYixHQUFtQjtBQUNqQjtBQUNEOztBQUVELFlBQUlhLFVBQVUsR0FBR0MsZUFBZSxDQUFoQyxJQUFnQyxDQUFoQzs7QUFDQSxZQUFJRCxVQUFVLElBQUliLFNBQVMsR0FBM0IsS0FBbUM7QUFDakM7QUFDRDs7QUFDRCxZQUFJLGVBQWVBLFNBQVMsR0FBNUIsS0FBb0M7QUFDbEM7QUFDRDs7QUFFRDtBQUNEOztBQUVELGlEQUEyQztBQUN6QyxZQUFJRSxJQUFJLEdBQUpBLEtBQVlBLElBQUksR0FBcEIsSUFBMkI7QUFDekI7QUFDRDs7QUFFRCxZQUFJekQsR0FBRyxJQUFIQSxTQUFnQkEsR0FBRyxHQUFIQSxLQUFXQSxHQUFHLEdBQWxDLENBQUlBLENBQUosRUFBeUM7QUFDdkM7QUFDRDs7QUFFRDtBQUNEOztBQUVELHFEQUErQztBQUM3QyxZQUFJelMsS0FBSyxJQUFMQSxTQUFrQkEsS0FBSyxHQUFMQSxLQUFhQSxLQUFLLElBQXhDLEVBQUlBLENBQUosRUFBaUQ7QUFDL0M7QUFDRDs7QUFFRCxZQUFJSSxPQUFPLElBQVBBLFNBQW9CQSxPQUFPLEdBQVBBLEtBQWVBLE9BQU8sSUFBOUMsRUFBSUEsQ0FBSixFQUF1RDtBQUNyRDtBQUNEOztBQUVELFlBQUlvVyxPQUFPLElBQVBBLFNBQW9CQSxPQUFPLEdBQVBBLEtBQWVBLE9BQU8sSUFBOUMsRUFBSUEsQ0FBSixFQUF1RDtBQUNyRDtBQUNEOztBQUVEOzs7Ozs7Ozs7O0FDMWRGOztBQUFBO0FBQUEsVUFBSWhYLHNCQUFzQixHQUExQjs7QUFFQSw2Q0FBdUM7QUFDckMsZUFBT1AsSUFBSSxDQUFKQSxZQUFQO0FBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHZSwwREFBb0Q7QUFDakUsWUFBSUEsSUFBSSxHQUFHLFNBQVM4WCxTQUFTLENBQTdCLE9BQW9CQSxFQUFULENBQVg7QUFDQSxZQUFJQyxrQkFBa0IsR0FBR3hiLElBQUksQ0FBSkEsS0FBVXlELElBQUksQ0FBdkMsaUJBQW1DQSxFQUFWekQsQ0FBekI7QUFDQXlELFlBQUksQ0FBSkE7QUFDQSxZQUFJZ1ksb0JBQW9CLEdBQUdELGtCQUFrQixHQUE3QztBQUNBLFlBQUlFLGdDQUFnQyxHQUFHRCxvQkFBb0IsR0FBRyxDQUFDelgsc0JBQXNCLEdBQUcyWCx1QkFBdUIsQ0FBakQsSUFBaUQsQ0FBakQsSUFBSCx5QkFBdUZBLHVCQUF1QixDQUF6SyxJQUF5SyxDQUF6SztBQUNBLGVBQU9ILGtCQUFrQixHQUFsQkEseUJBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hCRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFVBQU10VyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxhQUFVO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTs7QUFBQTtBQUFBOztBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOztBQVMxQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFkOEIsOENBZVI7QUFDaEIsc0NBQXdCLHlCQUF4Qjs7QUFDQTtBQUNEO0FBRUQ7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUEzQjhCO0FBQUE7QUFBQSwrQ0E0QlA7QUFDakIsc0NBQXdCLHlCQUF4Qjs7QUFDQSxrQkFBSSxDQUFKLFNBQWM7QUFDWix1QkFBTyxnQkFBUCxJQUFPLENBQVA7QUFERixxQkFFTztBQUNMLHFCQUFLLElBQUwscUJBQWdDLEtBQWhDLFlBQWlEO0FBQy9DLHNCQUNFLHFEQUNBLHVDQUZGLFNBR0U7QUFDQSwyQkFBTyxnQkFBUCxJQUFPLENBQVA7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUVEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFqRDhCO0FBQUE7QUFBQSxrREFrREo7QUFDcEIsa0JBQU0wVyxRQUFRLEdBQUcseUJBQWpCO0FBQ0FBLHNCQUFRLENBQVJBLFFBQWlCLG1CQUFXO0FBQzFCQyx1QkFBTyxDQUFQQSxPQUFPLENBQVBBO0FBREZEO0FBR0Q7QUF2RHlCOztBQUFBO0FBQUE7QUFBOUI7QUEwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLDJDQUFxQztBQUNuQyxlQUFPMVcsV0FBVyxDQUFsQixVQUFrQixDQUFsQjtBQUNEO0FBRWNBOzs7QUFBQUEsMkNBQWYsV0FBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hGZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O1VBRU1DLGEsR0FETGtPO0FBQUFBO0FBQUFBLFM7Ozs7QUFFQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUdFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBR0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0UsaUNBQThCO0FBQUE7O0FBQUEsY0FBbEJ5SSxRQUFrQix1RUFBUCxLQUFPOztBQUFBOztBQUM1QjtBQUQ0QixnQkFyQjlCQyxNQXFCOEIsR0FyQnJCLElBcUJxQjtBQUFBLGdCQWQ5QkMsWUFjOEIsR0FkZixJQWNlO0FBQUEsZ0JBUDlCbkgsT0FPOEIsR0FQcEIsRUFPb0I7QUFHNUIsdUJBQVl2TyxRQUFRLENBQVJBLGNBQVosS0FBWUEsQ0FBWjtBQUNBO0FBQ0E7QUFBc0I7QUFBdEIseUpBR0l3VixRQUFRLGdDQUhaLDRIQU1RQSxRQUFRLDJCQU5oQjtBQUw0QjtBQW1CN0I7QUFFRDtBQUNGO0FBQ0E7Ozs7OytCQUdPeGhCLE0sRUFBUTtBQUNYO0FBQ0EsZ0JBQU1vYixVQUFVLEdBQUcsNkNBQW5CLElBQW1CLENBQW5CO0FBQ0EsZ0JBQU11RyxTQUFTLEdBQUcsNkNBQWxCLElBQWtCLENBQWxCO0FBQ0EsZ0JBQU1DLGFBQWEsR0FBRyxnREFBdEIsS0FBc0IsQ0FBdEI7QUFDQSxnQkFBTUMsVUFBVSxHQUFHLENBQUMsaURBQXBCLElBQW9CLENBQXBCO0FBRUEsZ0JBQUlDLFVBQVUsR0FBRywrQkFQTixNQU9NLENBQWpCLENBUFcsQ0FTWDs7QUFDQSxnQkFBSSxDQUFKLFlBQWlCO0FBQ2ZBLHdCQUFVLEdBQUdELFVBQVUsUUFBdkJDOztBQUNBLDhCQUFnQjtBQUNkQSwwQkFBVSxJQUFJSCxTQUFTLGdCQUF2Qkc7O0FBRUEsbUNBQW1CO0FBQ2pCQSw0QkFBVSxJQUFWQTtBQUNEO0FBQ0Y7QUFDRjs7QUFFREEsc0JBQVUsR0FBR0EsVUFBVSxDQXJCWixJQXFCRUEsRUFBYkEsQ0FyQlcsQ0F1Qlg7O0FBQ0EsMEJBQWNDLFNBQVMsQ0FBQyxLQUFELE1BQVk7QUFDakNDLGtCQUFJLEVBRDZCO0FBRWpDO0FBQ0E7QUFDQUMsd0JBQVUsRUFKdUI7QUFLakNDLHNCQUFRLEVBQUUsS0FMdUI7QUFNakNDLHdCQUFVLEVBQUUsS0FOcUI7QUFPakNDLHFCQUFPLEVBQUUsc0NBUHdCLElBT3hCLENBUHdCO0FBUWpDQyxxQkFBTyxFQUFFLHNDQVJ3QixJQVF4QixDQVJ3QjtBQVNqQ0MseUJBQVcsRUFBRSw4Q0FUb0IsRUFTcEIsQ0FUb0I7QUFVakNDLDJCQUFhLEVBQUUsZ0RBVmtCLENBVWxCLENBVmtCO0FBV2pDQywyQkFBYSxFQUFFLGdEQVhrQixLQVdsQixDQVhrQjtBQVlqQ0MseUJBQVcsRUFBRSxtREFab0IsS0FZcEIsQ0Fab0I7QUFhakM5RyxvQkFBTSxFQUFFLEtBYnlCLGdCQWF6QixFQWJ5QjtBQWNqQ2tHLHdCQUFVLEVBZHVCO0FBZWpDQyx3QkFBVSxFQWZ1QjtBQWdCakMxRyx3QkFBVSxFQWhCdUI7QUFpQmpDd0csMkJBQWEsRUFqQm9CO0FBa0JqQ0QsdUJBQVMsRUFBVEE7QUFsQmlDLGFBQVosQ0FBdkIsQ0F4QlcsQ0E2Q1g7O0FBQ0E7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FFWTtBQUNSO0FBQ0EscUJBQVM5VyxhQUFhLENBQXRCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O2tDQUNVak0sSyxFQUFPO0FBQ2I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztpQ0FDUztBQUNMOztBQUNBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7Ozs7a0NBQ1U7QUFDTjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O2tDQUNVO0FBQ047QUFDQSxnQkFBSSxZQUFKLFFBQXdCO0FBQ3RCO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7cUNBRWF1SyxJLEVBQU11WixNLEVBQVE7QUFDdkIsZ0JBQU1DLGlCQUFpQixHQUFHLG9DQUFvQyxLQUE5RCxPQUEwQixDQUExQjtBQUNBLGdCQUFNaEgsTUFBTSxHQUFHLGlDQUViLEtBRmEsU0FHYkMsSUFBSSxDQUFKQSw2Q0FIRixPQUFlLENBQWY7O0FBTUEsbUNBQXVCO0FBQ3JCLGtCQUFNbFgsSUFBSSxXQUFWLGlCQUFVLENBQVY7O0FBQ0Esa0JBQUlrZSxVQUFVLEdBQWQ7O0FBRUE7QUFDRTtBQUNFLHNCQUFJLEVBQUVBLFVBQVUsQ0FBVkEscUJBQU4sQ0FBSSxDQUFKLEVBQTBDO0FBQ3hDQSw4QkFBVSxHQUFHLHlCQUFiQTtBQUNEOztBQUVELHlCQUFPLHVGQU1pQi9HLEdBQUcsQ0FBSEEsTUFOeEIsUUFBTyxDQUFQOztBQVFGO0FBQ0UseUJBQU84RyxpQkFBaUIsdUJBQXVCOUcsR0FBRyxDQUFIQSxNQUEvQyxRQUF3QixDQUF4Qjs7QUFDRjtBQUNFLHdCQUFNLG1FQUM2QyxvQkFEN0MsT0FBTiw2REFBTSxFQUFOO0FBakJKO0FBSkYsbUJBeUJPO0FBQ0wsa0JBQUksV0FBWTZHLE1BQU0sSUFBSUEsTUFBTSxDQUFOQSxlQUExQixHQUFvRDtBQUNsRDtBQUNEOztBQUVELHFCQUFPN0csR0FBRyxDQUFIQSxrQ0FBUCxNQUFPQSxDQUFQO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBRWlCZ0gsYSxFQUFlO0FBQzVCLGdDQUFvQkEsYUFBYSxDQUFiQSxDQUFhLENBQWJBLElBQXBCO0FBQ0Esd0JBQVloWSxhQUFhLENBQXpCLGlCQUEyQyxLQUEzQztBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7NkNBQ3FCO0FBQ2pCLGdCQUFNOFEsTUFBTSxHQUFHQyxJQUFJLENBQUpBLDZDQUFmO0FBRUEsZ0JBQU1rSCxhQUFhLEdBQW5CO0FBQ0EsZ0JBQU1DLFlBQVksR0FBbEI7O0FBRUEsaUJBQUssSUFBSXBHLEdBQUcsR0FBWixHQUFrQkEsR0FBRyxHQUFyQixJQUE0QkEsR0FBNUIsSUFBbUM7QUFDakMsa0JBQU14VCxJQUFJLEdBQUcsZUFBZSxJQUFmLEdBQWIsR0FBYSxDQUFiO0FBRUEyWiwyQkFBYSxDQUFiQSxLQUNFLElBQUksQ0FBSix1QkFDMEI7QUFDdEJFLHVCQUFPLEVBQUU7QUFEYSxlQUQxQixhQURGRixDQUNFLENBREZBLENBS21CO0FBTG5CQTtBQVFBQywwQkFBWSxDQUFaQSxLQUNFLElBQUksQ0FBSix1QkFDMEI7QUFDdEJDLHVCQUFPLEVBQUU7QUFEYSxlQUQxQixhQURGRCxDQUNFLENBREZBLENBS21CO0FBTG5CQTtBQU9EOztBQUVELGdCQUFNRSxXQUFXLEdBQWpCO0FBQ0EsZ0JBQU1DLFVBQVUsR0FBaEI7O0FBRUEsaUJBQUssSUFBSXhHLEtBQUssR0FBZCxHQUFvQkEsS0FBSyxHQUF6QixJQUFnQ0EsS0FBaEMsSUFBeUM7QUFDdkMsa0JBQU12VCxLQUFJLEdBQUcsc0JBQWIsQ0FBYSxDQUFiOztBQUVBOFoseUJBQVcsQ0FBWEEsS0FDRSxLQUFJLENBQUosdUJBQTRCO0FBQzFCdkcscUJBQUssRUFBRTtBQURtQixlQUE1QixDQURGdUc7QUFNQUMsd0JBQVUsQ0FBVkEsS0FDRSxLQUFJLENBQUosdUJBQTRCO0FBQzFCeEcscUJBQUssRUFBRTtBQURtQixlQUE1QixDQURGd0c7QUFLRDs7QUFFRCxtQkFBTztBQUNMQyxzQkFBUSxFQUFFO0FBQ1JDLHlCQUFTLEVBREQ7QUFFUkMsd0JBQVEsRUFBRU47QUFGRixlQURMO0FBS0xPLG9CQUFNLEVBQUU7QUFDTkYseUJBQVMsRUFESDtBQUVOQyx3QkFBUSxFQUFFSDtBQUZKLGVBTEg7QUFTTEsseUJBQVcsRUFBRSw2Q0FUUixFQVNRLENBVFI7QUFVTEMsNEJBQWMsRUFBRTNILEdBQUcsQ0FBSEEsdUNBVlgsTUFVV0EsQ0FWWDtBQVdMO0FBQ0E0SCxxQkFBTyxFQUFFLHlCQUFNO0FBQUE7QUFaVjtBQWFMQyw0QkFBYyxFQWJUO0FBY0xDLDhCQUFnQixFQWRYO0FBZUxDLHlCQUFXLEVBZk47QUFnQkxDLHlCQUFXLEVBaEJOO0FBaUJMQyxrQkFBSSxFQUFFLE9BakJELElBaUJDLENBakJEO0FBa0JMQywyQkFBYSxFQWxCUjtBQW1CTEMsMkJBQWEsRUFuQlI7QUFvQkxDLDZCQUFlLEVBQUU7QUFwQlosYUFBUDtBQXNCRDs7OztRQWxTeUJ2bUI7QUFBQUE7QUFBQUEsTyxXQVFuQndtQixlLEdBQWtCLCtCLGtFQUR4QmxLO0FBQUFBO0FBQUFBLE87Ozs7Ozs7MEVBcURBN047QUFBQUE7QUFBQUEsTyw0SUFzREFBO0FBQUFBO0FBQUFBLE8sa0pBZ0RBQztBQUFBQTtBQUFBQSxPLHlKQWdEQUE7QUFBQUE7QUFBQUEsTyxzR0FuTkYyTSxLO0FBc1NjbE87OztBQUFBQSxpQ0FBZixhQUFlQTs7Ozs7OztBQ3pUZixVQUFJNUksT0FBTyxHQUFHc0ssbUJBQU8sQ0FBckIsR0FBcUIsQ0FBckI7O0FBRUEsVUFBRyxtQkFBSCxVQUFnQ3RLLE9BQU8sR0FBRyxDQUFDLENBQUNGLE9BQUQsWUFBWEUsRUFBVyxDQUFELENBQVZBO0FBRWhDO0FBQ0E7QUFJQSxVQUFJdUssT0FBTyxHQUFHO0FBQUMsZUFBTTtBQUFQLE9BQWQ7QUFFQUEsYUFBTyxDQUFQQTs7QUFDQUEsYUFBTyxDQUFQQSxhQUFxQixZQUFXO0FBQ2hCLGVBQU9DLE1BQU0sQ0FBTkEsZ0JBQVA7QUFEaEJEOztBQUlBLFVBQUlFLE1BQU0sR0FBR0gsbUJBQU8sQ0FBUEEsQ0FBTyxDQUFQQSxVQUFiLE9BQWFBLENBQWI7O0FBRUEsVUFBR3RLLE9BQU8sQ0FBVixRQUFtQkYsTUFBTSxDQUFOQSxVQUFpQkUsT0FBTyxDQUF4QkY7O0FBRW5CLGlCQUFlLEU7Ozs7Ozs7O0FDckJmLGlDQUEyQixtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUF1RCxLQUF2RCxDQUEzQixDLENBQ0E7QUFHQTs7QUFDQSxvQkFBYyxRQUFkLEVBQXVCLDZqQ0FBdkIsRUFBbWxDLEVBQW5sQyxHLENBRUE7Ozs7Ozs7O0FDTkEsVUFBSUUsT0FBTyxHQUFHc0ssbUJBQU8sQ0FBckIsR0FBcUIsQ0FBckI7O0FBRUEsVUFBRyxtQkFBSCxVQUFnQ3RLLE9BQU8sR0FBRyxDQUFDLENBQUNGLE9BQUQsWUFBWEUsRUFBVyxDQUFELENBQVZBO0FBRWhDO0FBQ0E7QUFJQSxVQUFJdUssT0FBTyxHQUFHO0FBQUMsZUFBTTtBQUFQLE9BQWQ7QUFFQUEsYUFBTyxDQUFQQTs7QUFDQUEsYUFBTyxDQUFQQSxhQUFxQixZQUFXO0FBQ2hCLGVBQU9DLE1BQU0sQ0FBTkEsZ0JBQVA7QUFEaEJEOztBQUlBLFVBQUlFLE1BQU0sR0FBR0gsbUJBQU8sQ0FBUEEsQ0FBTyxDQUFQQSxVQUFiLE9BQWFBLENBQWI7O0FBRUEsVUFBR3RLLE9BQU8sQ0FBVixRQUFtQkYsTUFBTSxDQUFOQSxVQUFpQkUsT0FBTyxDQUF4QkY7O0FBRW5CLGlCQUFlLEU7Ozs7Ozs7O0FDckJmLGlDQUEyQixtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUF1RCxLQUF2RCxDQUEzQixDLENBQ0E7QUFHQTs7QUFDQSxvQkFBYyxRQUFkLEVBQXVCLHVWQUF2QixFQUE2VyxFQUE3VyxHLENBRUE7Ozs7Ozs7OztBQ1BBOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVvaUI7OztBQUFBQTtBQUFmO0FBQWVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztVQUNNQSxjOzs7Ozs7Ozs7Ozs7Ozs7Z0JBSUpDLE0sR0FBUyxJQUFJdlo7QUFBSjtBQUFJQSxXQUFKLE07Z0JBS1R3WixNLEdBQVMsSTtnQkFPVDlKLE8sR0FBVSxJOzs7Ozs7O0FBYVY7QUFDRjtBQUNBOytCQUVPdmEsTSxFQUFRO0FBQ1g7QUFDQSxzQ0FBMEJBLE1BQU0sQ0FBaEM7O0FBQ0EsZ0JBQUksS0FBSixvQkFBNkI7QUFDM0Isa0JBQUlpTCx5QkFBeUIsR0FDM0JqTCxNQUFNLENBQU5BLGtCQUF5QkEsTUFBTSxDQUFOQSxZQUZBLEVBQzNCLENBRDJCLENBRXNCOztBQUVqRCw2Q0FBK0I7QUFDN0I7QUFERixxQkFFTyxJQUFJQSxNQUFNLENBQU5BLGNBQUosTUFBK0I7QUFDcEMsOEJBQWNBLE1BQU0sQ0FBcEI7QUFESyxxQkFFQTtBQUNMLDhCQUFjQSxNQUFNLENBQXBCOztBQUNBLG9CQUFJQSxNQUFNLENBQU5BLFlBQUosS0FBNEI7QUFDMUI7QUFDQTtBQUNEO0FBQ0Y7QUFkSCxtQkFlTztBQUNMLDRCQUFjQSxNQUFNLENBQXBCO0FBQ0Q7O0FBRUQsMEJBQWMsY0FBY21rQixjQUFjLENBQWRBLFlBQTJCLEtBQXpDLE1BQWNBLENBQWQsR0FBd0QsS0FBdEU7O0FBQ0E7O0FBQ0EsMkJBQWV0WjtBQUFBQTtBQUFBQSxjQUFmLGlCQUE4QyxLQUE5Qzs7QUFFQSxnQkFBSSxLQUFKLFFBQWlCO0FBQ2Ysa0NBQ0VxUjtBQUFBQTtBQUFBQSxpQkFBZSxLQUFELE1BQWRBLEVBQTRCTCxHQUFHLENBQUhBLGtCQUQ5QixtQkFDOEJBLEVBQTVCSyxDQURGO0FBR0Q7O0FBRUQsd0JBQVksWUFBWixNQUFZLEVBQVo7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FFWTtBQUNSO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTs7Ozs2Q0FDcUI7QUFDakIsZ0JBQUksS0FBSixvQkFBNkI7QUFDM0I7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7OztxQ0FDYTtBQUNULG1CQUFPLHdCQUF3QixLQUEvQixNQUFPLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7b0NBQ1k7QUFDUjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUNZO0FBQ1I7QUFDRDtBQUVEO0FBQ0Y7QUFDQTs7OztxQ0FDYTtBQUNUO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7O3dDQUVnQi9TLEksRUFBTTtBQUNsQiwwQkFBY0EsSUFBSSxZQUFKQSxPQUF1QkEsSUFBSSxDQUEzQkEsV0FBdUJBLEVBQXZCQSxHQUFkO0FBQ0Q7Ozs7QUE1R0Q7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7c0NBQ3FCdkssSyxFQUFPO0FBQ3hCLG1CQUFPaWQsR0FBRyxDQUFIQSw4QkFBUCxLQUFPQSxDQUFQO0FBQ0Q7Ozs7UUEzQjBCbmU7QUFBQUE7QUFBQUEsTyxpRUFnQzFCeU87QUFBQUE7QUFBQUEsTyx5SUF1Q0FBO0FBQUFBO0FBQUFBLE8sa0pBb0RBQztBQUFBQTtBQUFBQSxPO0FBTVkrWDs7QUFBQUEsaUNBQWYsY0FBZUE7Ozs7O0FwSTdKZjtDQVZBLEU7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQSxtSEFDQSwyV0FEQSxLQUVBLFVBQ0E7QUFBQTtBQUFBO0FBQUEscUdBREEsS0FFQSxFQUdBO0FBQ0MsQ0FURCxFQVNDLDJDQVRELEVBU0M7QUFDRDs7Ozs7QXFJVkE7QUFBQTs7QUFDQTtBQUFBOzs7QUFFQTtBQUFBOztBQUNBOztBQUFBOzs7QUFFQTtBQUFBOztBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7O0FBQ0E7OztBQUFBO0FBQ0E7QUFBQSxxQkFEQTs7QUFFQTtBQUFBLGtCQUZBOztBQUdBO0FBQUE7QUFDQTs7QUFKQTs7O0FBTUE7QUFBQTs7QUFDQTs7QUFBQTs7O0FBRUE7QUFBQTs7QUFDQTs7QUFBQTs7O0FBRUE7QUFBQTs7QUFDQTs7QUFBQTtBQUNBO0FBQUE7Ozs7O0FBR0E7QUFBQTs7QUFDQTs7O0FBQUE7OztBQUVBO0FBQUE7O0FBQ0E7O0FBQUE7OztBQUVBO0FBQUE7O0FBQ0E7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUEsK0JBREE7O0FBRUE7QUFBQSw0QkFGQTs7QUFHQTtBQUFBO0FBQ0E7O0FBSkE7QUFLQTtBQUFBO0FBQ0E7O0FBQUEsT0FSQTs7O0FBVUE7QUFBQTs7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUEyQjtBQUE0QixTQUR2RDtBQUVBO0FBQUE7QUFBaUM7QUFBZSxTQUZoRDtBQUdBOztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7QUFBQSxPQU5BOzs7QUFRQTtBQUFBOztBQUNBOzs7QUFBQTtBQUFzRDtBQUErRCxPQUFySDs7O0FBRUE7QUFBQTs7QUFDQTs7O0FBQUE7OztBQUVBO0FBQUE7O0FBQ0E7O0FBQUE7Ozs7Ozs7Ozs7O0FDN0RBOzs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBOzs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QTFGQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0EyRk5BOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVHOzs7QUFBQUE7QUFBZjtBQUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7VUFDTUEsUztBQUNKO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRSw2QkFBMEI7QUFBQSxjQUFkOVgsT0FBYyx1RUFBSixFQUFJOztBQUFBOztBQUN4Qix5REFDSztBQUNEeUMsb0JBQVEsRUFEUDtBQUVEckQsZUFBRyxFQUZGO0FBR0QyWSx5QkFBYSxFQUhaO0FBSURDLDJCQUFlLEVBSmQ7QUFLRHRWLG9CQUFRLEVBTFA7QUFNREMscUJBQVMsRUFBRTtBQU5WLFdBREw7QUFXQSw4QkFBb0IsdUJBQXBCLElBQW9CLENBQXBCO0FBQ0EsMEJBQWdCLG1CQUFoQixJQUFnQixDQUFoQjtBQUNBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTs7Ozs7b0NBQ1k7QUFDUixnQkFBTUYsUUFBUSxHQUNaLE9BQU8sYUFBUCx3QkFDSSxrQ0FBa0MsYUFEdEMsUUFDSSxDQURKLEdBRUksYUFITjtBQUlBOztBQUVBLGlCQUFLLElBQUkxUSxDQUFDLEdBQVYsR0FBZ0JBLENBQUMsR0FBRzBRLFFBQVEsQ0FBNUIsUUFBcUMxUSxDQUFyQyxJQUEwQztBQUN4Q3FSLG1CQUFLLEdBQUdYLFFBQVEsQ0FBaEJXLENBQWdCLENBQWhCQTs7QUFDQSxrQkFBSUEsS0FBSyxZQUFULGtCQUF1QztBQUNyQzZVLDJCQUFXLEdBQUc3VSxLQUFLLENBQUxBLHdCQUFkNlUsT0FBYzdVLENBQWQ2VTs7QUFFQSxvQkFBSSxDQUFDN1UsS0FBSyxDQUFMQSxhQUFMLElBQUtBLENBQUwsRUFBK0I7QUFDN0JwTCx5QkFBTyxDQUFQQTtBQUlBO0FBUm1DLGtCQVdyQzs7O0FBQ0Esb0JBQU1rZ0IsU0FBUyxHQUNiRCxXQUFXLElBQUlBLFdBQVcsQ0FBWEEsaUNBQTZDLENBRDlEOztBQUVBO0FBZEYscUJBZU87QUFDTGpnQix1QkFBTyxDQUFQQTtBQUlEO0FBQ0Y7QUFDRjtBQUVEO0FBQ0Y7QUFDQTs7OztvQ0FDWTtBQUNSLGdCQUFNeUssUUFBUSxHQUNaLE9BQU8sYUFBUCx3QkFDSSxrQ0FBa0MsYUFEdEMsUUFDSSxDQURKLEdBRUksYUFITjtBQUtBOztBQUVBLGlCQUFLLElBQUkxUSxDQUFDLEdBQVYsR0FBZ0JBLENBQUMsR0FBRzBRLFFBQVEsQ0FBNUIsUUFBcUMxUSxDQUFyQyxJQUEwQztBQUN4Q3FSLG1CQUFLLEdBQUdYLFFBQVEsQ0FBaEJXLENBQWdCLENBQWhCQTtBQUNBcFAsb0JBQU0sR0FBR29QLEtBQUssQ0FBZHBQO0FBQ0Fpa0IseUJBQVcsR0FBR2prQixNQUFNLENBQU5BLGFBQWRpa0IsT0FBY2prQixDQUFkaWtCOztBQUVBLGtCQUFJQSxXQUFXLElBQUlBLFdBQVcsQ0FBWEEsaUNBQTZDLENBQWhFLEdBQW9FO0FBQ2xFO0FBQ0Q7QUFDRjtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztnQ0FDUTdVLEssRUFBTzhVLFMsRUFBVztBQUN0QixnQkFBTUMsT0FBTyxHQUFHL1UsS0FBSyxDQUFMQSxhQUFoQixJQUFnQkEsQ0FBaEI7QUFBQSxnQkFDRWdWLFNBQVMsR0FBR2hWLEtBQUssQ0FBTEEsYUFEZCxNQUNjQSxDQURkO0FBQUEsZ0JBRUVqQixJQUFJLEdBQUdpQixLQUFLLENBQUxBLGdCQUZUO0FBQUEsZ0JBR0VpVixlQUFlLEdBQUdqVixLQUFLLENBSHpCO0FBQUEsZ0JBSUVrVixjQUFjLEdBQUdDO0FBQUFBO0FBQUFBLGVBSm5CLElBSW1CQSxDQUpuQjtBQUFBLGdCQUtFaFYsT0FBTyxHQUFHOFUsZUFBZSxJQUwzQjtBQU9BLGdCQUFJN0MsSUFBSSxHQUFSO0FBQUEsZ0JBQ0VnRCxXQUFXLEdBRGI7O0FBR0EsZ0JBQUksQ0FBSixXQUFnQjtBQUNkaEQsa0JBQUksR0FBR2hXLFFBQVEsQ0FBUkEsY0FBUGdXLE1BQU9oVyxDQUFQZ1c7QUFDQWdELHlCQUFXLEdBQUdoWixRQUFRLENBQVJBLGNBRkEsT0FFQUEsQ0FBZGdaLENBRmMsQ0FFZ0M7QUFGaEQsbUJBR087QUFDTGhELGtCQUFJLEdBQUdwUyxLQUFLLENBQVpvUztBQUNBZ0QseUJBQVcsR0FBR2hELElBQUksQ0FBSkEsY0FBZGdELCtCQUFjaEQsQ0FBZGdEO0FBaEJvQixjQW1CdEI7QUFDQTs7O0FBQ0FwVixpQkFBSyxDQUFMQSxRQUFjcVY7QUFBQUE7QUFBQUEsZUFBZ0JyVixLQUFLLENBQU4sS0FBZnFWLEVBQWRyVixJQUFjcVYsQ0FBZHJWO0FBQ0FBLGlCQUFLLENBQUxBO0FBQ0FBLGlCQUFLLENBQUxBO0FBQ0FBLGlCQUFLLENBQUxBO0FBQ0FBLGlCQUFLLENBQUxBLHdCQUE4QnNWO0FBQUFBO0FBQUFBLGVBQU90VixLQUFLLENBQU4sS0FBTnNWLEVBQTlCdFYsSUFBOEJzVixDQUE5QnRWOztBQUNBLGdCQUFJaVYsZUFBZSxJQUFJQSxlQUFlLEtBQXRDLGdCQUEyRDtBQUN6RGpWLG1CQUFLLENBQUxBO0FBQ0Q7O0FBRUQsZ0JBQUksQ0FBSixXQUFnQjtBQUNkLGtCQUFJLEVBQUVBLEtBQUssQ0FBTEEsNEJBQWtDQSxLQUFLLENBQUxBLGFBQXhDLFNBQXdDQSxDQUFwQyxDQUFKLEVBQXdFO0FBQ3RFQSxxQkFBSyxDQUFMQSwwQkFBZ0MsS0FBaENBO0FBQ0FBLHFCQUFLLENBQUxBLDZCQUFtQyxLQUFuQ0E7QUFDQUEscUJBQUssQ0FBTEEsMEJBQWdDLEtBQWhDQTtBQUNBQSxxQkFBSyxDQUFMQSw0QkFBa0MsS0FBbENBO0FBQ0FBLHFCQUFLLENBQUxBLDBCQUFnQyxLQUFoQ0E7QUFDRDs7QUFDREEsbUJBQUssQ0FBTEEsOEJBUmMsS0FRZEEsRUFSYyxDQVE2QjtBQUM1Qzs7QUFFRCxnQkFBSSxvQkFBSixLQUFJLENBQUosRUFBZ0M7QUFDOUIsa0NBQW9CQSxLQUFLLENBQXpCLE9BQWlDQSxLQUFLLENBQUxBLFFBQWpDO0FBMUNvQixjQTZDdEI7QUFDQTs7O0FBQ0FvVix1QkFBVyxDQUFYQTtBQUNBQSx1QkFBVyxDQUFYQTtBQUNBQSx1QkFBVyxDQUFYQTtBQUNBQSx1QkFBVyxDQUFYQSxRQUFvQnBWLEtBQUssQ0FBTEEsUUFBcEJvVjtBQUNBLHlCQUFhQSxXQUFXLENBQVhBO0FBQ2IsMkJBQWVBLFdBQVcsQ0FBWEE7O0FBRWYsZ0JBQUksQ0FBSixXQUFnQjtBQUNkO0FBQ0FoRCxrQkFBSSxDQUFKQTtBQUNBQSxrQkFBSSxDQUFKQTtBQUNBQSxrQkFBSSxDQUFKQTtBQUNEOztBQUVEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztrQ0FDVW1ELFMsRUFBVztBQUNqQkEscUJBQVMsQ0FBVEEsWUFDRUEsU0FBUyxDQUFUQSxjQURGQSwrQkFDRUEsQ0FERkE7QUFJQSxnQkFBTXZWLEtBQUssR0FBR3VWLFNBQVMsQ0FBVEEsY0FBZCwyQkFBY0EsQ0FBZDtBQUNBdlYsaUJBQUssQ0FBTEEsNkJBQW1DLEtBQW5DQTtBQUNBQSxpQkFBSyxDQUFMQSxnQ0FBc0MsS0FBdENBO0FBQ0FBLGlCQUFLLENBQUxBLDZCQUFtQyxLQUFuQ0E7QUFDQUEsaUJBQUssQ0FBTEEsK0JBQXFDLEtBQXJDQTtBQUNBQSxpQkFBSyxDQUFMQSw2QkFBbUMsS0FBbkNBO0FBQ0EsbUJBQU9BLEtBQUssQ0FBTEEsUUFBUDs7QUFDQSxnQkFBSSxDQUFDQSxLQUFLLENBQUxBLFFBQUwsaUJBQW9DO0FBQ2xDQSxtQkFBSyxDQUFMQTtBQUNBLHFCQUFPQSxLQUFLLENBQUxBLFFBQVA7QUFDRDs7QUFFREEsaUJBQUssQ0FBTEEsaUJBQXVCLGFBQXZCQTtBQUVBdVYscUJBQVMsQ0FBVEE7QUFDQUEscUJBQVMsQ0FBVEE7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O3VDQUNlalosQyxFQUFHO0FBQ2QsZ0JBQUlBLENBQUMsQ0FBREEsV0FBYUEsQ0FBQyxDQUFkQSxZQUEyQkEsQ0FBQyxDQUE1QkEsVUFBdUNBLENBQUMsQ0FBNUMsU0FBc0Q7QUFDdEQsZ0JBQUdBLENBQUMsQ0FBREEsWUFBSCxJQUFxQkEsQ0FBQyxDQUFEQTtBQUVyQixnQkFBTTBELEtBQUssR0FBRzFELENBQUMsQ0FBZjtBQUFBLGdCQUNFeUMsSUFBSSxHQUFHaUIsS0FBSyxDQUFMQSxnQkFBc0IsYUFEL0I7QUFBQSxnQkFFRXdWLFNBQVMsR0FBR2xaLENBQUMsQ0FGZjtBQUlBMEQsaUJBQUssQ0FBTEEsaUJBQXVCLGFBQXZCQTtBQUNBQSxpQkFBSyxDQUFMQSxpQkFBdUIsYUFBdkJBO0FBQ0FBLGlCQUFLLENBQUxBO0FBRUEsZ0JBQUloUixLQUFLLEdBQUdnUixLQUFLLENBQWpCO0FBQUEsZ0JBQ0V5VixPQUFPLEdBQUduWixDQUFDLENBRGI7QUFBQSxnQkFFRW9aLFVBQVUsR0FBR3BaLENBQUMsQ0FBREEsT0FBU0EsQ0FBQyxDQUFEQSx3QkFGeEIsRUFFd0JBLENBRnhCO0FBQUEsZ0JBR0V6TixHQUFHLEdBQUc2bUIsVUFBVSxHQUFJQSxVQUFVLENBQVZBLGtCQUFKLGFBSGxCO0FBQUEsZ0JBSUVDLGNBQWMsR0FBR0M7QUFBQUE7QUFBQUEsZUFBaUIsS0FBakJBLEVBSm5CLElBSW1CQSxDQUpuQjtBQUFBO0FBQUE7QUFBQSxnQkFPRUMsU0FBUyxHQVBYOztBQVNBO0FBQ0U7QUFDRW5oQix3QkFBUSxHQUFHMmdCO0FBQUFBO0FBQUFBLG1CQUNULENBQUMvWSxDQUFDLENBQURBLGlCQUFtQk8sTUFBTSxDQUExQix1QkFEd0IsTUFDeEIsQ0FEU3dZLEVBQVgzZ0IsSUFBVzJnQixDQUFYM2dCO0FBSUE7O0FBQ0Y7QUFDRUEsd0JBQVEsR0FBUkE7QUFDQTs7QUFDRjtBQUNFLG9CQUFNb2hCLGNBQWMsR0FBRzlWLEtBQUssQ0FBNUI7QUFDQSxvQkFBSThWLGNBQWMsS0FBbEIsZ0JBQXVDSCxjQUFjLEdBQWRBO0FBRXZDamhCLHdCQUFRLEdBQ04xRixLQUFLLENBQUxBLGtDQUF3Q0EsS0FBSyxDQUFMQSxPQUQxQzBGLGNBQzBDMUYsQ0FEMUMwRjtBQUVBOztBQUNGO0FBQ0U7QUFsQko7O0FBcUJBcWhCLHlCQUFhLEdBQUdUO0FBQUFBO0FBQUFBLGVBQU0sUUFBTkEsRUFBaEJTLElBQWdCVCxDQUFoQlM7O0FBRUEsZ0JBQUksOENBQThDLENBQWxELEdBQXNEO0FBQ3BELGtCQUFJO0FBQ0YvVixxQkFBSyxDQUFMQSxRQUFjZ1csMkZBQWRoVyxLQUFjZ1csQ0FBZGhXOztBQUNBLG9CQUFHLG9CQUFILEtBQUcsQ0FBSCxFQUErQjtBQUM3QkEsdUJBQUssQ0FBTEE7QUFDQSw0REFDTUEsS0FBSyxDQUFMQSxhQUROLElBQ01BLENBRE47O0FBR0E7O0FBQ0Esc0NBQW9CQSxLQUFLLENBQXpCLE9BQWlDQSxLQUFLLENBQUxBLFFBQWpDO0FBQ0Q7O0FBQ0Q2Vix5QkFBUyxHQUFUQTtBQVZGLGdCQVdFLGNBQWM7QUFDZDs7QUFDQTs7QUFDQUEseUJBQVMsR0FBVEE7QUFDRDs7QUFFRDtBQUNEOztBQUVELGdCQUFJLENBQUosV0FBZ0I7QUFDakI7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O21DQUNXdlosQyxFQUFHO0FBQ1YsZ0JBQU0wRCxLQUFLLEdBQUcxRCxDQUFDLENBQWY7QUFDQSxnQkFBTXlDLElBQUksR0FBR2lCLEtBQUssQ0FBTEEsZ0JBQXNCLGFBQW5DOztBQUNBO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OytDQUN1QkEsSyxFQUFPakIsSSxFQUFNO0FBQ2hDa1gsc0JBQVUsQ0FBQyxZQUFNO0FBQ2Ysa0JBQU1DLFFBQVEsR0FBR047QUFBQUE7QUFBQUEsaUJBQWtCNVYsS0FBSyxDQUFOLEtBQWpCNFYsRUFBakIsSUFBaUJBLENBQWpCO0FBQ0E1VixtQkFBSyxDQUFMQTtBQUZRLGVBQVZpVyxDQUFVLENBQVZBO0FBSUQ7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBQ2lCalcsSyxFQUFPO0FBQ3BCLGdCQUFNSixPQUFPLEdBQUdJLEtBQUssQ0FBckIsYUFBZ0JBLEVBQWhCOztBQUVBLHlCQUFhO0FBQ1g7O0FBQ0FBLG1CQUFLLENBQUxBO0FBRkYsbUJBR087QUFDTDs7QUFDQSxtQ0FBcUJBLEtBQUssQ0FBMUI7QUFDRDs7QUFFRDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7O3lDQUNpQm1XLFcsRUFBYUMsYSxFQUFlcFcsSyxFQUFPO0FBQ2hELGdCQUFJLGFBQUosVUFBMkI7QUFDekI7QUFDRDtBQUNGO0FBRUQ7QUFDRjtBQUNBOzs7OzBDQUNrQkQsSyxFQUFPQyxLLEVBQU87QUFDNUIsZ0JBQUksYUFBSixXQUE0QjtBQUMxQjtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7Ozs7K0NBQ3VCQSxLLEVBQU8wSixLLEVBQU87QUFDakMsZ0JBQUkxSixLQUFLLENBQUxBLDRCQUFrQ0EsS0FBSyxDQUFMQSxhQUF0QyxVQUFzQ0EsQ0FBdEMsRUFBc0U7QUFDcEVBLG1CQUFLLENBQUxBLGlCQUF1QixhQUF2QkE7QUFDQUEsbUJBQUssQ0FBTEEsaUJBQXVCLGFBQXZCQTtBQUZGLG1CQUdPO0FBQ0wsa0JBQUkwSixLQUFLLEtBQVQsV0FBeUI7QUFDdkIxSixxQkFBSyxDQUFMQSxpQkFBdUIsYUFBdkJBO0FBQ0FBLHFCQUFLLENBQUxBLGNBQW9CLGFBQXBCQTtBQUNEOztBQUVELGtCQUFJMEosS0FBSyxLQUFULFNBQXVCO0FBQ3JCMUoscUJBQUssQ0FBTEEsY0FBb0IsYUFBcEJBO0FBQ0FBLHFCQUFLLENBQUxBLGlCQUF1QixhQUF2QkE7QUFDRDtBQUNGO0FBQ0Y7Ozs7O0FBR1kwVTs7O0FBQUFBLGlDQUFmLFNBQWVBOzs7Ozs7OztBQ3haZjs7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7OztBQUFBO0FBQUE7QUFBQTtBQUFBOzs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFBQTs7O0FBQUE7QUFBQTs7O0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBSUEsVUFBTTJCLGVBQWUsR0FBRywrQkFBeEIsR0FBd0IsQ0FBeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBSUMsNkJBQTZCLEdBQWpDOztBQUNBLFVBQUk7QUFDRkMsWUFBSSxDQUFKQSxXQUFJLENBQUpBO0FBQ0FELHFDQUE2QixHQUE3QkE7QUFGRixRQUdFLFlBQVk7QUFDWkEscUNBQTZCLEdBQTdCQTtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBTUUsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixjQUFpQjtBQUNyQyxZQUFJLE9BQU9BLGFBQWEsQ0FBcEIsY0FBSixhQUFvRDtBQUNsREEsdUJBQWEsQ0FBYkE7QUFDRDs7QUFFRCxZQUFNQyxRQUFRLGdDQUFkLElBQWMsQ0FBZDs7QUFFQSxZQUFJLENBQUNELGFBQWEsQ0FBYkEsVUFBTCxRQUFLQSxDQUFMLEVBQXdDO0FBQ3RDLGNBQU1ULGFBQWEsR0FBR1QsTUFBTSxRQUE1QixJQUE0QixDQUE1QjtBQUNBa0IsdUJBQWEsQ0FBYkEsc0JBQ0V4bkIsS0FBSyxLQUFLZ25CLHFGQURaUSxJQUNZUixDQURaUTtBQUVEOztBQUVELGVBQU9BLGFBQWEsQ0FBYkEsVUFBUCxRQUFPQSxDQUFQO0FBYkY7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFNbkIsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixjQUFpQjtBQUN2QyxZQUFJLE9BQU9BLGVBQWUsQ0FBdEIsY0FBSixhQUFzRDtBQUNwREEseUJBQWUsQ0FBZkE7QUFDRDs7QUFFRCxZQUFNb0IsUUFBUSxnQ0FBZCxJQUFjLENBQWQ7O0FBRUEsWUFBSSxDQUFDcEIsZUFBZSxDQUFmQSxVQUFMLFFBQUtBLENBQUwsRUFBMEM7QUFDeEMsY0FBSW1CLGFBQWEsUUFBakIsSUFBaUIsQ0FBakIsRUFBZ0M7QUFDOUJuQiwyQkFBZSxDQUFmQTtBQURGLGlCQUVPO0FBQ0wsZ0JBQUk7QUFDRkEsNkJBQWUsQ0FBZkEsc0JBQXNDVyxtRkFBdENYLEtBQXNDVyxDQUF0Q1g7QUFERixjQU1FLFVBQVU7QUFDVkEsNkJBQWUsQ0FBZkEsc0JBQXNDVywwRUFBdENYLElBQXNDVyxDQUF0Q1g7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsZUFBT0EsZUFBZSxDQUFmQSxVQUFQLFFBQU9BLENBQVA7QUF2QkY7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFVBQU1GLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsT0FBUTtBQUN0QyxZQUFJLE9BQU9BLHVCQUF1QixDQUE5QixjQUFKLGFBQThEO0FBQzVEQSxpQ0FBdUIsQ0FBdkJBO0FBQ0Q7O0FBRUQsWUFBTXNCLFFBQVEsR0FBZDs7QUFFQSxZQUFJLENBQUN0Qix1QkFBdUIsQ0FBdkJBLFVBQUwsUUFBS0EsQ0FBTCxFQUFrRDtBQUNoRCxjQUFNdUIsVUFBVSxHQUFHM1gsSUFBSSxDQUFKQSxNQUFuQixFQUFtQkEsQ0FBbkI7QUFDQSxjQUFJNFgsS0FBSyxHQUFUO0FBQ0FELG9CQUFVLENBQVZBLFFBQW1CLGFBQUs7QUFDdEI7QUFDRTtBQUNFQyxxQkFBSyxJQUFMQTtBQUNBOztBQUNGO0FBQ0E7QUFDRTtBQUNBO0FBQ0FBLHFCQUFLLElBQUlMLDZCQUE2QixjQUF0Q0s7QUFHQTs7QUFDRjtBQUNFQSxxQkFBSyxJQUFMQTtBQUNBOztBQUNGO0FBQ0E7QUFDRUEscUJBQUssSUFBSUwsNkJBQTZCLHNCQUF0Q0s7QUFHQTs7QUFDRjtBQUNFQSxxQkFBSyxJQUFJTCw2QkFBNkIsMERBQXRDSztBQUdBOztBQUNGO0FBQ0VBLHFCQUFLLElBQUlDLENBQUMsQ0FBREEsK0JBQVRELE1BQVNDLENBQVREO0FBQ0E7QUE1Qko7QUFERkQ7QUFpQ0F2QixpQ0FBdUIsQ0FBdkJBO0FBQ0Q7O0FBRUQsZUFBT0EsdUJBQXVCLENBQXZCQSxVQUFQLFFBQU9BLENBQVA7QUE5Q0Y7QUFpREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFNRyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxvQkFBdUI7QUFDcEMsWUFBSSxPQUFPQSxNQUFNLENBQWIsY0FBSixhQUE2QztBQUMzQ0EsZ0JBQU0sQ0FBTkE7QUFDRDs7QUFFRCxZQUFNbUIsUUFBUSxzQ0FBZCxJQUFjLENBQWQ7O0FBRUEsWUFBSSxDQUFDbkIsTUFBTSxDQUFOQSxVQUFMLFFBQUtBLENBQUwsRUFBaUM7QUFDL0IsY0FBTXVCLFdBQVcsR0FBRzlYLElBQUksQ0FBSkEsTUFBcEIsRUFBb0JBLENBQXBCO0FBQ0EsY0FBTStYLGtCQUFrQixHQUFHQyxXQUFXLENBQVhBLE1BQTNCLEVBQTJCQSxDQUEzQjtBQUVBLGNBQUlqWCxRQUFRLEdBQVo7O0FBRUEsZUFBSyxJQUFJM0ksS0FBSyxHQUFkLEdBQW9CQSxLQUFLLEdBQUcyZixrQkFBa0IsQ0FBOUMsUUFBdUQzZixLQUF2RCxJQUFnRTtBQUM5RCxnQkFBTThTLEVBQUUsR0FBRzZNLGtCQUFrQixDQUE3QixLQUE2QixDQUE3QjtBQUNBLGdCQUFNL1gsS0FBSSxHQUFHOFgsV0FBVyxDQUF4QixLQUF3QixDQUF4QjtBQUNBLGdCQUFNRyxTQUFTLEdBQUdYLGVBQWUsQ0FBZkEsaUJBQWdDLENBQWxEOztBQUNBLDJCQUFlO0FBQ2Isa0JBQU1sVyxPQUFPLEdBQUcsV0FDZGdWLHVCQUF1QixDQURULEtBQ1MsQ0FEVCxFQUVkbUIsNkJBQTZCLFNBRi9CLEVBQWdCLENBQWhCO0FBSUEsa0JBQUluVyxPQUFPLENBQVBBLEtBQUosRUFBSUEsQ0FBSixFQUFzQkwsUUFBUSxJQUE5QixFQUFzQkEsQ0FBdEIsS0FDSztBQUNOO0FBQ0Y7O0FBRUR3VixnQkFBTSxDQUFOQSxzQkFBNkJ4VixRQUFRLENBQXJDd1YsaUJBQTZCeFYsRUFBN0J3VjtBQUNEOztBQUVELGVBQU9BLE1BQU0sQ0FBTkEsVUFBUCxRQUFPQSxDQUFQO0FBOUJGO0FBaUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFNTSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLG9CQUF1QjtBQUMvQyxZQUFJLE9BQU9BLGlCQUFpQixDQUF4QixjQUFKLGFBQXdEO0FBQ3REQSwyQkFBaUIsQ0FBakJBO0FBQ0Q7O0FBRUQsWUFBTWEsUUFBUSxzQ0FBZCxJQUFjLENBQWQ7O0FBQ0EsWUFBSSxDQUFDYixpQkFBaUIsQ0FBakJBLFVBQUwsUUFBS0EsQ0FBTCxFQUE0QztBQUMxQyxjQUFNaUIsV0FBVyxHQUFHOVgsSUFBSSxDQUFKQSxNQUFwQixFQUFvQkEsQ0FBcEI7QUFDQSxjQUFJK1gsa0JBQWtCLEdBQUdDLFdBQVcsQ0FBWEEsTUFBekIsRUFBeUJBLENBQXpCOztBQUNBLGNBQUlELGtCQUFrQixDQUFsQkEsU0FBNEJELFdBQVcsQ0FBM0MsUUFBb0Q7QUFDbERDLDhCQUFrQixHQUFHQSxrQkFBa0IsQ0FBbEJBLE9BQ25CLFVBQVVELFdBQVcsQ0FBWEEsU0FBcUJDLGtCQUFrQixDQUFqRCx3QkFERkEsRUFDRSxDQURtQkEsQ0FBckJBO0FBR0Q7O0FBRUQsY0FBSVosUUFBUSxHQUFHLENBQWY7O0FBQ0EsZUFBSyxJQUFJL2UsS0FBSyxHQUFkLEdBQW9CQSxLQUFLLEdBQUcwZixXQUFXLENBQXZDLFFBQWdEMWYsS0FBaEQsSUFBeUQ7QUFDdkQsZ0JBQU04UyxFQUFFLEdBQUc0TSxXQUFXLENBQXRCLEtBQXNCLENBQXRCOztBQUNBLGdCQUFJNU0sRUFBRSxLQUFLNk0sa0JBQWtCLENBQTdCLEtBQTZCLENBQTdCLEVBQXNDO0FBQ3BDO0FBQ0Esa0JBQUlULGVBQWUsQ0FBZkEsY0FBOEIsQ0FBbEMsR0FBc0M7QUFDcEMsb0JBQU1sVyxPQUFPLEdBQUcsV0FDZGdWLHVCQUF1QixDQURULEVBQ1MsQ0FEVCxFQUVkbUIsNkJBQTZCLFNBRi9CLEVBQWdCLENBQWhCOztBQUtBLG9CQUFJLENBQUNuVyxPQUFPLENBQVBBLEtBQWEyVyxrQkFBa0IsQ0FBcEMsS0FBb0MsQ0FBL0IzVyxDQUFMLEVBQThDO0FBQzVDK1YsMEJBQVEsR0FBUkE7QUFDQTtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUVETiwyQkFBaUIsQ0FBakJBLHNCQUNFTSxRQUFRLEdBQVJBLElBQWVZLGtCQUFrQixDQUFqQ1osU0FERk47QUFFRDs7QUFFRCxlQUFPQSxpQkFBaUIsQ0FBakJBLFVBQVAsUUFBT0EsQ0FBUDtBQXRDRjs7Ozs7Ozs7O0FDMUxBOztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSWVxQjs7O0FBQUFBO0FBQWY7QUFBZUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUlBLFVBQU1DLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsUUFBUztBQUM3QixZQUFJbG9CLEtBQUssR0FBTEEsS0FBSixHQUFvQjtBQUNsQixjQUFNbW9CLEtBQUssR0FBR25vQixLQUFLLENBQUxBLGlCQUFkLEdBQWNBLENBQWQ7QUFDQSxjQUFJbW9CLEtBQUssQ0FBTEEsV0FBSixHQUF3QixPQUFPQSxLQUFLLENBQUxBLENBQUssQ0FBTEEsQ0FBUDtBQUN6Qjs7QUFDRDtBQUxGO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztVQUNNRixXO0FBQ0o7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLCtCQUEwQjtBQUFBLGNBQWRyYSxPQUFjLHVFQUFKLEVBQUk7O0FBQUE7O0FBQ3hCLHlEQUNLO0FBQ0R5QyxvQkFBUSxFQURQO0FBRURyRCxlQUFHLEVBRkY7QUFHRDJZLHlCQUFhLEVBSFo7QUFJREMsMkJBQWUsRUFKZDtBQUtEdFYsb0JBQVEsRUFMUDtBQU1EQyxxQkFBUyxFQUFFO0FBTlYsV0FETDtBQVlBLHFDQUEyQiw4QkFBM0IsSUFBMkIsQ0FBM0I7QUFDQSx1Q0FBNkIsZ0NBQTdCLElBQTZCLENBQTdCO0FBQ0E7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7OztvQ0FDWTtBQUNSLGdCQUFNRixRQUFRLEdBQ1osT0FBTyxhQUFQLHdCQUNJLGtDQUFrQyxhQUR0QyxRQUNJLENBREosR0FFSSxhQUhOO0FBSUE7O0FBRUEsaUJBQUssSUFBSTFRLENBQUMsR0FBVixHQUFnQkEsQ0FBQyxHQUFHMFEsUUFBUSxDQUE1QixRQUFxQzFRLENBQXJDLElBQTBDO0FBQ3hDcVIsbUJBQUssR0FBR1gsUUFBUSxDQUFoQlcsQ0FBZ0IsQ0FBaEJBOztBQUNBLGtCQUFJQSxLQUFLLFlBQVQsa0JBQXVDO0FBQ3JDNlUsMkJBQVcsR0FBRzdVLEtBQUssQ0FBTEEsd0JBQWQ2VSxPQUFjN1UsQ0FBZDZVOztBQUVBLG9CQUFJLENBQUM3VSxLQUFLLENBQUxBLGFBQUwsSUFBS0EsQ0FBTCxFQUErQjtBQUM3QnBMLHlCQUFPLENBQVBBO0FBSUE7QUFSbUMsa0JBV3JDOzs7QUFDQSxvQkFBTWtnQixTQUFTLEdBQ2JELFdBQVcsSUFBSUEsV0FBVyxDQUFYQSxtQ0FBK0MsQ0FEaEU7O0FBRUE7QUFkRixxQkFlTztBQUNMamdCLHVCQUFPLENBQVBBO0FBSUQ7QUFDRjtBQUNGO0FBRUQ7QUFDRjtBQUNBOzs7O29DQUNZO0FBQ1IsZ0JBQU15SyxRQUFRLEdBQ1osT0FBTyxhQUFQLHdCQUNJLGtDQUFrQyxhQUR0QyxRQUNJLENBREosR0FFSSxhQUhOO0FBS0E7O0FBRUEsaUJBQUssSUFBSTFRLENBQUMsR0FBVixHQUFnQkEsQ0FBQyxHQUFHMFEsUUFBUSxDQUE1QixRQUFxQzFRLENBQXJDLElBQTBDO0FBQ3hDcVIsbUJBQUssR0FBR1gsUUFBUSxDQUFoQlcsQ0FBZ0IsQ0FBaEJBO0FBQ0FwUCxvQkFBTSxHQUFHb1AsS0FBSyxDQUFkcFA7QUFDQWlrQix5QkFBVyxHQUFHamtCLE1BQU0sQ0FBTkEsYUFBZGlrQixPQUFjamtCLENBQWRpa0I7O0FBRUEsa0JBQUlBLFdBQVcsSUFBSUEsV0FBVyxDQUFYQSxtQ0FBK0MsQ0FBbEUsR0FBc0U7QUFDcEU7QUFDRDtBQUNGO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O2dDQUNRdUMsVyxFQUFhdEMsUyxFQUFXO0FBQzVCLGdCQUFNdUMsYUFBYSxHQUFHRCxXQUFXLENBQVhBLGFBQXRCLElBQXNCQSxDQUF0QjtBQUFBLGdCQUNFRSxlQUFlLEdBQUdGLFdBQVcsQ0FBWEEsYUFEcEIsTUFDb0JBLENBRHBCO0FBQUEsZ0JBRUVHLGVBQWUsR0FBR0gsV0FBVyxDQUFYQSxnQkFGcEI7QUFBQSxnQkFHRUksY0FBYyxHQUFHSixXQUFXLENBQVhBLGVBSG5CO0FBQUEsZ0JBSUVLLGNBQWMsR0FBR0wsV0FBVyxDQUFYQSxlQUpuQjtBQUFBLGdCQUtFTSw0QkFBNEIsR0FDMUJOLFdBQVcsQ0FBWEEsNkJBTko7QUFBQSxnQkFPRU8sMkJBQTJCLEdBQUdQLFdBQVcsQ0FBWEEsNEJBUGhDO0FBQUEsZ0JBUUVRLDZCQUE2QixHQUMzQlIsV0FBVyxDQUFYQSw4QkFUSjtBQUFBLGdCQVVFUyxlQUFlLEdBQUdULFdBQVcsQ0FBWEEsZ0JBVnBCO0FBQUEsZ0JBV0VVLGtCQUFrQixHQUFHVixXQUFXLENBQVhBLGFBWHZCLE9BV3VCQSxDQVh2QjtBQUFBLGdCQVlFVyxtQkFBbUIsR0FBR1gsV0FBVyxDQUFYQSw0QkFaeEI7QUFjQSxnQkFBSWhGLElBQUksR0FBUjtBQUFBLGdCQUNFNEYsYUFBYSxHQURmOztBQUdBLGdCQUFJLENBQUosV0FBZ0I7QUFDZDVGLGtCQUFJLEdBQUdoVyxRQUFRLENBQVJBLGNBQVBnVyxNQUFPaFcsQ0FBUGdXO0FBQ0E0RiwyQkFBYSxHQUFHNWIsUUFBUSxDQUFSQSxjQUZGLE9BRUVBLENBQWhCNGIsQ0FGYyxDQUVrQztBQUZsRCxtQkFHTztBQUNMNUYsa0JBQUksR0FBR2dGLFdBQVcsQ0FBbEJoRjtBQUNBNEYsMkJBQWEsR0FBRzVGLElBQUksQ0FBSkEsY0FBaEI0RixpQ0FBZ0I1RixDQUFoQjRGO0FBdkIwQixjQTBCNUI7QUFDQTs7O0FBQ0EsZ0JBQUksQ0FBSixXQUFnQjtBQUNkWix5QkFBVyxDQUFYQSw4QkFEYyxXQUNkQSxFQURjLENBQ3lDOztBQUN2RCxrQkFDRSxFQUNFQSxXQUFXLENBQVhBLDRCQUNBQSxXQUFXLENBQVhBLGFBSEosVUFHSUEsQ0FGRixDQURGLEVBS0U7QUFDQUEsMkJBQVcsQ0FBWEEsMEJBQXNDLEtBQXRDQTtBQUNBQSwyQkFBVyxDQUFYQSw0QkFBd0MsS0FBeENBO0FBQ0Q7QUFDRjs7QUFFREEsdUJBQVcsQ0FBWEEsd0JBQW9DQSxXQUFXLENBQVhBLFNBQXBDQTtBQUNBQSx1QkFBVyxDQUFYQTtBQUNBQSx1QkFBVyxDQUFYQTtBQUNBQSx1QkFBVyxDQUFYQTtBQUNBQSx1QkFBVyxDQUFYQSxRQUFvQmEsc0VBQ2xCYixXQUFXLENBQVhBLFFBRGtCYSwwSEFBcEJiLElBQW9CYSxFQUFwQmI7QUFPQUEsdUJBQVcsQ0FBWEEsNENBRUUsYUF0RDBCLGVBb0Q1QkEsRUFwRDRCLENBeUQ1QjtBQUNBOztBQUNBWSx5QkFBYSxDQUFiQSxRQUFzQlosV0FBVyxDQUFYQSxRQUF0Qlk7QUFDQUEseUJBQWEsQ0FBYkE7QUFDQUEseUJBQWEsQ0FBYkE7QUFDQUEseUJBQWEsQ0FBYkE7QUFDQSwrQkFDRUEsYUFBYSxDQUFiQTtBQUNGLGlDQUNFQSxhQUFhLENBQWJBO0FBQ0YscUNBQXlCQSxhQUFhLENBQWJBO0FBRXpCLGlDQUFxQkEsYUFBYSxDQUFiQSxxQkFBckIsZUFBcUJBLEVBQXJCLEtBQ0s7QUFDSCxrQkFBTUUsUUFBUSxHQUFHaEIsYUFBYSxDQUFDYyxhQUFhLENBQTVDLEtBQThCLENBQTlCO0FBQ0Esa0JBQUlsWixJQUFJLEdBQVI7O0FBQ0Esa0JBQUlvWixRQUFRLEdBQVosR0FBa0I7QUFDaEJwWixvQkFBSSxjQUFPekssS0FBSyxDQUFMQSxRQUFLLENBQUxBLE1BQVAsR0FBT0EsQ0FBUCxFQUFKeUssR0FBSSxDQUFKQTtBQUNEOztBQUVEa1osMkJBQWEsQ0FBYkE7QUFDRDtBQUVELGdDQUFvQkEsYUFBYSxDQUFiQTtBQUNwQixnQ0FBb0JBLGFBQWEsQ0FBYkE7QUFDcEJBLHlCQUFhLENBQWJBO0FBQ0FBLHlCQUFhLENBQWJBO0FBQ0FBLHlCQUFhLENBQWJBO0FBQ0FBLHlCQUFhLENBQWJBO0FBQ0EsK0NBQ0VBLGFBQWEsQ0FBYkE7O0FBRUYsZ0JBQUksQ0FBSixXQUFnQjtBQUNkQSwyQkFBYSxDQUFiQTtBQUNBQSwyQkFBYSxDQUFiQSw0QkFBMEMsS0FBMUNBO0FBQ0FBLDJCQUFhLENBQWJBLDBCQUF3QyxLQUF4Q0E7QUFDQUEsMkJBQWEsQ0FBYkEsNkJBQTJDLEtBSjdCLHFCQUlkQSxFQUpjLENBTWQ7O0FBQ0E1RixrQkFBSSxDQUFKQTtBQUNBQSxrQkFBSSxDQUFKQTtBQUNBQSxrQkFBSSxDQUFKQTtBQUNEOztBQUVELGdCQUFJLENBQUN2YyxLQUFLLENBQUNELE1BQU0sQ0FBQ3doQixXQUFXLENBQVhBLFFBQWxCLGFBQWlCLENBQVAsQ0FBVixFQUF1RDtBQUNyRCxrQkFBSSxtQ0FBSixXQUFJLENBQUosRUFBcUQ7QUFDbkQsb0NBQ0VBLFdBQVcsQ0FEYixPQUVFQSxXQUFXLENBQVhBLFFBRkY7QUFLRDtBQVBILG1CQVFPO0FBQ0xBLHlCQUFXLENBQVhBLGNBQTBCLGFBQTFCQTtBQUNEOztBQUVEO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztrQ0FDVWUsTyxFQUFTO0FBQ2YsZ0JBQU1mLFdBQVcsR0FBR2UsT0FBTyxDQUFQQSxjQUFwQiw2QkFBb0JBLENBQXBCO0FBQUEsZ0JBQ0VkLGFBQWEsR0FBR0QsV0FBVyxDQUQ3QjtBQUFBLGdCQUVFWSxhQUFhLEdBQUdHLE9BQU8sQ0FBUEEsd0NBRmxCLFdBRWtCQSxFQUZsQjtBQUlBSCx5QkFBYSxDQUFiQSw2QkFBMkMsS0FBM0NBO0FBQ0FBLHlCQUFhLENBQWJBLGdDQUE4QyxLQUE5Q0E7QUFDQUEseUJBQWEsQ0FBYkEsZ0NBQThDLEtBQTlDQTtBQUVBRyxtQkFBTyxDQUFQQTtBQUVBZix1QkFBVyxDQUFYQSw2QkFBeUMsS0FBekNBO0FBQ0FBLHVCQUFXLENBQVhBLCtCQUEyQyxLQUEzQ0E7QUFDQUEsdUJBQVcsQ0FBWEE7QUFDQUEsdUJBQVcsQ0FBWEEsaUJBQTZCLGFBQTdCQTtBQUNBQSx1QkFBVyxDQUFYQSxpQkFBNkIsYUFBN0JBO0FBQ0EsbUJBQU9BLFdBQVcsQ0FBWEEsUUFBUDtBQUVBZSxtQkFBTyxDQUFQQTtBQUNBQSxtQkFBTyxDQUFQQTtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OENBQ3NCN2IsQyxFQUFHO0FBQ3JCLGdCQUFNOGEsV0FBVyxHQUFHOWEsQ0FBQyxDQUFyQjtBQUFBLGdCQUNFK2EsYUFBYSxHQUFHRCxXQUFXLENBRDdCO0FBQUEsZ0JBRUVZLGFBQWEsR0FBRyx5REFGbEIsV0FFa0IsRUFGbEI7QUFNQVosdUJBQVcsQ0FBWEE7QUFDQUEsdUJBQVcsQ0FBWEE7QUFFQVkseUJBQWEsQ0FBYkE7QUFDQUEseUJBQWEsQ0FBYkE7O0FBQ0E7O0FBQ0EvQixzQkFBVSxDQUFDLFlBQU07QUFDZitCLDJCQUFhLENBQWJBO0FBQ0Esa0JBQU16Z0IsTUFBTSxHQUFHNkQsTUFBTSxDQUFDNGMsYUFBYSxDQUFwQjVjLEtBQU0sQ0FBTkEsQ0FBZjtBQUNBNGMsMkJBQWEsQ0FBYkE7QUFDQUEsMkJBQWEsQ0FBYkE7QUFDQUEsMkJBQWEsQ0FBYkE7QUFMUSxlQUFWL0IsQ0FBVSxDQUFWQTtBQU9EO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztnREFDd0IzWixDLEVBQUc7QUFDdkIsZ0JBQU0wYixhQUFhLEdBQUcxYixDQUFDLENBQXZCO0FBQUEsZ0JBQ0VtWixPQUFPLEdBQUduWixDQUFDLENBRGI7QUFBQSxnQkFFRXlDLElBQUksR0FBR2laLGFBQWEsQ0FBYkEsUUFGVDtBQUFBLGdCQUdFL1ksaUJBQWlCLEdBQUcrWSxhQUFhLENBQWJBLFFBSHRCO0FBQUEsZ0JBSUU5WSxnQkFBZ0IsR0FBRzhZLGFBQWEsQ0FBYkEsUUFKckI7QUFBQSxnQkFLRTdZLGtCQUFrQixHQUFHNlksYUFBYSxDQUFiQSxRQUx2QjtBQUFBLGdCQU1FWCxhQUFhLEdBQUdXLGFBQWEsQ0FBYkEsUUFObEI7QUFBQSxnQkFPRVosV0FBVyxHQUFHLDBDQVBoQixhQU9nQixFQVBoQjs7QUFTQSxnQkFBSWdCLE9BQU8sR0FBWDtBQUFBLGdCQUNFbmhCLEtBQUssR0FEUDtBQUFBLGdCQUVFOGYsV0FBVyxHQUZiO0FBQUEsZ0JBR0VuWCxPQUFPLEdBQUcsbUNBSFosV0FHWSxDQUhaOztBQUtBLGdCQUFJO0FBQ0ZtWCx5QkFBVyxHQUFHa0Isc0VBQ1pELGFBQWEsQ0FBYkEsU0FEWUMseUVBQWRsQixJQUFja0IsRUFBZGxCO0FBREYsY0FTRSxVQUFVO0FBQ1ZBLHlCQUFXLEdBQVhBOztBQUNBOztBQUNBO0FBQ0Q7O0FBRURxQixtQkFBTyxHQUFHLDRCQUE0QixDQUE1QixLQUFrQzliLENBQUMsQ0FBREEsU0FBNUM4YjtBQUNBbmhCLGlCQUFLLEdBQUc4ZixXQUFXLElBQW5COWY7O0FBRUEseUJBQWE7QUFDWCtnQiwyQkFBYSxDQUFiQSxpQkFBK0IsYUFBL0JBO0FBQ0FBLDJCQUFhLENBQWJBLGlCQUErQixhQUEvQkE7QUFFQUEsMkJBQWEsQ0FBYkE7QUFDQUEsMkJBQWEsQ0FBYkE7QUFFQVoseUJBQVcsQ0FBWEE7QUFDQUEseUJBQVcsQ0FBWEE7QUFFQUEseUJBQVcsQ0FBWEEsY0FBMEIsYUFBMUJBOztBQUVBLHlCQUFXO0FBQ1RBLDJCQUFXLENBQVhBO0FBQ0FBLDJCQUFXLENBQVhBLHdCQUFvQ1ksYUFBYSxDQUFqRFo7O0FBQ0EsaURBQWlDWSxhQUFhLENBQTlDO0FBSEYscUJBSU87QUFDTEEsNkJBQWEsQ0FBYkEsUUFBc0JaLFdBQVcsQ0FBWEEsUUFBdEJZOztBQUNBO0FBQ0Q7QUFDRjtBQUNGO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBQ2lCQSxhLEVBQWVaLFcsRUFBYTtBQUN6QyxnQkFBSXhYLE9BQU8sR0FBWDtBQUNBLGdCQUFNNVEsS0FBSyxHQUFHNEcsTUFBTSxDQUFDb2lCLGFBQWEsQ0FBbEMsS0FBb0IsQ0FBcEI7O0FBQ0EsZ0JBQUlBLGFBQWEsQ0FBYkEscUNBQW1ELENBQUNuaUIsS0FBSyxDQUE3RCxLQUE2RCxDQUE3RCxFQUFzRTtBQUNwRSxrQkFBTWdKLEdBQUcsR0FBR21aLGFBQWEsQ0FBYkEsYUFBWixLQUFZQSxDQUFaO0FBQ0Esa0JBQU1wWixHQUFHLEdBQUdvWixhQUFhLENBQWJBLGFBQVosS0FBWUEsQ0FBWjtBQUNBLGtCQUFNbFosSUFBSSxHQUFHa1osYUFBYSxDQUFiQSxhQUFiLE1BQWFBLENBQWI7QUFFQSx1QkFBU3BZLE9BQU8sR0FBR0EsT0FBTyxJQUFJNVEsS0FBSyxJQUFJNEcsTUFBTSxDQUFwQ2dLLEdBQW9DLENBQXBDQTtBQUNULHVCQUFTQSxPQUFPLEdBQUdBLE9BQU8sSUFBSTVRLEtBQUssSUFBSTRHLE1BQU0sQ0FBcENnSyxHQUFvQyxDQUFwQ0E7QUFFVCx3QkFDRUEsT0FBTyxHQUNMQSxPQUFPLElBQUlzWCxhQUFhLENBQWJBLElBQWEsQ0FBYkEsS0FBd0JBLGFBQWEsQ0FBQ2MsYUFBYSxDQURoRXBZLEtBQ2tELENBRGxEQTtBQVRKLG1CQVdPQSxPQUFPLEdBQUdvWSxhQUFhLENBQXZCcFksYUFBVW9ZLEVBQVZwWTs7QUFFUCx5QkFBYTtBQUNYO0FBREYsbUJBRU87QUFDTDs7QUFDQSxtQ0FDRW9ZLGFBQWEsQ0FBYkEscUJBREY7QUFJRDs7QUFFRDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7eUNBQ2lCN0IsVyxFQUFhQyxhLEVBQWVwVyxLLEVBQU87QUFDaEQsZ0JBQUksYUFBSixVQUEyQjtBQUN6QjtBQUNEO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7MENBQ2tCRCxLLEVBQU9DLEssRUFBTztBQUM1QixnQkFBSSxhQUFKLFdBQTRCO0FBQzFCO0FBQ0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTs7OzsrQ0FDdUJnWSxhLEVBQWVaLFcsRUFBYTFOLEssRUFBTztBQUN0RCxnQkFDRTBOLFdBQVcsQ0FBWEEsNEJBQ0FBLFdBQVcsQ0FBWEEsYUFGRixVQUVFQSxDQUZGLEVBR0U7QUFDQUEseUJBQVcsQ0FBWEEsaUJBQTZCLGFBQTdCQTtBQUNBQSx5QkFBVyxDQUFYQSxpQkFBNkIsYUFBN0JBO0FBRUFZLDJCQUFhLENBQWJBLGlCQUErQixhQUEvQkE7QUFDQUEsMkJBQWEsQ0FBYkEsaUJBQStCLGFBQS9CQTtBQVJGLG1CQVNPO0FBQ0wsa0JBQUl0TyxLQUFLLEtBQVQsV0FBeUI7QUFDdkIwTiwyQkFBVyxDQUFYQSxpQkFBNkIsYUFBN0JBO0FBQ0FBLDJCQUFXLENBQVhBLGNBQTBCLGFBQTFCQTtBQUVBWSw2QkFBYSxDQUFiQSxpQkFBK0IsYUFBL0JBO0FBQ0FBLDZCQUFhLENBQWJBLGNBQTRCLGFBQTVCQTtBQUNEOztBQUVELGtCQUFJdE8sS0FBSyxLQUFULFNBQXVCO0FBQ3JCME4sMkJBQVcsQ0FBWEEsY0FBMEIsYUFBMUJBO0FBQ0FBLDJCQUFXLENBQVhBLGlCQUE2QixhQUE3QkE7QUFFQVksNkJBQWEsQ0FBYkEsY0FBNEIsYUFBNUJBO0FBQ0FBLDZCQUFhLENBQWJBLGlCQUErQixhQUEvQkE7QUFDRDtBQUNGO0FBQ0Y7Ozs7O0FBR1lmOzs7QUFBQUEsaUNBQWYsV0FBZUE7Ozs7Ozs7QUNuZmY7Ozs7O0E1SVVBO0NBVkEsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7QTZJQUEsQ0FBQyxTQUFTb0IsZ0NBQVQsQ0FBMENyakIsSUFBMUMsRUFBZ0RzakIsT0FBaEQsRUFBeUQ7QUFDekQsTUFBRyw4QkFBT3ZULE9BQVAsT0FBbUIsUUFBbkIsSUFBK0IsOEJBQU81UyxNQUFQLE9BQWtCLFFBQXBELEVBQ0NBLE1BQU0sQ0FBQzRTLE9BQVAsR0FBaUJ1VCxPQUFPLEVBQXhCLENBREQsS0FFSyxJQUFHLElBQUgsRUFDSkMsaUNBQU8sRUFBRCxvQ0FBS0QsT0FBTDtBQUFBO0FBQUE7QUFBQSxvR0FBTixDQURJLEtBRUEsRUFHSjtBQUNELENBVEQsRUFTRyxPQUFPcGpCLElBQVAsS0FBZ0IsV0FBaEIsR0FBOEJBLElBQTlCLFNBVEgsRUFTOEMsWUFBVztBQUN6RDtBQUFPO0FBQVUsY0FBUzFDLE9BQVQsRUFBa0I7QUFBRTs7QUFDckM7QUFBVTs7QUFDVjtBQUFVLFVBQUlnbUIsZ0JBQWdCLEdBQUcsRUFBdkI7QUFDVjs7QUFDQTtBQUFVOztBQUNWOztBQUFVLGVBQVNDLG1CQUFULENBQTZCQyxRQUE3QixFQUF1QztBQUNqRDs7QUFDQTtBQUFXOztBQUNYO0FBQVcsWUFBR0YsZ0JBQWdCLENBQUNFLFFBQUQsQ0FBbkIsRUFBK0I7QUFDMUM7QUFBWSxpQkFBT0YsZ0JBQWdCLENBQUNFLFFBQUQsQ0FBaEIsQ0FBMkIzVCxPQUFsQztBQUNaO0FBQVk7QUFDWjtBQUFXOztBQUNYOzs7QUFBVyxZQUFJNVMsTUFBTSxHQUFHcW1CLGdCQUFnQixDQUFDRSxRQUFELENBQWhCLEdBQTZCO0FBQ3JEO0FBQVkvcEIsV0FBQyxFQUFFK3BCLFFBRHNDOztBQUVyRDtBQUFZOXBCLFdBQUMsRUFBRSxLQUZzQzs7QUFHckQ7QUFBWW1XLGlCQUFPLEVBQUU7QUFDckI7O0FBSnFELFNBQTFDO0FBS1g7O0FBQ0E7QUFBVzs7QUFDWDs7QUFBV3ZTLGVBQU8sQ0FBQ2ttQixRQUFELENBQVAsQ0FBa0JDLElBQWxCLENBQXVCeG1CLE1BQU0sQ0FBQzRTLE9BQTlCLEVBQXVDNVMsTUFBdkMsRUFBK0NBLE1BQU0sQ0FBQzRTLE9BQXRELEVBQStEMFQsbUJBQS9EO0FBQ1g7O0FBQ0E7QUFBVzs7QUFDWDs7QUFBV3RtQixjQUFNLENBQUN2RCxDQUFQLEdBQVcsSUFBWDtBQUNYOztBQUNBO0FBQVc7O0FBQ1g7O0FBQVcsZUFBT3VELE1BQU0sQ0FBQzRTLE9BQWQ7QUFDWDtBQUFXO0FBQ1g7O0FBQ0E7O0FBQ0E7QUFBVTs7QUFDVjs7O0FBQVUwVCx5QkFBbUIsQ0FBQ0csQ0FBcEIsR0FBd0JwbUIsT0FBeEI7QUFDVjs7QUFDQTtBQUFVOztBQUNWOztBQUFVaW1CLHlCQUFtQixDQUFDN0IsQ0FBcEIsR0FBd0I0QixnQkFBeEI7QUFDVjs7QUFDQTtBQUFVOztBQUNWOztBQUFVQyx5QkFBbUIsQ0FBQ0ksQ0FBcEIsR0FBd0IsVUFBUzlULE9BQVQsRUFBa0I1VSxJQUFsQixFQUF3QjJvQixNQUF4QixFQUFnQztBQUNsRTtBQUFXLFlBQUcsQ0FBQ0wsbUJBQW1CLENBQUNNLENBQXBCLENBQXNCaFUsT0FBdEIsRUFBK0I1VSxJQUEvQixDQUFKLEVBQTBDO0FBQ3JEO0FBQVluQyxnQkFBTSxDQUFDRCxjQUFQLENBQXNCZ1gsT0FBdEIsRUFBK0I1VSxJQUEvQixFQUFxQztBQUNqRDtBQUFhbEIsd0JBQVksRUFBRSxLQURzQjs7QUFFakQ7QUFBYUMsc0JBQVUsRUFBRSxJQUZ3Qjs7QUFHakQ7QUFBYUcsZUFBRyxFQUFFeXBCO0FBQ2xCOztBQUppRCxXQUFyQztBQUtaO0FBQVk7QUFDWjs7QUFBVyxPQVJEO0FBU1Y7O0FBQ0E7QUFBVTs7QUFDVjs7O0FBQVVMLHlCQUFtQixDQUFDTyxDQUFwQixHQUF3QixVQUFTN21CLE1BQVQsRUFBaUI7QUFDbkQ7QUFBVyxZQUFJMm1CLE1BQU0sR0FBRzNtQixNQUFNLElBQUlBLE1BQU0sQ0FBQzhtQixVQUFqQjtBQUN4QjtBQUFZLGlCQUFTQyxVQUFULEdBQXNCO0FBQUUsaUJBQU8vbUIsTUFBTSxDQUFDLFNBQUQsQ0FBYjtBQUEyQixTQUR2QztBQUV4QjtBQUFZLGlCQUFTZ25CLGdCQUFULEdBQTRCO0FBQUUsaUJBQU9obkIsTUFBUDtBQUFnQixTQUYvQztBQUdYOztBQUFXc21CLDJCQUFtQixDQUFDSSxDQUFwQixDQUFzQkMsTUFBdEIsRUFBOEIsR0FBOUIsRUFBbUNBLE1BQW5DO0FBQ1g7OztBQUFXLGVBQU9BLE1BQVA7QUFDWDtBQUFXLE9BTkQ7QUFPVjs7QUFDQTtBQUFVOztBQUNWOzs7QUFBVUwseUJBQW1CLENBQUNNLENBQXBCLEdBQXdCLFVBQVM3aUIsTUFBVCxFQUFpQmtqQixRQUFqQixFQUEyQjtBQUFFLGVBQU9wckIsTUFBTSxDQUFDcXJCLFNBQVAsQ0FBaUI1aEIsY0FBakIsQ0FBZ0NraEIsSUFBaEMsQ0FBcUN6aUIsTUFBckMsRUFBNkNrakIsUUFBN0MsQ0FBUDtBQUFnRSxPQUFySDtBQUNWOztBQUNBO0FBQVU7O0FBQ1Y7OztBQUFVWCx5QkFBbUIsQ0FBQ2EsQ0FBcEIsR0FBd0IsRUFBeEI7QUFDVjs7QUFDQTtBQUFVOztBQUNWOztBQUFVLGFBQU9iLG1CQUFtQixDQUFDQSxtQkFBbUIsQ0FBQ2MsQ0FBcEIsR0FBd0IsQ0FBekIsQ0FBMUI7QUFDVjtBQUFVLEtBL0RNO0FBZ0VoQjs7QUFDQTtBQUFVO0FBQ1Y7O0FBQ0E7QUFBTyxjQUFTcG5CLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7QUFDQTs7QUFBaUNlLHlCQUFtQixDQUFDLEdBQUQsQ0FBbkIsR0FBMkJ6TCxTQUEzQjs7QUFDakMsZUFBU0EsU0FBVCxDQUFtQnJZLFdBQW5CLEVBQWdDO0FBQzlCLFlBQUlBLFdBQVcsS0FBSyxJQUFoQixJQUF3QkEsV0FBVyxLQUFLLElBQXhDLElBQWdEQSxXQUFXLEtBQUssS0FBcEUsRUFBMkU7QUFDekUsaUJBQU8rakIsR0FBUDtBQUNEOztBQUVELFlBQUk5akIsTUFBTSxHQUFHQyxNQUFNLENBQUNGLFdBQUQsQ0FBbkI7O0FBRUEsWUFBSUcsS0FBSyxDQUFDRixNQUFELENBQVQsRUFBbUI7QUFDakIsaUJBQU9BLE1BQVA7QUFDRDs7QUFFRCxlQUFPQSxNQUFNLEdBQUcsQ0FBVCxHQUFhRyxJQUFJLENBQUM0akIsSUFBTCxDQUFVL2pCLE1BQVYsQ0FBYixHQUFpQ0csSUFBSSxDQUFDNmpCLEtBQUwsQ0FBV2hrQixNQUFYLENBQXhDO0FBQ0Q7QUFFRDs7QUFBTyxLQXBCRztBQXFCVjs7QUFDQTtBQUFPLGNBQVN4RCxNQUFULEVBQWlCcW5CLG1CQUFqQixFQUFzQ2YsbUJBQXRDLEVBQTJEO0FBRWxFO0FBQ0E7O0FBQXFCLFVBQUltQix5Q0FBeUMsR0FBR25CLG1CQUFtQixDQUFDLENBQUQsQ0FBbkU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUE2QmUseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUE0QkkseUNBQXlDLENBQUM7QUFBSTtBQUFMLE9BQXJFO0FBRTdCO0FBQU8sS0FwQ0c7QUFxQ1Y7O0FBQ0E7QUFBTyxjQUFTem5CLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7QUFDQTs7QUFBcUIsVUFBSW9CLHVDQUF1QyxHQUFHcEIsbUJBQW1CLENBQUMsQ0FBRCxDQUFqRTtBQUNyQjs7O0FBQWlDQSx5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBT0ssdUNBQXVDLENBQUMsR0FBRCxDQUE5QztBQUFzRCxPQUFuSDtBQUNqQzs7O0FBQWlDcEIseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsR0FBM0MsRUFBZ0QsWUFBVztBQUFFLGVBQU9LLHVDQUF1QyxDQUFDLEdBQUQsQ0FBOUM7QUFBc0QsT0FBbkg7QUFDakM7OztBQUFpQ3BCLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLEdBQTNDLEVBQWdELFlBQVc7QUFBRSxlQUFPSyx1Q0FBdUMsQ0FBQyxHQUFELENBQTlDO0FBQXNELE9BQW5IO0FBQ2pDOzs7QUFBaUNwQix5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBT0ssdUNBQXVDLENBQUMsR0FBRCxDQUE5QztBQUFzRCxPQUFuSDtBQUNqQzs7O0FBQWlDcEIseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsR0FBM0MsRUFBZ0QsWUFBVztBQUFFLGVBQU9LLHVDQUF1QyxDQUFDLEdBQUQsQ0FBOUM7QUFBc0QsT0FBbkg7QUFDakM7OztBQUFpQ3BCLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLEdBQTNDLEVBQWdELFlBQVc7QUFBRSxlQUFPSyx1Q0FBdUMsQ0FBQyxHQUFELENBQTlDO0FBQXNELE9BQW5IO0FBQ2pDOzs7QUFBaUNwQix5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBT0ssdUNBQXVDLENBQUMsR0FBRCxDQUE5QztBQUFzRCxPQUFuSDtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTs7O0FBQTZCTCx5QkFBbUIsQ0FBQyxHQUFELENBQW5CLEdBQTRCSyx1Q0FBdUMsQ0FBQztBQUFJO0FBQUwsT0FBbkU7QUFFN0I7QUFBTyxLQTVERztBQTZEVjs7QUFDQTtBQUFPLGNBQVMxbkIsTUFBVCxFQUFpQnFuQixtQkFBakIsRUFBc0NmLG1CQUF0QyxFQUEyRDtBQUVsRTtBQUNBOztBQUFpQ2UseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUEyQjdmLGVBQTNCO0FBQ2pDOztBQUFxQixVQUFJbWdCLHNEQUFzRCxHQUFHckIsbUJBQW1CLENBQUMsQ0FBRCxDQUFoRjs7QUFHckIsVUFBSTVlLG9CQUFvQixHQUFHLE9BQTNCO0FBQ0EsVUFBSUMsc0JBQXNCLEdBQUcsS0FBN0I7QUFFQSxVQUFJQyxRQUFRLEdBQUc7QUFDYkMsZ0JBQVEsRUFBRSxZQURHO0FBRWJDLGlCQUFTLEVBQUUsT0FGRTtBQUdiQyxrQkFBVSxFQUFFLGlCQUhDO0FBSWJDLG9CQUFZLEVBQUUsMEJBSkQ7QUFLYkMsb0JBQVksRUFBRTtBQUxELE9BQWYsQ0FWa0UsQ0FrQmxFOztBQUNBLGVBQVNULGVBQVQsQ0FBeUJvZ0IsY0FBekIsRUFBeUN4Z0IsSUFBekMsRUFBK0M7QUFDN0MsWUFBSWMsS0FBSjtBQUNBLFlBQUlJLGNBQUosQ0FGNkMsQ0FJN0M7O0FBQ0FKLGFBQUssR0FBR04sUUFBUSxDQUFDRSxTQUFULENBQW1CK2YsSUFBbkIsQ0FBd0JELGNBQXhCLENBQVI7O0FBQ0EsWUFBSTFmLEtBQUosRUFBVztBQUNULGlCQUFPLENBQVA7QUFDRDs7QUFFRCxZQUFJQyxLQUFKLENBVjZDLENBWTdDOztBQUNBRCxhQUFLLEdBQUdOLFFBQVEsQ0FBQ0csVUFBVCxDQUFvQjhmLElBQXBCLENBQXlCRCxjQUF6QixDQUFSOztBQUNBLFlBQUkxZixLQUFKLEVBQVc7QUFDVEMsZUFBSyxHQUFHQyxRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQWhCOztBQUVBLGNBQUksQ0FBQ0csZ0JBQWdCLENBQUNGLEtBQUQsQ0FBckIsRUFBOEI7QUFDNUIsbUJBQU9tZixHQUFQO0FBQ0Q7O0FBRURoZix3QkFBYyxHQUFHSCxLQUFLLEdBQUdULG9CQUF6QjtBQUNBLGlCQUFPUSxLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQWEsR0FBYixHQUFtQixDQUFDSSxjQUFwQixHQUFxQ0EsY0FBNUM7QUFDRCxTQXZCNEMsQ0F5QjdDOzs7QUFDQUosYUFBSyxHQUFHTixRQUFRLENBQUNJLFlBQVQsQ0FBc0I2ZixJQUF0QixDQUEyQkQsY0FBM0IsQ0FBUjs7QUFDQSxZQUFJMWYsS0FBSixFQUFXO0FBQ1RDLGVBQUssR0FBR0MsUUFBUSxDQUFDRixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQUFoQjtBQUNBLGNBQUlLLE9BQU8sR0FBR0gsUUFBUSxDQUFDRixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQUF0Qjs7QUFFQSxjQUFJLENBQUNHLGdCQUFnQixDQUFDRixLQUFELEVBQVFJLE9BQVIsQ0FBckIsRUFBdUM7QUFDckMsbUJBQU8rZSxHQUFQO0FBQ0Q7O0FBRURoZix3QkFBYyxHQUNaSCxLQUFLLEdBQUdULG9CQUFSLEdBQStCYSxPQUFPLEdBQUdaLHNCQUQzQztBQUVBLGlCQUFPTyxLQUFLLENBQUMsQ0FBRCxDQUFMLEtBQWEsR0FBYixHQUFtQixDQUFDSSxjQUFwQixHQUFxQ0EsY0FBNUM7QUFDRCxTQXRDNEMsQ0F3QzdDOzs7QUFDQUosYUFBSyxHQUFHTixRQUFRLENBQUNLLFlBQVQsQ0FBc0I0ZixJQUF0QixDQUEyQkQsY0FBM0IsQ0FBUjs7QUFDQSxZQUFJMWYsS0FBSixFQUFXO0FBQ1Q7QUFDQSxjQUFJTSxNQUFNLEdBQUczTSxNQUFNLENBQUM4ckIsc0RBQXNELENBQUM7QUFBSTtBQUFMLFdBQXZELENBQU4sQ0FBa0Z2Z0IsSUFBbEYsRUFBd0Z3Z0IsY0FBeEYsQ0FBYjtBQUNBLGNBQUlsZixLQUFLLEdBQUdDLElBQUksQ0FBQ21mLEdBQUwsQ0FDVnRmLE1BQU0sQ0FBQyxDQUFELENBREksRUFFVkEsTUFBTSxDQUFDLENBQUQsQ0FBTixHQUFZLENBRkYsRUFHVkEsTUFBTSxDQUFDLENBQUQsQ0FISSxFQUlWQSxNQUFNLENBQUMsQ0FBRCxDQUpJLEVBS1ZBLE1BQU0sQ0FBQyxDQUFELENBTEksRUFNVkEsTUFBTSxDQUFDLENBQUQsQ0FOSSxDQUFaO0FBUUEsY0FBSUkscUJBQXFCLEdBQUd4QixJQUFJLENBQUMyZ0IsT0FBTCxLQUFrQjNnQixJQUFJLENBQUMyZ0IsT0FBTCxLQUFpQixJQUEvRDtBQUNBLGlCQUFPLEVBQUVyZixLQUFLLEdBQUdFLHFCQUFWLENBQVA7QUFDRDs7QUFFRCxlQUFPLENBQVA7QUFDRDs7QUFFRCxlQUFTUCxnQkFBVCxDQUEwQkYsS0FBMUIsRUFBaUNJLE9BQWpDLEVBQTBDO0FBQ3hDLFlBQUlBLE9BQU8sSUFBSSxJQUFYLEtBQW9CQSxPQUFPLEdBQUcsQ0FBVixJQUFlQSxPQUFPLEdBQUcsRUFBN0MsQ0FBSixFQUFzRDtBQUNwRCxpQkFBTyxLQUFQO0FBQ0Q7O0FBRUQsZUFBTyxJQUFQO0FBQ0Q7QUFHRDs7QUFBTyxLQXRKRztBQXVKVjs7QUFDQTtBQUFPLGNBQVN2SSxNQUFULEVBQWlCcW5CLG1CQUFqQixFQUFzQ2YsbUJBQXRDLEVBQTJEO0FBRWxFO0FBQ0E7O0FBQXFCLFVBQUkwQix5Q0FBeUMsR0FBRzFCLG1CQUFtQixDQUFDLEVBQUQsQ0FBbkU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUE2QmUseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUE0QlcseUNBQXlDLENBQUM7QUFBSTtBQUFMLE9BQXJFO0FBRTdCO0FBQU8sS0F0S0c7QUF1S1Y7O0FBQ0E7QUFBTyxjQUFTaG9CLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7O0FBQ0F6cUIsWUFBTSxDQUFDRCxjQUFQLENBQXNCeXJCLG1CQUF0QixFQUEyQyxZQUEzQyxFQUF5RDtBQUFFeHFCLGFBQUssRUFBRTtBQUFULE9BQXpEO0FBQ0E7O0FBQStCeXBCLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLE9BQTNDLEVBQW9ELFlBQVc7QUFBRSxlQUFPWSxLQUFQO0FBQWUsT0FBaEY7QUFDL0I7OztBQUFxQixVQUFJUix5Q0FBeUMsR0FBR25CLG1CQUFtQixDQUFDLENBQUQsQ0FBbkU7QUFDckI7OztBQUFxQixVQUFJNEIsdUNBQXVDLEdBQUc1QixtQkFBbUIsQ0FBQyxDQUFELENBQWpFO0FBQ3JCOzs7QUFBcUIsVUFBSTZCLHlDQUF5QyxHQUFHN0IsbUJBQW1CLENBQUMsQ0FBRCxDQUFuRTtBQUNyQjs7O0FBQXFCLFVBQUk4QixvQ0FBb0MsR0FBRzlCLG1CQUFtQixDQUFDLEVBQUQsQ0FBOUQ7QUFDckI7OztBQUFpQ0EseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsT0FBM0MsRUFBb0QsWUFBVztBQUFFLGVBQU9lLG9DQUFvQyxDQUFDLEdBQUQsQ0FBM0M7QUFBbUQsT0FBcEg7QUFDakM7OztBQUFpQzlCLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLFlBQTNDLEVBQXlELFlBQVc7QUFBRSxlQUFPSSx5Q0FBeUMsQ0FBQyxHQUFELENBQWhEO0FBQXdELE9BQTlIO0FBQ2pDOzs7QUFBaUNuQix5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxVQUEzQyxFQUF1RCxZQUFXO0FBQUUsZUFBT2EsdUNBQXVDLENBQUMsR0FBRCxDQUE5QztBQUFzRCxPQUExSDtBQUNqQzs7O0FBQWlDNUIseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsWUFBM0MsRUFBeUQsWUFBVztBQUFFLGVBQU9jLHlDQUF5QyxDQUFDLEdBQUQsQ0FBaEQ7QUFBd0QsT0FBOUg7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUtBLFVBQUlGLEtBQUssR0FBRztBQUNWSSxhQUFLLEVBQUU7QUFDTEMsc0JBQVksRUFBRUosdUNBQXVDLENBQUM7QUFBSTtBQUFMLFdBRGhEO0FBRUxLLHVCQUFhLEVBQUVMLHVDQUF1QyxDQUFDO0FBQUk7QUFBTCxXQUZqRDtBQUdMTSw4QkFBb0IsRUFBRU4sdUNBQXVDLENBQUM7QUFBSTtBQUFMLFdBSHhEO0FBSUxPLHVCQUFhLEVBQUVQLHVDQUF1QyxDQUFDO0FBQUk7QUFBTCxXQUpqRDtBQUtMUSx1QkFBYSxFQUFFUix1Q0FBdUMsQ0FBQztBQUFJO0FBQUwsV0FMakQ7QUFNTFMscUJBQVcsRUFBRVQsdUNBQXVDLENBQUM7QUFBSTtBQUFMLFdBTi9DO0FBT0xVLDZCQUFtQixFQUFFVix1Q0FBdUMsQ0FBQztBQUFJO0FBQUw7QUFQdkQ7QUFERyxPQUFaO0FBV0E7O0FBQTZCYix5QkFBbUIsQ0FBQyxTQUFELENBQW5CLEdBQWtDZSxvQ0FBb0MsQ0FBQztBQUFJO0FBQUwsT0FBdEU7QUFHN0I7QUFBTyxLQTlNRztBQStNVjs7QUFDQTtBQUFPLGNBQVNwb0IsTUFBVCxFQUFpQnFuQixtQkFBakIsRUFBc0NmLG1CQUF0QyxFQUEyRDtBQUVsRTs7QUFDQSxlQUFTdUMsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQUUsWUFBSSxFQUFFRCxRQUFRLFlBQVlDLFdBQXRCLENBQUosRUFBd0M7QUFBRSxnQkFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUEyRDtBQUFFOztBQUV6SixlQUFTQyxpQkFBVCxDQUEyQmhzQixNQUEzQixFQUFtQ29ULEtBQW5DLEVBQTBDO0FBQUUsYUFBSyxJQUFJN1QsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZULEtBQUssQ0FBQ2pMLE1BQTFCLEVBQWtDNUksQ0FBQyxFQUFuQyxFQUF1QztBQUFFLGNBQUlzQixVQUFVLEdBQUd1UyxLQUFLLENBQUM3VCxDQUFELENBQXRCO0FBQTJCc0Isb0JBQVUsQ0FBQ2YsVUFBWCxHQUF3QmUsVUFBVSxDQUFDZixVQUFYLElBQXlCLEtBQWpEO0FBQXdEZSxvQkFBVSxDQUFDaEIsWUFBWCxHQUEwQixJQUExQjtBQUFnQyxjQUFJLFdBQVdnQixVQUFmLEVBQTJCQSxVQUFVLENBQUNULFFBQVgsR0FBc0IsSUFBdEI7QUFBNEJ4QixnQkFBTSxDQUFDRCxjQUFQLENBQXNCcUIsTUFBdEIsRUFBOEJhLFVBQVUsQ0FBQ3BCLEdBQXpDLEVBQThDb0IsVUFBOUM7QUFBNEQ7QUFBRTs7QUFFN1QsZUFBU29yQixZQUFULENBQXNCSCxXQUF0QixFQUFtQ0ksVUFBbkMsRUFBK0NDLFdBQS9DLEVBQTREO0FBQUUsWUFBSUQsVUFBSixFQUFnQkYsaUJBQWlCLENBQUNGLFdBQVcsQ0FBQzdCLFNBQWIsRUFBd0JpQyxVQUF4QixDQUFqQjtBQUFzRCxZQUFJQyxXQUFKLEVBQWlCSCxpQkFBaUIsQ0FBQ0YsV0FBRCxFQUFjSyxXQUFkLENBQWpCO0FBQTZDLGVBQU9MLFdBQVA7QUFBcUI7QUFFdk47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFVBQUlqRCxVQUFVLEdBQ2QsYUFDQSxZQUFZO0FBQ1YsaUJBQVNBLFVBQVQsR0FBc0I7QUFDcEIrQyx5QkFBZSxDQUFDLElBQUQsRUFBTy9DLFVBQVAsQ0FBZjtBQUNEOztBQUVEb0Qsb0JBQVksQ0FBQ3BELFVBQUQsRUFBYSxJQUFiLEVBQW1CLENBQUM7QUFDOUJwcEIsYUFBRyxFQUFFLE1BRHlCOztBQUc5QjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJRyxlQUFLLEVBQUUsU0FBUytQLElBQVQsQ0FBY3BKLE1BQWQsRUFBc0I2bEIsS0FBdEIsRUFBNkI7QUFDbEMsZ0JBQUl2YyxpQkFBaUIsR0FBR3dGLFNBQVMsQ0FBQ2xOLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JrTixTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCZ1gsU0FBekMsR0FBcURoWCxTQUFTLENBQUMsQ0FBRCxDQUE5RCxHQUFvRSxHQUE1RjtBQUNBLGdCQUFJdkYsZ0JBQWdCLEdBQUd1RixTQUFTLENBQUNsTixNQUFWLEdBQW1CLENBQW5CLElBQXdCa04sU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmdYLFNBQXpDLEdBQXFEaFgsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsR0FBM0Y7QUFDQSxnQkFBSXRGLGtCQUFrQixHQUFHc0YsU0FBUyxDQUFDbE4sTUFBVixHQUFtQixDQUFuQixJQUF3QmtOLFNBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUJnWCxTQUF6QyxHQUFxRGhYLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEtBQTdGO0FBQ0EsZ0JBQUlpWCxLQUFLLEdBQUdqWCxTQUFTLENBQUNsTixNQUFWLEdBQW1CLENBQW5CLElBQXdCa04sU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmdYLFNBQXpDLEdBQXFEaFgsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsSUFBaEY7QUFDQSxnQkFBSWtYLE9BQU8sR0FBR0gsS0FBSyxDQUFDamtCLE1BQXBCOztBQUVBLGdCQUFJLE1BQU1va0IsT0FBVixFQUFtQjtBQUNqQixrQkFBSUQsS0FBSixFQUFXLE9BQU9FLEdBQVAsQ0FBWCxDQUF1QjtBQUF2QixtQkFDSyxNQUFNO0FBQ1B6ckIsc0JBQUksRUFBRSxXQURDO0FBRVAwckIseUJBQU8sRUFBRTtBQUZGLGlCQUFOO0FBSU4sYUFiaUMsQ0FhaEM7OztBQUdGLGdCQUFJQyxpQkFBaUIsR0FBRyxDQUF4QjtBQUNBLGdCQUFJQyxnQkFBZ0IsR0FBRyxDQUF2QjtBQUNBLGdCQUFJQyxZQUFZLEdBQUcsS0FBbkI7O0FBRUEsaUJBQUssSUFBSXJ0QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZ3RCLE9BQXBCLEVBQTZCLEVBQUVodEIsQ0FBL0IsRUFBa0M7QUFDaEMsa0JBQUlpcUIsQ0FBQyxHQUFHNEMsS0FBSyxDQUFDUyxNQUFOLENBQWF0dEIsQ0FBYixDQUFSOztBQUVBLGtCQUFJaXFCLENBQUMsSUFBSSxHQUFMLElBQVlBLENBQUMsSUFBSSxHQUFyQixFQUEwQjtBQUN4QixvQkFBSW9ELFlBQUosRUFBa0IsRUFBRUQsZ0JBQUYsQ0FBbEIsS0FBMEMsRUFBRUQsaUJBQUY7QUFDM0MsZUFGRCxNQUVPLElBQUlsRCxDQUFDLElBQUksR0FBVCxFQUFjb0QsWUFBWSxHQUFHLElBQWY7QUFDdEI7O0FBRUQsZ0JBQUlFLEdBQUcsR0FBR2pFLFVBQVUsQ0FBQ2tFLE1BQVgsQ0FBa0J4bUIsTUFBbEIsRUFBMEJvbUIsZ0JBQTFCLENBQVY7O0FBRUEsZ0JBQUlLLEtBQUssR0FBR25FLFVBQVUsQ0FBQ29FLFlBQVgsQ0FBd0JILEdBQXhCLENBQVosQ0E5QmtDLENBOEJROzs7QUFHMUMsZ0JBQUlJLEtBQUssR0FBR0YsS0FBSyxDQUFDN2tCLE1BQWxCO0FBQ0EsZ0JBQUlnbEIsZ0JBQWdCLEdBQUcsQ0FBdkI7QUFDQSxnQkFBSUMsZUFBZSxHQUFHLENBQXRCO0FBQ0FSLHdCQUFZLEdBQUcsS0FBZjs7QUFFQSxpQkFBSyxJQUFJUyxFQUFFLEdBQUcsQ0FBZCxFQUFpQkEsRUFBRSxHQUFHSCxLQUF0QixFQUE2QixFQUFFRyxFQUEvQixFQUFtQztBQUNqQyxrQkFBSUwsS0FBSyxDQUFDSyxFQUFELENBQUwsSUFBYSxHQUFqQixFQUFzQlQsWUFBWSxHQUFHLElBQWYsQ0FBdEIsS0FBK0M7QUFDN0Msb0JBQUlBLFlBQUosRUFBa0IsRUFBRVEsZUFBRixDQUFsQixLQUF5QyxFQUFFRCxnQkFBRjtBQUMxQztBQUNGLGFBMUNpQyxDQTBDaEM7OztBQUdGLGdCQUFJQSxnQkFBZ0IsR0FBR1QsaUJBQXZCLEVBQTBDO0FBQ3hDLGtCQUFJSixLQUFKLEVBQVcsT0FBTy9sQixNQUFNLENBQUMyRCxRQUFQLEVBQVAsQ0FBWCxDQUFxQztBQUFyQyxtQkFDSyxNQUFNO0FBQ1BuSixzQkFBSSxFQUFFLFdBREM7QUFFUDByQix5QkFBTyxFQUFFO0FBRkYsaUJBQU47QUFJTixhQW5EaUMsQ0FtRGhDOzs7QUFHRixnQkFBSVcsZUFBZSxHQUFHVCxnQkFBdEIsRUFBd0M7QUFDdENHLGlCQUFHLEdBQUdqRSxVQUFVLENBQUNrRSxNQUFYLENBQWtCRCxHQUFsQixFQUF1QkgsZ0JBQXZCLENBQU47QUFDQUssbUJBQUssR0FBR25FLFVBQVUsQ0FBQ29FLFlBQVgsQ0FBd0JILEdBQXhCLENBQVI7QUFDQUksbUJBQUssR0FBR0YsS0FBSyxDQUFDN2tCLE1BQWQsQ0FIc0MsQ0FHaEI7O0FBRXRCZ2xCLDhCQUFnQixHQUFHLENBQW5CO0FBQ0FDLDZCQUFlLEdBQUcsQ0FBbEI7QUFDQVIsMEJBQVksR0FBRyxLQUFmOztBQUVBLG1CQUFLLElBQUlVLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdKLEtBQXhCLEVBQStCLEVBQUVJLEdBQWpDLEVBQXNDO0FBQ3BDLG9CQUFJTixLQUFLLENBQUNNLEdBQUQsQ0FBTCxJQUFjLEdBQWxCLEVBQXVCVixZQUFZLEdBQUcsSUFBZixDQUF2QixLQUFnRDtBQUM5QyxzQkFBSUEsWUFBSixFQUFrQixFQUFFUSxlQUFGLENBQWxCLEtBQXlDLEVBQUVELGdCQUFGO0FBQzFDO0FBQ0YsZUFicUMsQ0FhcEM7OztBQUdGLGtCQUFJQSxnQkFBZ0IsR0FBR1QsaUJBQXZCLEVBQTBDO0FBQ3hDLG9CQUFJSixLQUFKLEVBQVcsT0FBTy9sQixNQUFNLENBQUMyRCxRQUFQLEVBQVAsQ0FBWCxDQUFxQztBQUFyQyxxQkFDSyxNQUFNO0FBQ1BuSix3QkFBSSxFQUFFLFdBREM7QUFFUDByQiwyQkFBTyxFQUFFO0FBRkYsbUJBQU47QUFJTjtBQUNGOztBQUVELGdCQUFJYyxRQUFRLEdBQUcsR0FBZjtBQUFBLGdCQUNJQyxTQUFTLEdBQUcsR0FEaEI7QUFFQSxnQkFBSUMsS0FBSyxHQUFHLENBQVo7QUFBQSxnQkFDSUMsTUFBTSxHQUFHLENBRGI7QUFBQSxnQkFFSUMsUUFBUSxHQUFHLENBRmY7QUFHQSxnQkFBSXZCLEtBQUssQ0FBQ1MsTUFBTixDQUFhLENBQWIsS0FBbUIsR0FBdkIsRUFBNEJVLFFBQVEsR0FBRyxHQUFYO0FBQzVCLGdCQUFJSyxRQUFRLEdBQUdMLFFBQWY7QUFDQSxnQkFBSU0sVUFBVSxHQUFHaEYsVUFBVSxDQUFDaUYsUUFBWCxDQUFvQmhCLEdBQXBCLElBQTJCLENBQTVDO0FBQ0EsZ0JBQUlpQixXQUFXLEdBQUdiLEtBQUssR0FBRyxDQUFSLElBQWFkLEtBQUssQ0FBQzRCLE9BQU4sQ0FBYyxHQUFkLEtBQXNCLENBQXJEO0FBQ0EsZ0JBQUlDLFNBQVMsR0FBRyxLQUFoQjtBQUNBLGdCQUFJQyxVQUFVLEdBQUcsS0FBakI7QUFDQSxnQkFBSUMsUUFBUSxHQUFHLEtBQWY7QUFDQXZCLHdCQUFZLEdBQUcsS0FBZjtBQUNBLGdCQUFJdGYsR0FBRyxHQUFHLElBQUlySSxLQUFKLENBQVVzbkIsT0FBVixDQUFWOztBQUVBLGlCQUFLLElBQUk2QixPQUFPLEdBQUcsQ0FBbkIsRUFBc0JBLE9BQU8sR0FBRzdCLE9BQWhDLEVBQXlDLEVBQUU2QixPQUEzQyxFQUFvRDtBQUNsRCxrQkFBSUMsRUFBRSxHQUFHakMsS0FBSyxDQUFDUyxNQUFOLENBQWF1QixPQUFiLENBQVQ7O0FBRUEsc0JBQVFDLEVBQVI7QUFDRSxxQkFBSyxHQUFMO0FBQ0Usb0JBQUUzQixpQkFBRjs7QUFFQSxzQkFBSUEsaUJBQWlCLEdBQUdTLGdCQUFwQixJQUF3Q00sS0FBSyxHQUFHUCxLQUFwRCxFQUEyRDtBQUN6RDVmLHVCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWNWLEtBQUssQ0FBQ1MsS0FBRCxDQUFuQjtBQUNBLHNCQUFFQSxLQUFGO0FBQ0FTLDhCQUFVLEdBQUcsSUFBYjtBQUNELG1CQUpELE1BSU87QUFDTDVnQix1QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjLEdBQWQ7QUFDQU8sNkJBQVMsR0FBRyxJQUFaO0FBQ0Q7O0FBRUQsb0JBQUVQLE1BQUY7QUFDQTs7QUFFRixxQkFBSyxHQUFMO0FBQ0Usb0JBQUVoQixpQkFBRjs7QUFFQSxzQkFBSUEsaUJBQWlCLEdBQUdTLGdCQUFwQixJQUF3Q00sS0FBSyxHQUFHUCxLQUFwRCxFQUEyRDtBQUN6RDVmLHVCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWNWLEtBQUssQ0FBQ1MsS0FBRCxDQUFuQjtBQUNBLHNCQUFFQSxLQUFGO0FBQ0FTLDhCQUFVLEdBQUcsSUFBYjtBQUNELG1CQUpELE1BSU87QUFDTDVnQix1QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjZCxZQUFZLElBQUk3YyxrQkFBaEIsSUFBc0M4WSxVQUFVLENBQUNpRixRQUFYLENBQW9CaEIsR0FBcEIsS0FBNEIsQ0FBbEUsR0FBc0UsR0FBdEUsR0FBNEVTLFFBQTFGO0FBQ0Esd0JBQUksQ0FBQ1gsWUFBTCxFQUFtQmUsUUFBUSxHQUFHUyxPQUFYO0FBQ3BCOztBQUVELG9CQUFFVixNQUFGO0FBQ0E7O0FBRUYscUJBQUssR0FBTDtBQUNFLHNCQUFJTyxTQUFTLElBQUlSLEtBQUssR0FBRyxDQUF6QixFQUE0Qm5nQixHQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWM3ZCxpQkFBZCxDQUE1QixLQUFpRTtBQUMvRHZDLHVCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWNILFFBQWQ7QUFDQSx3QkFBSSxDQUFDWCxZQUFMLEVBQW1CZSxRQUFRLEdBQUdTLE9BQVg7QUFDcEI7QUFDRCxvQkFBRVYsTUFBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRSxzQkFBSSxDQUFDUSxVQUFELElBQWVWLFNBQVMsSUFBSSxHQUFoQyxFQUFxQztBQUNuQyx3QkFBSUssVUFBSixFQUFnQkwsU0FBUyxHQUFHLEdBQVo7QUFDaEJsZ0IsdUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBY0gsUUFBZDtBQUNBSSw0QkFBUSxHQUFHZixZQUFZLEdBQUcsQ0FBQyxDQUFKLEdBQVF3QixPQUEvQjtBQUNELG1CQUpELE1BSU85Z0IsR0FBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjRyxVQUFVLEdBQUcsR0FBSCxHQUFTTixRQUFqQzs7QUFFUCxvQkFBRUcsTUFBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRSxzQkFBSSxDQUFDUSxVQUFELElBQWVWLFNBQVMsSUFBSSxHQUFoQyxFQUFxQztBQUNuQ0EsNkJBQVMsR0FBR0ssVUFBVSxHQUFHLEdBQUgsR0FBUyxHQUEvQjtBQUNBdmdCLHVCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWNILFFBQWQ7QUFDQUksNEJBQVEsR0FBR2YsWUFBWSxHQUFHLENBQUMsQ0FBSixHQUFRd0IsT0FBL0I7QUFDRCxtQkFKRCxNQUlPOWdCLEdBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBY0csVUFBVSxHQUFHLEdBQUgsR0FBUyxHQUFqQzs7QUFFUCxvQkFBRUgsTUFBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRSxzQkFBSSxDQUFDUSxVQUFELElBQWVWLFNBQVMsSUFBSSxHQUFoQyxFQUFxQztBQUNuQ0EsNkJBQVMsR0FBRyxHQUFaO0FBQ0FsZ0IsdUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBY0gsUUFBZDtBQUNBSSw0QkFBUSxHQUFHZixZQUFZLEdBQUcsQ0FBQyxDQUFKLEdBQVF3QixPQUEvQjtBQUNELG1CQUpELE1BSU87QUFDTDlnQix1QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjLEdBQWQ7QUFDRDs7QUFFRCxvQkFBRUEsTUFBRjtBQUNBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQUssR0FBTDtBQUNFLHNCQUFJLENBQUNRLFVBQUQsSUFBZVYsU0FBUyxJQUFJLEdBQWhDLEVBQXFDO0FBQ25DLHdCQUFJSyxVQUFKLEVBQWdCTCxTQUFTLEdBQUcsR0FBWjtBQUNoQmxnQix1QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjSCxRQUFkO0FBQ0FJLDRCQUFRLEdBQUdmLFlBQVksR0FBRyxDQUFDLENBQUosR0FBUXdCLE9BQS9CO0FBQ0QsbUJBSkQsTUFJTztBQUNMLHdCQUFJUCxVQUFKLEVBQWdCO0FBQ2R2Z0IseUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBYyxHQUFkO0FBQ0QscUJBRkQsTUFFTztBQUNMcGdCLHlCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWNkLFlBQVksR0FBRyxHQUFILEdBQVNXLFFBQW5DO0FBQ0Q7QUFDRjs7QUFFRCxvQkFBRUcsTUFBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRSxzQkFBSUcsVUFBSixFQUFnQjtBQUNkdmdCLHVCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWMsR0FBZDtBQUNELG1CQUZELE1BRU87QUFDTHBnQix1QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjZCxZQUFZLEdBQUcsR0FBSCxHQUFTVyxRQUFuQztBQUNEOztBQUVELG9CQUFFRyxNQUFGO0FBQ0E7O0FBRUYscUJBQUssR0FBTDtBQUNFLHNCQUFJVSxPQUFPLEdBQUc3QixPQUFPLEdBQUcsQ0FBcEIsSUFBeUJILEtBQUssQ0FBQ1MsTUFBTixDQUFhdUIsT0FBTyxHQUFHLENBQXZCLEtBQTZCLEdBQTFELEVBQStEO0FBQzdELHdCQUFJUCxVQUFKLEVBQWdCO0FBQ2R2Z0IseUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBYyxHQUFkO0FBQ0FwZ0IseUJBQUcsQ0FBQ29nQixNQUFNLEdBQUcsQ0FBVixDQUFILEdBQWtCLEdBQWxCO0FBQ0QscUJBSEQsTUFHTztBQUNMcGdCLHlCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWMsR0FBZDtBQUNBcGdCLHlCQUFHLENBQUNvZ0IsTUFBTSxHQUFHLENBQVYsQ0FBSCxHQUFrQixHQUFsQjtBQUNEOztBQUVEQSwwQkFBTSxJQUFJLENBQVY7QUFDQSxzQkFBRVUsT0FBRjtBQUNELG1CQVhELE1BV087QUFDTDlnQix1QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjLEdBQWQ7QUFDQSxzQkFBRUEsTUFBRjtBQUNEOztBQUVEOztBQUVGLHFCQUFLLEdBQUw7QUFDRSxzQkFBSVUsT0FBTyxHQUFHN0IsT0FBTyxHQUFHLENBQXBCLElBQXlCSCxLQUFLLENBQUNTLE1BQU4sQ0FBYXVCLE9BQU8sR0FBRyxDQUF2QixLQUE2QixHQUExRCxFQUErRDtBQUM3RCx3QkFBSVAsVUFBSixFQUFnQjtBQUNkdmdCLHlCQUFHLENBQUNvZ0IsTUFBRCxDQUFILEdBQWMsR0FBZDtBQUNBcGdCLHlCQUFHLENBQUNvZ0IsTUFBTSxHQUFHLENBQVYsQ0FBSCxHQUFrQixHQUFsQjtBQUNELHFCQUhELE1BR087QUFDTHBnQix5QkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjLEdBQWQ7QUFDQXBnQix5QkFBRyxDQUFDb2dCLE1BQU0sR0FBRyxDQUFWLENBQUgsR0FBa0IsR0FBbEI7QUFDRDs7QUFFREEsMEJBQU0sSUFBSSxDQUFWO0FBQ0Esc0JBQUVVLE9BQUY7QUFDRCxtQkFYRCxNQVdPO0FBQ0w5Z0IsdUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBYyxHQUFkO0FBQ0Esc0JBQUVBLE1BQUY7QUFDRDs7QUFFRDs7QUFFRixxQkFBSyxHQUFMO0FBQ0VwZ0IscUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBYyxHQUFkO0FBQ0Esb0JBQUVBLE1BQUY7QUFDQTs7QUFFRixxQkFBSyxHQUFMO0FBQ0VwZ0IscUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBY0ssV0FBVyxHQUFHamUsZ0JBQUgsR0FBc0J5ZCxRQUEvQztBQUNBQSwwQkFBUSxHQUFHLEdBQVg7QUFDQVgsOEJBQVksR0FBRyxJQUFmO0FBQ0Esb0JBQUVhLEtBQUY7QUFDQSxvQkFBRUMsTUFBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRXBnQixxQkFBRyxDQUFDb2dCLE1BQUQsQ0FBSCxHQUFjLEdBQWQ7QUFDQSxvQkFBRUEsTUFBRjtBQUNBOztBQUVGO0FBQ0VwZ0IscUJBQUcsQ0FBQ29nQixNQUFELENBQUgsR0FBY1csRUFBZDtBQUNBLG9CQUFFWCxNQUFGO0FBQ0E7QUFsTEo7QUFvTEQ7O0FBRUQsZ0JBQUlGLFNBQVMsSUFBSSxHQUFqQixFQUFzQjtBQUNwQixrQkFBSUcsUUFBUSxHQUFHLENBQWYsRUFBa0JBLFFBQVEsR0FBR0QsTUFBWDs7QUFFbEIscUJBQU9DLFFBQVEsSUFBSXBCLE9BQW5CLEVBQTRCO0FBQzFCLGtCQUFFb0IsUUFBRjtBQUNEOztBQUVELGtCQUFJcmdCLEdBQUcsQ0FBQ3FnQixRQUFELENBQUgsSUFBaUJDLFFBQXJCLEVBQStCdGdCLEdBQUcsQ0FBQ3FnQixRQUFELENBQUgsR0FBZ0JILFNBQWhCO0FBQ2hDOztBQUVELG1CQUFPbGdCLEdBQUcsQ0FBQ2doQixJQUFKLENBQVMsRUFBVCxDQUFQO0FBQ0Q7QUFyVDZCLFNBQUQsRUFzVDVCO0FBQ0Q3dUIsYUFBRyxFQUFFLFFBREo7QUFFREcsZUFBSyxFQUFFLFNBQVMydUIsTUFBVCxDQUFnQmhvQixNQUFoQixFQUF3QmlvQixTQUF4QixFQUFtQ0MsWUFBbkMsRUFBaUQ7QUFDdEQsZ0JBQUlBLFlBQUosRUFBa0JELFNBQVMsR0FBRyxDQUFDQSxTQUFiO0FBQ2xCLGdCQUFJRSxRQUFRLEdBQUcsQ0FBQyxLQUFLbm9CLE1BQU4sRUFBY3doQixLQUFkLENBQW9CLEdBQXBCLENBQWY7QUFDQSxtQkFBTyxFQUFFMkcsUUFBUSxDQUFDLENBQUQsQ0FBUixHQUFjLEdBQWQsSUFBcUJBLFFBQVEsQ0FBQyxDQUFELENBQVIsR0FBYyxDQUFDQSxRQUFRLENBQUMsQ0FBRCxDQUFULEdBQWVGLFNBQTdCLEdBQXlDQSxTQUE5RCxDQUFGLENBQVA7QUFDRDtBQU5BLFNBdFQ0QixFQTZUNUI7QUFDRC91QixhQUFHLEVBQUUsUUFESjtBQUVERyxlQUFLLEVBQUUsU0FBU210QixNQUFULENBQWdCeG1CLE1BQWhCLEVBQXdCaW9CLFNBQXhCLEVBQW1DO0FBQ3hDLG1CQUFPM0YsVUFBVSxDQUFDMEYsTUFBWCxDQUFrQjduQixJQUFJLENBQUNpb0IsS0FBTCxDQUFXOUYsVUFBVSxDQUFDMEYsTUFBWCxDQUFrQmhvQixNQUFsQixFQUEwQmlvQixTQUExQixFQUFxQyxLQUFyQyxDQUFYLENBQWxCLEVBQTJFQSxTQUEzRSxFQUFzRixJQUF0RixDQUFQO0FBQ0Q7QUFKQSxTQTdUNEIsRUFrVTVCO0FBQ0QvdUIsYUFBRyxFQUFFLGNBREo7QUFFREcsZUFBSyxFQUFFLFNBQVNxdEIsWUFBVCxDQUFzQjFtQixNQUF0QixFQUE4QjtBQUNuQyxnQkFBSXFvQixNQUFNLEdBQUcvRixVQUFVLENBQUNpRixRQUFYLENBQW9Cdm5CLE1BQXBCLENBQWI7O0FBRUEsZ0JBQUlzb0IsS0FBSyxHQUFHLEVBQVo7O0FBRUEsZ0JBQUlELE1BQU0sS0FBSyxDQUFmLEVBQWtCO0FBQ2hCLGtCQUFJaGQsTUFBTSxHQUFHZ2QsTUFBTSxHQUFHLENBQVQsR0FBYSxHQUFHRSxNQUFILENBQVUsQ0FBQyxDQUFELEdBQUt2b0IsTUFBTSxDQUFDMkQsUUFBUCxFQUFmLENBQWIsR0FBaUQzRCxNQUFNLENBQUMyRCxRQUFQLEVBQTlEO0FBQ0Esa0JBQUkwSCxNQUFNLENBQUN6SixNQUFQLEdBQWdCLENBQWhCLElBQXFCeUosTUFBTSxDQUFDaWIsTUFBUCxDQUFjLENBQWQsS0FBb0IsR0FBN0MsRUFBa0RqYixNQUFNLEdBQUdBLE1BQU0sQ0FBQ21kLFNBQVAsQ0FBaUIsQ0FBakIsQ0FBVCxDQUZsQyxDQUVnRTs7QUFFaEZGLG1CQUFLLEdBQUdqZCxNQUFNLENBQUNtVyxLQUFQLENBQWEsRUFBYixDQUFSO0FBQ0Q7O0FBRUQsbUJBQU84RyxLQUFQO0FBQ0Q7QUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBeEJLLFNBbFU0QixFQTRWNUI7QUFDRHB2QixhQUFHLEVBQUUsVUFESjtBQUVERyxlQUFLLEVBQUUsU0FBU2t1QixRQUFULENBQWtCa0IsQ0FBbEIsRUFBcUI7QUFDMUIsbUJBQU8sQ0FBQ0EsQ0FBQyxHQUFHLENBQUwsS0FBV0EsQ0FBQyxHQUFHLENBQWYsS0FBcUIsQ0FBQ0EsQ0FBN0I7QUFDRDtBQUpBLFNBNVY0QixDQUFuQixDQUFaOztBQW1XQSxlQUFPbkcsVUFBUDtBQUNELE9BeldELEVBRkE7QUE2V0E7OztBQUE2QnVCLHlCQUFtQixDQUFDLEdBQUQsQ0FBbkIsR0FBNEJ2QixVQUE1QjtBQUU3QjtBQUFPLEtBdmxCRztBQXdsQlY7O0FBQ0E7QUFBTyxjQUFTOWxCLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7QUFDQTs7QUFBK0JBLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLEdBQTNDLEVBQWdELFlBQVc7QUFBRSxlQUFPcUIsYUFBUDtBQUF1QixPQUFwRjtBQUMvQjs7O0FBQStCcEMseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsR0FBM0MsRUFBZ0QsWUFBVztBQUFFLGVBQU9vQixhQUFQO0FBQXVCLE9BQXBGO0FBQy9COzs7QUFBK0JuQyx5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBT21CLG9CQUFQO0FBQThCLE9BQTNGO0FBQy9COzs7QUFBK0JsQyx5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBT2lCLFlBQVA7QUFBc0IsT0FBbkY7QUFDL0I7OztBQUErQmhDLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLEdBQTNDLEVBQWdELFlBQVc7QUFBRSxlQUFPc0IsV0FBUDtBQUFxQixPQUFsRjtBQUMvQjs7O0FBQStCckMseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsR0FBM0MsRUFBZ0QsWUFBVztBQUFFLGVBQU91QixtQkFBUDtBQUE2QixPQUExRjtBQUMvQjs7O0FBQStCdEMseUJBQW1CLENBQUNJLENBQXBCLENBQXNCVyxtQkFBdEIsRUFBMkMsR0FBM0MsRUFBZ0QsWUFBVztBQUFFLGVBQU9rQixhQUFQO0FBQXVCLE9BQXBGO0FBQy9COzs7QUFBcUIsVUFBSTJELHdEQUF3RCxHQUFHNUYsbUJBQW1CLENBQUMsQ0FBRCxDQUFsRjtBQUNyQjs7O0FBQXFCLFVBQUk2Rix1Q0FBdUMsR0FBRzdGLG1CQUFtQixDQUFDLEVBQUQsQ0FBakU7O0FBQ3JCLGVBQVN1QyxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0Q7QUFBRSxZQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBdEIsQ0FBSixFQUF3QztBQUFFLGdCQUFNLElBQUlDLFNBQUosQ0FBYyxtQ0FBZCxDQUFOO0FBQTJEO0FBQUU7O0FBRXpKLGVBQVNDLGlCQUFULENBQTJCaHNCLE1BQTNCLEVBQW1Db1QsS0FBbkMsRUFBMEM7QUFBRSxhQUFLLElBQUk3VCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNlQsS0FBSyxDQUFDakwsTUFBMUIsRUFBa0M1SSxDQUFDLEVBQW5DLEVBQXVDO0FBQUUsY0FBSXNCLFVBQVUsR0FBR3VTLEtBQUssQ0FBQzdULENBQUQsQ0FBdEI7QUFBMkJzQixvQkFBVSxDQUFDZixVQUFYLEdBQXdCZSxVQUFVLENBQUNmLFVBQVgsSUFBeUIsS0FBakQ7QUFBd0RlLG9CQUFVLENBQUNoQixZQUFYLEdBQTBCLElBQTFCO0FBQWdDLGNBQUksV0FBV2dCLFVBQWYsRUFBMkJBLFVBQVUsQ0FBQ1QsUUFBWCxHQUFzQixJQUF0QjtBQUE0QnhCLGdCQUFNLENBQUNELGNBQVAsQ0FBc0JxQixNQUF0QixFQUE4QmEsVUFBVSxDQUFDcEIsR0FBekMsRUFBOENvQixVQUE5QztBQUE0RDtBQUFFOztBQUU3VCxlQUFTb3JCLFlBQVQsQ0FBc0JILFdBQXRCLEVBQW1DSSxVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFBRSxZQUFJRCxVQUFKLEVBQWdCRixpQkFBaUIsQ0FBQ0YsV0FBVyxDQUFDN0IsU0FBYixFQUF3QmlDLFVBQXhCLENBQWpCO0FBQXNELFlBQUlDLFdBQUosRUFBaUJILGlCQUFpQixDQUFDRixXQUFELEVBQWNLLFdBQWQsQ0FBakI7QUFBNkMsZUFBT0wsV0FBUDtBQUFxQjtBQUV2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsVUFBSUwsYUFBYSxHQUFHLG1HQUFwQjtBQUNBLFVBQUlELGFBQWEsR0FBRyx3R0FBcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFJRCxvQkFBb0IsR0FBRyxTQUFTQSxvQkFBVCxDQUE4QjVPLE1BQTlCLEVBQXNDO0FBQy9ELGVBQU8vZCxNQUFNLENBQUNzd0IsdUNBQXVDLENBQUM7QUFBSTtBQUFMLFNBQXhDLENBQU4sQ0FBZ0Z2UyxNQUFoRixDQUFQO0FBQ0QsT0FGRDtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxVQUFJME8sWUFBWSxHQUFHLFNBQVNBLFlBQVQsQ0FBc0JsaEIsSUFBdEIsRUFBNEI7QUFDN0MsWUFBSXNLLEtBQUssR0FBRyxJQUFJL0ksSUFBSixDQUFTdkIsSUFBSSxDQUFDZ2xCLFdBQUwsRUFBVCxFQUE2QixDQUE3QixFQUFnQyxDQUFoQyxDQUFaO0FBQ0EsWUFBSXZOLElBQUksR0FBR3pYLElBQUksR0FBR3NLLEtBQVAsR0FBZSxDQUFDQSxLQUFLLENBQUMyYSxpQkFBTixLQUE0QmpsQixJQUFJLENBQUNpbEIsaUJBQUwsRUFBN0IsSUFBeUQsRUFBekQsR0FBOEQsSUFBeEY7QUFDQSxZQUFJQyxNQUFNLEdBQUcsT0FBTyxFQUFQLEdBQVksRUFBWixHQUFpQixFQUE5QjtBQUNBLFlBQUkxUixHQUFHLEdBQUdqWCxJQUFJLENBQUM2akIsS0FBTCxDQUFXM0ksSUFBSSxHQUFHeU4sTUFBbEIsQ0FBVjtBQUNBLGVBQU8xUixHQUFQO0FBQ0QsT0FORDtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQSxVQUFJK04sV0FBVyxHQUFHLFNBQVNBLFdBQVQsQ0FBcUJ2aEIsSUFBckIsRUFBMkI7QUFDM0MsWUFBSXZLLEtBQUssR0FBR3VLLElBQVo7QUFDQSxZQUFJeUksTUFBTSxHQUFHLENBQUNoVCxLQUFLLENBQUNpVCxLQUFOLENBQVkscUJBQVosS0FBc0MsRUFBdkMsRUFBMkMsQ0FBM0MsQ0FBYjs7QUFFQSxZQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYQSxnQkFBTSxHQUFHLEdBQVQ7QUFDQWhULGVBQUssSUFBSWdULE1BQVQ7QUFDRDs7QUFFRCxZQUFJNlksYUFBYSxDQUFDNkQsSUFBZCxDQUFtQjF2QixLQUFuQixDQUFKLEVBQStCO0FBQzdCQSxlQUFLLEdBQUcsY0FBY2t2QixNQUFkLENBQXFCbHZCLEtBQXJCLENBQVI7QUFDRCxTQUZELE1BRU8sSUFBSTRyQixhQUFhLENBQUM4RCxJQUFkLENBQW1CMXZCLEtBQW5CLENBQUosRUFBK0I7QUFDcENBLGVBQUssR0FBRyxHQUFHa3ZCLE1BQUgsQ0FBVWx2QixLQUFLLENBQUNtb0IsS0FBTixDQUFZblYsTUFBWixFQUFvQixDQUFwQixDQUFWLEVBQWtDLFdBQWxDLEVBQStDa2MsTUFBL0MsQ0FBc0RsYyxNQUF0RCxDQUFSO0FBQ0Q7O0FBRUQsZUFBT2hULEtBQVA7QUFDRCxPQWhCRDtBQWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLFVBQUkrckIsbUJBQW1CLEdBQUcsU0FBU0EsbUJBQVQsR0FBK0I7QUFDdkQsWUFBSS9nQixRQUFRLEdBQUdnUyxJQUFJLENBQUMyUyxjQUFMLEdBQXNCQyxlQUF0QixHQUF3Q2xSLFFBQXZEOztBQUVBLFlBQUksQ0FBQzFULFFBQUwsRUFBZTtBQUNiLGNBQUk2a0IsR0FBRyxHQUFHLFNBQVNBLEdBQVQsQ0FBYWxwQixNQUFiLEVBQXFCNEIsTUFBckIsRUFBNkI7QUFDckMsZ0JBQUlxa0IsR0FBRyxHQUFHLEtBQUtqbUIsTUFBZjs7QUFFQSxtQkFBT2ltQixHQUFHLENBQUNya0IsTUFBSixHQUFhQSxNQUFwQixFQUE0QjtBQUMxQnFrQixpQkFBRyxHQUFHLE1BQU1BLEdBQVo7QUFDRDs7QUFFRCxtQkFBT0EsR0FBUDtBQUNELFdBUkQ7O0FBVUEsY0FBSTVaLE1BQU0sR0FBRyxJQUFJbEgsSUFBSixHQUFXMGpCLGlCQUFYLEVBQWI7QUFDQXhjLGdCQUFNLEdBQUcsQ0FBQ0EsTUFBTSxHQUFHLENBQVQsR0FBYSxHQUFiLEdBQW1CLEdBQXBCLElBQTJCO0FBQ3BDNmMsYUFBRyxDQUFDdGtCLFFBQVEsQ0FBQ3pFLElBQUksQ0FBQ2dwQixHQUFMLENBQVM5YyxNQUFNLEdBQUcsRUFBbEIsQ0FBRCxDQUFULEVBQWtDLENBQWxDLENBRE0sR0FDaUM2YyxHQUFHLENBQUMvb0IsSUFBSSxDQUFDZ3BCLEdBQUwsQ0FBUzljLE1BQU0sR0FBRyxFQUFsQixDQUFELEVBQXdCLENBQXhCLENBRDdDO0FBRUEsaUJBQU9BLE1BQVA7QUFDRDs7QUFFRCxlQUFPaEksUUFBUDtBQUNELE9BckJEO0FBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLFVBQUkwZ0IsYUFBYSxHQUFHLFNBQVNBLGFBQVQsQ0FBdUJuaEIsSUFBdkIsRUFBNkJ3bEIsU0FBN0IsRUFBd0M7QUFDMUQsWUFBSWxHLENBQUMsR0FBRyxJQUFJL2QsSUFBSixDQUFTQSxJQUFJLENBQUNtZixHQUFMLENBQVMxZ0IsSUFBSSxDQUFDZ2xCLFdBQUwsRUFBVCxFQUE2QmhsQixJQUFJLENBQUN5bEIsUUFBTCxFQUE3QixFQUE4Q3psQixJQUFJLENBQUMwbEIsT0FBTCxFQUE5QyxDQUFULENBQVI7QUFDQSxZQUFJQyxNQUFNLEdBQUdyRyxDQUFDLENBQUNzRyxTQUFGLE1BQWlCSixTQUFTLEdBQUcsQ0FBN0IsS0FBbUMsQ0FBaEQ7QUFDQWxHLFNBQUMsQ0FBQ3VHLFVBQUYsQ0FBYXZHLENBQUMsQ0FBQ3dHLFVBQUYsS0FBaUIsQ0FBakIsR0FBcUJILE1BQWxDO0FBQ0EsWUFBSUksU0FBUyxHQUFHLElBQUl4a0IsSUFBSixDQUFTQSxJQUFJLENBQUNtZixHQUFMLENBQVNwQixDQUFDLENBQUMwRyxjQUFGLEVBQVQsRUFBNkIsQ0FBN0IsRUFBZ0MsQ0FBaEMsQ0FBVCxDQUFoQjtBQUNBLGVBQU96cEIsSUFBSSxDQUFDNGpCLElBQUwsQ0FBVSxDQUFDLENBQUNiLENBQUMsR0FBR3lHLFNBQUwsSUFBa0IsUUFBbEIsR0FBNkIsQ0FBOUIsSUFBbUMsQ0FBN0MsQ0FBUDtBQUNELE9BTkQ7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsVUFBSUUsUUFBUSxHQUNaLGFBQ0EsWUFBWTtBQUNWLGlCQUFTQSxRQUFULEdBQW9CO0FBQ2xCeEUseUJBQWUsQ0FBQyxJQUFELEVBQU93RSxRQUFQLENBQWY7QUFDRDs7QUFFRG5FLG9CQUFZLENBQUNtRSxRQUFELEVBQVcsSUFBWCxFQUFpQixDQUFDO0FBQzVCM3dCLGFBQUcsRUFBRSxNQUR1Qjs7QUFHNUI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUcsZUFBSyxFQUFFLFNBQVMrUCxJQUFULENBQWN4RixJQUFkLEVBQW9CaWlCLEtBQXBCLEVBQTJCelAsTUFBM0IsRUFBbUMvUixRQUFuQyxFQUE2QztBQUNsRCxnQkFBSSxDQUFDVCxJQUFMLEVBQVcsT0FBTyxFQUFQO0FBQ1gsZ0JBQUksQ0FBQ2lpQixLQUFMLEVBQVksT0FBT2ppQixJQUFQO0FBQ1pTLG9CQUFRLEdBQUdBLFFBQVEsSUFBSStnQixtQkFBbUIsRUFBMUM7QUFDQWhQLGtCQUFNLEdBQUdBLE1BQU0sSUFBSUMsSUFBSSxDQUFDMlMsY0FBTCxHQUFzQkMsZUFBdEIsR0FBd0M3UyxNQUFsRCxJQUE0RCxPQUFyRSxDQUprRCxDQUk0Qjs7QUFFOUV4UyxnQkFBSSxHQUFHQSxJQUFJLFlBQVl1QixJQUFoQixHQUF1QnZCLElBQXZCLEdBQThCdWhCLFdBQVcsQ0FBQ3ZoQixJQUFELENBQWhEO0FBQ0EsZ0JBQUlrbUIsVUFBVSxHQUFHenhCLE1BQU0sQ0FBQ3F3Qix3REFBd0QsQ0FBQztBQUFJO0FBQUwsYUFBekQsQ0FBTixDQUFvRjlrQixJQUFwRixFQUEwRlMsUUFBMUYsQ0FBakI7O0FBRUEsZ0JBQUkwbEIsV0FBVyxHQUFHRixRQUFRLENBQUNHLGlCQUFULENBQTJCO0FBQzNDOVMsa0JBQUksRUFBRTRTLFVBQVUsQ0FBQ2xCLFdBQVgsRUFEcUM7QUFFM0N6UixtQkFBSyxFQUFFMlMsVUFBVSxDQUFDVCxRQUFYLEtBQXdCLENBRlk7QUFHM0NZLHdCQUFVLEVBQUUsSUFBSTVULElBQUksQ0FBQzJTLGNBQVQsQ0FBd0IsQ0FBQzVTLE1BQUQsQ0FBeEIsRUFBa0M7QUFDNUNlLHFCQUFLLEVBQUU7QUFEcUMsZUFBbEMsRUFFVGdHLE1BRlMsQ0FFRjJNLFVBRkUsQ0FIK0I7QUFNM0NJLHVCQUFTLEVBQUUsSUFBSTdULElBQUksQ0FBQzJTLGNBQVQsQ0FBd0IsQ0FBQzVTLE1BQUQsQ0FBeEIsRUFBa0M7QUFDM0NlLHFCQUFLLEVBQUU7QUFEb0MsZUFBbEMsRUFFUmdHLE1BRlEsQ0FFRDJNLFVBRkMsQ0FOZ0M7QUFTM0MxUyxpQkFBRyxFQUFFMFMsVUFBVSxDQUFDUixPQUFYLEVBVHNDO0FBVTNDYSxzQkFBUSxFQUFFLElBQUk5VCxJQUFJLENBQUMyUyxjQUFULENBQXdCLENBQUM1UyxNQUFELENBQXhCLEVBQWtDO0FBQzFDcUgsdUJBQU8sRUFBRTtBQURpQyxlQUFsQyxFQUVQTixNQUZPLENBRUEyTSxVQUZBLENBVmlDO0FBYTNDTSxxQkFBTyxFQUFFLElBQUkvVCxJQUFJLENBQUMyUyxjQUFULENBQXdCLENBQUM1UyxNQUFELENBQXhCLEVBQWtDO0FBQ3pDcUgsdUJBQU8sRUFBRTtBQURnQyxlQUFsQyxFQUVOTixNQUZNLENBRUMyTSxVQUZELENBYmtDO0FBZ0IzQy9rQixxQkFBTyxFQUFFK2tCLFVBQVUsQ0FBQ08sVUFBWCxFQWhCa0M7QUFpQjNDbFAscUJBQU8sRUFBRTJPLFVBQVUsQ0FBQ1EsVUFBWCxFQWpCa0M7O0FBbUIzQyxrQkFBSUMsT0FBSixHQUFjO0FBQ1osdUJBQU9ULFVBQVUsQ0FBQ1UsUUFBWCxFQUFQO0FBQ0QsZUFyQjBDOztBQXVCM0Msa0JBQUlDLE9BQUosR0FBYztBQUNaLHVCQUFPLEtBQUtGLE9BQUwsR0FBZSxFQUFmLElBQXFCLEVBQTVCO0FBQ0QsZUF6QjBDOztBQTJCM0M1UCx1QkFBUyxFQUFFbUssWUFBWSxDQUFDZ0YsVUFBRCxDQTNCb0I7QUE0QjNDOU8sdUJBQVMsRUFBRThPLFVBQVUsQ0FBQ1ksTUFBWCxLQUFzQixDQTVCVTtBQTZCM0M7QUFDQUMsd0JBQVUsRUFBRTVGLGFBQWEsQ0FBQytFLFVBQUQsRUFBYTlFLG9CQUFvQixDQUFDNU8sTUFBRCxDQUFqQyxDQTlCa0I7QUErQjNDQSxvQkFBTSxFQUFFQSxNQS9CbUM7QUFnQzNDL1Isc0JBQVEsRUFBRUE7QUFoQ2lDLGFBQTNCLENBQWxCOztBQW1DQSxnQkFBSTdCLE1BQU0sR0FBR3FqQixLQUFiOztBQUVBLGlCQUFLLElBQUkrRSxDQUFULElBQWNiLFdBQWQsRUFBMkI7QUFDekJ2bkIsb0JBQU0sR0FBR0EsTUFBTSxDQUFDcW9CLE9BQVAsQ0FBZSxJQUFJOWUsTUFBSixDQUFXLE9BQU82ZSxDQUFQLEdBQVcsR0FBdEIsRUFBMkIsR0FBM0IsQ0FBZixFQUFnRGIsV0FBVyxDQUFDYSxDQUFELENBQTNELENBQVQ7QUFDRDs7QUFFRCxtQkFBT3BvQixNQUFQO0FBQ0Q7QUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUExRWdDLFNBQUQsRUE0RTFCO0FBQ0R0SixhQUFHLEVBQUUsbUJBREo7QUFFREcsZUFBSyxFQUFFLFNBQVMyd0IsaUJBQVQsQ0FBMkJjLFdBQTNCLEVBQXdDO0FBQzdDLG1CQUFPO0FBQ0w7QUFDQUMsZ0JBQUUsRUFBRUQsV0FBVyxDQUFDNVQsSUFBWixDQUFpQnZULFFBQWpCLEdBQTRCcW5CLE1BQTVCLENBQW1DLENBQUMsQ0FBcEMsQ0FGQztBQUdMQyxnQkFBRSxFQUFFSCxXQUFXLENBQUM1VCxJQUhYO0FBSUxnVSxnQkFBRSxFQUFFSixXQUFXLENBQUM1VCxJQUpYO0FBS0xpVSxnQkFBRSxFQUFFMWxCLE1BQU0sQ0FBQzJsQixZQUFQLENBQW9CTixXQUFXLENBQUM1VCxJQUFoQyxDQUxDO0FBTUxtVSxnQkFBRSxFQUFFUCxXQUFXLENBQUM1VCxJQU5YO0FBT0xvVSxlQUFDLEVBQUVSLFdBQVcsQ0FBQzVULElBUFY7QUFRTDtBQUNBcVUsZ0JBQUUsRUFBRTlsQixNQUFNLENBQUNxbEIsV0FBVyxDQUFDM1QsS0FBYixDQUFOLENBQTBCdlYsTUFBMUIsSUFBb0MsQ0FBcEMsR0FBd0MsTUFBTWtwQixXQUFXLENBQUMzVCxLQUExRCxHQUFrRTJULFdBQVcsQ0FBQzNULEtBVDdFO0FBVUxxVSxnQkFBRSxFQUFFVixXQUFXLENBQUNiLFVBVlg7QUFXTHdCLGdCQUFFLEVBQUVYLFdBQVcsQ0FBQ1osU0FYWDtBQVlMd0IsZ0JBQUUsRUFBRWptQixNQUFNLENBQUMybEIsWUFBUCxDQUFvQk4sV0FBVyxDQUFDM1QsS0FBaEMsQ0FaQztBQWFMd1UsZ0JBQUUsRUFBRWIsV0FBVyxDQUFDM1QsS0FiWDtBQWNMeVUsZUFBQyxFQUFFZCxXQUFXLENBQUMzVCxLQWRWO0FBZUw7QUFDQTBVLGdCQUFFLEVBQUVwbUIsTUFBTSxDQUFDcWxCLFdBQVcsQ0FBQzFULEdBQWIsQ0FBTixDQUF3QnhWLE1BQXhCLElBQWtDLENBQWxDLEdBQXNDLE1BQU1rcEIsV0FBVyxDQUFDMVQsR0FBeEQsR0FBOEQwVCxXQUFXLENBQUMxVCxHQWhCekU7QUFpQkwwVSxnQkFBRSxFQUFFaEIsV0FBVyxDQUFDWCxRQWpCWDtBQWtCTDRCLGdCQUFFLEVBQUVqQixXQUFXLENBQUNWLE9BbEJYO0FBbUJMNEIsZ0JBQUUsRUFBRXZtQixNQUFNLENBQUMybEIsWUFBUCxDQUFvQk4sV0FBVyxDQUFDMVQsR0FBaEMsQ0FuQkM7QUFvQkw2VSxnQkFBRSxFQUFFbkIsV0FBVyxDQUFDMVQsR0FwQlg7QUFxQkw4VSxlQUFDLEVBQUVwQixXQUFXLENBQUMxVCxHQXJCVjtBQXNCTDtBQUNBK1UsZ0JBQUUsRUFBRTFtQixNQUFNLENBQUNxbEIsV0FBVyxDQUFDUCxPQUFiLENBQU4sQ0FBNEIzb0IsTUFBNUIsSUFBc0MsQ0FBdEMsR0FBMEMsTUFBTWtwQixXQUFXLENBQUNQLE9BQTVELEdBQXNFTyxXQUFXLENBQUNQLE9BdkJqRjtBQXdCTDZCLGdCQUFFLEVBQUV0QixXQUFXLENBQUNQLE9BeEJYO0FBeUJMOEIsZ0JBQUUsRUFBRXZCLFdBQVcsQ0FBQ1AsT0F6Qlg7QUEwQkwrQixnQkFBRSxFQUFFN21CLE1BQU0sQ0FBQzJsQixZQUFQLENBQW9CTixXQUFXLENBQUNQLE9BQWhDLENBMUJDO0FBMkJMZ0MsZ0JBQUUsRUFBRXpCLFdBQVcsQ0FBQ1AsT0EzQlg7QUE0QkxpQyxlQUFDLEVBQUUxQixXQUFXLENBQUNQLE9BNUJWO0FBNkJMO0FBQ0FrQyxnQkFBRSxFQUFFaG5CLE1BQU0sQ0FBQ3FsQixXQUFXLENBQUNMLE9BQWIsQ0FBTixDQUE0QjdvQixNQUE1QixJQUFzQyxDQUF0QyxHQUEwQyxNQUFNa3BCLFdBQVcsQ0FBQ0wsT0FBNUQsR0FBc0VLLFdBQVcsQ0FBQ0wsT0E5QmpGO0FBK0JMaUMsZ0JBQUUsRUFBRTVCLFdBQVcsQ0FBQ0wsT0EvQlg7QUFnQ0xrQyxnQkFBRSxFQUFFN0IsV0FBVyxDQUFDTCxPQWhDWDtBQWlDTG1DLGdCQUFFLEVBQUVubkIsTUFBTSxDQUFDMmxCLFlBQVAsQ0FBb0JOLFdBQVcsQ0FBQ0wsT0FBaEMsQ0FqQ0M7QUFrQ0xvQyxnQkFBRSxFQUFFL0IsV0FBVyxDQUFDTCxPQWxDWDtBQW1DTHFDLGVBQUMsRUFBRWhDLFdBQVcsQ0FBQ0wsT0FuQ1Y7QUFvQ0w7QUFDQXNDLGdCQUFFLEVBQUV0bkIsTUFBTSxDQUFDcWxCLFdBQVcsQ0FBQy9sQixPQUFiLENBQU4sQ0FBNEJuRCxNQUE1QixJQUFzQyxDQUF0QyxHQUEwQyxNQUFNa3BCLFdBQVcsQ0FBQy9sQixPQUE1RCxHQUFzRStsQixXQUFXLENBQUMvbEIsT0FyQ2pGO0FBc0NMaW9CLGdCQUFFLEVBQUVsQyxXQUFXLENBQUMvbEIsT0F0Q1g7QUF1Q0xrb0IsZ0JBQUUsRUFBRW5DLFdBQVcsQ0FBQy9sQixPQXZDWDtBQXdDTG1vQixnQkFBRSxFQUFFem5CLE1BQU0sQ0FBQzJsQixZQUFQLENBQW9CTixXQUFXLENBQUMvbEIsT0FBaEMsQ0F4Q0M7QUF5Q0xvb0IsZ0JBQUUsRUFBRXJDLFdBQVcsQ0FBQy9sQixPQXpDWDtBQTBDTGtlLGVBQUMsRUFBRTZILFdBQVcsQ0FBQy9sQixPQTFDVjtBQTJDTDtBQUNBcW9CLGdCQUFFLEVBQUUzbkIsTUFBTSxDQUFDcWxCLFdBQVcsQ0FBQzNQLE9BQWIsQ0FBTixDQUE0QnZaLE1BQTVCLElBQXNDLENBQXRDLEdBQTBDLE1BQU1rcEIsV0FBVyxDQUFDM1AsT0FBNUQsR0FBc0UyUCxXQUFXLENBQUMzUCxPQTVDakY7QUE2Q0xrUyxnQkFBRSxFQUFFdkMsV0FBVyxDQUFDM1AsT0E3Q1g7QUE4Q0xtUyxnQkFBRSxFQUFFeEMsV0FBVyxDQUFDM1AsT0E5Q1g7QUErQ0xvUyxnQkFBRSxFQUFFOW5CLE1BQU0sQ0FBQzJsQixZQUFQLENBQW9CTixXQUFXLENBQUMzUCxPQUFoQyxDQS9DQztBQWdETHFTLGdCQUFFLEVBQUUxQyxXQUFXLENBQUMzUCxPQWhEWDtBQWlETHlJLGVBQUMsRUFBRWtILFdBQVcsQ0FBQzNQLE9BakRWO0FBa0RMO0FBQ0FzUyxnQkFBRSxFQUFFM0MsV0FBVyxDQUFDUCxPQUFaLEdBQXNCLEVBQXRCLEdBQTJCLElBQTNCLEdBQWtDLElBbkRqQztBQW9ETG1ELGVBQUMsRUFBRTVDLFdBQVcsQ0FBQ1AsT0FBWixHQUFzQixFQUF0QixHQUEyQixJQUEzQixHQUFrQyxJQXBEaEM7QUFxRExvRCxnQkFBRSxFQUFFN0MsV0FBVyxDQUFDUCxPQUFaLEdBQXNCLEVBQXRCLEdBQTJCLElBQTNCLEdBQWtDLElBckRqQztBQXNETDVHLGVBQUMsRUFBRW1ILFdBQVcsQ0FBQ1AsT0FBWixHQUFzQixFQUF0QixHQUEyQixJQUEzQixHQUFrQyxJQXREaEM7QUF1REw7QUFDQXFELGdCQUFFLEVBQUVub0IsTUFBTSxDQUFDcWxCLFdBQVcsQ0FBQ25RLFNBQWIsQ0FBTixDQUE4Qi9ZLE1BQTlCLElBQXdDLENBQXhDLEdBQTRDLE1BQU1rcEIsV0FBVyxDQUFDblEsU0FBOUQsR0FBMEVtUSxXQUFXLENBQUNuUSxTQXhEckY7QUF5RExrVCxnQkFBRSxFQUFFL0MsV0FBVyxDQUFDblEsU0F6RFg7QUEwRExtVCxnQkFBRSxFQUFFaEQsV0FBVyxDQUFDblEsU0ExRFg7QUEyRExvVCxnQkFBRSxFQUFFakQsV0FBVyxDQUFDblEsU0EzRFg7QUE0RExxVCxlQUFDLEVBQUVsRCxXQUFXLENBQUNuUSxTQTVEVjtBQTZETDtBQUNBc1QsZ0JBQUUsRUFBRXhvQixNQUFNLENBQUNxbEIsV0FBVyxDQUFDOVAsU0FBYixDQUFOLENBQThCcFosTUFBOUIsSUFBd0MsQ0FBeEMsR0FBNEMsTUFBTWtwQixXQUFXLENBQUM5UCxTQUE5RCxHQUEwRThQLFdBQVcsQ0FBQzlQLFNBOURyRjtBQStETGtULGdCQUFFLEVBQUVwRCxXQUFXLENBQUM5UCxTQS9EWDtBQWdFTG1ULGdCQUFFLEVBQUVyRCxXQUFXLENBQUM5UCxTQWhFWDtBQWlFTG9ULGdCQUFFLEVBQUUzb0IsTUFBTSxDQUFDMmxCLFlBQVAsQ0FBb0JOLFdBQVcsQ0FBQzlQLFNBQWhDLENBakVDO0FBa0VMcVQsZ0JBQUUsRUFBRXZELFdBQVcsQ0FBQzlQLFNBbEVYO0FBbUVMc1QsZUFBQyxFQUFFeEQsV0FBVyxDQUFDOVAsU0FuRVY7QUFvRUw7QUFDQXVULGdCQUFFLEVBQUU5b0IsTUFBTSxDQUFDcWxCLFdBQVcsQ0FBQ0gsVUFBYixDQUFOLENBQStCL29CLE1BQS9CLElBQXlDLENBQXpDLEdBQTZDLE1BQU1rcEIsV0FBVyxDQUFDSCxVQUEvRCxHQUE0RUcsV0FBVyxDQUFDSCxVQXJFdkY7QUFzRUw2RCxnQkFBRSxFQUFFMUQsV0FBVyxDQUFDSCxVQXRFWDtBQXVFTDhELGdCQUFFLEVBQUUzRCxXQUFXLENBQUNILFVBdkVYO0FBd0VMK0QsZ0JBQUUsRUFBRWpwQixNQUFNLENBQUMybEIsWUFBUCxDQUFvQk4sV0FBVyxDQUFDSCxVQUFoQyxDQXhFQztBQXlFTGdFLGdCQUFFLEVBQUU3RCxXQUFXLENBQUNILFVBekVYO0FBMEVMaUUsZUFBQyxFQUFFOUQsV0FBVyxDQUFDSDtBQTFFVixhQUFQO0FBNEVEO0FBL0VBLFNBNUUwQixDQUFqQixDQUFaOztBQThKQSxlQUFPZCxRQUFQO0FBQ0QsT0FwS0QsRUFGQTtBQXdLQTs7O0FBQTZCaEcseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUE0QmdHLFFBQTVCO0FBRTdCO0FBQU8sS0F4NEJHO0FBeTRCVjs7QUFDQTtBQUFPLGNBQVNydEIsTUFBVCxFQUFpQnFuQixtQkFBakIsRUFBc0NmLG1CQUF0QyxFQUEyRDtBQUVsRTtBQUNBOztBQUFpQ2UseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUEyQmxOLGNBQTNCO0FBQ2pDOztBQUFxQixVQUFJa1ksa0RBQWtELEdBQUcvTCxtQkFBbUIsQ0FBQyxDQUFELENBQTVFO0FBQ3JCOzs7QUFBcUIsVUFBSWdNLDBEQUEwRCxHQUFHaE0sbUJBQW1CLENBQUMsRUFBRCxDQUFwRjtBQUNyQjs7O0FBQXFCLFVBQUlpTSxxQ0FBcUMsR0FBR2pNLG1CQUFtQixDQUFDLEVBQUQsQ0FBL0Q7QUFLckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxlQUFTbk0sY0FBVCxDQUF3QitFLFNBQXhCLEVBQW1DM0QsUUFBbkMsRUFBNkM5USxPQUE3QyxFQUFzRDtBQUNwRCxZQUFJckQsSUFBSSxHQUFHdkwsTUFBTSxDQUFDMDJCLHFDQUFxQyxDQUFDO0FBQUk7QUFBTCxTQUF0QyxDQUFOLENBQWlFclQsU0FBakUsRUFBNEV6VSxPQUE1RSxDQUFYLENBRG9ELENBR3BEOztBQUNBLFlBQUluRCxPQUFPLEdBQUcsSUFBSXFCLElBQUosQ0FDWnZCLElBQUksQ0FBQ2dtQixjQUFMLEVBRFksRUFFWmhtQixJQUFJLENBQUNvckIsV0FBTCxFQUZZLEVBR1pwckIsSUFBSSxDQUFDOGxCLFVBQUwsRUFIWSxFQUlaOWxCLElBQUksQ0FBQ3FyQixXQUFMLEVBSlksRUFLWnJyQixJQUFJLENBQUNzckIsYUFBTCxFQUxZLEVBTVp0ckIsSUFBSSxDQUFDdXJCLGFBQUwsRUFOWSxFQU9adnJCLElBQUksQ0FBQ3dyQixrQkFBTCxFQVBZLENBQWQsQ0FKb0QsQ0FhcEQ7O0FBQ0EsWUFBSXJyQixrQkFBa0IsR0FBRzFMLE1BQU0sQ0FBQ3cyQixrREFBa0QsQ0FBQztBQUFJO0FBQUwsU0FBbkQsQ0FBTixDQUE4RTlXLFFBQTlFLEVBQXdGblUsSUFBeEYsQ0FBekI7QUFFQSxlQUFPRyxrQkFBa0IsR0FDckIxTCxNQUFNLENBQUN5MkIsMERBQTBELENBQUM7QUFBSTtBQUFMLFNBQTNELENBQU4sQ0FBc0ZockIsT0FBdEYsRUFBK0ZDLGtCQUEvRixDQURxQixHQUVyQkQsT0FGSjtBQUdEO0FBR0Q7O0FBQU8sS0FuOEJHO0FBbzhCVjs7QUFDQTtBQUFPLGNBQVN0SCxNQUFULEVBQWlCcW5CLG1CQUFqQixFQUFzQ2YsbUJBQXRDLEVBQTJEO0FBRWxFO0FBQ0E7O0FBQWlDZSx5QkFBbUIsQ0FBQyxHQUFELENBQW5CLEdBQTJCNWUsY0FBM0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsZUFBU0EsY0FBVCxDQUF3QnJCLElBQXhCLEVBQThCbVUsUUFBOUIsRUFBd0M7QUFDdEMsWUFBSWxCLEdBQUcsR0FBR0MsaUJBQWlCLENBQUNpQixRQUFELENBQTNCO0FBQ0EsZUFBT2xCLEdBQUcsQ0FBQ3dZLGFBQUosR0FBb0J0WSxXQUFXLENBQUNGLEdBQUQsRUFBTWpULElBQU4sQ0FBL0IsR0FBNkNvVCxXQUFXLENBQUNILEdBQUQsRUFBTWpULElBQU4sQ0FBL0Q7QUFDRDs7QUFFRCxVQUFJcVQsU0FBUyxHQUFHO0FBQ2RDLFlBQUksRUFBRSxDQURRO0FBRWRDLGFBQUssRUFBRSxDQUZPO0FBR2RDLFdBQUcsRUFBRSxDQUhTO0FBSWRDLFlBQUksRUFBRSxDQUpRO0FBS2RDLGNBQU0sRUFBRSxDQUxNO0FBTWRDLGNBQU0sRUFBRTtBQU5NLE9BQWhCOztBQVNBLGVBQVNSLFdBQVQsQ0FBcUJGLEdBQXJCLEVBQTBCalQsSUFBMUIsRUFBZ0M7QUFDOUIsWUFBSTRULFNBQVMsR0FBR1gsR0FBRyxDQUFDd1ksYUFBSixDQUFrQnpyQixJQUFsQixDQUFoQjtBQUNBLFlBQUk2VCxNQUFNLEdBQUcsRUFBYjs7QUFDQSxhQUFLLElBQUl6ZSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHd2UsU0FBUyxDQUFDNVYsTUFBOUIsRUFBc0M1SSxDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDLGNBQUkwZSxHQUFHLEdBQUdULFNBQVMsQ0FBQ08sU0FBUyxDQUFDeGUsQ0FBRCxDQUFULENBQWFtRyxJQUFkLENBQW5COztBQUVBLGNBQUl1WSxHQUFHLElBQUksQ0FBWCxFQUFjO0FBQ1pELGtCQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjOVMsUUFBUSxDQUFDNFMsU0FBUyxDQUFDeGUsQ0FBRCxDQUFULENBQWFLLEtBQWQsRUFBcUIsRUFBckIsQ0FBdEI7QUFDRDtBQUNGOztBQUNELGVBQU9vZSxNQUFQO0FBQ0Q7O0FBRUQsZUFBU1QsV0FBVCxDQUFxQkgsR0FBckIsRUFBMEJqVCxJQUExQixFQUFnQztBQUM5QixZQUFJNFQsU0FBUyxHQUFHWCxHQUFHLENBQUNzRyxNQUFKLENBQVd2WixJQUFYLEVBQWlCaW5CLE9BQWpCLENBQXlCLFNBQXpCLEVBQW9DLEVBQXBDLENBQWhCO0FBQ0EsWUFBSWxULE1BQU0sR0FBRywwQ0FBMEMwTSxJQUExQyxDQUErQzdNLFNBQS9DLENBQWIsQ0FGOEIsQ0FHOUI7QUFDQTs7QUFDQSxlQUFPLENBQUNHLE1BQU0sQ0FBQyxDQUFELENBQVAsRUFBWUEsTUFBTSxDQUFDLENBQUQsQ0FBbEIsRUFBdUJBLE1BQU0sQ0FBQyxDQUFELENBQTdCLEVBQWtDQSxNQUFNLENBQUMsQ0FBRCxDQUF4QyxFQUE2Q0EsTUFBTSxDQUFDLENBQUQsQ0FBbkQsRUFBd0RBLE1BQU0sQ0FBQyxDQUFELENBQTlELENBQVA7QUFDRCxPQXpDaUUsQ0EyQ2xFO0FBQ0E7QUFDQTs7O0FBQ0EsVUFBSUMsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsZUFBU2QsaUJBQVQsQ0FBMkJpQixRQUEzQixFQUFxQztBQUNuQyxZQUFJLENBQUNILFFBQVEsQ0FBQ0csUUFBRCxDQUFiLEVBQXlCO0FBQ3ZCO0FBQ0EsY0FBSUYsaUJBQWlCLEdBQUcsSUFBSXhCLElBQUksQ0FBQzJTLGNBQVQsQ0FBd0IsT0FBeEIsRUFBaUM7QUFDdkRsUixrQkFBTSxFQUFFLEtBRCtDO0FBRXZEQyxvQkFBUSxFQUFFLGtCQUY2QztBQUd2RGIsZ0JBQUksRUFBRSxTQUhpRDtBQUl2REMsaUJBQUssRUFBRSxTQUpnRDtBQUt2REMsZUFBRyxFQUFFLFNBTGtEO0FBTXZEQyxnQkFBSSxFQUFFLFNBTmlEO0FBT3ZEQyxrQkFBTSxFQUFFLFNBUCtDO0FBUXZEQyxrQkFBTSxFQUFFO0FBUitDLFdBQWpDLEVBU3JCNEYsTUFUcUIsQ0FTZCxJQUFJaFksSUFBSixDQUFTLDBCQUFULENBVGMsQ0FBeEI7QUFVQSxjQUFJNlMsa0JBQWtCLEdBQ3BCSCxpQkFBaUIsS0FBSyxzQkFBdEIsSUFDQUEsaUJBQWlCLEtBQUssZ0NBRnhCO0FBSUFELGtCQUFRLENBQUNHLFFBQUQsQ0FBUixHQUFxQkMsa0JBQWtCLEdBQ25DLElBQUkzQixJQUFJLENBQUMyUyxjQUFULENBQXdCLE9BQXhCLEVBQWlDO0FBQy9CbFIsa0JBQU0sRUFBRSxLQUR1QjtBQUUvQkMsb0JBQVEsRUFBRUEsUUFGcUI7QUFHL0JiLGdCQUFJLEVBQUUsU0FIeUI7QUFJL0JDLGlCQUFLLEVBQUUsU0FKd0I7QUFLL0JDLGVBQUcsRUFBRSxTQUwwQjtBQU0vQkMsZ0JBQUksRUFBRSxTQU55QjtBQU8vQkMsa0JBQU0sRUFBRSxTQVB1QjtBQVEvQkMsa0JBQU0sRUFBRTtBQVJ1QixXQUFqQyxDQURtQyxHQVduQyxJQUFJbEIsSUFBSSxDQUFDMlMsY0FBVCxDQUF3QixPQUF4QixFQUFpQztBQUMvQi9RLHFCQUFTLEVBQUUsS0FEb0I7QUFFL0JGLG9CQUFRLEVBQUVBLFFBRnFCO0FBRy9CYixnQkFBSSxFQUFFLFNBSHlCO0FBSS9CQyxpQkFBSyxFQUFFLFNBSndCO0FBSy9CQyxlQUFHLEVBQUUsU0FMMEI7QUFNL0JDLGdCQUFJLEVBQUUsU0FOeUI7QUFPL0JDLGtCQUFNLEVBQUUsU0FQdUI7QUFRL0JDLGtCQUFNLEVBQUU7QUFSdUIsV0FBakMsQ0FYSjtBQXFCRDs7QUFDRCxlQUFPSyxRQUFRLENBQUNHLFFBQUQsQ0FBZjtBQUNEO0FBR0Q7O0FBQU8sS0EvaENHO0FBZ2lDVjs7QUFDQTtBQUFPLGNBQVN2YixNQUFULEVBQWlCcW5CLG1CQUFqQixFQUFzQ2YsbUJBQXRDLEVBQTJEO0FBRWxFO0FBQ0E7O0FBQWlDZSx5QkFBbUIsQ0FBQyxHQUFELENBQW5CLEdBQTJCNWYsZUFBM0I7QUFDakM7O0FBQXFCLFVBQUlxckIscURBQXFELEdBQUd4TSxtQkFBbUIsQ0FBQyxDQUFELENBQS9FO0FBQ3JCOzs7QUFBcUIsVUFBSXlNLHVEQUF1RCxHQUFHek0sbUJBQW1CLENBQUMsRUFBRCxDQUFqRjtBQUdyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsZUFBUzdlLGVBQVQsQ0FBeUJ5WCxTQUF6QixFQUFvQzhULFdBQXBDLEVBQWlEO0FBQy9DLFlBQUkxZ0IsU0FBUyxDQUFDbE4sTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN4QixnQkFBTSxJQUFJNGpCLFNBQUosQ0FBYyxvQ0FBb0MxVyxTQUFTLENBQUNsTixNQUE5QyxHQUF1RCxVQUFyRSxDQUFOO0FBQ0Q7O0FBRUQsWUFBSXVXLE1BQU0sR0FBRzlmLE1BQU0sQ0FBQ2kzQixxREFBcUQsQ0FBQztBQUFJO0FBQUwsU0FBdEQsQ0FBTixDQUFpRkUsV0FBakYsQ0FBYjtBQUNBLGVBQU9uM0IsTUFBTSxDQUFDazNCLHVEQUF1RCxDQUFDO0FBQUk7QUFBTCxTQUF4RCxDQUFOLENBQW1GN1QsU0FBbkYsRUFBOEYsQ0FBQ3ZELE1BQS9GLENBQVA7QUFDRDtBQUVEOztBQUFPLEtBemtDRztBQTBrQ1Y7O0FBQ0E7QUFBTyxjQUFTM2IsTUFBVCxFQUFpQnFuQixtQkFBakIsRUFBc0NmLG1CQUF0QyxFQUEyRDtBQUVsRTtBQUNBOztBQUFpQ2UseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUEyQnhMLGVBQTNCO0FBQ2pDOztBQUFxQixVQUFJaVgscURBQXFELEdBQUd4TSxtQkFBbUIsQ0FBQyxDQUFELENBQS9FO0FBQ3JCOzs7QUFBcUIsVUFBSTJNLDhDQUE4QyxHQUFHM00sbUJBQW1CLENBQUMsRUFBRCxDQUF4RTtBQUdyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsZUFBU3pLLGVBQVQsQ0FBeUJxRCxTQUF6QixFQUFvQzhULFdBQXBDLEVBQWlEO0FBQy9DLFlBQUkxZ0IsU0FBUyxDQUFDbE4sTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN4QixnQkFBTSxJQUFJNGpCLFNBQUosQ0FBYyxvQ0FBb0MxVyxTQUFTLENBQUNsTixNQUE5QyxHQUF1RCxVQUFyRSxDQUFOO0FBQ0Q7O0FBRUQsWUFBSTBXLFNBQVMsR0FBR2pnQixNQUFNLENBQUNvM0IsOENBQThDLENBQUM7QUFBSTtBQUFMLFNBQS9DLENBQU4sQ0FBMEUvVCxTQUExRSxFQUFxRjZJLE9BQXJGLEVBQWhCO0FBQ0EsWUFBSXBNLE1BQU0sR0FBRzlmLE1BQU0sQ0FBQ2kzQixxREFBcUQsQ0FBQztBQUFJO0FBQUwsU0FBdEQsQ0FBTixDQUFpRkUsV0FBakYsQ0FBYjtBQUNBLGVBQU8sSUFBSXJxQixJQUFKLENBQVNtVCxTQUFTLEdBQUdILE1BQXJCLENBQVA7QUFDRDtBQUVEOztBQUFPLEtBcG5DRztBQXFuQ1Y7O0FBQ0E7QUFBTyxjQUFTM2IsTUFBVCxFQUFpQnFuQixtQkFBakIsRUFBc0NmLG1CQUF0QyxFQUEyRDtBQUVsRTtBQUNBOztBQUFpQ2UseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUEyQmhnQixNQUEzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsZUFBU0EsTUFBVCxDQUFnQjJVLFFBQWhCLEVBQTBCO0FBQ3hCLFlBQUkxSixTQUFTLENBQUNsTixNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLGdCQUFNLElBQUk0akIsU0FBSixDQUFjLG1DQUFtQzFXLFNBQVMsQ0FBQ2xOLE1BQTdDLEdBQXNELFVBQXBFLENBQU47QUFDRDs7QUFFRCxZQUFJMlcsTUFBTSxHQUFHbGdCLE1BQU0sQ0FBQ3FyQixTQUFQLENBQWlCL2YsUUFBakIsQ0FBMEJxZixJQUExQixDQUErQnhLLFFBQS9CLENBQWIsQ0FMd0IsQ0FLK0I7O0FBRXZELFlBQUlBLFFBQVEsWUFBWXJULElBQXBCLElBQTRCLFFBQU9xVCxRQUFQLE1BQW9CLFFBQXBCLElBQWdDRCxNQUFNLEtBQUssZUFBM0UsRUFBNEY7QUFDMUY7QUFDQSxpQkFBTyxJQUFJcFQsSUFBSixDQUFTcVQsUUFBUSxDQUFDK0wsT0FBVCxFQUFULENBQVA7QUFDRCxTQUhELE1BR08sSUFBSSxPQUFPL0wsUUFBUCxLQUFvQixRQUFwQixJQUFnQ0QsTUFBTSxLQUFLLGlCQUEvQyxFQUFrRTtBQUN2RSxpQkFBTyxJQUFJcFQsSUFBSixDQUFTcVQsUUFBVCxDQUFQO0FBQ0QsU0FGTSxNQUVBO0FBQ0wsY0FBSSxDQUFDLE9BQU9BLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0NELE1BQU0sS0FBSyxpQkFBNUMsS0FBa0UsT0FBT3RaLE9BQVAsS0FBbUIsV0FBekYsRUFBc0c7QUFDcEc7QUFDQUEsbUJBQU8sQ0FBQ0QsSUFBUixDQUFhLDZJQUFiLEVBRm9HLENBRXlEOztBQUU3SkMsbUJBQU8sQ0FBQ0QsSUFBUixDQUFhLElBQUkwd0IsS0FBSixHQUFZQyxLQUF6QjtBQUNEOztBQUVELGlCQUFPLElBQUl4cUIsSUFBSixDQUFTMmUsR0FBVCxDQUFQO0FBQ0Q7QUFDRjtBQUVEOztBQUFPLEtBaHJDRztBQWlyQ1Y7O0FBQ0E7QUFBTyxjQUFTdG5CLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7QUFDQTs7QUFBaUNlLHlCQUFtQixDQUFDLEdBQUQsQ0FBbkIsR0FBMkJoZ0IsTUFBM0I7QUFDakM7O0FBQXFCLFVBQUkrckIsaUVBQWlFLEdBQUc5TSxtQkFBbUIsQ0FBQyxDQUFELENBQTNGO0FBQ3JCOzs7QUFBcUIsVUFBSStNLHVGQUF1RixHQUFHL00sbUJBQW1CLENBQUMsRUFBRCxDQUFqSDtBQUNyQjs7O0FBQXFCLFVBQUlnTixrREFBa0QsR0FBR2hOLG1CQUFtQixDQUFDLENBQUQsQ0FBNUU7O0FBS3JCLFVBQUk1ZSxvQkFBb0IsR0FBRyxPQUEzQjtBQUNBLFVBQUlDLHNCQUFzQixHQUFHLEtBQTdCO0FBQ0EsVUFBSXNVLHlCQUF5QixHQUFHLENBQWhDO0FBRUEsVUFBSXJVLFFBQVEsR0FBRztBQUNic1UseUJBQWlCLEVBQUUsTUFETjtBQUViQyxpQkFBUyxFQUFFLEdBRkU7QUFHYkMseUJBQWlCLEVBQUUsT0FITjtBQUtiO0FBQ0FDLFVBQUUsRUFBRSxXQU5TO0FBT2JDLFdBQUcsRUFBRSxDQUNILGVBREcsRUFDYztBQUNqQix1QkFGRyxFQUVjO0FBQ2pCLHVCQUhHLENBR2E7QUFIYixTQVBRO0FBWWJDLFlBQUksRUFBRSxVQVpPO0FBYWJDLGFBQUssRUFBRSxDQUNMLGNBREssRUFDVztBQUNoQixzQkFGSyxFQUVXO0FBQ2hCLHNCQUhLLENBR1U7QUFIVixTQWJNO0FBbUJiO0FBQ0FDLFVBQUUsRUFBRSxZQXBCUztBQXFCYkMsV0FBRyxFQUFFLGFBckJRO0FBc0JiQyxZQUFJLEVBQUUsc0JBdEJPO0FBdUJiQyxXQUFHLEVBQUUsY0F2QlE7QUF3QmJDLFlBQUksRUFBRSx1QkF4Qk87QUEwQmJDLFVBQUUsRUFBRSxxQkExQlM7QUEyQmJDLFlBQUksRUFBRSw4QkEzQk87QUE0QmJDLGNBQU0sRUFBRSx1Q0E1Qks7QUE4QmI7QUFDQW5WLGdCQUFRLEVBQUU7QUEvQkcsT0FBZjtBQWtDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLGVBQVNSLE1BQVQsQ0FBZ0IyVSxRQUFoQixFQUEwQmlCLFlBQTFCLEVBQXdDO0FBQ3RDLFlBQUkzSyxTQUFTLENBQUNsTixNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLGdCQUFNLElBQUk0akIsU0FBSixDQUNKLG1DQUFtQzFXLFNBQVMsQ0FBQ2xOLE1BQTdDLEdBQXNELFVBRGxELENBQU47QUFHRDs7QUFFRCxZQUFJNFcsUUFBUSxLQUFLLElBQWpCLEVBQXVCO0FBQ3JCLGlCQUFPLElBQUlyVCxJQUFKLENBQVMyZSxHQUFULENBQVA7QUFDRDs7QUFFRCxZQUFJN2MsT0FBTyxHQUFHd1MsWUFBWSxJQUFJLEVBQTlCO0FBRUEsWUFBSUMsZ0JBQWdCLEdBQ2xCelMsT0FBTyxDQUFDeVMsZ0JBQVIsSUFBNEIsSUFBNUIsR0FDSWpCLHlCQURKLEdBRUlwZ0IsTUFBTSxDQUFDdTNCLGlFQUFpRSxDQUFDO0FBQUk7QUFBTCxTQUFsRSxDQUFOLENBQTZGM29CLE9BQU8sQ0FBQ3lTLGdCQUFyRyxDQUhOOztBQUlBLFlBQ0VBLGdCQUFnQixLQUFLLENBQXJCLElBQ0FBLGdCQUFnQixLQUFLLENBRHJCLElBRUFBLGdCQUFnQixLQUFLLENBSHZCLEVBSUU7QUFDQSxnQkFBTSxJQUFJcVcsVUFBSixDQUFlLG9DQUFmLENBQU47QUFDRCxTQXZCcUMsQ0F5QnRDOzs7QUFDQSxZQUNFdlgsUUFBUSxZQUFZclQsSUFBcEIsSUFDQyxRQUFPcVQsUUFBUCxNQUFvQixRQUFwQixJQUNDbmdCLE1BQU0sQ0FBQ3FyQixTQUFQLENBQWlCL2YsUUFBakIsQ0FBMEJxZixJQUExQixDQUErQnhLLFFBQS9CLE1BQTZDLGVBSGpELEVBSUU7QUFDQTtBQUNBLGlCQUFPLElBQUlyVCxJQUFKLENBQVNxVCxRQUFRLENBQUMrTCxPQUFULEVBQVQsQ0FBUDtBQUNELFNBUEQsTUFPTyxJQUNMLE9BQU8vTCxRQUFQLEtBQW9CLFFBQXBCLElBQ0FuZ0IsTUFBTSxDQUFDcXJCLFNBQVAsQ0FBaUIvZixRQUFqQixDQUEwQnFmLElBQTFCLENBQStCeEssUUFBL0IsTUFBNkMsaUJBRnhDLEVBR0w7QUFDQSxpQkFBTyxJQUFJclQsSUFBSixDQUFTcVQsUUFBVCxDQUFQO0FBQ0QsU0FMTSxNQUtBLElBQ0wsRUFDRSxPQUFPQSxRQUFQLEtBQW9CLFFBQXBCLElBQ0FuZ0IsTUFBTSxDQUFDcXJCLFNBQVAsQ0FBaUIvZixRQUFqQixDQUEwQnFmLElBQTFCLENBQStCeEssUUFBL0IsTUFBNkMsaUJBRi9DLENBREssRUFLTDtBQUNBLGlCQUFPLElBQUlyVCxJQUFKLENBQVMyZSxHQUFULENBQVA7QUFDRDs7QUFFRCxZQUFJbkssV0FBVyxHQUFHQyxlQUFlLENBQUNwQixRQUFELENBQWpDO0FBRUEsWUFBSXFCLGVBQWUsR0FBR0MsU0FBUyxDQUFDSCxXQUFXLENBQUMvVixJQUFiLEVBQW1COFYsZ0JBQW5CLENBQS9CO0FBQ0EsWUFBSXhDLElBQUksR0FBRzJDLGVBQWUsQ0FBQzNDLElBQTNCO0FBQ0EsWUFBSTZDLGNBQWMsR0FBR0YsZUFBZSxDQUFDRSxjQUFyQztBQUVBLFlBQUluVyxJQUFJLEdBQUdvVyxTQUFTLENBQUNELGNBQUQsRUFBaUI3QyxJQUFqQixDQUFwQjs7QUFFQSxZQUFJaFgsS0FBSyxDQUFDMEQsSUFBRCxDQUFULEVBQWlCO0FBQ2YsaUJBQU8sSUFBSXVCLElBQUosQ0FBUzJlLEdBQVQsQ0FBUDtBQUNEOztBQUVELFlBQUlsZ0IsSUFBSixFQUFVO0FBQ1IsY0FBSTBVLFNBQVMsR0FBRzFVLElBQUksQ0FBQzJnQixPQUFMLEVBQWhCO0FBQ0EsY0FBSXRLLElBQUksR0FBRyxDQUFYO0FBQ0EsY0FBSTVOLE1BQUo7O0FBRUEsY0FBSXNOLFdBQVcsQ0FBQ00sSUFBaEIsRUFBc0I7QUFDcEJBLGdCQUFJLEdBQUdDLFNBQVMsQ0FBQ1AsV0FBVyxDQUFDTSxJQUFiLENBQWhCOztBQUVBLGdCQUFJL1osS0FBSyxDQUFDK1osSUFBRCxDQUFULEVBQWlCO0FBQ2YscUJBQU8sSUFBSTlVLElBQUosQ0FBUzJlLEdBQVQsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsY0FBSW5LLFdBQVcsQ0FBQ3RWLFFBQVosSUFBd0I0QyxPQUFPLENBQUM4USxRQUFwQyxFQUE4QztBQUM1QzFMLGtCQUFNLEdBQUdoVSxNQUFNLENBQUN5M0Isa0RBQWtELENBQUM7QUFBSTtBQUFMLGFBQW5ELENBQU4sQ0FDUG5XLFdBQVcsQ0FBQ3RWLFFBQVosSUFBd0I0QyxPQUFPLENBQUM4USxRQUR6QixFQUVQLElBQUk1UyxJQUFKLENBQVNtVCxTQUFTLEdBQUcyQixJQUFyQixDQUZPLENBQVQ7O0FBSUEsZ0JBQUkvWixLQUFLLENBQUNtTSxNQUFELENBQVQsRUFBbUI7QUFDakIscUJBQU8sSUFBSWxILElBQUosQ0FBUzJlLEdBQVQsQ0FBUDtBQUNEO0FBQ0YsV0FSRCxNQVFPO0FBQ0w7QUFDQXpYLGtCQUFNLEdBQUdoVSxNQUFNLENBQUN3M0IsdUZBQXVGLENBQUM7QUFBSTtBQUFMLGFBQXhGLENBQU4sQ0FBbUgsSUFBSTFxQixJQUFKLENBQVNtVCxTQUFTLEdBQUcyQixJQUFyQixDQUFuSCxDQUFUO0FBQ0E1TixrQkFBTSxHQUFHaFUsTUFBTSxDQUFDdzNCLHVGQUF1RixDQUFDO0FBQUk7QUFBTCxhQUF4RixDQUFOLENBQ1AsSUFBSTFxQixJQUFKLENBQVNtVCxTQUFTLEdBQUcyQixJQUFaLEdBQW1CNU4sTUFBNUIsQ0FETyxDQUFUO0FBR0Q7O0FBRUQsaUJBQU8sSUFBSWxILElBQUosQ0FBU21ULFNBQVMsR0FBRzJCLElBQVosR0FBbUI1TixNQUE1QixDQUFQO0FBQ0QsU0E5QkQsTUE4Qk87QUFDTCxpQkFBTyxJQUFJbEgsSUFBSixDQUFTMmUsR0FBVCxDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxlQUFTbEssZUFBVCxDQUF5QlEsVUFBekIsRUFBcUM7QUFDbkMsWUFBSVQsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsWUFBSXJXLEtBQUssR0FBRzhXLFVBQVUsQ0FBQ29ILEtBQVgsQ0FBaUJwZCxRQUFRLENBQUNzVSxpQkFBMUIsQ0FBWjtBQUNBLFlBQUkyQixVQUFKOztBQUVBLFlBQUlqVyxRQUFRLENBQUN1VSxTQUFULENBQW1Cb1EsSUFBbkIsQ0FBd0J6bEIsS0FBSyxDQUFDLENBQUQsQ0FBN0IsQ0FBSixFQUF1QztBQUNyQ3FXLHFCQUFXLENBQUMvVixJQUFaLEdBQW1CLElBQW5CO0FBQ0F5VyxvQkFBVSxHQUFHL1csS0FBSyxDQUFDLENBQUQsQ0FBbEI7QUFDRCxTQUhELE1BR087QUFDTHFXLHFCQUFXLENBQUMvVixJQUFaLEdBQW1CTixLQUFLLENBQUMsQ0FBRCxDQUF4QjtBQUNBK1csb0JBQVUsR0FBRy9XLEtBQUssQ0FBQyxDQUFELENBQWxCO0FBQ0FxVyxxQkFBVyxDQUFDdFYsUUFBWixHQUF1QmYsS0FBSyxDQUFDLENBQUQsQ0FBNUI7O0FBQ0EsY0FBSWMsUUFBUSxDQUFDd1UsaUJBQVQsQ0FBMkJtUSxJQUEzQixDQUFnQ3BQLFdBQVcsQ0FBQy9WLElBQTVDLENBQUosRUFBdUQ7QUFDckQrVix1QkFBVyxDQUFDL1YsSUFBWixHQUFtQndXLFVBQVUsQ0FBQ29ILEtBQVgsQ0FBaUJwZCxRQUFRLENBQUN3VSxpQkFBMUIsRUFBNkMsQ0FBN0MsQ0FBbkI7QUFDQXlCLHNCQUFVLEdBQUdELFVBQVUsQ0FBQzRRLE1BQVgsQ0FBa0JyUixXQUFXLENBQUMvVixJQUFaLENBQWlCaEMsTUFBbkMsRUFBMkN3WSxVQUFVLENBQUN4WSxNQUF0RCxDQUFiO0FBQ0Q7QUFDRjs7QUFFRCxZQUFJeVksVUFBSixFQUFnQjtBQUNkLGNBQUkzVixLQUFLLEdBQUdOLFFBQVEsQ0FBQ0MsUUFBVCxDQUFrQmdnQixJQUFsQixDQUF1QmhLLFVBQXZCLENBQVo7O0FBQ0EsY0FBSTNWLEtBQUosRUFBVztBQUNUaVYsdUJBQVcsQ0FBQ00sSUFBWixHQUFtQkksVUFBVSxDQUFDd1EsT0FBWCxDQUFtQm5tQixLQUFLLENBQUMsQ0FBRCxDQUF4QixFQUE2QixFQUE3QixDQUFuQjtBQUNBaVYsdUJBQVcsQ0FBQ3RWLFFBQVosR0FBdUJLLEtBQUssQ0FBQyxDQUFELENBQTVCO0FBQ0QsV0FIRCxNQUdPO0FBQ0xpVix1QkFBVyxDQUFDTSxJQUFaLEdBQW1CSSxVQUFuQjtBQUNEO0FBQ0Y7O0FBRUQsZUFBT1YsV0FBUDtBQUNEOztBQUVELGVBQVNHLFNBQVQsQ0FBbUJNLFVBQW5CLEVBQStCVixnQkFBL0IsRUFBaUQ7QUFDL0MsWUFBSVksVUFBVSxHQUFHbFcsUUFBUSxDQUFDMFUsR0FBVCxDQUFhWSxnQkFBYixDQUFqQjtBQUNBLFlBQUlhLFlBQVksR0FBR25XLFFBQVEsQ0FBQzRVLEtBQVQsQ0FBZVUsZ0JBQWYsQ0FBbkI7QUFFQSxZQUFJaFYsS0FBSixDQUorQyxDQU0vQzs7QUFDQUEsYUFBSyxHQUFHTixRQUFRLENBQUMyVSxJQUFULENBQWNzTCxJQUFkLENBQW1CakssVUFBbkIsS0FBa0NHLFlBQVksQ0FBQzhKLElBQWIsQ0FBa0JqSyxVQUFsQixDQUExQzs7QUFDQSxZQUFJMVYsS0FBSixFQUFXO0FBQ1QsY0FBSThWLFVBQVUsR0FBRzlWLEtBQUssQ0FBQyxDQUFELENBQXRCO0FBQ0EsaUJBQU87QUFDTHdTLGdCQUFJLEVBQUV0UyxRQUFRLENBQUM0VixVQUFELEVBQWEsRUFBYixDQURUO0FBRUxULDBCQUFjLEVBQUVLLFVBQVUsQ0FBQzRWLEtBQVgsQ0FBaUJ4VixVQUFVLENBQUM1WSxNQUE1QjtBQUZYLFdBQVA7QUFJRCxTQWQ4QyxDQWdCL0M7OztBQUNBOEMsYUFBSyxHQUFHTixRQUFRLENBQUN5VSxFQUFULENBQVl3TCxJQUFaLENBQWlCakssVUFBakIsS0FBZ0NFLFVBQVUsQ0FBQytKLElBQVgsQ0FBZ0JqSyxVQUFoQixDQUF4Qzs7QUFDQSxZQUFJMVYsS0FBSixFQUFXO0FBQ1QsY0FBSStWLGFBQWEsR0FBRy9WLEtBQUssQ0FBQyxDQUFELENBQXpCO0FBQ0EsaUJBQU87QUFDTHdTLGdCQUFJLEVBQUV0UyxRQUFRLENBQUM2VixhQUFELEVBQWdCLEVBQWhCLENBQVIsR0FBOEIsR0FEL0I7QUFFTFYsMEJBQWMsRUFBRUssVUFBVSxDQUFDNFYsS0FBWCxDQUFpQnZWLGFBQWEsQ0FBQzdZLE1BQS9CO0FBRlgsV0FBUDtBQUlELFNBeEI4QyxDQTBCL0M7OztBQUNBLGVBQU87QUFDTHNWLGNBQUksRUFBRTtBQURELFNBQVA7QUFHRDs7QUFFRCxlQUFTOEMsU0FBVCxDQUFtQkksVUFBbkIsRUFBK0JsRCxJQUEvQixFQUFxQztBQUNuQztBQUNBLFlBQUlBLElBQUksS0FBSyxJQUFiLEVBQW1CO0FBQ2pCLGlCQUFPLElBQVA7QUFDRDs7QUFFRCxZQUFJeFMsS0FBSjtBQUNBLFlBQUlkLElBQUo7QUFDQSxZQUFJdVQsS0FBSjtBQUNBLFlBQUkwRCxJQUFKLENBVG1DLENBV25DOztBQUNBLFlBQUlULFVBQVUsQ0FBQ3hZLE1BQVgsS0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0JnQyxjQUFJLEdBQUcsSUFBSXVCLElBQUosQ0FBUyxDQUFULENBQVA7QUFDQXZCLGNBQUksQ0FBQ3FzQixjQUFMLENBQW9CL1ksSUFBcEI7QUFDQSxpQkFBT3RULElBQVA7QUFDRCxTQWhCa0MsQ0FrQm5DOzs7QUFDQWMsYUFBSyxHQUFHTixRQUFRLENBQUM2VSxFQUFULENBQVlvTCxJQUFaLENBQWlCakssVUFBakIsQ0FBUjs7QUFDQSxZQUFJMVYsS0FBSixFQUFXO0FBQ1RkLGNBQUksR0FBRyxJQUFJdUIsSUFBSixDQUFTLENBQVQsQ0FBUDtBQUNBZ1MsZUFBSyxHQUFHdlMsUUFBUSxDQUFDRixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQUFSLEdBQXlCLENBQWpDOztBQUVBLGNBQUksQ0FBQ2dXLFlBQVksQ0FBQ3hELElBQUQsRUFBT0MsS0FBUCxDQUFqQixFQUFnQztBQUM5QixtQkFBTyxJQUFJaFMsSUFBSixDQUFTMmUsR0FBVCxDQUFQO0FBQ0Q7O0FBRURsZ0IsY0FBSSxDQUFDcXNCLGNBQUwsQ0FBb0IvWSxJQUFwQixFQUEwQkMsS0FBMUI7QUFDQSxpQkFBT3ZULElBQVA7QUFDRCxTQTlCa0MsQ0FnQ25DOzs7QUFDQWMsYUFBSyxHQUFHTixRQUFRLENBQUM4VSxHQUFULENBQWFtTCxJQUFiLENBQWtCakssVUFBbEIsQ0FBUjs7QUFDQSxZQUFJMVYsS0FBSixFQUFXO0FBQ1RkLGNBQUksR0FBRyxJQUFJdUIsSUFBSixDQUFTLENBQVQsQ0FBUDtBQUNBLGNBQUl3VixTQUFTLEdBQUcvVixRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQXhCOztBQUVBLGNBQUksQ0FBQ2tXLHFCQUFxQixDQUFDMUQsSUFBRCxFQUFPeUQsU0FBUCxDQUExQixFQUE2QztBQUMzQyxtQkFBTyxJQUFJeFYsSUFBSixDQUFTMmUsR0FBVCxDQUFQO0FBQ0Q7O0FBRURsZ0IsY0FBSSxDQUFDcXNCLGNBQUwsQ0FBb0IvWSxJQUFwQixFQUEwQixDQUExQixFQUE2QnlELFNBQTdCO0FBQ0EsaUJBQU8vVyxJQUFQO0FBQ0QsU0E1Q2tDLENBOENuQzs7O0FBQ0FjLGFBQUssR0FBR04sUUFBUSxDQUFDK1UsSUFBVCxDQUFja0wsSUFBZCxDQUFtQmpLLFVBQW5CLENBQVI7O0FBQ0EsWUFBSTFWLEtBQUosRUFBVztBQUNUZCxjQUFJLEdBQUcsSUFBSXVCLElBQUosQ0FBUyxDQUFULENBQVA7QUFDQWdTLGVBQUssR0FBR3ZTLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXLEVBQVgsQ0FBUixHQUF5QixDQUFqQztBQUNBLGNBQUkwUyxHQUFHLEdBQUd4UyxRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQWxCOztBQUVBLGNBQUksQ0FBQ2dXLFlBQVksQ0FBQ3hELElBQUQsRUFBT0MsS0FBUCxFQUFjQyxHQUFkLENBQWpCLEVBQXFDO0FBQ25DLG1CQUFPLElBQUlqUyxJQUFKLENBQVMyZSxHQUFULENBQVA7QUFDRDs7QUFFRGxnQixjQUFJLENBQUNxc0IsY0FBTCxDQUFvQi9ZLElBQXBCLEVBQTBCQyxLQUExQixFQUFpQ0MsR0FBakM7QUFDQSxpQkFBT3hULElBQVA7QUFDRCxTQTNEa0MsQ0E2RG5DOzs7QUFDQWMsYUFBSyxHQUFHTixRQUFRLENBQUNnVixHQUFULENBQWFpTCxJQUFiLENBQWtCakssVUFBbEIsQ0FBUjs7QUFDQSxZQUFJMVYsS0FBSixFQUFXO0FBQ1RtVyxjQUFJLEdBQUdqVyxRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQVIsR0FBeUIsQ0FBaEM7O0FBRUEsY0FBSSxDQUFDb1csZ0JBQWdCLENBQUM1RCxJQUFELEVBQU8yRCxJQUFQLENBQXJCLEVBQW1DO0FBQ2pDLG1CQUFPLElBQUkxVixJQUFKLENBQVMyZSxHQUFULENBQVA7QUFDRDs7QUFFRCxpQkFBTy9JLGdCQUFnQixDQUFDN0QsSUFBRCxFQUFPMkQsSUFBUCxDQUF2QjtBQUNELFNBdkVrQyxDQXlFbkM7OztBQUNBblcsYUFBSyxHQUFHTixRQUFRLENBQUNpVixJQUFULENBQWNnTCxJQUFkLENBQW1CakssVUFBbkIsQ0FBUjs7QUFDQSxZQUFJMVYsS0FBSixFQUFXO0FBQ1RtVyxjQUFJLEdBQUdqVyxRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQVIsR0FBeUIsQ0FBaEM7QUFDQSxjQUFJc1csU0FBUyxHQUFHcFcsUUFBUSxDQUFDRixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQUFSLEdBQXlCLENBQXpDOztBQUVBLGNBQUksQ0FBQ29XLGdCQUFnQixDQUFDNUQsSUFBRCxFQUFPMkQsSUFBUCxFQUFhRyxTQUFiLENBQXJCLEVBQThDO0FBQzVDLG1CQUFPLElBQUk3VixJQUFKLENBQVMyZSxHQUFULENBQVA7QUFDRDs7QUFFRCxpQkFBTy9JLGdCQUFnQixDQUFDN0QsSUFBRCxFQUFPMkQsSUFBUCxFQUFhRyxTQUFiLENBQXZCO0FBQ0QsU0FwRmtDLENBc0ZuQzs7O0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsZUFBU2QsU0FBVCxDQUFtQkcsVUFBbkIsRUFBK0I7QUFDN0IsWUFBSTNWLEtBQUo7QUFDQSxZQUFJQyxLQUFKO0FBQ0EsWUFBSUksT0FBSixDQUg2QixDQUs3Qjs7QUFDQUwsYUFBSyxHQUFHTixRQUFRLENBQUNrVixFQUFULENBQVkrSyxJQUFaLENBQWlCaEssVUFBakIsQ0FBUjs7QUFDQSxZQUFJM1YsS0FBSixFQUFXO0FBQ1RDLGVBQUssR0FBR3NXLFVBQVUsQ0FBQ3ZXLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU21tQixPQUFULENBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLENBQUQsQ0FBbEI7O0FBRUEsY0FBSSxDQUFDM1AsWUFBWSxDQUFDdlcsS0FBRCxDQUFqQixFQUEwQjtBQUN4QixtQkFBT21mLEdBQVA7QUFDRDs7QUFFRCxpQkFBUW5mLEtBQUssR0FBRyxFQUFULEdBQWVULG9CQUF0QjtBQUNELFNBZjRCLENBaUI3Qjs7O0FBQ0FRLGFBQUssR0FBR04sUUFBUSxDQUFDbVYsSUFBVCxDQUFjOEssSUFBZCxDQUFtQmhLLFVBQW5CLENBQVI7O0FBQ0EsWUFBSTNWLEtBQUosRUFBVztBQUNUQyxlQUFLLEdBQUdDLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXLEVBQVgsQ0FBaEI7QUFDQUssaUJBQU8sR0FBR2tXLFVBQVUsQ0FBQ3ZXLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU21tQixPQUFULENBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLENBQUQsQ0FBcEI7O0FBRUEsY0FBSSxDQUFDM1AsWUFBWSxDQUFDdlcsS0FBRCxFQUFRSSxPQUFSLENBQWpCLEVBQW1DO0FBQ2pDLG1CQUFPK2UsR0FBUDtBQUNEOztBQUVELGlCQUNHbmYsS0FBSyxHQUFHLEVBQVQsR0FBZVQsb0JBQWYsR0FBc0NhLE9BQU8sR0FBR1osc0JBRGxEO0FBR0QsU0E5QjRCLENBZ0M3Qjs7O0FBQ0FPLGFBQUssR0FBR04sUUFBUSxDQUFDb1YsTUFBVCxDQUFnQjZLLElBQWhCLENBQXFCaEssVUFBckIsQ0FBUjs7QUFDQSxZQUFJM1YsS0FBSixFQUFXO0FBQ1RDLGVBQUssR0FBR0MsUUFBUSxDQUFDRixLQUFLLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQUFoQjtBQUNBSyxpQkFBTyxHQUFHSCxRQUFRLENBQUNGLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQWxCO0FBQ0EsY0FBSXlXLE9BQU8sR0FBR0YsVUFBVSxDQUFDdlcsS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTbW1CLE9BQVQsQ0FBaUIsR0FBakIsRUFBc0IsR0FBdEIsQ0FBRCxDQUF4Qjs7QUFFQSxjQUFJLENBQUMzUCxZQUFZLENBQUN2VyxLQUFELEVBQVFJLE9BQVIsRUFBaUJvVyxPQUFqQixDQUFqQixFQUE0QztBQUMxQyxtQkFBTzJJLEdBQVA7QUFDRDs7QUFFRCxpQkFDR25mLEtBQUssR0FBRyxFQUFULEdBQWVULG9CQUFmLEdBQ0FhLE9BQU8sR0FBR1osc0JBRFYsR0FFQWdYLE9BQU8sR0FBRyxJQUhaO0FBS0QsU0FoRDRCLENBa0Q3Qjs7O0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsZUFBU0osZ0JBQVQsQ0FBMEJtVixXQUExQixFQUF1Q3JWLElBQXZDLEVBQTZDekQsR0FBN0MsRUFBa0Q7QUFDaER5RCxZQUFJLEdBQUdBLElBQUksSUFBSSxDQUFmO0FBQ0F6RCxXQUFHLEdBQUdBLEdBQUcsSUFBSSxDQUFiO0FBQ0EsWUFBSXhULElBQUksR0FBRyxJQUFJdUIsSUFBSixDQUFTLENBQVQsQ0FBWDtBQUNBdkIsWUFBSSxDQUFDcXNCLGNBQUwsQ0FBb0JDLFdBQXBCLEVBQWlDLENBQWpDLEVBQW9DLENBQXBDO0FBQ0EsWUFBSTlVLGtCQUFrQixHQUFHeFgsSUFBSSxDQUFDNGxCLFNBQUwsTUFBb0IsQ0FBN0M7QUFDQSxZQUFJbk8sSUFBSSxHQUFHUixJQUFJLEdBQUcsQ0FBUCxHQUFXekQsR0FBWCxHQUFpQixDQUFqQixHQUFxQmdFLGtCQUFoQztBQUNBeFgsWUFBSSxDQUFDNmxCLFVBQUwsQ0FBZ0I3bEIsSUFBSSxDQUFDOGxCLFVBQUwsS0FBb0JyTyxJQUFwQztBQUNBLGVBQU96WCxJQUFQO0FBQ0QsT0FoWmlFLENBa1psRTs7O0FBRUEsVUFBSTBYLGFBQWEsR0FBRyxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWIsRUFBaUIsRUFBakIsRUFBcUIsRUFBckIsRUFBeUIsRUFBekIsRUFBNkIsRUFBN0IsRUFBaUMsRUFBakMsRUFBcUMsRUFBckMsRUFBeUMsRUFBekMsRUFBNkMsRUFBN0MsQ0FBcEI7QUFDQSxVQUFJQyx1QkFBdUIsR0FBRyxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsRUFBVCxFQUFhLEVBQWIsRUFBaUIsRUFBakIsRUFBcUIsRUFBckIsRUFBeUIsRUFBekIsRUFBNkIsRUFBN0IsRUFBaUMsRUFBakMsRUFBcUMsRUFBckMsRUFBeUMsRUFBekMsRUFBNkMsRUFBN0MsQ0FBOUI7O0FBRUEsZUFBU0UsZUFBVCxDQUF5QnZFLElBQXpCLEVBQStCO0FBQzdCLGVBQU9BLElBQUksR0FBRyxHQUFQLEtBQWUsQ0FBZixJQUFxQkEsSUFBSSxHQUFHLENBQVAsS0FBYSxDQUFiLElBQWtCQSxJQUFJLEdBQUcsR0FBUCxLQUFlLENBQTdEO0FBQ0Q7O0FBRUQsZUFBU3dELFlBQVQsQ0FBc0J4RCxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUN2VCxJQUFuQyxFQUF5QztBQUN2QyxZQUFJdVQsS0FBSyxHQUFHLENBQVIsSUFBYUEsS0FBSyxHQUFHLEVBQXpCLEVBQTZCO0FBQzNCLGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJdlQsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDaEIsY0FBSUEsSUFBSSxHQUFHLENBQVgsRUFBYztBQUNaLG1CQUFPLEtBQVA7QUFDRDs7QUFFRCxjQUFJNFgsVUFBVSxHQUFHQyxlQUFlLENBQUN2RSxJQUFELENBQWhDOztBQUNBLGNBQUlzRSxVQUFVLElBQUk1WCxJQUFJLEdBQUcyWCx1QkFBdUIsQ0FBQ3BFLEtBQUQsQ0FBaEQsRUFBeUQ7QUFDdkQsbUJBQU8sS0FBUDtBQUNEOztBQUNELGNBQUksQ0FBQ3FFLFVBQUQsSUFBZTVYLElBQUksR0FBRzBYLGFBQWEsQ0FBQ25FLEtBQUQsQ0FBdkMsRUFBZ0Q7QUFDOUMsbUJBQU8sS0FBUDtBQUNEO0FBQ0Y7O0FBRUQsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsZUFBU3lELHFCQUFULENBQStCMUQsSUFBL0IsRUFBcUN5RCxTQUFyQyxFQUFnRDtBQUM5QyxZQUFJQSxTQUFTLEdBQUcsQ0FBaEIsRUFBbUI7QUFDakIsaUJBQU8sS0FBUDtBQUNEOztBQUVELFlBQUlhLFVBQVUsR0FBR0MsZUFBZSxDQUFDdkUsSUFBRCxDQUFoQzs7QUFDQSxZQUFJc0UsVUFBVSxJQUFJYixTQUFTLEdBQUcsR0FBOUIsRUFBbUM7QUFDakMsaUJBQU8sS0FBUDtBQUNEOztBQUNELFlBQUksQ0FBQ2EsVUFBRCxJQUFlYixTQUFTLEdBQUcsR0FBL0IsRUFBb0M7QUFDbEMsaUJBQU8sS0FBUDtBQUNEOztBQUVELGVBQU8sSUFBUDtBQUNEOztBQUVELGVBQVNHLGdCQUFULENBQTBCNUQsSUFBMUIsRUFBZ0MyRCxJQUFoQyxFQUFzQ3pELEdBQXRDLEVBQTJDO0FBQ3pDLFlBQUl5RCxJQUFJLEdBQUcsQ0FBUCxJQUFZQSxJQUFJLEdBQUcsRUFBdkIsRUFBMkI7QUFDekIsaUJBQU8sS0FBUDtBQUNEOztBQUVELFlBQUl6RCxHQUFHLElBQUksSUFBUCxLQUFnQkEsR0FBRyxHQUFHLENBQU4sSUFBV0EsR0FBRyxHQUFHLENBQWpDLENBQUosRUFBeUM7QUFDdkMsaUJBQU8sS0FBUDtBQUNEOztBQUVELGVBQU8sSUFBUDtBQUNEOztBQUVELGVBQVM4RCxZQUFULENBQXNCdlcsS0FBdEIsRUFBNkJJLE9BQTdCLEVBQXNDb1csT0FBdEMsRUFBK0M7QUFDN0MsWUFBSXhXLEtBQUssSUFBSSxJQUFULEtBQWtCQSxLQUFLLEdBQUcsQ0FBUixJQUFhQSxLQUFLLElBQUksRUFBeEMsQ0FBSixFQUFpRDtBQUMvQyxpQkFBTyxLQUFQO0FBQ0Q7O0FBRUQsWUFBSUksT0FBTyxJQUFJLElBQVgsS0FBb0JBLE9BQU8sR0FBRyxDQUFWLElBQWVBLE9BQU8sSUFBSSxFQUE5QyxDQUFKLEVBQXVEO0FBQ3JELGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJb1csT0FBTyxJQUFJLElBQVgsS0FBb0JBLE9BQU8sR0FBRyxDQUFWLElBQWVBLE9BQU8sSUFBSSxFQUE5QyxDQUFKLEVBQXVEO0FBQ3JELGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxlQUFPLElBQVA7QUFDRDtBQUdEOztBQUFPLEtBaHBERztBQWlwRFY7O0FBQ0E7QUFBTyxjQUFTM2UsTUFBVCxFQUFpQnFuQixtQkFBakIsRUFBc0NmLG1CQUF0QyxFQUEyRDtBQUVsRTtBQUNBOztBQUFpQ2UseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUEyQjFKLCtCQUEzQjtBQUNqQyxVQUFJaFcsc0JBQXNCLEdBQUcsS0FBN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGVBQVNnVywrQkFBVCxDQUF5Q3VCLFNBQXpDLEVBQW9EO0FBQ2xELFlBQUk5WCxJQUFJLEdBQUcsSUFBSXVCLElBQUosQ0FBU3VXLFNBQVMsQ0FBQzZJLE9BQVYsRUFBVCxDQUFYO0FBQ0EsWUFBSTVJLGtCQUFrQixHQUFHeGIsSUFBSSxDQUFDNGpCLElBQUwsQ0FBVW5nQixJQUFJLENBQUNpbEIsaUJBQUwsRUFBVixDQUF6QjtBQUNBamxCLFlBQUksQ0FBQ3VzQixVQUFMLENBQWdCLENBQWhCLEVBQW1CLENBQW5CO0FBQ0EsWUFBSXRVLGdDQUFnQyxHQUFHalksSUFBSSxDQUFDMmdCLE9BQUwsS0FBaUJwZ0Isc0JBQXhEO0FBQ0EsZUFBT3dYLGtCQUFrQixHQUFHeFgsc0JBQXJCLEdBQThDMFgsZ0NBQXJEO0FBQ0Q7QUFFRDs7QUFBTyxLQTNxREc7QUE0cURWOztBQUNBO0FBQU8sY0FBU3JmLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7QUFDQTs7QUFDQTs7QUFBK0JBLHlCQUFtQixDQUFDSSxDQUFwQixDQUFzQlcsbUJBQXRCLEVBQTJDLEdBQTNDLEVBQWdELFlBQVc7QUFBRSxlQUFPdU0sc0JBQVA7QUFBZ0MsT0FBN0Y7QUFDL0I7OztBQUFxQixVQUFJQyxxQ0FBcUMsR0FBR3ZOLG1CQUFtQixDQUFDLEVBQUQsQ0FBL0Q7QUFDckI7OztBQUFxQixVQUFJd04sK0NBQStDLEdBQUd4TixtQkFBbUIsQ0FBQyxFQUFELENBQXpFO0FBQ3JCOzs7QUFBcUIsVUFBSXlOLDhDQUE4QyxHQUFHek4sbUJBQW1CLENBQUMsRUFBRCxDQUF4RTs7QUFLckIsZUFBUzBOLHNCQUFULENBQWdDQyxVQUFoQyxFQUE0QztBQUN4QyxlQUFPcDRCLE1BQU0sQ0FBQ2c0QixxQ0FBcUMsQ0FBQztBQUFJO0FBQUwsU0FBdEMsQ0FBTixDQUE4RUksVUFBOUUsRUFBMEZGLDhDQUE4QyxDQUFDO0FBQUk7QUFBTCxTQUF4SSxDQUFQO0FBQ0g7O0FBRUQsZUFBU0gsc0JBQVQsQ0FBZ0NoYSxNQUFoQyxFQUF3QztBQUNwQyxlQUFPL2QsTUFBTSxDQUFDZzRCLHFDQUFxQyxDQUFDO0FBQUk7QUFBTCxTQUF0QyxDQUFOLENBQThFamEsTUFBOUUsRUFBc0ZrYSwrQ0FBK0MsQ0FBQztBQUFJO0FBQUwsU0FBckksRUFBMEpDLDhDQUE4QyxDQUFDO0FBQUk7QUFBTCxTQUF4TSxDQUFQO0FBQ0g7QUFNRDs7QUFBTyxLQXJzREc7QUFzc0RWOztBQUNBO0FBQU8sY0FBUy96QixNQUFULEVBQWlCcW5CLG1CQUFqQixFQUFzQ2YsbUJBQXRDLEVBQTJEO0FBRWxFO0FBQ0E7O0FBQStCQSx5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBTzZNLG9CQUFQO0FBQThCLE9BQTNGO0FBQy9COzs7QUFBK0I1Tix5QkFBbUIsQ0FBQ0ksQ0FBcEIsQ0FBc0JXLG1CQUF0QixFQUEyQyxHQUEzQyxFQUFnRCxZQUFXO0FBQUUsZUFBT21CLG9CQUFQO0FBQThCLE9BQTNGOztBQUMvQixlQUFTMEwsb0JBQVQsQ0FBOEJELFVBQTlCLEVBQTBDRSxZQUExQyxFQUF3RDtBQUNwRCxZQUFJQyxJQUFJLEdBQUdELFlBQVksQ0FBQyxPQUFPRixVQUFQLEtBQXNCLFFBQXRCLEdBQWlDQSxVQUFVLENBQUNJLFdBQVgsRUFBakMsR0FBNERKLFVBQTdELENBQXZCO0FBQ0EsZUFBTyxPQUFPRyxJQUFQLEtBQWdCLFFBQWhCLEdBQTJCQSxJQUEzQixHQUFrQyxDQUF6QztBQUNIOztBQUVELGVBQVM1TCxvQkFBVCxDQUE4QjVPLE1BQTlCLEVBQXNDMGEsYUFBdEMsRUFBcURILFlBQXJELEVBQW1FO0FBQy9ELFlBQUl2YSxNQUFKLEVBQVk7QUFDUixjQUFJelksSUFBSSxHQUFHeVksTUFBTSxDQUFDMmEsV0FBUCxHQUFxQnZQLEtBQXJCLENBQTJCLE1BQTNCLENBQVg7QUFDQSxjQUFJd1AsUUFBUSxHQUFHcnpCLElBQUksQ0FBQyxDQUFELENBQW5CO0FBQ0EsY0FBSXN6QixPQUFKOztBQUNBLGNBQUl0ekIsSUFBSSxDQUFDLENBQUQsQ0FBSixJQUFXQSxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVFpRSxNQUFSLEtBQW1CLENBQWxDLEVBQXFDO0FBQ2pDb3ZCLG9CQUFRLElBQUksTUFBT3J6QixJQUFJLENBQUMsQ0FBRCxDQUF2QjtBQUNBc3pCLG1CQUFPLEdBQUd0ekIsSUFBSSxDQUFDLENBQUQsQ0FBZDtBQUNILFdBSEQsTUFHTztBQUNIc3pCLG1CQUFPLEdBQUd0ekIsSUFBSSxDQUFDLENBQUQsQ0FBZDtBQUNIOztBQUNELGNBQUksQ0FBQ3N6QixPQUFMLEVBQWM7QUFDVkEsbUJBQU8sR0FBR0gsYUFBYSxDQUFDRSxRQUFELENBQXZCO0FBQ0g7O0FBQ0QsY0FBSUMsT0FBSixFQUFhO0FBQ1QsbUJBQU9QLG9CQUFvQixDQUFDTyxPQUFPLENBQUMza0IsS0FBUixDQUFjLE9BQWQsSUFBeUJyTSxNQUFNLENBQUNneEIsT0FBRCxDQUEvQixHQUEyQ0EsT0FBNUMsRUFBcUROLFlBQXJELENBQTNCO0FBQ0g7QUFDSjs7QUFDRCxlQUFPLENBQVA7QUFDSDtBQU1EOztBQUFPLEtBMXVERztBQTJ1RFY7O0FBQ0E7QUFBTyxjQUFTbjBCLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7O0FBQ0EsVUFBSWdPLGFBQWEsR0FBRztBQUNoQkksVUFBRSxFQUFFLElBRFk7QUFFaEJDLFVBQUUsRUFBRSxJQUZZO0FBR2hCQyxlQUFPLEVBQUUsSUFITztBQUloQkMsWUFBSSxFQUFFLElBSlU7QUFLaEJDLFdBQUcsRUFBRSxJQUxXO0FBTWhCQyxXQUFHLEVBQUUsSUFOVztBQU9oQkMsV0FBRyxFQUFFLElBUFc7QUFRaEJDLFdBQUcsRUFBRSxJQVJXO0FBU2hCQyxXQUFHLEVBQUUsSUFUVztBQVVoQkMsVUFBRSxFQUFFLElBVlk7QUFXaEJDLFVBQUUsRUFBRSxJQVhZO0FBWWhCQyxVQUFFLEVBQUUsSUFaWTtBQWFoQkMsVUFBRSxFQUFFLElBYlk7QUFjaEJDLFVBQUUsRUFBRSxJQWRZO0FBZWhCQyxVQUFFLEVBQUUsSUFmWTtBQWdCaEJDLFVBQUUsRUFBRSxJQWhCWTtBQWlCaEJoRixVQUFFLEVBQUUsSUFqQlk7QUFrQmhCaUYsZUFBTyxFQUFFLElBbEJPO0FBbUJoQkMsV0FBRyxFQUFFLElBbkJXO0FBb0JoQkMsV0FBRyxFQUFFLElBcEJXO0FBcUJoQkMsVUFBRSxFQUFFLElBckJZO0FBc0JoQkMsV0FBRyxFQUFFLElBdEJXO0FBdUJoQkMsV0FBRyxFQUFFLElBdkJXO0FBd0JoQkMsV0FBRyxFQUFFLElBeEJXO0FBeUJoQkMsV0FBRyxFQUFFLElBekJXO0FBMEJoQkMsV0FBRyxFQUFFLElBMUJXO0FBMkJoQkMsV0FBRyxFQUFFLElBM0JXO0FBNEJoQkMsVUFBRSxFQUFFLElBNUJZO0FBNkJoQkMsVUFBRSxFQUFFLElBN0JZO0FBOEJoQkMsVUFBRSxFQUFFLElBOUJZO0FBK0JoQkMsVUFBRSxFQUFFLElBL0JZO0FBZ0NoQkMsV0FBRyxFQUFFLElBaENXO0FBaUNoQmoyQixVQUFFLEVBQUUsSUFqQ1k7QUFrQ2hCazJCLFVBQUUsRUFBRSxJQWxDWTtBQW1DaEJDLFVBQUUsRUFBRSxJQW5DWTtBQW9DaEJDLFdBQUcsRUFBRSxJQXBDVztBQXFDaEJDLGVBQU8sRUFBRSxJQXJDTztBQXNDaEJDLFVBQUUsRUFBRSxJQXRDWTtBQXVDaEJDLFVBQUUsRUFBRSxJQXZDWTtBQXdDaEJDLFdBQUcsRUFBRSxJQXhDVztBQXlDaEJDLFVBQUUsRUFBRSxJQXpDWTtBQTBDaEJDLFVBQUUsRUFBRSxJQTFDWTtBQTJDaEJDLFVBQUUsRUFBRSxJQTNDWTtBQTRDaEJDLFVBQUUsRUFBRSxJQTVDWTtBQTZDaEJDLFVBQUUsRUFBRSxJQTdDWTtBQThDaEJDLFVBQUUsRUFBRSxJQTlDWTtBQStDaEJDLFVBQUUsRUFBRSxJQS9DWTtBQWdEaEJDLFVBQUUsRUFBRSxJQWhEWTtBQWlEaEJDLFdBQUcsRUFBRSxJQWpEVztBQWtEaEJDLFdBQUcsRUFBRSxJQWxEVztBQW1EaEJDLFdBQUcsRUFBRSxJQW5EVztBQW9EaEJDLFVBQUUsRUFBRSxJQXBEWTtBQXFEaEJDLFVBQUUsRUFBRSxJQXJEWTtBQXNEaEJDLGVBQU8sRUFBRSxJQXRETztBQXVEaEJDLFlBQUksRUFBRSxJQXZEVTtBQXdEaEJDLFdBQUcsRUFBRSxJQXhEVztBQXlEaEJDLFVBQUUsRUFBRSxJQXpEWTtBQTBEaEJoSCxVQUFFLEVBQUUsSUExRFk7QUEyRGhCaUgsZUFBTyxFQUFFLElBM0RPO0FBNERoQkMsV0FBRyxFQUFFLElBNURXO0FBNkRoQkMsVUFBRSxFQUFFLElBN0RZO0FBOERoQkMsVUFBRSxFQUFFLElBOURZO0FBK0RoQkMsV0FBRyxFQUFFLElBL0RXO0FBZ0VoQkMsV0FBRyxFQUFFLElBaEVXO0FBaUVoQkMsZUFBTyxFQUFFLElBakVPO0FBa0VoQkMsWUFBSSxFQUFFLElBbEVVO0FBbUVoQkMsVUFBRSxFQUFFLElBbkVZO0FBb0VoQkMsVUFBRSxFQUFFLElBcEVZO0FBcUVoQkMsVUFBRSxFQUFFLElBckVZO0FBc0VoQkMsV0FBRyxFQUFFLElBdEVXO0FBdUVoQkMsVUFBRSxFQUFFLElBdkVZO0FBd0VoQkMsV0FBRyxFQUFFLElBeEVXO0FBeUVoQkMsVUFBRSxFQUFFLElBekVZO0FBMEVoQkMsZUFBTyxFQUFFLElBMUVPO0FBMkVoQkMsV0FBRyxFQUFFLElBM0VXO0FBNEVoQkMsVUFBRSxFQUFFLElBNUVZO0FBNkVoQkMsV0FBRyxFQUFFLElBN0VXO0FBOEVoQkMsVUFBRSxFQUFFO0FBOUVZLE9BQXBCO0FBaUZBOztBQUE2Qi9SLHlCQUFtQixDQUFDLEdBQUQsQ0FBbkIsR0FBNEJpTixhQUE1QjtBQUk3QjtBQUFPLEtBcDBERztBQXEwRFY7O0FBQ0E7QUFBTyxjQUFTdDBCLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7O0FBQ0EsVUFBSTZOLFlBQVksR0FBRztBQUNma0YsVUFBRSxFQUFFLENBRFc7QUFFZkMsV0FBRyxFQUFFLENBRlU7QUFHZixZQUFJLENBSFc7QUFJZkMsVUFBRSxFQUFFLENBSlc7QUFLZkMsV0FBRyxFQUFFLENBTFU7QUFNZixZQUFJLENBTlc7QUFPZkMsVUFBRSxFQUFFLENBUFc7QUFRZkMsV0FBRyxFQUFFLENBUlU7QUFTZixZQUFJLENBVFc7QUFVZkMsVUFBRSxFQUFFLENBVlc7QUFXZkMsV0FBRyxFQUFFLENBWFU7QUFZZixZQUFJLENBWlc7QUFhZkMsVUFBRSxFQUFFLENBYlc7QUFjZkMsV0FBRyxFQUFFLENBZFU7QUFlZixZQUFJLENBZlc7QUFnQmZDLFVBQUUsRUFBRSxDQWhCVztBQWlCZkMsV0FBRyxFQUFFLENBakJVO0FBa0JmLFlBQUksQ0FsQlc7QUFtQmZDLFVBQUUsRUFBRSxDQW5CVztBQW9CZkMsV0FBRyxFQUFFLENBcEJVO0FBcUJmLFlBQUksQ0FyQlc7QUFzQmZDLFVBQUUsRUFBRSxDQXRCVztBQXVCZkMsV0FBRyxFQUFFLENBdkJVO0FBd0JmLFlBQUksQ0F4Qlc7QUF5QmZDLFVBQUUsRUFBRSxDQXpCVztBQTBCZkMsV0FBRyxFQUFFLENBMUJVO0FBMkJmLFlBQUksQ0EzQlc7QUE0QmZDLFVBQUUsRUFBRSxDQTVCVztBQTZCZkMsV0FBRyxFQUFFLENBN0JVO0FBOEJmLGFBQUssQ0E5QlU7QUErQmZDLFVBQUUsRUFBRSxDQS9CVztBQWdDZkMsV0FBRyxFQUFFLENBaENVO0FBaUNmLGFBQUssQ0FqQ1U7QUFrQ2ZDLFVBQUUsRUFBRSxDQWxDVztBQW1DZkMsV0FBRyxFQUFFLENBbkNVO0FBb0NmLGFBQUssQ0FwQ1U7QUFxQ2ZDLFVBQUUsRUFBRSxDQXJDVztBQXNDZkMsV0FBRyxFQUFFLENBdENVO0FBdUNmLGFBQUssQ0F2Q1U7QUF3Q2ZDLFVBQUUsRUFBRSxDQXhDVztBQXlDZkMsV0FBRyxFQUFFLENBekNVO0FBMENmLGFBQUssQ0ExQ1U7QUEyQ2ZDLFVBQUUsRUFBRSxDQTNDVztBQTRDZkMsV0FBRyxFQUFFLENBNUNVO0FBNkNmLGFBQUssQ0E3Q1U7QUE4Q2ZDLFVBQUUsRUFBRSxDQTlDVztBQStDZkMsV0FBRyxFQUFFLENBL0NVO0FBZ0RmLGFBQUssQ0FoRFU7QUFpRGZDLFVBQUUsRUFBRSxDQWpEVztBQWtEZkMsV0FBRyxFQUFFLENBbERVO0FBbURmLGFBQUssQ0FuRFU7QUFvRGZDLFVBQUUsRUFBRSxDQXBEVztBQXFEZkMsV0FBRyxFQUFFLENBckRVO0FBc0RmLGFBQUssQ0F0RFU7QUF1RGZDLFVBQUUsRUFBRSxDQXZEVztBQXdEZkMsV0FBRyxFQUFFLENBeERVO0FBeURmLGFBQUssQ0F6RFU7QUEwRGZDLFVBQUUsRUFBRSxDQTFEVztBQTJEZkMsV0FBRyxFQUFFLENBM0RVO0FBNERmLGFBQUssQ0E1RFU7QUE2RGZDLFVBQUUsRUFBRSxDQTdEVztBQThEZkMsV0FBRyxFQUFFLENBOURVO0FBK0RmLGFBQUssQ0EvRFU7QUFnRWZDLFVBQUUsRUFBRSxDQWhFVztBQWlFZkMsV0FBRyxFQUFFLENBakVVO0FBa0VmLGFBQUssQ0FsRVU7QUFtRWZDLFVBQUUsRUFBRSxDQW5FVztBQW9FZkMsV0FBRyxFQUFFLENBcEVVO0FBcUVmLGFBQUssQ0FyRVU7QUFzRWZDLFVBQUUsRUFBRSxDQXRFVztBQXVFZkMsV0FBRyxFQUFFLENBdkVVO0FBd0VmLGFBQUssQ0F4RVU7QUF5RWZDLFVBQUUsRUFBRSxDQXpFVztBQTBFZkMsV0FBRyxFQUFFLENBMUVVO0FBMkVmLGFBQUssQ0EzRVU7QUE0RWZDLFVBQUUsRUFBRSxDQTVFVztBQTZFZkMsV0FBRyxFQUFFLENBN0VVO0FBOEVmLGFBQUssQ0E5RVU7QUErRWZDLFVBQUUsRUFBRSxDQS9FVztBQWdGZkMsV0FBRyxFQUFFLENBaEZVO0FBaUZmLGFBQUssQ0FqRlU7QUFrRmZDLFVBQUUsRUFBRSxDQWxGVztBQW1GZkMsV0FBRyxFQUFFLENBbkZVO0FBb0ZmLGFBQUssQ0FwRlU7QUFxRmZDLFVBQUUsRUFBRSxDQXJGVztBQXNGZkMsV0FBRyxFQUFFLENBdEZVO0FBdUZmLGFBQUssQ0F2RlU7QUF3RmZDLFVBQUUsRUFBRSxDQXhGVztBQXlGZkMsV0FBRyxFQUFFLENBekZVO0FBMEZmLGFBQUssQ0ExRlU7QUEyRmZ2Z0IsVUFBRSxFQUFFLENBM0ZXO0FBNEZmd2dCLFdBQUcsRUFBRSxDQTVGVTtBQTZGZixhQUFLLENBN0ZVO0FBOEZmQyxVQUFFLEVBQUUsQ0E5Rlc7QUErRmZDLFdBQUcsRUFBRSxDQS9GVTtBQWdHZixhQUFLLENBaEdVO0FBaUdmQyxVQUFFLEVBQUUsQ0FqR1c7QUFrR2ZDLFdBQUcsRUFBRSxDQWxHVTtBQW1HZixhQUFLLENBbkdVO0FBb0dmQyxVQUFFLEVBQUUsQ0FwR1c7QUFxR2ZDLFdBQUcsRUFBRSxDQXJHVTtBQXNHZixhQUFLLENBdEdVO0FBdUdmQyxVQUFFLEVBQUUsQ0F2R1c7QUF3R2ZDLFdBQUcsRUFBRSxDQXhHVTtBQXlHZixhQUFLLENBekdVO0FBMEdmQyxVQUFFLEVBQUUsQ0ExR1c7QUEyR2ZDLFdBQUcsRUFBRSxDQTNHVTtBQTRHZixhQUFLLENBNUdVO0FBNkdmQyxVQUFFLEVBQUUsQ0E3R1c7QUE4R2ZDLFdBQUcsRUFBRSxDQTlHVTtBQStHZixhQUFLLENBL0dVO0FBZ0hmQyxVQUFFLEVBQUUsQ0FoSFc7QUFpSGZDLFdBQUcsRUFBRSxDQWpIVTtBQWtIZixhQUFLLENBbEhVO0FBbUhmQyxVQUFFLEVBQUUsQ0FuSFc7QUFvSGZDLFdBQUcsRUFBRSxDQXBIVTtBQXFIZixhQUFLLENBckhVO0FBc0hmQyxVQUFFLEVBQUUsQ0F0SFc7QUF1SGZDLFdBQUcsRUFBRSxDQXZIVTtBQXdIZixhQUFLLENBeEhVO0FBeUhmQyxVQUFFLEVBQUUsQ0F6SFc7QUEwSGZDLFdBQUcsRUFBRSxDQTFIVTtBQTJIZixhQUFLLENBM0hVO0FBNEhmQyxVQUFFLEVBQUUsQ0E1SFc7QUE2SGZDLFdBQUcsRUFBRSxDQTdIVTtBQThIZixhQUFLLENBOUhVO0FBK0hmQyxVQUFFLEVBQUUsQ0EvSFc7QUFnSWZDLFdBQUcsRUFBRSxDQWhJVTtBQWlJZixhQUFLLENBaklVO0FBa0lmQyxVQUFFLEVBQUUsQ0FsSVc7QUFtSWZDLFdBQUcsRUFBRSxDQW5JVTtBQW9JZixhQUFLLENBcElVO0FBcUlmQyxVQUFFLEVBQUUsQ0FySVc7QUFzSWZDLFdBQUcsRUFBRSxDQXRJVTtBQXVJZixhQUFLLENBdklVO0FBd0lmQyxVQUFFLEVBQUUsQ0F4SVc7QUF5SWZDLFdBQUcsRUFBRSxDQXpJVTtBQTBJZixhQUFLLENBMUlVO0FBMklmQyxVQUFFLEVBQUUsQ0EzSVc7QUE0SWZDLFdBQUcsRUFBRSxDQTVJVTtBQTZJZixhQUFLLENBN0lVO0FBOElmQyxVQUFFLEVBQUUsQ0E5SVc7QUErSWZDLFdBQUcsRUFBRSxDQS9JVTtBQWdKZixhQUFLLENBaEpVO0FBaUpmQyxVQUFFLEVBQUUsQ0FqSlc7QUFrSmZDLFdBQUcsRUFBRSxDQWxKVTtBQW1KZixhQUFLLENBbkpVO0FBb0pmQyxVQUFFLEVBQUUsQ0FwSlc7QUFxSmZDLFdBQUcsRUFBRSxDQXJKVTtBQXNKZixhQUFLLENBdEpVO0FBdUpmQyxVQUFFLEVBQUUsQ0F2Slc7QUF3SmZDLFdBQUcsRUFBRSxDQXhKVTtBQXlKZixhQUFLLENBekpVO0FBMEpmQyxVQUFFLEVBQUUsQ0ExSlc7QUEySmZDLFdBQUcsRUFBRSxDQTNKVTtBQTRKZixhQUFLLENBNUpVO0FBNkpmQyxVQUFFLEVBQUUsQ0E3Slc7QUE4SmZDLFdBQUcsRUFBRSxDQTlKVTtBQStKZixhQUFLLENBL0pVO0FBZ0tmQyxVQUFFLEVBQUUsQ0FoS1c7QUFpS2ZDLFdBQUcsRUFBRSxDQWpLVTtBQWtLZixhQUFLLENBbEtVO0FBbUtmQyxVQUFFLEVBQUUsQ0FuS1c7QUFvS2ZDLFdBQUcsRUFBRSxDQXBLVTtBQXFLZixhQUFLLENBcktVO0FBc0tmQyxVQUFFLEVBQUUsQ0F0S1c7QUF1S2ZDLFdBQUcsRUFBRSxDQXZLVTtBQXdLZixhQUFLLENBeEtVO0FBeUtmQyxVQUFFLEVBQUUsQ0F6S1c7QUEwS2ZDLFdBQUcsRUFBRSxDQTFLVTtBQTJLZixhQUFLLENBM0tVO0FBNEtmQyxVQUFFLEVBQUUsQ0E1S1c7QUE2S2ZDLFdBQUcsRUFBRSxDQTdLVTtBQThLZixhQUFLLENBOUtVO0FBK0tmQyxVQUFFLEVBQUUsQ0EvS1c7QUFnTGZDLFdBQUcsRUFBRSxDQWhMVTtBQWlMZixhQUFLLENBakxVO0FBa0xmQyxVQUFFLEVBQUUsQ0FsTFc7QUFtTGZDLFdBQUcsRUFBRSxDQW5MVTtBQW9MZixhQUFLLENBcExVO0FBcUxmQyxVQUFFLEVBQUUsQ0FyTFc7QUFzTGZDLFdBQUcsRUFBRSxDQXRMVTtBQXVMZixXQUFHLENBdkxZO0FBd0xmQyxVQUFFLEVBQUUsQ0F4TFc7QUF5TGZDLFdBQUcsRUFBRSxDQXpMVTtBQTBMZixZQUFJLENBMUxXO0FBMkxmQyxVQUFFLEVBQUUsQ0EzTFc7QUE0TGZDLFdBQUcsRUFBRSxDQTVMVTtBQTZMZixhQUFLLENBN0xVO0FBOExmQyxVQUFFLEVBQUUsQ0E5TFc7QUErTGZDLFdBQUcsRUFBRSxDQS9MVTtBQWdNZixZQUFJLENBaE1XO0FBaU1mQyxVQUFFLEVBQUUsQ0FqTVc7QUFrTWZDLFdBQUcsRUFBRSxDQWxNVTtBQW1NZixhQUFLLENBbk1VO0FBb01mQyxVQUFFLEVBQUUsQ0FwTVc7QUFxTWZDLFdBQUcsRUFBRSxDQXJNVTtBQXNNZixhQUFLLENBdE1VO0FBdU1mQyxVQUFFLEVBQUUsQ0F2TVc7QUF3TWZDLFdBQUcsRUFBRSxDQXhNVTtBQXlNZixhQUFLLENBek1VO0FBME1mQyxVQUFFLEVBQUUsQ0ExTVc7QUEyTWZDLFdBQUcsRUFBRSxDQTNNVTtBQTRNZixhQUFLLENBNU1VO0FBNk1mQyxVQUFFLEVBQUUsQ0E3TVc7QUE4TWZDLFdBQUcsRUFBRSxDQTlNVTtBQStNZixhQUFLLENBL01VO0FBZ05mQyxVQUFFLEVBQUUsQ0FoTlc7QUFpTmZDLFdBQUcsRUFBRSxDQWpOVTtBQWtOZixhQUFLLENBbE5VO0FBbU5mQyxVQUFFLEVBQUUsQ0FuTlc7QUFvTmZDLFdBQUcsRUFBRSxDQXBOVTtBQXFOZixhQUFLLENBck5VO0FBc05mQyxVQUFFLEVBQUUsQ0F0Tlc7QUF1TmZDLFdBQUcsRUFBRSxDQXZOVTtBQXdOZixhQUFLLENBeE5VO0FBeU5mQyxVQUFFLEVBQUUsQ0F6Tlc7QUEwTmZDLFdBQUcsRUFBRSxDQTFOVTtBQTJOZixhQUFLLENBM05VO0FBNE5mQyxVQUFFLEVBQUUsQ0E1Tlc7QUE2TmZDLFdBQUcsRUFBRSxDQTdOVTtBQThOZixhQUFLLENBOU5VO0FBK05mQyxVQUFFLEVBQUUsQ0EvTlc7QUFnT2ZDLFdBQUcsRUFBRSxDQWhPVTtBQWlPZixhQUFLLENBak9VO0FBa09mQyxVQUFFLEVBQUUsQ0FsT1c7QUFtT2ZDLFdBQUcsRUFBRSxDQW5PVTtBQW9PZixZQUFJLENBcE9XO0FBcU9mQyxVQUFFLEVBQUUsQ0FyT1c7QUFzT2ZDLFdBQUcsRUFBRSxDQXRPVTtBQXVPZixhQUFLO0FBdk9VLE9BQW5CO0FBME9BOztBQUE2QnhiLHlCQUFtQixDQUFDLEdBQUQsQ0FBbkIsR0FBNEI4TSxZQUE1QjtBQUk3QjtBQUFPLEtBdmpFRztBQXdqRVY7O0FBQ0E7QUFBTyxjQUFTbjBCLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7O0FBQ0EsZUFBU3VDLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRDtBQUFFLFlBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDO0FBQUUsZ0JBQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU47QUFBMkQ7QUFBRTs7QUFFekosZUFBU0MsaUJBQVQsQ0FBMkJoc0IsTUFBM0IsRUFBbUNvVCxLQUFuQyxFQUEwQztBQUFFLGFBQUssSUFBSTdULENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc2VCxLQUFLLENBQUNqTCxNQUExQixFQUFrQzVJLENBQUMsRUFBbkMsRUFBdUM7QUFBRSxjQUFJc0IsVUFBVSxHQUFHdVMsS0FBSyxDQUFDN1QsQ0FBRCxDQUF0QjtBQUEyQnNCLG9CQUFVLENBQUNmLFVBQVgsR0FBd0JlLFVBQVUsQ0FBQ2YsVUFBWCxJQUF5QixLQUFqRDtBQUF3RGUsb0JBQVUsQ0FBQ2hCLFlBQVgsR0FBMEIsSUFBMUI7QUFBZ0MsY0FBSSxXQUFXZ0IsVUFBZixFQUEyQkEsVUFBVSxDQUFDVCxRQUFYLEdBQXNCLElBQXRCO0FBQTRCeEIsZ0JBQU0sQ0FBQ0QsY0FBUCxDQUFzQnFCLE1BQXRCLEVBQThCYSxVQUFVLENBQUNwQixHQUF6QyxFQUE4Q29CLFVBQTlDO0FBQTREO0FBQUU7O0FBRTdULGVBQVNvckIsWUFBVCxDQUFzQkgsV0FBdEIsRUFBbUNJLFVBQW5DLEVBQStDQyxXQUEvQyxFQUE0RDtBQUFFLFlBQUlELFVBQUosRUFBZ0JGLGlCQUFpQixDQUFDRixXQUFXLENBQUM3QixTQUFiLEVBQXdCaUMsVUFBeEIsQ0FBakI7QUFBc0QsWUFBSUMsV0FBSixFQUFpQkgsaUJBQWlCLENBQUNGLFdBQUQsRUFBY0ssV0FBZCxDQUFqQjtBQUE2QyxlQUFPTCxXQUFQO0FBQXFCO0FBRXZOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxVQUFJK1osYUFBYSxHQUFHLE9BQXBCO0FBQ0EsVUFBSUMsaUJBQWlCLEdBQUcsSUFBeEI7QUFDQSxVQUFJQyxlQUFlLEdBQUcsa0NBQXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFJQyxXQUFXLEdBQUcsU0FBU0EsV0FBVCxDQUFxQnhaLEdBQXJCLEVBQTBCO0FBQzFDLGVBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDOEssV0FBSixFQUFQLElBQTRCOUssR0FBRyxJQUFJQSxHQUFHLENBQUM0SyxXQUFKLEVBQTFDO0FBQ0QsT0FGRDtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLFVBQUk2TyxXQUFXLEdBQUcsU0FBU0EsV0FBVCxDQUFxQnpaLEdBQXJCLEVBQTBCO0FBQzFDLGVBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDNEssV0FBSixFQUFQLElBQTRCNUssR0FBRyxJQUFJQSxHQUFHLENBQUM4SyxXQUFKLEVBQTFDO0FBQ0QsT0FGRDs7QUFJQSxVQUFJNE8sZ0JBQWdCLEdBQUcsU0FBU0EsZ0JBQVQsQ0FBMEI1WixLQUExQixFQUFpQ2hmLEdBQWpDLEVBQXNDL04sQ0FBdEMsRUFBeUNpdEIsR0FBekMsRUFBOEM7QUFDbkUsWUFBSSxDQUFDRixLQUFMLEVBQVk7QUFDVixjQUFJNlosS0FBSyxHQUFHM1osR0FBRyxDQUFDSyxNQUFKLENBQVd0dEIsQ0FBWCxDQUFaOztBQUVBLGNBQUkwZSxHQUFHLEdBQUcxZSxDQUFDLEdBQUcsQ0FBZDtBQUNBLGdCQUFNO0FBQ0p3QixnQkFBSSxFQUFFLGlCQURGO0FBRUowckIsbUJBQU8sRUFBRSxzREFBc0RxQyxNQUF0RCxDQUE2RDdRLEdBQTdELEVBQWtFLGNBQWxFLEVBQWtGNlEsTUFBbEYsQ0FBeUZxWCxLQUF6RixFQUFnRyxJQUFoRyxDQUZMO0FBR0psb0IsZUFBRyxFQUFFQSxHQUhEO0FBSUosb0JBQVFrb0I7QUFKSixXQUFOO0FBTUQsU0FWRCxNQVVPNzRCLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTLEdBQVQ7QUFDUixPQVpEO0FBYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLFVBQUlxbkIsVUFBVSxHQUNkLGFBQ0EsWUFBWTtBQUNWLGlCQUFTQSxVQUFULEdBQXNCO0FBQ3BCZ0YseUJBQWUsQ0FBQyxJQUFELEVBQU9oRixVQUFQLENBQWY7QUFDRDs7QUFFRHFGLG9CQUFZLENBQUNyRixVQUFELEVBQWEsSUFBYixFQUFtQixDQUFDO0FBQzlCbm5CLGFBQUcsRUFBRSxNQUR5Qjs7QUFHOUI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJRyxlQUFLLEVBQUUsU0FBUytQLElBQVQsQ0FBYzZjLEdBQWQsRUFBbUJKLEtBQW5CLEVBQTBCO0FBQy9CLGdCQUFJRSxLQUFLLEdBQUdqWCxTQUFTLENBQUNsTixNQUFWLEdBQW1CLENBQW5CLElBQXdCa04sU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmdYLFNBQXpDLEdBQXFEaFgsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsSUFBaEY7QUFDQW1YLGVBQUcsR0FBR3hnQixNQUFNLENBQUN3Z0IsR0FBRCxDQUFaO0FBQ0FKLGlCQUFLLEdBQUdwZ0IsTUFBTSxDQUFDb2dCLEtBQUQsQ0FBZDtBQUNBLGdCQUFJRyxPQUFPLEdBQUdILEtBQUssQ0FBQ2prQixNQUFwQjtBQUNBLGdCQUFJaStCLE1BQU0sR0FBRzVaLEdBQUcsQ0FBQ3JrQixNQUFqQjs7QUFFQSxnQkFBSWkrQixNQUFNLEdBQUc3WixPQUFiLEVBQXNCO0FBQ3BCLGtCQUFJRCxLQUFKLEVBQVcsT0FBT0UsR0FBUCxDQUFYLENBQXVCO0FBQXZCLG1CQUNLLE1BQU07QUFDUHpyQixzQkFBSSxFQUFFLHFCQURDO0FBRVAwckIseUJBQU8sRUFBRTtBQUZGLGlCQUFOO0FBSU47O0FBRUQsZ0JBQUluZixHQUFHLEdBQUcsSUFBSXJJLEtBQUosQ0FBVXNuQixPQUFWLENBQVY7QUFDQSxnQkFBSXRPLEdBQUcsR0FBRyxDQUFWLENBaEIrQixDQWdCbEI7O0FBRWIsZ0JBQUlvb0IsUUFBUSxHQUFHLEVBQWY7O0FBRUEsaUJBQUssSUFBSTltQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHZ3RCLE9BQXBCLEVBQTZCaHRCLENBQUMsRUFBOUIsRUFBa0M7QUFDaEM4bUMsc0JBQVEsR0FBR2phLEtBQUssQ0FBQ1MsTUFBTixDQUFhdHRCLENBQWIsQ0FBWDs7QUFFQSxzQkFBUThtQyxRQUFSO0FBQ0UscUJBQUssR0FBTDtBQUNFO0FBQ0EvNEIscUJBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTMGUsR0FBRyxHQUFHbW9CLE1BQU4sR0FBZTVaLEdBQUcsQ0FBQ0ssTUFBSixDQUFXNU8sR0FBWCxDQUFmLEdBQWlDLEdBQTFDO0FBQ0Esb0JBQUVBLEdBQUY7QUFDQTs7QUFFRixxQkFBSyxHQUFMO0FBQ0U7QUFDQSxzQkFBSUEsR0FBRyxHQUFHbW9CLE1BQVYsRUFBa0I7QUFDaEIsd0JBQUlFLEtBQUssR0FBRzlaLEdBQUcsQ0FBQ0ssTUFBSixDQUFXNU8sR0FBWCxDQUFaOztBQUVBLHdCQUFJZ29CLFdBQVcsQ0FBQ0ssS0FBRCxDQUFmLEVBQXdCaDVCLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTK21DLEtBQVQsQ0FBeEIsS0FBNEMsSUFBSU4sV0FBVyxDQUFDTSxLQUFELENBQWYsRUFBd0JoNUIsR0FBRyxDQUFDL04sQ0FBRCxDQUFILEdBQVMrbUMsS0FBSyxDQUFDbFAsV0FBTixFQUFULENBQXhCLEtBQTBEOE8sZ0JBQWdCLENBQUM1WixLQUFELEVBQVFoZixHQUFSLEVBQWEvTixDQUFiLEVBQWdCaXRCLEdBQWhCLENBQWhCO0FBQ3ZHLG1CQUpELE1BSU9sZixHQUFHLENBQUMvTixDQUFELENBQUgsR0FBUyxHQUFUOztBQUVQLG9CQUFFMGUsR0FBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRTtBQUNBLHNCQUFJQSxHQUFHLEdBQUdtb0IsTUFBVixFQUFrQjtBQUNoQix3QkFBSUcsTUFBTSxHQUFHL1osR0FBRyxDQUFDSyxNQUFKLENBQVc1TyxHQUFYLENBQWI7O0FBRUEsd0JBQUlnb0IsV0FBVyxDQUFDTSxNQUFELENBQVgsSUFBdUJQLFdBQVcsQ0FBQ08sTUFBRCxDQUF0QyxFQUFnRGo1QixHQUFHLENBQUMvTixDQUFELENBQUgsR0FBU2duQyxNQUFULENBQWhELEtBQXFFTCxnQkFBZ0IsQ0FBQzVaLEtBQUQsRUFBUWhmLEdBQVIsRUFBYS9OLENBQWIsRUFBZ0JpdEIsR0FBaEIsQ0FBaEI7QUFDdEUsbUJBSkQsTUFJT2xmLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTLEdBQVQ7O0FBRVAsb0JBQUUwZSxHQUFGO0FBQ0E7O0FBRUYscUJBQUssR0FBTDtBQUNFO0FBQ0Esc0JBQUlBLEdBQUcsR0FBR21vQixNQUFWLEVBQWtCO0FBQ2hCLHdCQUFJSSxNQUFNLEdBQUdoYSxHQUFHLENBQUNLLE1BQUosQ0FBVzVPLEdBQVgsQ0FBYjs7QUFFQSx3QkFBSTRuQixhQUFhLENBQUN2VyxJQUFkLENBQW1Ca1gsTUFBbkIsQ0FBSixFQUFnQ2w1QixHQUFHLENBQUMvTixDQUFELENBQUgsR0FBU2luQyxNQUFULENBQWhDLEtBQXFETixnQkFBZ0IsQ0FBQzVaLEtBQUQsRUFBUWhmLEdBQVIsRUFBYS9OLENBQWIsRUFBZ0JpdEIsR0FBaEIsQ0FBaEI7QUFDdEQsbUJBSkQsTUFJT2xmLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTLEdBQVQ7O0FBRVAsb0JBQUUwZSxHQUFGO0FBQ0E7O0FBRUYscUJBQUssR0FBTDtBQUNFO0FBQ0Esc0JBQUlBLEdBQUcsR0FBR21vQixNQUFWLEVBQWtCO0FBQ2hCLHdCQUFJSyxNQUFNLEdBQUdqYSxHQUFHLENBQUNLLE1BQUosQ0FBVzVPLEdBQVgsQ0FBYjs7QUFFQSx3QkFBSWdvQixXQUFXLENBQUNRLE1BQUQsQ0FBWCxJQUF1QlosYUFBYSxDQUFDdlcsSUFBZCxDQUFtQm1YLE1BQW5CLENBQTNCLEVBQXVEbjVCLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTa25DLE1BQVQsQ0FBdkQsS0FBNEUsSUFBSVQsV0FBVyxDQUFDUyxNQUFELENBQWYsRUFBeUJuNUIsR0FBRyxDQUFDL04sQ0FBRCxDQUFILEdBQVNrbkMsTUFBTSxDQUFDclAsV0FBUCxFQUFULENBQXpCLEtBQTREOE8sZ0JBQWdCLENBQUM1WixLQUFELEVBQVFoZixHQUFSLEVBQWEvTixDQUFiLEVBQWdCaXRCLEdBQWhCLENBQWhCO0FBQ3pJLG1CQUpELE1BSU9sZixHQUFHLENBQUMvTixDQUFELENBQUgsR0FBUyxHQUFUOztBQUVQLG9CQUFFMGUsR0FBRjtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRTtBQUNBLHNCQUFJQSxHQUFHLEdBQUdtb0IsTUFBVixFQUFrQjtBQUNoQix3QkFBSU0sTUFBTSxHQUFHbGEsR0FBRyxDQUFDSyxNQUFKLENBQVc1TyxHQUFYLENBQWI7O0FBRUEsd0JBQUlnb0IsV0FBVyxDQUFDUyxNQUFELENBQVgsSUFBdUJWLFdBQVcsQ0FBQ1UsTUFBRCxDQUFsQyxJQUE4Q2IsYUFBYSxDQUFDdlcsSUFBZCxDQUFtQm9YLE1BQW5CLENBQWxELEVBQThFcDVCLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTbW5DLE1BQVQsQ0FBOUUsS0FBbUdSLGdCQUFnQixDQUFDNVosS0FBRCxFQUFRaGYsR0FBUixFQUFhL04sQ0FBYixFQUFnQml0QixHQUFoQixDQUFoQjtBQUNwRyxtQkFKRCxNQUlPbGYsR0FBRyxDQUFDL04sQ0FBRCxDQUFILEdBQVMsR0FBVDs7QUFFUCxvQkFBRTBlLEdBQUY7QUFDQTtBQUNBOztBQUVGLHFCQUFLLEdBQUw7QUFDRTtBQUNBLHNCQUFJQSxHQUFHLEdBQUdtb0IsTUFBVixFQUFrQjtBQUNoQix3QkFBSU8sTUFBTSxHQUFHbmEsR0FBRyxDQUFDSyxNQUFKLENBQVc1TyxHQUFYLENBQWI7O0FBRUEsd0JBQUkrbkIsV0FBVyxDQUFDVyxNQUFELENBQWYsRUFBeUJyNUIsR0FBRyxDQUFDL04sQ0FBRCxDQUFILEdBQVNvbkMsTUFBTSxDQUFDdlAsV0FBUCxFQUFULENBQXpCLEtBQTRELElBQUk2TyxXQUFXLENBQUNVLE1BQUQsQ0FBWCxJQUF1QmQsYUFBYSxDQUFDdlcsSUFBZCxDQUFtQnFYLE1BQW5CLENBQXZCLElBQXFEYixpQkFBaUIsQ0FBQ3hXLElBQWxCLENBQXVCcVgsTUFBdkIsQ0FBckQsSUFBdUZaLGVBQWUsQ0FBQy9YLE9BQWhCLENBQXdCMlksTUFBeEIsSUFBa0MsQ0FBQyxDQUE5SCxFQUFpSXI1QixHQUFHLENBQUMvTixDQUFELENBQUgsR0FBU29uQyxNQUFULENBQWpJLEtBQXNKVCxnQkFBZ0IsQ0FBQzVaLEtBQUQsRUFBUWhmLEdBQVIsRUFBYS9OLENBQWIsRUFBZ0JpdEIsR0FBaEIsQ0FBaEI7QUFDbk4sbUJBSkQsTUFJT2xmLEdBQUcsQ0FBQy9OLENBQUQsQ0FBSCxHQUFTLEdBQVQ7O0FBRVAsb0JBQUUwZSxHQUFGO0FBQ0E7O0FBRUY7QUFDRTNRLHFCQUFHLENBQUMvTixDQUFELENBQUgsR0FBUzhtQyxRQUFUO0FBQ0E7QUE1RUo7QUE4RUQ7O0FBRUQsZ0JBQUlwb0IsR0FBRyxHQUFHbW9CLE1BQVYsRUFBa0I7QUFDaEIsa0JBQUksQ0FBQzlaLEtBQUwsRUFBWTtBQUNWLHNCQUFNO0FBQ0p2ckIsc0JBQUksRUFBRSxXQURGO0FBRUowckIseUJBQU8sRUFBRTtBQUZMLGlCQUFOO0FBSUQ7QUFDRjs7QUFFRCxtQkFBT25mLEdBQUcsQ0FBQ2doQixJQUFKLENBQVMsRUFBVCxDQUFQO0FBQ0Q7QUFsSTZCLFNBQUQsQ0FBbkIsQ0FBWjs7QUFxSUEsZUFBTzFILFVBQVA7QUFDRCxPQTNJRCxFQUZBO0FBK0lBOzs7QUFBNkJ3RCx5QkFBbUIsQ0FBQyxHQUFELENBQW5CLEdBQTRCeEQsVUFBNUI7QUFFN0I7QUFBTyxLQXZ3RUc7QUF3d0VWOztBQUNBO0FBQU8sY0FBUzdqQixNQUFULEVBQWlCcW5CLG1CQUFqQixFQUFzQ2YsbUJBQXRDLEVBQTJEO0FBRWxFO0FBQ0E7O0FBQXFCLFVBQUl1ZCxvQ0FBb0MsR0FBR3ZkLG1CQUFtQixDQUFDLEVBQUQsQ0FBOUQ7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUE2QmUseUJBQW1CLENBQUMsR0FBRCxDQUFuQixHQUE0QndjLG9DQUFvQyxDQUFDO0FBQUk7QUFBTCxPQUFoRTtBQUU3QjtBQUFPLEtBdnhFRztBQXd4RVY7O0FBQ0E7QUFBTyxjQUFTN2pDLE1BQVQsRUFBaUJxbkIsbUJBQWpCLEVBQXNDZixtQkFBdEMsRUFBMkQ7QUFFbEU7QUFDQTs7QUFBcUIsVUFBSW1CLHlDQUF5QyxHQUFHbkIsbUJBQW1CLENBQUMsQ0FBRCxDQUFuRTtBQUNyQjs7O0FBQXFCLFVBQUk0Qix1Q0FBdUMsR0FBRzVCLG1CQUFtQixDQUFDLENBQUQsQ0FBakU7QUFDckI7OztBQUFxQixVQUFJNkIseUNBQXlDLEdBQUc3QixtQkFBbUIsQ0FBQyxDQUFELENBQW5FOztBQUNyQixlQUFTdUMsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQUUsWUFBSSxFQUFFRCxRQUFRLFlBQVlDLFdBQXRCLENBQUosRUFBd0M7QUFBRSxnQkFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTjtBQUEyRDtBQUFFOztBQUV6SixlQUFTQyxpQkFBVCxDQUEyQmhzQixNQUEzQixFQUFtQ29ULEtBQW5DLEVBQTBDO0FBQUUsYUFBSyxJQUFJN1QsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzZULEtBQUssQ0FBQ2pMLE1BQTFCLEVBQWtDNUksQ0FBQyxFQUFuQyxFQUF1QztBQUFFLGNBQUlzQixVQUFVLEdBQUd1UyxLQUFLLENBQUM3VCxDQUFELENBQXRCO0FBQTJCc0Isb0JBQVUsQ0FBQ2YsVUFBWCxHQUF3QmUsVUFBVSxDQUFDZixVQUFYLElBQXlCLEtBQWpEO0FBQXdEZSxvQkFBVSxDQUFDaEIsWUFBWCxHQUEwQixJQUExQjtBQUFnQyxjQUFJLFdBQVdnQixVQUFmLEVBQTJCQSxVQUFVLENBQUNULFFBQVgsR0FBc0IsSUFBdEI7QUFBNEJ4QixnQkFBTSxDQUFDRCxjQUFQLENBQXNCcUIsTUFBdEIsRUFBOEJhLFVBQVUsQ0FBQ3BCLEdBQXpDLEVBQThDb0IsVUFBOUM7QUFBNEQ7QUFBRTs7QUFFN1QsZUFBU29yQixZQUFULENBQXNCSCxXQUF0QixFQUFtQ0ksVUFBbkMsRUFBK0NDLFdBQS9DLEVBQTREO0FBQUUsWUFBSUQsVUFBSixFQUFnQkYsaUJBQWlCLENBQUNGLFdBQVcsQ0FBQzdCLFNBQWIsRUFBd0JpQyxVQUF4QixDQUFqQjtBQUFzRCxZQUFJQyxXQUFKLEVBQWlCSCxpQkFBaUIsQ0FBQ0YsV0FBRCxFQUFjSyxXQUFkLENBQWpCO0FBQTZDLGVBQU9MLFdBQVA7QUFBcUI7QUFFdk47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLFVBQUkrYSxLQUFLLEdBQ1QsYUFDQSxZQUFZO0FBQ1YsaUJBQVNBLEtBQVQsR0FBaUI7QUFDZmpiLHlCQUFlLENBQUMsSUFBRCxFQUFPaWIsS0FBUCxDQUFmO0FBQ0Q7O0FBRUQ1YSxvQkFBWSxDQUFDNGEsS0FBRCxFQUFRLElBQVIsRUFBYyxDQUFDO0FBQ3pCcG5DLGFBQUcsRUFBRSxRQURvQjs7QUFHekI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNJRyxlQUFLLEVBQUUsU0FBUzJHLE1BQVQsQ0FBZ0J1Z0MsT0FBaEIsRUFBeUJuM0IsSUFBekIsRUFBK0I7QUFDcEMsZ0JBQUlFLGlCQUFpQixHQUFHd0YsU0FBUyxDQUFDbE4sTUFBVixHQUFtQixDQUFuQixJQUF3QmtOLFNBQVMsQ0FBQyxDQUFELENBQVQsS0FBaUJnWCxTQUF6QyxHQUFxRGhYLFNBQVMsQ0FBQyxDQUFELENBQTlELEdBQW9FLEdBQTVGO0FBQ0EsZ0JBQUl2RixnQkFBZ0IsR0FBR3VGLFNBQVMsQ0FBQ2xOLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JrTixTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCZ1gsU0FBekMsR0FBcURoWCxTQUFTLENBQUMsQ0FBRCxDQUE5RCxHQUFvRSxHQUEzRjtBQUNBLGdCQUFJdEYsa0JBQWtCLEdBQUdzRixTQUFTLENBQUNsTixNQUFWLEdBQW1CLENBQW5CLElBQXdCa04sU0FBUyxDQUFDLENBQUQsQ0FBVCxLQUFpQmdYLFNBQXpDLEdBQXFEaFgsU0FBUyxDQUFDLENBQUQsQ0FBOUQsR0FBb0UsS0FBN0Y7QUFDQSxnQkFBSWlYLEtBQUssR0FBR2pYLFNBQVMsQ0FBQ2xOLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JrTixTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCZ1gsU0FBekMsR0FBcURoWCxTQUFTLENBQUMsQ0FBRCxDQUE5RCxHQUFvRSxJQUFoRjtBQUNBLG1CQUFPbVYseUNBQXlDLENBQUM7QUFBSTtBQUFMLGFBQXpDLENBQTZEN2EsSUFBN0QsQ0FBa0VtM0IsT0FBbEUsRUFBMkVuM0IsSUFBM0UsRUFBaUZFLGlCQUFqRixFQUFvR0MsZ0JBQXBHLEVBQXNIQyxrQkFBdEgsRUFBMEl1YyxLQUExSSxDQUFQO0FBQ0Q7QUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQWxDNkIsU0FBRCxFQW9DdkI7QUFDRDdzQixhQUFHLEVBQUUsTUFESjtBQUVERyxlQUFLLEVBQUUsU0FBU3VLLElBQVQsQ0FBYzQ4QixLQUFkLEVBQXFCcDNCLElBQXJCLEVBQTJCZ04sTUFBM0IsRUFBbUMvUixRQUFuQyxFQUE2QztBQUNsRCxtQkFBT3FnQix1Q0FBdUMsQ0FBQztBQUFJO0FBQUwsYUFBdkMsQ0FBMkR0YixJQUEzRCxDQUFnRW8zQixLQUFoRSxFQUF1RXAzQixJQUF2RSxFQUE2RWdOLE1BQTdFLEVBQXFGL1IsUUFBckYsQ0FBUDtBQUNEO0FBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFsQkssU0FwQ3VCLEVBd0R2QjtBQUNEbkwsYUFBRyxFQUFFLFFBREo7QUFFREcsZUFBSyxFQUFFLFNBQVNnUyxNQUFULENBQWdCNGEsR0FBaEIsRUFBcUI3YyxJQUFyQixFQUEyQjtBQUNoQyxnQkFBSTJjLEtBQUssR0FBR2pYLFNBQVMsQ0FBQ2xOLE1BQVYsR0FBbUIsQ0FBbkIsSUFBd0JrTixTQUFTLENBQUMsQ0FBRCxDQUFULEtBQWlCZ1gsU0FBekMsR0FBcURoWCxTQUFTLENBQUMsQ0FBRCxDQUE5RCxHQUFvRSxJQUFoRjtBQUNBLG1CQUFPNlYseUNBQXlDLENBQUM7QUFBSTtBQUFMLGFBQXpDLENBQTZEdmIsSUFBN0QsQ0FBa0U2YyxHQUFsRSxFQUF1RTdjLElBQXZFLEVBQTZFMmMsS0FBN0UsQ0FBUDtBQUNEO0FBTEEsU0F4RHVCLENBQWQsQ0FBWjs7QUFnRUEsZUFBT3VhLEtBQVA7QUFDRCxPQXRFRCxFQUZBO0FBMEVBOzs7QUFBNkJ6Yyx5QkFBbUIsQ0FBQyxHQUFELENBQW5CLEdBQTRCeWMsS0FBNUI7QUFFN0I7QUFBTztBQUNQO0FBcDRFVSxLQWpFTTtBQUFoQjtBQXM4RUMsQ0FoOUVELEU7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUE7QUFDQyxXQUFVdC9CLE1BQVYsRUFBa0IyaEIsT0FBbEIsRUFBMkI7QUFDeEIsZ0NBQU92VCxPQUFQLE9BQW1CLFFBQW5CLElBQStCLE9BQU81UyxNQUFQLEtBQWtCLFdBQWpELEdBQStEQSxNQUFNLENBQUM0UyxPQUFQLEdBQWlCdVQsT0FBTyxFQUF2RixHQUNBLFFBQTZDQyxvQ0FBT0QsT0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLG9HQUFuRCxJQUNDM2hCLFNBREQsQ0FEQTtBQUdILENBSkEsVUFJUSxZQUFZO0FBQUU7QUFFbkI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlJLE1BQUl5L0IsT0FBUSxHQUFHLG9CQUFXO0FBQ3RCQSxXQUFRLEdBQUdwb0MsTUFBTSxDQUFDcW9DLE1BQVAsSUFBaUIsU0FBU0QsUUFBVCxDQUFrQkUsQ0FBbEIsRUFBcUI7QUFDN0MsV0FBSyxJQUFJL2MsQ0FBSixFQUFPNXFCLENBQUMsR0FBRyxDQUFYLEVBQWNxcUIsQ0FBQyxHQUFHdlUsU0FBUyxDQUFDbE4sTUFBakMsRUFBeUM1SSxDQUFDLEdBQUdxcUIsQ0FBN0MsRUFBZ0RycUIsQ0FBQyxFQUFqRCxFQUFxRDtBQUNqRDRxQixTQUFDLEdBQUc5VSxTQUFTLENBQUM5VixDQUFELENBQWI7O0FBQ0EsYUFBSyxJQUFJMnFCLENBQVQsSUFBY0MsQ0FBZDtBQUFpQixjQUFJdnJCLE1BQU0sQ0FBQ3FyQixTQUFQLENBQWlCNWhCLGNBQWpCLENBQWdDa2hCLElBQWhDLENBQXFDWSxDQUFyQyxFQUF3Q0QsQ0FBeEMsQ0FBSixFQUFnRGdkLENBQUMsQ0FBQ2hkLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUNELENBQUQsQ0FBUjtBQUFqRTtBQUNIOztBQUNELGFBQU9nZCxDQUFQO0FBQ0gsS0FORDs7QUFPQSxXQUFPRixPQUFRLENBQUNuL0IsS0FBVCxDQUFlLElBQWYsRUFBcUJ3TixTQUFyQixDQUFQO0FBQ0gsR0FURDs7QUFXQSxXQUFTOHhCLGNBQVQsR0FBMEI7QUFDdEIsU0FBSyxJQUFJaGQsQ0FBQyxHQUFHLENBQVIsRUFBVzVxQixDQUFDLEdBQUcsQ0FBZixFQUFrQjZuQyxFQUFFLEdBQUcveEIsU0FBUyxDQUFDbE4sTUFBdEMsRUFBOEM1SSxDQUFDLEdBQUc2bkMsRUFBbEQsRUFBc0Q3bkMsQ0FBQyxFQUF2RDtBQUEyRDRxQixPQUFDLElBQUk5VSxTQUFTLENBQUM5VixDQUFELENBQVQsQ0FBYTRJLE1BQWxCO0FBQTNEOztBQUNBLFNBQUssSUFBSWsvQixDQUFDLEdBQUdwaUMsS0FBSyxDQUFDa2xCLENBQUQsQ0FBYixFQUFrQmdILENBQUMsR0FBRyxDQUF0QixFQUF5QjV4QixDQUFDLEdBQUcsQ0FBbEMsRUFBcUNBLENBQUMsR0FBRzZuQyxFQUF6QyxFQUE2QzduQyxDQUFDLEVBQTlDO0FBQ0ksV0FBSyxJQUFJK25DLENBQUMsR0FBR2p5QixTQUFTLENBQUM5VixDQUFELENBQWpCLEVBQXNCZ29DLENBQUMsR0FBRyxDQUExQixFQUE2QkMsRUFBRSxHQUFHRixDQUFDLENBQUNuL0IsTUFBekMsRUFBaURvL0IsQ0FBQyxHQUFHQyxFQUFyRCxFQUF5REQsQ0FBQyxJQUFJcFcsQ0FBQyxFQUEvRDtBQUNJa1csU0FBQyxDQUFDbFcsQ0FBRCxDQUFELEdBQU9tVyxDQUFDLENBQUNDLENBQUQsQ0FBUjtBQURKO0FBREo7O0FBR0EsV0FBT0YsQ0FBUDtBQUNIOztBQUVELE1BQUlJLEtBQUssR0FBRyxDQUNSLFVBRFEsRUFFUixTQUZRLEVBR1IsYUFIUSxFQUlSLFdBSlEsRUFLUixXQUxRLEVBTVIsZUFOUSxFQU9SLFFBUFEsRUFRUixlQVJRLEVBU1IsU0FUUSxFQVVSLGVBVlEsRUFXUixjQVhRLEVBWVIsdUJBWlEsQ0FBWjtBQWNBLE1BQUlDLFFBQVEsR0FBRztBQUNYQyxZQUFRLEVBQUUsRUFEQztBQUVYQyxXQUFPLEVBQUUsRUFGRTtBQUdYM2tCLGNBQVUsRUFBRSxLQUhEO0FBSVg0a0IsdUJBQW1CLEVBQUUsS0FKVjtBQUtYQyxhQUFTLEVBQUUsUUFMQTtBQU1YQyxZQUFRLEVBQUUsS0FOQztBQU9YQyxpQkFBYSxFQUFFLG9CQVBKO0FBUVhDLFdBQU8sRUFBRSxRQUFPeDZCLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBbEIsSUFDTEEsTUFBTSxDQUFDeTZCLFNBQVAsQ0FBaUJDLFNBQWpCLENBQTJCbmEsT0FBM0IsQ0FBbUMsTUFBbkMsTUFBK0MsQ0FBQyxDQVR6QztBQVVYb2Esa0JBQWMsRUFBRSxRQVZMO0FBV1hDLHVCQUFtQixFQUFFLElBWFY7QUFZWEMsY0FBVSxFQUFFLElBWkQ7QUFhWEMsaUJBQWEsRUFBRSxJQWJKO0FBY1hDLGVBQVcsRUFBRSxJQWRGO0FBZVgxbEIsY0FBVSxFQUFFLE9BZkQ7QUFnQlhRLGVBQVcsRUFBRSxFQWhCRjtBQWlCWEMsaUJBQWEsRUFBRSxDQWpCSjtBQWtCWGtsQixrQkFBYyxFQUFFLENBbEJMO0FBbUJYQyxXQUFPLEVBQUUsRUFuQkU7QUFvQlhsbEIsaUJBQWEsRUFBRSxLQXBCSjtBQXFCWG1sQixVQUFNLEVBQUUsRUFyQkc7QUFzQlgvbEIsaUJBQWEsRUFBRSxLQXRCSjtBQXVCWHhHLGNBQVUsRUFBRSxLQXZCRDtBQXdCWHdzQixnQkFBWSxFQUFFLHNCQUFVQyxHQUFWLEVBQWU7QUFDekIsYUFBTyxPQUFPcmpDLE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLE9BQU8sQ0FBQ0QsSUFBUixDQUFhc2pDLEdBQWIsQ0FBekM7QUFDSCxLQTFCVTtBQTJCWEMsV0FBTyxFQUFFLGlCQUFVQyxTQUFWLEVBQXFCO0FBQzFCLFVBQUk1K0IsSUFBSSxHQUFHLElBQUl1QixJQUFKLENBQVNxOUIsU0FBUyxDQUFDamUsT0FBVixFQUFULENBQVg7QUFDQTNnQixVQUFJLENBQUM2K0IsUUFBTCxDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsRUFGMEIsQ0FHMUI7O0FBQ0E3K0IsVUFBSSxDQUFDOCtCLE9BQUwsQ0FBYTkrQixJQUFJLENBQUMwbEIsT0FBTCxLQUFpQixDQUFqQixHQUFzQixDQUFDMWxCLElBQUksQ0FBQzhtQixNQUFMLEtBQWdCLENBQWpCLElBQXNCLENBQXpELEVBSjBCLENBSzFCOztBQUNBLFVBQUlpWSxLQUFLLEdBQUcsSUFBSXg5QixJQUFKLENBQVN2QixJQUFJLENBQUNnbEIsV0FBTCxFQUFULEVBQTZCLENBQTdCLEVBQWdDLENBQWhDLENBQVosQ0FOMEIsQ0FPMUI7O0FBQ0EsYUFBUSxJQUNKem9CLElBQUksQ0FBQ2lvQixLQUFMLENBQVcsQ0FBQyxDQUFDeGtCLElBQUksQ0FBQzJnQixPQUFMLEtBQWlCb2UsS0FBSyxDQUFDcGUsT0FBTixFQUFsQixJQUFxQyxRQUFyQyxHQUNSLENBRFEsR0FFUCxDQUFDb2UsS0FBSyxDQUFDalksTUFBTixLQUFpQixDQUFsQixJQUF1QixDQUZqQixJQUdQLENBSEosQ0FESjtBQUtILEtBeENVO0FBeUNYa1ksaUJBQWEsRUFBRSxDQXpDSjtBQTBDWEMsd0JBQW9CLEVBQUUsRUExQ1g7QUEyQ1hDLFVBQU0sRUFBRSxLQTNDRztBQTRDWDFzQixVQUFNLEVBQUUsU0E1Q0c7QUE2Q1gyc0IsbUJBQWUsRUFBRSxDQTdDTjtBQThDWEMsUUFBSSxFQUFFLFFBOUNLO0FBK0NYQyxxQkFBaUIsRUFBRSxVQS9DUjtBQWdEWEMsYUFBUyxFQUFFLHdPQWhEQTtBQWlEWDVtQixjQUFVLEVBQUUsS0FqREQ7QUFrRFg2bUIsT0FBRyxFQUFFLElBQUloK0IsSUFBSixFQWxETTtBQW1EWHdYLFlBQVEsRUFBRSxFQW5EQztBQW9EWHltQixXQUFPLEVBQUUsRUFwREU7QUFxRFhDLGVBQVcsRUFBRSxFQXJERjtBQXNEWEMsYUFBUyxFQUFFLEVBdERBO0FBdURYQyxhQUFTLEVBQUUsRUF2REE7QUF3RFhDLGlCQUFhLEVBQUUsRUF4REo7QUF5RFhDLFVBQU0sRUFBRSxFQXpERztBQTBEWEMsaUJBQWEsRUFBRSxFQTFESjtBQTJEWEMsV0FBTyxFQUFFLEVBM0RFO0FBNERYQyxpQkFBYSxFQUFFLEVBNURKO0FBNkRYQyxnQkFBWSxFQUFFLEVBN0RIO0FBOERYQyx5QkFBcUIsRUFBRSxFQTlEWjtBQStEWEMsV0FBTyxFQUFFLEVBL0RFO0FBZ0VYeGpCLFlBQVEsRUFBRSxNQWhFQztBQWlFWHlqQixtQkFBZSxFQUFFbGUsU0FqRU47QUFrRVhtZSxhQUFTLEVBQUUsc09BbEVBO0FBbUVYQyx5QkFBcUIsRUFBRSxLQW5FWjtBQW9FWEMsY0FBVSxFQUFFLENBcEVEO0FBcUVYQyxVQUFNLEVBQUUsS0FyRUc7QUFzRVhob0IsYUFBUyxFQUFFLEtBdEVBO0FBdUVYYyxlQUFXLEVBQUUsS0F2RUY7QUF3RVhULFFBQUksRUFBRTtBQXhFSyxHQUFmO0FBMkVBLE1BQUk0bkIsT0FBTyxHQUFHO0FBQ1Z6bUIsWUFBUSxFQUFFO0FBQ05DLGVBQVMsRUFBRSxDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixLQUF0QixFQUE2QixLQUE3QixFQUFvQyxLQUFwQyxFQUEyQyxLQUEzQyxDQURMO0FBRU5DLGNBQVEsRUFBRSxDQUNOLFFBRE0sRUFFTixRQUZNLEVBR04sU0FITSxFQUlOLFdBSk0sRUFLTixVQUxNLEVBTU4sUUFOTSxFQU9OLFVBUE07QUFGSixLQURBO0FBYVZDLFVBQU0sRUFBRTtBQUNKRixlQUFTLEVBQUUsQ0FDUCxLQURPLEVBRVAsS0FGTyxFQUdQLEtBSE8sRUFJUCxLQUpPLEVBS1AsS0FMTyxFQU1QLEtBTk8sRUFPUCxLQVBPLEVBUVAsS0FSTyxFQVNQLEtBVE8sRUFVUCxLQVZPLEVBV1AsS0FYTyxFQVlQLEtBWk8sQ0FEUDtBQWVKQyxjQUFRLEVBQUUsQ0FDTixTQURNLEVBRU4sVUFGTSxFQUdOLE9BSE0sRUFJTixPQUpNLEVBS04sS0FMTSxFQU1OLE1BTk0sRUFPTixNQVBNLEVBUU4sUUFSTSxFQVNOLFdBVE0sRUFVTixTQVZNLEVBV04sVUFYTSxFQVlOLFVBWk07QUFmTixLQWJFO0FBMkNWRSxlQUFXLEVBQUUsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsRUFBYSxFQUFiLEVBQWlCLEVBQWpCLEVBQXFCLEVBQXJCLEVBQXlCLEVBQXpCLEVBQTZCLEVBQTdCLEVBQWlDLEVBQWpDLEVBQXFDLEVBQXJDLEVBQXlDLEVBQXpDLEVBQTZDLEVBQTdDLENBM0NIO0FBNENWQyxrQkFBYyxFQUFFLENBNUNOO0FBNkNWQyxXQUFPLEVBQUUsaUJBQVVvbUIsR0FBVixFQUFlO0FBQ3BCLFVBQUkxZ0IsQ0FBQyxHQUFHMGdCLEdBQUcsR0FBRyxHQUFkO0FBQ0EsVUFBSTFnQixDQUFDLEdBQUcsQ0FBSixJQUFTQSxDQUFDLEdBQUcsRUFBakIsRUFDSSxPQUFPLElBQVA7O0FBQ0osY0FBUUEsQ0FBQyxHQUFHLEVBQVo7QUFDSSxhQUFLLENBQUw7QUFDSSxpQkFBTyxJQUFQOztBQUNKLGFBQUssQ0FBTDtBQUNJLGlCQUFPLElBQVA7O0FBQ0osYUFBSyxDQUFMO0FBQ0ksaUJBQU8sSUFBUDs7QUFDSjtBQUNJLGlCQUFPLElBQVA7QUFSUjtBQVVILEtBM0RTO0FBNERWekYsa0JBQWMsRUFBRSxNQTVETjtBQTZEVkMsb0JBQWdCLEVBQUUsSUE3RFI7QUE4RFZDLGVBQVcsRUFBRSxxQkE5REg7QUErRFZDLGVBQVcsRUFBRSxpQkEvREg7QUFnRVZDLFFBQUksRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBaEVJO0FBaUVWQyxpQkFBYSxFQUFFLE1BakVMO0FBa0VWK2xCLGtCQUFjLEVBQUUsT0FsRU47QUFtRVY5bEIsaUJBQWEsRUFBRSxNQW5FTDtBQW9FVkMsbUJBQWUsRUFBRSxRQXBFUDtBQXFFVnRDLGFBQVMsRUFBRTtBQXJFRCxHQUFkOztBQXdFQSxNQUFJOE0sR0FBRyxHQUFHLFNBQU5BLEdBQU0sQ0FBVWxwQixNQUFWLEVBQWtCNEIsTUFBbEIsRUFBMEI7QUFDaEMsUUFBSUEsTUFBTSxLQUFLLEtBQUssQ0FBcEIsRUFBdUI7QUFBRUEsWUFBTSxHQUFHLENBQVQ7QUFBYTs7QUFDdEMsV0FBTyxDQUFDLFFBQVE1QixNQUFULEVBQWlCZ3dCLEtBQWpCLENBQXVCcHVCLE1BQU0sR0FBRyxDQUFDLENBQWpDLENBQVA7QUFDSCxHQUhEOztBQUlBLE1BQUk0aUMsR0FBRyxHQUFHLFNBQU5BLEdBQU0sQ0FBVUMsSUFBVixFQUFnQjtBQUFFLFdBQVFBLElBQUksS0FBSyxJQUFULEdBQWdCLENBQWhCLEdBQW9CLENBQTVCO0FBQWlDLEdBQTdEO0FBQ0E7OztBQUNBLFdBQVNDLFFBQVQsQ0FBa0Jqa0MsSUFBbEIsRUFBd0Jra0MsSUFBeEIsRUFBOEJDLFNBQTlCLEVBQXlDO0FBQ3JDLFFBQUlBLFNBQVMsS0FBSyxLQUFLLENBQXZCLEVBQTBCO0FBQUVBLGVBQVMsR0FBRyxLQUFaO0FBQW9COztBQUNoRCxRQUFJQyxPQUFKO0FBQ0EsV0FBTyxZQUFZO0FBQ2YsVUFBSTErQixPQUFPLEdBQUcsSUFBZDtBQUFBLFVBQW9Cbk0sSUFBSSxHQUFHOFUsU0FBM0I7QUFDQSsxQixhQUFPLEtBQUssSUFBWixJQUFvQkMsWUFBWSxDQUFDRCxPQUFELENBQWhDO0FBQ0FBLGFBQU8sR0FBRzM5QixNQUFNLENBQUNvWixVQUFQLENBQWtCLFlBQVk7QUFDcEN1a0IsZUFBTyxHQUFHLElBQVY7QUFDQSxZQUFJLENBQUNELFNBQUwsRUFDSW5rQyxJQUFJLENBQUNhLEtBQUwsQ0FBVzZFLE9BQVgsRUFBb0JuTSxJQUFwQjtBQUNQLE9BSlMsRUFJUDJxQyxJQUpPLENBQVY7QUFLQSxVQUFJQyxTQUFTLElBQUksQ0FBQ0MsT0FBbEIsRUFDSXBrQyxJQUFJLENBQUNhLEtBQUwsQ0FBVzZFLE9BQVgsRUFBb0JuTSxJQUFwQjtBQUNQLEtBVkQ7QUFXSDs7QUFDRCxNQUFJK3FDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVVqbUMsR0FBVixFQUFlO0FBQzFCLFdBQU9BLEdBQUcsWUFBWUosS0FBZixHQUF1QkksR0FBdkIsR0FBNkIsQ0FBQ0EsR0FBRCxDQUFwQztBQUNILEdBRkQ7O0FBSUEsV0FBU2ttQyxXQUFULENBQXFCQyxJQUFyQixFQUEyQkMsU0FBM0IsRUFBc0NULElBQXRDLEVBQTRDO0FBQ3hDLFFBQUlBLElBQUksS0FBSyxJQUFiLEVBQ0ksT0FBT1EsSUFBSSxDQUFDRSxTQUFMLENBQWVDLEdBQWYsQ0FBbUJGLFNBQW5CLENBQVA7QUFDSkQsUUFBSSxDQUFDRSxTQUFMLENBQWVFLE1BQWYsQ0FBc0JILFNBQXRCO0FBQ0g7O0FBQ0QsV0FBU0ksYUFBVCxDQUF1QnZrQyxHQUF2QixFQUE0Qm1rQyxTQUE1QixFQUF1Q3hvQyxPQUF2QyxFQUFnRDtBQUM1QyxRQUFJaUssQ0FBQyxHQUFHTyxNQUFNLENBQUNULFFBQVAsQ0FBZ0I2K0IsYUFBaEIsQ0FBOEJ2a0MsR0FBOUIsQ0FBUjtBQUNBbWtDLGFBQVMsR0FBR0EsU0FBUyxJQUFJLEVBQXpCO0FBQ0F4b0MsV0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFDQWlLLEtBQUMsQ0FBQ3UrQixTQUFGLEdBQWNBLFNBQWQ7QUFDQSxRQUFJeG9DLE9BQU8sS0FBS29wQixTQUFoQixFQUNJbmYsQ0FBQyxDQUFDNCtCLFdBQUYsR0FBZ0I3b0MsT0FBaEI7QUFDSixXQUFPaUssQ0FBUDtBQUNIOztBQUNELFdBQVM2K0IsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUI7QUFDckIsV0FBT0EsSUFBSSxDQUFDQyxVQUFaO0FBQ0lELFVBQUksQ0FBQ0UsV0FBTCxDQUFpQkYsSUFBSSxDQUFDQyxVQUF0QjtBQURKO0FBRUg7O0FBQ0QsV0FBU0UsVUFBVCxDQUFvQkgsSUFBcEIsRUFBMEIzcUMsU0FBMUIsRUFBcUM7QUFDakMsUUFBSUEsU0FBUyxDQUFDMnFDLElBQUQsQ0FBYixFQUNJLE9BQU9BLElBQVAsQ0FESixLQUVLLElBQUlBLElBQUksQ0FBQ0ksVUFBVCxFQUNELE9BQU9ELFVBQVUsQ0FBQ0gsSUFBSSxDQUFDSSxVQUFOLEVBQWtCL3FDLFNBQWxCLENBQWpCO0FBQ0osV0FBT2dyQixTQUFQLENBTGlDLENBS2Y7QUFDckI7O0FBQ0QsV0FBU2dnQixpQkFBVCxDQUEyQkMsY0FBM0IsRUFBMkNDLElBQTNDLEVBQWlEO0FBQzdDLFFBQUl4akIsT0FBTyxHQUFHOGlCLGFBQWEsQ0FBQyxLQUFELEVBQVEsaUJBQVIsQ0FBM0I7QUFBQSxRQUF1RFcsUUFBUSxHQUFHWCxhQUFhLENBQUMsT0FBRCxFQUFVLGNBQWNTLGNBQXhCLENBQS9FO0FBQUEsUUFBd0hHLE9BQU8sR0FBR1osYUFBYSxDQUFDLE1BQUQsRUFBUyxTQUFULENBQS9JO0FBQUEsUUFBb0thLFNBQVMsR0FBR2IsYUFBYSxDQUFDLE1BQUQsRUFBUyxXQUFULENBQTdMOztBQUNBLFFBQUkzRCxTQUFTLENBQUNDLFNBQVYsQ0FBb0JuYSxPQUFwQixDQUE0QixVQUE1QixNQUE0QyxDQUFDLENBQWpELEVBQW9EO0FBQ2hEd2UsY0FBUSxDQUFDOW1DLElBQVQsR0FBZ0IsUUFBaEI7QUFDSCxLQUZELE1BR0s7QUFDRDhtQyxjQUFRLENBQUM5bUMsSUFBVCxHQUFnQixNQUFoQjtBQUNBOG1DLGNBQVEsQ0FBQ3o3QixPQUFULEdBQW1CLE1BQW5CO0FBQ0g7O0FBQ0QsUUFBSXc3QixJQUFJLEtBQUtsZ0IsU0FBYixFQUNJLEtBQUssSUFBSTVzQixHQUFULElBQWdCOHNDLElBQWhCO0FBQ0lDLGNBQVEsQ0FBQ0csWUFBVCxDQUFzQmx0QyxHQUF0QixFQUEyQjhzQyxJQUFJLENBQUM5c0MsR0FBRCxDQUEvQjtBQURKO0FBRUpzcEIsV0FBTyxDQUFDNmpCLFdBQVIsQ0FBb0JKLFFBQXBCO0FBQ0F6akIsV0FBTyxDQUFDNmpCLFdBQVIsQ0FBb0JILE9BQXBCO0FBQ0ExakIsV0FBTyxDQUFDNmpCLFdBQVIsQ0FBb0JGLFNBQXBCO0FBQ0EsV0FBTzNqQixPQUFQO0FBQ0g7O0FBQ0QsV0FBUzhqQixjQUFULENBQXdCdDhCLEtBQXhCLEVBQStCO0FBQzNCLFFBQUk7QUFDQSxVQUFJLE9BQU9BLEtBQUssQ0FBQ3U4QixZQUFiLEtBQThCLFVBQWxDLEVBQThDO0FBQzFDLFlBQUlDLElBQUksR0FBR3g4QixLQUFLLENBQUN1OEIsWUFBTixFQUFYO0FBQ0EsZUFBT0MsSUFBSSxDQUFDLENBQUQsQ0FBWDtBQUNIOztBQUNELGFBQU94OEIsS0FBSyxDQUFDdlEsTUFBYjtBQUNILEtBTkQsQ0FPQSxPQUFPMlEsS0FBUCxFQUFjO0FBQ1YsYUFBT0osS0FBSyxDQUFDdlEsTUFBYjtBQUNIO0FBQ0o7O0FBRUQsTUFBSWd0QyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxHQUFZO0FBQUUsV0FBTzNnQixTQUFQO0FBQW1CLEdBQWpEOztBQUNBLE1BQUk0Z0IsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBVUMsV0FBVixFQUF1QjlvQixTQUF2QixFQUFrQ3pILE1BQWxDLEVBQTBDO0FBQUUsV0FBT0EsTUFBTSxDQUFDMkgsTUFBUCxDQUFjRixTQUFTLEdBQUcsV0FBSCxHQUFpQixVQUF4QyxFQUFvRDhvQixXQUFwRCxDQUFQO0FBQTBFLEdBQXZJOztBQUNBLE1BQUlDLFNBQVMsR0FBRztBQUNaMWEsS0FBQyxFQUFFdWEsU0FEUztBQUVaSSxLQUFDLEVBQUUsV0FBVUMsT0FBVixFQUFtQkMsU0FBbkIsRUFBOEIzd0IsTUFBOUIsRUFBc0M7QUFDckMwd0IsYUFBTyxDQUFDRSxRQUFSLENBQWlCNXdCLE1BQU0sQ0FBQzJILE1BQVAsQ0FBY0QsUUFBZCxDQUF1QjJKLE9BQXZCLENBQStCc2YsU0FBL0IsQ0FBakI7QUFDSCxLQUpXO0FBS1pFLEtBQUMsRUFBRSxXQUFVSCxPQUFWLEVBQW1CenZCLElBQW5CLEVBQXlCO0FBQ3hCeXZCLGFBQU8sQ0FBQ3JFLFFBQVIsQ0FBaUJ4bkIsVUFBVSxDQUFDNUQsSUFBRCxDQUEzQjtBQUNILEtBUFc7QUFRWm1WLEtBQUMsRUFBRSxXQUFVc2EsT0FBVixFQUFtQnp2QixJQUFuQixFQUF5QjtBQUN4Qnl2QixhQUFPLENBQUNyRSxRQUFSLENBQWlCeG5CLFVBQVUsQ0FBQzVELElBQUQsQ0FBM0I7QUFDSCxLQVZXO0FBV1oyVyxLQUFDLEVBQUUsV0FBVThZLE9BQVYsRUFBbUIxdkIsR0FBbkIsRUFBd0I7QUFDdkIwdkIsYUFBTyxDQUFDcEUsT0FBUixDQUFnQnpuQixVQUFVLENBQUM3RCxHQUFELENBQTFCO0FBQ0gsS0FiVztBQWNaOHZCLEtBQUMsRUFBRSxXQUFVSixPQUFWLEVBQW1Cdm9CLElBQW5CLEVBQXlCbkksTUFBekIsRUFBaUM7QUFDaEMwd0IsYUFBTyxDQUFDckUsUUFBUixDQUFrQnFFLE9BQU8sQ0FBQ3RjLFFBQVIsS0FBcUIsRUFBdEIsR0FDYixLQUFLZ2EsR0FBRyxDQUFDLElBQUl6NEIsTUFBSixDQUFXcUssTUFBTSxDQUFDbUksSUFBUCxDQUFZLENBQVosQ0FBWCxFQUEyQixHQUEzQixFQUFnQ3dLLElBQWhDLENBQXFDeEssSUFBckMsQ0FBRCxDQURaO0FBRUgsS0FqQlc7QUFrQlpxTixLQUFDLEVBQUUsV0FBVWtiLE9BQVYsRUFBbUJLLFVBQW5CLEVBQStCL3dCLE1BQS9CLEVBQXVDO0FBQ3RDMHdCLGFBQU8sQ0FBQ0UsUUFBUixDQUFpQjV3QixNQUFNLENBQUMySCxNQUFQLENBQWNGLFNBQWQsQ0FBd0I0SixPQUF4QixDQUFnQzBmLFVBQWhDLENBQWpCO0FBQ0gsS0FwQlc7QUFxQlpDLEtBQUMsRUFBRSxXQUFVTixPQUFWLEVBQW1CM3JCLE9BQW5CLEVBQTRCO0FBQzNCMnJCLGFBQU8sQ0FBQzNXLFVBQVIsQ0FBbUJsVixVQUFVLENBQUNFLE9BQUQsQ0FBN0I7QUFDSCxLQXZCVztBQXdCWmtzQixLQUFDLEVBQUUsV0FBVUMsQ0FBVixFQUFhQyxXQUFiLEVBQTBCO0FBQUUsYUFBTyxJQUFJcGlDLElBQUosQ0FBUzhWLFVBQVUsQ0FBQ3NzQixXQUFELENBQVYsR0FBMEIsSUFBbkMsQ0FBUDtBQUFrRCxLQXhCckU7QUF5QlpqWixLQUFDLEVBQUUsV0FBVXdZLE9BQVYsRUFBbUJVLE9BQW5CLEVBQTRCcHhCLE1BQTVCLEVBQW9DO0FBQ25DLFVBQUl1VSxVQUFVLEdBQUcvbEIsUUFBUSxDQUFDNGlDLE9BQUQsQ0FBekI7QUFDQSxVQUFJNWpDLElBQUksR0FBRyxJQUFJdUIsSUFBSixDQUFTMmhDLE9BQU8sQ0FBQ2xlLFdBQVIsRUFBVCxFQUFnQyxDQUFoQyxFQUFtQyxJQUFJLENBQUMrQixVQUFVLEdBQUcsQ0FBZCxJQUFtQixDQUExRCxFQUE2RCxDQUE3RCxFQUFnRSxDQUFoRSxFQUFtRSxDQUFuRSxFQUFzRSxDQUF0RSxDQUFYO0FBQ0EvbUIsVUFBSSxDQUFDOCtCLE9BQUwsQ0FBYTkrQixJQUFJLENBQUMwbEIsT0FBTCxLQUFpQjFsQixJQUFJLENBQUM4bUIsTUFBTCxFQUFqQixHQUFpQ3RVLE1BQU0sQ0FBQzZILGNBQXJEO0FBQ0EsYUFBT3JhLElBQVA7QUFDSCxLQTlCVztBQStCWjBuQixLQUFDLEVBQUUsV0FBVXdiLE9BQVYsRUFBbUI1dkIsSUFBbkIsRUFBeUI7QUFDeEI0dkIsYUFBTyxDQUFDVyxXQUFSLENBQW9CeHNCLFVBQVUsQ0FBQy9ELElBQUQsQ0FBOUI7QUFDSCxLQWpDVztBQWtDWnd3QixLQUFDLEVBQUUsV0FBVUosQ0FBVixFQUFhSyxPQUFiLEVBQXNCO0FBQUUsYUFBTyxJQUFJeGlDLElBQUosQ0FBU3dpQyxPQUFULENBQVA7QUFBMkIsS0FsQzFDO0FBbUNaemtCLEtBQUMsRUFBRSxXQUFVNGpCLE9BQVYsRUFBbUIxdkIsR0FBbkIsRUFBd0I7QUFDdkIwdkIsYUFBTyxDQUFDcEUsT0FBUixDQUFnQnpuQixVQUFVLENBQUM3RCxHQUFELENBQTFCO0FBQ0gsS0FyQ1c7QUFzQ1owVixLQUFDLEVBQUUsV0FBVWdhLE9BQVYsRUFBbUJ6dkIsSUFBbkIsRUFBeUI7QUFDeEJ5dkIsYUFBTyxDQUFDckUsUUFBUixDQUFpQnhuQixVQUFVLENBQUM1RCxJQUFELENBQTNCO0FBQ0gsS0F4Q1c7QUF5Q1pyZSxLQUFDLEVBQUUsV0FBVTh0QyxPQUFWLEVBQW1CL2hDLE9BQW5CLEVBQTRCO0FBQzNCK2hDLGFBQU8sQ0FBQ2MsVUFBUixDQUFtQjNzQixVQUFVLENBQUNsVyxPQUFELENBQTdCO0FBQ0gsS0EzQ1c7QUE0Q1ppOEIsS0FBQyxFQUFFLFdBQVU4RixPQUFWLEVBQW1CMXZCLEdBQW5CLEVBQXdCO0FBQ3ZCMHZCLGFBQU8sQ0FBQ3BFLE9BQVIsQ0FBZ0J6bkIsVUFBVSxDQUFDN0QsR0FBRCxDQUExQjtBQUNILEtBOUNXO0FBK0NabmUsS0FBQyxFQUFFd3RDLFNBL0NTO0FBZ0RaeGpCLEtBQUMsRUFBRSxXQUFVNmpCLE9BQVYsRUFBbUIzdkIsS0FBbkIsRUFBMEI7QUFDekIydkIsYUFBTyxDQUFDRSxRQUFSLENBQWlCL3JCLFVBQVUsQ0FBQzlELEtBQUQsQ0FBVixHQUFvQixDQUFyQztBQUNILEtBbERXO0FBbURaa00sS0FBQyxFQUFFLFdBQVV5akIsT0FBVixFQUFtQjN2QixLQUFuQixFQUEwQjtBQUN6QjJ2QixhQUFPLENBQUNFLFFBQVIsQ0FBaUIvckIsVUFBVSxDQUFDOUQsS0FBRCxDQUFWLEdBQW9CLENBQXJDO0FBQ0gsS0FyRFc7QUFzRFp5TSxLQUFDLEVBQUUsV0FBVWtqQixPQUFWLEVBQW1CM3JCLE9BQW5CLEVBQTRCO0FBQzNCMnJCLGFBQU8sQ0FBQzNXLFVBQVIsQ0FBbUJsVixVQUFVLENBQUNFLE9BQUQsQ0FBN0I7QUFDSCxLQXhEVztBQXlEWjBzQixLQUFDLEVBQUUsV0FBVVAsQ0FBVixFQUFhUSxlQUFiLEVBQThCO0FBQzdCLGFBQU8sSUFBSTNpQyxJQUFKLENBQVM4VixVQUFVLENBQUM2c0IsZUFBRCxDQUFuQixDQUFQO0FBQ0gsS0EzRFc7QUE0RFpsWixLQUFDLEVBQUU2WCxTQTVEUztBQTZEWnNCLEtBQUMsRUFBRSxXQUFVakIsT0FBVixFQUFtQjV2QixJQUFuQixFQUF5QjtBQUN4QjR2QixhQUFPLENBQUNXLFdBQVIsQ0FBb0IsT0FBT3hzQixVQUFVLENBQUMvRCxJQUFELENBQXJDO0FBQ0g7QUEvRFcsR0FBaEI7QUFpRUEsTUFBSTh3QixVQUFVLEdBQUc7QUFDYjliLEtBQUMsRUFBRSxRQURVO0FBRWIyYSxLQUFDLEVBQUUsUUFGVTtBQUdiSSxLQUFDLEVBQUUsY0FIVTtBQUliemEsS0FBQyxFQUFFLGNBSlU7QUFLYndCLEtBQUMsRUFBRSxrQkFMVTtBQU1ia1osS0FBQyxFQUFFLEVBTlU7QUFPYnRiLEtBQUMsRUFBRSxRQVBVO0FBUWJ3YixLQUFDLEVBQUUsY0FSVTtBQVNiQyxLQUFDLEVBQUUsTUFUVTtBQVViL1ksS0FBQyxFQUFFLGNBVlU7QUFXYmhELEtBQUMsRUFBRSxVQVhVO0FBWWJvYyxLQUFDLEVBQUUsTUFaVTtBQWFieGtCLEtBQUMsRUFBRSxjQWJVO0FBY2I0SixLQUFDLEVBQUUsY0FkVTtBQWViOXpCLEtBQUMsRUFBRSxjQWZVO0FBZ0JiZ29DLEtBQUMsRUFBRSxjQWhCVTtBQWlCYi9uQyxLQUFDLEVBQUUsUUFqQlU7QUFrQmJncUIsS0FBQyxFQUFFLGNBbEJVO0FBbUJiSSxLQUFDLEVBQUUsY0FuQlU7QUFvQmJPLEtBQUMsRUFBRSxjQXBCVTtBQXFCYmlrQixLQUFDLEVBQUUsTUFyQlU7QUFzQmJqWixLQUFDLEVBQUUsY0F0QlU7QUF1QmJtWixLQUFDLEVBQUU7QUF2QlUsR0FBakI7QUF5QkEsTUFBSUUsT0FBTyxHQUFHO0FBQ1Y7QUFDQVAsS0FBQyxFQUFFLFdBQVU5akMsSUFBVixFQUFnQjtBQUFFLGFBQU9BLElBQUksQ0FBQ3NrQyxXQUFMLEVBQVA7QUFBNEIsS0FGdkM7QUFHVjtBQUNBaGMsS0FBQyxFQUFFLFdBQVV0b0IsSUFBVixFQUFnQndTLE1BQWhCLEVBQXdCblAsT0FBeEIsRUFBaUM7QUFDaEMsYUFBT21QLE1BQU0sQ0FBQ3dILFFBQVAsQ0FBZ0JDLFNBQWhCLENBQTBCb3FCLE9BQU8sQ0FBQ3JaLENBQVIsQ0FBVWhyQixJQUFWLEVBQWdCd1MsTUFBaEIsRUFBd0JuUCxPQUF4QixDQUExQixDQUFQO0FBQ0gsS0FOUztBQU9WO0FBQ0E0L0IsS0FBQyxFQUFFLFdBQVVqakMsSUFBVixFQUFnQndTLE1BQWhCLEVBQXdCblAsT0FBeEIsRUFBaUM7QUFDaEMsYUFBT3kvQixVQUFVLENBQUN1QixPQUFPLENBQUM1a0IsQ0FBUixDQUFVemYsSUFBVixFQUFnQndTLE1BQWhCLEVBQXdCblAsT0FBeEIsSUFBbUMsQ0FBcEMsRUFBdUMsS0FBdkMsRUFBOENtUCxNQUE5QyxDQUFqQjtBQUNILEtBVlM7QUFXVjtBQUNBNndCLEtBQUMsRUFBRSxXQUFVcmpDLElBQVYsRUFBZ0J3UyxNQUFoQixFQUF3Qm5QLE9BQXhCLEVBQWlDO0FBQ2hDLGFBQU9paUIsR0FBRyxDQUFDK2UsT0FBTyxDQUFDbmIsQ0FBUixDQUFVbHBCLElBQVYsRUFBZ0J3UyxNQUFoQixFQUF3Qm5QLE9BQXhCLENBQUQsQ0FBVjtBQUNILEtBZFM7QUFlVjtBQUNBdWxCLEtBQUMsRUFBRSxXQUFVNW9CLElBQVYsRUFBZ0I7QUFBRSxhQUFPc2xCLEdBQUcsQ0FBQ3RsQixJQUFJLENBQUM0bUIsUUFBTCxFQUFELENBQVY7QUFBOEIsS0FoQnpDO0FBaUJWO0FBQ0F3RCxLQUFDLEVBQUUsV0FBVXBxQixJQUFWLEVBQWdCd1MsTUFBaEIsRUFBd0I7QUFDdkIsYUFBT0EsTUFBTSxDQUFDOEgsT0FBUCxLQUFtQjRILFNBQW5CLEdBQ0RsaUIsSUFBSSxDQUFDMGxCLE9BQUwsS0FBaUJsVCxNQUFNLENBQUM4SCxPQUFQLENBQWV0YSxJQUFJLENBQUMwbEIsT0FBTCxFQUFmLENBRGhCLEdBRUQxbEIsSUFBSSxDQUFDMGxCLE9BQUwsRUFGTjtBQUdILEtBdEJTO0FBdUJWO0FBQ0E0ZCxLQUFDLEVBQUUsV0FBVXRqQyxJQUFWLEVBQWdCd1MsTUFBaEIsRUFBd0I7QUFBRSxhQUFPQSxNQUFNLENBQUNtSSxJQUFQLENBQVlpbUIsR0FBRyxDQUFDNWdDLElBQUksQ0FBQzRtQixRQUFMLEtBQWtCLEVBQW5CLENBQWYsQ0FBUDtBQUFnRCxLQXhCbkU7QUF5QlY7QUFDQW9CLEtBQUMsRUFBRSxXQUFVaG9CLElBQVYsRUFBZ0J3UyxNQUFoQixFQUF3QjtBQUN2QixhQUFPc3dCLFVBQVUsQ0FBQzlpQyxJQUFJLENBQUN5bEIsUUFBTCxFQUFELEVBQWtCLElBQWxCLEVBQXdCalQsTUFBeEIsQ0FBakI7QUFDSCxLQTVCUztBQTZCVjtBQUNBZ3hCLEtBQUMsRUFBRSxXQUFVeGpDLElBQVYsRUFBZ0I7QUFBRSxhQUFPc2xCLEdBQUcsQ0FBQ3RsQixJQUFJLENBQUMwbUIsVUFBTCxFQUFELENBQVY7QUFBZ0MsS0E5QjNDO0FBK0JWO0FBQ0ErYyxLQUFDLEVBQUUsV0FBVXpqQyxJQUFWLEVBQWdCO0FBQUUsYUFBT0EsSUFBSSxDQUFDMmdCLE9BQUwsS0FBaUIsSUFBeEI7QUFBK0IsS0FoQzFDO0FBaUNWK0osS0FBQyxFQUFFLFdBQVUxcUIsSUFBVixFQUFnQjBqQyxDQUFoQixFQUFtQnJnQyxPQUFuQixFQUE0QjtBQUMzQixhQUFPQSxPQUFPLENBQUNzN0IsT0FBUixDQUFnQjMrQixJQUFoQixDQUFQO0FBQ0gsS0FuQ1M7QUFvQ1Y7QUFDQTBuQixLQUFDLEVBQUUsV0FBVTFuQixJQUFWLEVBQWdCO0FBQUUsYUFBT3NsQixHQUFHLENBQUN0bEIsSUFBSSxDQUFDZ2xCLFdBQUwsRUFBRCxFQUFxQixDQUFyQixDQUFWO0FBQW9DLEtBckMvQztBQXNDVjtBQUNBMUYsS0FBQyxFQUFFLFdBQVV0ZixJQUFWLEVBQWdCO0FBQUUsYUFBT3NsQixHQUFHLENBQUN0bEIsSUFBSSxDQUFDMGxCLE9BQUwsRUFBRCxDQUFWO0FBQTZCLEtBdkN4QztBQXdDVjtBQUNBd0QsS0FBQyxFQUFFLFdBQVVscEIsSUFBVixFQUFnQjtBQUFFLGFBQVFBLElBQUksQ0FBQzRtQixRQUFMLEtBQWtCLEVBQWxCLEdBQXVCNW1CLElBQUksQ0FBQzRtQixRQUFMLEtBQWtCLEVBQXpDLEdBQThDLEVBQXREO0FBQTRELEtBekN2RTtBQTBDVjtBQUNBeHhCLEtBQUMsRUFBRSxXQUFVNEssSUFBVixFQUFnQjtBQUFFLGFBQU9zbEIsR0FBRyxDQUFDdGxCLElBQUksQ0FBQ3ltQixVQUFMLEVBQUQsQ0FBVjtBQUFnQyxLQTNDM0M7QUE0Q1Y7QUFDQTJXLEtBQUMsRUFBRSxXQUFVcDlCLElBQVYsRUFBZ0I7QUFBRSxhQUFPQSxJQUFJLENBQUMwbEIsT0FBTCxFQUFQO0FBQXdCLEtBN0NuQztBQThDVjtBQUNBcndCLEtBQUMsRUFBRSxXQUFVMkssSUFBVixFQUFnQndTLE1BQWhCLEVBQXdCO0FBQ3ZCLGFBQU9BLE1BQU0sQ0FBQ3dILFFBQVAsQ0FBZ0JFLFFBQWhCLENBQXlCbGEsSUFBSSxDQUFDOG1CLE1BQUwsRUFBekIsQ0FBUDtBQUNILEtBakRTO0FBa0RWO0FBQ0F6SCxLQUFDLEVBQUUsV0FBVXJmLElBQVYsRUFBZ0I7QUFBRSxhQUFPc2xCLEdBQUcsQ0FBQ3RsQixJQUFJLENBQUN5bEIsUUFBTCxLQUFrQixDQUFuQixDQUFWO0FBQWtDLEtBbkQ3QztBQW9EVjtBQUNBaEcsS0FBQyxFQUFFLFdBQVV6ZixJQUFWLEVBQWdCO0FBQUUsYUFBT0EsSUFBSSxDQUFDeWxCLFFBQUwsS0FBa0IsQ0FBekI7QUFBNkIsS0FyRHhDO0FBc0RWO0FBQ0F6RixLQUFDLEVBQUUsV0FBVWhnQixJQUFWLEVBQWdCO0FBQUUsYUFBT0EsSUFBSSxDQUFDMG1CLFVBQUwsRUFBUDtBQUEyQixLQXZEdEM7QUF3RFY7QUFDQXVkLEtBQUMsRUFBRSxXQUFVamtDLElBQVYsRUFBZ0I7QUFBRSxhQUFPQSxJQUFJLENBQUMyZ0IsT0FBTCxFQUFQO0FBQXdCLEtBekRuQztBQTBEVjtBQUNBcUssS0FBQyxFQUFFLFdBQVVockIsSUFBVixFQUFnQjtBQUFFLGFBQU9BLElBQUksQ0FBQzhtQixNQUFMLEVBQVA7QUFBdUIsS0EzRGxDO0FBNERWO0FBQ0FxZCxLQUFDLEVBQUUsV0FBVW5rQyxJQUFWLEVBQWdCO0FBQUUsYUFBTzZCLE1BQU0sQ0FBQzdCLElBQUksQ0FBQ2dsQixXQUFMLEVBQUQsQ0FBTixDQUEyQkosU0FBM0IsQ0FBcUMsQ0FBckMsQ0FBUDtBQUFpRDtBQTdENUQsR0FBZDs7QUFnRUEsTUFBSTJmLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBVUMsRUFBVixFQUFjO0FBQ3BDLFFBQUlDLEVBQUUsR0FBR0QsRUFBRSxDQUFDRSxNQUFaO0FBQUEsUUFBb0JBLE1BQU0sR0FBR0QsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQmxILFFBQWhCLEdBQTJCa0gsRUFBeEQ7QUFBQSxRQUE0REUsRUFBRSxHQUFHSCxFQUFFLENBQUNJLElBQXBFO0FBQUEsUUFBMEVBLElBQUksR0FBR0QsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQmxFLE9BQWhCLEdBQTBCa0UsRUFBM0c7QUFBQSxRQUErR0UsRUFBRSxHQUFHTCxFQUFFLENBQUNNLFFBQXZIO0FBQUEsUUFBaUlBLFFBQVEsR0FBR0QsRUFBRSxLQUFLLEtBQUssQ0FBWixHQUFnQixLQUFoQixHQUF3QkEsRUFBcEs7QUFDQSxXQUFPLFVBQVUzQixPQUFWLEVBQW1CNkIsSUFBbkIsRUFBeUJDLGNBQXpCLEVBQXlDO0FBQzVDLFVBQUl4eUIsTUFBTSxHQUFHd3lCLGNBQWMsSUFBSUosSUFBL0I7O0FBQ0EsVUFBSUYsTUFBTSxDQUFDMXJCLFVBQVAsS0FBc0JrSixTQUF0QixJQUFtQyxDQUFDNGlCLFFBQXhDLEVBQWtEO0FBQzlDLGVBQU9KLE1BQU0sQ0FBQzFyQixVQUFQLENBQWtCa3FCLE9BQWxCLEVBQTJCNkIsSUFBM0IsRUFBaUN2eUIsTUFBakMsQ0FBUDtBQUNIOztBQUNELGFBQU91eUIsSUFBSSxDQUNObm5CLEtBREUsQ0FDSSxFQURKLEVBRUZxbkIsR0FGRSxDQUVFLFVBQVU1bkIsQ0FBVixFQUFham9CLENBQWIsRUFBZ0I4dkMsR0FBaEIsRUFBcUI7QUFDMUIsZUFBT2IsT0FBTyxDQUFDaG5CLENBQUQsQ0FBUCxJQUFjNm5CLEdBQUcsQ0FBQzl2QyxDQUFDLEdBQUcsQ0FBTCxDQUFILEtBQWUsSUFBN0IsR0FDRGl2QyxPQUFPLENBQUNobkIsQ0FBRCxDQUFQLENBQVc2bEIsT0FBWCxFQUFvQjF3QixNQUFwQixFQUE0Qmt5QixNQUE1QixDQURDLEdBRURybkIsQ0FBQyxLQUFLLElBQU4sR0FDSUEsQ0FESixHQUVJLEVBSlY7QUFLSCxPQVJNLEVBU0Y4RyxJQVRFLENBU0csRUFUSCxDQUFQO0FBVUgsS0FmRDtBQWdCSCxHQWxCRDs7QUFtQkEsTUFBSWdoQixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQVVYLEVBQVYsRUFBYztBQUNqQyxRQUFJQyxFQUFFLEdBQUdELEVBQUUsQ0FBQ0UsTUFBWjtBQUFBLFFBQW9CQSxNQUFNLEdBQUdELEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0JsSCxRQUFoQixHQUEyQmtILEVBQXhEO0FBQUEsUUFBNERFLEVBQUUsR0FBR0gsRUFBRSxDQUFDSSxJQUFwRTtBQUFBLFFBQTBFQSxJQUFJLEdBQUdELEVBQUUsS0FBSyxLQUFLLENBQVosR0FBZ0JsRSxPQUFoQixHQUEwQmtFLEVBQTNHO0FBQ0EsV0FBTyxVQUFVM2tDLElBQVYsRUFBZ0JvbEMsV0FBaEIsRUFBNkJDLFFBQTdCLEVBQXVDQyxZQUF2QyxFQUFxRDtBQUN4RCxVQUFJdGxDLElBQUksS0FBSyxDQUFULElBQWMsQ0FBQ0EsSUFBbkIsRUFDSSxPQUFPa2lCLFNBQVA7QUFDSixVQUFJMVAsTUFBTSxHQUFHOHlCLFlBQVksSUFBSVYsSUFBN0I7QUFDQSxVQUFJVyxVQUFKO0FBQ0EsVUFBSUMsUUFBUSxHQUFHeGxDLElBQWY7QUFDQSxVQUFJQSxJQUFJLFlBQVl1QixJQUFwQixFQUNJZ2tDLFVBQVUsR0FBRyxJQUFJaGtDLElBQUosQ0FBU3ZCLElBQUksQ0FBQzJnQixPQUFMLEVBQVQsQ0FBYixDQURKLEtBRUssSUFBSSxPQUFPM2dCLElBQVAsS0FBZ0IsUUFBaEIsSUFDTEEsSUFBSSxDQUFDeWxDLE9BQUwsS0FBaUJ2akIsU0FEaEIsQ0FDMEI7QUFEMUIsUUFHRDtBQUNBcWpCLGtCQUFVLEdBQUcsSUFBSWhrQyxJQUFKLENBQVN2QixJQUFULENBQWIsQ0FKQyxLQUtBLElBQUksT0FBT0EsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUMvQjtBQUNBLFlBQUl1WixNQUFNLEdBQUc2ckIsV0FBVyxJQUFJLENBQUNWLE1BQU0sSUFBSW5ILFFBQVgsRUFBcUI1a0IsVUFBakQ7QUFDQSxZQUFJK3NCLE9BQU8sR0FBRzdqQyxNQUFNLENBQUM3QixJQUFELENBQU4sQ0FBYTJsQyxJQUFiLEVBQWQ7O0FBQ0EsWUFBSUQsT0FBTyxLQUFLLE9BQWhCLEVBQXlCO0FBQ3JCSCxvQkFBVSxHQUFHLElBQUloa0MsSUFBSixFQUFiO0FBQ0E4akMsa0JBQVEsR0FBRyxJQUFYO0FBQ0gsU0FIRCxNQUlLLElBQUksS0FBS2xnQixJQUFMLENBQVV1Z0IsT0FBVixLQUNMLE9BQU92Z0IsSUFBUCxDQUFZdWdCLE9BQVosQ0FEQyxDQUNvQjtBQURwQixVQUdESCxVQUFVLEdBQUcsSUFBSWhrQyxJQUFKLENBQVN2QixJQUFULENBQWIsQ0FIQyxLQUlBLElBQUkwa0MsTUFBTSxJQUFJQSxNQUFNLENBQUN0dUIsU0FBckIsRUFDRG12QixVQUFVLEdBQUdiLE1BQU0sQ0FBQ3R1QixTQUFQLENBQWlCcFcsSUFBakIsRUFBdUJ1WixNQUF2QixDQUFiLENBREMsS0FFQTtBQUNEZ3NCLG9CQUFVLEdBQ04sQ0FBQ2IsTUFBRCxJQUFXLENBQUNBLE1BQU0sQ0FBQ2hzQixVQUFuQixHQUNNLElBQUluWCxJQUFKLENBQVMsSUFBSUEsSUFBSixHQUFXeWpCLFdBQVgsRUFBVCxFQUFtQyxDQUFuQyxFQUFzQyxDQUF0QyxFQUF5QyxDQUF6QyxFQUE0QyxDQUE1QyxFQUErQyxDQUEvQyxFQUFrRCxDQUFsRCxDQUROLEdBRU0sSUFBSXpqQixJQUFKLENBQVMsSUFBSUEsSUFBSixHQUFXczlCLFFBQVgsQ0FBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsQ0FBVCxDQUhWO0FBSUEsY0FBSStHLE9BQU8sR0FBRyxLQUFLLENBQW5CO0FBQUEsY0FBc0JDLEdBQUcsR0FBRyxFQUE1Qjs7QUFDQSxlQUFLLElBQUl6d0MsQ0FBQyxHQUFHLENBQVIsRUFBVzB3QyxVQUFVLEdBQUcsQ0FBeEIsRUFBMkJDLFFBQVEsR0FBRyxFQUEzQyxFQUErQzN3QyxDQUFDLEdBQUdta0IsTUFBTSxDQUFDdmIsTUFBMUQsRUFBa0U1SSxDQUFDLEVBQW5FLEVBQXVFO0FBQ25FLGdCQUFJNHdDLE9BQU8sR0FBR3pzQixNQUFNLENBQUNua0IsQ0FBRCxDQUFwQjtBQUNBLGdCQUFJNndDLFdBQVcsR0FBR0QsT0FBTyxLQUFLLElBQTlCO0FBQ0EsZ0JBQUlFLE9BQU8sR0FBRzNzQixNQUFNLENBQUNua0IsQ0FBQyxHQUFHLENBQUwsQ0FBTixLQUFrQixJQUFsQixJQUEwQjZ3QyxXQUF4Qzs7QUFDQSxnQkFBSTdCLFVBQVUsQ0FBQzRCLE9BQUQsQ0FBVixJQUF1QixDQUFDRSxPQUE1QixFQUFxQztBQUNqQ0gsc0JBQVEsSUFBSTNCLFVBQVUsQ0FBQzRCLE9BQUQsQ0FBdEI7QUFDQSxrQkFBSXQ5QixLQUFLLEdBQUcsSUFBSVAsTUFBSixDQUFXNDlCLFFBQVgsRUFBcUJ0bEIsSUFBckIsQ0FBMEJ6Z0IsSUFBMUIsQ0FBWjs7QUFDQSxrQkFBSTBJLEtBQUssS0FBS2s5QixPQUFPLEdBQUcsSUFBZixDQUFULEVBQStCO0FBQzNCQyxtQkFBRyxDQUFDRyxPQUFPLEtBQUssR0FBWixHQUFrQixNQUFsQixHQUEyQixTQUE1QixDQUFILENBQTBDO0FBQ3RDcnhDLG9CQUFFLEVBQUVxdUMsU0FBUyxDQUFDZ0QsT0FBRCxDQUR5QjtBQUV0Q0cscUJBQUcsRUFBRXo5QixLQUFLLENBQUMsRUFBRW85QixVQUFIO0FBRjRCLGlCQUExQztBQUlIO0FBQ0osYUFURCxNQVVLLElBQUksQ0FBQ0csV0FBTCxFQUNERixRQUFRLElBQUksR0FBWixDQWYrRCxDQWU5Qzs7O0FBQ3JCRixlQUFHLENBQUNPLE9BQUosQ0FBWSxVQUFVNUIsRUFBVixFQUFjO0FBQ3RCLGtCQUFJN3ZDLEVBQUUsR0FBRzZ2QyxFQUFFLENBQUM3dkMsRUFBWjtBQUFBLGtCQUFnQnd4QyxHQUFHLEdBQUczQixFQUFFLENBQUMyQixHQUF6QjtBQUNBLHFCQUFRWixVQUFVLEdBQUc1d0MsRUFBRSxDQUFDNHdDLFVBQUQsRUFBYVksR0FBYixFQUFrQjN6QixNQUFsQixDQUFGLElBQStCK3lCLFVBQXBEO0FBQ0gsYUFIRDtBQUlIOztBQUNEQSxvQkFBVSxHQUFHSyxPQUFPLEdBQUdMLFVBQUgsR0FBZ0JyakIsU0FBcEM7QUFDSDtBQUNKO0FBQ0Q7O0FBQ0EsVUFBSSxFQUFFcWpCLFVBQVUsWUFBWWhrQyxJQUF0QixJQUE4QixDQUFDakYsS0FBSyxDQUFDaXBDLFVBQVUsQ0FBQzVrQixPQUFYLEVBQUQsQ0FBdEMsQ0FBSixFQUFtRTtBQUMvRCtqQixjQUFNLENBQUNqRyxZQUFQLENBQW9CLElBQUkzUyxLQUFKLENBQVUsNEJBQTRCMFosUUFBdEMsQ0FBcEI7QUFDQSxlQUFPdGpCLFNBQVA7QUFDSDs7QUFDRCxVQUFJbWpCLFFBQVEsS0FBSyxJQUFqQixFQUNJRSxVQUFVLENBQUMxRyxRQUFYLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLEVBQTBCLENBQTFCLEVBQTZCLENBQTdCO0FBQ0osYUFBTzBHLFVBQVA7QUFDSCxLQWpFRDtBQWtFSCxHQXBFRDtBQXFFQTtBQUNKO0FBQ0E7OztBQUNJLFdBQVNjLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxLQUE3QixFQUFvQ2xCLFFBQXBDLEVBQThDO0FBQzFDLFFBQUlBLFFBQVEsS0FBSyxLQUFLLENBQXRCLEVBQXlCO0FBQUVBLGNBQVEsR0FBRyxJQUFYO0FBQWtCOztBQUM3QyxRQUFJQSxRQUFRLEtBQUssS0FBakIsRUFBd0I7QUFDcEIsYUFBUSxJQUFJOWpDLElBQUosQ0FBUytrQyxLQUFLLENBQUMzbEIsT0FBTixFQUFULEVBQTBCa2UsUUFBMUIsQ0FBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsRUFBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsSUFDSixJQUFJdDlCLElBQUosQ0FBU2dsQyxLQUFLLENBQUM1bEIsT0FBTixFQUFULEVBQTBCa2UsUUFBMUIsQ0FBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsRUFBeUMsQ0FBekMsRUFBNEMsQ0FBNUMsQ0FESjtBQUVIOztBQUNELFdBQU95SCxLQUFLLENBQUMzbEIsT0FBTixLQUFrQjRsQixLQUFLLENBQUM1bEIsT0FBTixFQUF6QjtBQUNIOztBQUNELE1BQUk2bEIsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBVUMsRUFBVixFQUFjQyxHQUFkLEVBQW1CQyxHQUFuQixFQUF3QjtBQUNwQyxXQUFPRixFQUFFLEdBQUdscUMsSUFBSSxDQUFDOEksR0FBTCxDQUFTcWhDLEdBQVQsRUFBY0MsR0FBZCxDQUFMLElBQTJCRixFQUFFLEdBQUdscUMsSUFBSSxDQUFDK0ksR0FBTCxDQUFTb2hDLEdBQVQsRUFBY0MsR0FBZCxDQUF2QztBQUNILEdBRkQ7O0FBR0EsTUFBSUMsUUFBUSxHQUFHO0FBQ1hDLE9BQUcsRUFBRTtBQURNLEdBQWY7O0FBSUEsTUFBSSxPQUFPcHlDLE1BQU0sQ0FBQ3FvQyxNQUFkLEtBQXlCLFVBQTdCLEVBQXlDO0FBQ3JDcm9DLFVBQU0sQ0FBQ3FvQyxNQUFQLEdBQWdCLFVBQVVqbkMsTUFBVixFQUFrQjtBQUM5QixVQUFJTyxJQUFJLEdBQUcsRUFBWDs7QUFDQSxXQUFLLElBQUk4c0IsRUFBRSxHQUFHLENBQWQsRUFBaUJBLEVBQUUsR0FBR2hZLFNBQVMsQ0FBQ2xOLE1BQWhDLEVBQXdDa2xCLEVBQUUsRUFBMUMsRUFBOEM7QUFDMUM5c0IsWUFBSSxDQUFDOHNCLEVBQUUsR0FBRyxDQUFOLENBQUosR0FBZWhZLFNBQVMsQ0FBQ2dZLEVBQUQsQ0FBeEI7QUFDSDs7QUFDRCxVQUFJLENBQUNydEIsTUFBTCxFQUFhO0FBQ1QsY0FBTStyQixTQUFTLENBQUMsNENBQUQsQ0FBZjtBQUNIOztBQUNELFVBQUlrbEIsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBVTcrQixNQUFWLEVBQWtCO0FBQzVCLFlBQUlBLE1BQUosRUFBWTtBQUNSeFQsZ0JBQU0sQ0FBQ1MsSUFBUCxDQUFZK1MsTUFBWixFQUFvQm0rQixPQUFwQixDQUE0QixVQUFVOXdDLEdBQVYsRUFBZTtBQUFFLG1CQUFRTyxNQUFNLENBQUNQLEdBQUQsQ0FBTixHQUFjMlMsTUFBTSxDQUFDM1MsR0FBRCxDQUE1QjtBQUFxQyxXQUFsRjtBQUNIO0FBQ0osT0FKRDs7QUFLQSxXQUFLLElBQUlrdkMsRUFBRSxHQUFHLENBQVQsRUFBWXVDLE1BQU0sR0FBRzN3QyxJQUExQixFQUFnQ291QyxFQUFFLEdBQUd1QyxNQUFNLENBQUMvb0MsTUFBNUMsRUFBb0R3bUMsRUFBRSxFQUF0RCxFQUEwRDtBQUN0RCxZQUFJdjhCLE1BQU0sR0FBRzgrQixNQUFNLENBQUN2QyxFQUFELENBQW5COztBQUNBc0MsZUFBTyxDQUFDNytCLE1BQUQsQ0FBUDtBQUNIOztBQUNELGFBQU9wUyxNQUFQO0FBQ0gsS0FsQkQ7QUFtQkg7O0FBRUQsTUFBSW14QyxtQkFBbUIsR0FBRyxHQUExQjs7QUFDQSxXQUFTQyxpQkFBVCxDQUEyQkMsT0FBM0IsRUFBb0NDLGNBQXBDLEVBQW9EO0FBQ2hELFFBQUl4ckMsSUFBSSxHQUFHO0FBQ1Arb0MsWUFBTSxFQUFFN0gsT0FBUSxDQUFDQSxPQUFRLENBQUMsRUFBRCxFQUFLVSxRQUFMLENBQVQsRUFBeUIza0IsU0FBUyxDQUFDd3VCLGFBQW5DLENBRFQ7QUFFUHhDLFVBQUksRUFBRW5FO0FBRkMsS0FBWDtBQUlBOWtDLFFBQUksQ0FBQ3lhLFNBQUwsR0FBaUIrdUIsZ0JBQWdCLENBQUM7QUFBRVQsWUFBTSxFQUFFL29DLElBQUksQ0FBQytvQyxNQUFmO0FBQXVCRSxVQUFJLEVBQUVqcEMsSUFBSSxDQUFDaXBDO0FBQWxDLEtBQUQsQ0FBakM7QUFDQWpwQyxRQUFJLENBQUMwckMsU0FBTCxHQUFpQixFQUFqQjtBQUNBMXJDLFFBQUksQ0FBQzJyQyxjQUFMLEdBQXNCLEVBQXRCO0FBQ0EzckMsUUFBSSxDQUFDNHJDLGFBQUwsR0FBcUIsRUFBckI7QUFDQTVyQyxRQUFJLENBQUM2ckMsS0FBTCxHQUFhMXlDLElBQWI7QUFDQTZHLFFBQUksQ0FBQzhyQyxpQkFBTCxHQUF5QkMsZ0JBQXpCO0FBQ0EvckMsUUFBSSxDQUFDZ3NDLGlCQUFMLEdBQXlCQyxnQkFBekI7QUFDQWpzQyxRQUFJLENBQUNrc0MsV0FBTCxHQUFtQkEsV0FBbkI7QUFDQWxzQyxRQUFJLENBQUNtc0MsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQW5zQyxRQUFJLENBQUNvc0MsS0FBTCxHQUFhQSxLQUFiO0FBQ0Fwc0MsUUFBSSxDQUFDcXNDLEtBQUwsR0FBYUEsS0FBYjtBQUNBcnNDLFFBQUksQ0FBQ3NzQyxjQUFMLEdBQXNCdkcsYUFBdEI7QUFDQS9sQyxRQUFJLENBQUN1c0MsT0FBTCxHQUFlQSxPQUFmO0FBQ0F2c0MsUUFBSSxDQUFDd3NDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0F4c0MsUUFBSSxDQUFDeXNDLFVBQUwsR0FBa0JBLFVBQWxCO0FBQ0F6c0MsUUFBSSxDQUFDMHNDLElBQUwsR0FBWUEsSUFBWjtBQUNBMXNDLFFBQUksQ0FBQzJzQyxNQUFMLEdBQWNBLE1BQWQ7QUFDQTNzQyxRQUFJLENBQUN6RixHQUFMLEdBQVdBLEdBQVg7QUFDQXlGLFFBQUksQ0FBQ21qQyxPQUFMLEdBQWVBLE9BQWY7QUFDQW5qQyxRQUFJLENBQUM0c0MsTUFBTCxHQUFjQSxNQUFkOztBQUNBLGFBQVNDLG9CQUFULEdBQWdDO0FBQzVCN3NDLFVBQUksQ0FBQzhzQyxLQUFMLEdBQWE7QUFDVEMsc0JBQWMsRUFBRSx3QkFBVW4xQixLQUFWLEVBQWlCbzFCLEVBQWpCLEVBQXFCO0FBQ2pDLGNBQUlwMUIsS0FBSyxLQUFLLEtBQUssQ0FBbkIsRUFBc0I7QUFBRUEsaUJBQUssR0FBRzVYLElBQUksQ0FBQ2l0QyxZQUFiO0FBQTRCOztBQUNwRCxjQUFJRCxFQUFFLEtBQUssS0FBSyxDQUFoQixFQUFtQjtBQUFFQSxjQUFFLEdBQUdodEMsSUFBSSxDQUFDa3RDLFdBQVY7QUFBd0I7O0FBQzdDLGNBQUl0MUIsS0FBSyxLQUFLLENBQVYsS0FBaUJvMUIsRUFBRSxHQUFHLENBQUwsS0FBVyxDQUFYLElBQWdCQSxFQUFFLEdBQUcsR0FBTCxLQUFhLENBQTlCLElBQW9DQSxFQUFFLEdBQUcsR0FBTCxLQUFhLENBQWpFLENBQUosRUFDSSxPQUFPLEVBQVA7QUFDSixpQkFBT2h0QyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVeHFCLFdBQVYsQ0FBc0I3RyxLQUF0QixDQUFQO0FBQ0g7QUFQUSxPQUFiO0FBU0g7O0FBQ0QsYUFBU3UxQixJQUFULEdBQWdCO0FBQ1pudEMsVUFBSSxDQUFDdXJDLE9BQUwsR0FBZXZyQyxJQUFJLENBQUM4SyxLQUFMLEdBQWF5Z0MsT0FBNUI7QUFDQXZyQyxVQUFJLENBQUNvdEMsTUFBTCxHQUFjLEtBQWQ7QUFDQUMsaUJBQVc7QUFDWEMsaUJBQVc7QUFDWEMsaUJBQVc7QUFDWEMsZ0JBQVU7QUFDVlgsMEJBQW9CO0FBQ3BCLFVBQUksQ0FBQzdzQyxJQUFJLENBQUNtcEMsUUFBVixFQUNJc0UsS0FBSztBQUNUQyxnQkFBVTs7QUFDVixVQUFJMXRDLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIxYixNQUFuQixJQUE2QnJDLElBQUksQ0FBQytvQyxNQUFMLENBQVloc0IsVUFBN0MsRUFBeUQ7QUFDckQsWUFBSS9jLElBQUksQ0FBQytvQyxNQUFMLENBQVl6eUIsVUFBaEIsRUFBNEI7QUFDeEJ5MUIsMEJBQWdCLENBQUMvckMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWhzQixVQUFaLEdBQ1gvYyxJQUFJLENBQUMydEMscUJBQUwsSUFBOEIzdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUQvQixHQUVYZ0osU0FGVSxDQUFoQjtBQUdIOztBQUNEcW5CLG1CQUFXLENBQUMsS0FBRCxDQUFYO0FBQ0g7O0FBQ0RDLHNCQUFnQjtBQUNoQixVQUFJQyxRQUFRLEdBQUcsaUNBQWlDdGtCLElBQWpDLENBQXNDNFksU0FBUyxDQUFDQyxTQUFoRCxDQUFmO0FBQ0E7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdZLFVBQUksQ0FBQ3JpQyxJQUFJLENBQUNtcEMsUUFBTixJQUFrQjJFLFFBQXRCLEVBQWdDO0FBQzVCN0Isd0JBQWdCO0FBQ25COztBQUNEOEIsa0JBQVksQ0FBQyxTQUFELENBQVo7QUFDSDs7QUFDRCxhQUFTQyxjQUFULENBQXdCaDFDLEVBQXhCLEVBQTRCO0FBQ3hCLGFBQU9BLEVBQUUsQ0FBQ0csSUFBSCxDQUFRNkcsSUFBUixDQUFQO0FBQ0g7O0FBQ0QsYUFBUzZ0QyxnQkFBVCxHQUE0QjtBQUN4QixVQUFJOUUsTUFBTSxHQUFHL29DLElBQUksQ0FBQytvQyxNQUFsQjs7QUFDQSxVQUFJQSxNQUFNLENBQUNwckIsV0FBUCxLQUF1QixLQUF2QixJQUFnQ29yQixNQUFNLENBQUNuRSxVQUFQLEtBQXNCLENBQTFELEVBQTZEO0FBQ3pEO0FBQ0gsT0FGRCxNQUdLLElBQUltRSxNQUFNLENBQUNoc0IsVUFBUCxLQUFzQixJQUExQixFQUFnQztBQUNqQ3BWLGNBQU0sQ0FBQ3NtQyxxQkFBUCxDQUE2QixZQUFZO0FBQ3JDLGNBQUlqdUMsSUFBSSxDQUFDa3VDLGlCQUFMLEtBQTJCM25CLFNBQS9CLEVBQTBDO0FBQ3RDdm1CLGdCQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJDLEtBQXZCLENBQTZCQyxVQUE3QixHQUEwQyxRQUExQztBQUNBcHVDLGdCQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJDLEtBQXZCLENBQTZCRSxPQUE3QixHQUF1QyxPQUF2QztBQUNIOztBQUNELGNBQUlydUMsSUFBSSxDQUFDc3VDLGFBQUwsS0FBdUIvbkIsU0FBM0IsRUFBc0M7QUFDbEMsZ0JBQUlnb0IsU0FBUyxHQUFHLENBQUN2dUMsSUFBSSxDQUFDd3VDLElBQUwsQ0FBVUMsV0FBVixHQUF3QixDQUF6QixJQUE4QjFGLE1BQU0sQ0FBQ25FLFVBQXJEO0FBQ0E1a0MsZ0JBQUksQ0FBQ3N1QyxhQUFMLENBQW1CSCxLQUFuQixDQUF5Qk8sS0FBekIsR0FBaUNILFNBQVMsR0FBRyxJQUE3QztBQUNBdnVDLGdCQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJDLEtBQXZCLENBQTZCTyxLQUE3QixHQUNJSCxTQUFTLElBQ0p2dUMsSUFBSSxDQUFDMnVDLFdBQUwsS0FBcUJwb0IsU0FBckIsR0FDS3ZtQixJQUFJLENBQUMydUMsV0FBTCxDQUFpQkYsV0FEdEIsR0FFSyxDQUhELENBQVQsR0FJSSxJQUxSO0FBTUF6dUMsZ0JBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QkMsS0FBdkIsQ0FBNkJTLGNBQTdCLENBQTRDLFlBQTVDO0FBQ0E1dUMsZ0JBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QkMsS0FBdkIsQ0FBNkJTLGNBQTdCLENBQTRDLFNBQTVDO0FBQ0g7QUFDSixTQWpCRDtBQWtCSDtBQUNKO0FBQ0Q7QUFDUjtBQUNBOzs7QUFDUSxhQUFTQyxVQUFULENBQW9Cem5DLENBQXBCLEVBQXVCO0FBQ25CLFVBQUlwSCxJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsS0FBOEIsQ0FBbEMsRUFBcUM7QUFDakMsWUFBSXlzQyxXQUFXLEdBQUc5dUMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLEtBQXdCZ0osU0FBeEIsR0FDWixJQUFJM2dCLElBQUosQ0FBUzVGLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixDQUFvQnlILE9BQXBCLEVBQVQsQ0FEWSxHQUVaLElBQUlwZixJQUFKLEVBRk47O0FBR0EsWUFBSWlqQyxFQUFFLEdBQUdrRyxlQUFlLEVBQXhCO0FBQUEsWUFBNEIzcEMsS0FBSyxHQUFHeWpDLEVBQUUsQ0FBQ3pqQyxLQUF2QztBQUFBLFlBQThDSSxPQUFPLEdBQUdxakMsRUFBRSxDQUFDcmpDLE9BQTNEO0FBQUEsWUFBb0VvVyxPQUFPLEdBQUdpdEIsRUFBRSxDQUFDanRCLE9BQWpGOztBQUNBa3pCLG1CQUFXLENBQUM1TCxRQUFaLENBQXFCOTlCLEtBQXJCLEVBQTRCSSxPQUE1QixFQUFxQ29XLE9BQXJDLEVBQThDLENBQTlDO0FBQ0E1YixZQUFJLENBQUNtakMsT0FBTCxDQUFhMkwsV0FBYixFQUEwQixLQUExQjtBQUNIOztBQUNELFVBQUkxbkMsQ0FBQyxLQUFLbWYsU0FBTixJQUFtQm5mLENBQUMsQ0FBQ3hILElBQUYsS0FBVyxNQUFsQyxFQUEwQztBQUN0Q292QyxtQkFBVyxDQUFDNW5DLENBQUQsQ0FBWDtBQUNIOztBQUNELFVBQUk2bkMsU0FBUyxHQUFHanZDLElBQUksQ0FBQ3NmLE1BQUwsQ0FBWXhsQixLQUE1QjtBQUNBbzFDLHdCQUFrQjtBQUNsQnRCLGlCQUFXOztBQUNYLFVBQUk1dEMsSUFBSSxDQUFDc2YsTUFBTCxDQUFZeGxCLEtBQVosS0FBc0JtMUMsU0FBMUIsRUFBcUM7QUFDakNqdkMsWUFBSSxDQUFDbXZDLGdCQUFMO0FBQ0g7QUFDSjs7QUFDRCxhQUFTQyxhQUFULENBQXVCdDNCLElBQXZCLEVBQTZCa0gsSUFBN0IsRUFBbUM7QUFDL0IsYUFBUWxILElBQUksR0FBRyxFQUFSLEdBQWMsS0FBS210QixHQUFHLENBQUNqbUIsSUFBSSxLQUFLaGYsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWpxQixJQUFWLENBQWUsQ0FBZixDQUFWLENBQTdCO0FBQ0g7O0FBQ0QsYUFBU3F3QixhQUFULENBQXVCdjNCLElBQXZCLEVBQTZCO0FBQ3pCLGNBQVFBLElBQUksR0FBRyxFQUFmO0FBQ0ksYUFBSyxDQUFMO0FBQ0EsYUFBSyxFQUFMO0FBQ0ksaUJBQU8sRUFBUDs7QUFDSjtBQUNJLGlCQUFPQSxJQUFJLEdBQUcsRUFBZDtBQUxSO0FBT0g7QUFDRDtBQUNSO0FBQ0E7OztBQUNRLGFBQVNvM0Isa0JBQVQsR0FBOEI7QUFDMUIsVUFBSWx2QyxJQUFJLENBQUNzdkMsV0FBTCxLQUFxQi9vQixTQUFyQixJQUFrQ3ZtQixJQUFJLENBQUN1dkMsYUFBTCxLQUF1QmhwQixTQUE3RCxFQUNJO0FBQ0osVUFBSW5oQixLQUFLLEdBQUcsQ0FBQ0MsUUFBUSxDQUFDckYsSUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUJ4MUMsS0FBakIsQ0FBdUIyMkIsS0FBdkIsQ0FBNkIsQ0FBQyxDQUE5QixDQUFELEVBQW1DLEVBQW5DLENBQVIsSUFBa0QsQ0FBbkQsSUFBd0QsRUFBcEU7QUFBQSxVQUF3RWpyQixPQUFPLEdBQUcsQ0FBQ0gsUUFBUSxDQUFDckYsSUFBSSxDQUFDdXZDLGFBQUwsQ0FBbUJ6MUMsS0FBcEIsRUFBMkIsRUFBM0IsQ0FBUixJQUEwQyxDQUEzQyxJQUFnRCxFQUFsSTtBQUFBLFVBQXNJOGhCLE9BQU8sR0FBRzViLElBQUksQ0FBQ3d2QyxhQUFMLEtBQXVCanBCLFNBQXZCLEdBQzFJLENBQUNsaEIsUUFBUSxDQUFDckYsSUFBSSxDQUFDd3ZDLGFBQUwsQ0FBbUIxMUMsS0FBcEIsRUFBMkIsRUFBM0IsQ0FBUixJQUEwQyxDQUEzQyxJQUFnRCxFQUQwRixHQUUxSSxDQUZOOztBQUdBLFVBQUlrRyxJQUFJLENBQUNnZixJQUFMLEtBQWN1SCxTQUFsQixFQUE2QjtBQUN6Qm5oQixhQUFLLEdBQUdncUMsYUFBYSxDQUFDaHFDLEtBQUQsRUFBUXBGLElBQUksQ0FBQ2dmLElBQUwsQ0FBVWduQixXQUFsQixDQUFyQjtBQUNIOztBQUNELFVBQUl5SixhQUFhLEdBQUd6dkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTJHLE9BQVosS0FBd0JucEIsU0FBeEIsSUFDZnZtQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosSUFDR3ZkLElBQUksQ0FBQzJ2QyxjQURSLElBRUczdkMsSUFBSSxDQUFDMnRDLHFCQUZSLElBR0dqRCxZQUFZLENBQUMxcUMsSUFBSSxDQUFDMnRDLHFCQUFOLEVBQTZCM3RDLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBekMsRUFBa0QsSUFBbEQsQ0FBWixLQUNJLENBTFo7QUFNQSxVQUFJcXlCLGFBQWEsR0FBRzV2QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZOEcsT0FBWixLQUF3QnRwQixTQUF4QixJQUNmdm1CLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixJQUNHdGQsSUFBSSxDQUFDOHZDLGNBRFIsSUFFRzl2QyxJQUFJLENBQUMydEMscUJBRlIsSUFHR2pELFlBQVksQ0FBQzFxQyxJQUFJLENBQUMydEMscUJBQU4sRUFBNkIzdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUF6QyxFQUFrRCxJQUFsRCxDQUFaLEtBQ0ksQ0FMWjs7QUFNQSxVQUFJc3lCLGFBQUosRUFBbUI7QUFDZixZQUFJQyxPQUFPLEdBQUc3dkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWThHLE9BQVosS0FBd0J0cEIsU0FBeEIsR0FDUnZtQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZOEcsT0FESixHQUVSN3ZDLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FGbEI7QUFHQWxZLGFBQUssR0FBR3hFLElBQUksQ0FBQzhJLEdBQUwsQ0FBU3RFLEtBQVQsRUFBZ0J5cUMsT0FBTyxDQUFDNWtCLFFBQVIsRUFBaEIsQ0FBUjtBQUNBLFlBQUk3bEIsS0FBSyxLQUFLeXFDLE9BQU8sQ0FBQzVrQixRQUFSLEVBQWQsRUFDSXpsQixPQUFPLEdBQUc1RSxJQUFJLENBQUM4SSxHQUFMLENBQVNsRSxPQUFULEVBQWtCcXFDLE9BQU8sQ0FBQy9rQixVQUFSLEVBQWxCLENBQVY7QUFDSixZQUFJdGxCLE9BQU8sS0FBS3FxQyxPQUFPLENBQUMva0IsVUFBUixFQUFoQixFQUNJbFAsT0FBTyxHQUFHaGIsSUFBSSxDQUFDOEksR0FBTCxDQUFTa1MsT0FBVCxFQUFrQmkwQixPQUFPLENBQUM5a0IsVUFBUixFQUFsQixDQUFWO0FBQ1A7O0FBQ0QsVUFBSTBrQixhQUFKLEVBQW1CO0FBQ2YsWUFBSUMsT0FBTyxHQUFHMXZDLElBQUksQ0FBQytvQyxNQUFMLENBQVkyRyxPQUFaLEtBQXdCbnBCLFNBQXhCLEdBQ1J2bUIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTJHLE9BREosR0FFUjF2QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BRmxCO0FBR0FuWSxhQUFLLEdBQUd4RSxJQUFJLENBQUMrSSxHQUFMLENBQVN2RSxLQUFULEVBQWdCc3FDLE9BQU8sQ0FBQ3prQixRQUFSLEVBQWhCLENBQVI7QUFDQSxZQUFJN2xCLEtBQUssS0FBS3NxQyxPQUFPLENBQUN6a0IsUUFBUixFQUFkLEVBQ0l6bEIsT0FBTyxHQUFHNUUsSUFBSSxDQUFDK0ksR0FBTCxDQUFTbkUsT0FBVCxFQUFrQmtxQyxPQUFPLENBQUM1a0IsVUFBUixFQUFsQixDQUFWO0FBQ0osWUFBSXRsQixPQUFPLEtBQUtrcUMsT0FBTyxDQUFDNWtCLFVBQVIsRUFBaEIsRUFDSWxQLE9BQU8sR0FBR2hiLElBQUksQ0FBQytJLEdBQUwsQ0FBU2lTLE9BQVQsRUFBa0I4ekIsT0FBTyxDQUFDM2tCLFVBQVIsRUFBbEIsQ0FBVjtBQUNQOztBQUNEbVksY0FBUSxDQUFDOTlCLEtBQUQsRUFBUUksT0FBUixFQUFpQm9XLE9BQWpCLENBQVI7QUFDSDtBQUNEO0FBQ1I7QUFDQTs7O0FBQ1EsYUFBU213QixnQkFBVCxDQUEwQnhFLE9BQTFCLEVBQW1DO0FBQy9CLFVBQUlsakMsSUFBSSxHQUFHa2pDLE9BQU8sSUFBSXZuQyxJQUFJLENBQUMydEMscUJBQTNCOztBQUNBLFVBQUl0cEMsSUFBSixFQUFVO0FBQ042K0IsZ0JBQVEsQ0FBQzcrQixJQUFJLENBQUM0bUIsUUFBTCxFQUFELEVBQWtCNW1CLElBQUksQ0FBQ3ltQixVQUFMLEVBQWxCLEVBQXFDem1CLElBQUksQ0FBQzBtQixVQUFMLEVBQXJDLENBQVI7QUFDSDtBQUNKOztBQUNELGFBQVNna0IsZUFBVCxHQUEyQjtBQUN2QixVQUFJM3BDLEtBQUssR0FBR3BGLElBQUksQ0FBQytvQyxNQUFMLENBQVl2ckIsV0FBeEI7QUFDQSxVQUFJaFksT0FBTyxHQUFHeEYsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRyQixhQUExQjtBQUNBLFVBQUk3QixPQUFPLEdBQUc1YixJQUFJLENBQUMrb0MsTUFBTCxDQUFZcEcsY0FBMUI7O0FBQ0EsVUFBSTNpQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosS0FBd0JnSixTQUE1QixFQUF1QztBQUNuQyxZQUFJd3BCLEtBQUssR0FBRy92QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosQ0FBb0IwTixRQUFwQixFQUFaO0FBQ0EsWUFBSStrQixVQUFVLEdBQUdod0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLENBQW9CdU4sVUFBcEIsRUFBakI7QUFDQTFsQixhQUFLLEdBQUd4RSxJQUFJLENBQUMrSSxHQUFMLENBQVN2RSxLQUFULEVBQWdCMnFDLEtBQWhCLENBQVI7QUFDQSxZQUFJM3FDLEtBQUssS0FBSzJxQyxLQUFkLEVBQ0l2cUMsT0FBTyxHQUFHNUUsSUFBSSxDQUFDK0ksR0FBTCxDQUFTcW1DLFVBQVQsRUFBcUJ4cUMsT0FBckIsQ0FBVjtBQUNKLFlBQUlKLEtBQUssS0FBSzJxQyxLQUFWLElBQW1CdnFDLE9BQU8sS0FBS3dxQyxVQUFuQyxFQUNJcDBCLE9BQU8sR0FBRzViLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixDQUFvQndOLFVBQXBCLEVBQVY7QUFDUDs7QUFDRCxVQUFJL3FCLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixLQUF3QmlKLFNBQTVCLEVBQXVDO0FBQ25DLFlBQUkwcEIsS0FBSyxHQUFHandDLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixDQUFvQjJOLFFBQXBCLEVBQVo7QUFDQSxZQUFJaWxCLFVBQVUsR0FBR2x3QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosQ0FBb0J3TixVQUFwQixFQUFqQjtBQUNBMWxCLGFBQUssR0FBR3hFLElBQUksQ0FBQzhJLEdBQUwsQ0FBU3RFLEtBQVQsRUFBZ0I2cUMsS0FBaEIsQ0FBUjtBQUNBLFlBQUk3cUMsS0FBSyxLQUFLNnFDLEtBQWQsRUFDSXpxQyxPQUFPLEdBQUc1RSxJQUFJLENBQUM4SSxHQUFMLENBQVN3bUMsVUFBVCxFQUFxQjFxQyxPQUFyQixDQUFWO0FBQ0osWUFBSUosS0FBSyxLQUFLNnFDLEtBQVYsSUFBbUJ6cUMsT0FBTyxLQUFLMHFDLFVBQW5DLEVBQ0l0MEIsT0FBTyxHQUFHNWIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLENBQW9CeU4sVUFBcEIsRUFBVjtBQUNQOztBQUNELGFBQU87QUFBRTNsQixhQUFLLEVBQUVBLEtBQVQ7QUFBZ0JJLGVBQU8sRUFBRUEsT0FBekI7QUFBa0NvVyxlQUFPLEVBQUVBO0FBQTNDLE9BQVA7QUFDSDtBQUNEO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ1EsYUFBU3NuQixRQUFULENBQWtCOTlCLEtBQWxCLEVBQXlCSSxPQUF6QixFQUFrQ29XLE9BQWxDLEVBQTJDO0FBQ3ZDLFVBQUk1YixJQUFJLENBQUMydEMscUJBQUwsS0FBK0JwbkIsU0FBbkMsRUFBOEM7QUFDMUN2bUIsWUFBSSxDQUFDMnRDLHFCQUFMLENBQTJCekssUUFBM0IsQ0FBb0M5OUIsS0FBSyxHQUFHLEVBQTVDLEVBQWdESSxPQUFoRCxFQUF5RG9XLE9BQU8sSUFBSSxDQUFwRSxFQUF1RSxDQUF2RTtBQUNIOztBQUNELFVBQUksQ0FBQzViLElBQUksQ0FBQ3N2QyxXQUFOLElBQXFCLENBQUN0dkMsSUFBSSxDQUFDdXZDLGFBQTNCLElBQTRDdnZDLElBQUksQ0FBQ21wQyxRQUFyRCxFQUNJO0FBQ0pucEMsVUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUJ4MUMsS0FBakIsR0FBeUI2dkIsR0FBRyxDQUFDLENBQUMzcEIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxzQixTQUFiLEdBQ3RCLENBQUMsS0FBS3pYLEtBQU4sSUFBZSxFQUFoQixHQUFzQixLQUFLNi9CLEdBQUcsQ0FBQzcvQixLQUFLLEdBQUcsRUFBUixLQUFlLENBQWhCLENBRFAsR0FFdkJBLEtBRnNCLENBQTVCO0FBR0FwRixVQUFJLENBQUN1dkMsYUFBTCxDQUFtQnoxQyxLQUFuQixHQUEyQjZ2QixHQUFHLENBQUNua0IsT0FBRCxDQUE5QjtBQUNBLFVBQUl4RixJQUFJLENBQUNnZixJQUFMLEtBQWN1SCxTQUFsQixFQUNJdm1CLElBQUksQ0FBQ2dmLElBQUwsQ0FBVWduQixXQUFWLEdBQXdCaG1DLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVqcUIsSUFBVixDQUFlaW1CLEdBQUcsQ0FBQzcvQixLQUFLLElBQUksRUFBVixDQUFsQixDQUF4QjtBQUNKLFVBQUlwRixJQUFJLENBQUN3dkMsYUFBTCxLQUF1QmpwQixTQUEzQixFQUNJdm1CLElBQUksQ0FBQ3d2QyxhQUFMLENBQW1CMTFDLEtBQW5CLEdBQTJCNnZCLEdBQUcsQ0FBQy9OLE9BQUQsQ0FBOUI7QUFDUDtBQUNEO0FBQ1I7QUFDQTtBQUNBOzs7QUFDUSxhQUFTdTBCLFdBQVQsQ0FBcUIxbEMsS0FBckIsRUFBNEI7QUFDeEIsVUFBSTJsQyxXQUFXLEdBQUdySixjQUFjLENBQUN0OEIsS0FBRCxDQUFoQztBQUNBLFVBQUlrTixJQUFJLEdBQUd0UyxRQUFRLENBQUMrcUMsV0FBVyxDQUFDdDJDLEtBQWIsQ0FBUixJQUErQjJRLEtBQUssQ0FBQzRsQyxLQUFOLElBQWUsQ0FBOUMsQ0FBWDs7QUFDQSxVQUFJMTRCLElBQUksR0FBRyxJQUFQLEdBQWMsQ0FBZCxJQUNDbE4sS0FBSyxDQUFDOVEsR0FBTixLQUFjLE9BQWQsSUFBeUIsQ0FBQyxRQUFRNnZCLElBQVIsQ0FBYTdSLElBQUksQ0FBQ3ZULFFBQUwsRUFBYixDQUQvQixFQUMrRDtBQUMzRCtuQyxrQkFBVSxDQUFDeDBCLElBQUQsQ0FBVjtBQUNIO0FBQ0o7QUFDRDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNRLGFBQVN4ZSxJQUFULENBQWNveUMsT0FBZCxFQUF1QjlnQyxLQUF2QixFQUE4QmdTLE9BQTlCLEVBQXVDL1UsT0FBdkMsRUFBZ0Q7QUFDNUMsVUFBSStDLEtBQUssWUFBWXRMLEtBQXJCLEVBQ0ksT0FBT3NMLEtBQUssQ0FBQ2dnQyxPQUFOLENBQWMsVUFBVTZGLEVBQVYsRUFBYztBQUFFLGVBQU9uM0MsSUFBSSxDQUFDb3lDLE9BQUQsRUFBVStFLEVBQVYsRUFBYzd6QixPQUFkLEVBQXVCL1UsT0FBdkIsQ0FBWDtBQUE2QyxPQUEzRSxDQUFQO0FBQ0osVUFBSTZqQyxPQUFPLFlBQVlwc0MsS0FBdkIsRUFDSSxPQUFPb3NDLE9BQU8sQ0FBQ2QsT0FBUixDQUFnQixVQUFVMTFCLEVBQVYsRUFBYztBQUFFLGVBQU81YixJQUFJLENBQUM0YixFQUFELEVBQUt0SyxLQUFMLEVBQVlnUyxPQUFaLEVBQXFCL1UsT0FBckIsQ0FBWDtBQUEyQyxPQUEzRSxDQUFQO0FBQ0o2akMsYUFBTyxDQUFDZ0YsZ0JBQVIsQ0FBeUI5bEMsS0FBekIsRUFBZ0NnUyxPQUFoQyxFQUF5Qy9VLE9BQXpDOztBQUNBMUgsVUFBSSxDQUFDMHJDLFNBQUwsQ0FBZThFLElBQWYsQ0FBb0I7QUFDaEJqRixlQUFPLEVBQUVBLE9BRE87QUFFaEI5Z0MsYUFBSyxFQUFFQSxLQUZTO0FBR2hCZ1MsZUFBTyxFQUFFQSxPQUhPO0FBSWhCL1UsZUFBTyxFQUFFQTtBQUpPLE9BQXBCO0FBTUg7O0FBQ0QsYUFBUytvQyxhQUFULEdBQXlCO0FBQ3JCMUMsa0JBQVksQ0FBQyxVQUFELENBQVo7QUFDSDtBQUNEO0FBQ1I7QUFDQTs7O0FBQ1EsYUFBU0wsVUFBVCxHQUFzQjtBQUNsQixVQUFJMXRDLElBQUksQ0FBQytvQyxNQUFMLENBQVk3ckIsSUFBaEIsRUFBc0I7QUFDbEIsU0FBQyxNQUFELEVBQVMsT0FBVCxFQUFrQixRQUFsQixFQUE0QixPQUE1QixFQUFxQ3V0QixPQUFyQyxDQUE2QyxVQUFVMzFCLEdBQVYsRUFBZTtBQUN4RDNWLGVBQUssQ0FBQ2dsQixTQUFOLENBQWdCc21CLE9BQWhCLENBQXdCaG5CLElBQXhCLENBQTZCempCLElBQUksQ0FBQ3VyQyxPQUFMLENBQWFtRixnQkFBYixDQUE4QixXQUFXNTdCLEdBQVgsR0FBaUIsR0FBL0MsQ0FBN0IsRUFBa0YsVUFBVUMsRUFBVixFQUFjO0FBQzVGLG1CQUFPNWIsSUFBSSxDQUFDNGIsRUFBRCxFQUFLLE9BQUwsRUFBYy9VLElBQUksQ0FBQzhVLEdBQUQsQ0FBbEIsQ0FBWDtBQUNILFdBRkQ7QUFHSCxTQUpEO0FBS0g7O0FBQ0QsVUFBSTlVLElBQUksQ0FBQ21wQyxRQUFULEVBQW1CO0FBQ2Z3SCxtQkFBVztBQUNYO0FBQ0g7O0FBQ0QsVUFBSUMsZUFBZSxHQUFHekwsUUFBUSxDQUFDMEwsUUFBRCxFQUFXLEVBQVgsQ0FBOUI7QUFDQTd3QyxVQUFJLENBQUNtdkMsZ0JBQUwsR0FBd0JoSyxRQUFRLENBQUNzTCxhQUFELEVBQWdCcEYsbUJBQWhCLENBQWhDO0FBQ0EsVUFBSXJyQyxJQUFJLENBQUNzdUMsYUFBTCxJQUFzQixDQUFDLG9CQUFvQjlrQixJQUFwQixDQUF5QjRZLFNBQVMsQ0FBQ0MsU0FBbkMsQ0FBM0IsRUFDSWxwQyxJQUFJLENBQUM2RyxJQUFJLENBQUNzdUMsYUFBTixFQUFxQixXQUFyQixFQUFrQyxVQUFVbG5DLENBQVYsRUFBYTtBQUMvQyxZQUFJcEgsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRGLElBQVosS0FBcUIsT0FBekIsRUFDSXFOLFdBQVcsQ0FBQy9KLGNBQWMsQ0FBQzMvQixDQUFELENBQWYsQ0FBWDtBQUNQLE9BSEcsQ0FBSjtBQUlKak8sVUFBSSxDQUFDd08sTUFBTSxDQUFDVCxRQUFQLENBQWdCa0MsSUFBakIsRUFBdUIsU0FBdkIsRUFBa0M0NkIsU0FBbEMsQ0FBSjtBQUNBLFVBQUksQ0FBQ2hrQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeEYsTUFBYixJQUF1QixDQUFDdmpDLElBQUksQ0FBQytvQyxNQUFMLENBQVlsRSxNQUF4QyxFQUNJMXJDLElBQUksQ0FBQ3dPLE1BQUQsRUFBUyxRQUFULEVBQW1CaXBDLGVBQW5CLENBQUo7QUFDSixVQUFJanBDLE1BQU0sQ0FBQ29wQyxZQUFQLEtBQXdCeHFCLFNBQTVCLEVBQ0lwdEIsSUFBSSxDQUFDd08sTUFBTSxDQUFDVCxRQUFSLEVBQWtCLFlBQWxCLEVBQWdDOHBDLGFBQWhDLENBQUosQ0FESixLQUdJNzNDLElBQUksQ0FBQ3dPLE1BQU0sQ0FBQ1QsUUFBUixFQUFrQixPQUFsQixFQUEyQjhwQyxhQUEzQixDQUFKO0FBQ0o3M0MsVUFBSSxDQUFDd08sTUFBTSxDQUFDVCxRQUFSLEVBQWtCLE9BQWxCLEVBQTJCOHBDLGFBQTNCLEVBQTBDO0FBQUVDLGVBQU8sRUFBRTtBQUFYLE9BQTFDLENBQUo7O0FBQ0EsVUFBSWp4QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdkcsVUFBWixLQUEyQixJQUEvQixFQUFxQztBQUNqQ3JwQyxZQUFJLENBQUM2RyxJQUFJLENBQUNzZixNQUFOLEVBQWMsT0FBZCxFQUF1QnRmLElBQUksQ0FBQzBzQyxJQUE1QixDQUFKO0FBQ0F2ekMsWUFBSSxDQUFDNkcsSUFBSSxDQUFDc2YsTUFBTixFQUFjLE9BQWQsRUFBdUJ0ZixJQUFJLENBQUMwc0MsSUFBNUIsQ0FBSjtBQUNIOztBQUNELFVBQUkxc0MsSUFBSSxDQUFDc3VDLGFBQUwsS0FBdUIvbkIsU0FBM0IsRUFBc0M7QUFDbENwdEIsWUFBSSxDQUFDNkcsSUFBSSxDQUFDa3hDLFFBQU4sRUFBZ0IsT0FBaEIsRUFBeUJDLGVBQXpCLENBQUo7QUFDQWg0QyxZQUFJLENBQUM2RyxJQUFJLENBQUNreEMsUUFBTixFQUFnQixDQUFDLE9BQUQsRUFBVSxXQUFWLENBQWhCLEVBQXdDZixXQUF4QyxDQUFKO0FBQ0FoM0MsWUFBSSxDQUFDNkcsSUFBSSxDQUFDc3VDLGFBQU4sRUFBcUIsT0FBckIsRUFBOEI4QyxVQUE5QixDQUFKO0FBQ0g7O0FBQ0QsVUFBSXB4QyxJQUFJLENBQUNxeEMsYUFBTCxLQUF1QjlxQixTQUF2QixJQUNBdm1CLElBQUksQ0FBQ3V2QyxhQUFMLEtBQXVCaHBCLFNBRHZCLElBRUF2bUIsSUFBSSxDQUFDc3ZDLFdBQUwsS0FBcUIvb0IsU0FGekIsRUFFb0M7QUFDaEMsWUFBSStxQixPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFVbHFDLENBQVYsRUFBYTtBQUN2QixpQkFBTzIvQixjQUFjLENBQUMzL0IsQ0FBRCxDQUFkLENBQWtCbU4sTUFBbEIsRUFBUDtBQUNILFNBRkQ7O0FBR0FwYixZQUFJLENBQUM2RyxJQUFJLENBQUNxeEMsYUFBTixFQUFxQixDQUFDLFdBQUQsQ0FBckIsRUFBb0N4QyxVQUFwQyxDQUFKO0FBQ0ExMUMsWUFBSSxDQUFDNkcsSUFBSSxDQUFDcXhDLGFBQU4sRUFBcUIsTUFBckIsRUFBNkJ4QyxVQUE3QixFQUF5QztBQUFFb0MsaUJBQU8sRUFBRTtBQUFYLFNBQXpDLENBQUo7QUFDQTkzQyxZQUFJLENBQUM2RyxJQUFJLENBQUNxeEMsYUFBTixFQUFxQixPQUFyQixFQUE4QkUsYUFBOUIsQ0FBSjtBQUNBcDRDLFlBQUksQ0FBQyxDQUFDNkcsSUFBSSxDQUFDc3ZDLFdBQU4sRUFBbUJ0dkMsSUFBSSxDQUFDdXZDLGFBQXhCLENBQUQsRUFBeUMsQ0FBQyxPQUFELEVBQVUsT0FBVixDQUF6QyxFQUE2RCtCLE9BQTdELENBQUo7QUFDQSxZQUFJdHhDLElBQUksQ0FBQ3d2QyxhQUFMLEtBQXVCanBCLFNBQTNCLEVBQ0lwdEIsSUFBSSxDQUFDNkcsSUFBSSxDQUFDd3ZDLGFBQU4sRUFBcUIsT0FBckIsRUFBOEIsWUFBWTtBQUFFLGlCQUFPeHZDLElBQUksQ0FBQ3d2QyxhQUFMLElBQXNCeHZDLElBQUksQ0FBQ3d2QyxhQUFMLENBQW1CajdCLE1BQW5CLEVBQTdCO0FBQTJELFNBQXZHLENBQUo7O0FBQ0osWUFBSXZVLElBQUksQ0FBQ2dmLElBQUwsS0FBY3VILFNBQWxCLEVBQTZCO0FBQ3pCcHRCLGNBQUksQ0FBQzZHLElBQUksQ0FBQ2dmLElBQU4sRUFBWSxPQUFaLEVBQXFCLFVBQVU1WCxDQUFWLEVBQWE7QUFDbEN5bkMsc0JBQVUsQ0FBQ3puQyxDQUFELENBQVY7QUFDQXFwQyx5QkFBYTtBQUNoQixXQUhHLENBQUo7QUFJSDtBQUNKOztBQUNELFVBQUl6d0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTVyQixVQUFoQixFQUNJaGtCLElBQUksQ0FBQzZHLElBQUksQ0FBQ3NmLE1BQU4sRUFBYyxNQUFkLEVBQXNCa3lCLE1BQXRCLENBQUo7QUFDUDtBQUNEO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7OztBQUNRLGFBQVMvRSxVQUFULENBQW9CZ0YsUUFBcEIsRUFBOEJoQixhQUE5QixFQUE2QztBQUN6QyxVQUFJaUIsTUFBTSxHQUFHRCxRQUFRLEtBQUtsckIsU0FBYixHQUNQdm1CLElBQUksQ0FBQ3lhLFNBQUwsQ0FBZWczQixRQUFmLENBRE8sR0FFUHp4QyxJQUFJLENBQUMydEMscUJBQUwsS0FDRzN0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosSUFBdUJ2ZCxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosR0FBc0J2ZCxJQUFJLENBQUM0akMsR0FBbEQsR0FDSzVqQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BRGpCLEdBRUt2ZCxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosSUFBdUJ0ZCxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosR0FBc0J0ZCxJQUFJLENBQUM0akMsR0FBbEQsR0FDSTVqQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BRGhCLEdBRUl0ZCxJQUFJLENBQUM0akMsR0FMakIsQ0FGTjtBQVFBLFVBQUkrTixPQUFPLEdBQUczeEMsSUFBSSxDQUFDa3RDLFdBQW5CO0FBQ0EsVUFBSTBFLFFBQVEsR0FBRzV4QyxJQUFJLENBQUNpdEMsWUFBcEI7O0FBQ0EsVUFBSTtBQUNBLFlBQUl5RSxNQUFNLEtBQUtuckIsU0FBZixFQUEwQjtBQUN0QnZtQixjQUFJLENBQUNrdEMsV0FBTCxHQUFtQndFLE1BQU0sQ0FBQ3JvQixXQUFQLEVBQW5CO0FBQ0FycEIsY0FBSSxDQUFDaXRDLFlBQUwsR0FBb0J5RSxNQUFNLENBQUM1bkIsUUFBUCxFQUFwQjtBQUNIO0FBQ0osT0FMRCxDQU1BLE9BQU8xaUIsQ0FBUCxFQUFVO0FBQ047QUFDQUEsU0FBQyxDQUFDdWYsT0FBRixHQUFZLDRCQUE0QitxQixNQUF4QztBQUNBMXhDLFlBQUksQ0FBQytvQyxNQUFMLENBQVlqRyxZQUFaLENBQXlCMTdCLENBQXpCO0FBQ0g7O0FBQ0QsVUFBSXFwQyxhQUFhLElBQUl6d0MsSUFBSSxDQUFDa3RDLFdBQUwsS0FBcUJ5RSxPQUExQyxFQUFtRDtBQUMvQzVELG9CQUFZLENBQUMsY0FBRCxDQUFaO0FBQ0E4RCx3QkFBZ0I7QUFDbkI7O0FBQ0QsVUFBSXBCLGFBQWEsS0FDWnp3QyxJQUFJLENBQUNrdEMsV0FBTCxLQUFxQnlFLE9BQXJCLElBQWdDM3hDLElBQUksQ0FBQ2l0QyxZQUFMLEtBQXNCMkUsUUFEMUMsQ0FBakIsRUFDc0U7QUFDbEU3RCxvQkFBWSxDQUFDLGVBQUQsQ0FBWjtBQUNIOztBQUNEL3RDLFVBQUksQ0FBQzJzQyxNQUFMO0FBQ0g7QUFDRDtBQUNSO0FBQ0E7QUFDQTs7O0FBQ1EsYUFBUzRFLGFBQVQsQ0FBdUJucUMsQ0FBdkIsRUFBMEI7QUFDdEIsVUFBSWdwQyxXQUFXLEdBQUdySixjQUFjLENBQUMzL0IsQ0FBRCxDQUFoQztBQUNBLFVBQUksQ0FBQ2dwQyxXQUFXLENBQUN6SyxTQUFaLENBQXNCemQsT0FBdEIsQ0FBOEIsT0FBOUIsQ0FBTCxFQUNJNHBCLGlCQUFpQixDQUFDMXFDLENBQUQsRUFBSWdwQyxXQUFXLENBQUN4SyxTQUFaLENBQXNCbU0sUUFBdEIsQ0FBK0IsU0FBL0IsSUFBNEMsQ0FBNUMsR0FBZ0QsQ0FBQyxDQUFyRCxDQUFqQjtBQUNQO0FBQ0Q7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDUSxhQUFTRCxpQkFBVCxDQUEyQjFxQyxDQUEzQixFQUE4QmlwQyxLQUE5QixFQUFxQzJCLFNBQXJDLEVBQWdEO0FBQzVDLFVBQUk5M0MsTUFBTSxHQUFHa04sQ0FBQyxJQUFJMi9CLGNBQWMsQ0FBQzMvQixDQUFELENBQWhDO0FBQ0EsVUFBSTBELEtBQUssR0FBR2tuQyxTQUFTLElBQ2hCOTNDLE1BQU0sSUFBSUEsTUFBTSxDQUFDb3NDLFVBQWpCLElBQStCcHNDLE1BQU0sQ0FBQ29zQyxVQUFQLENBQWtCSCxVQUR0RDtBQUVBLFVBQUkxN0IsS0FBSyxHQUFHd25DLFdBQVcsQ0FBQyxXQUFELENBQXZCO0FBQ0F4bkMsV0FBSyxDQUFDNGxDLEtBQU4sR0FBY0EsS0FBZDtBQUNBdmxDLFdBQUssSUFBSUEsS0FBSyxDQUFDb25DLGFBQU4sQ0FBb0J6bkMsS0FBcEIsQ0FBVDtBQUNIOztBQUNELGFBQVNnakMsS0FBVCxHQUFpQjtBQUNiLFVBQUkwRSxRQUFRLEdBQUd4cUMsTUFBTSxDQUFDVCxRQUFQLENBQWdCa3JDLHNCQUFoQixFQUFmO0FBQ0FweUMsVUFBSSxDQUFDa3VDLGlCQUFMLEdBQXlCbkksYUFBYSxDQUFDLEtBQUQsRUFBUSxvQkFBUixDQUF0QztBQUNBL2xDLFVBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1Qm1FLFFBQXZCLEdBQWtDLENBQUMsQ0FBbkM7O0FBQ0EsVUFBSSxDQUFDcnlDLElBQUksQ0FBQytvQyxNQUFMLENBQVloc0IsVUFBakIsRUFBNkI7QUFDekJvMUIsZ0JBQVEsQ0FBQ3JMLFdBQVQsQ0FBcUJ3TCxhQUFhLEVBQWxDO0FBQ0F0eUMsWUFBSSxDQUFDdXlDLGNBQUwsR0FBc0J4TSxhQUFhLENBQUMsS0FBRCxFQUFRLDBCQUFSLENBQW5DOztBQUNBLFlBQUkvbEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXByQixXQUFoQixFQUE2QjtBQUN6QixjQUFJa3JCLEVBQUUsR0FBRzJKLFVBQVUsRUFBbkI7QUFBQSxjQUF1QjdELFdBQVcsR0FBRzlGLEVBQUUsQ0FBQzhGLFdBQXhDO0FBQUEsY0FBcURoeEIsV0FBVyxHQUFHa3JCLEVBQUUsQ0FBQ2xyQixXQUF0RTs7QUFDQTNkLGNBQUksQ0FBQ3V5QyxjQUFMLENBQW9CekwsV0FBcEIsQ0FBZ0M2SCxXQUFoQztBQUNBM3VDLGNBQUksQ0FBQzJkLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EzZCxjQUFJLENBQUMydUMsV0FBTCxHQUFtQkEsV0FBbkI7QUFDSDs7QUFDRDN1QyxZQUFJLENBQUN5eUMsVUFBTCxHQUFrQjFNLGFBQWEsQ0FBQyxLQUFELEVBQVEsc0JBQVIsQ0FBL0I7QUFDQS9sQyxZQUFJLENBQUN5eUMsVUFBTCxDQUFnQjNMLFdBQWhCLENBQTRCNEwsYUFBYSxFQUF6Qzs7QUFDQSxZQUFJLENBQUMxeUMsSUFBSSxDQUFDc3VDLGFBQVYsRUFBeUI7QUFDckJ0dUMsY0FBSSxDQUFDc3VDLGFBQUwsR0FBcUJ2SSxhQUFhLENBQUMsS0FBRCxFQUFRLGdCQUFSLENBQWxDO0FBQ0EvbEMsY0FBSSxDQUFDc3VDLGFBQUwsQ0FBbUIrRCxRQUFuQixHQUE4QixDQUFDLENBQS9CO0FBQ0g7O0FBQ0RNLGlCQUFTO0FBQ1QzeUMsWUFBSSxDQUFDeXlDLFVBQUwsQ0FBZ0IzTCxXQUFoQixDQUE0QjltQyxJQUFJLENBQUNzdUMsYUFBakM7QUFDQXR1QyxZQUFJLENBQUN1eUMsY0FBTCxDQUFvQnpMLFdBQXBCLENBQWdDOW1DLElBQUksQ0FBQ3l5QyxVQUFyQztBQUNBTixnQkFBUSxDQUFDckwsV0FBVCxDQUFxQjltQyxJQUFJLENBQUN1eUMsY0FBMUI7QUFDSDs7QUFDRCxVQUFJdnlDLElBQUksQ0FBQytvQyxNQUFMLENBQVl6eUIsVUFBaEIsRUFBNEI7QUFDeEI2N0IsZ0JBQVEsQ0FBQ3JMLFdBQVQsQ0FBcUI4TCxTQUFTLEVBQTlCO0FBQ0g7O0FBQ0RuTixpQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixXQUF6QixFQUFzQ2x1QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixPQUEzRCxDQUFYO0FBQ0FnQyxpQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixTQUF6QixFQUFvQ2x1QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZNUcsT0FBWixLQUF3QixJQUE1RCxDQUFYO0FBQ0FzRCxpQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixZQUF6QixFQUF1Q2x1QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBWixHQUF5QixDQUFoRSxDQUFYO0FBQ0E1a0MsVUFBSSxDQUFDa3VDLGlCQUFMLENBQXVCcEgsV0FBdkIsQ0FBbUNxTCxRQUFuQztBQUNBLFVBQUlVLFlBQVksR0FBRzd5QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZK0osUUFBWixLQUF5QnZzQixTQUF6QixJQUNmdm1CLElBQUksQ0FBQytvQyxNQUFMLENBQVkrSixRQUFaLENBQXFCQyxRQUFyQixLQUFrQ3hzQixTQUR0Qzs7QUFFQSxVQUFJdm1CLElBQUksQ0FBQytvQyxNQUFMLENBQVl4RixNQUFaLElBQXNCdmpDLElBQUksQ0FBQytvQyxNQUFMLENBQVlsRSxNQUF0QyxFQUE4QztBQUMxQzdrQyxZQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJ0SSxTQUF2QixDQUFpQ0MsR0FBakMsQ0FBcUM3bEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhGLE1BQVosR0FBcUIsUUFBckIsR0FBZ0MsUUFBckU7O0FBQ0EsWUFBSXZqQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeEYsTUFBaEIsRUFBd0I7QUFDcEIsY0FBSSxDQUFDc1AsWUFBRCxJQUFpQjd5QyxJQUFJLENBQUN1ckMsT0FBTCxDQUFhakYsVUFBbEMsRUFDSXRtQyxJQUFJLENBQUN1ckMsT0FBTCxDQUFhakYsVUFBYixDQUF3QjBNLFlBQXhCLENBQXFDaHpDLElBQUksQ0FBQ2t1QyxpQkFBMUMsRUFBNkRsdUMsSUFBSSxDQUFDc2YsTUFBTCxDQUFZMnpCLFdBQXpFLEVBREosS0FFSyxJQUFJanpDLElBQUksQ0FBQytvQyxNQUFMLENBQVkrSixRQUFaLEtBQXlCdnNCLFNBQTdCLEVBQ0R2bUIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWStKLFFBQVosQ0FBcUJoTSxXQUFyQixDQUFpQzltQyxJQUFJLENBQUNrdUMsaUJBQXRDO0FBQ1A7O0FBQ0QsWUFBSWx1QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbEUsTUFBaEIsRUFBd0I7QUFDcEIsY0FBSTVoQixPQUFPLEdBQUc4aUIsYUFBYSxDQUFDLEtBQUQsRUFBUSxtQkFBUixDQUEzQjtBQUNBLGNBQUkvbEMsSUFBSSxDQUFDdXJDLE9BQUwsQ0FBYWpGLFVBQWpCLEVBQ0l0bUMsSUFBSSxDQUFDdXJDLE9BQUwsQ0FBYWpGLFVBQWIsQ0FBd0IwTSxZQUF4QixDQUFxQy92QixPQUFyQyxFQUE4Q2pqQixJQUFJLENBQUN1ckMsT0FBbkQ7QUFDSnRvQixpQkFBTyxDQUFDNmpCLFdBQVIsQ0FBb0I5bUMsSUFBSSxDQUFDdXJDLE9BQXpCO0FBQ0EsY0FBSXZyQyxJQUFJLENBQUNpaUMsUUFBVCxFQUNJaGYsT0FBTyxDQUFDNmpCLFdBQVIsQ0FBb0I5bUMsSUFBSSxDQUFDaWlDLFFBQXpCO0FBQ0poZixpQkFBTyxDQUFDNmpCLFdBQVIsQ0FBb0I5bUMsSUFBSSxDQUFDa3VDLGlCQUF6QjtBQUNIO0FBQ0o7O0FBQ0QsVUFBSSxDQUFDbHVDLElBQUksQ0FBQytvQyxNQUFMLENBQVlsRSxNQUFiLElBQXVCLENBQUM3a0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhGLE1BQXhDLEVBQ0ksQ0FBQ3ZqQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZK0osUUFBWixLQUF5QnZzQixTQUF6QixHQUNLdm1CLElBQUksQ0FBQytvQyxNQUFMLENBQVkrSixRQURqQixHQUVLbnJDLE1BQU0sQ0FBQ1QsUUFBUCxDQUFnQmtDLElBRnRCLEVBRTRCMDlCLFdBRjVCLENBRXdDOW1DLElBQUksQ0FBQ2t1QyxpQkFGN0M7QUFHUDs7QUFDRCxhQUFTZ0YsU0FBVCxDQUFtQnZOLFNBQW5CLEVBQThCdGhDLElBQTlCLEVBQW9DOHVDLFNBQXBDLEVBQStDMTVDLENBQS9DLEVBQWtEO0FBQzlDLFVBQUkyNUMsYUFBYSxHQUFHNUcsU0FBUyxDQUFDbm9DLElBQUQsRUFBTyxJQUFQLENBQTdCO0FBQUEsVUFBMkNndkMsVUFBVSxHQUFHdE4sYUFBYSxDQUFDLE1BQUQsRUFBUyxtQkFBbUJKLFNBQTVCLEVBQXVDdGhDLElBQUksQ0FBQzBsQixPQUFMLEdBQWUzbEIsUUFBZixFQUF2QyxDQUFyRTtBQUNBaXZDLGdCQUFVLENBQUM5TCxPQUFYLEdBQXFCbGpDLElBQXJCO0FBQ0FndkMsZ0JBQVUsQ0FBQ0MsRUFBWCxHQUFnQjc1QyxDQUFoQjtBQUNBNDVDLGdCQUFVLENBQUN4TSxZQUFYLENBQXdCLFlBQXhCLEVBQXNDN21DLElBQUksQ0FBQ3FkLFVBQUwsQ0FBZ0JoWixJQUFoQixFQUFzQnJFLElBQUksQ0FBQytvQyxNQUFMLENBQVl6RyxjQUFsQyxDQUF0Qzs7QUFDQSxVQUFJcUQsU0FBUyxDQUFDemQsT0FBVixDQUFrQixRQUFsQixNQUFnQyxDQUFDLENBQWpDLElBQ0F3aUIsWUFBWSxDQUFDcm1DLElBQUQsRUFBT3JFLElBQUksQ0FBQzRqQyxHQUFaLENBQVosS0FBaUMsQ0FEckMsRUFDd0M7QUFDcEM1akMsWUFBSSxDQUFDdXpDLGFBQUwsR0FBcUJGLFVBQXJCO0FBQ0FBLGtCQUFVLENBQUN6TixTQUFYLENBQXFCQyxHQUFyQixDQUF5QixPQUF6QjtBQUNBd04sa0JBQVUsQ0FBQ3hNLFlBQVgsQ0FBd0IsY0FBeEIsRUFBd0MsTUFBeEM7QUFDSDs7QUFDRCxVQUFJdU0sYUFBSixFQUFtQjtBQUNmQyxrQkFBVSxDQUFDaEIsUUFBWCxHQUFzQixDQUFDLENBQXZCOztBQUNBLFlBQUltQixjQUFjLENBQUNudkMsSUFBRCxDQUFsQixFQUEwQjtBQUN0Qmd2QyxvQkFBVSxDQUFDek4sU0FBWCxDQUFxQkMsR0FBckIsQ0FBeUIsVUFBekI7QUFDQTdsQyxjQUFJLENBQUN5ekMsZ0JBQUwsR0FBd0JKLFVBQXhCOztBQUNBLGNBQUlyekMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRGLElBQVosS0FBcUIsT0FBekIsRUFBa0M7QUFDOUJnQyx1QkFBVyxDQUFDNE4sVUFBRCxFQUFhLFlBQWIsRUFBMkJyekMsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQixDQUFuQixLQUNsQzJzQixZQUFZLENBQUNybUMsSUFBRCxFQUFPckUsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQixDQUFuQixDQUFQLEVBQThCLElBQTlCLENBQVosS0FBb0QsQ0FEN0MsQ0FBWDtBQUVBMG5CLHVCQUFXLENBQUM0TixVQUFELEVBQWEsVUFBYixFQUF5QnJ6QyxJQUFJLENBQUMrZCxhQUFMLENBQW1CLENBQW5CLEtBQ2hDMnNCLFlBQVksQ0FBQ3JtQyxJQUFELEVBQU9yRSxJQUFJLENBQUMrZCxhQUFMLENBQW1CLENBQW5CLENBQVAsRUFBOEIsSUFBOUIsQ0FBWixLQUFvRCxDQUQ3QyxDQUFYO0FBRUEsZ0JBQUk0bkIsU0FBUyxLQUFLLGNBQWxCLEVBQ0kwTixVQUFVLENBQUN6TixTQUFYLENBQXFCQyxHQUFyQixDQUF5QixTQUF6QjtBQUNQO0FBQ0o7QUFDSixPQWRELE1BZUs7QUFDRHdOLGtCQUFVLENBQUN6TixTQUFYLENBQXFCQyxHQUFyQixDQUF5QixvQkFBekI7QUFDSDs7QUFDRCxVQUFJN2xDLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BQXpCLEVBQWtDO0FBQzlCLFlBQUlpUSxhQUFhLENBQUNydkMsSUFBRCxDQUFiLElBQXVCLENBQUNtdkMsY0FBYyxDQUFDbnZDLElBQUQsQ0FBMUMsRUFDSWd2QyxVQUFVLENBQUN6TixTQUFYLENBQXFCQyxHQUFyQixDQUF5QixTQUF6QjtBQUNQOztBQUNELFVBQUk3bEMsSUFBSSxDQUFDMmQsV0FBTCxJQUNBM2QsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5FLFVBQVosS0FBMkIsQ0FEM0IsSUFFQWUsU0FBUyxLQUFLLGNBRmQsSUFHQXdOLFNBQVMsR0FBRyxDQUFaLEtBQWtCLENBSHRCLEVBR3lCO0FBQ3JCbnpDLFlBQUksQ0FBQzJkLFdBQUwsQ0FBaUJnMkIsa0JBQWpCLENBQW9DLFdBQXBDLEVBQWlELGlDQUFpQzN6QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZL0YsT0FBWixDQUFvQjMrQixJQUFwQixDQUFqQyxHQUE2RCxTQUE5RztBQUNIOztBQUNEMHBDLGtCQUFZLENBQUMsYUFBRCxFQUFnQnNGLFVBQWhCLENBQVo7QUFDQSxhQUFPQSxVQUFQO0FBQ0g7O0FBQ0QsYUFBU08sY0FBVCxDQUF3QkMsVUFBeEIsRUFBb0M7QUFDaENBLGdCQUFVLENBQUNDLEtBQVg7QUFDQSxVQUFJOXpDLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BQXpCLEVBQ0lxTixXQUFXLENBQUMrQyxVQUFELENBQVg7QUFDUDs7QUFDRCxhQUFTRSxvQkFBVCxDQUE4QjFELEtBQTlCLEVBQXFDO0FBQ2pDLFVBQUkyRCxVQUFVLEdBQUczRCxLQUFLLEdBQUcsQ0FBUixHQUFZLENBQVosR0FBZ0Jyd0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5FLFVBQVosR0FBeUIsQ0FBMUQ7QUFDQSxVQUFJcVAsUUFBUSxHQUFHNUQsS0FBSyxHQUFHLENBQVIsR0FBWXJ3QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBeEIsR0FBcUMsQ0FBQyxDQUFyRDs7QUFDQSxXQUFLLElBQUlsaEIsQ0FBQyxHQUFHc3dCLFVBQWIsRUFBeUJ0d0IsQ0FBQyxJQUFJdXdCLFFBQTlCLEVBQXdDdndCLENBQUMsSUFBSTJzQixLQUE3QyxFQUFvRDtBQUNoRCxZQUFJejRCLEtBQUssR0FBRzVYLElBQUksQ0FBQ3N1QyxhQUFMLENBQW1CNEYsUUFBbkIsQ0FBNEJ4d0IsQ0FBNUIsQ0FBWjtBQUNBLFlBQUl5d0IsVUFBVSxHQUFHOUQsS0FBSyxHQUFHLENBQVIsR0FBWSxDQUFaLEdBQWdCejRCLEtBQUssQ0FBQ3M4QixRQUFOLENBQWU3eEMsTUFBZixHQUF3QixDQUF6RDtBQUNBLFlBQUkreEMsUUFBUSxHQUFHL0QsS0FBSyxHQUFHLENBQVIsR0FBWXo0QixLQUFLLENBQUNzOEIsUUFBTixDQUFlN3hDLE1BQTNCLEdBQW9DLENBQUMsQ0FBcEQ7O0FBQ0EsYUFBSyxJQUFJNUksQ0FBQyxHQUFHMDZDLFVBQWIsRUFBeUIxNkMsQ0FBQyxJQUFJMjZDLFFBQTlCLEVBQXdDMzZDLENBQUMsSUFBSTQyQyxLQUE3QyxFQUFvRDtBQUNoRCxjQUFJM3VCLENBQUMsR0FBRzlKLEtBQUssQ0FBQ3M4QixRQUFOLENBQWV6NkMsQ0FBZixDQUFSO0FBQ0EsY0FBSWlvQixDQUFDLENBQUNpa0IsU0FBRixDQUFZemQsT0FBWixDQUFvQixRQUFwQixNQUFrQyxDQUFDLENBQW5DLElBQXdDc2tCLFNBQVMsQ0FBQzlxQixDQUFDLENBQUM2bEIsT0FBSCxDQUFyRCxFQUNJLE9BQU83bEIsQ0FBUDtBQUNQO0FBQ0o7O0FBQ0QsYUFBTzZFLFNBQVA7QUFDSDs7QUFDRCxhQUFTOHRCLG1CQUFULENBQTZCQyxPQUE3QixFQUFzQ2pFLEtBQXRDLEVBQTZDO0FBQ3pDLFVBQUlrRSxVQUFVLEdBQUdELE9BQU8sQ0FBQzNPLFNBQVIsQ0FBa0J6ZCxPQUFsQixDQUEwQixPQUExQixNQUF1QyxDQUFDLENBQXhDLEdBQ1hvc0IsT0FBTyxDQUFDL00sT0FBUixDQUFnQnpkLFFBQWhCLEVBRFcsR0FFWDlwQixJQUFJLENBQUNpdEMsWUFGWDtBQUdBLFVBQUlnSCxRQUFRLEdBQUc1RCxLQUFLLEdBQUcsQ0FBUixHQUFZcndDLElBQUksQ0FBQytvQyxNQUFMLENBQVluRSxVQUF4QixHQUFxQyxDQUFDLENBQXJEO0FBQ0EsVUFBSTRQLFNBQVMsR0FBR25FLEtBQUssR0FBRyxDQUFSLEdBQVksQ0FBWixHQUFnQixDQUFDLENBQWpDOztBQUNBLFdBQUssSUFBSTNzQixDQUFDLEdBQUc2d0IsVUFBVSxHQUFHdjBDLElBQUksQ0FBQ2l0QyxZQUEvQixFQUE2Q3ZwQixDQUFDLElBQUl1d0IsUUFBbEQsRUFBNER2d0IsQ0FBQyxJQUFJOHdCLFNBQWpFLEVBQTRFO0FBQ3hFLFlBQUk1OEIsS0FBSyxHQUFHNVgsSUFBSSxDQUFDc3VDLGFBQUwsQ0FBbUI0RixRQUFuQixDQUE0Qnh3QixDQUE1QixDQUFaO0FBQ0EsWUFBSXl3QixVQUFVLEdBQUdJLFVBQVUsR0FBR3YwQyxJQUFJLENBQUNpdEMsWUFBbEIsS0FBbUN2cEIsQ0FBbkMsR0FDWDR3QixPQUFPLENBQUNoQixFQUFSLEdBQWFqRCxLQURGLEdBRVhBLEtBQUssR0FBRyxDQUFSLEdBQ0l6NEIsS0FBSyxDQUFDczhCLFFBQU4sQ0FBZTd4QyxNQUFmLEdBQXdCLENBRDVCLEdBRUksQ0FKVjtBQUtBLFlBQUlveUMsWUFBWSxHQUFHNzhCLEtBQUssQ0FBQ3M4QixRQUFOLENBQWU3eEMsTUFBbEM7O0FBQ0EsYUFBSyxJQUFJNUksQ0FBQyxHQUFHMDZDLFVBQWIsRUFBeUIxNkMsQ0FBQyxJQUFJLENBQUwsSUFBVUEsQ0FBQyxHQUFHZzdDLFlBQWQsSUFBOEJoN0MsQ0FBQyxLQUFLNDJDLEtBQUssR0FBRyxDQUFSLEdBQVlvRSxZQUFaLEdBQTJCLENBQUMsQ0FBakMsQ0FBeEQsRUFBNkZoN0MsQ0FBQyxJQUFJKzZDLFNBQWxHLEVBQTZHO0FBQ3pHLGNBQUk5eUIsQ0FBQyxHQUFHOUosS0FBSyxDQUFDczhCLFFBQU4sQ0FBZXo2QyxDQUFmLENBQVI7QUFDQSxjQUFJaW9CLENBQUMsQ0FBQ2lrQixTQUFGLENBQVl6ZCxPQUFaLENBQW9CLFFBQXBCLE1BQWtDLENBQUMsQ0FBbkMsSUFDQXNrQixTQUFTLENBQUM5cUIsQ0FBQyxDQUFDNmxCLE9BQUgsQ0FEVCxJQUVBM21DLElBQUksQ0FBQ2dwQixHQUFMLENBQVMwcUIsT0FBTyxDQUFDaEIsRUFBUixHQUFhNzVDLENBQXRCLEtBQTRCbUgsSUFBSSxDQUFDZ3BCLEdBQUwsQ0FBU3ltQixLQUFULENBRmhDLEVBR0ksT0FBT3VELGNBQWMsQ0FBQ2x5QixDQUFELENBQXJCO0FBQ1A7QUFDSjs7QUFDRDFoQixVQUFJLENBQUNrc0MsV0FBTCxDQUFpQnNJLFNBQWpCO0FBQ0FFLGdCQUFVLENBQUNYLG9CQUFvQixDQUFDUyxTQUFELENBQXJCLEVBQWtDLENBQWxDLENBQVY7QUFDQSxhQUFPanVCLFNBQVA7QUFDSDs7QUFDRCxhQUFTbXVCLFVBQVQsQ0FBb0JKLE9BQXBCLEVBQTZCeG5DLE1BQTdCLEVBQXFDO0FBQ2pDLFVBQUk2bkMsVUFBVSxHQUFHQyxRQUFRLENBQUMxdEMsUUFBUSxDQUFDMnRDLGFBQVQsSUFBMEIzdEMsUUFBUSxDQUFDa0MsSUFBcEMsQ0FBekI7QUFDQSxVQUFJMHJDLFNBQVMsR0FBR1IsT0FBTyxLQUFLL3RCLFNBQVosR0FDVit0QixPQURVLEdBRVZLLFVBQVUsR0FDTnp0QyxRQUFRLENBQUMydEMsYUFESCxHQUVONzBDLElBQUksQ0FBQ3l6QyxnQkFBTCxLQUEwQmx0QixTQUExQixJQUF1Q3F1QixRQUFRLENBQUM1MEMsSUFBSSxDQUFDeXpDLGdCQUFOLENBQS9DLEdBQ0l6ekMsSUFBSSxDQUFDeXpDLGdCQURULEdBRUl6ekMsSUFBSSxDQUFDdXpDLGFBQUwsS0FBdUJodEIsU0FBdkIsSUFBb0NxdUIsUUFBUSxDQUFDNTBDLElBQUksQ0FBQ3V6QyxhQUFOLENBQTVDLEdBQ0l2ekMsSUFBSSxDQUFDdXpDLGFBRFQsR0FFSVEsb0JBQW9CLENBQUNqbkMsTUFBTSxHQUFHLENBQVQsR0FBYSxDQUFiLEdBQWlCLENBQUMsQ0FBbkIsQ0FSdEM7O0FBU0EsVUFBSWdvQyxTQUFTLEtBQUt2dUIsU0FBbEIsRUFBNkI7QUFDekJ2bUIsWUFBSSxDQUFDc2YsTUFBTCxDQUFZdzBCLEtBQVo7QUFDSCxPQUZELE1BR0ssSUFBSSxDQUFDYSxVQUFMLEVBQWlCO0FBQ2xCZixzQkFBYyxDQUFDa0IsU0FBRCxDQUFkO0FBQ0gsT0FGSSxNQUdBO0FBQ0RULDJCQUFtQixDQUFDUyxTQUFELEVBQVlob0MsTUFBWixDQUFuQjtBQUNIO0FBQ0o7O0FBQ0QsYUFBU2lvQyxjQUFULENBQXdCcDlCLElBQXhCLEVBQThCQyxLQUE5QixFQUFxQztBQUNqQyxVQUFJbzlCLFlBQVksR0FBRyxDQUFDLElBQUlwdkMsSUFBSixDQUFTK1IsSUFBVCxFQUFlQyxLQUFmLEVBQXNCLENBQXRCLEVBQXlCdVQsTUFBekIsS0FBb0NuckIsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVXZxQixjQUE5QyxHQUErRCxDQUFoRSxJQUFxRSxDQUF4RjtBQUNBLFVBQUl1MkIsYUFBYSxHQUFHajFDLElBQUksQ0FBQzhzQyxLQUFMLENBQVdDLGNBQVgsQ0FBMEIsQ0FBQ24xQixLQUFLLEdBQUcsQ0FBUixHQUFZLEVBQWIsSUFBbUIsRUFBN0MsRUFBaURELElBQWpELENBQXBCO0FBQ0EsVUFBSThHLFdBQVcsR0FBR3plLElBQUksQ0FBQzhzQyxLQUFMLENBQVdDLGNBQVgsQ0FBMEJuMUIsS0FBMUIsRUFBaUNELElBQWpDLENBQWxCO0FBQUEsVUFBMEQ2MkIsSUFBSSxHQUFHN21DLE1BQU0sQ0FBQ1QsUUFBUCxDQUFnQmtyQyxzQkFBaEIsRUFBakU7QUFBQSxVQUEyRzhDLFlBQVksR0FBR2wxQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBWixHQUF5QixDQUFuSjtBQUFBLFVBQXNKdVEsaUJBQWlCLEdBQUdELFlBQVksR0FBRyxxQkFBSCxHQUEyQixjQUFqTjtBQUFBLFVBQWlPRSxpQkFBaUIsR0FBR0YsWUFBWSxHQUFHLHFCQUFILEdBQTJCLGNBQTVSO0FBQ0EsVUFBSS9CLFNBQVMsR0FBRzhCLGFBQWEsR0FBRyxDQUFoQixHQUFvQkQsWUFBcEM7QUFBQSxVQUFrREssUUFBUSxHQUFHLENBQTdELENBSmlDLENBS2pDOztBQUNBLGFBQU9sQyxTQUFTLElBQUk4QixhQUFwQixFQUFtQzlCLFNBQVMsSUFBSWtDLFFBQVEsRUFBeEQsRUFBNEQ7QUFDeEQ3RyxZQUFJLENBQUMxSCxXQUFMLENBQWlCb00sU0FBUyxDQUFDaUMsaUJBQUQsRUFBb0IsSUFBSXZ2QyxJQUFKLENBQVMrUixJQUFULEVBQWVDLEtBQUssR0FBRyxDQUF2QixFQUEwQnU3QixTQUExQixDQUFwQixFQUEwREEsU0FBMUQsRUFBcUVrQyxRQUFyRSxDQUExQjtBQUNILE9BUmdDLENBU2pDOzs7QUFDQSxXQUFLbEMsU0FBUyxHQUFHLENBQWpCLEVBQW9CQSxTQUFTLElBQUkxMEIsV0FBakMsRUFBOEMwMEIsU0FBUyxJQUFJa0MsUUFBUSxFQUFuRSxFQUF1RTtBQUNuRTdHLFlBQUksQ0FBQzFILFdBQUwsQ0FBaUJvTSxTQUFTLENBQUMsRUFBRCxFQUFLLElBQUl0dEMsSUFBSixDQUFTK1IsSUFBVCxFQUFlQyxLQUFmLEVBQXNCdTdCLFNBQXRCLENBQUwsRUFBdUNBLFNBQXZDLEVBQWtEa0MsUUFBbEQsQ0FBMUI7QUFDSCxPQVpnQyxDQWFqQzs7O0FBQ0EsV0FBSyxJQUFJcnJCLE1BQU0sR0FBR3ZMLFdBQVcsR0FBRyxDQUFoQyxFQUFtQ3VMLE1BQU0sSUFBSSxLQUFLZ3JCLFlBQWYsS0FDOUJoMUMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5FLFVBQVosS0FBMkIsQ0FBM0IsSUFBZ0N5USxRQUFRLEdBQUcsQ0FBWCxLQUFpQixDQURuQixDQUFuQyxFQUMwRHJyQixNQUFNLElBQUlxckIsUUFBUSxFQUQ1RSxFQUNnRjtBQUM1RTdHLFlBQUksQ0FBQzFILFdBQUwsQ0FBaUJvTSxTQUFTLENBQUNrQyxpQkFBRCxFQUFvQixJQUFJeHZDLElBQUosQ0FBUytSLElBQVQsRUFBZUMsS0FBSyxHQUFHLENBQXZCLEVBQTBCb1MsTUFBTSxHQUFHdkwsV0FBbkMsQ0FBcEIsRUFBcUV1TCxNQUFyRSxFQUE2RXFyQixRQUE3RSxDQUExQjtBQUNILE9BakJnQyxDQWtCakM7OztBQUNBLFVBQUlDLFlBQVksR0FBR3ZQLGFBQWEsQ0FBQyxLQUFELEVBQVEsY0FBUixDQUFoQztBQUNBdVAsa0JBQVksQ0FBQ3hPLFdBQWIsQ0FBeUIwSCxJQUF6QjtBQUNBLGFBQU84RyxZQUFQO0FBQ0g7O0FBQ0QsYUFBUzNDLFNBQVQsR0FBcUI7QUFDakIsVUFBSTN5QyxJQUFJLENBQUNzdUMsYUFBTCxLQUF1Qi9uQixTQUEzQixFQUFzQztBQUNsQztBQUNIOztBQUNEMGYsZUFBUyxDQUFDam1DLElBQUksQ0FBQ3N1QyxhQUFOLENBQVQsQ0FKaUIsQ0FLakI7O0FBQ0EsVUFBSXR1QyxJQUFJLENBQUMyZCxXQUFULEVBQ0lzb0IsU0FBUyxDQUFDam1DLElBQUksQ0FBQzJkLFdBQU4sQ0FBVDtBQUNKLFVBQUk0M0IsSUFBSSxHQUFHcnVDLFFBQVEsQ0FBQ2tyQyxzQkFBVCxFQUFYOztBQUNBLFdBQUssSUFBSTM0QyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdUcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5FLFVBQWhDLEVBQTRDbnJDLENBQUMsRUFBN0MsRUFBaUQ7QUFDN0MsWUFBSWtxQixDQUFDLEdBQUcsSUFBSS9kLElBQUosQ0FBUzVGLElBQUksQ0FBQ2t0QyxXQUFkLEVBQTJCbHRDLElBQUksQ0FBQ2l0QyxZQUFoQyxFQUE4QyxDQUE5QyxDQUFSO0FBQ0F0cEIsU0FBQyxDQUFDOGpCLFFBQUYsQ0FBV3puQyxJQUFJLENBQUNpdEMsWUFBTCxHQUFvQnh6QyxDQUEvQjtBQUNBODdDLFlBQUksQ0FBQ3pPLFdBQUwsQ0FBaUJpTyxjQUFjLENBQUNweEIsQ0FBQyxDQUFDMEYsV0FBRixFQUFELEVBQWtCMUYsQ0FBQyxDQUFDbUcsUUFBRixFQUFsQixDQUEvQjtBQUNIOztBQUNEOXBCLFVBQUksQ0FBQ3N1QyxhQUFMLENBQW1CeEgsV0FBbkIsQ0FBK0J5TyxJQUEvQjtBQUNBdjFDLFVBQUksQ0FBQ3d1QyxJQUFMLEdBQVl4dUMsSUFBSSxDQUFDc3VDLGFBQUwsQ0FBbUJuSSxVQUEvQjs7QUFDQSxVQUFJbm1DLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BQXJCLElBQWdDempDLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIxYixNQUFuQixLQUE4QixDQUFsRSxFQUFxRTtBQUNqRXl1QyxtQkFBVztBQUNkO0FBQ0o7O0FBQ0QsYUFBU2UsZ0JBQVQsR0FBNEI7QUFDeEIsVUFBSTd4QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBWixHQUF5QixDQUF6QixJQUNBNWtDLElBQUksQ0FBQytvQyxNQUFMLENBQVlyRixpQkFBWixLQUFrQyxVQUR0QyxFQUVJOztBQUNKLFVBQUk4UixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQVU1OUIsS0FBVixFQUFpQjtBQUNwQyxZQUFJNVgsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLEtBQXdCZ0osU0FBeEIsSUFDQXZtQixJQUFJLENBQUNrdEMsV0FBTCxLQUFxQmx0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosQ0FBb0I4TCxXQUFwQixFQURyQixJQUVBelIsS0FBSyxHQUFHNVgsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLENBQW9CdU0sUUFBcEIsRUFGWixFQUU0QztBQUN4QyxpQkFBTyxLQUFQO0FBQ0g7O0FBQ0QsZUFBTyxFQUFFOXBCLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixLQUF3QmlKLFNBQXhCLElBQ0x2bUIsSUFBSSxDQUFDa3RDLFdBQUwsS0FBcUJsdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLENBQW9CK0wsV0FBcEIsRUFEaEIsSUFFTHpSLEtBQUssR0FBRzVYLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixDQUFvQndNLFFBQXBCLEVBRkwsQ0FBUDtBQUdILE9BVEQ7O0FBVUE5cEIsVUFBSSxDQUFDeTFDLHVCQUFMLENBQTZCcEQsUUFBN0IsR0FBd0MsQ0FBQyxDQUF6QztBQUNBcnlDLFVBQUksQ0FBQ3kxQyx1QkFBTCxDQUE2QkMsU0FBN0IsR0FBeUMsRUFBekM7O0FBQ0EsV0FBSyxJQUFJajhDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDekIsWUFBSSxDQUFDKzdDLGdCQUFnQixDQUFDLzdDLENBQUQsQ0FBckIsRUFDSTtBQUNKLFlBQUltZSxLQUFLLEdBQUdtdUIsYUFBYSxDQUFDLFFBQUQsRUFBVywrQkFBWCxDQUF6QjtBQUNBbnVCLGFBQUssQ0FBQzlkLEtBQU4sR0FBYyxJQUFJOEwsSUFBSixDQUFTNUYsSUFBSSxDQUFDa3RDLFdBQWQsRUFBMkJ6ekMsQ0FBM0IsRUFBOEJxd0IsUUFBOUIsR0FBeUMxbEIsUUFBekMsRUFBZDtBQUNBd1QsYUFBSyxDQUFDb3VCLFdBQU4sR0FBb0JtQixVQUFVLENBQUMxdEMsQ0FBRCxFQUFJdUcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXBFLHFCQUFoQixFQUF1QzNrQyxJQUFJLENBQUNpcEMsSUFBNUMsQ0FBOUI7QUFDQXJ4QixhQUFLLENBQUN5NkIsUUFBTixHQUFpQixDQUFDLENBQWxCOztBQUNBLFlBQUlyeUMsSUFBSSxDQUFDaXRDLFlBQUwsS0FBc0J4ekMsQ0FBMUIsRUFBNkI7QUFDekJtZSxlQUFLLENBQUMrOUIsUUFBTixHQUFpQixJQUFqQjtBQUNIOztBQUNEMzFDLFlBQUksQ0FBQ3kxQyx1QkFBTCxDQUE2QjNPLFdBQTdCLENBQXlDbHZCLEtBQXpDO0FBQ0g7QUFDSjs7QUFDRCxhQUFTZytCLFVBQVQsR0FBc0I7QUFDbEIsVUFBSUMsU0FBUyxHQUFHOVAsYUFBYSxDQUFDLEtBQUQsRUFBUSxpQkFBUixDQUE3QjtBQUNBLFVBQUkrUCxnQkFBZ0IsR0FBR251QyxNQUFNLENBQUNULFFBQVAsQ0FBZ0JrckMsc0JBQWhCLEVBQXZCO0FBQ0EsVUFBSTJELFlBQUo7O0FBQ0EsVUFBSS8xQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBWixHQUF5QixDQUF6QixJQUNBNWtDLElBQUksQ0FBQytvQyxNQUFMLENBQVlyRixpQkFBWixLQUFrQyxRQUR0QyxFQUNnRDtBQUM1Q3FTLG9CQUFZLEdBQUdoUSxhQUFhLENBQUMsTUFBRCxFQUFTLFdBQVQsQ0FBNUI7QUFDSCxPQUhELE1BSUs7QUFDRC9sQyxZQUFJLENBQUN5MUMsdUJBQUwsR0FBK0IxUCxhQUFhLENBQUMsUUFBRCxFQUFXLGdDQUFYLENBQTVDO0FBQ0EvbEMsWUFBSSxDQUFDeTFDLHVCQUFMLENBQTZCNU8sWUFBN0IsQ0FBMEMsWUFBMUMsRUFBd0Q3bUMsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWpFLGNBQWxFO0FBQ0E3ckMsWUFBSSxDQUFDNkcsSUFBSSxDQUFDeTFDLHVCQUFOLEVBQStCLFFBQS9CLEVBQXlDLFVBQVVydUMsQ0FBVixFQUFhO0FBQ3RELGNBQUlsTixNQUFNLEdBQUc2c0MsY0FBYyxDQUFDMy9CLENBQUQsQ0FBM0I7QUFDQSxjQUFJNHVDLGFBQWEsR0FBRzN3QyxRQUFRLENBQUNuTCxNQUFNLENBQUNKLEtBQVIsRUFBZSxFQUFmLENBQTVCO0FBQ0FrRyxjQUFJLENBQUNrc0MsV0FBTCxDQUFpQjhKLGFBQWEsR0FBR2gyQyxJQUFJLENBQUNpdEMsWUFBdEM7QUFDQWMsc0JBQVksQ0FBQyxlQUFELENBQVo7QUFDSCxTQUxHLENBQUo7QUFNQThELHdCQUFnQjtBQUNoQmtFLG9CQUFZLEdBQUcvMUMsSUFBSSxDQUFDeTFDLHVCQUFwQjtBQUNIOztBQUNELFVBQUlRLFNBQVMsR0FBRzFQLGlCQUFpQixDQUFDLFVBQUQsRUFBYTtBQUFFMlAsZ0JBQVEsRUFBRTtBQUFaLE9BQWIsQ0FBakM7QUFDQSxVQUFJQyxXQUFXLEdBQUdGLFNBQVMsQ0FBQ0csb0JBQVYsQ0FBK0IsT0FBL0IsRUFBd0MsQ0FBeEMsQ0FBbEI7QUFDQUQsaUJBQVcsQ0FBQ3RQLFlBQVosQ0FBeUIsWUFBekIsRUFBdUM3bUMsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWhxQixhQUFqRDs7QUFDQSxVQUFJamYsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFoQixFQUF5QjtBQUNyQjQ0QixtQkFBVyxDQUFDdFAsWUFBWixDQUF5QixLQUF6QixFQUFnQzdtQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosQ0FBb0I4TCxXQUFwQixHQUFrQ2psQixRQUFsQyxFQUFoQztBQUNIOztBQUNELFVBQUlwRSxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQWhCLEVBQXlCO0FBQ3JCNjRCLG1CQUFXLENBQUN0UCxZQUFaLENBQXlCLEtBQXpCLEVBQWdDN21DLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixDQUFvQitMLFdBQXBCLEdBQWtDamxCLFFBQWxDLEVBQWhDO0FBQ0EreEMsbUJBQVcsQ0FBQ0UsUUFBWixHQUNJLENBQUMsQ0FBQ3IyQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQWQsSUFDSXZkLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixDQUFvQjhMLFdBQXBCLE9BQXNDcnBCLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixDQUFvQitMLFdBQXBCLEVBRjlDO0FBR0g7O0FBQ0QsVUFBSTRqQixZQUFZLEdBQUdsSCxhQUFhLENBQUMsS0FBRCxFQUFRLHlCQUFSLENBQWhDO0FBQ0FrSCxrQkFBWSxDQUFDbkcsV0FBYixDQUF5QmlQLFlBQXpCO0FBQ0E5SSxrQkFBWSxDQUFDbkcsV0FBYixDQUF5Qm1QLFNBQXpCO0FBQ0FILHNCQUFnQixDQUFDaFAsV0FBakIsQ0FBNkJtRyxZQUE3QjtBQUNBNEksZUFBUyxDQUFDL08sV0FBVixDQUFzQmdQLGdCQUF0QjtBQUNBLGFBQU87QUFDSEQsaUJBQVMsRUFBRUEsU0FEUjtBQUVITSxtQkFBVyxFQUFFQSxXQUZWO0FBR0hKLG9CQUFZLEVBQUVBO0FBSFgsT0FBUDtBQUtIOztBQUNELGFBQVNPLFdBQVQsR0FBdUI7QUFDbkJyUSxlQUFTLENBQUNqbUMsSUFBSSxDQUFDa3hDLFFBQU4sQ0FBVDtBQUNBbHhDLFVBQUksQ0FBQ2t4QyxRQUFMLENBQWNwSyxXQUFkLENBQTBCOW1DLElBQUksQ0FBQ3UyQyxZQUEvQjs7QUFDQSxVQUFJdjJDLElBQUksQ0FBQytvQyxNQUFMLENBQVluRSxVQUFoQixFQUE0QjtBQUN4QjVrQyxZQUFJLENBQUN3MkMsWUFBTCxHQUFvQixFQUFwQjtBQUNBeDJDLFlBQUksQ0FBQ3kyQyxhQUFMLEdBQXFCLEVBQXJCO0FBQ0g7O0FBQ0QsV0FBSyxJQUFJL3lCLENBQUMsR0FBRzFqQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBekIsRUFBcUNsaEIsQ0FBQyxFQUF0QyxHQUEyQztBQUN2QyxZQUFJOUwsS0FBSyxHQUFHZytCLFVBQVUsRUFBdEI7QUFDQTUxQyxZQUFJLENBQUN3MkMsWUFBTCxDQUFrQmhHLElBQWxCLENBQXVCNTRCLEtBQUssQ0FBQ3UrQixXQUE3QjtBQUNBbjJDLFlBQUksQ0FBQ3kyQyxhQUFMLENBQW1CakcsSUFBbkIsQ0FBd0I1NEIsS0FBSyxDQUFDbStCLFlBQTlCO0FBQ0EvMUMsWUFBSSxDQUFDa3hDLFFBQUwsQ0FBY3BLLFdBQWQsQ0FBMEJsdkIsS0FBSyxDQUFDaStCLFNBQWhDO0FBQ0g7O0FBQ0Q3MUMsVUFBSSxDQUFDa3hDLFFBQUwsQ0FBY3BLLFdBQWQsQ0FBMEI5bUMsSUFBSSxDQUFDMDJDLFlBQS9CO0FBQ0g7O0FBQ0QsYUFBU3BFLGFBQVQsR0FBeUI7QUFDckJ0eUMsVUFBSSxDQUFDa3hDLFFBQUwsR0FBZ0JuTCxhQUFhLENBQUMsS0FBRCxFQUFRLGtCQUFSLENBQTdCO0FBQ0EvbEMsVUFBSSxDQUFDdzJDLFlBQUwsR0FBb0IsRUFBcEI7QUFDQXgyQyxVQUFJLENBQUN5MkMsYUFBTCxHQUFxQixFQUFyQjtBQUNBejJDLFVBQUksQ0FBQ3UyQyxZQUFMLEdBQW9CeFEsYUFBYSxDQUFDLE1BQUQsRUFBUyxzQkFBVCxDQUFqQztBQUNBL2xDLFVBQUksQ0FBQ3UyQyxZQUFMLENBQWtCYixTQUFsQixHQUE4QjExQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZckUsU0FBMUM7QUFDQTFrQyxVQUFJLENBQUMwMkMsWUFBTCxHQUFvQjNRLGFBQWEsQ0FBQyxNQUFELEVBQVMsc0JBQVQsQ0FBakM7QUFDQS9sQyxVQUFJLENBQUMwMkMsWUFBTCxDQUFrQmhCLFNBQWxCLEdBQThCMTFDLElBQUksQ0FBQytvQyxNQUFMLENBQVlwRixTQUExQztBQUNBMlMsaUJBQVc7QUFDWHg5QyxZQUFNLENBQUNELGNBQVAsQ0FBc0JtSCxJQUF0QixFQUE0QixxQkFBNUIsRUFBbUQ7QUFDL0M3RixXQUFHLEVBQUUsZUFBWTtBQUFFLGlCQUFPNkYsSUFBSSxDQUFDMjJDLG9CQUFaO0FBQW1DLFNBRFA7QUFFL0NwOEMsV0FBRyxFQUFFLGFBQVUycUMsSUFBVixFQUFnQjtBQUNqQixjQUFJbGxDLElBQUksQ0FBQzIyQyxvQkFBTCxLQUE4QnpSLElBQWxDLEVBQXdDO0FBQ3BDTyx1QkFBVyxDQUFDemxDLElBQUksQ0FBQ3UyQyxZQUFOLEVBQW9CLG9CQUFwQixFQUEwQ3JSLElBQTFDLENBQVg7QUFDQWxsQyxnQkFBSSxDQUFDMjJDLG9CQUFMLEdBQTRCelIsSUFBNUI7QUFDSDtBQUNKO0FBUDhDLE9BQW5EO0FBU0Fwc0MsWUFBTSxDQUFDRCxjQUFQLENBQXNCbUgsSUFBdEIsRUFBNEIscUJBQTVCLEVBQW1EO0FBQy9DN0YsV0FBRyxFQUFFLGVBQVk7QUFBRSxpQkFBTzZGLElBQUksQ0FBQzQyQyxvQkFBWjtBQUFtQyxTQURQO0FBRS9DcjhDLFdBQUcsRUFBRSxhQUFVMnFDLElBQVYsRUFBZ0I7QUFDakIsY0FBSWxsQyxJQUFJLENBQUM0MkMsb0JBQUwsS0FBOEIxUixJQUFsQyxFQUF3QztBQUNwQ08sdUJBQVcsQ0FBQ3psQyxJQUFJLENBQUMwMkMsWUFBTixFQUFvQixvQkFBcEIsRUFBMEN4UixJQUExQyxDQUFYO0FBQ0FsbEMsZ0JBQUksQ0FBQzQyQyxvQkFBTCxHQUE0QjFSLElBQTVCO0FBQ0g7QUFDSjtBQVA4QyxPQUFuRDtBQVNBbGxDLFVBQUksQ0FBQzYyQyxrQkFBTCxHQUEwQjcyQyxJQUFJLENBQUN3MkMsWUFBTCxDQUFrQixDQUFsQixDQUExQjtBQUNBTSxrQ0FBNEI7QUFDNUIsYUFBTzkyQyxJQUFJLENBQUNreEMsUUFBWjtBQUNIOztBQUNELGFBQVMwQixTQUFULEdBQXFCO0FBQ2pCNXlDLFVBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QnRJLFNBQXZCLENBQWlDQyxHQUFqQyxDQUFxQyxTQUFyQztBQUNBLFVBQUk3bEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWhzQixVQUFoQixFQUNJL2MsSUFBSSxDQUFDa3VDLGlCQUFMLENBQXVCdEksU0FBdkIsQ0FBaUNDLEdBQWpDLENBQXFDLFlBQXJDO0FBQ0o3bEMsVUFBSSxDQUFDcXhDLGFBQUwsR0FBcUJ0TCxhQUFhLENBQUMsS0FBRCxFQUFRLGdCQUFSLENBQWxDO0FBQ0EvbEMsVUFBSSxDQUFDcXhDLGFBQUwsQ0FBbUJnQixRQUFuQixHQUE4QixDQUFDLENBQS9CO0FBQ0EsVUFBSTBFLFNBQVMsR0FBR2hSLGFBQWEsQ0FBQyxNQUFELEVBQVMsMEJBQVQsRUFBcUMsR0FBckMsQ0FBN0I7QUFDQSxVQUFJaVIsU0FBUyxHQUFHelEsaUJBQWlCLENBQUMsZ0JBQUQsRUFBbUI7QUFDaEQsc0JBQWN2bUMsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVS9wQjtBQUR3QixPQUFuQixDQUFqQztBQUdBbGYsVUFBSSxDQUFDc3ZDLFdBQUwsR0FBbUIwSCxTQUFTLENBQUNaLG9CQUFWLENBQStCLE9BQS9CLEVBQXdDLENBQXhDLENBQW5CO0FBQ0EsVUFBSWEsV0FBVyxHQUFHMVEsaUJBQWlCLENBQUMsa0JBQUQsRUFBcUI7QUFDcEQsc0JBQWN2bUMsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVTlwQjtBQUQ0QixPQUFyQixDQUFuQztBQUdBbmYsVUFBSSxDQUFDdXZDLGFBQUwsR0FBcUIwSCxXQUFXLENBQUNiLG9CQUFaLENBQWlDLE9BQWpDLEVBQTBDLENBQTFDLENBQXJCO0FBQ0FwMkMsVUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUIrQyxRQUFqQixHQUE0QnJ5QyxJQUFJLENBQUN1dkMsYUFBTCxDQUFtQjhDLFFBQW5CLEdBQThCLENBQUMsQ0FBM0Q7QUFDQXJ5QyxVQUFJLENBQUNzdkMsV0FBTCxDQUFpQngxQyxLQUFqQixHQUF5QjZ2QixHQUFHLENBQUMzcEIsSUFBSSxDQUFDMnRDLHFCQUFMLEdBQ3ZCM3RDLElBQUksQ0FBQzJ0QyxxQkFBTCxDQUEyQjFpQixRQUEzQixFQUR1QixHQUV2QmpyQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZbHNCLFNBQVosR0FDSTdjLElBQUksQ0FBQytvQyxNQUFMLENBQVl2ckIsV0FEaEIsR0FFSTZ4QixhQUFhLENBQUNydkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXZyQixXQUFiLENBSkssQ0FBNUI7QUFLQXhkLFVBQUksQ0FBQ3V2QyxhQUFMLENBQW1CejFDLEtBQW5CLEdBQTJCNnZCLEdBQUcsQ0FBQzNwQixJQUFJLENBQUMydEMscUJBQUwsR0FDekIzdEMsSUFBSSxDQUFDMnRDLHFCQUFMLENBQTJCN2lCLFVBQTNCLEVBRHlCLEdBRXpCOXFCLElBQUksQ0FBQytvQyxNQUFMLENBQVl0ckIsYUFGWSxDQUE5QjtBQUdBemQsVUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUJ6SSxZQUFqQixDQUE4QixNQUE5QixFQUFzQzdtQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZMUYsYUFBWixDQUEwQmovQixRQUExQixFQUF0QztBQUNBcEUsVUFBSSxDQUFDdXZDLGFBQUwsQ0FBbUIxSSxZQUFuQixDQUFnQyxNQUFoQyxFQUF3QzdtQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdkYsZUFBWixDQUE0QnAvQixRQUE1QixFQUF4QztBQUNBcEUsVUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUJ6SSxZQUFqQixDQUE4QixLQUE5QixFQUFxQzdtQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbHNCLFNBQVosR0FBd0IsR0FBeEIsR0FBOEIsR0FBbkU7QUFDQTdjLFVBQUksQ0FBQ3N2QyxXQUFMLENBQWlCekksWUFBakIsQ0FBOEIsS0FBOUIsRUFBcUM3bUMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxzQixTQUFaLEdBQXdCLElBQXhCLEdBQStCLElBQXBFO0FBQ0E3YyxVQUFJLENBQUN1dkMsYUFBTCxDQUFtQjFJLFlBQW5CLENBQWdDLEtBQWhDLEVBQXVDLEdBQXZDO0FBQ0E3bUMsVUFBSSxDQUFDdXZDLGFBQUwsQ0FBbUIxSSxZQUFuQixDQUFnQyxLQUFoQyxFQUF1QyxJQUF2QztBQUNBN21DLFVBQUksQ0FBQ3F4QyxhQUFMLENBQW1CdkssV0FBbkIsQ0FBK0JrUSxTQUEvQjtBQUNBaDNDLFVBQUksQ0FBQ3F4QyxhQUFMLENBQW1CdkssV0FBbkIsQ0FBK0JpUSxTQUEvQjtBQUNBLzJDLFVBQUksQ0FBQ3F4QyxhQUFMLENBQW1CdkssV0FBbkIsQ0FBK0JtUSxXQUEvQjtBQUNBLFVBQUlqM0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxzQixTQUFoQixFQUNJN2MsSUFBSSxDQUFDcXhDLGFBQUwsQ0FBbUJ6TCxTQUFuQixDQUE2QkMsR0FBN0IsQ0FBaUMsVUFBakM7O0FBQ0osVUFBSTdsQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZanNCLGFBQWhCLEVBQStCO0FBQzNCOWMsWUFBSSxDQUFDcXhDLGFBQUwsQ0FBbUJ6TCxTQUFuQixDQUE2QkMsR0FBN0IsQ0FBaUMsWUFBakM7QUFDQSxZQUFJcVIsV0FBVyxHQUFHM1EsaUJBQWlCLENBQUMsa0JBQUQsQ0FBbkM7QUFDQXZtQyxZQUFJLENBQUN3dkMsYUFBTCxHQUFxQjBILFdBQVcsQ0FBQ2Qsb0JBQVosQ0FBaUMsT0FBakMsRUFBMEMsQ0FBMUMsQ0FBckI7QUFDQXAyQyxZQUFJLENBQUN3dkMsYUFBTCxDQUFtQjExQyxLQUFuQixHQUEyQjZ2QixHQUFHLENBQUMzcEIsSUFBSSxDQUFDMnRDLHFCQUFMLEdBQ3pCM3RDLElBQUksQ0FBQzJ0QyxxQkFBTCxDQUEyQjVpQixVQUEzQixFQUR5QixHQUV6Qi9xQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZcEcsY0FGWSxDQUE5QjtBQUdBM2lDLFlBQUksQ0FBQ3d2QyxhQUFMLENBQW1CM0ksWUFBbkIsQ0FBZ0MsTUFBaEMsRUFBd0M3bUMsSUFBSSxDQUFDdXZDLGFBQUwsQ0FBbUI0SCxZQUFuQixDQUFnQyxNQUFoQyxDQUF4QztBQUNBbjNDLFlBQUksQ0FBQ3d2QyxhQUFMLENBQW1CM0ksWUFBbkIsQ0FBZ0MsS0FBaEMsRUFBdUMsR0FBdkM7QUFDQTdtQyxZQUFJLENBQUN3dkMsYUFBTCxDQUFtQjNJLFlBQW5CLENBQWdDLEtBQWhDLEVBQXVDLElBQXZDO0FBQ0E3bUMsWUFBSSxDQUFDcXhDLGFBQUwsQ0FBbUJ2SyxXQUFuQixDQUErQmYsYUFBYSxDQUFDLE1BQUQsRUFBUywwQkFBVCxFQUFxQyxHQUFyQyxDQUE1QztBQUNBL2xDLFlBQUksQ0FBQ3F4QyxhQUFMLENBQW1CdkssV0FBbkIsQ0FBK0JvUSxXQUEvQjtBQUNIOztBQUNELFVBQUksQ0FBQ2wzQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbHNCLFNBQWpCLEVBQTRCO0FBQ3hCO0FBQ0E3YyxZQUFJLENBQUNnZixJQUFMLEdBQVkrbUIsYUFBYSxDQUFDLE1BQUQsRUFBUyxpQkFBVCxFQUE0Qi9sQyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZWltQixHQUFHLENBQUMsQ0FBQ2psQyxJQUFJLENBQUMydEMscUJBQUwsR0FDbkUzdEMsSUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUJ4MUMsS0FEa0QsR0FFbkVrRyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdnJCLFdBRnNELElBRXZDLEVBRnNDLENBQWxCLENBQTVCLENBQXpCO0FBR0F4ZCxZQUFJLENBQUNnZixJQUFMLENBQVU5VCxLQUFWLEdBQWtCbEwsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWxxQixXQUE1QjtBQUNBL2UsWUFBSSxDQUFDZ2YsSUFBTCxDQUFVcXpCLFFBQVYsR0FBcUIsQ0FBQyxDQUF0QjtBQUNBcnlDLFlBQUksQ0FBQ3F4QyxhQUFMLENBQW1CdkssV0FBbkIsQ0FBK0I5bUMsSUFBSSxDQUFDZ2YsSUFBcEM7QUFDSDs7QUFDRCxhQUFPaGYsSUFBSSxDQUFDcXhDLGFBQVo7QUFDSDs7QUFDRCxhQUFTcUIsYUFBVCxHQUF5QjtBQUNyQixVQUFJLENBQUMxeUMsSUFBSSxDQUFDbzNDLGdCQUFWLEVBQ0lwM0MsSUFBSSxDQUFDbzNDLGdCQUFMLEdBQXdCclIsYUFBYSxDQUFDLEtBQUQsRUFBUSxvQkFBUixDQUFyQyxDQURKLEtBR0lFLFNBQVMsQ0FBQ2ptQyxJQUFJLENBQUNvM0MsZ0JBQU4sQ0FBVDs7QUFDSixXQUFLLElBQUkzOUMsQ0FBQyxHQUFHdUcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5FLFVBQXpCLEVBQXFDbnJDLENBQUMsRUFBdEMsR0FBMkM7QUFDdkMsWUFBSW84QyxTQUFTLEdBQUc5UCxhQUFhLENBQUMsS0FBRCxFQUFRLDRCQUFSLENBQTdCO0FBQ0EvbEMsWUFBSSxDQUFDbzNDLGdCQUFMLENBQXNCdFEsV0FBdEIsQ0FBa0MrTyxTQUFsQztBQUNIOztBQUNEd0Isb0JBQWM7QUFDZCxhQUFPcjNDLElBQUksQ0FBQ28zQyxnQkFBWjtBQUNIOztBQUNELGFBQVNDLGNBQVQsR0FBMEI7QUFDdEIsVUFBSSxDQUFDcjNDLElBQUksQ0FBQ28zQyxnQkFBVixFQUE0QjtBQUN4QjtBQUNIOztBQUNELFVBQUkxNEIsY0FBYyxHQUFHMWUsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVXZxQixjQUEvQjs7QUFDQSxVQUFJTCxRQUFRLEdBQUdnakIsY0FBYyxDQUFDcmhDLElBQUksQ0FBQ2lwQyxJQUFMLENBQVU1cUIsUUFBVixDQUFtQkMsU0FBcEIsQ0FBN0I7O0FBQ0EsVUFBSUksY0FBYyxHQUFHLENBQWpCLElBQXNCQSxjQUFjLEdBQUdMLFFBQVEsQ0FBQ2hjLE1BQXBELEVBQTREO0FBQ3hEZ2MsZ0JBQVEsR0FBR2dqQixjQUFjLENBQUNoakIsUUFBUSxDQUFDaTVCLE1BQVQsQ0FBZ0I1NEIsY0FBaEIsRUFBZ0NMLFFBQVEsQ0FBQ2hjLE1BQXpDLENBQUQsRUFBbURnYyxRQUFRLENBQUNpNUIsTUFBVCxDQUFnQixDQUFoQixFQUFtQjU0QixjQUFuQixDQUFuRCxDQUF6QjtBQUNIOztBQUNELFdBQUssSUFBSWpsQixDQUFDLEdBQUd1RyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkUsVUFBekIsRUFBcUNuckMsQ0FBQyxFQUF0QyxHQUEyQztBQUN2Q3VHLFlBQUksQ0FBQ28zQyxnQkFBTCxDQUFzQmxELFFBQXRCLENBQStCejZDLENBQS9CLEVBQWtDaThDLFNBQWxDLEdBQThDLHVEQUF1RHIzQixRQUFRLENBQUNtSyxJQUFULENBQWMseUNBQWQsQ0FBdkQsR0FBa0gseUJBQWhLO0FBQ0g7QUFDSjtBQUNEOzs7QUFDQSxhQUFTZ3FCLFVBQVQsR0FBc0I7QUFDbEJ4eUMsVUFBSSxDQUFDa3VDLGlCQUFMLENBQXVCdEksU0FBdkIsQ0FBaUNDLEdBQWpDLENBQXFDLFVBQXJDO0FBQ0EsVUFBSThJLFdBQVcsR0FBRzVJLGFBQWEsQ0FBQyxLQUFELEVBQVEsdUJBQVIsQ0FBL0I7QUFDQTRJLGlCQUFXLENBQUM3SCxXQUFaLENBQXdCZixhQUFhLENBQUMsTUFBRCxFQUFTLG1CQUFULEVBQThCL2xDLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVwcUIsZ0JBQXhDLENBQXJDO0FBQ0EsVUFBSWxCLFdBQVcsR0FBR29vQixhQUFhLENBQUMsS0FBRCxFQUFRLGlCQUFSLENBQS9CO0FBQ0E0SSxpQkFBVyxDQUFDN0gsV0FBWixDQUF3Qm5wQixXQUF4QjtBQUNBLGFBQU87QUFDSGd4QixtQkFBVyxFQUFFQSxXQURWO0FBRUhoeEIsbUJBQVcsRUFBRUE7QUFGVixPQUFQO0FBSUg7O0FBQ0QsYUFBU3V1QixXQUFULENBQXFCcHlDLEtBQXJCLEVBQTRCeTlDLFFBQTVCLEVBQXNDO0FBQ2xDLFVBQUlBLFFBQVEsS0FBSyxLQUFLLENBQXRCLEVBQXlCO0FBQUVBLGdCQUFRLEdBQUcsSUFBWDtBQUFrQjs7QUFDN0MsVUFBSWxILEtBQUssR0FBR2tILFFBQVEsR0FBR3o5QyxLQUFILEdBQVdBLEtBQUssR0FBR2tHLElBQUksQ0FBQ2l0QyxZQUE1QztBQUNBLFVBQUtvRCxLQUFLLEdBQUcsQ0FBUixJQUFhcndDLElBQUksQ0FBQ3czQyxtQkFBTCxLQUE2QixJQUEzQyxJQUNDbkgsS0FBSyxHQUFHLENBQVIsSUFBYXJ3QyxJQUFJLENBQUN5M0MsbUJBQUwsS0FBNkIsSUFEL0MsRUFFSTtBQUNKejNDLFVBQUksQ0FBQ2l0QyxZQUFMLElBQXFCb0QsS0FBckI7O0FBQ0EsVUFBSXJ3QyxJQUFJLENBQUNpdEMsWUFBTCxHQUFvQixDQUFwQixJQUF5Qmp0QyxJQUFJLENBQUNpdEMsWUFBTCxHQUFvQixFQUFqRCxFQUFxRDtBQUNqRGp0QyxZQUFJLENBQUNrdEMsV0FBTCxJQUFvQmx0QyxJQUFJLENBQUNpdEMsWUFBTCxHQUFvQixFQUFwQixHQUF5QixDQUF6QixHQUE2QixDQUFDLENBQWxEO0FBQ0FqdEMsWUFBSSxDQUFDaXRDLFlBQUwsR0FBb0IsQ0FBQ2p0QyxJQUFJLENBQUNpdEMsWUFBTCxHQUFvQixFQUFyQixJQUEyQixFQUEvQztBQUNBYyxvQkFBWSxDQUFDLGNBQUQsQ0FBWjtBQUNBOEQsd0JBQWdCO0FBQ25COztBQUNEYyxlQUFTO0FBQ1Q1RSxrQkFBWSxDQUFDLGVBQUQsQ0FBWjtBQUNBK0ksa0NBQTRCO0FBQy9COztBQUNELGFBQVMxSyxLQUFULENBQWVzTCxrQkFBZixFQUFtQ0MsU0FBbkMsRUFBOEM7QUFDMUMsVUFBSUQsa0JBQWtCLEtBQUssS0FBSyxDQUFoQyxFQUFtQztBQUFFQSwwQkFBa0IsR0FBRyxJQUFyQjtBQUE0Qjs7QUFDakUsVUFBSUMsU0FBUyxLQUFLLEtBQUssQ0FBdkIsRUFBMEI7QUFBRUEsaUJBQVMsR0FBRyxJQUFaO0FBQW1COztBQUMvQzMzQyxVQUFJLENBQUM4SyxLQUFMLENBQVdoUixLQUFYLEdBQW1CLEVBQW5CO0FBQ0EsVUFBSWtHLElBQUksQ0FBQ2lpQyxRQUFMLEtBQWtCMWIsU0FBdEIsRUFDSXZtQixJQUFJLENBQUNpaUMsUUFBTCxDQUFjbm9DLEtBQWQsR0FBc0IsRUFBdEI7QUFDSixVQUFJa0csSUFBSSxDQUFDNDNDLFdBQUwsS0FBcUJyeEIsU0FBekIsRUFDSXZtQixJQUFJLENBQUM0M0MsV0FBTCxDQUFpQjk5QyxLQUFqQixHQUF5QixFQUF6QjtBQUNKa0csVUFBSSxDQUFDK2QsYUFBTCxHQUFxQixFQUFyQjtBQUNBL2QsVUFBSSxDQUFDMnRDLHFCQUFMLEdBQTZCcG5CLFNBQTdCOztBQUNBLFVBQUlveEIsU0FBUyxLQUFLLElBQWxCLEVBQXdCO0FBQ3BCMzNDLFlBQUksQ0FBQ2t0QyxXQUFMLEdBQW1CbHRDLElBQUksQ0FBQzYzQyxZQUFMLENBQWtCeHVCLFdBQWxCLEVBQW5CO0FBQ0FycEIsWUFBSSxDQUFDaXRDLFlBQUwsR0FBb0JqdEMsSUFBSSxDQUFDNjNDLFlBQUwsQ0FBa0IvdEIsUUFBbEIsRUFBcEI7QUFDSDs7QUFDRCxVQUFJOXBCLElBQUksQ0FBQytvQyxNQUFMLENBQVl6eUIsVUFBWixLQUEyQixJQUEvQixFQUFxQztBQUNqQyxZQUFJdXlCLEVBQUUsR0FBR2tHLGVBQWUsRUFBeEI7QUFBQSxZQUE0QjNwQyxLQUFLLEdBQUd5akMsRUFBRSxDQUFDempDLEtBQXZDO0FBQUEsWUFBOENJLE9BQU8sR0FBR3FqQyxFQUFFLENBQUNyakMsT0FBM0Q7QUFBQSxZQUFvRW9XLE9BQU8sR0FBR2l0QixFQUFFLENBQUNqdEIsT0FBakY7O0FBQ0FzbkIsZ0JBQVEsQ0FBQzk5QixLQUFELEVBQVFJLE9BQVIsRUFBaUJvVyxPQUFqQixDQUFSO0FBQ0g7O0FBQ0Q1YixVQUFJLENBQUMyc0MsTUFBTDtBQUNBLFVBQUkrSyxrQkFBSixFQUNJO0FBQ0EzSixvQkFBWSxDQUFDLFVBQUQsQ0FBWjtBQUNQOztBQUNELGFBQVMxQixLQUFULEdBQWlCO0FBQ2Jyc0MsVUFBSSxDQUFDb3RDLE1BQUwsR0FBYyxLQUFkOztBQUNBLFVBQUksQ0FBQ3B0QyxJQUFJLENBQUNtcEMsUUFBVixFQUFvQjtBQUNoQixZQUFJbnBDLElBQUksQ0FBQ2t1QyxpQkFBTCxLQUEyQjNuQixTQUEvQixFQUEwQztBQUN0Q3ZtQixjQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJ0SSxTQUF2QixDQUFpQ0UsTUFBakMsQ0FBd0MsTUFBeEM7QUFDSDs7QUFDRCxZQUFJOWxDLElBQUksQ0FBQ3NmLE1BQUwsS0FBZ0JpSCxTQUFwQixFQUErQjtBQUMzQnZtQixjQUFJLENBQUNzZixNQUFMLENBQVlzbUIsU0FBWixDQUFzQkUsTUFBdEIsQ0FBNkIsUUFBN0I7QUFDSDtBQUNKOztBQUNEaUksa0JBQVksQ0FBQyxTQUFELENBQVo7QUFDSDs7QUFDRCxhQUFTeEIsT0FBVCxHQUFtQjtBQUNmLFVBQUl2c0MsSUFBSSxDQUFDK29DLE1BQUwsS0FBZ0J4aUIsU0FBcEIsRUFDSXduQixZQUFZLENBQUMsV0FBRCxDQUFaOztBQUNKLFdBQUssSUFBSXQwQyxDQUFDLEdBQUd1RyxJQUFJLENBQUMwckMsU0FBTCxDQUFlcnBDLE1BQTVCLEVBQW9DNUksQ0FBQyxFQUFyQyxHQUEwQztBQUN0QyxZQUFJOHpCLENBQUMsR0FBR3Z0QixJQUFJLENBQUMwckMsU0FBTCxDQUFlanlDLENBQWYsQ0FBUjtBQUNBOHpCLFNBQUMsQ0FBQ2dlLE9BQUYsQ0FBVXVNLG1CQUFWLENBQThCdnFCLENBQUMsQ0FBQzlpQixLQUFoQyxFQUF1QzhpQixDQUFDLENBQUM5USxPQUF6QyxFQUFrRDhRLENBQUMsQ0FBQzdsQixPQUFwRDtBQUNIOztBQUNEMUgsVUFBSSxDQUFDMHJDLFNBQUwsR0FBaUIsRUFBakI7O0FBQ0EsVUFBSTFyQyxJQUFJLENBQUM0M0MsV0FBVCxFQUFzQjtBQUNsQixZQUFJNTNDLElBQUksQ0FBQzQzQyxXQUFMLENBQWlCdFIsVUFBckIsRUFDSXRtQyxJQUFJLENBQUM0M0MsV0FBTCxDQUFpQnRSLFVBQWpCLENBQTRCRixXQUE1QixDQUF3Q3BtQyxJQUFJLENBQUM0M0MsV0FBN0M7QUFDSjUzQyxZQUFJLENBQUM0M0MsV0FBTCxHQUFtQnJ4QixTQUFuQjtBQUNILE9BSkQsTUFLSyxJQUFJdm1CLElBQUksQ0FBQ2t1QyxpQkFBTCxJQUEwQmx1QyxJQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUI1SCxVQUFyRCxFQUFpRTtBQUNsRSxZQUFJdG1DLElBQUksQ0FBQytvQyxNQUFMLENBQVlsRSxNQUFaLElBQXNCN2tDLElBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QjVILFVBQWpELEVBQTZEO0FBQ3pELGNBQUlyakIsT0FBTyxHQUFHampCLElBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QjVILFVBQXJDO0FBQ0FyakIsaUJBQU8sQ0FBQzgwQixTQUFSLElBQXFCOTBCLE9BQU8sQ0FBQ21qQixXQUFSLENBQW9CbmpCLE9BQU8sQ0FBQzgwQixTQUE1QixDQUFyQjs7QUFDQSxjQUFJOTBCLE9BQU8sQ0FBQ3FqQixVQUFaLEVBQXdCO0FBQ3BCLG1CQUFPcmpCLE9BQU8sQ0FBQ2tqQixVQUFmO0FBQ0lsakIscUJBQU8sQ0FBQ3FqQixVQUFSLENBQW1CME0sWUFBbkIsQ0FBZ0MvdkIsT0FBTyxDQUFDa2pCLFVBQXhDLEVBQW9EbGpCLE9BQXBEO0FBREo7O0FBRUFBLG1CQUFPLENBQUNxakIsVUFBUixDQUFtQkYsV0FBbkIsQ0FBK0JuakIsT0FBL0I7QUFDSDtBQUNKLFNBUkQsTUFVSWpqQixJQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUI1SCxVQUF2QixDQUFrQ0YsV0FBbEMsQ0FBOENwbUMsSUFBSSxDQUFDa3VDLGlCQUFuRDtBQUNQOztBQUNELFVBQUlsdUMsSUFBSSxDQUFDaWlDLFFBQVQsRUFBbUI7QUFDZmppQyxZQUFJLENBQUM4SyxLQUFMLENBQVdsTCxJQUFYLEdBQWtCLE1BQWxCO0FBQ0EsWUFBSUksSUFBSSxDQUFDaWlDLFFBQUwsQ0FBY3FFLFVBQWxCLEVBQ0l0bUMsSUFBSSxDQUFDaWlDLFFBQUwsQ0FBY3FFLFVBQWQsQ0FBeUJGLFdBQXpCLENBQXFDcG1DLElBQUksQ0FBQ2lpQyxRQUExQztBQUNKLGVBQU9qaUMsSUFBSSxDQUFDaWlDLFFBQVo7QUFDSDs7QUFDRCxVQUFJamlDLElBQUksQ0FBQzhLLEtBQVQsRUFBZ0I7QUFDWjlLLFlBQUksQ0FBQzhLLEtBQUwsQ0FBV2xMLElBQVgsR0FBa0JJLElBQUksQ0FBQzhLLEtBQUwsQ0FBV2t0QyxLQUE3QjtBQUNBaDRDLFlBQUksQ0FBQzhLLEtBQUwsQ0FBVzg2QixTQUFYLENBQXFCRSxNQUFyQixDQUE0QixpQkFBNUI7QUFDQTlsQyxZQUFJLENBQUM4SyxLQUFMLENBQVdtdEMsZUFBWCxDQUEyQixVQUEzQjtBQUNIOztBQUNELE9BQ0ksZ0JBREosRUFFSSx1QkFGSixFQUdJLHFCQUhKLEVBSUkscUJBSkosRUFLSSxzQkFMSixFQU1JLHNCQU5KLEVBT0ksVUFQSixFQVFJLFFBUkosRUFTSSxrQkFUSixFQVVJLGdCQVZKLEVBV0ksZ0JBWEosRUFZSSxNQVpKLEVBYUksZUFiSixFQWNJLFFBZEosRUFlSSxrQkFmSixFQWdCSSxnQkFoQkosRUFpQkksWUFqQkosRUFrQkksVUFsQkosRUFtQkksZUFuQkosRUFvQkksbUJBcEJKLEVBcUJJLGtCQXJCSixFQXNCSSxjQXRCSixFQXVCSSxjQXZCSixFQXdCSSx5QkF4QkosRUF5QkkscUJBekJKLEVBMEJJLG9CQTFCSixFQTJCSSx3QkEzQkosRUE0Qkksa0JBNUJKLEVBNkJJLFFBN0JKLEVBOEJFeE4sT0E5QkYsQ0E4QlUsVUFBVXBmLENBQVYsRUFBYTtBQUNuQixZQUFJO0FBQ0EsaUJBQU9yckIsSUFBSSxDQUFDcXJCLENBQUQsQ0FBWDtBQUNILFNBRkQsQ0FHQSxPQUFPMGMsQ0FBUCxFQUFVLENBQUc7QUFDaEIsT0FuQ0Q7QUFvQ0g7O0FBQ0QsYUFBU21RLGNBQVQsQ0FBd0J4UyxJQUF4QixFQUE4QjtBQUMxQixVQUFJMWxDLElBQUksQ0FBQytvQyxNQUFMLENBQVkrSixRQUFaLElBQXdCOXlDLElBQUksQ0FBQytvQyxNQUFMLENBQVkrSixRQUFaLENBQXFCZixRQUFyQixDQUE4QnJNLElBQTlCLENBQTVCLEVBQ0ksT0FBTyxJQUFQO0FBQ0osYUFBTzFsQyxJQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUI2RCxRQUF2QixDQUFnQ3JNLElBQWhDLENBQVA7QUFDSDs7QUFDRCxhQUFTc0wsYUFBVCxDQUF1QjVwQyxDQUF2QixFQUEwQjtBQUN0QixVQUFJcEgsSUFBSSxDQUFDb3RDLE1BQUwsSUFBZSxDQUFDcHRDLElBQUksQ0FBQytvQyxNQUFMLENBQVl4RixNQUFoQyxFQUF3QztBQUNwQyxZQUFJNFUsYUFBYSxHQUFHcFIsY0FBYyxDQUFDMy9CLENBQUQsQ0FBbEM7QUFDQSxZQUFJZ3hDLGlCQUFpQixHQUFHRixjQUFjLENBQUNDLGFBQUQsQ0FBdEM7QUFDQSxZQUFJRSxPQUFPLEdBQUdGLGFBQWEsS0FBS240QyxJQUFJLENBQUM4SyxLQUF2QixJQUNWcXRDLGFBQWEsS0FBS240QyxJQUFJLENBQUNpaUMsUUFEYixJQUVWamlDLElBQUksQ0FBQ3VyQyxPQUFMLENBQWF3RyxRQUFiLENBQXNCb0csYUFBdEIsQ0FGVSxJQUdWO0FBQ0E7QUFDQy93QyxTQUFDLENBQUM2L0IsSUFBRixJQUNHNy9CLENBQUMsQ0FBQzYvQixJQUFGLENBQU8vZSxPQURWLEtBRUksQ0FBQzlnQixDQUFDLENBQUM2L0IsSUFBRixDQUFPL2UsT0FBUCxDQUFlbG9CLElBQUksQ0FBQzhLLEtBQXBCLENBQUQsSUFDRyxDQUFDMUQsQ0FBQyxDQUFDNi9CLElBQUYsQ0FBTy9lLE9BQVAsQ0FBZWxvQixJQUFJLENBQUNpaUMsUUFBcEIsQ0FIUixDQUxMO0FBU0EsWUFBSXFXLFNBQVMsR0FBR2x4QyxDQUFDLENBQUN4SCxJQUFGLEtBQVcsTUFBWCxHQUNWeTRDLE9BQU8sSUFDTGp4QyxDQUFDLENBQUNteEMsYUFESixJQUVFLENBQUNMLGNBQWMsQ0FBQzl3QyxDQUFDLENBQUNteEMsYUFBSCxDQUhQLEdBSVYsQ0FBQ0YsT0FBRCxJQUNFLENBQUNELGlCQURILElBRUUsQ0FBQ0YsY0FBYyxDQUFDOXdDLENBQUMsQ0FBQ214QyxhQUFILENBTnZCO0FBT0EsWUFBSUMsU0FBUyxHQUFHLENBQUN4NEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpGLG9CQUFaLENBQWlDbVYsSUFBakMsQ0FBc0MsVUFBVS9TLElBQVYsRUFBZ0I7QUFDbkUsaUJBQU9BLElBQUksQ0FBQ3FNLFFBQUwsQ0FBY29HLGFBQWQsQ0FBUDtBQUNILFNBRmdCLENBQWpCOztBQUdBLFlBQUlHLFNBQVMsSUFBSUUsU0FBakIsRUFBNEI7QUFDeEIsY0FBSXg0QyxJQUFJLENBQUNxeEMsYUFBTCxLQUF1QjlxQixTQUF2QixJQUNBdm1CLElBQUksQ0FBQ3V2QyxhQUFMLEtBQXVCaHBCLFNBRHZCLElBRUF2bUIsSUFBSSxDQUFDc3ZDLFdBQUwsS0FBcUIvb0IsU0FGckIsSUFHQXZtQixJQUFJLENBQUM4SyxLQUFMLENBQVdoUixLQUFYLEtBQXFCLEVBSHJCLElBSUFrRyxJQUFJLENBQUM4SyxLQUFMLENBQVdoUixLQUFYLEtBQXFCeXNCLFNBSnpCLEVBSW9DO0FBQ2hDc29CLHNCQUFVO0FBQ2I7O0FBQ0Q3dUMsY0FBSSxDQUFDcXNDLEtBQUw7O0FBQ0EsY0FBSXJzQyxJQUFJLENBQUMrb0MsTUFBTCxJQUNBL29DLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BRHJCLElBRUF6akMsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQjFiLE1BQW5CLEtBQThCLENBRmxDLEVBRXFDO0FBQ2pDckMsZ0JBQUksQ0FBQ29zQyxLQUFMLENBQVcsS0FBWDtBQUNBcHNDLGdCQUFJLENBQUMyc0MsTUFBTDtBQUNIO0FBQ0o7QUFDSjtBQUNKOztBQUNELGFBQVNSLFVBQVQsQ0FBb0J1TSxPQUFwQixFQUE2QjtBQUN6QixVQUFJLENBQUNBLE9BQUQsSUFDQzE0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosSUFBdUJtN0IsT0FBTyxHQUFHMTRDLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixDQUFvQjhMLFdBQXBCLEVBRGxDLElBRUNycEIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLElBQXVCbzdCLE9BQU8sR0FBRzE0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosQ0FBb0IrTCxXQUFwQixFQUZ0QyxFQUdJO0FBQ0osVUFBSXN2QixVQUFVLEdBQUdELE9BQWpCO0FBQUEsVUFBMEJFLFNBQVMsR0FBRzU0QyxJQUFJLENBQUNrdEMsV0FBTCxLQUFxQnlMLFVBQTNEO0FBQ0EzNEMsVUFBSSxDQUFDa3RDLFdBQUwsR0FBbUJ5TCxVQUFVLElBQUkzNEMsSUFBSSxDQUFDa3RDLFdBQXRDOztBQUNBLFVBQUlsdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLElBQ0F0ZCxJQUFJLENBQUNrdEMsV0FBTCxLQUFxQmx0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosQ0FBb0IrTCxXQUFwQixFQUR6QixFQUM0RDtBQUN4RHJwQixZQUFJLENBQUNpdEMsWUFBTCxHQUFvQnJzQyxJQUFJLENBQUM4SSxHQUFMLENBQVMxSixJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosQ0FBb0J3TSxRQUFwQixFQUFULEVBQXlDOXBCLElBQUksQ0FBQ2l0QyxZQUE5QyxDQUFwQjtBQUNILE9BSEQsTUFJSyxJQUFJanRDLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixJQUNMdmQsSUFBSSxDQUFDa3RDLFdBQUwsS0FBcUJsdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLENBQW9COEwsV0FBcEIsRUFEcEIsRUFDdUQ7QUFDeERycEIsWUFBSSxDQUFDaXRDLFlBQUwsR0FBb0Jyc0MsSUFBSSxDQUFDK0ksR0FBTCxDQUFTM0osSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLENBQW9CdU0sUUFBcEIsRUFBVCxFQUF5QzlwQixJQUFJLENBQUNpdEMsWUFBOUMsQ0FBcEI7QUFDSDs7QUFDRCxVQUFJMkwsU0FBSixFQUFlO0FBQ1g1NEMsWUFBSSxDQUFDMnNDLE1BQUw7QUFDQW9CLG9CQUFZLENBQUMsY0FBRCxDQUFaO0FBQ0E4RCx3QkFBZ0I7QUFDbkI7QUFDSjs7QUFDRCxhQUFTckYsU0FBVCxDQUFtQm5vQyxJQUFuQixFQUF5QnFsQyxRQUF6QixFQUFtQztBQUMvQixVQUFJQSxRQUFRLEtBQUssS0FBSyxDQUF0QixFQUF5QjtBQUFFQSxnQkFBUSxHQUFHLElBQVg7QUFBa0I7O0FBQzdDLFVBQUltUCxXQUFXLEdBQUc3NEMsSUFBSSxDQUFDeWEsU0FBTCxDQUFlcFcsSUFBZixFQUFxQmtpQixTQUFyQixFQUFnQ21qQixRQUFoQyxDQUFsQixDQUYrQixDQUU4Qjs7QUFDN0QsVUFBSzFwQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosSUFDRHM3QixXQURDLElBRURuTyxZQUFZLENBQUNtTyxXQUFELEVBQWM3NEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUExQixFQUFtQ21zQixRQUFRLEtBQUtuakIsU0FBYixHQUF5Qm1qQixRQUF6QixHQUFvQyxDQUFDMXBDLElBQUksQ0FBQzJ2QyxjQUE3RSxDQUFaLEdBQTJHLENBRjNHLElBR0MzdkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLElBQ0d1N0IsV0FESCxJQUVHbk8sWUFBWSxDQUFDbU8sV0FBRCxFQUFjNzRDLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBMUIsRUFBbUNvc0IsUUFBUSxLQUFLbmpCLFNBQWIsR0FBeUJtakIsUUFBekIsR0FBb0MsQ0FBQzFwQyxJQUFJLENBQUM4dkMsY0FBN0UsQ0FBWixHQUEyRyxDQUxuSCxFQU1JLE9BQU8sS0FBUDtBQUNKLFVBQUk5dkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxHLE1BQVosQ0FBbUJ4Z0MsTUFBbkIsS0FBOEIsQ0FBOUIsSUFBbUNyQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkcsT0FBWixDQUFvQnZnQyxNQUFwQixLQUErQixDQUF0RSxFQUNJLE9BQU8sSUFBUDtBQUNKLFVBQUl3MkMsV0FBVyxLQUFLdHlCLFNBQXBCLEVBQ0ksT0FBTyxLQUFQO0FBQ0osVUFBSTJlLElBQUksR0FBR2xsQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbEcsTUFBWixDQUFtQnhnQyxNQUFuQixHQUE0QixDQUF2QztBQUFBLFVBQTBDMEIsS0FBSyxHQUFHbWhDLElBQUksR0FBR2xsQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbEcsTUFBZixHQUF3QjdpQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkcsT0FBMUY7O0FBQ0EsV0FBSyxJQUFJbnBDLENBQUMsR0FBRyxDQUFSLEVBQVdrcUIsQ0FBQyxHQUFHLEtBQUssQ0FBekIsRUFBNEJscUIsQ0FBQyxHQUFHc0ssS0FBSyxDQUFDMUIsTUFBdEMsRUFBOEM1SSxDQUFDLEVBQS9DLEVBQW1EO0FBQy9Da3FCLFNBQUMsR0FBRzVmLEtBQUssQ0FBQ3RLLENBQUQsQ0FBVDtBQUNBLFlBQUksT0FBT2txQixDQUFQLEtBQWEsVUFBYixJQUNBQSxDQUFDLENBQUNrMUIsV0FBRCxDQURMLENBQ21CO0FBRG5CLFVBR0ksT0FBTzNULElBQVAsQ0FISixLQUlLLElBQUl2aEIsQ0FBQyxZQUFZL2QsSUFBYixJQUNMaXpDLFdBQVcsS0FBS3R5QixTQURYLElBRUw1QyxDQUFDLENBQUNxQixPQUFGLE9BQWdCNnpCLFdBQVcsQ0FBQzd6QixPQUFaLEVBRmYsRUFHRDtBQUNBLGlCQUFPa2dCLElBQVAsQ0FKQyxLQUtBLElBQUksT0FBT3ZoQixDQUFQLEtBQWEsUUFBYixJQUF5QmsxQixXQUFXLEtBQUt0eUIsU0FBN0MsRUFBd0Q7QUFDekQ7QUFDQSxjQUFJbk8sTUFBTSxHQUFHcFksSUFBSSxDQUFDeWEsU0FBTCxDQUFla0osQ0FBZixFQUFrQjRDLFNBQWxCLEVBQTZCLElBQTdCLENBQWI7QUFDQSxpQkFBT25PLE1BQU0sSUFBSUEsTUFBTSxDQUFDNE0sT0FBUCxPQUFxQjZ6QixXQUFXLENBQUM3ekIsT0FBWixFQUEvQixHQUNEa2dCLElBREMsR0FFRCxDQUFDQSxJQUZQO0FBR0gsU0FOSSxNQU9BLEtBQ0w7QUFDQSxnQkFBT3ZoQixDQUFQLE1BQWEsUUFBYixJQUNJazFCLFdBQVcsS0FBS3R5QixTQURwQixJQUVJNUMsQ0FBQyxDQUFDbTFCLElBRk4sSUFHSW4xQixDQUFDLENBQUNvMUIsRUFITixJQUlJRixXQUFXLENBQUM3ekIsT0FBWixNQUF5QnJCLENBQUMsQ0FBQ20xQixJQUFGLENBQU85ekIsT0FBUCxFQUo3QixJQUtJNnpCLFdBQVcsQ0FBQzd6QixPQUFaLE1BQXlCckIsQ0FBQyxDQUFDbzFCLEVBQUYsQ0FBSy96QixPQUFMLEVBUHhCLEVBUUQsT0FBT2tnQixJQUFQO0FBQ1A7O0FBQ0QsYUFBTyxDQUFDQSxJQUFSO0FBQ0g7O0FBQ0QsYUFBUzBQLFFBQVQsQ0FBa0JsUCxJQUFsQixFQUF3QjtBQUNwQixVQUFJMWxDLElBQUksQ0FBQ3N1QyxhQUFMLEtBQXVCL25CLFNBQTNCLEVBQ0ksT0FBUW1mLElBQUksQ0FBQ0MsU0FBTCxDQUFlemQsT0FBZixDQUF1QixRQUF2QixNQUFxQyxDQUFDLENBQXRDLElBQ0p3ZCxJQUFJLENBQUNDLFNBQUwsQ0FBZXpkLE9BQWYsQ0FBdUIsb0JBQXZCLE1BQWlELENBQUMsQ0FEOUMsSUFFSmxvQixJQUFJLENBQUNzdUMsYUFBTCxDQUFtQnlELFFBQW5CLENBQTRCck0sSUFBNUIsQ0FGSjtBQUdKLGFBQU8sS0FBUDtBQUNIOztBQUNELGFBQVM4TCxNQUFULENBQWdCcHFDLENBQWhCLEVBQW1CO0FBQ2YsVUFBSWl4QyxPQUFPLEdBQUdqeEMsQ0FBQyxDQUFDbE4sTUFBRixLQUFhOEYsSUFBSSxDQUFDc2YsTUFBaEM7O0FBQ0EsVUFBSSs0QixPQUFPLElBQ1AsRUFBRWp4QyxDQUFDLENBQUNteEMsYUFBRixJQUFtQkwsY0FBYyxDQUFDOXdDLENBQUMsQ0FBQ214QyxhQUFILENBQW5DLENBREosRUFDMkQ7QUFDdkR2NEMsWUFBSSxDQUFDbWpDLE9BQUwsQ0FBYW5qQyxJQUFJLENBQUNzZixNQUFMLENBQVl4bEIsS0FBekIsRUFBZ0MsSUFBaEMsRUFBc0NzTixDQUFDLENBQUNsTixNQUFGLEtBQWE4RixJQUFJLENBQUNpaUMsUUFBbEIsR0FDaENqaUMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWS9HLFNBRG9CLEdBRWhDaGlDLElBQUksQ0FBQytvQyxNQUFMLENBQVkvckIsVUFGbEI7QUFHSDtBQUNKOztBQUNELGFBQVNnbkIsU0FBVCxDQUFtQjU4QixDQUFuQixFQUFzQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQUlncEMsV0FBVyxHQUFHckosY0FBYyxDQUFDMy9CLENBQUQsQ0FBaEM7QUFDQSxVQUFJaXhDLE9BQU8sR0FBR3I0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZN3JCLElBQVosR0FDUnF1QixPQUFPLENBQUN3RyxRQUFSLENBQWlCM0IsV0FBakIsQ0FEUSxHQUVSQSxXQUFXLEtBQUtwd0MsSUFBSSxDQUFDc2YsTUFGM0I7QUFHQSxVQUFJbkMsVUFBVSxHQUFHbmQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTVyQixVQUE3QjtBQUNBLFVBQUk2N0IsWUFBWSxHQUFHaDVDLElBQUksQ0FBQ290QyxNQUFMLEtBQWdCLENBQUNqd0IsVUFBRCxJQUFlLENBQUNrN0IsT0FBaEMsQ0FBbkI7QUFDQSxVQUFJWSxrQkFBa0IsR0FBR2o1QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeEYsTUFBWixJQUFzQjhVLE9BQXRCLElBQWlDLENBQUNsN0IsVUFBM0Q7O0FBQ0EsVUFBSS9WLENBQUMsQ0FBQ21aLE9BQUYsS0FBYyxFQUFkLElBQW9CODNCLE9BQXhCLEVBQWlDO0FBQzdCLFlBQUlsN0IsVUFBSixFQUFnQjtBQUNabmQsY0FBSSxDQUFDbWpDLE9BQUwsQ0FBYW5qQyxJQUFJLENBQUNzZixNQUFMLENBQVl4bEIsS0FBekIsRUFBZ0MsSUFBaEMsRUFBc0NzMkMsV0FBVyxLQUFLcHdDLElBQUksQ0FBQ2lpQyxRQUFyQixHQUNoQ2ppQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZL0csU0FEb0IsR0FFaENoaUMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWS9yQixVQUZsQjtBQUdBLGlCQUFPb3pCLFdBQVcsQ0FBQzhJLElBQVosRUFBUDtBQUNILFNBTEQsTUFNSztBQUNEbDVDLGNBQUksQ0FBQzBzQyxJQUFMO0FBQ0g7QUFDSixPQVZELE1BV0ssSUFBSXdMLGNBQWMsQ0FBQzlILFdBQUQsQ0FBZCxJQUNMNEksWUFESyxJQUVMQyxrQkFGQyxFQUVtQjtBQUNwQixZQUFJRSxTQUFTLEdBQUcsQ0FBQyxDQUFDbjVDLElBQUksQ0FBQ3F4QyxhQUFQLElBQ1pyeEMsSUFBSSxDQUFDcXhDLGFBQUwsQ0FBbUJVLFFBQW5CLENBQTRCM0IsV0FBNUIsQ0FESjs7QUFFQSxnQkFBUWhwQyxDQUFDLENBQUNtWixPQUFWO0FBQ0ksZUFBSyxFQUFMO0FBQ0ksZ0JBQUk0NEIsU0FBSixFQUFlO0FBQ1gveEMsZUFBQyxDQUFDZ3lDLGNBQUY7QUFDQXZLLHdCQUFVO0FBQ1Z3SywyQkFBYTtBQUNoQixhQUpELE1BTUlqSSxVQUFVLENBQUNocUMsQ0FBRCxDQUFWOztBQUNKOztBQUNKLGVBQUssRUFBTDtBQUFTO0FBQ0xBLGFBQUMsQ0FBQ2d5QyxjQUFGO0FBQ0FDLHlCQUFhO0FBQ2I7O0FBQ0osZUFBSyxDQUFMO0FBQ0EsZUFBSyxFQUFMO0FBQ0ksZ0JBQUloQixPQUFPLElBQUksQ0FBQ3I0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZNXJCLFVBQTVCLEVBQXdDO0FBQ3BDL1YsZUFBQyxDQUFDZ3lDLGNBQUY7QUFDQXA1QyxrQkFBSSxDQUFDb3NDLEtBQUw7QUFDSDs7QUFDRDs7QUFDSixlQUFLLEVBQUw7QUFDQSxlQUFLLEVBQUw7QUFDSSxnQkFBSSxDQUFDK00sU0FBRCxJQUFjLENBQUNkLE9BQW5CLEVBQTRCO0FBQ3hCanhDLGVBQUMsQ0FBQ2d5QyxjQUFGOztBQUNBLGtCQUFJcDVDLElBQUksQ0FBQ3N1QyxhQUFMLEtBQXVCL25CLFNBQXZCLEtBQ0NwSixVQUFVLEtBQUssS0FBZixJQUNJalcsUUFBUSxDQUFDMnRDLGFBQVQsSUFBMEJELFFBQVEsQ0FBQzF0QyxRQUFRLENBQUMydEMsYUFBVixDQUZ2QyxDQUFKLEVBRXVFO0FBQ25FLG9CQUFJeUUsT0FBTyxHQUFHbHlDLENBQUMsQ0FBQ21aLE9BQUYsS0FBYyxFQUFkLEdBQW1CLENBQW5CLEdBQXVCLENBQUMsQ0FBdEM7QUFDQSxvQkFBSSxDQUFDblosQ0FBQyxDQUFDbXlDLE9BQVAsRUFDSTdFLFVBQVUsQ0FBQ251QixTQUFELEVBQVkreUIsT0FBWixDQUFWLENBREosS0FFSztBQUNEbHlDLG1CQUFDLENBQUNveUMsZUFBRjtBQUNBdE4sNkJBQVcsQ0FBQ29OLE9BQUQsQ0FBWDtBQUNBNUUsNEJBQVUsQ0FBQ1gsb0JBQW9CLENBQUMsQ0FBRCxDQUFyQixFQUEwQixDQUExQixDQUFWO0FBQ0g7QUFDSjtBQUNKLGFBZEQsTUFlSyxJQUFJL3pDLElBQUksQ0FBQ3N2QyxXQUFULEVBQ0R0dkMsSUFBSSxDQUFDc3ZDLFdBQUwsQ0FBaUJ3RSxLQUFqQjs7QUFDSjs7QUFDSixlQUFLLEVBQUw7QUFDQSxlQUFLLEVBQUw7QUFDSTFzQyxhQUFDLENBQUNneUMsY0FBRjtBQUNBLGdCQUFJL0ksS0FBSyxHQUFHanBDLENBQUMsQ0FBQ21aLE9BQUYsS0FBYyxFQUFkLEdBQW1CLENBQW5CLEdBQXVCLENBQUMsQ0FBcEM7O0FBQ0EsZ0JBQUt2Z0IsSUFBSSxDQUFDc3VDLGFBQUwsSUFDRDhCLFdBQVcsQ0FBQ2tELEVBQVosS0FBbUIvc0IsU0FEbkIsSUFFQTZwQixXQUFXLEtBQUtwd0MsSUFBSSxDQUFDOEssS0FGckIsSUFHQXNsQyxXQUFXLEtBQUtwd0MsSUFBSSxDQUFDaWlDLFFBSHpCLEVBR21DO0FBQy9CLGtCQUFJNzZCLENBQUMsQ0FBQ215QyxPQUFOLEVBQWU7QUFDWG55QyxpQkFBQyxDQUFDb3lDLGVBQUY7QUFDQXJOLDBCQUFVLENBQUNuc0MsSUFBSSxDQUFDa3RDLFdBQUwsR0FBbUJtRCxLQUFwQixDQUFWO0FBQ0FxRSwwQkFBVSxDQUFDWCxvQkFBb0IsQ0FBQyxDQUFELENBQXJCLEVBQTBCLENBQTFCLENBQVY7QUFDSCxlQUpELE1BS0ssSUFBSSxDQUFDb0YsU0FBTCxFQUNEekUsVUFBVSxDQUFDbnVCLFNBQUQsRUFBWThwQixLQUFLLEdBQUcsQ0FBcEIsQ0FBVjtBQUNQLGFBWEQsTUFZSyxJQUFJRCxXQUFXLEtBQUtwd0MsSUFBSSxDQUFDNjJDLGtCQUF6QixFQUE2QztBQUM5QzFLLHdCQUFVLENBQUNuc0MsSUFBSSxDQUFDa3RDLFdBQUwsR0FBbUJtRCxLQUFwQixDQUFWO0FBQ0gsYUFGSSxNQUdBLElBQUlyd0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXp5QixVQUFoQixFQUE0QjtBQUM3QixrQkFBSSxDQUFDNmlDLFNBQUQsSUFBY241QyxJQUFJLENBQUNzdkMsV0FBdkIsRUFDSXR2QyxJQUFJLENBQUNzdkMsV0FBTCxDQUFpQndFLEtBQWpCO0FBQ0pqRix3QkFBVSxDQUFDem5DLENBQUQsQ0FBVjs7QUFDQXBILGtCQUFJLENBQUNtdkMsZ0JBQUw7QUFDSDs7QUFDRDs7QUFDSixlQUFLLENBQUw7QUFDSSxnQkFBSWdLLFNBQUosRUFBZTtBQUNYLGtCQUFJTSxLQUFLLEdBQUcsQ0FDUno1QyxJQUFJLENBQUNzdkMsV0FERyxFQUVSdHZDLElBQUksQ0FBQ3V2QyxhQUZHLEVBR1J2dkMsSUFBSSxDQUFDd3ZDLGFBSEcsRUFJUnh2QyxJQUFJLENBQUNnZixJQUpHLEVBTVBnSyxNQU5PLENBTUFocEIsSUFBSSxDQUFDMnJDLGNBTkwsRUFPUHgyQixNQVBPLENBT0EsVUFBVStULENBQVYsRUFBYTtBQUFFLHVCQUFPQSxDQUFQO0FBQVcsZUFQMUIsQ0FBWjtBQVFBLGtCQUFJenZCLENBQUMsR0FBR2dnRCxLQUFLLENBQUN2eEIsT0FBTixDQUFja29CLFdBQWQsQ0FBUjs7QUFDQSxrQkFBSTMyQyxDQUFDLEtBQUssQ0FBQyxDQUFYLEVBQWM7QUFDVixvQkFBSVMsTUFBTSxHQUFHdS9DLEtBQUssQ0FBQ2hnRCxDQUFDLElBQUkyTixDQUFDLENBQUNzeUMsUUFBRixHQUFhLENBQUMsQ0FBZCxHQUFrQixDQUF0QixDQUFGLENBQWxCO0FBQ0F0eUMsaUJBQUMsQ0FBQ2d5QyxjQUFGOztBQUNBLGlCQUFDbC9DLE1BQU0sSUFBSThGLElBQUksQ0FBQ3NmLE1BQWhCLEVBQXdCdzBCLEtBQXhCO0FBQ0g7QUFDSixhQWZELE1BZ0JLLElBQUksQ0FBQzl6QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZaHNCLFVBQWIsSUFDTC9jLElBQUksQ0FBQ3N1QyxhQURBLElBRUx0dUMsSUFBSSxDQUFDc3VDLGFBQUwsQ0FBbUJ5RCxRQUFuQixDQUE0QjNCLFdBQTVCLENBRkssSUFHTGhwQyxDQUFDLENBQUNzeUMsUUFIRCxFQUdXO0FBQ1p0eUMsZUFBQyxDQUFDZ3lDLGNBQUY7O0FBQ0FwNUMsa0JBQUksQ0FBQ3NmLE1BQUwsQ0FBWXcwQixLQUFaO0FBQ0g7O0FBQ0Q7QUEzRlI7QUE2Rkg7O0FBQ0QsVUFBSTl6QyxJQUFJLENBQUNnZixJQUFMLEtBQWN1SCxTQUFkLElBQTJCNnBCLFdBQVcsS0FBS3B3QyxJQUFJLENBQUNnZixJQUFwRCxFQUEwRDtBQUN0RCxnQkFBUTVYLENBQUMsQ0FBQ3pOLEdBQVY7QUFDSSxlQUFLcUcsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWpxQixJQUFWLENBQWUsQ0FBZixFQUFrQitILE1BQWxCLENBQXlCLENBQXpCLENBQUw7QUFDQSxlQUFLL21CLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVqcUIsSUFBVixDQUFlLENBQWYsRUFBa0IrSCxNQUFsQixDQUF5QixDQUF6QixFQUE0QnlLLFdBQTVCLEVBQUw7QUFDSXh4QixnQkFBSSxDQUFDZ2YsSUFBTCxDQUFVZ25CLFdBQVYsR0FBd0JobUMsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWpxQixJQUFWLENBQWUsQ0FBZixDQUF4QjtBQUNBa3dCLDhCQUFrQjtBQUNsQnRCLHVCQUFXO0FBQ1g7O0FBQ0osZUFBSzV0QyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZSxDQUFmLEVBQWtCK0gsTUFBbEIsQ0FBeUIsQ0FBekIsQ0FBTDtBQUNBLGVBQUsvbUIsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWpxQixJQUFWLENBQWUsQ0FBZixFQUFrQitILE1BQWxCLENBQXlCLENBQXpCLEVBQTRCeUssV0FBNUIsRUFBTDtBQUNJeHhCLGdCQUFJLENBQUNnZixJQUFMLENBQVVnbkIsV0FBVixHQUF3QmhtQyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZSxDQUFmLENBQXhCO0FBQ0Frd0IsOEJBQWtCO0FBQ2xCdEIsdUJBQVc7QUFDWDtBQVpSO0FBY0g7O0FBQ0QsVUFBSXlLLE9BQU8sSUFBSUgsY0FBYyxDQUFDOUgsV0FBRCxDQUE3QixFQUE0QztBQUN4Q3JDLG9CQUFZLENBQUMsV0FBRCxFQUFjM21DLENBQWQsQ0FBWjtBQUNIO0FBQ0o7O0FBQ0QsYUFBUzBwQyxXQUFULENBQXFCcEwsSUFBckIsRUFBMkI7QUFDdkIsVUFBSTFsQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsS0FBOEIsQ0FBOUIsSUFDQ3FqQyxJQUFJLEtBQ0EsQ0FBQ0EsSUFBSSxDQUFDRSxTQUFMLENBQWVtTSxRQUFmLENBQXdCLGVBQXhCLENBQUQsSUFDR3JNLElBQUksQ0FBQ0UsU0FBTCxDQUFlbU0sUUFBZixDQUF3QixvQkFBeEIsQ0FGSCxDQURULEVBSUk7QUFDSixVQUFJNEgsU0FBUyxHQUFHalUsSUFBSSxHQUNkQSxJQUFJLENBQUM2QixPQUFMLENBQWF2aUIsT0FBYixFQURjLEdBRWRobEIsSUFBSSxDQUFDd3VDLElBQUwsQ0FBVW9MLGlCQUFWLENBQTRCclMsT0FBNUIsQ0FBb0N2aUIsT0FBcEMsRUFGTjtBQUFBLFVBRXFENjBCLFdBQVcsR0FBRzc1QyxJQUFJLENBQUN5YSxTQUFMLENBQWV6YSxJQUFJLENBQUMrZCxhQUFMLENBQW1CLENBQW5CLENBQWYsRUFBc0N3SSxTQUF0QyxFQUFpRCxJQUFqRCxFQUF1RHZCLE9BQXZELEVBRm5FO0FBQUEsVUFFcUk4MEIsY0FBYyxHQUFHbDVDLElBQUksQ0FBQzhJLEdBQUwsQ0FBU2l3QyxTQUFULEVBQW9CMzVDLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIsQ0FBbkIsRUFBc0JpSCxPQUF0QixFQUFwQixDQUZ0SjtBQUFBLFVBRTRNKzBCLFlBQVksR0FBR241QyxJQUFJLENBQUMrSSxHQUFMLENBQVNnd0MsU0FBVCxFQUFvQjM1QyxJQUFJLENBQUMrZCxhQUFMLENBQW1CLENBQW5CLEVBQXNCaUgsT0FBdEIsRUFBcEIsQ0FGM047QUFHQSxVQUFJZzFCLGdCQUFnQixHQUFHLEtBQXZCO0FBQ0EsVUFBSUMsUUFBUSxHQUFHLENBQWY7QUFBQSxVQUFrQkMsUUFBUSxHQUFHLENBQTdCOztBQUNBLFdBQUssSUFBSTlZLENBQUMsR0FBRzBZLGNBQWIsRUFBNkIxWSxDQUFDLEdBQUcyWSxZQUFqQyxFQUErQzNZLENBQUMsSUFBSTZKLFFBQVEsQ0FBQ0MsR0FBN0QsRUFBa0U7QUFDOUQsWUFBSSxDQUFDc0IsU0FBUyxDQUFDLElBQUk1bUMsSUFBSixDQUFTdzdCLENBQVQsQ0FBRCxFQUFjLElBQWQsQ0FBZCxFQUFtQztBQUMvQjRZLDBCQUFnQixHQUNaQSxnQkFBZ0IsSUFBSzVZLENBQUMsR0FBRzBZLGNBQUosSUFBc0IxWSxDQUFDLEdBQUcyWSxZQURuRDtBQUVBLGNBQUkzWSxDQUFDLEdBQUd5WSxXQUFKLEtBQW9CLENBQUNJLFFBQUQsSUFBYTdZLENBQUMsR0FBRzZZLFFBQXJDLENBQUosRUFDSUEsUUFBUSxHQUFHN1ksQ0FBWCxDQURKLEtBRUssSUFBSUEsQ0FBQyxHQUFHeVksV0FBSixLQUFvQixDQUFDSyxRQUFELElBQWE5WSxDQUFDLEdBQUc4WSxRQUFyQyxDQUFKLEVBQ0RBLFFBQVEsR0FBRzlZLENBQVg7QUFDUDtBQUNKOztBQUNELFdBQUssSUFBSTFkLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcxakIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5FLFVBQWhDLEVBQTRDbGhCLENBQUMsRUFBN0MsRUFBaUQ7QUFDN0MsWUFBSTlMLEtBQUssR0FBRzVYLElBQUksQ0FBQ3N1QyxhQUFMLENBQW1CNEYsUUFBbkIsQ0FBNEJ4d0IsQ0FBNUIsQ0FBWjs7QUFDQSxZQUFJeW5CLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVUxeEMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCO0FBQzFCLGNBQUl5Z0QsT0FBTyxHQUFHdmlDLEtBQUssQ0FBQ3M4QixRQUFOLENBQWV6NkMsQ0FBZixDQUFkO0FBQUEsY0FBaUM0SyxJQUFJLEdBQUc4MUMsT0FBTyxDQUFDNVMsT0FBaEQ7QUFDQSxjQUFJeHVCLFNBQVMsR0FBRzFVLElBQUksQ0FBQzJnQixPQUFMLEVBQWhCO0FBQ0EsY0FBSW8xQixVQUFVLEdBQUlILFFBQVEsR0FBRyxDQUFYLElBQWdCbGhDLFNBQVMsR0FBR2toQyxRQUE3QixJQUNaQyxRQUFRLEdBQUcsQ0FBWCxJQUFnQm5oQyxTQUFTLEdBQUdtaEMsUUFEakM7O0FBRUEsY0FBSUUsVUFBSixFQUFnQjtBQUNaRCxtQkFBTyxDQUFDdlUsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsWUFBdEI7QUFDQSxhQUFDLFNBQUQsRUFBWSxZQUFaLEVBQTBCLFVBQTFCLEVBQXNDNEUsT0FBdEMsQ0FBOEMsVUFBVS9vQixDQUFWLEVBQWE7QUFDdkR5NEIscUJBQU8sQ0FBQ3ZVLFNBQVIsQ0FBa0JFLE1BQWxCLENBQXlCcGtCLENBQXpCO0FBQ0gsYUFGRDtBQUdBLG1CQUFPLFVBQVA7QUFDSCxXQU5ELE1BT0ssSUFBSXM0QixnQkFBZ0IsSUFBSSxDQUFDSSxVQUF6QixFQUNELE9BQU8sVUFBUDs7QUFDSixXQUFDLFlBQUQsRUFBZSxTQUFmLEVBQTBCLFVBQTFCLEVBQXNDLFlBQXRDLEVBQW9EM1AsT0FBcEQsQ0FBNEQsVUFBVS9vQixDQUFWLEVBQWE7QUFDckV5NEIsbUJBQU8sQ0FBQ3ZVLFNBQVIsQ0FBa0JFLE1BQWxCLENBQXlCcGtCLENBQXpCO0FBQ0gsV0FGRDs7QUFHQSxjQUFJZ2tCLElBQUksS0FBS25mLFNBQWIsRUFBd0I7QUFDcEJtZixnQkFBSSxDQUFDRSxTQUFMLENBQWVDLEdBQWYsQ0FBbUI4VCxTQUFTLElBQUkzNUMsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQixDQUFuQixFQUFzQmlILE9BQXRCLEVBQWIsR0FDYixZQURhLEdBRWIsVUFGTjtBQUdBLGdCQUFJNjBCLFdBQVcsR0FBR0YsU0FBZCxJQUEyQjVnQyxTQUFTLEtBQUs4Z0MsV0FBN0MsRUFDSU0sT0FBTyxDQUFDdlUsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsWUFBdEIsRUFESixLQUVLLElBQUlnVSxXQUFXLEdBQUdGLFNBQWQsSUFBMkI1Z0MsU0FBUyxLQUFLOGdDLFdBQTdDLEVBQ0RNLE9BQU8sQ0FBQ3ZVLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLFVBQXRCO0FBQ0osZ0JBQUk5c0IsU0FBUyxJQUFJa2hDLFFBQWIsS0FDQ0MsUUFBUSxLQUFLLENBQWIsSUFBa0JuaEMsU0FBUyxJQUFJbWhDLFFBRGhDLEtBRUFyUCxTQUFTLENBQUM5eEIsU0FBRCxFQUFZOGdDLFdBQVosRUFBeUJGLFNBQXpCLENBRmIsRUFHSVEsT0FBTyxDQUFDdlUsU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsU0FBdEI7QUFDUDtBQUNKLFNBOUJEOztBQStCQSxhQUFLLElBQUlwc0MsQ0FBQyxHQUFHLENBQVIsRUFBV0MsQ0FBQyxHQUFHa2UsS0FBSyxDQUFDczhCLFFBQU4sQ0FBZTd4QyxNQUFuQyxFQUEyQzVJLENBQUMsR0FBR0MsQ0FBL0MsRUFBa0RELENBQUMsRUFBbkQsRUFBdUQ7QUFDbkQweEMsaUJBQU8sQ0FBQzF4QyxDQUFELEVBQUlDLENBQUosQ0FBUDtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxhQUFTbTNDLFFBQVQsR0FBb0I7QUFDaEIsVUFBSTd3QyxJQUFJLENBQUNvdEMsTUFBTCxJQUFlLENBQUNwdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxFLE1BQTVCLElBQXNDLENBQUM3a0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhGLE1BQXZELEVBQ0kwSSxnQkFBZ0I7QUFDdkI7O0FBQ0QsYUFBU1MsSUFBVCxDQUFjdGxDLENBQWQsRUFBaUJxOUIsZUFBakIsRUFBa0M7QUFDOUIsVUFBSUEsZUFBZSxLQUFLLEtBQUssQ0FBN0IsRUFBZ0M7QUFBRUEsdUJBQWUsR0FBR3prQyxJQUFJLENBQUNxNkMsZ0JBQXZCO0FBQTBDOztBQUM1RSxVQUFJcjZDLElBQUksQ0FBQ21wQyxRQUFMLEtBQWtCLElBQXRCLEVBQTRCO0FBQ3hCLFlBQUkvaEMsQ0FBSixFQUFPO0FBQ0hBLFdBQUMsQ0FBQ2d5QyxjQUFGO0FBQ0EsY0FBSWhKLFdBQVcsR0FBR3JKLGNBQWMsQ0FBQzMvQixDQUFELENBQWhDO0FBQ0FncEMscUJBQVcsSUFBSUEsV0FBVyxDQUFDOEksSUFBWixFQUFmO0FBQ0g7O0FBQ0QsWUFBSWw1QyxJQUFJLENBQUM0M0MsV0FBTCxLQUFxQnJ4QixTQUF6QixFQUFvQztBQUNoQ3ZtQixjQUFJLENBQUM0M0MsV0FBTCxDQUFpQjlELEtBQWpCO0FBQ0E5ekMsY0FBSSxDQUFDNDNDLFdBQUwsQ0FBaUIwQyxLQUFqQjtBQUNIOztBQUNEdk0sb0JBQVksQ0FBQyxRQUFELENBQVo7QUFDQTtBQUNIOztBQUNELFVBQUkvdEMsSUFBSSxDQUFDc2YsTUFBTCxDQUFZKzJCLFFBQVosSUFBd0JyMkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhGLE1BQXhDLEVBQ0k7QUFDSixVQUFJZ1gsT0FBTyxHQUFHdjZDLElBQUksQ0FBQ290QyxNQUFuQjtBQUNBcHRDLFVBQUksQ0FBQ290QyxNQUFMLEdBQWMsSUFBZDs7QUFDQSxVQUFJLENBQUNtTixPQUFMLEVBQWM7QUFDVnY2QyxZQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJ0SSxTQUF2QixDQUFpQ0MsR0FBakMsQ0FBcUMsTUFBckM7O0FBQ0E3bEMsWUFBSSxDQUFDc2YsTUFBTCxDQUFZc21CLFNBQVosQ0FBc0JDLEdBQXRCLENBQTBCLFFBQTFCOztBQUNBa0ksb0JBQVksQ0FBQyxRQUFELENBQVo7QUFDQTlCLHdCQUFnQixDQUFDeEgsZUFBRCxDQUFoQjtBQUNIOztBQUNELFVBQUl6a0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXp5QixVQUFaLEtBQTJCLElBQTNCLElBQW1DdFcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWhzQixVQUFaLEtBQTJCLElBQWxFLEVBQXdFO0FBQ3BFLFlBQUkvYyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZNXJCLFVBQVosS0FBMkIsS0FBM0IsS0FDQy9WLENBQUMsS0FBS21mLFNBQU4sSUFDRyxDQUFDdm1CLElBQUksQ0FBQ3F4QyxhQUFMLENBQW1CVSxRQUFuQixDQUE0QjNxQyxDQUFDLENBQUNteEMsYUFBOUIsQ0FGTCxDQUFKLEVBRXdEO0FBQ3BEeDNCLG9CQUFVLENBQUMsWUFBWTtBQUFFLG1CQUFPL2dCLElBQUksQ0FBQ3N2QyxXQUFMLENBQWlCLzZCLE1BQWpCLEVBQVA7QUFBbUMsV0FBbEQsRUFBb0QsRUFBcEQsQ0FBVjtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxhQUFTaW1DLGdCQUFULENBQTBCNTZDLElBQTFCLEVBQWdDO0FBQzVCLGFBQU8sVUFBVXlFLElBQVYsRUFBZ0I7QUFDbkIsWUFBSWtqQyxPQUFPLEdBQUl2bkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWSxNQUFNbnBDLElBQU4sR0FBYSxNQUF6QixJQUFtQ0ksSUFBSSxDQUFDeWEsU0FBTCxDQUFlcFcsSUFBZixFQUFxQnJFLElBQUksQ0FBQytvQyxNQUFMLENBQVkvckIsVUFBakMsQ0FBbEQ7QUFDQSxZQUFJeTlCLGNBQWMsR0FBR3o2QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZLE9BQU9ucEMsSUFBSSxLQUFLLEtBQVQsR0FBaUIsS0FBakIsR0FBeUIsS0FBaEMsSUFBeUMsTUFBckQsQ0FBckI7O0FBQ0EsWUFBSTJuQyxPQUFPLEtBQUtoaEIsU0FBaEIsRUFBMkI7QUFDdkJ2bUIsY0FBSSxDQUFDSixJQUFJLEtBQUssS0FBVCxHQUFpQixnQkFBakIsR0FBb0MsZ0JBQXJDLENBQUosR0FDSTJuQyxPQUFPLENBQUN0YyxRQUFSLEtBQXFCLENBQXJCLElBQ0lzYyxPQUFPLENBQUN6YyxVQUFSLEtBQXVCLENBRDNCLElBRUl5YyxPQUFPLENBQUN4YyxVQUFSLEtBQXVCLENBSC9CO0FBSUg7O0FBQ0QsWUFBSS9xQixJQUFJLENBQUMrZCxhQUFULEVBQXdCO0FBQ3BCL2QsY0FBSSxDQUFDK2QsYUFBTCxHQUFxQi9kLElBQUksQ0FBQytkLGFBQUwsQ0FBbUI1SSxNQUFuQixDQUEwQixVQUFVd08sQ0FBVixFQUFhO0FBQUUsbUJBQU82b0IsU0FBUyxDQUFDN29CLENBQUQsQ0FBaEI7QUFBc0IsV0FBL0QsQ0FBckI7QUFDQSxjQUFJLENBQUMzakIsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQjFiLE1BQXBCLElBQThCekMsSUFBSSxLQUFLLEtBQTNDLEVBQ0ltc0MsZ0JBQWdCLENBQUN4RSxPQUFELENBQWhCO0FBQ0pxRyxxQkFBVztBQUNkOztBQUNELFlBQUk1dEMsSUFBSSxDQUFDc3VDLGFBQVQsRUFBd0I7QUFDcEIzQixnQkFBTTtBQUNOLGNBQUlwRixPQUFPLEtBQUtoaEIsU0FBaEIsRUFDSXZtQixJQUFJLENBQUM2MkMsa0JBQUwsQ0FBd0JqM0MsSUFBeEIsSUFBZ0MybkMsT0FBTyxDQUFDbGUsV0FBUixHQUFzQmpsQixRQUF0QixFQUFoQyxDQURKLEtBR0lwRSxJQUFJLENBQUM2MkMsa0JBQUwsQ0FBd0JvQixlQUF4QixDQUF3Q3I0QyxJQUF4QztBQUNKSSxjQUFJLENBQUM2MkMsa0JBQUwsQ0FBd0JSLFFBQXhCLEdBQ0ksQ0FBQyxDQUFDb0UsY0FBRixJQUNJbFQsT0FBTyxLQUFLaGhCLFNBRGhCLElBRUlrMEIsY0FBYyxDQUFDcHhCLFdBQWYsT0FBaUNrZSxPQUFPLENBQUNsZSxXQUFSLEVBSHpDO0FBSUg7QUFDSixPQTFCRDtBQTJCSDs7QUFDRCxhQUFTZ2tCLFdBQVQsR0FBdUI7QUFDbkIsVUFBSXFOLFFBQVEsR0FBRyxDQUNYLE1BRFcsRUFFWCxhQUZXLEVBR1gsWUFIVyxFQUlYLHFCQUpXLEVBS1gsWUFMVyxFQU1YLFdBTlcsRUFPWCxZQVBXLEVBUVgsWUFSVyxFQVNYLFVBVFcsRUFVWCx1QkFWVyxFQVdYLFFBWFcsRUFZWCxRQVpXLEVBYVgsZUFiVyxFQWNYLGVBZFcsQ0FBZjs7QUFnQkEsVUFBSUMsVUFBVSxHQUFHelosT0FBUSxDQUFDQSxPQUFRLENBQUMsRUFBRCxFQUFLL2lDLElBQUksQ0FBQ3k4QyxLQUFMLENBQVd6OEMsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZXRQLE9BQU8sQ0FBQ3VQLE9BQVIsSUFBbUIsRUFBbEMsQ0FBWCxDQUFMLENBQVQsRUFBa0V0UCxjQUFsRSxDQUF6Qjs7QUFDQSxVQUFJOUMsT0FBTyxHQUFHLEVBQWQ7QUFDQTFvQyxVQUFJLENBQUMrb0MsTUFBTCxDQUFZdHVCLFNBQVosR0FBd0JrZ0MsVUFBVSxDQUFDbGdDLFNBQW5DO0FBQ0F6YSxVQUFJLENBQUMrb0MsTUFBTCxDQUFZMXJCLFVBQVosR0FBeUJzOUIsVUFBVSxDQUFDdDlCLFVBQXBDO0FBQ0F2a0IsWUFBTSxDQUFDRCxjQUFQLENBQXNCbUgsSUFBSSxDQUFDK29DLE1BQTNCLEVBQW1DLFFBQW5DLEVBQTZDO0FBQ3pDNXVDLFdBQUcsRUFBRSxlQUFZO0FBQUUsaUJBQU82RixJQUFJLENBQUMrb0MsTUFBTCxDQUFZakgsT0FBbkI7QUFBNkIsU0FEUDtBQUV6Q3ZuQyxXQUFHLEVBQUUsYUFBVXdnRCxLQUFWLEVBQWlCO0FBQ2xCLzZDLGNBQUksQ0FBQytvQyxNQUFMLENBQVlqSCxPQUFaLEdBQXNCa1osY0FBYyxDQUFDRCxLQUFELENBQXBDO0FBQ0g7QUFKd0MsT0FBN0M7QUFNQWppRCxZQUFNLENBQUNELGNBQVAsQ0FBc0JtSCxJQUFJLENBQUMrb0MsTUFBM0IsRUFBbUMsU0FBbkMsRUFBOEM7QUFDMUM1dUMsV0FBRyxFQUFFLGVBQVk7QUFBRSxpQkFBTzZGLElBQUksQ0FBQytvQyxNQUFMLENBQVlsSCxRQUFuQjtBQUE4QixTQURQO0FBRTFDdG5DLFdBQUcsRUFBRSxhQUFVd2dELEtBQVYsRUFBaUI7QUFDbEIvNkMsY0FBSSxDQUFDK29DLE1BQUwsQ0FBWWxILFFBQVosR0FBdUJtWixjQUFjLENBQUNELEtBQUQsQ0FBckM7QUFDSDtBQUp5QyxPQUE5QztBQU1BLFVBQUlFLFFBQVEsR0FBR04sVUFBVSxDQUFDbFgsSUFBWCxLQUFvQixNQUFuQzs7QUFDQSxVQUFJLENBQUNrWCxVQUFVLENBQUMzOUIsVUFBWixLQUEyQjI5QixVQUFVLENBQUNya0MsVUFBWCxJQUF5QjJrQyxRQUFwRCxDQUFKLEVBQW1FO0FBQy9ELFlBQUlDLGlCQUFpQixHQUFHaitCLFNBQVMsQ0FBQ3d1QixhQUFWLENBQXdCenVCLFVBQXhCLElBQXNDNGtCLFFBQVEsQ0FBQzVrQixVQUF2RTtBQUNBMHJCLGVBQU8sQ0FBQzFyQixVQUFSLEdBQ0kyOUIsVUFBVSxDQUFDNTlCLFVBQVgsSUFBeUJrK0IsUUFBekIsR0FDTSxTQUFTTixVQUFVLENBQUM3OUIsYUFBWCxHQUEyQixJQUEzQixHQUFrQyxFQUEzQyxDQUROLEdBRU1vK0IsaUJBQWlCLEdBQUcsTUFBcEIsSUFBOEJQLFVBQVUsQ0FBQzc5QixhQUFYLEdBQTJCLElBQTNCLEdBQWtDLEVBQWhFLENBSFY7QUFJSDs7QUFDRCxVQUFJNjlCLFVBQVUsQ0FBQzFZLFFBQVgsS0FDQzBZLFVBQVUsQ0FBQ3JrQyxVQUFYLElBQXlCMmtDLFFBRDFCLEtBRUEsQ0FBQ04sVUFBVSxDQUFDM1ksU0FGaEIsRUFFMkI7QUFDdkIsWUFBSW1aLGdCQUFnQixHQUFHbCtCLFNBQVMsQ0FBQ3d1QixhQUFWLENBQXdCekosU0FBeEIsSUFBcUNKLFFBQVEsQ0FBQ0ksU0FBckU7QUFDQTBHLGVBQU8sQ0FBQzFHLFNBQVIsR0FDSTJZLFVBQVUsQ0FBQzU5QixVQUFYLElBQXlCaytCLFFBQXpCLEdBQ00sU0FBU04sVUFBVSxDQUFDNzlCLGFBQVgsR0FBMkIsTUFBM0IsR0FBb0MsSUFBN0MsQ0FETixHQUVNcStCLGdCQUFnQixJQUFJLFVBQVVSLFVBQVUsQ0FBQzc5QixhQUFYLEdBQTJCLElBQTNCLEdBQWtDLEVBQTVDLElBQWtELElBQXRELENBSDFCO0FBSUg7O0FBQ0Roa0IsWUFBTSxDQUFDRCxjQUFQLENBQXNCbUgsSUFBSSxDQUFDK29DLE1BQTNCLEVBQW1DLFNBQW5DLEVBQThDO0FBQzFDNXVDLFdBQUcsRUFBRSxlQUFZO0FBQUUsaUJBQU82RixJQUFJLENBQUMrb0MsTUFBTCxDQUFZcVMsUUFBbkI7QUFBOEIsU0FEUDtBQUUxQzdnRCxXQUFHLEVBQUVpZ0QsZ0JBQWdCLENBQUMsS0FBRDtBQUZxQixPQUE5QztBQUlBMWhELFlBQU0sQ0FBQ0QsY0FBUCxDQUFzQm1ILElBQUksQ0FBQytvQyxNQUEzQixFQUFtQyxTQUFuQyxFQUE4QztBQUMxQzV1QyxXQUFHLEVBQUUsZUFBWTtBQUFFLGlCQUFPNkYsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXNTLFFBQW5CO0FBQThCLFNBRFA7QUFFMUM5Z0QsV0FBRyxFQUFFaWdELGdCQUFnQixDQUFDLEtBQUQ7QUFGcUIsT0FBOUM7O0FBSUEsVUFBSWMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFVMTdDLElBQVYsRUFBZ0I7QUFBRSxlQUFPLFVBQVU0cUMsR0FBVixFQUFlO0FBQzNEeHFDLGNBQUksQ0FBQytvQyxNQUFMLENBQVlucEMsSUFBSSxLQUFLLEtBQVQsR0FBaUIsVUFBakIsR0FBOEIsVUFBMUMsSUFBd0RJLElBQUksQ0FBQ3lhLFNBQUwsQ0FBZSt2QixHQUFmLEVBQW9CLE9BQXBCLENBQXhEO0FBQ0gsU0FGd0M7QUFFckMsT0FGSjs7QUFHQTF4QyxZQUFNLENBQUNELGNBQVAsQ0FBc0JtSCxJQUFJLENBQUMrb0MsTUFBM0IsRUFBbUMsU0FBbkMsRUFBOEM7QUFDMUM1dUMsV0FBRyxFQUFFLGVBQVk7QUFBRSxpQkFBTzZGLElBQUksQ0FBQytvQyxNQUFMLENBQVl3UyxRQUFuQjtBQUE4QixTQURQO0FBRTFDaGhELFdBQUcsRUFBRStnRCxnQkFBZ0IsQ0FBQyxLQUFEO0FBRnFCLE9BQTlDO0FBSUF4aUQsWUFBTSxDQUFDRCxjQUFQLENBQXNCbUgsSUFBSSxDQUFDK29DLE1BQTNCLEVBQW1DLFNBQW5DLEVBQThDO0FBQzFDNXVDLFdBQUcsRUFBRSxlQUFZO0FBQUUsaUJBQU82RixJQUFJLENBQUMrb0MsTUFBTCxDQUFZeVMsUUFBbkI7QUFBOEIsU0FEUDtBQUUxQ2poRCxXQUFHLEVBQUUrZ0QsZ0JBQWdCLENBQUMsS0FBRDtBQUZxQixPQUE5Qzs7QUFJQSxVQUFJWCxVQUFVLENBQUNsWCxJQUFYLEtBQW9CLE1BQXhCLEVBQWdDO0FBQzVCempDLFlBQUksQ0FBQytvQyxNQUFMLENBQVloc0IsVUFBWixHQUF5QixJQUF6QjtBQUNBL2MsWUFBSSxDQUFDK29DLE1BQUwsQ0FBWXp5QixVQUFaLEdBQXlCLElBQXpCO0FBQ0g7O0FBQ0R4ZCxZQUFNLENBQUNxb0MsTUFBUCxDQUFjbmhDLElBQUksQ0FBQytvQyxNQUFuQixFQUEyQkwsT0FBM0IsRUFBb0NpUyxVQUFwQzs7QUFDQSxXQUFLLElBQUlsaEQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2loRCxRQUFRLENBQUNyNEMsTUFBN0IsRUFBcUM1SSxDQUFDLEVBQXRDO0FBQ0k7QUFDQXVHLFlBQUksQ0FBQytvQyxNQUFMLENBQVkyUixRQUFRLENBQUNqaEQsQ0FBRCxDQUFwQixJQUNJdUcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTJSLFFBQVEsQ0FBQ2poRCxDQUFELENBQXBCLE1BQTZCLElBQTdCLElBQ0l1RyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZMlIsUUFBUSxDQUFDamhELENBQUQsQ0FBcEIsTUFBNkIsTUFGckM7QUFGSjs7QUFLQWtvQyxXQUFLLENBQUN4c0IsTUFBTixDQUFhLFVBQVVzbUMsSUFBVixFQUFnQjtBQUFFLGVBQU96N0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTBTLElBQVosTUFBc0JsMUIsU0FBN0I7QUFBeUMsT0FBeEUsRUFBMEVra0IsT0FBMUUsQ0FBa0YsVUFBVWdSLElBQVYsRUFBZ0I7QUFDOUZ6N0MsWUFBSSxDQUFDK29DLE1BQUwsQ0FBWTBTLElBQVosSUFBb0JqVyxRQUFRLENBQUN4bEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTBTLElBQVosS0FBcUIsRUFBdEIsQ0FBUixDQUFrQ25TLEdBQWxDLENBQXNDMEUsY0FBdEMsQ0FBcEI7QUFDSCxPQUZEO0FBR0FodUMsVUFBSSxDQUFDbXBDLFFBQUwsR0FDSSxDQUFDbnBDLElBQUksQ0FBQytvQyxNQUFMLENBQVlyckIsYUFBYixJQUNJLENBQUMxZCxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeEYsTUFEakIsSUFFSXZqQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixRQUZ6QixJQUdJLENBQUN6akMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWW5HLE9BQVosQ0FBb0J2Z0MsTUFIekIsSUFJSSxDQUFDckMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxHLE1BQVosQ0FBbUJ4Z0MsTUFKeEIsSUFLSSxDQUFDckMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXByQixXQUxqQixJQU1JLGlFQUFpRTZMLElBQWpFLENBQXNFNFksU0FBUyxDQUFDQyxTQUFoRixDQVBSOztBQVFBLFdBQUssSUFBSTVvQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdUcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXZFLE9BQVosQ0FBb0JuaUMsTUFBeEMsRUFBZ0Q1SSxDQUFDLEVBQWpELEVBQXFEO0FBQ2pELFlBQUlpaUQsVUFBVSxHQUFHMTdDLElBQUksQ0FBQytvQyxNQUFMLENBQVl2RSxPQUFaLENBQW9CL3FDLENBQXBCLEVBQXVCdUcsSUFBdkIsS0FBZ0MsRUFBakQ7O0FBQ0EsYUFBSyxJQUFJckcsR0FBVCxJQUFnQitoRCxVQUFoQixFQUE0QjtBQUN4QixjQUFJL1osS0FBSyxDQUFDelosT0FBTixDQUFjdnVCLEdBQWQsSUFBcUIsQ0FBQyxDQUExQixFQUE2QjtBQUN6QnFHLGdCQUFJLENBQUMrb0MsTUFBTCxDQUFZcHZDLEdBQVosSUFBbUI2ckMsUUFBUSxDQUFDa1csVUFBVSxDQUFDL2hELEdBQUQsQ0FBWCxDQUFSLENBQ2QydkMsR0FEYyxDQUNWMEUsY0FEVSxFQUVkaGxCLE1BRmMsQ0FFUGhwQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZcHZDLEdBQVosQ0FGTyxDQUFuQjtBQUdILFdBSkQsTUFLSyxJQUFJLE9BQU9naEQsVUFBVSxDQUFDaGhELEdBQUQsQ0FBakIsS0FBMkIsV0FBL0IsRUFDRHFHLElBQUksQ0FBQytvQyxNQUFMLENBQVlwdkMsR0FBWixJQUFtQitoRCxVQUFVLENBQUMvaEQsR0FBRCxDQUE3QjtBQUNQO0FBQ0o7O0FBQ0QsVUFBSSxDQUFDZ2hELFVBQVUsQ0FBQ3pZLGFBQWhCLEVBQStCO0FBQzNCbGlDLFlBQUksQ0FBQytvQyxNQUFMLENBQVk3RyxhQUFaLEdBQ0l5WixZQUFZLEdBQUdoVyxTQUFmLEdBQTJCLEdBQTNCLEdBQWlDM2xDLElBQUksQ0FBQytvQyxNQUFMLENBQVk3RyxhQURqRDtBQUVIOztBQUNENkwsa0JBQVksQ0FBQyxlQUFELENBQVo7QUFDSDs7QUFDRCxhQUFTNE4sWUFBVCxHQUF3QjtBQUNwQixhQUFPMzdDLElBQUksQ0FBQytvQyxNQUFMLENBQVk3ckIsSUFBWixHQUNEcXVCLE9BQU8sQ0FBQ3FRLGFBQVIsQ0FBc0IsY0FBdEIsQ0FEQyxHQUVEclEsT0FGTjtBQUdIOztBQUNELGFBQVMrQixXQUFULEdBQXVCO0FBQ25CLFVBQUksUUFBT3R0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbHlCLE1BQW5CLE1BQThCLFFBQTlCLElBQ0EsT0FBT29HLFNBQVMsQ0FBQzQrQixLQUFWLENBQWdCNzdDLElBQUksQ0FBQytvQyxNQUFMLENBQVlseUIsTUFBNUIsQ0FBUCxLQUErQyxXQURuRCxFQUVJN1csSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWpHLFlBQVosQ0FBeUIsSUFBSTNTLEtBQUosQ0FBVSwrQkFBK0Jud0IsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWx5QixNQUFyRCxDQUF6QjtBQUNKN1csVUFBSSxDQUFDaXBDLElBQUwsR0FBWS9ILE9BQVEsQ0FBQ0EsT0FBUSxDQUFDLEVBQUQsRUFBS2prQixTQUFTLENBQUM0K0IsS0FBVixDQUFnQkMsT0FBckIsQ0FBVCxFQUF5QyxRQUFPOTdDLElBQUksQ0FBQytvQyxNQUFMLENBQVlseUIsTUFBbkIsTUFBOEIsUUFBOUIsR0FDdkQ3VyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbHlCLE1BRDJDLEdBRXZEN1csSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWx5QixNQUFaLEtBQXVCLFNBQXZCLEdBQ0lvRyxTQUFTLENBQUM0K0IsS0FBVixDQUFnQjc3QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbHlCLE1BQTVCLENBREosR0FFSTBQLFNBSlUsQ0FBcEI7QUFLQWtpQixnQkFBVSxDQUFDZCxDQUFYLEdBQWUsTUFBTTNuQyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZSxDQUFmLENBQU4sR0FBMEIsR0FBMUIsR0FBZ0NoZixJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZSxDQUFmLENBQWhDLEdBQW9ELEdBQXBELEdBQTBEaGYsSUFBSSxDQUFDaXBDLElBQUwsQ0FBVWpxQixJQUFWLENBQWUsQ0FBZixFQUFrQndTLFdBQWxCLEVBQTFELEdBQTRGLEdBQTVGLEdBQWtHeHhCLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVqcUIsSUFBVixDQUFlLENBQWYsRUFBa0J3UyxXQUFsQixFQUFsRyxHQUFvSSxHQUFuSjs7QUFDQSxVQUFJbXBCLFVBQVUsR0FBR3paLE9BQVEsQ0FBQ0EsT0FBUSxDQUFDLEVBQUQsRUFBS3NLLGNBQUwsQ0FBVCxFQUErQnJ0QyxJQUFJLENBQUN5OEMsS0FBTCxDQUFXejhDLElBQUksQ0FBQzA4QyxTQUFMLENBQWV0UCxPQUFPLENBQUN1UCxPQUFSLElBQW1CLEVBQWxDLENBQVgsQ0FBL0IsQ0FBekI7O0FBQ0EsVUFBSUgsVUFBVSxDQUFDOTlCLFNBQVgsS0FBeUIwSixTQUF6QixJQUNBdEosU0FBUyxDQUFDd3VCLGFBQVYsQ0FBd0I1dUIsU0FBeEIsS0FBc0MwSixTQUQxQyxFQUNxRDtBQUNqRHZtQixZQUFJLENBQUMrb0MsTUFBTCxDQUFZbHNCLFNBQVosR0FBd0I3YyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVcHNCLFNBQWxDO0FBQ0g7O0FBQ0Q3YyxVQUFJLENBQUNxZCxVQUFMLEdBQWtCdXJCLG1CQUFtQixDQUFDNW9DLElBQUQsQ0FBckM7QUFDQUEsVUFBSSxDQUFDeWEsU0FBTCxHQUFpQit1QixnQkFBZ0IsQ0FBQztBQUFFVCxjQUFNLEVBQUUvb0MsSUFBSSxDQUFDK29DLE1BQWY7QUFBdUJFLFlBQUksRUFBRWpwQyxJQUFJLENBQUNpcEM7QUFBbEMsT0FBRCxDQUFqQztBQUNIOztBQUNELGFBQVNnRCxnQkFBVCxDQUEwQjhQLHFCQUExQixFQUFpRDtBQUM3QyxVQUFJLzdDLElBQUksQ0FBQ2t1QyxpQkFBTCxLQUEyQjNuQixTQUEvQixFQUNJO0FBQ0p3bkIsa0JBQVksQ0FBQyx1QkFBRCxDQUFaO0FBQ0EsVUFBSXRKLGVBQWUsR0FBR3NYLHFCQUFxQixJQUFJLzdDLElBQUksQ0FBQ3E2QyxnQkFBcEQ7QUFDQSxVQUFJMkIsY0FBYyxHQUFHNzhDLEtBQUssQ0FBQ2dsQixTQUFOLENBQWdCODNCLE1BQWhCLENBQXVCeDRCLElBQXZCLENBQTRCempCLElBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QmdHLFFBQW5ELEVBQThELFVBQVVnSSxHQUFWLEVBQWV2Z0QsS0FBZixFQUFzQjtBQUFFLGVBQU91Z0QsR0FBRyxHQUFHdmdELEtBQUssQ0FBQ3dnRCxZQUFuQjtBQUFrQyxPQUF4SCxFQUEySCxDQUEzSCxDQUFyQjtBQUFBLFVBQW9KQyxhQUFhLEdBQUdwOEMsSUFBSSxDQUFDa3VDLGlCQUFMLENBQXVCTyxXQUEzTDtBQUFBLFVBQXdNNE4sU0FBUyxHQUFHcjhDLElBQUksQ0FBQytvQyxNQUFMLENBQVkvbkIsUUFBWixDQUFxQmlCLEtBQXJCLENBQTJCLEdBQTNCLENBQXBOO0FBQUEsVUFBcVBxNkIsaUJBQWlCLEdBQUdELFNBQVMsQ0FBQyxDQUFELENBQWxSO0FBQUEsVUFBdVJFLG1CQUFtQixHQUFHRixTQUFTLENBQUNoNkMsTUFBVixHQUFtQixDQUFuQixHQUF1Qmc2QyxTQUFTLENBQUMsQ0FBRCxDQUFoQyxHQUFzQyxJQUFuVjtBQUFBLFVBQXlWRyxXQUFXLEdBQUcvWCxlQUFlLENBQUNnWSxxQkFBaEIsRUFBdlc7QUFBQSxVQUFnWkMsa0JBQWtCLEdBQUcvMEMsTUFBTSxDQUFDZzFDLFdBQVAsR0FBcUJILFdBQVcsQ0FBQ0ksTUFBdGM7QUFBQSxVQUE4Y0MsU0FBUyxHQUFHUCxpQkFBaUIsS0FBSyxPQUF0QixJQUNyZEEsaUJBQWlCLEtBQUssT0FBdEIsSUFDR0ksa0JBQWtCLEdBQUdWLGNBRHhCLElBRUdRLFdBQVcsQ0FBQ00sR0FBWixHQUFrQmQsY0FIMUI7QUFJQSxVQUFJYyxHQUFHLEdBQUduMUMsTUFBTSxDQUFDbzFDLFdBQVAsR0FDTlAsV0FBVyxDQUFDTSxHQUROLElBRUwsQ0FBQ0QsU0FBRCxHQUFhcFksZUFBZSxDQUFDMFgsWUFBaEIsR0FBK0IsQ0FBNUMsR0FBZ0QsQ0FBQ0gsY0FBRCxHQUFrQixDQUY3RCxDQUFWO0FBR0F2VyxpQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixVQUF6QixFQUFxQyxDQUFDMk8sU0FBdEMsQ0FBWDtBQUNBcFgsaUJBQVcsQ0FBQ3psQyxJQUFJLENBQUNrdUMsaUJBQU4sRUFBeUIsYUFBekIsRUFBd0MyTyxTQUF4QyxDQUFYO0FBQ0EsVUFBSTc4QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeEYsTUFBaEIsRUFDSTtBQUNKLFVBQUl5WixJQUFJLEdBQUdyMUMsTUFBTSxDQUFDczFDLFdBQVAsR0FBcUJULFdBQVcsQ0FBQ1EsSUFBNUM7QUFDQSxVQUFJRSxRQUFRLEdBQUcsS0FBZjtBQUNBLFVBQUlDLE9BQU8sR0FBRyxLQUFkOztBQUNBLFVBQUlaLG1CQUFtQixLQUFLLFFBQTVCLEVBQXNDO0FBQ2xDUyxZQUFJLElBQUksQ0FBQ1osYUFBYSxHQUFHSSxXQUFXLENBQUM5TixLQUE3QixJQUFzQyxDQUE5QztBQUNBd08sZ0JBQVEsR0FBRyxJQUFYO0FBQ0gsT0FIRCxNQUlLLElBQUlYLG1CQUFtQixLQUFLLE9BQTVCLEVBQXFDO0FBQ3RDUyxZQUFJLElBQUlaLGFBQWEsR0FBR0ksV0FBVyxDQUFDOU4sS0FBcEM7QUFDQXlPLGVBQU8sR0FBRyxJQUFWO0FBQ0g7O0FBQ0QxWCxpQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixXQUF6QixFQUFzQyxDQUFDZ1AsUUFBRCxJQUFhLENBQUNDLE9BQXBELENBQVg7QUFDQTFYLGlCQUFXLENBQUN6bEMsSUFBSSxDQUFDa3VDLGlCQUFOLEVBQXlCLGFBQXpCLEVBQXdDZ1AsUUFBeEMsQ0FBWDtBQUNBelgsaUJBQVcsQ0FBQ3psQyxJQUFJLENBQUNrdUMsaUJBQU4sRUFBeUIsWUFBekIsRUFBdUNpUCxPQUF2QyxDQUFYO0FBQ0EsVUFBSUMsS0FBSyxHQUFHejFDLE1BQU0sQ0FBQ1QsUUFBUCxDQUFnQmtDLElBQWhCLENBQXFCcWxDLFdBQXJCLElBQ1A5bUMsTUFBTSxDQUFDczFDLFdBQVAsR0FBcUJULFdBQVcsQ0FBQ1ksS0FEMUIsQ0FBWjtBQUVBLFVBQUlDLFNBQVMsR0FBR0wsSUFBSSxHQUFHWixhQUFQLEdBQXVCejBDLE1BQU0sQ0FBQ1QsUUFBUCxDQUFnQmtDLElBQWhCLENBQXFCcWxDLFdBQTVEO0FBQ0EsVUFBSTZPLFVBQVUsR0FBR0YsS0FBSyxHQUFHaEIsYUFBUixHQUF3QnowQyxNQUFNLENBQUNULFFBQVAsQ0FBZ0JrQyxJQUFoQixDQUFxQnFsQyxXQUE5RDtBQUNBaEosaUJBQVcsQ0FBQ3psQyxJQUFJLENBQUNrdUMsaUJBQU4sRUFBeUIsV0FBekIsRUFBc0NtUCxTQUF0QyxDQUFYO0FBQ0EsVUFBSXI5QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbEUsTUFBaEIsRUFDSTtBQUNKN2tDLFVBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QkMsS0FBdkIsQ0FBNkIyTyxHQUE3QixHQUFtQ0EsR0FBRyxHQUFHLElBQXpDOztBQUNBLFVBQUksQ0FBQ08sU0FBTCxFQUFnQjtBQUNacjlDLFlBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QkMsS0FBdkIsQ0FBNkI2TyxJQUE3QixHQUFvQ0EsSUFBSSxHQUFHLElBQTNDO0FBQ0FoOUMsWUFBSSxDQUFDa3VDLGlCQUFMLENBQXVCQyxLQUF2QixDQUE2QmlQLEtBQTdCLEdBQXFDLE1BQXJDO0FBQ0gsT0FIRCxNQUlLLElBQUksQ0FBQ0UsVUFBTCxFQUFpQjtBQUNsQnQ5QyxZQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJDLEtBQXZCLENBQTZCNk8sSUFBN0IsR0FBb0MsTUFBcEM7QUFDQWg5QyxZQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJDLEtBQXZCLENBQTZCaVAsS0FBN0IsR0FBcUNBLEtBQUssR0FBRyxJQUE3QztBQUNILE9BSEksTUFJQTtBQUNELFlBQUl0MkMsR0FBRyxHQUFHeTJDLHFCQUFxQixFQUEvQixDQURDLENBRUQ7O0FBQ0EsWUFBSXoyQyxHQUFHLEtBQUt5ZixTQUFaLEVBQ0k7QUFDSixZQUFJaTNCLFNBQVMsR0FBRzcxQyxNQUFNLENBQUNULFFBQVAsQ0FBZ0JrQyxJQUFoQixDQUFxQnFsQyxXQUFyQztBQUNBLFlBQUlnUCxVQUFVLEdBQUc3OEMsSUFBSSxDQUFDK0ksR0FBTCxDQUFTLENBQVQsRUFBWTZ6QyxTQUFTLEdBQUcsQ0FBWixHQUFnQnBCLGFBQWEsR0FBRyxDQUE1QyxDQUFqQjtBQUNBLFlBQUlzQixZQUFZLEdBQUcsdUNBQW5CO0FBQ0EsWUFBSUMsV0FBVyxHQUFHLHNDQUFsQjtBQUNBLFlBQUlDLFdBQVcsR0FBRzkyQyxHQUFHLENBQUMrMkMsUUFBSixDQUFheDdDLE1BQS9CO0FBQ0EsWUFBSXk3QyxXQUFXLEdBQUcsV0FBV3RCLFdBQVcsQ0FBQ1EsSUFBdkIsR0FBOEIsaUJBQWhEO0FBQ0F2WCxtQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixXQUF6QixFQUFzQyxLQUF0QyxDQUFYO0FBQ0F6SSxtQkFBVyxDQUFDemxDLElBQUksQ0FBQ2t1QyxpQkFBTixFQUF5QixZQUF6QixFQUF1QyxJQUF2QyxDQUFYO0FBQ0FwbkMsV0FBRyxDQUFDaTNDLFVBQUosQ0FBZUwsWUFBWSxHQUFHLEdBQWYsR0FBcUJDLFdBQXJCLEdBQW1DRyxXQUFsRCxFQUErREYsV0FBL0Q7QUFDQTU5QyxZQUFJLENBQUNrdUMsaUJBQUwsQ0FBdUJDLEtBQXZCLENBQTZCNk8sSUFBN0IsR0FBb0NTLFVBQVUsR0FBRyxJQUFqRDtBQUNBejlDLFlBQUksQ0FBQ2t1QyxpQkFBTCxDQUF1QkMsS0FBdkIsQ0FBNkJpUCxLQUE3QixHQUFxQyxNQUFyQztBQUNIO0FBQ0o7O0FBQ0QsYUFBU0cscUJBQVQsR0FBaUM7QUFDN0IsVUFBSVMsYUFBYSxHQUFHLElBQXBCOztBQUNBLFdBQUssSUFBSXZrRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHeU4sUUFBUSxDQUFDKzJDLFdBQVQsQ0FBcUI1N0MsTUFBekMsRUFBaUQ1SSxDQUFDLEVBQWxELEVBQXNEO0FBQ2xELFlBQUl5a0QsS0FBSyxHQUFHaDNDLFFBQVEsQ0FBQysyQyxXQUFULENBQXFCeGtELENBQXJCLENBQVo7O0FBQ0EsWUFBSTtBQUNBeWtELGVBQUssQ0FBQ0wsUUFBTjtBQUNILFNBRkQsQ0FHQSxPQUFPOWEsR0FBUCxFQUFZO0FBQ1I7QUFDSDs7QUFDRGliLHFCQUFhLEdBQUdFLEtBQWhCO0FBQ0E7QUFDSDs7QUFDRCxhQUFPRixhQUFhLElBQUksSUFBakIsR0FBd0JBLGFBQXhCLEdBQXdDRyxnQkFBZ0IsRUFBL0Q7QUFDSDs7QUFDRCxhQUFTQSxnQkFBVCxHQUE0QjtBQUN4QixVQUFJaFEsS0FBSyxHQUFHam5DLFFBQVEsQ0FBQzYrQixhQUFULENBQXVCLE9BQXZCLENBQVo7QUFDQTcrQixjQUFRLENBQUNrM0MsSUFBVCxDQUFjdFgsV0FBZCxDQUEwQnFILEtBQTFCO0FBQ0EsYUFBT0EsS0FBSyxDQUFDK1AsS0FBYjtBQUNIOztBQUNELGFBQVN2UixNQUFULEdBQWtCO0FBQ2QsVUFBSTNzQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZaHNCLFVBQVosSUFBMEIvYyxJQUFJLENBQUNtcEMsUUFBbkMsRUFDSTtBQUNKMEksc0JBQWdCO0FBQ2hCaUYsa0NBQTRCO0FBQzVCbkUsZUFBUztBQUNaOztBQUNELGFBQVMwRyxhQUFULEdBQXlCO0FBQ3JCcjVDLFVBQUksQ0FBQ3NmLE1BQUwsQ0FBWXcwQixLQUFaOztBQUNBLFVBQUluc0MsTUFBTSxDQUFDeTZCLFNBQVAsQ0FBaUJDLFNBQWpCLENBQTJCbmEsT0FBM0IsQ0FBbUMsTUFBbkMsTUFBK0MsQ0FBQyxDQUFoRCxJQUNBa2EsU0FBUyxDQUFDaWMsZ0JBQVYsS0FBK0I5M0IsU0FEbkMsRUFDOEM7QUFDMUM7QUFDQXhGLGtCQUFVLENBQUMvZ0IsSUFBSSxDQUFDcXNDLEtBQU4sRUFBYSxDQUFiLENBQVY7QUFDSCxPQUpELE1BS0s7QUFDRHJzQyxZQUFJLENBQUNxc0MsS0FBTDtBQUNIO0FBQ0o7O0FBQ0QsYUFBUytFLFVBQVQsQ0FBb0JocUMsQ0FBcEIsRUFBdUI7QUFDbkJBLE9BQUMsQ0FBQ2d5QyxjQUFGO0FBQ0FoeUMsT0FBQyxDQUFDb3lDLGVBQUY7O0FBQ0EsVUFBSThFLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVV6bUMsR0FBVixFQUFlO0FBQzlCLGVBQU9BLEdBQUcsQ0FBQyt0QixTQUFKLElBQ0gvdEIsR0FBRyxDQUFDK3RCLFNBQUosQ0FBY21NLFFBQWQsQ0FBdUIsZUFBdkIsQ0FERyxJQUVILENBQUNsNkIsR0FBRyxDQUFDK3RCLFNBQUosQ0FBY21NLFFBQWQsQ0FBdUIsb0JBQXZCLENBRkUsSUFHSCxDQUFDbDZCLEdBQUcsQ0FBQyt0QixTQUFKLENBQWNtTSxRQUFkLENBQXVCLFlBQXZCLENBSEw7QUFJSCxPQUxEOztBQU1BLFVBQUkzUSxDQUFDLEdBQUdpRixVQUFVLENBQUNVLGNBQWMsQ0FBQzMvQixDQUFELENBQWYsRUFBb0JrM0MsWUFBcEIsQ0FBbEI7QUFDQSxVQUFJbGQsQ0FBQyxLQUFLN2EsU0FBVixFQUNJO0FBQ0osVUFBSXJzQixNQUFNLEdBQUdrbkMsQ0FBYjtBQUNBLFVBQUl4a0IsWUFBWSxHQUFJNWMsSUFBSSxDQUFDMnRDLHFCQUFMLEdBQTZCLElBQUkvbkMsSUFBSixDQUFTMUwsTUFBTSxDQUFDcXRDLE9BQVAsQ0FBZXZpQixPQUFmLEVBQVQsQ0FBakQ7QUFDQSxVQUFJdTVCLGlCQUFpQixHQUFHLENBQUMzaEMsWUFBWSxDQUFDa04sUUFBYixLQUEwQjlwQixJQUFJLENBQUNpdEMsWUFBL0IsSUFDckJyd0IsWUFBWSxDQUFDa04sUUFBYixLQUNJOXBCLElBQUksQ0FBQ2l0QyxZQUFMLEdBQW9CanRDLElBQUksQ0FBQytvQyxNQUFMLENBQVluRSxVQUFoQyxHQUE2QyxDQUY3QixLQUdwQjVrQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixPQUh6QjtBQUlBempDLFVBQUksQ0FBQ3l6QyxnQkFBTCxHQUF3QnY1QyxNQUF4QjtBQUNBLFVBQUk4RixJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixRQUF6QixFQUNJempDLElBQUksQ0FBQytkLGFBQUwsR0FBcUIsQ0FBQ25CLFlBQUQsQ0FBckIsQ0FESixLQUVLLElBQUk1YyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixVQUF6QixFQUFxQztBQUN0QyxZQUFJK2EsYUFBYSxHQUFHaEwsY0FBYyxDQUFDNTJCLFlBQUQsQ0FBbEM7QUFDQSxZQUFJNGhDLGFBQUosRUFDSXgrQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CdTVCLE1BQW5CLENBQTBCanlDLFFBQVEsQ0FBQ201QyxhQUFELENBQWxDLEVBQW1ELENBQW5ELEVBREosS0FHSXgrQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CeXlCLElBQW5CLENBQXdCNXpCLFlBQXhCO0FBQ1AsT0FOSSxNQU9BLElBQUk1YyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixPQUF6QixFQUFrQztBQUNuQyxZQUFJempDLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIxYixNQUFuQixLQUE4QixDQUFsQyxFQUFxQztBQUNqQ3JDLGNBQUksQ0FBQ29zQyxLQUFMLENBQVcsS0FBWCxFQUFrQixLQUFsQjtBQUNIOztBQUNEcHNDLFlBQUksQ0FBQzJ0QyxxQkFBTCxHQUE2Qi93QixZQUE3QjtBQUNBNWMsWUFBSSxDQUFDK2QsYUFBTCxDQUFtQnl5QixJQUFuQixDQUF3QjV6QixZQUF4QixFQUxtQyxDQU1uQzs7QUFDQSxZQUFJOHRCLFlBQVksQ0FBQzl0QixZQUFELEVBQWU1YyxJQUFJLENBQUMrZCxhQUFMLENBQW1CLENBQW5CLENBQWYsRUFBc0MsSUFBdEMsQ0FBWixLQUE0RCxDQUFoRSxFQUNJL2QsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQjBnQyxJQUFuQixDQUF3QixVQUFVamQsQ0FBVixFQUFha2QsQ0FBYixFQUFnQjtBQUFFLGlCQUFPbGQsQ0FBQyxDQUFDeGMsT0FBRixLQUFjMDVCLENBQUMsQ0FBQzE1QixPQUFGLEVBQXJCO0FBQW1DLFNBQTdFO0FBQ1A7QUFDRGtxQix3QkFBa0I7O0FBQ2xCLFVBQUlxUCxpQkFBSixFQUF1QjtBQUNuQixZQUFJM0YsU0FBUyxHQUFHNTRDLElBQUksQ0FBQ2t0QyxXQUFMLEtBQXFCdHdCLFlBQVksQ0FBQ3lNLFdBQWIsRUFBckM7QUFDQXJwQixZQUFJLENBQUNrdEMsV0FBTCxHQUFtQnR3QixZQUFZLENBQUN5TSxXQUFiLEVBQW5CO0FBQ0FycEIsWUFBSSxDQUFDaXRDLFlBQUwsR0FBb0Jyd0IsWUFBWSxDQUFDa04sUUFBYixFQUFwQjs7QUFDQSxZQUFJOHVCLFNBQUosRUFBZTtBQUNYN0ssc0JBQVksQ0FBQyxjQUFELENBQVo7QUFDQThELDBCQUFnQjtBQUNuQjs7QUFDRDlELG9CQUFZLENBQUMsZUFBRCxDQUFaO0FBQ0g7O0FBQ0QrSSxrQ0FBNEI7QUFDNUJuRSxlQUFTO0FBQ1QvRSxpQkFBVyxHQW5EUSxDQW9EbkI7O0FBQ0EsVUFBSSxDQUFDMlEsaUJBQUQsSUFDQXYrQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBWixLQUFxQixPQURyQixJQUVBempDLElBQUksQ0FBQytvQyxNQUFMLENBQVluRSxVQUFaLEtBQTJCLENBRi9CLEVBR0lnUCxjQUFjLENBQUMxNUMsTUFBRCxDQUFkLENBSEosS0FJSyxJQUFJOEYsSUFBSSxDQUFDeXpDLGdCQUFMLEtBQTBCbHRCLFNBQTFCLElBQ0x2bUIsSUFBSSxDQUFDc3ZDLFdBQUwsS0FBcUIvb0IsU0FEcEIsRUFDK0I7QUFDaEN2bUIsWUFBSSxDQUFDeXpDLGdCQUFMLElBQXlCenpDLElBQUksQ0FBQ3l6QyxnQkFBTCxDQUFzQkssS0FBdEIsRUFBekI7QUFDSDtBQUNELFVBQUk5ekMsSUFBSSxDQUFDc3ZDLFdBQUwsS0FBcUIvb0IsU0FBekIsRUFDSXZtQixJQUFJLENBQUNzdkMsV0FBTCxLQUFxQi9vQixTQUFyQixJQUFrQ3ZtQixJQUFJLENBQUNzdkMsV0FBTCxDQUFpQndFLEtBQWpCLEVBQWxDOztBQUNKLFVBQUk5ekMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRHLGFBQWhCLEVBQStCO0FBQzNCLFlBQUlrYyxNQUFNLEdBQUczK0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRGLElBQVosS0FBcUIsUUFBckIsSUFBaUMsQ0FBQ3pqQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenlCLFVBQTNEO0FBQ0EsWUFBSXNvQyxLQUFLLEdBQUc1K0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRGLElBQVosS0FBcUIsT0FBckIsSUFDUnpqQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsS0FBOEIsQ0FEdEIsSUFFUixDQUFDckMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXp5QixVQUZqQjs7QUFHQSxZQUFJcW9DLE1BQU0sSUFBSUMsS0FBZCxFQUFxQjtBQUNqQnZGLHVCQUFhO0FBQ2hCO0FBQ0o7O0FBQ0Q1SSxtQkFBYTtBQUNoQjs7QUFDRCxRQUFJb08sU0FBUyxHQUFHO0FBQ1pob0MsWUFBTSxFQUFFLENBQUN5MkIsV0FBRCxFQUFjK0osY0FBZCxDQURJO0FBRVp6UyxnQkFBVSxFQUFFLENBQUMwUixXQUFELEVBQWN6SSxnQkFBZCxFQUFnQzZFLGFBQWhDLENBRkE7QUFHWm4xQixhQUFPLEVBQUUsQ0FBQ2t2QixVQUFELENBSEc7QUFJWm52QixhQUFPLEVBQUUsQ0FBQ212QixVQUFEO0FBSkcsS0FBaEI7O0FBTUEsYUFBU2x5QyxHQUFULENBQWFtTSxNQUFiLEVBQXFCNU0sS0FBckIsRUFBNEI7QUFDeEIsVUFBSTRNLE1BQU0sS0FBSyxJQUFYLElBQW1CLFFBQU9BLE1BQVAsTUFBa0IsUUFBekMsRUFBbUQ7QUFDL0M1TixjQUFNLENBQUNxb0MsTUFBUCxDQUFjbmhDLElBQUksQ0FBQytvQyxNQUFuQixFQUEyQnJpQyxNQUEzQjs7QUFDQSxhQUFLLElBQUkvTSxHQUFULElBQWdCK00sTUFBaEIsRUFBd0I7QUFDcEIsY0FBSW00QyxTQUFTLENBQUNsbEQsR0FBRCxDQUFULEtBQW1CNHNCLFNBQXZCLEVBQ0lzNEIsU0FBUyxDQUFDbGxELEdBQUQsQ0FBVCxDQUFlOHdDLE9BQWYsQ0FBdUIsVUFBVXZoQixDQUFWLEVBQWE7QUFBRSxtQkFBT0EsQ0FBQyxFQUFSO0FBQWEsV0FBbkQ7QUFDUDtBQUNKLE9BTkQsTUFPSztBQUNEbHBCLFlBQUksQ0FBQytvQyxNQUFMLENBQVlyaUMsTUFBWixJQUFzQjVNLEtBQXRCO0FBQ0EsWUFBSStrRCxTQUFTLENBQUNuNEMsTUFBRCxDQUFULEtBQXNCNmYsU0FBMUIsRUFDSXM0QixTQUFTLENBQUNuNEMsTUFBRCxDQUFULENBQWtCK2pDLE9BQWxCLENBQTBCLFVBQVV2aEIsQ0FBVixFQUFhO0FBQUUsaUJBQU9BLENBQUMsRUFBUjtBQUFhLFNBQXRELEVBREosS0FFSyxJQUFJeVksS0FBSyxDQUFDelosT0FBTixDQUFjeGhCLE1BQWQsSUFBd0IsQ0FBQyxDQUE3QixFQUNEMUcsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXJpQyxNQUFaLElBQXNCOCtCLFFBQVEsQ0FBQzFyQyxLQUFELENBQTlCO0FBQ1A7O0FBQ0RrRyxVQUFJLENBQUMyc0MsTUFBTDtBQUNBaUIsaUJBQVcsQ0FBQyxJQUFELENBQVg7QUFDSDs7QUFDRCxhQUFTa1IsZUFBVCxDQUF5QkMsU0FBekIsRUFBb0NuaEMsTUFBcEMsRUFBNEM7QUFDeEMsVUFBSW05QixLQUFLLEdBQUcsRUFBWjtBQUNBLFVBQUlnRSxTQUFTLFlBQVk1L0MsS0FBekIsRUFDSTQ3QyxLQUFLLEdBQUdnRSxTQUFTLENBQUN6VixHQUFWLENBQWMsVUFBVTNsQixDQUFWLEVBQWE7QUFBRSxlQUFPM2pCLElBQUksQ0FBQ3lhLFNBQUwsQ0FBZWtKLENBQWYsRUFBa0IvRixNQUFsQixDQUFQO0FBQW1DLE9BQWhFLENBQVIsQ0FESixLQUVLLElBQUltaEMsU0FBUyxZQUFZbjVDLElBQXJCLElBQTZCLE9BQU9tNUMsU0FBUCxLQUFxQixRQUF0RCxFQUNEaEUsS0FBSyxHQUFHLENBQUMvNkMsSUFBSSxDQUFDeWEsU0FBTCxDQUFlc2tDLFNBQWYsRUFBMEJuaEMsTUFBMUIsQ0FBRCxDQUFSLENBREMsS0FFQSxJQUFJLE9BQU9taEMsU0FBUCxLQUFxQixRQUF6QixFQUFtQztBQUNwQyxnQkFBUS8rQyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZdEYsSUFBcEI7QUFDSSxlQUFLLFFBQUw7QUFDQSxlQUFLLE1BQUw7QUFDSXNYLGlCQUFLLEdBQUcsQ0FBQy82QyxJQUFJLENBQUN5YSxTQUFMLENBQWVza0MsU0FBZixFQUEwQm5oQyxNQUExQixDQUFELENBQVI7QUFDQTs7QUFDSixlQUFLLFVBQUw7QUFDSW05QixpQkFBSyxHQUFHZ0UsU0FBUyxDQUNaOThCLEtBREcsQ0FDR2ppQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZckcsV0FEZixFQUVINEcsR0FGRyxDQUVDLFVBQVVqbEMsSUFBVixFQUFnQjtBQUFFLHFCQUFPckUsSUFBSSxDQUFDeWEsU0FBTCxDQUFlcFcsSUFBZixFQUFxQnVaLE1BQXJCLENBQVA7QUFBc0MsYUFGekQsQ0FBUjtBQUdBOztBQUNKLGVBQUssT0FBTDtBQUNJbTlCLGlCQUFLLEdBQUdnRSxTQUFTLENBQ1o5OEIsS0FERyxDQUNHamlCLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVycUIsY0FEYixFQUVIMHFCLEdBRkcsQ0FFQyxVQUFVamxDLElBQVYsRUFBZ0I7QUFBRSxxQkFBT3JFLElBQUksQ0FBQ3lhLFNBQUwsQ0FBZXBXLElBQWYsRUFBcUJ1WixNQUFyQixDQUFQO0FBQXNDLGFBRnpELENBQVI7QUFHQTtBQWRSO0FBZ0JILE9BakJJLE1BbUJENWQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWpHLFlBQVosQ0FBeUIsSUFBSTNTLEtBQUosQ0FBVSw0QkFBNEJoeUIsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZWtFLFNBQWYsQ0FBdEMsQ0FBekI7QUFDSi8rQyxVQUFJLENBQUMrZCxhQUFMLEdBQXNCL2QsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWhILG1CQUFaLEdBQ2hCZ1osS0FEZ0IsR0FFaEJBLEtBQUssQ0FBQzVsQyxNQUFOLENBQWEsVUFBVXdPLENBQVYsRUFBYTtBQUFFLGVBQU9BLENBQUMsWUFBWS9kLElBQWIsSUFBcUI0bUMsU0FBUyxDQUFDN29CLENBQUQsRUFBSSxLQUFKLENBQXJDO0FBQWtELE9BQTlFLENBRk47QUFHQSxVQUFJM2pCLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BQXpCLEVBQ0l6akMsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQjBnQyxJQUFuQixDQUF3QixVQUFVamQsQ0FBVixFQUFha2QsQ0FBYixFQUFnQjtBQUFFLGVBQU9sZCxDQUFDLENBQUN4YyxPQUFGLEtBQWMwNUIsQ0FBQyxDQUFDMTVCLE9BQUYsRUFBckI7QUFBbUMsT0FBN0U7QUFDUDs7QUFDRCxhQUFTbWUsT0FBVCxDQUFpQjkrQixJQUFqQixFQUF1Qm9zQyxhQUF2QixFQUFzQzd5QixNQUF0QyxFQUE4QztBQUMxQyxVQUFJNnlCLGFBQWEsS0FBSyxLQUFLLENBQTNCLEVBQThCO0FBQUVBLHFCQUFhLEdBQUcsS0FBaEI7QUFBd0I7O0FBQ3hELFVBQUk3eUIsTUFBTSxLQUFLLEtBQUssQ0FBcEIsRUFBdUI7QUFBRUEsY0FBTSxHQUFHNWQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWS9yQixVQUFyQjtBQUFrQzs7QUFDM0QsVUFBSzNZLElBQUksS0FBSyxDQUFULElBQWMsQ0FBQ0EsSUFBaEIsSUFBMEJBLElBQUksWUFBWWxGLEtBQWhCLElBQXlCa0YsSUFBSSxDQUFDaEMsTUFBTCxLQUFnQixDQUF2RSxFQUNJLE9BQU9yQyxJQUFJLENBQUNvc0MsS0FBTCxDQUFXcUUsYUFBWCxDQUFQO0FBQ0pxTyxxQkFBZSxDQUFDejZDLElBQUQsRUFBT3VaLE1BQVAsQ0FBZjtBQUNBNWQsVUFBSSxDQUFDMnRDLHFCQUFMLEdBQ0kzdEMsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQi9kLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIxYixNQUFuQixHQUE0QixDQUEvQyxDQURKO0FBRUFyQyxVQUFJLENBQUMyc0MsTUFBTDtBQUNBRixnQkFBVSxDQUFDbG1CLFNBQUQsRUFBWWtxQixhQUFaLENBQVY7QUFDQTFFLHNCQUFnQjs7QUFDaEIsVUFBSS9yQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsS0FBOEIsQ0FBbEMsRUFBcUM7QUFDakNyQyxZQUFJLENBQUNvc0MsS0FBTCxDQUFXLEtBQVg7QUFDSDs7QUFDRHdCLGlCQUFXLENBQUM2QyxhQUFELENBQVg7QUFDQSxVQUFJQSxhQUFKLEVBQ0kxQyxZQUFZLENBQUMsVUFBRCxDQUFaO0FBQ1A7O0FBQ0QsYUFBU2lOLGNBQVQsQ0FBd0J6UixHQUF4QixFQUE2QjtBQUN6QixhQUFPQSxHQUFHLENBQ0w5WSxLQURFLEdBRUY2WSxHQUZFLENBRUUsVUFBVTBWLElBQVYsRUFBZ0I7QUFDckIsWUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQWhCLElBQ0EsT0FBT0EsSUFBUCxLQUFnQixRQURoQixJQUVBQSxJQUFJLFlBQVlwNUMsSUFGcEIsRUFFMEI7QUFDdEIsaUJBQU81RixJQUFJLENBQUN5YSxTQUFMLENBQWV1a0MsSUFBZixFQUFxQno0QixTQUFyQixFQUFnQyxJQUFoQyxDQUFQO0FBQ0gsU0FKRCxNQUtLLElBQUl5NEIsSUFBSSxJQUNULFFBQU9BLElBQVAsTUFBZ0IsUUFEWCxJQUVMQSxJQUFJLENBQUNsRyxJQUZBLElBR0xrRyxJQUFJLENBQUNqRyxFQUhKLEVBSUQsT0FBTztBQUNIRCxjQUFJLEVBQUU5NEMsSUFBSSxDQUFDeWEsU0FBTCxDQUFldWtDLElBQUksQ0FBQ2xHLElBQXBCLEVBQTBCdnlCLFNBQTFCLENBREg7QUFFSHd5QixZQUFFLEVBQUUvNEMsSUFBSSxDQUFDeWEsU0FBTCxDQUFldWtDLElBQUksQ0FBQ2pHLEVBQXBCLEVBQXdCeHlCLFNBQXhCO0FBRkQsU0FBUDs7QUFJSixlQUFPeTRCLElBQVA7QUFDSCxPQWpCTSxFQWtCRjdwQyxNQWxCRSxDQWtCSyxVQUFVK1QsQ0FBVixFQUFhO0FBQUUsZUFBT0EsQ0FBUDtBQUFXLE9BbEIvQixDQUFQLENBRHlCLENBbUJnQjtBQUM1Qzs7QUFDRCxhQUFTc2tCLFVBQVQsR0FBc0I7QUFDbEJ4dEMsVUFBSSxDQUFDK2QsYUFBTCxHQUFxQixFQUFyQjtBQUNBL2QsVUFBSSxDQUFDNGpDLEdBQUwsR0FBVzVqQyxJQUFJLENBQUN5YSxTQUFMLENBQWV6YSxJQUFJLENBQUMrb0MsTUFBTCxDQUFZbkYsR0FBM0IsS0FBbUMsSUFBSWgrQixJQUFKLEVBQTlDLENBRmtCLENBR2xCOztBQUNBLFVBQUlxNUMsYUFBYSxHQUFHai9DLElBQUksQ0FBQytvQyxNQUFMLENBQVkrRixXQUFaLEtBQ2YsQ0FBQzl1QyxJQUFJLENBQUM4SyxLQUFMLENBQVdvMEMsUUFBWCxLQUF3QixPQUF4QixJQUNFbC9DLElBQUksQ0FBQzhLLEtBQUwsQ0FBV28wQyxRQUFYLEtBQXdCLFVBRDNCLEtBRUdsL0MsSUFBSSxDQUFDOEssS0FBTCxDQUFXcTBDLFdBRmQsSUFHR24vQyxJQUFJLENBQUM4SyxLQUFMLENBQVdoUixLQUFYLEtBQXFCa0csSUFBSSxDQUFDOEssS0FBTCxDQUFXcTBDLFdBSG5DLEdBSUssSUFKTCxHQUtLbi9DLElBQUksQ0FBQzhLLEtBQUwsQ0FBV2hSLEtBTkQsQ0FBcEI7QUFPQSxVQUFJbWxELGFBQUosRUFDSUgsZUFBZSxDQUFDRyxhQUFELEVBQWdCai9DLElBQUksQ0FBQytvQyxNQUFMLENBQVkvckIsVUFBNUIsQ0FBZjtBQUNKaGQsVUFBSSxDQUFDNjNDLFlBQUwsR0FDSTczQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsR0FBNEIsQ0FBNUIsR0FDTXJDLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIsQ0FBbkIsQ0FETixHQUVNL2QsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLElBQ0V2ZCxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosQ0FBb0J5SCxPQUFwQixLQUFnQ2hsQixJQUFJLENBQUM0akMsR0FBTCxDQUFTNWUsT0FBVCxFQURsQyxHQUVJaGxCLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FGaEIsR0FHSXZkLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixJQUNFdGQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLENBQW9CMEgsT0FBcEIsS0FBZ0NobEIsSUFBSSxDQUFDNGpDLEdBQUwsQ0FBUzVlLE9BQVQsRUFEbEMsR0FFSWhsQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BRmhCLEdBR0l0ZCxJQUFJLENBQUM0akMsR0FUdkI7QUFVQTVqQyxVQUFJLENBQUNrdEMsV0FBTCxHQUFtQmx0QyxJQUFJLENBQUM2M0MsWUFBTCxDQUFrQnh1QixXQUFsQixFQUFuQjtBQUNBcnBCLFVBQUksQ0FBQ2l0QyxZQUFMLEdBQW9CanRDLElBQUksQ0FBQzYzQyxZQUFMLENBQWtCL3RCLFFBQWxCLEVBQXBCO0FBQ0EsVUFBSTlwQixJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsR0FBNEIsQ0FBaEMsRUFDSXJDLElBQUksQ0FBQzJ0QyxxQkFBTCxHQUE2QjN0QyxJQUFJLENBQUMrZCxhQUFMLENBQW1CLENBQW5CLENBQTdCO0FBQ0osVUFBSS9kLElBQUksQ0FBQytvQyxNQUFMLENBQVkyRyxPQUFaLEtBQXdCbnBCLFNBQTVCLEVBQ0l2bUIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTJHLE9BQVosR0FBc0IxdkMsSUFBSSxDQUFDeWEsU0FBTCxDQUFlemEsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTJHLE9BQTNCLEVBQW9DLEtBQXBDLENBQXRCO0FBQ0osVUFBSTF2QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZOEcsT0FBWixLQUF3QnRwQixTQUE1QixFQUNJdm1CLElBQUksQ0FBQytvQyxNQUFMLENBQVk4RyxPQUFaLEdBQXNCN3ZDLElBQUksQ0FBQ3lhLFNBQUwsQ0FBZXphLElBQUksQ0FBQytvQyxNQUFMLENBQVk4RyxPQUEzQixFQUFvQyxLQUFwQyxDQUF0QjtBQUNKN3ZDLFVBQUksQ0FBQzJ2QyxjQUFMLEdBQ0ksQ0FBQyxDQUFDM3ZDLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBZCxLQUNLdmQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLENBQW9CME4sUUFBcEIsS0FBaUMsQ0FBakMsSUFDR2pyQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosQ0FBb0J1TixVQUFwQixLQUFtQyxDQUR0QyxJQUVHOXFCLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixDQUFvQndOLFVBQXBCLEtBQW1DLENBSDNDLENBREo7QUFLQS9xQixVQUFJLENBQUM4dkMsY0FBTCxHQUNJLENBQUMsQ0FBQzl2QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQWQsS0FDS3RkLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixDQUFvQjJOLFFBQXBCLEtBQWlDLENBQWpDLElBQ0dqckIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLENBQW9Cd04sVUFBcEIsS0FBbUMsQ0FEdEMsSUFFRzlxQixJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosQ0FBb0J5TixVQUFwQixLQUFtQyxDQUgzQyxDQURKO0FBS0g7O0FBQ0QsYUFBU3dpQixXQUFULEdBQXVCO0FBQ25CdnRDLFVBQUksQ0FBQzhLLEtBQUwsR0FBYTZ3QyxZQUFZLEVBQXpCO0FBQ0E7O0FBQ0EsVUFBSSxDQUFDMzdDLElBQUksQ0FBQzhLLEtBQVYsRUFBaUI7QUFDYjlLLFlBQUksQ0FBQytvQyxNQUFMLENBQVlqRyxZQUFaLENBQXlCLElBQUkzUyxLQUFKLENBQVUsaUNBQVYsQ0FBekI7QUFDQTtBQUNILE9BTmtCLENBT25COzs7QUFDQW53QixVQUFJLENBQUM4SyxLQUFMLENBQVdrdEMsS0FBWCxHQUFtQmg0QyxJQUFJLENBQUM4SyxLQUFMLENBQVdsTCxJQUE5QjtBQUNBSSxVQUFJLENBQUM4SyxLQUFMLENBQVdsTCxJQUFYLEdBQWtCLE1BQWxCO0FBQ0FJLFVBQUksQ0FBQzhLLEtBQUwsQ0FBVzg2QixTQUFYLENBQXFCQyxHQUFyQixDQUF5QixpQkFBekI7QUFDQTdsQyxVQUFJLENBQUNzZixNQUFMLEdBQWN0ZixJQUFJLENBQUM4SyxLQUFuQjs7QUFDQSxVQUFJOUssSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTlHLFFBQWhCLEVBQTBCO0FBQ3RCO0FBQ0FqaUMsWUFBSSxDQUFDaWlDLFFBQUwsR0FBZ0I4RCxhQUFhLENBQUMvbEMsSUFBSSxDQUFDOEssS0FBTCxDQUFXbzBDLFFBQVosRUFBc0JsL0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWTdHLGFBQWxDLENBQTdCO0FBQ0FsaUMsWUFBSSxDQUFDc2YsTUFBTCxHQUFjdGYsSUFBSSxDQUFDaWlDLFFBQW5CO0FBQ0FqaUMsWUFBSSxDQUFDaWlDLFFBQUwsQ0FBY2tkLFdBQWQsR0FBNEJuL0MsSUFBSSxDQUFDOEssS0FBTCxDQUFXcTBDLFdBQXZDO0FBQ0FuL0MsWUFBSSxDQUFDaWlDLFFBQUwsQ0FBY29VLFFBQWQsR0FBeUJyMkMsSUFBSSxDQUFDOEssS0FBTCxDQUFXdXJDLFFBQXBDO0FBQ0FyMkMsWUFBSSxDQUFDaWlDLFFBQUwsQ0FBY3BoQyxRQUFkLEdBQXlCYixJQUFJLENBQUM4SyxLQUFMLENBQVdqSyxRQUFwQztBQUNBYixZQUFJLENBQUNpaUMsUUFBTCxDQUFjb1EsUUFBZCxHQUF5QnJ5QyxJQUFJLENBQUM4SyxLQUFMLENBQVd1bkMsUUFBcEM7QUFDQXJ5QyxZQUFJLENBQUNpaUMsUUFBTCxDQUFjcmlDLElBQWQsR0FBcUIsTUFBckI7QUFDQUksWUFBSSxDQUFDOEssS0FBTCxDQUFXKzdCLFlBQVgsQ0FBd0IsTUFBeEIsRUFBZ0MsUUFBaEM7QUFDQSxZQUFJLENBQUM3bUMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWxFLE1BQWIsSUFBdUI3a0MsSUFBSSxDQUFDOEssS0FBTCxDQUFXdzdCLFVBQXRDLEVBQ0l0bUMsSUFBSSxDQUFDOEssS0FBTCxDQUFXdzdCLFVBQVgsQ0FBc0IwTSxZQUF0QixDQUFtQ2h6QyxJQUFJLENBQUNpaUMsUUFBeEMsRUFBa0RqaUMsSUFBSSxDQUFDOEssS0FBTCxDQUFXbW9DLFdBQTdEO0FBQ1A7O0FBQ0QsVUFBSSxDQUFDanpDLElBQUksQ0FBQytvQyxNQUFMLENBQVk1ckIsVUFBakIsRUFDSW5kLElBQUksQ0FBQ3NmLE1BQUwsQ0FBWXVuQixZQUFaLENBQXlCLFVBQXpCLEVBQXFDLFVBQXJDO0FBQ0o3bUMsVUFBSSxDQUFDcTZDLGdCQUFMLEdBQXdCcjZDLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RSxlQUFaLElBQStCemtDLElBQUksQ0FBQ3NmLE1BQTVEO0FBQ0g7O0FBQ0QsYUFBU3F4QixXQUFULEdBQXVCO0FBQ25CLFVBQUl5TyxTQUFTLEdBQUdwL0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXp5QixVQUFaLEdBQ1Z0VyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZaHNCLFVBQVosR0FDSSxNQURKLEdBRUksZ0JBSE0sR0FJVixNQUpOO0FBS0EvYyxVQUFJLENBQUM0M0MsV0FBTCxHQUFtQjdSLGFBQWEsQ0FBQyxPQUFELEVBQVUvbEMsSUFBSSxDQUFDOEssS0FBTCxDQUFXNjZCLFNBQVgsR0FBdUIsbUJBQWpDLENBQWhDO0FBQ0EzbEMsVUFBSSxDQUFDNDNDLFdBQUwsQ0FBaUJ2RixRQUFqQixHQUE0QixDQUE1QjtBQUNBcnlDLFVBQUksQ0FBQzQzQyxXQUFMLENBQWlCaDRDLElBQWpCLEdBQXdCdy9DLFNBQXhCO0FBQ0FwL0MsVUFBSSxDQUFDNDNDLFdBQUwsQ0FBaUJ2QixRQUFqQixHQUE0QnIyQyxJQUFJLENBQUM4SyxLQUFMLENBQVd1ckMsUUFBdkM7QUFDQXIyQyxVQUFJLENBQUM0M0MsV0FBTCxDQUFpQi8yQyxRQUFqQixHQUE0QmIsSUFBSSxDQUFDOEssS0FBTCxDQUFXakssUUFBdkM7QUFDQWIsVUFBSSxDQUFDNDNDLFdBQUwsQ0FBaUJ1SCxXQUFqQixHQUErQm4vQyxJQUFJLENBQUM4SyxLQUFMLENBQVdxMEMsV0FBMUM7QUFDQW4vQyxVQUFJLENBQUNxL0MsZUFBTCxHQUNJRCxTQUFTLEtBQUssZ0JBQWQsR0FDTSxlQUROLEdBRU1BLFNBQVMsS0FBSyxNQUFkLEdBQ0ksT0FESixHQUVJLE9BTGQ7O0FBTUEsVUFBSXAvQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CMWIsTUFBbkIsR0FBNEIsQ0FBaEMsRUFBbUM7QUFDL0JyQyxZQUFJLENBQUM0M0MsV0FBTCxDQUFpQjBILFlBQWpCLEdBQWdDdC9DLElBQUksQ0FBQzQzQyxXQUFMLENBQWlCOTlDLEtBQWpCLEdBQXlCa0csSUFBSSxDQUFDcWQsVUFBTCxDQUFnQnJkLElBQUksQ0FBQytkLGFBQUwsQ0FBbUIsQ0FBbkIsQ0FBaEIsRUFBdUMvZCxJQUFJLENBQUNxL0MsZUFBNUMsQ0FBekQ7QUFDSDs7QUFDRCxVQUFJci9DLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBaEIsRUFDSXZkLElBQUksQ0FBQzQzQyxXQUFMLENBQWlCbHVDLEdBQWpCLEdBQXVCMUosSUFBSSxDQUFDcWQsVUFBTCxDQUFnQnJkLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBNUIsRUFBcUMsT0FBckMsQ0FBdkI7QUFDSixVQUFJdmQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFoQixFQUNJdGQsSUFBSSxDQUFDNDNDLFdBQUwsQ0FBaUJqdUMsR0FBakIsR0FBdUIzSixJQUFJLENBQUNxZCxVQUFMLENBQWdCcmQsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUE1QixFQUFxQyxPQUFyQyxDQUF2QjtBQUNKLFVBQUl0ZCxJQUFJLENBQUM4SyxLQUFMLENBQVdxc0MsWUFBWCxDQUF3QixNQUF4QixDQUFKLEVBQ0luM0MsSUFBSSxDQUFDNDNDLFdBQUwsQ0FBaUJodUMsSUFBakIsR0FBd0IxRCxNQUFNLENBQUNsRyxJQUFJLENBQUM4SyxLQUFMLENBQVdxc0MsWUFBWCxDQUF3QixNQUF4QixDQUFELENBQTlCO0FBQ0puM0MsVUFBSSxDQUFDOEssS0FBTCxDQUFXbEwsSUFBWCxHQUFrQixRQUFsQjtBQUNBLFVBQUlJLElBQUksQ0FBQ2lpQyxRQUFMLEtBQWtCMWIsU0FBdEIsRUFDSXZtQixJQUFJLENBQUNpaUMsUUFBTCxDQUFjcmlDLElBQWQsR0FBcUIsUUFBckI7O0FBQ0osVUFBSTtBQUNBLFlBQUlJLElBQUksQ0FBQzhLLEtBQUwsQ0FBV3c3QixVQUFmLEVBQ0l0bUMsSUFBSSxDQUFDOEssS0FBTCxDQUFXdzdCLFVBQVgsQ0FBc0IwTSxZQUF0QixDQUFtQ2h6QyxJQUFJLENBQUM0M0MsV0FBeEMsRUFBcUQ1M0MsSUFBSSxDQUFDOEssS0FBTCxDQUFXbW9DLFdBQWhFO0FBQ1AsT0FIRCxDQUlBLE9BQU9wSyxFQUFQLEVBQVcsQ0FBRzs7QUFDZDF2QyxVQUFJLENBQUM2RyxJQUFJLENBQUM0M0MsV0FBTixFQUFtQixRQUFuQixFQUE2QixVQUFVeHdDLENBQVYsRUFBYTtBQUMxQ3BILFlBQUksQ0FBQ21qQyxPQUFMLENBQWE0RCxjQUFjLENBQUMzL0IsQ0FBRCxDQUFkLENBQWtCdE4sS0FBL0IsRUFBc0MsS0FBdEMsRUFBNkNrRyxJQUFJLENBQUNxL0MsZUFBbEQ7QUFDQXRSLG9CQUFZLENBQUMsVUFBRCxDQUFaO0FBQ0FBLG9CQUFZLENBQUMsU0FBRCxDQUFaO0FBQ0gsT0FKRyxDQUFKO0FBS0g7O0FBQ0QsYUFBU25CLE1BQVQsQ0FBZ0J4bEMsQ0FBaEIsRUFBbUI7QUFDZixVQUFJcEgsSUFBSSxDQUFDb3RDLE1BQUwsS0FBZ0IsSUFBcEIsRUFDSSxPQUFPcHRDLElBQUksQ0FBQ3FzQyxLQUFMLEVBQVA7QUFDSnJzQyxVQUFJLENBQUMwc0MsSUFBTCxDQUFVdGxDLENBQVY7QUFDSDs7QUFDRCxhQUFTMm1DLFlBQVQsQ0FBc0J0akMsS0FBdEIsRUFBNkJyTSxJQUE3QixFQUFtQztBQUMvQjtBQUNBLFVBQUk0QixJQUFJLENBQUMrb0MsTUFBTCxLQUFnQnhpQixTQUFwQixFQUNJO0FBQ0osVUFBSWc1QixLQUFLLEdBQUd2L0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXQrQixLQUFaLENBQVo7O0FBQ0EsVUFBSTgwQyxLQUFLLEtBQUtoNUIsU0FBVixJQUF1Qmc1QixLQUFLLENBQUNsOUMsTUFBTixHQUFlLENBQTFDLEVBQTZDO0FBQ3pDLGFBQUssSUFBSTVJLENBQUMsR0FBRyxDQUFiLEVBQWdCOGxELEtBQUssQ0FBQzlsRCxDQUFELENBQUwsSUFBWUEsQ0FBQyxHQUFHOGxELEtBQUssQ0FBQ2w5QyxNQUF0QyxFQUE4QzVJLENBQUMsRUFBL0M7QUFDSThsRCxlQUFLLENBQUM5bEQsQ0FBRCxDQUFMLENBQVN1RyxJQUFJLENBQUMrZCxhQUFkLEVBQTZCL2QsSUFBSSxDQUFDOEssS0FBTCxDQUFXaFIsS0FBeEMsRUFBK0NrRyxJQUEvQyxFQUFxRDVCLElBQXJEO0FBREo7QUFFSDs7QUFDRCxVQUFJcU0sS0FBSyxLQUFLLFVBQWQsRUFBMEI7QUFDdEJ6SyxZQUFJLENBQUM4SyxLQUFMLENBQVdvbkMsYUFBWCxDQUF5QkQsV0FBVyxDQUFDLFFBQUQsQ0FBcEMsRUFEc0IsQ0FFdEI7O0FBQ0FqeUMsWUFBSSxDQUFDOEssS0FBTCxDQUFXb25DLGFBQVgsQ0FBeUJELFdBQVcsQ0FBQyxPQUFELENBQXBDO0FBQ0g7QUFDSjs7QUFDRCxhQUFTQSxXQUFULENBQXFCaDNDLElBQXJCLEVBQTJCO0FBQ3ZCLFVBQUltTSxDQUFDLEdBQUdGLFFBQVEsQ0FBQytxQyxXQUFULENBQXFCLE9BQXJCLENBQVI7QUFDQTdxQyxPQUFDLENBQUNvNEMsU0FBRixDQUFZdmtELElBQVosRUFBa0IsSUFBbEIsRUFBd0IsSUFBeEI7QUFDQSxhQUFPbU0sQ0FBUDtBQUNIOztBQUNELGFBQVNvc0MsY0FBVCxDQUF3Qm52QyxJQUF4QixFQUE4QjtBQUMxQixXQUFLLElBQUk1SyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdUcsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQjFiLE1BQXZDLEVBQStDNUksQ0FBQyxFQUFoRCxFQUFvRDtBQUNoRCxZQUFJaXhDLFlBQVksQ0FBQzFxQyxJQUFJLENBQUMrZCxhQUFMLENBQW1CdGtCLENBQW5CLENBQUQsRUFBd0I0SyxJQUF4QixDQUFaLEtBQThDLENBQWxELEVBQ0ksT0FBTyxLQUFLNUssQ0FBWjtBQUNQOztBQUNELGFBQU8sS0FBUDtBQUNIOztBQUNELGFBQVNpNkMsYUFBVCxDQUF1QnJ2QyxJQUF2QixFQUE2QjtBQUN6QixVQUFJckUsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXRGLElBQVosS0FBcUIsT0FBckIsSUFBZ0N6akMsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQjFiLE1BQW5CLEdBQTRCLENBQWhFLEVBQ0ksT0FBTyxLQUFQO0FBQ0osYUFBUXFvQyxZQUFZLENBQUNybUMsSUFBRCxFQUFPckUsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQixDQUFuQixDQUFQLENBQVosSUFBNkMsQ0FBN0MsSUFDSjJzQixZQUFZLENBQUNybUMsSUFBRCxFQUFPckUsSUFBSSxDQUFDK2QsYUFBTCxDQUFtQixDQUFuQixDQUFQLENBQVosSUFBNkMsQ0FEakQ7QUFFSDs7QUFDRCxhQUFTKzRCLDRCQUFULEdBQXdDO0FBQ3BDLFVBQUk5MkMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWWhzQixVQUFaLElBQTBCL2MsSUFBSSxDQUFDbXBDLFFBQS9CLElBQTJDLENBQUNucEMsSUFBSSxDQUFDa3hDLFFBQXJELEVBQ0k7QUFDSmx4QyxVQUFJLENBQUN3MkMsWUFBTCxDQUFrQi9MLE9BQWxCLENBQTBCLFVBQVUwTCxXQUFWLEVBQXVCMThDLENBQXZCLEVBQTBCO0FBQ2hELFlBQUlrcUIsQ0FBQyxHQUFHLElBQUkvZCxJQUFKLENBQVM1RixJQUFJLENBQUNrdEMsV0FBZCxFQUEyQmx0QyxJQUFJLENBQUNpdEMsWUFBaEMsRUFBOEMsQ0FBOUMsQ0FBUjtBQUNBdHBCLFNBQUMsQ0FBQzhqQixRQUFGLENBQVd6bkMsSUFBSSxDQUFDaXRDLFlBQUwsR0FBb0J4ekMsQ0FBL0I7O0FBQ0EsWUFBSXVHLElBQUksQ0FBQytvQyxNQUFMLENBQVluRSxVQUFaLEdBQXlCLENBQXpCLElBQ0E1a0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXJGLGlCQUFaLEtBQWtDLFFBRHRDLEVBQ2dEO0FBQzVDMWpDLGNBQUksQ0FBQ3kyQyxhQUFMLENBQW1CaDlDLENBQW5CLEVBQXNCdXNDLFdBQXRCLEdBQ0ltQixVQUFVLENBQUN4akIsQ0FBQyxDQUFDbUcsUUFBRixFQUFELEVBQWU5cEIsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXBFLHFCQUEzQixFQUFrRDNrQyxJQUFJLENBQUNpcEMsSUFBdkQsQ0FBVixHQUF5RSxHQUQ3RTtBQUVILFNBSkQsTUFLSztBQUNEanBDLGNBQUksQ0FBQ3kxQyx1QkFBTCxDQUE2QjM3QyxLQUE3QixHQUFxQzZwQixDQUFDLENBQUNtRyxRQUFGLEdBQWExbEIsUUFBYixFQUFyQztBQUNIOztBQUNEK3hDLG1CQUFXLENBQUNyOEMsS0FBWixHQUFvQjZwQixDQUFDLENBQUMwRixXQUFGLEdBQWdCamxCLFFBQWhCLEVBQXBCO0FBQ0gsT0FaRDtBQWFBcEUsVUFBSSxDQUFDdzNDLG1CQUFMLEdBQ0l4M0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLEtBQXdCZ0osU0FBeEIsS0FDS3ZtQixJQUFJLENBQUNrdEMsV0FBTCxLQUFxQmx0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZeHJCLE9BQVosQ0FBb0I4TCxXQUFwQixFQUFyQixHQUNLcnBCLElBQUksQ0FBQ2l0QyxZQUFMLElBQXFCanRDLElBQUksQ0FBQytvQyxNQUFMLENBQVl4ckIsT0FBWixDQUFvQnVNLFFBQXBCLEVBRDFCLEdBRUs5cEIsSUFBSSxDQUFDa3RDLFdBQUwsR0FBbUJsdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXhyQixPQUFaLENBQW9COEwsV0FBcEIsRUFIN0IsQ0FESjtBQUtBcnBCLFVBQUksQ0FBQ3kzQyxtQkFBTCxHQUNJejNDLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixLQUF3QmlKLFNBQXhCLEtBQ0t2bUIsSUFBSSxDQUFDa3RDLFdBQUwsS0FBcUJsdEMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXpyQixPQUFaLENBQW9CK0wsV0FBcEIsRUFBckIsR0FDS3JwQixJQUFJLENBQUNpdEMsWUFBTCxHQUFvQixDQUFwQixHQUF3Qmp0QyxJQUFJLENBQUMrb0MsTUFBTCxDQUFZenJCLE9BQVosQ0FBb0J3TSxRQUFwQixFQUQ3QixHQUVLOXBCLElBQUksQ0FBQ2t0QyxXQUFMLEdBQW1CbHRDLElBQUksQ0FBQytvQyxNQUFMLENBQVl6ckIsT0FBWixDQUFvQitMLFdBQXBCLEVBSDdCLENBREo7QUFLSDs7QUFDRCxhQUFTbzJCLFVBQVQsQ0FBb0I3aEMsTUFBcEIsRUFBNEI7QUFDeEIsYUFBTzVkLElBQUksQ0FBQytkLGFBQUwsQ0FDRnVyQixHQURFLENBQ0UsVUFBVW9XLElBQVYsRUFBZ0I7QUFBRSxlQUFPMS9DLElBQUksQ0FBQ3FkLFVBQUwsQ0FBZ0JxaUMsSUFBaEIsRUFBc0I5aEMsTUFBdEIsQ0FBUDtBQUF1QyxPQUQzRCxFQUVGekksTUFGRSxDQUVLLFVBQVV3TyxDQUFWLEVBQWFscUIsQ0FBYixFQUFnQjh2QyxHQUFoQixFQUFxQjtBQUM3QixlQUFPdnBDLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BQXJCLElBQ0h6akMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXp5QixVQURULElBRUhpekIsR0FBRyxDQUFDcmhCLE9BQUosQ0FBWXZFLENBQVosTUFBbUJscUIsQ0FGdkI7QUFHSCxPQU5NLEVBT0YrdUIsSUFQRSxDQU9HeG9CLElBQUksQ0FBQytvQyxNQUFMLENBQVl0RixJQUFaLEtBQXFCLE9BQXJCLEdBQ0p6akMsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWXJHLFdBRFIsR0FFSjFpQyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVcnFCLGNBVFQsQ0FBUDtBQVVIO0FBQ0Q7QUFDUjtBQUNBOzs7QUFDUSxhQUFTZ3ZCLFdBQVQsQ0FBcUI2QyxhQUFyQixFQUFvQztBQUNoQyxVQUFJQSxhQUFhLEtBQUssS0FBSyxDQUEzQixFQUE4QjtBQUFFQSxxQkFBYSxHQUFHLElBQWhCO0FBQXVCOztBQUN2RCxVQUFJendDLElBQUksQ0FBQzQzQyxXQUFMLEtBQXFCcnhCLFNBQXJCLElBQWtDdm1CLElBQUksQ0FBQ3EvQyxlQUEzQyxFQUE0RDtBQUN4RHIvQyxZQUFJLENBQUM0M0MsV0FBTCxDQUFpQjk5QyxLQUFqQixHQUNJa0csSUFBSSxDQUFDMnRDLHFCQUFMLEtBQStCcG5CLFNBQS9CLEdBQ012bUIsSUFBSSxDQUFDcWQsVUFBTCxDQUFnQnJkLElBQUksQ0FBQzJ0QyxxQkFBckIsRUFBNEMzdEMsSUFBSSxDQUFDcS9DLGVBQWpELENBRE4sR0FFTSxFQUhWO0FBSUg7O0FBQ0RyL0MsVUFBSSxDQUFDOEssS0FBTCxDQUFXaFIsS0FBWCxHQUFtQjJsRCxVQUFVLENBQUN6L0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWS9yQixVQUFiLENBQTdCOztBQUNBLFVBQUloZCxJQUFJLENBQUNpaUMsUUFBTCxLQUFrQjFiLFNBQXRCLEVBQWlDO0FBQzdCdm1CLFlBQUksQ0FBQ2lpQyxRQUFMLENBQWNub0MsS0FBZCxHQUFzQjJsRCxVQUFVLENBQUN6L0MsSUFBSSxDQUFDK29DLE1BQUwsQ0FBWS9HLFNBQWIsQ0FBaEM7QUFDSDs7QUFDRCxVQUFJeU8sYUFBYSxLQUFLLEtBQXRCLEVBQ0kxQyxZQUFZLENBQUMsZUFBRCxDQUFaO0FBQ1A7O0FBQ0QsYUFBU29ELGVBQVQsQ0FBeUIvcEMsQ0FBekIsRUFBNEI7QUFDeEIsVUFBSWdwQyxXQUFXLEdBQUdySixjQUFjLENBQUMzL0IsQ0FBRCxDQUFoQztBQUNBLFVBQUl1NEMsV0FBVyxHQUFHMy9DLElBQUksQ0FBQ3UyQyxZQUFMLENBQWtCeEUsUUFBbEIsQ0FBMkIzQixXQUEzQixDQUFsQjtBQUNBLFVBQUl3UCxXQUFXLEdBQUc1L0MsSUFBSSxDQUFDMDJDLFlBQUwsQ0FBa0IzRSxRQUFsQixDQUEyQjNCLFdBQTNCLENBQWxCOztBQUNBLFVBQUl1UCxXQUFXLElBQUlDLFdBQW5CLEVBQWdDO0FBQzVCMVQsbUJBQVcsQ0FBQ3lULFdBQVcsR0FBRyxDQUFDLENBQUosR0FBUSxDQUFwQixDQUFYO0FBQ0gsT0FGRCxNQUdLLElBQUkzL0MsSUFBSSxDQUFDdzJDLFlBQUwsQ0FBa0J0dUIsT0FBbEIsQ0FBMEJrb0IsV0FBMUIsS0FBMEMsQ0FBOUMsRUFBaUQ7QUFDbERBLG1CQUFXLENBQUM3N0IsTUFBWjtBQUNILE9BRkksTUFHQSxJQUFJNjdCLFdBQVcsQ0FBQ3hLLFNBQVosQ0FBc0JtTSxRQUF0QixDQUErQixTQUEvQixDQUFKLEVBQStDO0FBQ2hEL3hDLFlBQUksQ0FBQ21zQyxVQUFMLENBQWdCbnNDLElBQUksQ0FBQ2t0QyxXQUFMLEdBQW1CLENBQW5DO0FBQ0gsT0FGSSxNQUdBLElBQUlrRCxXQUFXLENBQUN4SyxTQUFaLENBQXNCbU0sUUFBdEIsQ0FBK0IsV0FBL0IsQ0FBSixFQUFpRDtBQUNsRC94QyxZQUFJLENBQUNtc0MsVUFBTCxDQUFnQm5zQyxJQUFJLENBQUNrdEMsV0FBTCxHQUFtQixDQUFuQztBQUNIO0FBQ0o7O0FBQ0QsYUFBUzhCLFdBQVQsQ0FBcUI1bkMsQ0FBckIsRUFBd0I7QUFDcEJBLE9BQUMsQ0FBQ2d5QyxjQUFGO0FBQ0EsVUFBSXlHLFNBQVMsR0FBR3o0QyxDQUFDLENBQUN4SCxJQUFGLEtBQVcsU0FBM0I7QUFBQSxVQUFzQ3d3QyxXQUFXLEdBQUdySixjQUFjLENBQUMzL0IsQ0FBRCxDQUFsRTtBQUFBLFVBQXVFMEQsS0FBSyxHQUFHc2xDLFdBQS9FOztBQUNBLFVBQUlwd0MsSUFBSSxDQUFDZ2YsSUFBTCxLQUFjdUgsU0FBZCxJQUEyQjZwQixXQUFXLEtBQUtwd0MsSUFBSSxDQUFDZ2YsSUFBcEQsRUFBMEQ7QUFDdERoZixZQUFJLENBQUNnZixJQUFMLENBQVVnbkIsV0FBVixHQUNJaG1DLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVqcUIsSUFBVixDQUFlaW1CLEdBQUcsQ0FBQ2psQyxJQUFJLENBQUNnZixJQUFMLENBQVVnbkIsV0FBVixLQUEwQmhtQyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZSxDQUFmLENBQTNCLENBQWxCLENBREo7QUFFSDs7QUFDRCxVQUFJdFYsR0FBRyxHQUFHZ1MsVUFBVSxDQUFDNVEsS0FBSyxDQUFDcXNDLFlBQU4sQ0FBbUIsS0FBbkIsQ0FBRCxDQUFwQjtBQUFBLFVBQWlEeHRDLEdBQUcsR0FBRytSLFVBQVUsQ0FBQzVRLEtBQUssQ0FBQ3FzQyxZQUFOLENBQW1CLEtBQW5CLENBQUQsQ0FBakU7QUFBQSxVQUE4RnZ0QyxJQUFJLEdBQUc4UixVQUFVLENBQUM1USxLQUFLLENBQUNxc0MsWUFBTixDQUFtQixNQUFuQixDQUFELENBQS9HO0FBQUEsVUFBNkkySSxRQUFRLEdBQUd6NkMsUUFBUSxDQUFDeUYsS0FBSyxDQUFDaFIsS0FBUCxFQUFjLEVBQWQsQ0FBaEs7QUFBQSxVQUFtTHUyQyxLQUFLLEdBQUdqcEMsQ0FBQyxDQUFDaXBDLEtBQUYsS0FDdEx3UCxTQUFTLEdBQUl6NEMsQ0FBQyxDQUFDMjRDLEtBQUYsS0FBWSxFQUFaLEdBQWlCLENBQWpCLEdBQXFCLENBQUMsQ0FBMUIsR0FBK0IsQ0FEOEksQ0FBM0w7QUFFQSxVQUFJdmdELFFBQVEsR0FBR3NnRCxRQUFRLEdBQUdsMkMsSUFBSSxHQUFHeW1DLEtBQWpDOztBQUNBLFVBQUksT0FBT3ZsQyxLQUFLLENBQUNoUixLQUFiLEtBQXVCLFdBQXZCLElBQXNDZ1IsS0FBSyxDQUFDaFIsS0FBTixDQUFZdUksTUFBWixLQUF1QixDQUFqRSxFQUFvRTtBQUNoRSxZQUFJMjlDLFVBQVUsR0FBR2wxQyxLQUFLLEtBQUs5SyxJQUFJLENBQUNzdkMsV0FBaEM7QUFBQSxZQUE2QzJRLFlBQVksR0FBR24xQyxLQUFLLEtBQUs5SyxJQUFJLENBQUN1dkMsYUFBM0U7O0FBQ0EsWUFBSS92QyxRQUFRLEdBQUdrSyxHQUFmLEVBQW9CO0FBQ2hCbEssa0JBQVEsR0FDSm1LLEdBQUcsR0FDQ25LLFFBREosR0FFSXlsQyxHQUFHLENBQUMsQ0FBQythLFVBQUYsQ0FGUCxJQUdLL2EsR0FBRyxDQUFDK2EsVUFBRCxDQUFILElBQW1CL2EsR0FBRyxDQUFDLENBQUNqbEMsSUFBSSxDQUFDZ2YsSUFBUCxDQUgzQixDQURKO0FBS0EsY0FBSWloQyxZQUFKLEVBQ0luTyxpQkFBaUIsQ0FBQ3ZyQixTQUFELEVBQVksQ0FBQyxDQUFiLEVBQWdCdm1CLElBQUksQ0FBQ3N2QyxXQUFyQixDQUFqQjtBQUNQLFNBUkQsTUFTSyxJQUFJOXZDLFFBQVEsR0FBR21LLEdBQWYsRUFBb0I7QUFDckJuSyxrQkFBUSxHQUNKc0wsS0FBSyxLQUFLOUssSUFBSSxDQUFDc3ZDLFdBQWYsR0FBNkI5dkMsUUFBUSxHQUFHbUssR0FBWCxHQUFpQnM3QixHQUFHLENBQUMsQ0FBQ2psQyxJQUFJLENBQUNnZixJQUFQLENBQWpELEdBQWdFdFYsR0FEcEU7QUFFQSxjQUFJdTJDLFlBQUosRUFDSW5PLGlCQUFpQixDQUFDdnJCLFNBQUQsRUFBWSxDQUFaLEVBQWV2bUIsSUFBSSxDQUFDc3ZDLFdBQXBCLENBQWpCO0FBQ1A7O0FBQ0QsWUFBSXR2QyxJQUFJLENBQUNnZixJQUFMLElBQ0FnaEMsVUFEQSxLQUVDcDJDLElBQUksS0FBSyxDQUFULEdBQ0twSyxRQUFRLEdBQUdzZ0QsUUFBWCxLQUF3QixFQUQ3QixHQUVLbC9DLElBQUksQ0FBQ2dwQixHQUFMLENBQVNwcUIsUUFBUSxHQUFHc2dELFFBQXBCLElBQWdDbDJDLElBSnRDLENBQUosRUFJaUQ7QUFDN0M1SixjQUFJLENBQUNnZixJQUFMLENBQVVnbkIsV0FBVixHQUNJaG1DLElBQUksQ0FBQ2lwQyxJQUFMLENBQVVqcUIsSUFBVixDQUFlaW1CLEdBQUcsQ0FBQ2psQyxJQUFJLENBQUNnZixJQUFMLENBQVVnbkIsV0FBVixLQUEwQmhtQyxJQUFJLENBQUNpcEMsSUFBTCxDQUFVanFCLElBQVYsQ0FBZSxDQUFmLENBQTNCLENBQWxCLENBREo7QUFFSDs7QUFDRGxVLGFBQUssQ0FBQ2hSLEtBQU4sR0FBYzZ2QixHQUFHLENBQUNucUIsUUFBRCxDQUFqQjtBQUNIO0FBQ0o7O0FBQ0QydEMsUUFBSTtBQUNKLFdBQU9udEMsSUFBUDtBQUNIO0FBQ0Q7OztBQUNBLFdBQVNrZ0QsVUFBVCxDQUFvQkMsUUFBcEIsRUFBOEJwWCxNQUE5QixFQUFzQztBQUNsQztBQUNBLFFBQUlxWCxLQUFLLEdBQUdqaEQsS0FBSyxDQUFDZ2xCLFNBQU4sQ0FBZ0JzTSxLQUFoQixDQUNQaE4sSUFETyxDQUNGMDhCLFFBREUsRUFFUGhyQyxNQUZPLENBRUEsVUFBVStULENBQVYsRUFBYTtBQUFFLGFBQU9BLENBQUMsWUFBWW0zQixXQUFwQjtBQUFrQyxLQUZqRCxDQUFaO0FBR0EsUUFBSUMsU0FBUyxHQUFHLEVBQWhCOztBQUNBLFNBQUssSUFBSTdtRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMm1ELEtBQUssQ0FBQy85QyxNQUExQixFQUFrQzVJLENBQUMsRUFBbkMsRUFBdUM7QUFDbkMsVUFBSXlzQyxJQUFJLEdBQUdrYSxLQUFLLENBQUMzbUQsQ0FBRCxDQUFoQjs7QUFDQSxVQUFJO0FBQ0EsWUFBSXlzQyxJQUFJLENBQUNpUixZQUFMLENBQWtCLGNBQWxCLE1BQXNDLElBQTFDLEVBQ0k7O0FBQ0osWUFBSWpSLElBQUksQ0FBQ2dhLFVBQUwsS0FBb0IzNUIsU0FBeEIsRUFBbUM7QUFDL0IyZixjQUFJLENBQUNnYSxVQUFMLENBQWdCM1QsT0FBaEI7O0FBQ0FyRyxjQUFJLENBQUNnYSxVQUFMLEdBQWtCMzVCLFNBQWxCO0FBQ0g7O0FBQ0QyZixZQUFJLENBQUNnYSxVQUFMLEdBQWtCNVUsaUJBQWlCLENBQUNwRixJQUFELEVBQU82QyxNQUFNLElBQUksRUFBakIsQ0FBbkM7QUFDQXVYLGlCQUFTLENBQUM5UCxJQUFWLENBQWV0SyxJQUFJLENBQUNnYSxVQUFwQjtBQUNILE9BVEQsQ0FVQSxPQUFPOTRDLENBQVAsRUFBVTtBQUNOMUgsZUFBTyxDQUFDbUwsS0FBUixDQUFjekQsQ0FBZDtBQUNIO0FBQ0o7O0FBQ0QsV0FBT2s1QyxTQUFTLENBQUNqK0MsTUFBVixLQUFxQixDQUFyQixHQUF5QmkrQyxTQUFTLENBQUMsQ0FBRCxDQUFsQyxHQUF3Q0EsU0FBL0M7QUFDSDtBQUNEOzs7QUFDQSxNQUFJLE9BQU9ELFdBQVAsS0FBdUIsV0FBdkIsSUFDQSxPQUFPRSxjQUFQLEtBQTBCLFdBRDFCLElBRUEsT0FBT0MsUUFBUCxLQUFvQixXQUZ4QixFQUVxQztBQUNqQztBQUNBRCxrQkFBYyxDQUFDcDhCLFNBQWYsQ0FBeUJsSCxTQUF6QixHQUFxQ3VqQyxRQUFRLENBQUNyOEIsU0FBVCxDQUFtQmxILFNBQW5CLEdBQStCLFVBQVU4ckIsTUFBVixFQUFrQjtBQUNsRixhQUFPbVgsVUFBVSxDQUFDLElBQUQsRUFBT25YLE1BQVAsQ0FBakI7QUFDSCxLQUZEOztBQUdBc1gsZUFBVyxDQUFDbDhCLFNBQVosQ0FBc0JsSCxTQUF0QixHQUFrQyxVQUFVOHJCLE1BQVYsRUFBa0I7QUFDaEQsYUFBT21YLFVBQVUsQ0FBQyxDQUFDLElBQUQsQ0FBRCxFQUFTblgsTUFBVCxDQUFqQjtBQUNILEtBRkQ7QUFHSDtBQUNEOzs7QUFDQSxNQUFJOXJCLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVV3akMsUUFBVixFQUFvQjFYLE1BQXBCLEVBQTRCO0FBQ3hDLFFBQUksT0FBTzBYLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDOUIsYUFBT1AsVUFBVSxDQUFDdjRDLE1BQU0sQ0FBQ1QsUUFBUCxDQUFnQndwQyxnQkFBaEIsQ0FBaUMrUCxRQUFqQyxDQUFELEVBQTZDMVgsTUFBN0MsQ0FBakI7QUFDSCxLQUZELE1BR0ssSUFBSTBYLFFBQVEsWUFBWUMsSUFBeEIsRUFBOEI7QUFDL0IsYUFBT1IsVUFBVSxDQUFDLENBQUNPLFFBQUQsQ0FBRCxFQUFhMVgsTUFBYixDQUFqQjtBQUNILEtBRkksTUFHQTtBQUNELGFBQU9tWCxVQUFVLENBQUNPLFFBQUQsRUFBVzFYLE1BQVgsQ0FBakI7QUFDSDtBQUNKLEdBVkQ7QUFXQTs7O0FBQ0E5ckIsV0FBUyxDQUFDd3VCLGFBQVYsR0FBMEIsRUFBMUI7QUFDQXh1QixXQUFTLENBQUM0K0IsS0FBVixHQUFrQjtBQUNkbHFCLE1BQUUsRUFBRXVQLE9BQVEsQ0FBQyxFQUFELEVBQUs0RCxPQUFMLENBREU7QUFFZGdYLFdBQU8sRUFBRTVhLE9BQVEsQ0FBQyxFQUFELEVBQUs0RCxPQUFMO0FBRkgsR0FBbEI7O0FBSUE3bkIsV0FBUyxDQUFDMGpDLFFBQVYsR0FBcUIsVUFBVTFYLElBQVYsRUFBZ0I7QUFDakNoc0IsYUFBUyxDQUFDNCtCLEtBQVYsQ0FBZ0JDLE9BQWhCLEdBQTBCNWEsT0FBUSxDQUFDQSxPQUFRLENBQUMsRUFBRCxFQUFLamtCLFNBQVMsQ0FBQzQrQixLQUFWLENBQWdCQyxPQUFyQixDQUFULEVBQXdDN1MsSUFBeEMsQ0FBbEM7QUFDSCxHQUZEOztBQUdBaHNCLFdBQVMsQ0FBQzJqQyxXQUFWLEdBQXdCLFVBQVU3WCxNQUFWLEVBQWtCO0FBQ3RDOXJCLGFBQVMsQ0FBQ3d1QixhQUFWLEdBQTBCdkssT0FBUSxDQUFDQSxPQUFRLENBQUMsRUFBRCxFQUFLamtCLFNBQVMsQ0FBQ3d1QixhQUFmLENBQVQsRUFBd0MxQyxNQUF4QyxDQUFsQztBQUNILEdBRkQ7O0FBR0E5ckIsV0FBUyxDQUFDeEMsU0FBVixHQUFzQit1QixnQkFBZ0IsQ0FBQyxFQUFELENBQXRDO0FBQ0F2c0IsV0FBUyxDQUFDSSxVQUFWLEdBQXVCdXJCLG1CQUFtQixDQUFDLEVBQUQsQ0FBMUM7QUFDQTNyQixXQUFTLENBQUN5dEIsWUFBVixHQUF5QkEsWUFBekI7QUFDQTs7QUFDQSxNQUFJLE9BQU9tVyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDLE9BQU9BLE1BQU0sQ0FBQzduRCxFQUFkLEtBQXFCLFdBQTFELEVBQXVFO0FBQ25FNm5ELFVBQU0sQ0FBQzduRCxFQUFQLENBQVVpa0IsU0FBVixHQUFzQixVQUFVOHJCLE1BQVYsRUFBa0I7QUFDcEMsYUFBT21YLFVBQVUsQ0FBQyxJQUFELEVBQU9uWCxNQUFQLENBQWpCO0FBQ0gsS0FGRDtBQUdILEdBamxGZ0IsQ0FrbEZqQjs7O0FBQ0FuakMsTUFBSSxDQUFDdWUsU0FBTCxDQUFlMjhCLE9BQWYsR0FBeUIsVUFBVXRTLElBQVYsRUFBZ0I7QUFDckMsV0FBTyxJQUFJNW9DLElBQUosQ0FBUyxLQUFLeWpCLFdBQUwsRUFBVCxFQUE2QixLQUFLUyxRQUFMLEVBQTdCLEVBQThDLEtBQUtDLE9BQUwsTUFBa0IsT0FBT3lrQixJQUFQLEtBQWdCLFFBQWhCLEdBQTJCbnBDLFFBQVEsQ0FBQ21wQyxJQUFELEVBQU8sRUFBUCxDQUFuQyxHQUFnREEsSUFBbEUsQ0FBOUMsQ0FBUDtBQUNILEdBRkQ7O0FBR0EsTUFBSSxPQUFPN21DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDL0JBLFVBQU0sQ0FBQ3NWLFNBQVAsR0FBbUJBLFNBQW5CO0FBQ0g7O0FBRUQsU0FBT0EsU0FBUDtBQUVILENBaG1GQSxDQUFELEM7Ozs7Ozs7Ozs7Ozs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOGpDLEdBQUcsR0FBSSxZQUFXO0FBQ2xCLE1BQUlDLGVBQWUsR0FBRyx5Q0FBdEI7QUFDQSxNQUFJQyx3QkFBd0IsR0FBRyxzREFBL0I7QUFDQSxNQUFJQyx3QkFBd0IsR0FBRywyREFBL0I7QUFDQSxNQUFJQyw0QkFBSixDQUprQixDQUlnQjs7QUFFbEMsV0FBU0Msb0JBQVQsQ0FBOEJsRCxLQUE5QixFQUFxQztBQUNqQyxRQUFJbUQsS0FBSyxHQUFHbkQsS0FBSyxDQUFDTCxRQUFOLElBQWtCSyxLQUFLLENBQUNtRCxLQUF4QixJQUFpQyxFQUE3QztBQUNBLFFBQUlDLE9BQU8sR0FBRyxFQUFkOztBQUNBLFNBQUssSUFBSTduRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNG5ELEtBQUssQ0FBQ2gvQyxNQUExQixFQUFrQzVJLENBQUMsRUFBbkMsRUFBdUM7QUFDbkM7QUFDQSxVQUFJOG5ELFlBQVksR0FBR0MsMkJBQTJCLENBQUNILEtBQUssQ0FBQzVuRCxDQUFELENBQUwsQ0FBUzhuRCxZQUFWLENBQTlDOztBQUNBLFVBQUksQ0FBQ0QsT0FBTyxDQUFDQyxZQUFELENBQVosRUFBNEI7QUFDeEJELGVBQU8sQ0FBQ0MsWUFBRCxDQUFQLEdBQXdCLEVBQXhCO0FBQ0g7O0FBQ0RELGFBQU8sQ0FBQ0MsWUFBRCxDQUFQLENBQXNCL1EsSUFBdEIsQ0FBMkI7QUFDdkIwTixhQUFLLEVBQUVBLEtBRGdCO0FBRXZCajhDLGFBQUssRUFBRXhJLENBRmdCO0FBR3ZCMDBDLGFBQUssRUFBRWtULEtBQUssQ0FBQzVuRCxDQUFELENBQUwsQ0FBUzAwQztBQUhPLE9BQTNCO0FBS0g7O0FBQ0QsV0FBT21ULE9BQVA7QUFDSDs7QUFFRCxXQUFTRyxRQUFULENBQWtCdkQsS0FBbEIsRUFBeUJ1QyxRQUF6QixFQUFtQztBQUMvQixRQUFJWSxLQUFLLEdBQUduRCxLQUFLLENBQUNMLFFBQU4sSUFBa0JLLEtBQUssQ0FBQ21ELEtBQXhCLElBQWlDLEVBQTdDO0FBQ0EsUUFBSUMsT0FBTyxHQUFHLEVBQWQsQ0FGK0IsQ0FHL0I7O0FBQ0FiLFlBQVEsR0FBR0EsUUFBUSxDQUFDanZCLFdBQVQsRUFBWDs7QUFDQSxTQUFLLElBQUkvM0IsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzRuRCxLQUFLLENBQUNoL0MsTUFBMUIsRUFBa0M1SSxDQUFDLEVBQW5DLEVBQXVDO0FBQ25DLFVBQUk4bkQsWUFBWSxHQUFHRixLQUFLLENBQUM1bkQsQ0FBRCxDQUFMLENBQVM4bkQsWUFBNUIsQ0FEbUMsQ0FFbkM7O0FBQ0EsVUFBSUEsWUFBWSxLQUFLQSxZQUFZLElBQUlkLFFBQWhCLElBQTRCYyxZQUFZLElBQUlHLGNBQWMsQ0FBQ2pCLFFBQUQsQ0FBMUQsSUFBd0VjLFlBQVksSUFBSUksa0JBQWtCLENBQUNsQixRQUFELENBQS9HLENBQWhCLEVBQTRJO0FBQ3hJYSxlQUFPLENBQUM5USxJQUFSLENBQWE7QUFDVDBOLGVBQUssRUFBRUEsS0FERTtBQUVUajhDLGVBQUssRUFBRXhJLENBRkU7QUFHVDAwQyxlQUFLLEVBQUVrVCxLQUFLLENBQUM1bkQsQ0FBRCxDQUFMLENBQVMwMEM7QUFIUCxTQUFiO0FBS0g7QUFDSjs7QUFDRCxXQUFPbVQsT0FBUDtBQUNIOztBQUVELFdBQVNNLE9BQVQsQ0FBaUIxRCxLQUFqQixFQUF3QnVDLFFBQXhCLEVBQWtDO0FBQzlCLFFBQUlZLEtBQUssR0FBR25ELEtBQUssQ0FBQ0wsUUFBTixJQUFrQkssS0FBSyxDQUFDbUQsS0FBeEIsSUFBaUMsRUFBN0M7QUFDQSxRQUFJcC9DLEtBQUssR0FBR28vQyxLQUFLLENBQUNoL0MsTUFBbEI7QUFDQSxRQUFJdy9DLGlCQUFpQixHQUFHQyxvQkFBb0IsQ0FBQzVELEtBQUQsRUFBUXVDLFFBQVIsRUFBa0JZLEtBQWxCLEVBQXlCcC9DLEtBQXpCLENBQTVDOztBQUVBLFFBQUksQ0FBQzQvQyxpQkFBTCxFQUF3QjtBQUNwQkUsb0JBQWMsQ0FBQzdELEtBQUQsRUFBUXVDLFFBQVIsRUFBa0J4K0MsS0FBbEIsQ0FBZDtBQUNIOztBQUVELFdBQU87QUFDSGk4QyxXQUFLLEVBQUVBLEtBREo7QUFFSGo4QyxXQUFLLEVBQUVBLEtBRko7QUFHSGtzQyxXQUFLLEVBQUVrVCxLQUFLLENBQUNwL0MsS0FBRCxDQUFMLENBQWFrc0M7QUFIakIsS0FBUDtBQUtIOztBQUFBOztBQUVELFdBQVM0VCxjQUFULENBQXdCN0QsS0FBeEIsRUFBK0J1QyxRQUEvQixFQUF5Q3grQyxLQUF6QyxFQUFnRDtBQUM1QyxRQUFJaThDLEtBQUssQ0FBQ0gsVUFBVixFQUFzQjtBQUNsQkcsV0FBSyxDQUFDSCxVQUFOLENBQWlCMEMsUUFBUSxHQUFHLE1BQTVCLEVBQW9DeCtDLEtBQXBDO0FBQ0gsS0FGRCxNQUVPO0FBQ0hpOEMsV0FBSyxDQUFDMEQsT0FBTixDQUFjbkIsUUFBZCxFQUF3QixJQUF4QixFQUE4QngrQyxLQUE5QjtBQUNIO0FBQ0osR0FqRWlCLENBbUVsQjs7O0FBQ0EsV0FBUzYvQyxvQkFBVCxDQUE4QjVELEtBQTlCLEVBQXFDdUMsUUFBckMsRUFBK0NZLEtBQS9DLEVBQXNEcC9DLEtBQXRELEVBQTZEO0FBQ3pELFFBQUkrL0MsbUJBQUo7QUFDQSxRQUFJQyxtQkFBSjs7QUFFQSxRQUFJaEIsd0JBQXdCLENBQUNuOEIsSUFBekIsQ0FBOEIyN0IsUUFBOUIsQ0FBSixFQUE2QztBQUN6Q3VCLHlCQUFtQixHQUFHdkIsUUFBdEI7QUFDQXdCLHlCQUFtQixHQUFHQywyQkFBMkIsQ0FBQ3pCLFFBQUQsQ0FBakQ7QUFDSCxLQUhELE1BR08sSUFBSVMsd0JBQXdCLENBQUNwOEIsSUFBekIsQ0FBOEIyN0IsUUFBOUIsQ0FBSixFQUE2QztBQUNoRHVCLHlCQUFtQixHQUFHUiwyQkFBMkIsQ0FBQ2YsUUFBRCxDQUFqRDtBQUNBd0IseUJBQW1CLEdBQUd4QixRQUF0QjtBQUNILEtBSE0sTUFHQTtBQUNILGFBQU8sS0FBUCxDQURHLENBQ1c7QUFDakI7O0FBRUQsUUFBSSxDQUFDVSw0QkFBTCxFQUFtQztBQUMvQjtBQUNBWSxvQkFBYyxDQUFDN0QsS0FBRCxFQUFROEQsbUJBQVIsRUFBNkIvL0MsS0FBN0IsQ0FBZDs7QUFDQSxVQUFJby9DLEtBQUssQ0FBQ2gvQyxNQUFOLElBQWdCSixLQUFwQixFQUEyQjtBQUN2QmsvQyxvQ0FBNEIsR0FBRyxJQUEvQjtBQUNIO0FBQ0o7O0FBQ0QsUUFBSUEsNEJBQUosRUFBa0M7QUFDOUJZLG9CQUFjLENBQUM3RCxLQUFELEVBQVErRCxtQkFBUixFQUE2QmhnRCxLQUE3QixDQUFkO0FBQ0g7O0FBRUQsV0FBTyxJQUFQO0FBQ0g7O0FBRUQsV0FBU3UvQywyQkFBVCxDQUFxQ2YsUUFBckMsRUFBK0M7QUFDM0MsV0FBT0EsUUFBUSxDQUFDbjFCLE9BQVQsQ0FBaUI0MUIsd0JBQWpCLEVBQTJDLFVBQVVuMEMsS0FBVixFQUFpQm8xQyxTQUFqQixFQUE0QkMsU0FBNUIsRUFBdUNDLFNBQXZDLEVBQWtEO0FBQ2hHLGFBQU9GLFNBQVMsR0FBRyxJQUFaLEdBQW1CRSxTQUExQjtBQUNILEtBRk0sQ0FBUDtBQUdIOztBQUVELFdBQVNILDJCQUFULENBQXFDekIsUUFBckMsRUFBK0M7QUFDM0MsV0FBT0EsUUFBUSxDQUFDbjFCLE9BQVQsQ0FBaUIyMUIsd0JBQWpCLEVBQTJDLFVBQVNsMEMsS0FBVCxFQUFnQm8xQyxTQUFoQixFQUEyQkMsU0FBM0IsRUFBc0M7QUFDcEYsYUFBTyxNQUFNQSxTQUFiO0FBQ0gsS0FGTSxDQUFQO0FBR0g7O0FBRUQsV0FBU0UsVUFBVCxDQUFvQnRELElBQXBCLEVBQTBCO0FBQ3RCLFFBQUlkLEtBQUssR0FBR2MsSUFBSSxDQUFDZCxLQUFqQjs7QUFDQSxRQUFJQSxLQUFLLENBQUNxRSxVQUFWLEVBQXNCO0FBQ2xCckUsV0FBSyxDQUFDcUUsVUFBTixDQUFpQnZELElBQUksQ0FBQy84QyxLQUF0QjtBQUNILEtBRkQsTUFFTyxJQUFJaThDLEtBQUssQ0FBQ29FLFVBQVYsRUFBc0I7QUFDekJwRSxXQUFLLENBQUNvRSxVQUFOLENBQWlCdEQsSUFBSSxDQUFDLzhDLEtBQXRCO0FBQ0g7QUFDSjs7QUFFRCxXQUFTdWdELE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCQyxHQUF0QixFQUEyQjtBQUN2QixTQUFLLElBQUkvb0QsR0FBVCxJQUFnQitvRCxHQUFoQixFQUFxQjtBQUNqQixVQUFJLENBQUNBLEdBQUcsQ0FBQ25nRCxjQUFKLENBQW1CNUksR0FBbkIsQ0FBTCxFQUNJO0FBQ0o4b0QsVUFBSSxDQUFDOW9ELEdBQUQsQ0FBSixHQUFZK29ELEdBQUcsQ0FBQy9vRCxHQUFELENBQWY7QUFDSDs7QUFDRCxXQUFPOG9ELElBQVA7QUFDSDs7QUFFRCxXQUFTRSxlQUFULENBQXlCdEIsS0FBekIsRUFBZ0M7QUFDNUIsUUFBSXVCLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUlucEQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzRuRCxLQUFLLENBQUNoL0MsTUFBMUIsRUFBa0M1SSxDQUFDLEVBQW5DLEVBQXVDO0FBQ25DK29ELFlBQU0sQ0FBQ0ksU0FBRCxFQUFZQyxrQkFBa0IsQ0FBQ3hCLEtBQUssQ0FBQzVuRCxDQUFELENBQUwsQ0FBUzAwQyxLQUFWLENBQTlCLENBQU47QUFDSDs7QUFDRCxXQUFPeVUsU0FBUDtBQUNIOztBQUVELFdBQVNDLGtCQUFULENBQTRCMVUsS0FBNUIsRUFBbUM7QUFDL0IsUUFBSTJVLFFBQVEsR0FBRyxFQUFmOztBQUNBLFNBQUssSUFBSXJwRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMDBDLEtBQUssQ0FBQzlyQyxNQUExQixFQUFrQzVJLENBQUMsRUFBbkMsRUFBdUM7QUFDbkNxcEQsY0FBUSxDQUFDM1UsS0FBSyxDQUFDMTBDLENBQUQsQ0FBTixDQUFSLEdBQXFCMDBDLEtBQUssQ0FBQzRVLFdBQVcsQ0FBQzVVLEtBQUssQ0FBQzEwQyxDQUFELENBQU4sQ0FBWixDQUExQjtBQUNIOztBQUNELFdBQU9xcEQsUUFBUDtBQUNILEdBNUlpQixDQThJbEI7QUFDQTs7O0FBQ0EsV0FBU3BCLGNBQVQsQ0FBd0JqQixRQUF4QixFQUFrQztBQUM5QixRQUFJdUMsSUFBSSxHQUFHLEVBQVg7QUFDQSxRQUFJQyxTQUFTLEdBQUcsQ0FBaEI7O0FBRUEsV0FBTyxDQUFDbDJDLEtBQUssR0FBR2kwQyxlQUFlLENBQUNsOEIsSUFBaEIsQ0FBcUIyN0IsUUFBckIsQ0FBVCxLQUE0QyxJQUFuRCxFQUF5RDtBQUNyRCxVQUFJMXpDLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxFQUFqQixFQUNJO0FBQ0ppMkMsVUFBSSxJQUFJdkMsUUFBUSxDQUFDeDNCLFNBQVQsQ0FBbUJnNkIsU0FBbkIsRUFBOEJsMkMsS0FBSyxDQUFDOUssS0FBcEMsQ0FBUjtBQUNBK2dELFVBQUksSUFBSXZDLFFBQVEsQ0FBQ2gxQixNQUFULENBQWdCMWUsS0FBSyxDQUFDOUssS0FBTixHQUFjOEssS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTMUssTUFBdkMsRUFBK0MwSyxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMxSyxNQUF4RCxDQUFSO0FBQ0EyZ0QsVUFBSSxJQUFJdkMsUUFBUSxDQUFDaDFCLE1BQVQsQ0FBZ0IxZSxLQUFLLENBQUM5SyxLQUF0QixFQUE2QjhLLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBUzFLLE1BQXRDLENBQVI7QUFDQTRnRCxlQUFTLEdBQUdsMkMsS0FBSyxDQUFDOUssS0FBTixHQUFjOEssS0FBSyxDQUFDLENBQUQsQ0FBTCxDQUFTMUssTUFBbkM7QUFDSDs7QUFDRDJnRCxRQUFJLElBQUl2QyxRQUFRLENBQUNoMUIsTUFBVCxDQUFnQnczQixTQUFoQixDQUFSO0FBRUEsV0FBT0QsSUFBUDtBQUNIOztBQUFBLEdBL0ppQixDQWlLbEI7O0FBQ0EsV0FBU3JCLGtCQUFULENBQTRCbEIsUUFBNUIsRUFBc0M7QUFDbEMsUUFBSVEsd0JBQXdCLENBQUNuOEIsSUFBekIsQ0FBOEIyN0IsUUFBOUIsQ0FBSixFQUE2QztBQUN6QyxhQUFPeUIsMkJBQTJCLENBQUN6QixRQUFELENBQWxDO0FBQ0g7O0FBQ0QsV0FBT0EsUUFBUDtBQUNIOztBQUVELFdBQVN5QyxrQkFBVCxDQUE0QmxFLElBQTVCLEVBQWtDbUUsVUFBbEMsRUFBOEM7QUFDMUMsU0FBSyxJQUFJeHBELEdBQVQsSUFBZ0J3cEQsVUFBaEIsRUFBNEI7QUFDeEIsVUFBSXJwRCxLQUFLLEdBQUdxcEQsVUFBVSxDQUFDeHBELEdBQUQsQ0FBdEI7QUFDQSxVQUFJeXBELGNBQWMsR0FBR3RwRCxLQUFLLENBQUNvdUIsT0FBTixDQUFjLGFBQWQsQ0FBckIsQ0FGd0IsQ0FJeEI7O0FBQ0E4MkIsVUFBSSxDQUFDN1EsS0FBTCxDQUFXUyxjQUFYLENBQTBCajFDLEdBQTFCOztBQUNBLFVBQUl5cEQsY0FBYyxHQUFHLENBQXJCLEVBQXdCO0FBQ3BCcEUsWUFBSSxDQUFDN1EsS0FBTCxDQUFXa1YsV0FBWCxDQUF1QjFwRCxHQUF2QixFQUE0QkcsS0FBSyxDQUFDMnhCLE1BQU4sQ0FBYSxDQUFiLEVBQWdCMjNCLGNBQWhCLENBQTVCLEVBQTZELFdBQTdEO0FBQ0gsT0FGRCxNQUVPO0FBQ0hwRSxZQUFJLENBQUM3USxLQUFMLENBQVdrVixXQUFYLENBQXVCMXBELEdBQXZCLEVBQTRCRyxLQUE1QjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxXQUFTaXBELFdBQVQsQ0FBcUJyOEIsR0FBckIsRUFBMEI7QUFDdEIsV0FBT0EsR0FBRyxDQUFDNEUsT0FBSixDQUFZLFdBQVosRUFBeUIsVUFBVXZlLEtBQVYsRUFBaUJ1MkMsUUFBakIsRUFBMkI7QUFDdkQsYUFBT0EsUUFBUSxDQUFDaHlCLFdBQVQsRUFBUDtBQUNILEtBRk0sQ0FBUDtBQUdIOztBQUVELFdBQVNpeUIsZ0NBQVQsQ0FBMENDLFFBQTFDLEVBQW9EO0FBQ2hELFFBQUlDLFFBQVEsR0FBRyxFQUFmOztBQUNBLFNBQUssSUFBSTlwRCxHQUFULElBQWdCNnBELFFBQWhCLEVBQTBCO0FBQ3RCQyxjQUFRLENBQUNDLFdBQVcsQ0FBQy9wRCxHQUFELENBQVosQ0FBUixHQUE2QjZwRCxRQUFRLENBQUM3cEQsR0FBRCxDQUFyQztBQUNIOztBQUNELFdBQU84cEQsUUFBUDtBQUNIOztBQUVELFdBQVNDLFdBQVQsQ0FBcUJoOUIsR0FBckIsRUFBMEI7QUFDdEIsV0FBT0EsR0FBRyxDQUFDNEUsT0FBSixDQUFZLFVBQVosRUFBd0IsVUFBU3ZlLEtBQVQsRUFBZ0J1MkMsUUFBaEIsRUFBMEI7QUFDckQsYUFBTyxNQUFNQSxRQUFRLENBQUM5eEIsV0FBVCxFQUFiO0FBQ0gsS0FGTSxDQUFQO0FBR0g7O0FBRUQsTUFBSW15QixHQUFHLEdBQUcsU0FBTkEsR0FBTSxDQUFTNzhDLEdBQVQsRUFBYztBQUNwQixTQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDQSxTQUFLczNDLElBQUwsR0FBWSxLQUFLdDNDLEdBQUwsQ0FBU3MzQyxJQUFULElBQWlCLEtBQUt0M0MsR0FBTCxDQUFTc3ZDLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLENBQTdCO0FBQ0EsU0FBS3dOLE1BQUwsR0FBYyxLQUFLOThDLEdBQUwsQ0FBU20zQyxXQUFULElBQXdCLEVBQXRDO0FBQ0gsR0FKRDs7QUFNQTBGLEtBQUcsQ0FBQ3gvQixTQUFKLEdBQWdCO0FBQ1o7QUFDQWhxQixPQUFHLEVBQUUsYUFBU3NtRCxRQUFULEVBQW1CO0FBQ3BCLFVBQUksQ0FBQyxLQUFLb0QsWUFBVixFQUF3QjtBQUNwQixlQUFPLEVBQVA7QUFDSDs7QUFDRCxVQUFJcEQsUUFBSixFQUFjO0FBQ1YsZUFBT2tDLGVBQWUsQ0FBQ2xCLFFBQVEsQ0FBQyxLQUFLb0MsWUFBTixFQUFvQnBELFFBQXBCLENBQVQsQ0FBdEI7QUFDSDs7QUFDRCxVQUFJWSxLQUFLLEdBQUdELG9CQUFvQixDQUFDLEtBQUt5QyxZQUFOLENBQWhDOztBQUNBLFdBQUtwRCxRQUFMLElBQWlCWSxLQUFqQixFQUF3QjtBQUNwQkEsYUFBSyxDQUFDWixRQUFELENBQUwsR0FBa0JrQyxlQUFlLENBQUN0QixLQUFLLENBQUNaLFFBQUQsQ0FBTixDQUFqQztBQUNIOztBQUNELGFBQU9ZLEtBQVA7QUFDSCxLQWRXO0FBZVo7QUFDQXlDLFVBQU0sRUFBRSxnQkFBU3JELFFBQVQsRUFBbUI7QUFDdkIsVUFBSTBDLFVBQVUsR0FBRyxFQUFqQjs7QUFDQSxXQUFLLElBQUkxcEQsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLbXFELE1BQUwsQ0FBWXZoRCxNQUFoQyxFQUF3QzVJLENBQUMsRUFBekMsRUFBNkM7QUFDekMrb0QsY0FBTSxDQUFDVyxVQUFELEVBQWFSLGVBQWUsQ0FBQ2xCLFFBQVEsQ0FBQyxLQUFLbUMsTUFBTCxDQUFZbnFELENBQVosQ0FBRCxFQUFpQmduRCxRQUFqQixDQUFULENBQTVCLENBQU47QUFDSDs7QUFDRCxhQUFPMEMsVUFBUDtBQUNILEtBdEJXO0FBdUJaO0FBQ0E1b0QsT0FBRyxFQUFFLGFBQVNrbUQsUUFBVCxFQUFtQjBDLFVBQW5CLEVBQStCO0FBQ2hDLFVBQUksQ0FBQyxLQUFLVSxZQUFWLEVBQXdCO0FBQ3BCLGFBQUtBLFlBQUwsR0FBb0IsS0FBS0UsWUFBTCxFQUFwQjtBQUNIOztBQUNEWixnQkFBVSxHQUFHSSxnQ0FBZ0MsQ0FBQ0osVUFBRCxDQUE3QztBQUNBLFVBQUk5QixLQUFLLEdBQUdJLFFBQVEsQ0FBQyxLQUFLb0MsWUFBTixFQUFvQnBELFFBQXBCLENBQXBCOztBQUNBLFVBQUksQ0FBQ1ksS0FBSyxDQUFDaC9DLE1BQVgsRUFBbUI7QUFDZmcvQyxhQUFLLEdBQUcsQ0FBQ08sT0FBTyxDQUFDLEtBQUtpQyxZQUFOLEVBQW9CcEQsUUFBcEIsQ0FBUixDQUFSO0FBQ0g7O0FBQ0QsV0FBSyxJQUFJaG5ELENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUc0bkQsS0FBSyxDQUFDaC9DLE1BQTFCLEVBQWtDNUksQ0FBQyxFQUFuQyxFQUF1QztBQUNuQ3lwRCwwQkFBa0IsQ0FBQzdCLEtBQUssQ0FBQzVuRCxDQUFELENBQU4sRUFBVzBwRCxVQUFYLENBQWxCO0FBQ0g7QUFDSixLQXBDVztBQXFDWjtBQUNBcmQsVUFBTSxFQUFFLGdCQUFTMmEsUUFBVCxFQUFtQjtBQUN2QixVQUFJLENBQUMsS0FBS29ELFlBQVYsRUFDSTs7QUFDSixVQUFJLENBQUNwRCxRQUFMLEVBQWU7QUFDWCxhQUFLdUQsWUFBTCxDQUFrQixLQUFLSCxZQUF2Qjs7QUFDQSxlQUFPLEtBQUtBLFlBQVo7QUFDQTtBQUNIOztBQUNELFVBQUl4QyxLQUFLLEdBQUdJLFFBQVEsQ0FBQyxLQUFLb0MsWUFBTixFQUFvQnBELFFBQXBCLENBQXBCOztBQUNBLFdBQUssSUFBSWhuRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHNG5ELEtBQUssQ0FBQ2gvQyxNQUExQixFQUFrQzVJLENBQUMsRUFBbkMsRUFBdUM7QUFDbkM2b0Qsa0JBQVUsQ0FBQ2pCLEtBQUssQ0FBQzVuRCxDQUFELENBQU4sQ0FBVjtBQUNIOztBQUNELGFBQU80bkQsS0FBSyxDQUFDaC9DLE1BQWI7QUFDSCxLQW5EVztBQW9EWjBoRCxnQkFBWSxFQUFFLHdCQUFXO0FBQ3JCLFVBQUlFLFNBQVMsR0FBRyxLQUFLbjlDLEdBQUwsQ0FBU2kvQixhQUFULENBQXVCLE9BQXZCLENBQWhCO0FBQ0FrZSxlQUFTLENBQUNya0QsSUFBVixHQUFpQixVQUFqQjtBQUNBcWtELGVBQVMsQ0FBQ0MsR0FBVixHQUFnQixZQUFoQjtBQUNBLFdBQUs5RixJQUFMLENBQVV0WCxXQUFWLENBQXNCbWQsU0FBdEI7QUFDQSxhQUFPQSxTQUFTLENBQUMvRixLQUFqQjtBQUNILEtBMURXO0FBMkRaOEYsZ0JBQVksRUFBRSxzQkFBUzlGLEtBQVQsRUFBZ0I7QUFDMUIsVUFBSWhZLElBQUksR0FBR2dZLEtBQUssQ0FBQ2lHLFNBQWpCO0FBQ0FqZSxVQUFJLENBQUNJLFVBQUwsQ0FBZ0JGLFdBQWhCLENBQTRCRixJQUE1QjtBQUNIO0FBOURXLEdBQWhCO0FBaUVBLE1BQUlyMkIsT0FBTyxHQUFHLElBQUk4ekMsR0FBSixDQUFRejhDLFFBQVIsQ0FBZDs7QUFDQTJJLFNBQU8sQ0FBQ3UwQyxXQUFSLEdBQXNCLFVBQVN0OUMsR0FBVCxFQUFjO0FBQ2hDLFdBQU8sSUFBSTY4QyxHQUFKLENBQVE3OEMsR0FBUixDQUFQO0FBQ0gsR0FGRDs7QUFHQSxTQUFPK0ksT0FBUDtBQUNILENBeFJTLEVBQVY7O0FBMFJBLFNBQWlDNVMsTUFBTSxDQUFDNFMsT0FBeEMsS0FBb0Q1UyxNQUFNLENBQUM0UyxPQUFQLEdBQWlCa3hDLEdBQXJFLEUsQ0FBMkUsbUI7Ozs7Ozs7Ozs7OztBQ2pTOUQ7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBQ0EsU0FBU3NELGFBQVQsQ0FBdUJDLFVBQXZCLEVBQW1DO0FBQ2pDO0FBQ0E7QUFDQSxNQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFDbEMsUUFBSTtBQUNGLGFBQU9ELGFBQWEsQ0FBQ2xtRCxJQUFJLENBQUN5OEMsS0FBTCxDQUFXMEosVUFBWCxDQUFELENBQXBCO0FBQ0QsS0FGRCxDQUVFLE9BQU92aEIsR0FBUCxFQUFZO0FBQ1osYUFBT3VoQixVQUFQO0FBQ0Q7QUFDRixHQU5ELE1BTU8sSUFBSW5sRCxLQUFLLENBQUNzRCxPQUFOLENBQWM2aEQsVUFBZCxDQUFKLEVBQStCO0FBQ3BDO0FBQ0EsV0FBT0EsVUFBVSxDQUFDaGIsR0FBWCxDQUFlLFVBQUFrQixHQUFHO0FBQUEsYUFBSTZaLGFBQWEsQ0FBQzdaLEdBQUQsQ0FBakI7QUFBQSxLQUFsQixDQUFQO0FBQ0QsR0FITSxNQUdBLElBQUksUUFBTzhaLFVBQVAsTUFBc0IsUUFBdEIsSUFBa0NBLFVBQVUsS0FBSyxJQUFyRCxFQUEyRDtBQUNoRTtBQUNBO0FBQ0EsV0FBT3hyRCxNQUFNLENBQUNTLElBQVAsQ0FBWStxRCxVQUFaLEVBQXdCckksTUFBeEIsQ0FBK0IsVUFBQzE4QyxHQUFELEVBQU01RixHQUFOLEVBQWM7QUFDbEQ0RixTQUFHLENBQUM1RixHQUFELENBQUgsR0FBVzBxRCxhQUFhLENBQUNDLFVBQVUsQ0FBQzNxRCxHQUFELENBQVgsQ0FBeEI7QUFDQSxhQUFPNEYsR0FBUDtBQUNELEtBSE0sRUFHSixFQUhJLENBQVA7QUFJRCxHQVBNLE1BT0E7QUFDTDtBQUNBLFdBQU8ra0QsVUFBUDtBQUNEO0FBQ0Y7O0FBRURybkQsTUFBTSxDQUFDNFMsT0FBUCxHQUFpQjtBQUFFdzBDLGVBQWEsRUFBYkE7QUFBRixDQUFqQixDOzs7Ozs7Ozs7OztBQy9CQTtBQUNBLDBDQUEwQyxtQkFBTyxDQUFDLHNKQUEwRyxFOzs7Ozs7Ozs7Ozs7QUNENUo7QUFDQSx1REFBdUQsbUJBQU8sQ0FBQyx1TEFBd0gsRTs7Ozs7Ozs7Ozs7O0FDRHZMO0FBQ0EsbURBQW1ELG1CQUFPLENBQUMsMktBQW9ILEU7Ozs7Ozs7Ozs7OztBQ0QvSyxxRkFBdUMsbUJBQU8sQ0FBQyxzSkFBMEcsRTs7Ozs7Ozs7Ozs7O0FDQXpKLCtFQUFpQyxtQkFBTyxDQUFDLCtIQUFvRyxFOzs7Ozs7Ozs7Ozs7O0FDQzdJLGNBQWMsbUJBQU8sQ0FBQyx5SUFBcUQ7O0FBRTNFLDRDQUE0QyxRQUFTOztBQUVyRDtBQUNBOzs7O0FBSUEsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMseUZBQXNDOztBQUUzRDs7QUFFQSxHQUFHLEtBQVUsRUFBRSxFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckJmOzs7O0FBRUE7QUFDQSxJQUFJN2xELE9BQU0sR0FBR3NCLGNBQUt0QixNQUFsQjtlQUVlQSxPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU3VELEtBQVQsQ0FBZWIsSUFBZixFQUFxQnFqRCxPQUFyQixFQUE4QjlwRCxJQUE5QixFQUFvQztBQUNsQyxVQUFRQSxJQUFJLENBQUM0SCxNQUFiO0FBQ0UsU0FBSyxDQUFMO0FBQVEsYUFBT25CLElBQUksQ0FBQ3VpQixJQUFMLENBQVU4Z0MsT0FBVixDQUFQOztBQUNSLFNBQUssQ0FBTDtBQUFRLGFBQU9yakQsSUFBSSxDQUFDdWlCLElBQUwsQ0FBVThnQyxPQUFWLEVBQW1COXBELElBQUksQ0FBQyxDQUFELENBQXZCLENBQVA7O0FBQ1IsU0FBSyxDQUFMO0FBQVEsYUFBT3lHLElBQUksQ0FBQ3VpQixJQUFMLENBQVU4Z0MsT0FBVixFQUFtQjlwRCxJQUFJLENBQUMsQ0FBRCxDQUF2QixFQUE0QkEsSUFBSSxDQUFDLENBQUQsQ0FBaEMsQ0FBUDs7QUFDUixTQUFLLENBQUw7QUFBUSxhQUFPeUcsSUFBSSxDQUFDdWlCLElBQUwsQ0FBVThnQyxPQUFWLEVBQW1COXBELElBQUksQ0FBQyxDQUFELENBQXZCLEVBQTRCQSxJQUFJLENBQUMsQ0FBRCxDQUFoQyxFQUFxQ0EsSUFBSSxDQUFDLENBQUQsQ0FBekMsQ0FBUDtBQUpWOztBQU1BLFNBQU95RyxJQUFJLENBQUNhLEtBQUwsQ0FBV3dpRCxPQUFYLEVBQW9COXBELElBQXBCLENBQVA7QUFDRDs7ZUFFY3NILEs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEJmOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFJTyxXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FBekI7QUFFQTs7QUFDQSxJQUFJNWhCLGNBQWMsR0FBR0QsV0FBVyxDQUFDQyxjQUFqQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU2EsYUFBVCxDQUF1QnRKLEtBQXZCLEVBQThCcUosU0FBOUIsRUFBeUM7QUFDdkMsTUFBSVgsS0FBSyxHQUFHLHNCQUFRMUksS0FBUixDQUFaO0FBQUEsTUFDSTRJLEtBQUssR0FBRyxDQUFDRixLQUFELElBQVUsMEJBQVkxSSxLQUFaLENBRHRCO0FBQUEsTUFFSThJLE1BQU0sR0FBRyxDQUFDSixLQUFELElBQVUsQ0FBQ0UsS0FBWCxJQUFvQix1QkFBUzVJLEtBQVQsQ0FGakM7QUFBQSxNQUdJZ0osTUFBTSxHQUFHLENBQUNOLEtBQUQsSUFBVSxDQUFDRSxLQUFYLElBQW9CLENBQUNFLE1BQXJCLElBQStCLDJCQUFhOUksS0FBYixDQUg1QztBQUFBLE1BSUlrSixXQUFXLEdBQUdSLEtBQUssSUFBSUUsS0FBVCxJQUFrQkUsTUFBbEIsSUFBNEJFLE1BSjlDO0FBQUEsTUFLSUcsTUFBTSxHQUFHRCxXQUFXLEdBQUcsd0JBQVVsSixLQUFLLENBQUN1SSxNQUFoQixFQUF3QjZELE1BQXhCLENBQUgsR0FBcUMsRUFMN0Q7QUFBQSxNQU1JN0QsTUFBTSxHQUFHWSxNQUFNLENBQUNaLE1BTnBCOztBQVFBLE9BQUssSUFBSTFJLEdBQVQsSUFBZ0JHLEtBQWhCLEVBQXVCO0FBQ3JCLFFBQUksQ0FBQ3FKLFNBQVMsSUFBSVosY0FBYyxDQUFDa2hCLElBQWYsQ0FBb0IzcEIsS0FBcEIsRUFBMkJILEdBQTNCLENBQWQsS0FDQSxFQUFFcUosV0FBVyxNQUNWO0FBQ0FySixPQUFHLElBQUksUUFBUCxJQUNBO0FBQ0NpSixVQUFNLEtBQUtqSixHQUFHLElBQUksUUFBUCxJQUFtQkEsR0FBRyxJQUFJLFFBQS9CLENBRlAsSUFHQTtBQUNDbUosVUFBTSxLQUFLbkosR0FBRyxJQUFJLFFBQVAsSUFBbUJBLEdBQUcsSUFBSSxZQUExQixJQUEwQ0EsR0FBRyxJQUFJLFlBQXRELENBSlAsSUFLQTtBQUNBLDBCQUFRQSxHQUFSLEVBQWEwSSxNQUFiLENBUlUsQ0FBYixDQURKLEVBVVE7QUFDTlksWUFBTSxDQUFDdXRDLElBQVAsQ0FBWTcyQyxHQUFaO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPc0osTUFBUDtBQUNEOztlQUVjRyxhOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hEZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTYSxRQUFULENBQWtCRixLQUFsQixFQUF5QkMsUUFBekIsRUFBbUM7QUFDakMsTUFBSS9CLEtBQUssR0FBRyxDQUFDLENBQWI7QUFBQSxNQUNJSSxNQUFNLEdBQUcwQixLQUFLLElBQUksSUFBVCxHQUFnQixDQUFoQixHQUFvQkEsS0FBSyxDQUFDMUIsTUFEdkM7QUFBQSxNQUVJWSxNQUFNLEdBQUc5RCxLQUFLLENBQUNrRCxNQUFELENBRmxCOztBQUlBLFNBQU8sRUFBRUosS0FBRixHQUFVSSxNQUFqQixFQUF5QjtBQUN2QlksVUFBTSxDQUFDaEIsS0FBRCxDQUFOLEdBQWdCK0IsUUFBUSxDQUFDRCxLQUFLLENBQUM5QixLQUFELENBQU4sRUFBZUEsS0FBZixFQUFzQjhCLEtBQXRCLENBQXhCO0FBQ0Q7O0FBQ0QsU0FBT2QsTUFBUDtBQUNEOztlQUVjZ0IsUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwQmY7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQUkzQixXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FBekI7QUFFQTs7QUFDQSxJQUFJNWhCLGNBQWMsR0FBR0QsV0FBVyxDQUFDQyxjQUFqQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNpTCxXQUFULENBQXFCeE0sTUFBckIsRUFBNkJySCxHQUE3QixFQUFrQ0csS0FBbEMsRUFBeUM7QUFDdkMsTUFBSTJULFFBQVEsR0FBR3pNLE1BQU0sQ0FBQ3JILEdBQUQsQ0FBckI7O0FBQ0EsTUFBSSxFQUFFNEksY0FBYyxDQUFDa2hCLElBQWYsQ0FBb0J6aUIsTUFBcEIsRUFBNEJySCxHQUE1QixLQUFvQyxpQkFBRzhULFFBQUgsRUFBYTNULEtBQWIsQ0FBdEMsS0FDQ0EsS0FBSyxLQUFLeXNCLFNBQVYsSUFBdUIsRUFBRTVzQixHQUFHLElBQUlxSCxNQUFULENBRDVCLEVBQytDO0FBQzdDLGtDQUFnQkEsTUFBaEIsRUFBd0JySCxHQUF4QixFQUE2QkcsS0FBN0I7QUFDRDtBQUNGOztlQUVjMFQsVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQmY7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTdk0sZUFBVCxDQUF5QkQsTUFBekIsRUFBaUNySCxHQUFqQyxFQUFzQ0csS0FBdEMsRUFBNkM7QUFDM0MsTUFBSUgsR0FBRyxJQUFJLFdBQVAsSUFBc0JkLHVCQUExQixFQUEwQztBQUN4QyxpQ0FBZW1JLE1BQWYsRUFBdUJySCxHQUF2QixFQUE0QjtBQUMxQixzQkFBZ0IsSUFEVTtBQUUxQixvQkFBYyxJQUZZO0FBRzFCLGVBQVNHLEtBSGlCO0FBSTFCLGtCQUFZO0FBSmMsS0FBNUI7QUFNRCxHQVBELE1BT087QUFDTGtILFVBQU0sQ0FBQ3JILEdBQUQsQ0FBTixHQUFjRyxLQUFkO0FBQ0Q7QUFDRjs7ZUFFY21ILGU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEJmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFJNUMsT0FBTyxHQUFHLGVBQWQ7QUFBQSxJQUNJQyxZQUFZLEdBQUcsb0JBRG5CO0FBR0E7O0FBQ0EsSUFBSUMsY0FBYyxHQUFHQyxtQkFBU0EsaUJBQU9nbUQsV0FBaEIsR0FBOEJqK0IsU0FBbkQ7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTNW5CLFVBQVQsQ0FBb0I3RSxLQUFwQixFQUEyQjtBQUN6QixNQUFJQSxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNqQixXQUFPQSxLQUFLLEtBQUt5c0IsU0FBVixHQUFzQmpvQixZQUF0QixHQUFxQ0QsT0FBNUM7QUFDRDs7QUFDRCxTQUFRRSxjQUFjLElBQUlBLGNBQWMsSUFBSXpGLE1BQU0sQ0FBQ2dCLEtBQUQsQ0FBM0MsR0FDSCx3QkFBVUEsS0FBVixDQURHLEdBRUgsNkJBQWVBLEtBQWYsQ0FGSjtBQUdEOztlQUVjNkUsVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQmY7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQUlnUixPQUFPLEdBQUcsb0JBQWQ7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTRCxlQUFULENBQXlCNVYsS0FBekIsRUFBZ0M7QUFDOUIsU0FBTywyQkFBYUEsS0FBYixLQUF1Qix5QkFBV0EsS0FBWCxLQUFxQjZWLE9BQW5EO0FBQ0Q7O2VBRWNELGU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDakJmOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOUIsWUFBWSxHQUFHLHFCQUFuQjtBQUVBOztBQUNBLElBQUlDLFlBQVksR0FBRyw2QkFBbkI7QUFFQTs7QUFDQSxJQUFJQyxTQUFTLEdBQUc1TixRQUFRLENBQUNpa0IsU0FBekI7QUFBQSxJQUNJN2hCLFdBQVcsR0FBR3hKLE1BQU0sQ0FBQ3FyQixTQUR6QjtBQUdBOztBQUNBLElBQUlwVyxZQUFZLEdBQUdELFNBQVMsQ0FBQzFKLFFBQTdCO0FBRUE7O0FBQ0EsSUFBSTdCLGNBQWMsR0FBR0QsV0FBVyxDQUFDQyxjQUFqQztBQUVBOztBQUNBLElBQUl5TCxVQUFVLEdBQUd4QixNQUFNLENBQUMsTUFDdEJ1QixZQUFZLENBQUMwVixJQUFiLENBQWtCbGhCLGNBQWxCLEVBQWtDK29CLE9BQWxDLENBQTBDMWQsWUFBMUMsRUFBd0QsTUFBeEQsRUFDQzBkLE9BREQsQ0FDUyx3REFEVCxFQUNtRSxPQURuRSxDQURzQixHQUV3RCxHQUZ6RCxDQUF2QjtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUzNkLFlBQVQsQ0FBc0I3VCxLQUF0QixFQUE2QjtBQUMzQixNQUFJLENBQUMsdUJBQVNBLEtBQVQsQ0FBRCxJQUFvQix1QkFBU0EsS0FBVCxDQUF4QixFQUF5QztBQUN2QyxXQUFPLEtBQVA7QUFDRDs7QUFDRCxNQUFJbVIsT0FBTyxHQUFHLHlCQUFXblIsS0FBWCxJQUFvQmtVLFVBQXBCLEdBQWlDSCxZQUEvQztBQUNBLFNBQU81QyxPQUFPLENBQUN1ZSxJQUFSLENBQWEsdUJBQVMxdkIsS0FBVCxDQUFiLENBQVA7QUFDRDs7ZUFFYzZULFk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUNmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFJZ0MsT0FBTyxHQUFHLG9CQUFkO0FBQUEsSUFDSVksUUFBUSxHQUFHLGdCQURmO0FBQUEsSUFFSUMsT0FBTyxHQUFHLGtCQUZkO0FBQUEsSUFHSUMsT0FBTyxHQUFHLGVBSGQ7QUFBQSxJQUlJL00sUUFBUSxHQUFHLGdCQUpmO0FBQUEsSUFLSXJDLE9BQU8sR0FBRyxtQkFMZDtBQUFBLElBTUlxUCxNQUFNLEdBQUcsY0FOYjtBQUFBLElBT0lDLFNBQVMsR0FBRyxpQkFQaEI7QUFBQSxJQVFJQyxTQUFTLEdBQUcsaUJBUmhCO0FBQUEsSUFTSUMsU0FBUyxHQUFHLGlCQVRoQjtBQUFBLElBVUlDLE1BQU0sR0FBRyxjQVZiO0FBQUEsSUFXSUMsU0FBUyxHQUFHLGlCQVhoQjtBQUFBLElBWUlDLFVBQVUsR0FBRyxrQkFaakI7QUFjQSxJQUFJQyxjQUFjLEdBQUcsc0JBQXJCO0FBQUEsSUFDSUMsV0FBVyxHQUFHLG1CQURsQjtBQUFBLElBRUlDLFVBQVUsR0FBRyx1QkFGakI7QUFBQSxJQUdJQyxVQUFVLEdBQUcsdUJBSGpCO0FBQUEsSUFJSUMsT0FBTyxHQUFHLG9CQUpkO0FBQUEsSUFLSUMsUUFBUSxHQUFHLHFCQUxmO0FBQUEsSUFNSUMsUUFBUSxHQUFHLHFCQU5mO0FBQUEsSUFPSUMsUUFBUSxHQUFHLHFCQVBmO0FBQUEsSUFRSUMsZUFBZSxHQUFHLDRCQVJ0QjtBQUFBLElBU0lDLFNBQVMsR0FBRyxzQkFUaEI7QUFBQSxJQVVJQyxTQUFTLEdBQUcsc0JBVmhCO0FBWUE7O0FBQ0EsSUFBSUMsY0FBYyxHQUFHLEVBQXJCO0FBQ0FBLGNBQWMsQ0FBQ1QsVUFBRCxDQUFkLEdBQTZCUyxjQUFjLENBQUNSLFVBQUQsQ0FBZCxHQUM3QlEsY0FBYyxDQUFDUCxPQUFELENBQWQsR0FBMEJPLGNBQWMsQ0FBQ04sUUFBRCxDQUFkLEdBQzFCTSxjQUFjLENBQUNMLFFBQUQsQ0FBZCxHQUEyQkssY0FBYyxDQUFDSixRQUFELENBQWQsR0FDM0JJLGNBQWMsQ0FBQ0gsZUFBRCxDQUFkLEdBQWtDRyxjQUFjLENBQUNGLFNBQUQsQ0FBZCxHQUNsQ0UsY0FBYyxDQUFDRCxTQUFELENBQWQsR0FBNEIsSUFKNUI7QUFLQUMsY0FBYyxDQUFDakMsT0FBRCxDQUFkLEdBQTBCaUMsY0FBYyxDQUFDckIsUUFBRCxDQUFkLEdBQzFCcUIsY0FBYyxDQUFDWCxjQUFELENBQWQsR0FBaUNXLGNBQWMsQ0FBQ3BCLE9BQUQsQ0FBZCxHQUNqQ29CLGNBQWMsQ0FBQ1YsV0FBRCxDQUFkLEdBQThCVSxjQUFjLENBQUNuQixPQUFELENBQWQsR0FDOUJtQixjQUFjLENBQUNsTyxRQUFELENBQWQsR0FBMkJrTyxjQUFjLENBQUN2USxPQUFELENBQWQsR0FDM0J1USxjQUFjLENBQUNsQixNQUFELENBQWQsR0FBeUJrQixjQUFjLENBQUNqQixTQUFELENBQWQsR0FDekJpQixjQUFjLENBQUNoQixTQUFELENBQWQsR0FBNEJnQixjQUFjLENBQUNmLFNBQUQsQ0FBZCxHQUM1QmUsY0FBYyxDQUFDZCxNQUFELENBQWQsR0FBeUJjLGNBQWMsQ0FBQ2IsU0FBRCxDQUFkLEdBQ3pCYSxjQUFjLENBQUNaLFVBQUQsQ0FBZCxHQUE2QixLQVA3QjtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNWLGdCQUFULENBQTBCeFcsS0FBMUIsRUFBaUM7QUFDL0IsU0FBTywyQkFBYUEsS0FBYixLQUNMLHVCQUFTQSxLQUFLLENBQUN1SSxNQUFmLENBREssSUFDcUIsQ0FBQyxDQUFDdVAsY0FBYyxDQUFDLHlCQUFXOVgsS0FBWCxDQUFELENBRDVDO0FBRUQ7O2VBRWN3VyxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzRGY7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQUloTyxXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FBekI7QUFFQTs7QUFDQSxJQUFJNWhCLGNBQWMsR0FBR0QsV0FBVyxDQUFDQyxjQUFqQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVM2UCxRQUFULENBQWtCcFIsTUFBbEIsRUFBMEI7QUFDeEIsTUFBSSxDQUFDLDBCQUFZQSxNQUFaLENBQUwsRUFBMEI7QUFDeEIsV0FBTyx5QkFBV0EsTUFBWCxDQUFQO0FBQ0Q7O0FBQ0QsTUFBSWlDLE1BQU0sR0FBRyxFQUFiOztBQUNBLE9BQUssSUFBSXRKLEdBQVQsSUFBZ0JiLE1BQU0sQ0FBQ2tJLE1BQUQsQ0FBdEIsRUFBZ0M7QUFDOUIsUUFBSXVCLGNBQWMsQ0FBQ2toQixJQUFmLENBQW9CemlCLE1BQXBCLEVBQTRCckgsR0FBNUIsS0FBb0NBLEdBQUcsSUFBSSxhQUEvQyxFQUE4RDtBQUM1RHNKLFlBQU0sQ0FBQ3V0QyxJQUFQLENBQVk3MkMsR0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT3NKLE1BQVA7QUFDRDs7ZUFFY21QLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0JmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFJOVAsV0FBVyxHQUFHeEosTUFBTSxDQUFDcXJCLFNBQXpCO0FBRUE7O0FBQ0EsSUFBSTVoQixjQUFjLEdBQUdELFdBQVcsQ0FBQ0MsY0FBakM7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTaU4sVUFBVCxDQUFvQnhPLE1BQXBCLEVBQTRCO0FBQzFCLE1BQUksQ0FBQyx1QkFBU0EsTUFBVCxDQUFMLEVBQXVCO0FBQ3JCLFdBQU8sMkJBQWFBLE1BQWIsQ0FBUDtBQUNEOztBQUNELE1BQUlnUixPQUFPLEdBQUcsMEJBQVloUixNQUFaLENBQWQ7QUFBQSxNQUNJaUMsTUFBTSxHQUFHLEVBRGI7O0FBR0EsT0FBSyxJQUFJdEosR0FBVCxJQUFnQnFILE1BQWhCLEVBQXdCO0FBQ3RCLFFBQUksRUFBRXJILEdBQUcsSUFBSSxhQUFQLEtBQXlCcVksT0FBTyxJQUFJLENBQUN6UCxjQUFjLENBQUNraEIsSUFBZixDQUFvQnppQixNQUFwQixFQUE0QnJILEdBQTVCLENBQXJDLENBQUYsQ0FBSixFQUErRTtBQUM3RXNKLFlBQU0sQ0FBQ3V0QyxJQUFQLENBQVk3MkMsR0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT3NKLE1BQVA7QUFDRDs7ZUFFY3VNLFU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaENmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU3FELGNBQVQsQ0FBd0I3UixNQUF4QixFQUFnQztBQUM5QixTQUFPLFVBQVNySCxHQUFULEVBQWM7QUFDbkIsV0FBT3FILE1BQU0sSUFBSSxJQUFWLEdBQWlCdWxCLFNBQWpCLEdBQTZCdmxCLE1BQU0sQ0FBQ3JILEdBQUQsQ0FBMUM7QUFDRCxHQUZEO0FBR0Q7O2VBRWNrWixjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2JmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMvUSxRQUFULENBQWtCWixJQUFsQixFQUF3QnlOLEtBQXhCLEVBQStCO0FBQzdCLFNBQU8sMEJBQVksdUJBQVN6TixJQUFULEVBQWV5TixLQUFmLEVBQXNCOU0saUJBQXRCLENBQVosRUFBNkNYLElBQUksR0FBRyxFQUFwRCxDQUFQO0FBQ0Q7O2VBRWNZLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaEJmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlnTixlQUFlLEdBQUcsQ0FBQ2pXLHVCQUFELEdBQWtCZ0osaUJBQWxCLEdBQTZCLFVBQVNYLElBQVQsRUFBZTRLLE1BQWYsRUFBdUI7QUFDeEUsU0FBTyw2QkFBZTVLLElBQWYsRUFBcUIsVUFBckIsRUFBaUM7QUFDdEMsb0JBQWdCLElBRHNCO0FBRXRDLGtCQUFjLEtBRndCO0FBR3RDLGFBQVMsdUJBQVM0SyxNQUFULENBSDZCO0FBSXRDLGdCQUFZO0FBSjBCLEdBQWpDLENBQVA7QUFNRCxDQVBEO2VBU2VnRCxlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JCZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTNUwsU0FBVCxDQUFtQjRnQixDQUFuQixFQUFzQjlmLFFBQXRCLEVBQWdDO0FBQzlCLE1BQUkvQixLQUFLLEdBQUcsQ0FBQyxDQUFiO0FBQUEsTUFDSWdCLE1BQU0sR0FBRzlELEtBQUssQ0FBQzJrQixDQUFELENBRGxCOztBQUdBLFNBQU8sRUFBRTdoQixLQUFGLEdBQVU2aEIsQ0FBakIsRUFBb0I7QUFDbEI3Z0IsVUFBTSxDQUFDaEIsS0FBRCxDQUFOLEdBQWdCK0IsUUFBUSxDQUFDL0IsS0FBRCxDQUF4QjtBQUNEOztBQUNELFNBQU9nQixNQUFQO0FBQ0Q7O2VBRWNDLFM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkJmOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFJNFAsUUFBUSxHQUFHLElBQUksQ0FBbkI7QUFFQTs7QUFDQSxJQUFJQyxXQUFXLEdBQUd2VSxtQkFBU0EsaUJBQU8ybEIsU0FBaEIsR0FBNEJvQyxTQUE5QztBQUFBLElBQ0l2VCxjQUFjLEdBQUdELFdBQVcsR0FBR0EsV0FBVyxDQUFDM08sUUFBZixHQUEwQm1pQixTQUQxRDtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU3BpQixZQUFULENBQXNCckssS0FBdEIsRUFBNkI7QUFDM0I7QUFDQSxNQUFJLE9BQU9BLEtBQVAsSUFBZ0IsUUFBcEIsRUFBOEI7QUFDNUIsV0FBT0EsS0FBUDtBQUNEOztBQUNELE1BQUksc0JBQVFBLEtBQVIsQ0FBSixFQUFvQjtBQUNsQjtBQUNBLFdBQU8sdUJBQVNBLEtBQVQsRUFBZ0JxSyxZQUFoQixJQUFnQyxFQUF2QztBQUNEOztBQUNELE1BQUksdUJBQVNySyxLQUFULENBQUosRUFBcUI7QUFDbkIsV0FBT2taLGNBQWMsR0FBR0EsY0FBYyxDQUFDeVEsSUFBZixDQUFvQjNwQixLQUFwQixDQUFILEdBQWdDLEVBQXJEO0FBQ0Q7O0FBQ0QsTUFBSW1KLE1BQU0sR0FBSW5KLEtBQUssR0FBRyxFQUF0QjtBQUNBLFNBQVFtSixNQUFNLElBQUksR0FBVixJQUFrQixJQUFJbkosS0FBTCxJQUFlLENBQUNnWixRQUFsQyxHQUE4QyxJQUE5QyxHQUFxRDdQLE1BQTVEO0FBQ0Q7O2VBRWNrQixZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNrTSxTQUFULENBQW1CblAsSUFBbkIsRUFBeUI7QUFDdkIsU0FBTyxVQUFTcEgsS0FBVCxFQUFnQjtBQUNyQixXQUFPb0gsSUFBSSxDQUFDcEgsS0FBRCxDQUFYO0FBQ0QsR0FGRDtBQUdEOztlQUVjdVcsUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNiZjs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2pFLFVBQVQsQ0FBb0JwTCxNQUFwQixFQUE0QnNNLEtBQTVCLEVBQW1DO0FBQ2pDLFNBQU8sdUJBQVNBLEtBQVQsRUFBZ0IsVUFBUzNULEdBQVQsRUFBYztBQUNuQyxXQUFPcUgsTUFBTSxDQUFDckgsR0FBRCxDQUFiO0FBQ0QsR0FGTSxDQUFQO0FBR0Q7O2VBRWN5UyxVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xCZjs7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2UsVUFBVCxDQUFvQmIsTUFBcEIsRUFBNEJnQixLQUE1QixFQUFtQ3RNLE1BQW5DLEVBQTJDdU0sVUFBM0MsRUFBdUQ7QUFDckQsTUFBSUYsS0FBSyxHQUFHLENBQUNyTSxNQUFiO0FBQ0FBLFFBQU0sS0FBS0EsTUFBTSxHQUFHLEVBQWQsQ0FBTjtBQUVBLE1BQUlpQixLQUFLLEdBQUcsQ0FBQyxDQUFiO0FBQUEsTUFDSUksTUFBTSxHQUFHaUwsS0FBSyxDQUFDakwsTUFEbkI7O0FBR0EsU0FBTyxFQUFFSixLQUFGLEdBQVVJLE1BQWpCLEVBQXlCO0FBQ3ZCLFFBQUkxSSxHQUFHLEdBQUcyVCxLQUFLLENBQUNyTCxLQUFELENBQWY7QUFFQSxRQUFJekMsUUFBUSxHQUFHK04sVUFBVSxHQUNyQkEsVUFBVSxDQUFDdk0sTUFBTSxDQUFDckgsR0FBRCxDQUFQLEVBQWMyUyxNQUFNLENBQUMzUyxHQUFELENBQXBCLEVBQTJCQSxHQUEzQixFQUFnQ3FILE1BQWhDLEVBQXdDc0wsTUFBeEMsQ0FEVyxHQUVyQmlhLFNBRko7O0FBSUEsUUFBSS9tQixRQUFRLEtBQUsrbUIsU0FBakIsRUFBNEI7QUFDMUIvbUIsY0FBUSxHQUFHOE0sTUFBTSxDQUFDM1MsR0FBRCxDQUFqQjtBQUNEOztBQUNELFFBQUkwVCxLQUFKLEVBQVc7QUFDVCxvQ0FBZ0JyTSxNQUFoQixFQUF3QnJILEdBQXhCLEVBQTZCNkYsUUFBN0I7QUFDRCxLQUZELE1BRU87QUFDTCxnQ0FBWXdCLE1BQVosRUFBb0JySCxHQUFwQixFQUF5QjZGLFFBQXpCO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPd0IsTUFBUDtBQUNEOztlQUVjbU0sVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN2Q2Y7Ozs7QUFFQTtBQUNBLElBQUlvQixVQUFVLEdBQUd6TyxjQUFLLG9CQUFMLENBQWpCO2VBRWV5TyxVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0xmOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTckIsY0FBVCxDQUF3QnVCLFFBQXhCLEVBQWtDO0FBQ2hDLFNBQU8sdUJBQVMsVUFBU3pOLE1BQVQsRUFBaUJ3TixPQUFqQixFQUEwQjtBQUN4QyxRQUFJdk0sS0FBSyxHQUFHLENBQUMsQ0FBYjtBQUFBLFFBQ0lJLE1BQU0sR0FBR21NLE9BQU8sQ0FBQ25NLE1BRHJCO0FBQUEsUUFFSWtMLFVBQVUsR0FBR2xMLE1BQU0sR0FBRyxDQUFULEdBQWFtTSxPQUFPLENBQUNuTSxNQUFNLEdBQUcsQ0FBVixDQUFwQixHQUFtQ2trQixTQUZwRDtBQUFBLFFBR0kxYSxLQUFLLEdBQUd4SixNQUFNLEdBQUcsQ0FBVCxHQUFhbU0sT0FBTyxDQUFDLENBQUQsQ0FBcEIsR0FBMEIrWCxTQUh0QztBQUtBaFosY0FBVSxHQUFJa0IsUUFBUSxDQUFDcE0sTUFBVCxHQUFrQixDQUFsQixJQUF1QixPQUFPa0wsVUFBUCxJQUFxQixVQUE3QyxJQUNSbEwsTUFBTSxJQUFJa0wsVUFERixJQUVUZ1osU0FGSjs7QUFJQSxRQUFJMWEsS0FBSyxJQUFJLDZCQUFlMkMsT0FBTyxDQUFDLENBQUQsQ0FBdEIsRUFBMkJBLE9BQU8sQ0FBQyxDQUFELENBQWxDLEVBQXVDM0MsS0FBdkMsQ0FBYixFQUE0RDtBQUMxRDBCLGdCQUFVLEdBQUdsTCxNQUFNLEdBQUcsQ0FBVCxHQUFha2tCLFNBQWIsR0FBeUJoWixVQUF0QztBQUNBbEwsWUFBTSxHQUFHLENBQVQ7QUFDRDs7QUFDRHJCLFVBQU0sR0FBR2xJLE1BQU0sQ0FBQ2tJLE1BQUQsQ0FBZjs7QUFDQSxXQUFPLEVBQUVpQixLQUFGLEdBQVVJLE1BQWpCLEVBQXlCO0FBQ3ZCLFVBQUlpSyxNQUFNLEdBQUdrQyxPQUFPLENBQUN2TSxLQUFELENBQXBCOztBQUNBLFVBQUlxSyxNQUFKLEVBQVk7QUFDVm1DLGdCQUFRLENBQUN6TixNQUFELEVBQVNzTCxNQUFULEVBQWlCckssS0FBakIsRUFBd0JzTCxVQUF4QixDQUFSO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPdk0sTUFBUDtBQUNELEdBdEJNLENBQVA7QUF1QkQ7O2VBRWNrTSxjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BDZjs7OztBQUVBO0FBQ0EsSUFBSTVLLFdBQVcsR0FBR3hKLE1BQU0sQ0FBQ3FyQixTQUF6QjtBQUVBOztBQUNBLElBQUk1aEIsY0FBYyxHQUFHRCxXQUFXLENBQUNDLGNBQWpDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVN5SixzQkFBVCxDQUFnQ3lCLFFBQWhDLEVBQTBDZzNDLFFBQTFDLEVBQW9EOXFELEdBQXBELEVBQXlEcUgsTUFBekQsRUFBaUU7QUFDL0QsTUFBSXlNLFFBQVEsS0FBSzhZLFNBQWIsSUFDQyxpQkFBRzlZLFFBQUgsRUFBYW5MLFdBQVcsQ0FBQzNJLEdBQUQsQ0FBeEIsS0FBa0MsQ0FBQzRJLGNBQWMsQ0FBQ2toQixJQUFmLENBQW9CemlCLE1BQXBCLEVBQTRCckgsR0FBNUIsQ0FEeEMsRUFDMkU7QUFDekUsV0FBTzhxRCxRQUFQO0FBQ0Q7O0FBQ0QsU0FBT2gzQyxRQUFQO0FBQ0Q7O2VBRWN6QixzQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1QmY7Ozs7QUFFQSxJQUFJblQsY0FBYyxHQUFJLFlBQVc7QUFDL0IsTUFBSTtBQUNGLFFBQUlxSSxJQUFJLEdBQUcsd0JBQVVwSSxNQUFWLEVBQWtCLGdCQUFsQixDQUFYO0FBQ0FvSSxRQUFJLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULENBQUo7QUFDQSxXQUFPQSxJQUFQO0FBQ0QsR0FKRCxDQUlFLE9BQU9rRyxDQUFQLEVBQVUsQ0FBRTtBQUNmLENBTnFCLEVBQXRCOztlQVFldk8sYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWZjs7OztBQUVBO0FBQ0EsSUFBSStaLFdBQVcsR0FBRztBQUNoQixPQUFLLE9BRFc7QUFFaEIsT0FBSyxNQUZXO0FBR2hCLE9BQUssTUFIVztBQUloQixPQUFLLFFBSlc7QUFLaEIsT0FBSztBQUxXLENBQWxCO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUQsY0FBYyxHQUFHLDZCQUFlQyxXQUFmLENBQXJCO2VBRWVELGM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEJmO0FBQ0EsSUFBSVIsYUFBYSxHQUFHO0FBQ2xCLFFBQU0sSUFEWTtBQUVsQixPQUFLLEdBRmE7QUFHbEIsUUFBTSxHQUhZO0FBSWxCLFFBQU0sR0FKWTtBQUtsQixZQUFVLE9BTFE7QUFNbEIsWUFBVTtBQU5RLENBQXBCO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU3hGLGdCQUFULENBQTBCKzNDLEdBQTFCLEVBQStCO0FBQzdCLFNBQU8sT0FBT3Z5QyxhQUFhLENBQUN1eUMsR0FBRCxDQUEzQjtBQUNEOztlQUVjLzNDLGdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckJmO0FBQ0EsSUFBSTFNLFVBQVUsR0FBRyxRQUFPd0IsTUFBUCx5Q0FBT0EsTUFBUCxNQUFpQixRQUFqQixJQUE2QkEsTUFBN0IsSUFBdUNBLE1BQU0sQ0FBQzNJLE1BQVAsS0FBa0JBLE1BQXpELElBQW1FMkksTUFBcEY7ZUFFZXhCLFU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hmOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNrQixTQUFULENBQW1CSCxNQUFuQixFQUEyQnJILEdBQTNCLEVBQWdDO0FBQzlCLE1BQUlHLEtBQUssR0FBRyx1QkFBU2tILE1BQVQsRUFBaUJySCxHQUFqQixDQUFaO0FBQ0EsU0FBTywyQkFBYUcsS0FBYixJQUFzQkEsS0FBdEIsR0FBOEJ5c0IsU0FBckM7QUFDRDs7ZUFFY3BsQixTOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hCZjs7OztBQUVBO0FBQ0EsSUFBSStRLFlBQVksR0FBRyxzQkFBUXBaLE1BQU0sQ0FBQ0MsY0FBZixFQUErQkQsTUFBL0IsQ0FBbkI7ZUFFZW9aLFk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTGY7Ozs7QUFFQTtBQUNBLElBQUk1UCxXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FBekI7QUFFQTs7QUFDQSxJQUFJNWhCLGNBQWMsR0FBR0QsV0FBVyxDQUFDQyxjQUFqQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSTRMLG9CQUFvQixHQUFHN0wsV0FBVyxDQUFDOEIsUUFBdkM7QUFFQTs7QUFDQSxJQUFJN0YsY0FBYyxHQUFHQyxtQkFBU0EsaUJBQU9nbUQsV0FBaEIsR0FBOEJqK0IsU0FBbkQ7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTOW5CLFNBQVQsQ0FBbUIzRSxLQUFuQixFQUEwQjtBQUN4QixNQUFJc1UsS0FBSyxHQUFHN0wsY0FBYyxDQUFDa2hCLElBQWYsQ0FBb0IzcEIsS0FBcEIsRUFBMkJ5RSxjQUEzQixDQUFaO0FBQUEsTUFDSWlELEdBQUcsR0FBRzFILEtBQUssQ0FBQ3lFLGNBQUQsQ0FEZjs7QUFHQSxNQUFJO0FBQ0Z6RSxTQUFLLENBQUN5RSxjQUFELENBQUwsR0FBd0Jnb0IsU0FBeEI7QUFDQSxRQUFJM2IsUUFBUSxHQUFHLElBQWY7QUFDRCxHQUhELENBR0UsT0FBT3hELENBQVAsRUFBVSxDQUFFOztBQUVkLE1BQUluRSxNQUFNLEdBQUdrTCxvQkFBb0IsQ0FBQ3NWLElBQXJCLENBQTBCM3BCLEtBQTFCLENBQWI7O0FBQ0EsTUFBSThRLFFBQUosRUFBYztBQUNaLFFBQUl3RCxLQUFKLEVBQVc7QUFDVHRVLFdBQUssQ0FBQ3lFLGNBQUQsQ0FBTCxHQUF3QmlELEdBQXhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTzFILEtBQUssQ0FBQ3lFLGNBQUQsQ0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTzBFLE1BQVA7QUFDRDs7ZUFFY3hFLFM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0NmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTaVAsUUFBVCxDQUFrQjFNLE1BQWxCLEVBQTBCckgsR0FBMUIsRUFBK0I7QUFDN0IsU0FBT3FILE1BQU0sSUFBSSxJQUFWLEdBQWlCdWxCLFNBQWpCLEdBQTZCdmxCLE1BQU0sQ0FBQ3JILEdBQUQsQ0FBMUM7QUFDRDs7ZUFFYytULFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNaZjtBQUNBLElBQUl2TCxnQkFBZ0IsR0FBRyxnQkFBdkI7QUFFQTs7QUFDQSxJQUFJQyxRQUFRLEdBQUcsa0JBQWY7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNKLE9BQVQsQ0FBaUJsSSxLQUFqQixFQUF3QnVJLE1BQXhCLEVBQWdDO0FBQzlCLE1BQUl6QyxJQUFJLFdBQVU5RixLQUFWLENBQVI7O0FBQ0F1SSxRQUFNLEdBQUdBLE1BQU0sSUFBSSxJQUFWLEdBQWlCRixnQkFBakIsR0FBb0NFLE1BQTdDO0FBRUEsU0FBTyxDQUFDLENBQUNBLE1BQUYsS0FDSnpDLElBQUksSUFBSSxRQUFSLElBQ0VBLElBQUksSUFBSSxRQUFSLElBQW9Cd0MsUUFBUSxDQUFDb25CLElBQVQsQ0FBYzF2QixLQUFkLENBRmxCLEtBR0FBLEtBQUssR0FBRyxDQUFDLENBQVQsSUFBY0EsS0FBSyxHQUFHLENBQVIsSUFBYSxDQUEzQixJQUFnQ0EsS0FBSyxHQUFHdUksTUFIL0M7QUFJRDs7ZUFFY0wsTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4QmY7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsY0FBVCxDQUF3QnBJLEtBQXhCLEVBQStCbUksS0FBL0IsRUFBc0NqQixNQUF0QyxFQUE4QztBQUM1QyxNQUFJLENBQUMsdUJBQVNBLE1BQVQsQ0FBTCxFQUF1QjtBQUNyQixXQUFPLEtBQVA7QUFDRDs7QUFDRCxNQUFJcEIsSUFBSSxXQUFVcUMsS0FBVixDQUFSOztBQUNBLE1BQUlyQyxJQUFJLElBQUksUUFBUixHQUNLLDBCQUFZb0IsTUFBWixLQUF1QixzQkFBUWlCLEtBQVIsRUFBZWpCLE1BQU0sQ0FBQ3FCLE1BQXRCLENBRDVCLEdBRUt6QyxJQUFJLElBQUksUUFBUixJQUFvQnFDLEtBQUssSUFBSWpCLE1BRnRDLEVBR007QUFDSixXQUFPLGlCQUFHQSxNQUFNLENBQUNpQixLQUFELENBQVQsRUFBa0JuSSxLQUFsQixDQUFQO0FBQ0Q7O0FBQ0QsU0FBTyxLQUFQO0FBQ0Q7O2VBRWNvSSxjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdCZjs7OztBQUVBO0FBQ0EsSUFBSW1NLFVBQVUsR0FBSSxZQUFXO0FBQzNCLE1BQUlDLEdBQUcsR0FBRyxTQUFTd1csSUFBVCxDQUFjdlcsdUJBQWNBLG9CQUFXaFYsSUFBekIsSUFBaUNnVixvQkFBV2hWLElBQVgsQ0FBZ0JvckQsUUFBakQsSUFBNkQsRUFBM0UsQ0FBVjtBQUNBLFNBQU9yMkMsR0FBRyxHQUFJLG1CQUFtQkEsR0FBdkIsR0FBOEIsRUFBeEM7QUFDRCxDQUhpQixFQUFsQjtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTTCxRQUFULENBQWtCL00sSUFBbEIsRUFBd0I7QUFDdEIsU0FBTyxDQUFDLENBQUNtTixVQUFGLElBQWlCQSxVQUFVLElBQUluTixJQUF0QztBQUNEOztlQUVjK00sUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNuQmY7QUFDQSxJQUFJM0wsV0FBVyxHQUFHeEosTUFBTSxDQUFDcXJCLFNBQXpCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUzNnQixXQUFULENBQXFCMUosS0FBckIsRUFBNEI7QUFDMUIsTUFBSXdKLElBQUksR0FBR3hKLEtBQUssSUFBSUEsS0FBSyxDQUFDRyxXQUExQjtBQUFBLE1BQ0lzSixLQUFLLEdBQUksT0FBT0QsSUFBUCxJQUFlLFVBQWYsSUFBNkJBLElBQUksQ0FBQzZnQixTQUFuQyxJQUFpRDdoQixXQUQ3RDtBQUdBLFNBQU94SSxLQUFLLEtBQUt5SixLQUFqQjtBQUNEOztlQUVjQyxXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2pCZjs7OztBQUVBO0FBQ0EsSUFBSTZPLFVBQVUsR0FBRyxzQkFBUXZaLE1BQU0sQ0FBQ1MsSUFBZixFQUFxQlQsTUFBckIsQ0FBakI7ZUFFZXVaLFU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTGY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU04sWUFBVCxDQUFzQi9RLE1BQXRCLEVBQThCO0FBQzVCLE1BQUlpQyxNQUFNLEdBQUcsRUFBYjs7QUFDQSxNQUFJakMsTUFBTSxJQUFJLElBQWQsRUFBb0I7QUFDbEIsU0FBSyxJQUFJckgsR0FBVCxJQUFnQmIsTUFBTSxDQUFDa0ksTUFBRCxDQUF0QixFQUFnQztBQUM5QmlDLFlBQU0sQ0FBQ3V0QyxJQUFQLENBQVk3MkMsR0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT3NKLE1BQVA7QUFDRDs7ZUFFYzhPLFk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkJmOzs7Ozs7QUFFQTtBQUNBLElBQUluQyxXQUFXLEdBQUcsOEJBQU9DLE9BQVAsTUFBa0IsUUFBbEIsSUFBOEJBLE9BQTlCLElBQXlDLENBQUNBLE9BQU8sQ0FBQ2tqQyxRQUFsRCxJQUE4RGxqQyxPQUFoRjtBQUVBOztBQUNBLElBQUlDLFVBQVUsR0FBR0YsV0FBVyxJQUFJLDhCQUFPM1MsTUFBUCxNQUFpQixRQUFoQyxJQUE0Q0EsTUFBNUMsSUFBc0QsQ0FBQ0EsTUFBTSxDQUFDODFDLFFBQTlELElBQTBFOTFDLE1BQTNGO0FBRUE7O0FBQ0EsSUFBSThTLGFBQWEsR0FBR0QsVUFBVSxJQUFJQSxVQUFVLENBQUNELE9BQVgsS0FBdUJELFdBQXpEO0FBRUE7O0FBQ0EsSUFBSWlDLFdBQVcsR0FBRzlCLGFBQWEsSUFBSTlQLG9CQUFXMmtELE9BQTlDO0FBRUE7O0FBQ0EsSUFBSXgwQyxRQUFRLEdBQUksWUFBVztBQUN6QixNQUFJO0FBQ0Y7QUFDQSxRQUFJMEIsS0FBSyxHQUFHaEMsVUFBVSxJQUFJQSxVQUFVLENBQUNySSxPQUF6QixJQUFvQ3FJLFVBQVUsQ0FBQ3JJLE9BQVgsQ0FBbUIsTUFBbkIsRUFBMkJxSyxLQUEzRTs7QUFFQSxRQUFJQSxLQUFKLEVBQVc7QUFDVCxhQUFPQSxLQUFQO0FBQ0QsS0FOQyxDQVFGOzs7QUFDQSxXQUFPRCxXQUFXLElBQUlBLFdBQVcsQ0FBQ2d6QyxPQUEzQixJQUFzQ2h6QyxXQUFXLENBQUNnekMsT0FBWixDQUFvQixNQUFwQixDQUE3QztBQUNELEdBVkQsQ0FVRSxPQUFPejlDLENBQVAsRUFBVSxDQUFFO0FBQ2YsQ0FaZSxFQUFoQjs7ZUFjZWdKLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdCZjtBQUNBLElBQUk5TixXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FBekI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUloVyxvQkFBb0IsR0FBRzdMLFdBQVcsQ0FBQzhCLFFBQXZDO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUzFGLGNBQVQsQ0FBd0I1RSxLQUF4QixFQUErQjtBQUM3QixTQUFPcVUsb0JBQW9CLENBQUNzVixJQUFyQixDQUEwQjNwQixLQUExQixDQUFQO0FBQ0Q7O2VBRWM0RSxjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JCZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU29GLE9BQVQsQ0FBaUI1QyxJQUFqQixFQUF1QjJDLFNBQXZCLEVBQWtDO0FBQ2hDLFNBQU8sVUFBU2loRCxHQUFULEVBQWM7QUFDbkIsV0FBTzVqRCxJQUFJLENBQUMyQyxTQUFTLENBQUNpaEQsR0FBRCxDQUFWLENBQVg7QUFDRCxHQUZEO0FBR0Q7O2VBRWNoaEQsTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNkZjs7OztBQUVBO0FBQ0EsSUFBSTRLLFNBQVMsR0FBRzlOLElBQUksQ0FBQytJLEdBQXJCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVMvSCxRQUFULENBQWtCVixJQUFsQixFQUF3QnlOLEtBQXhCLEVBQStCOUssU0FBL0IsRUFBMEM7QUFDeEM4SyxPQUFLLEdBQUdELFNBQVMsQ0FBQ0MsS0FBSyxLQUFLNFgsU0FBVixHQUF1QnJsQixJQUFJLENBQUNtQixNQUFMLEdBQWMsQ0FBckMsR0FBMENzTSxLQUEzQyxFQUFrRCxDQUFsRCxDQUFqQjtBQUNBLFNBQU8sWUFBVztBQUNoQixRQUFJbFUsSUFBSSxHQUFHOFUsU0FBWDtBQUFBLFFBQ0l0TixLQUFLLEdBQUcsQ0FBQyxDQURiO0FBQUEsUUFFSUksTUFBTSxHQUFHcU0sU0FBUyxDQUFDalUsSUFBSSxDQUFDNEgsTUFBTCxHQUFjc00sS0FBZixFQUFzQixDQUF0QixDQUZ0QjtBQUFBLFFBR0k1SyxLQUFLLEdBQUc1RSxLQUFLLENBQUNrRCxNQUFELENBSGpCOztBQUtBLFdBQU8sRUFBRUosS0FBRixHQUFVSSxNQUFqQixFQUF5QjtBQUN2QjBCLFdBQUssQ0FBQzlCLEtBQUQsQ0FBTCxHQUFleEgsSUFBSSxDQUFDa1UsS0FBSyxHQUFHMU0sS0FBVCxDQUFuQjtBQUNEOztBQUNEQSxTQUFLLEdBQUcsQ0FBQyxDQUFUO0FBQ0EsUUFBSTJNLFNBQVMsR0FBR3pQLEtBQUssQ0FBQ3dQLEtBQUssR0FBRyxDQUFULENBQXJCOztBQUNBLFdBQU8sRUFBRTFNLEtBQUYsR0FBVTBNLEtBQWpCLEVBQXdCO0FBQ3RCQyxlQUFTLENBQUMzTSxLQUFELENBQVQsR0FBbUJ4SCxJQUFJLENBQUN3SCxLQUFELENBQXZCO0FBQ0Q7O0FBQ0QyTSxhQUFTLENBQUNELEtBQUQsQ0FBVCxHQUFtQjlLLFNBQVMsQ0FBQ0UsS0FBRCxDQUE1QjtBQUNBLFdBQU8sb0JBQU03QyxJQUFOLEVBQVksSUFBWixFQUFrQjBOLFNBQWxCLENBQVA7QUFDRCxHQWhCRDtBQWlCRDs7ZUFFY2hOLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkNmO0FBQ0EsSUFBSTBRLFFBQVEsR0FBRyxrQkFBZjtlQUVlQSxROzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hmO0FBQ0EsSUFBSUMsVUFBVSxHQUFHLGlCQUFqQjtlQUVlQSxVOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0hmO0FBQ0EsSUFBSXJPLGFBQWEsR0FBRyxrQkFBcEI7ZUFFZUEsYTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNIZjs7Ozs7O0FBRUE7QUFDQSxJQUFJbkUsUUFBUSxHQUFHLFFBQU9DLElBQVAseUNBQU9BLElBQVAsTUFBZSxRQUFmLElBQTJCQSxJQUEzQixJQUFtQ0EsSUFBSSxDQUFDbEgsTUFBTCxLQUFnQkEsTUFBbkQsSUFBNkRrSCxJQUE1RTtBQUVBOztBQUNBLElBQUlGLElBQUksR0FBR0csdUJBQWNGLFFBQWQsSUFBMEJHLFFBQVEsQ0FBQyxhQUFELENBQVIsRUFBckM7ZUFFZUosSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSZjs7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJNkIsV0FBVyxHQUFHLHVCQUFTbU4sd0JBQVQsQ0FBbEI7ZUFFZW5OLFc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDYmY7QUFDQSxJQUFJcU4sU0FBUyxHQUFHLEdBQWhCO0FBQUEsSUFDSUMsUUFBUSxHQUFHLEVBRGY7QUFHQTs7QUFDQSxJQUFJQyxTQUFTLEdBQUd0SixJQUFJLENBQUNnK0IsR0FBckI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUy8wQixRQUFULENBQWtCM04sSUFBbEIsRUFBd0I7QUFDdEIsTUFBSWlPLEtBQUssR0FBRyxDQUFaO0FBQUEsTUFDSUMsVUFBVSxHQUFHLENBRGpCO0FBR0EsU0FBTyxZQUFXO0FBQ2hCLFFBQUlDLEtBQUssR0FBR0gsU0FBUyxFQUFyQjtBQUFBLFFBQ0lJLFNBQVMsR0FBR0wsUUFBUSxJQUFJSSxLQUFLLEdBQUdELFVBQVosQ0FEeEI7QUFHQUEsY0FBVSxHQUFHQyxLQUFiOztBQUNBLFFBQUlDLFNBQVMsR0FBRyxDQUFoQixFQUFtQjtBQUNqQixVQUFJLEVBQUVILEtBQUYsSUFBV0gsU0FBZixFQUEwQjtBQUN4QixlQUFPTyxTQUFTLENBQUMsQ0FBRCxDQUFoQjtBQUNEO0FBQ0YsS0FKRCxNQUlPO0FBQ0xKLFdBQUssR0FBRyxDQUFSO0FBQ0Q7O0FBQ0QsV0FBT2pPLElBQUksQ0FBQ2EsS0FBTCxDQUFXd2tCLFNBQVgsRUFBc0JoWCxTQUF0QixDQUFQO0FBQ0QsR0FiRDtBQWNEOztlQUVjVixROzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BDZjtBQUNBLElBQUlmLFNBQVMsR0FBRzVOLFFBQVEsQ0FBQ2lrQixTQUF6QjtBQUVBOztBQUNBLElBQUlwVyxZQUFZLEdBQUdELFNBQVMsQ0FBQzFKLFFBQTdCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUzhKLFFBQVQsQ0FBa0JoTixJQUFsQixFQUF3QjtBQUN0QixNQUFJQSxJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQixRQUFJO0FBQ0YsYUFBTzZNLFlBQVksQ0FBQzBWLElBQWIsQ0FBa0J2aUIsSUFBbEIsQ0FBUDtBQUNELEtBRkQsQ0FFRSxPQUFPa0csQ0FBUCxFQUFVLENBQUU7O0FBQ2QsUUFBSTtBQUNGLGFBQVFsRyxJQUFJLEdBQUcsRUFBZjtBQUNELEtBRkQsQ0FFRSxPQUFPa0csQ0FBUCxFQUFVLENBQUU7QUFDZjs7QUFDRCxTQUFPLEVBQVA7QUFDRDs7ZUFFYzhHLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDekJmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUluQyxZQUFZLEdBQUcsNkJBQWUsVUFBUy9LLE1BQVQsRUFBaUJzTCxNQUFqQixFQUF5Qnk0QyxRQUF6QixFQUFtQ3gzQyxVQUFuQyxFQUErQztBQUMvRSwyQkFBV2pCLE1BQVgsRUFBbUIscUJBQU9BLE1BQVAsQ0FBbkIsRUFBbUN0TCxNQUFuQyxFQUEyQ3VNLFVBQTNDO0FBQ0QsQ0FGa0IsQ0FBbkI7ZUFJZXhCLFk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDckNmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJa0IsT0FBTyxHQUFHLHVCQUFTLFVBQVMvTCxJQUFULEVBQWV6RyxJQUFmLEVBQXFCO0FBQzFDLE1BQUk7QUFDRixXQUFPLG9CQUFNeUcsSUFBTixFQUFZcWxCLFNBQVosRUFBdUI5ckIsSUFBdkIsQ0FBUDtBQUNELEdBRkQsQ0FFRSxPQUFPMk0sQ0FBUCxFQUFVO0FBQ1YsV0FBTyxzQkFBUUEsQ0FBUixJQUFhQSxDQUFiLEdBQWlCLElBQUkrb0IsS0FBSixDQUFVL29CLENBQVYsQ0FBeEI7QUFDRDtBQUNGLENBTmEsQ0FBZDtlQVFlNkYsTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOEIsUUFBVCxDQUFrQmpWLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU8sWUFBVztBQUNoQixXQUFPQSxLQUFQO0FBQ0QsR0FGRDtBQUdEOztlQUVjaVYsUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6QmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMzTyxFQUFULENBQVl0RyxLQUFaLEVBQW1CcUcsS0FBbkIsRUFBMEI7QUFDeEIsU0FBT3JHLEtBQUssS0FBS3FHLEtBQVYsSUFBb0JyRyxLQUFLLEtBQUtBLEtBQVYsSUFBbUJxRyxLQUFLLEtBQUtBLEtBQXhEO0FBQ0Q7O2VBRWNDLEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcENmOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFJcVMsZUFBZSxHQUFHLFVBQXRCO0FBQUEsSUFDSUMsa0JBQWtCLEdBQUdsRyxNQUFNLENBQUNpRyxlQUFlLENBQUNuRyxNQUFqQixDQUQvQjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNrRyxNQUFULENBQWdCMUcsTUFBaEIsRUFBd0I7QUFDdEJBLFFBQU0sR0FBRyx1QkFBU0EsTUFBVCxDQUFUO0FBQ0EsU0FBUUEsTUFBTSxJQUFJNEcsa0JBQWtCLENBQUM4VyxJQUFuQixDQUF3QjFkLE1BQXhCLENBQVgsR0FDSEEsTUFBTSxDQUFDd2YsT0FBUCxDQUFlN1ksZUFBZixFQUFnQ0UsdUJBQWhDLENBREcsR0FFSDdHLE1BRko7QUFHRDs7ZUFFYzBHLE07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDMUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzNRLFFBQVQsQ0FBa0IvSCxLQUFsQixFQUF5QjtBQUN2QixTQUFPQSxLQUFQO0FBQ0Q7O2VBRWMrSCxROzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BCZjs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSVMsV0FBVyxHQUFHeEosTUFBTSxDQUFDcXJCLFNBQXpCO0FBRUE7O0FBQ0EsSUFBSTVoQixjQUFjLEdBQUdELFdBQVcsQ0FBQ0MsY0FBakM7QUFFQTs7QUFDQSxJQUFJa04sb0JBQW9CLEdBQUduTixXQUFXLENBQUNtTixvQkFBdkM7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSTlNLFdBQVcsR0FBRyw4QkFBZ0IsWUFBVztBQUFFLFNBQU80TSxTQUFQO0FBQW1CLENBQWhDLEVBQWhCLElBQXNERyx3QkFBdEQsR0FBd0UsVUFBUzVWLEtBQVQsRUFBZ0I7QUFDeEcsU0FBTywyQkFBYUEsS0FBYixLQUF1QnlJLGNBQWMsQ0FBQ2toQixJQUFmLENBQW9CM3BCLEtBQXBCLEVBQTJCLFFBQTNCLENBQXZCLElBQ0wsQ0FBQzJWLG9CQUFvQixDQUFDZ1UsSUFBckIsQ0FBMEIzcEIsS0FBMUIsRUFBaUMsUUFBakMsQ0FESDtBQUVELENBSEQ7ZUFLZTZJLFc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbkNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJRixPQUFPLEdBQUd0RCxLQUFLLENBQUNzRCxPQUFwQjtlQUVlQSxPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3pCZjs7QUFDQTs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2xDLFdBQVQsQ0FBcUJ6RyxLQUFyQixFQUE0QjtBQUMxQixTQUFPQSxLQUFLLElBQUksSUFBVCxJQUFpQix1QkFBU0EsS0FBSyxDQUFDdUksTUFBZixDQUFqQixJQUEyQyxDQUFDLHlCQUFXdkksS0FBWCxDQUFuRDtBQUNEOztlQUVjeUcsVzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoQ2Y7O0FBQ0E7Ozs7OztBQUVBO0FBQ0EsSUFBSXFQLFdBQVcsR0FBRyw4QkFBT0MsT0FBUCxNQUFrQixRQUFsQixJQUE4QkEsT0FBOUIsSUFBeUMsQ0FBQ0EsT0FBTyxDQUFDa2pDLFFBQWxELElBQThEbGpDLE9BQWhGO0FBRUE7O0FBQ0EsSUFBSUMsVUFBVSxHQUFHRixXQUFXLElBQUksOEJBQU8zUyxNQUFQLE1BQWlCLFFBQWhDLElBQTRDQSxNQUE1QyxJQUFzRCxDQUFDQSxNQUFNLENBQUM4MUMsUUFBOUQsSUFBMEU5MUMsTUFBM0Y7QUFFQTs7QUFDQSxJQUFJOFMsYUFBYSxHQUFHRCxVQUFVLElBQUlBLFVBQVUsQ0FBQ0QsT0FBWCxLQUF1QkQsV0FBekQ7QUFFQTs7QUFDQSxJQUFJSSxNQUFNLEdBQUdELGFBQWEsR0FBR2pRLGNBQUtrUSxNQUFSLEdBQWlCdVcsU0FBM0M7QUFFQTs7QUFDQSxJQUFJdFcsY0FBYyxHQUFHRCxNQUFNLEdBQUdBLE1BQU0sQ0FBQ25OLFFBQVYsR0FBcUIwakIsU0FBaEQ7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUkxakIsUUFBUSxHQUFHb04sY0FBYyxJQUFJQyxrQkFBakM7ZUFFZXJOLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3JDZjs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSVksU0FBUyxHQUFHLHVCQUFoQjtBQUFBLElBQ0lDLFFBQVEsR0FBRyxnQkFEZjtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTRSxPQUFULENBQWlCOUosS0FBakIsRUFBd0I7QUFDdEIsTUFBSSxDQUFDLDJCQUFhQSxLQUFiLENBQUwsRUFBMEI7QUFDeEIsV0FBTyxLQUFQO0FBQ0Q7O0FBQ0QsTUFBSTBILEdBQUcsR0FBRyx5QkFBVzFILEtBQVgsQ0FBVjtBQUNBLFNBQU8wSCxHQUFHLElBQUlrQyxRQUFQLElBQW1CbEMsR0FBRyxJQUFJaUMsU0FBMUIsSUFDSixPQUFPM0osS0FBSyxDQUFDNnNCLE9BQWIsSUFBd0IsUUFBeEIsSUFBb0MsT0FBTzdzQixLQUFLLENBQUNtQixJQUFiLElBQXFCLFFBQXpELElBQXFFLENBQUMsNEJBQWNuQixLQUFkLENBRHpFO0FBRUQ7O2VBRWM4SixPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ25DZjs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSXhDLFFBQVEsR0FBRyx3QkFBZjtBQUFBLElBQ0lDLE9BQU8sR0FBRyxtQkFEZDtBQUFBLElBRUlDLE1BQU0sR0FBRyw0QkFGYjtBQUFBLElBR0lDLFFBQVEsR0FBRyxnQkFIZjtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU2pCLFVBQVQsQ0FBb0J4RyxLQUFwQixFQUEyQjtBQUN6QixNQUFJLENBQUMsdUJBQVNBLEtBQVQsQ0FBTCxFQUFzQjtBQUNwQixXQUFPLEtBQVA7QUFDRCxHQUh3QixDQUl6QjtBQUNBOzs7QUFDQSxNQUFJMEgsR0FBRyxHQUFHLHlCQUFXMUgsS0FBWCxDQUFWO0FBQ0EsU0FBTzBILEdBQUcsSUFBSUgsT0FBUCxJQUFrQkcsR0FBRyxJQUFJRixNQUF6QixJQUFtQ0UsR0FBRyxJQUFJSixRQUExQyxJQUFzREksR0FBRyxJQUFJRCxRQUFwRTtBQUNEOztlQUVjakIsVTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNwQ2Y7QUFDQSxJQUFJNkIsZ0JBQWdCLEdBQUcsZ0JBQXZCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTOUIsUUFBVCxDQUFrQnZHLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU8sT0FBT0EsS0FBUCxJQUFnQixRQUFoQixJQUNMQSxLQUFLLEdBQUcsQ0FBQyxDQURKLElBQ1NBLEtBQUssR0FBRyxDQUFSLElBQWEsQ0FEdEIsSUFDMkJBLEtBQUssSUFBSXFJLGdCQUQzQztBQUVEOztlQUVjOUIsUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2xDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNSLFFBQVQsQ0FBa0IvRixLQUFsQixFQUF5QjtBQUN2QixNQUFJOEYsSUFBSSxXQUFVOUYsS0FBVixDQUFSOztBQUNBLFNBQU9BLEtBQUssSUFBSSxJQUFULEtBQWtCOEYsSUFBSSxJQUFJLFFBQVIsSUFBb0JBLElBQUksSUFBSSxVQUE5QyxDQUFQO0FBQ0Q7O2VBRWNDLFE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM5QmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2pCLFlBQVQsQ0FBc0I5RSxLQUF0QixFQUE2QjtBQUMzQixTQUFPQSxLQUFLLElBQUksSUFBVCxJQUFpQixRQUFPQSxLQUFQLEtBQWdCLFFBQXhDO0FBQ0Q7O2VBRWM4RSxZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVCZjs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSWdTLFNBQVMsR0FBRyxpQkFBaEI7QUFFQTs7QUFDQSxJQUFJOUMsU0FBUyxHQUFHNU4sUUFBUSxDQUFDaWtCLFNBQXpCO0FBQUEsSUFDSTdoQixXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FEekI7QUFHQTs7QUFDQSxJQUFJcFcsWUFBWSxHQUFHRCxTQUFTLENBQUMxSixRQUE3QjtBQUVBOztBQUNBLElBQUk3QixjQUFjLEdBQUdELFdBQVcsQ0FBQ0MsY0FBakM7QUFFQTs7QUFDQSxJQUFJMFAsZ0JBQWdCLEdBQUdsRSxZQUFZLENBQUMwVixJQUFiLENBQWtCM3FCLE1BQWxCLENBQXZCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUzZLLGFBQVQsQ0FBdUI3SixLQUF2QixFQUE4QjtBQUM1QixNQUFJLENBQUMsMkJBQWFBLEtBQWIsQ0FBRCxJQUF3Qix5QkFBV0EsS0FBWCxLQUFxQjhXLFNBQWpELEVBQTREO0FBQzFELFdBQU8sS0FBUDtBQUNEOztBQUNELE1BQUlyTixLQUFLLEdBQUcsMkJBQWF6SixLQUFiLENBQVo7O0FBQ0EsTUFBSXlKLEtBQUssS0FBSyxJQUFkLEVBQW9CO0FBQ2xCLFdBQU8sSUFBUDtBQUNEOztBQUNELE1BQUlELElBQUksR0FBR2YsY0FBYyxDQUFDa2hCLElBQWYsQ0FBb0JsZ0IsS0FBcEIsRUFBMkIsYUFBM0IsS0FBNkNBLEtBQUssQ0FBQ3RKLFdBQTlEO0FBQ0EsU0FBTyxPQUFPcUosSUFBUCxJQUFlLFVBQWYsSUFBNkJBLElBQUksWUFBWUEsSUFBN0MsSUFDTHlLLFlBQVksQ0FBQzBWLElBQWIsQ0FBa0JuZ0IsSUFBbEIsS0FBMkIyTyxnQkFEN0I7QUFFRDs7ZUFFY3RPLGE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDN0RmOztBQUNBOzs7Ozs7QUFFQTtBQUNBLElBQUl1UCxTQUFTLEdBQUcsaUJBQWhCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxTQUFTRCxRQUFULENBQWtCblosS0FBbEIsRUFBeUI7QUFDdkIsU0FBTyxRQUFPQSxLQUFQLEtBQWdCLFFBQWhCLElBQ0osMkJBQWFBLEtBQWIsS0FBdUIseUJBQVdBLEtBQVgsS0FBcUJvWixTQUQvQztBQUVEOztlQUVjRCxROzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzVCZjs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSTlDLGdCQUFnQixHQUFHQyxxQkFBWUEsa0JBQVNyTixZQUE1QztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsWUFBWSxHQUFHb04sZ0JBQWdCLEdBQUcsd0JBQVVBLGdCQUFWLENBQUgsR0FBaUNHLHlCQUFwRTtlQUVldk4sWTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxQmY7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVN4SixJQUFULENBQWN5SCxNQUFkLEVBQXNCO0FBQ3BCLFNBQU8sMEJBQVlBLE1BQVosSUFBc0IsNEJBQWNBLE1BQWQsQ0FBdEIsR0FBOEMsdUJBQVNBLE1BQVQsQ0FBckQ7QUFDRDs7ZUFFY3pILEk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcENmOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM2VCxNQUFULENBQWdCcE0sTUFBaEIsRUFBd0I7QUFDdEIsU0FBTywwQkFBWUEsTUFBWixJQUFzQiw0QkFBY0EsTUFBZCxFQUFzQixJQUF0QixDQUF0QixHQUFvRCx5QkFBV0EsTUFBWCxDQUEzRDtBQUNEOztlQUVjb00sTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvQmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOEMsU0FBVCxHQUFxQjtBQUNuQixTQUFPLEtBQVA7QUFDRDs7ZUFFY0EsUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNqQmY7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQUk4MEMsNEJBQTRCLEdBQUcsb0RBQW5DO0FBRUE7O0FBQ0EsSUFBSTM1QyxvQkFBb0IsR0FBRyxnQkFBM0I7QUFBQSxJQUNJQyxtQkFBbUIsR0FBRyxvQkFEMUI7QUFBQSxJQUVJQyxxQkFBcUIsR0FBRywrQkFGNUI7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJMDVDLDBCQUEwQixHQUFHLGtCQUFqQztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLElBQUl6NUMsWUFBWSxHQUFHLGlDQUFuQjtBQUVBOztBQUNBLElBQUlDLFNBQVMsR0FBRyxNQUFoQjtBQUVBOztBQUNBLElBQUlDLGlCQUFpQixHQUFHLHdCQUF4QjtBQUVBOztBQUNBLElBQUlwSixXQUFXLEdBQUd4SixNQUFNLENBQUNxckIsU0FBekI7QUFFQTs7QUFDQSxJQUFJNWhCLGNBQWMsR0FBR0QsV0FBVyxDQUFDQyxjQUFqQztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBUzZJLFFBQVQsQ0FBa0JVLE1BQWxCLEVBQTBCcEUsT0FBMUIsRUFBbUNtRSxLQUFuQyxFQUEwQztBQUN4QztBQUNBO0FBQ0E7QUFDQSxNQUFJRixRQUFRLEdBQUdDLDBCQUFpQkssT0FBakIsQ0FBeUI4N0IsQ0FBekIsQ0FBMkJuOEIsZ0JBQTNCLElBQStDQSx5QkFBOUQ7O0FBRUEsTUFBSUMsS0FBSyxJQUFJLDZCQUFlQyxNQUFmLEVBQXVCcEUsT0FBdkIsRUFBZ0NtRSxLQUFoQyxDQUFiLEVBQXFEO0FBQ25EbkUsV0FBTyxHQUFHNmUsU0FBVjtBQUNEOztBQUNEemEsUUFBTSxHQUFHLHVCQUFTQSxNQUFULENBQVQ7QUFDQXBFLFNBQU8sR0FBRywyQkFBYSxFQUFiLEVBQWlCQSxPQUFqQixFQUEwQmlFLFFBQTFCLEVBQW9DSywrQkFBcEMsQ0FBVjtBQUVBLE1BQUlDLE9BQU8sR0FBRywyQkFBYSxFQUFiLEVBQWlCdkUsT0FBTyxDQUFDdUUsT0FBekIsRUFBa0NOLFFBQVEsQ0FBQ00sT0FBM0MsRUFBb0RELCtCQUFwRCxDQUFkO0FBQUEsTUFDSUUsV0FBVyxHQUFHLG1CQUFLRCxPQUFMLENBRGxCO0FBQUEsTUFFSUUsYUFBYSxHQUFHLHlCQUFXRixPQUFYLEVBQW9CQyxXQUFwQixDQUZwQjtBQUlBLE1BQUlVLFVBQUo7QUFBQSxNQUNJQyxZQURKO0FBQUEsTUFFSTVLLEtBQUssR0FBRyxDQUZaO0FBQUEsTUFHSW9LLFdBQVcsR0FBRzNFLE9BQU8sQ0FBQzJFLFdBQVIsSUFBdUJaLFNBSHpDO0FBQUEsTUFJSWEsTUFBTSxHQUFHLFVBSmIsQ0FoQndDLENBc0J4Qzs7QUFDQSxNQUFJQyxZQUFZLEdBQUdDLE1BQU0sQ0FDdkIsQ0FBQzlFLE9BQU8sQ0FBQzhLLE1BQVIsSUFBa0IvRyxTQUFuQixFQUE4QmEsTUFBOUIsR0FBdUMsR0FBdkMsR0FDQUQsV0FBVyxDQUFDQyxNQURaLEdBQ3FCLEdBRHJCLEdBRUEsQ0FBQ0QsV0FBVyxLQUFLbkksc0JBQWhCLEdBQWdDc0gsWUFBaEMsR0FBK0NDLFNBQWhELEVBQTJEYSxNQUYzRCxHQUVvRSxHQUZwRSxHQUdBLENBQUM1RSxPQUFPLENBQUN3OUMsUUFBUixJQUFvQno1QyxTQUFyQixFQUFnQ2EsTUFIaEMsR0FHeUMsSUFKbEIsRUFLdkIsR0FMdUIsQ0FBekIsQ0F2QndDLENBOEJ4QztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFJRyxTQUFTLEdBQUdsSyxjQUFjLENBQUNraEIsSUFBZixDQUFvQi9iLE9BQXBCLEVBQTZCLFdBQTdCLElBQ1gsbUJBQ0EsQ0FBQ0EsT0FBTyxDQUFDK0UsU0FBUixHQUFvQixFQUFyQixFQUF5QjZlLE9BQXpCLENBQWlDLEtBQWpDLEVBQXdDLEdBQXhDLENBREEsR0FFQSxJQUhXLEdBSVosRUFKSjtBQU1BeGYsUUFBTSxDQUFDd2YsT0FBUCxDQUFlL2UsWUFBZixFQUE2QixVQUFTUSxLQUFULEVBQWdCbzRDLFdBQWhCLEVBQTZCejRDLGdCQUE3QixFQUErQzA0QyxlQUEvQyxFQUFnRUMsYUFBaEUsRUFBK0V2NEMsTUFBL0UsRUFBdUY7QUFDbEhKLG9CQUFnQixLQUFLQSxnQkFBZ0IsR0FBRzA0QyxlQUF4QixDQUFoQixDQURrSCxDQUdsSDs7QUFDQTk0QyxVQUFNLElBQUlSLE1BQU0sQ0FBQzJrQixLQUFQLENBQWF4dUIsS0FBYixFQUFvQjZLLE1BQXBCLEVBQTRCd2UsT0FBNUIsQ0FBb0M1ZixpQkFBcEMsRUFBdURpQix5QkFBdkQsQ0FBVixDQUprSCxDQU1sSDs7QUFDQSxRQUFJdzRDLFdBQUosRUFBaUI7QUFDZnY0QyxnQkFBVSxHQUFHLElBQWI7QUFDQU4sWUFBTSxJQUFJLGNBQWM2NEMsV0FBZCxHQUE0QixRQUF0QztBQUNEOztBQUNELFFBQUlFLGFBQUosRUFBbUI7QUFDakJ4NEMsa0JBQVksR0FBRyxJQUFmO0FBQ0FQLFlBQU0sSUFBSSxTQUFTKzRDLGFBQVQsR0FBeUIsYUFBbkM7QUFDRDs7QUFDRCxRQUFJMzRDLGdCQUFKLEVBQXNCO0FBQ3BCSixZQUFNLElBQUksbUJBQW1CSSxnQkFBbkIsR0FBc0MsNkJBQWhEO0FBQ0Q7O0FBQ0R6SyxTQUFLLEdBQUc2SyxNQUFNLEdBQUdDLEtBQUssQ0FBQzFLLE1BQXZCLENBbEJrSCxDQW9CbEg7QUFDQTs7QUFDQSxXQUFPMEssS0FBUDtBQUNELEdBdkJEO0FBeUJBVCxRQUFNLElBQUksTUFBVixDQWpFd0MsQ0FtRXhDO0FBQ0E7O0FBQ0EsTUFBSVUsUUFBUSxHQUFHekssY0FBYyxDQUFDa2hCLElBQWYsQ0FBb0IvYixPQUFwQixFQUE2QixVQUE3QixLQUE0Q0EsT0FBTyxDQUFDc0YsUUFBbkU7O0FBQ0EsTUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYlYsVUFBTSxHQUFHLG1CQUFtQkEsTUFBbkIsR0FBNEIsT0FBckM7QUFDRCxHQUZELENBR0E7QUFDQTtBQUpBLE9BS0ssSUFBSTI0QywwQkFBMEIsQ0FBQ3o3QixJQUEzQixDQUFnQ3hjLFFBQWhDLENBQUosRUFBK0M7QUFDbEQsWUFBTSxJQUFJbWpCLEtBQUosQ0FBVTYwQiw0QkFBVixDQUFOO0FBQ0QsS0E3RXVDLENBK0V4Qzs7O0FBQ0ExNEMsUUFBTSxHQUFHLENBQUNPLFlBQVksR0FBR1AsTUFBTSxDQUFDZ2YsT0FBUCxDQUFlamdCLG9CQUFmLEVBQXFDLEVBQXJDLENBQUgsR0FBOENpQixNQUEzRCxFQUNOZ2YsT0FETSxDQUNFaGdCLG1CQURGLEVBQ3VCLElBRHZCLEVBRU5nZ0IsT0FGTSxDQUVFL2YscUJBRkYsRUFFeUIsS0FGekIsQ0FBVCxDQWhGd0MsQ0FvRnhDOztBQUNBZSxRQUFNLEdBQUcsZUFBZVUsUUFBUSxJQUFJLEtBQTNCLElBQW9DLE9BQXBDLElBQ05BLFFBQVEsR0FDTCxFQURLLEdBRUwsc0JBSEcsSUFLUCxtQkFMTyxJQU1OSixVQUFVLEdBQ04sa0JBRE0sR0FFTixFQVJFLEtBVU5DLFlBQVksR0FDVCxvQ0FDQSx1REFGUyxHQUdULEtBYkcsSUFlUFAsTUFmTyxHQWdCUCxlQWhCRjtBQWtCQSxNQUFJckosTUFBTSxHQUFHLHNCQUFRLFlBQVc7QUFDOUIsV0FBTy9DLFFBQVEsQ0FBQ2dNLFdBQUQsRUFBY08sU0FBUyxHQUFHLFNBQVosR0FBd0JILE1BQXRDLENBQVIsQ0FDSnZLLEtBREksQ0FDRXdrQixTQURGLEVBQ2FwYSxhQURiLENBQVA7QUFFRCxHQUhZLENBQWIsQ0F2R3dDLENBNEd4QztBQUNBOztBQUNBbEosUUFBTSxDQUFDcUosTUFBUCxHQUFnQkEsTUFBaEI7O0FBQ0EsTUFBSSxzQkFBUXJKLE1BQVIsQ0FBSixFQUFxQjtBQUNuQixVQUFNQSxNQUFOO0FBQ0Q7O0FBQ0QsU0FBT0EsTUFBUDtBQUNEOztlQUVjbUksUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvUWY7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJUSxnQkFBZ0IsR0FBRztBQUVyQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRSxZQUFVMEcsaUJBUlc7O0FBVXJCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLGNBQVlDLG1CQWhCUzs7QUFrQnJCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLGlCQUFlck8sc0JBeEJNOztBQTBCckI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0UsY0FBWSxFQWhDUzs7QUFrQ3JCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNFLGFBQVc7QUFFVDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSSxTQUFLO0FBQUUsZ0JBQVVzTztBQUFaO0FBUkk7QUF4Q1UsQ0FBdkI7ZUFvRGU1RyxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsRWY7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTeEgsUUFBVCxDQUFrQnRLLEtBQWxCLEVBQXlCO0FBQ3ZCLFNBQU9BLEtBQUssSUFBSSxJQUFULEdBQWdCLEVBQWhCLEdBQXFCLDJCQUFhQSxLQUFiLENBQTVCO0FBQ0Q7O2VBRWNzSyxROzs7Ozs7Ozs7Ozs7QUMzQmYsdUNBQXVDLDRCQUE0QixlQUFlLGtCQUFrQix1QkFBdUIsdUJBQXVCLGVBQWUsNEJBQTRCLDRCQUE0QixtQkFBbUIsY0FBYyxvQkFBb0Isc0JBQXNCLHVCQUF1Qix1QkFBdUIscUJBQXFCLG1DQUFtQyxtQ0FBbUMsbUNBQW1DLG1DQUFtQyxxQkFBcUIsMEhBQTBILDBIQUEwSCxHQUFHLHlEQUF5RCxlQUFlLHNCQUFzQix3QkFBd0IsR0FBRyw0QkFBNEIsMEJBQTBCLG1CQUFtQixHQUFHLG9DQUFvQyx5RUFBeUUseUVBQXlFLEdBQUcsOEJBQThCLG1CQUFtQix1QkFBdUIsYUFBYSxHQUFHLDhCQUE4Qix1QkFBdUIsMEJBQTBCLEdBQUcsbUNBQW1DLGlCQUFpQixtQkFBbUIsR0FBRyxzSEFBc0gsd0NBQXdDLHdDQUF3QyxHQUFHLHNIQUFzSCwwREFBMEQsMERBQTBELEdBQUcsNEZBQTRGLHFCQUFxQixrQ0FBa0MsaUNBQWlDLEdBQUcsK0NBQStDLG1CQUFtQixHQUFHLCtDQUErQyxpQkFBaUIsa0NBQWtDLEdBQUcsMERBQTBELGlCQUFpQixHQUFHLDBEQUEwRCx1QkFBdUIsbUJBQW1CLHlCQUF5Qiw4QkFBOEIsZ0JBQWdCLGNBQWMsYUFBYSxlQUFlLEdBQUcsNkpBQTZKLGVBQWUsZ0JBQWdCLEdBQUcsa0ZBQWtGLGNBQWMsZUFBZSxHQUFHLDhCQUE4QixzQkFBc0IsbUJBQW1CLEdBQUcsNkJBQTZCLHNCQUFzQixtQkFBbUIsR0FBRyw0RUFBNEUsaUJBQWlCLEdBQUcsdUNBQXVDLGlDQUFpQyxHQUFHLHNDQUFzQyw4QkFBOEIsR0FBRyxrRkFBa0YsY0FBYyxHQUFHLDBDQUEwQyw4QkFBOEIsR0FBRyx5Q0FBeUMsMkJBQTJCLEdBQUcsNkJBQTZCLGVBQWUsR0FBRyxzQkFBc0IsdUJBQXVCLDBCQUEwQixHQUFHLHFCQUFxQix5QkFBeUIsMEJBQTBCLHlCQUF5QixrQkFBa0IsR0FBRyxzQ0FBc0MsNEJBQTRCLDJCQUEyQiwwQkFBMEIsaUJBQWlCLG1CQUFtQix1QkFBdUIsdUJBQXVCLDhCQUE4Qiw4QkFBOEIsOEJBQThCLDhCQUE4QixxQkFBcUIsd0JBQXdCLG9CQUFvQixvQkFBb0Isb0JBQW9CLEdBQUcscUZBQXFGLDBCQUEwQixvQkFBb0IsdUJBQXVCLFdBQVcsaUJBQWlCLGtCQUFrQixlQUFlLDJCQUEyQiwwQkFBMEIsR0FBRywySEFBMkgsa0JBQWtCLEdBQUcseUZBQXlGLHVCQUF1QixHQUFHLCtIQUErSCwwREFBMEQsK0NBQStDLDZMQUE2TCwyREFBMkQsK0NBQStDLCtKQUErSixtQkFBbUIsR0FBRyx5R0FBeUcsa0JBQWtCLEdBQUcsNkZBQTZGLGdCQUFnQixpQkFBaUIsR0FBRyx1R0FBdUcsa0NBQWtDLDBCQUEwQixrQkFBa0IsR0FBRyxvQkFBb0IsdUJBQXVCLGlCQUFpQixHQUFHLGtEQUFrRCwwQkFBMEIsR0FBRywwQkFBMEIsZ0JBQWdCLEdBQUcscUNBQXFDLGtCQUFrQixHQUFHLHlHQUF5RyxjQUFjLDZCQUE2QixHQUFHLHlCQUF5Qix1QkFBdUIsYUFBYSxnQkFBZ0IseUJBQXlCLGdCQUFnQixxQkFBcUIsZUFBZSxvQkFBb0IsMENBQTBDLG1DQUFtQyxtQ0FBbUMsR0FBRywrQkFBK0IsZ0NBQWdDLEdBQUcsZ0NBQWdDLGdDQUFnQyxHQUFHLCtCQUErQixtQkFBbUIsa0JBQWtCLHVCQUF1QixHQUFHLGlDQUFpQyxXQUFXLHFCQUFxQixHQUFHLHVDQUF1Qyx1Q0FBdUMsd0NBQXdDLGdEQUFnRCxhQUFhLEdBQUcsbUNBQW1DLGFBQWEsR0FBRyx5Q0FBeUMsdUNBQXVDLHdDQUF3Qyw2Q0FBNkMsYUFBYSxHQUFHLDZCQUE2QixtQkFBbUIsaUJBQWlCLEdBQUcsa0NBQWtDLDBCQUEwQixHQUFHLDBCQUEwQixpQ0FBaUMsR0FBRywrQkFBK0IsZUFBZSxHQUFHLDRCQUE0QixvQkFBb0IseUJBQXlCLHFCQUFxQixtQkFBbUIsdUJBQXVCLGVBQWUsZ0JBQWdCLDBCQUEwQixtQkFBbUIsaUJBQWlCLDBCQUEwQix1QkFBdUIsa0RBQWtELGtEQUFrRCxHQUFHLDJDQUEyQyx5QkFBeUIscUJBQXFCLG1CQUFtQiwwQkFBMEIsdUJBQXVCLGVBQWUsR0FBRyxpREFBaUQsaUNBQWlDLEdBQUcsNkNBQTZDLGVBQWUsa0JBQWtCLDBCQUEwQixHQUFHLGdFQUFnRSx5Q0FBeUMsR0FBRyxrRUFBa0Usc0NBQXNDLEdBQUcsMkNBQTJDLDRCQUE0QixtQ0FBbUMsbUNBQW1DLG1CQUFtQixpQkFBaUIseUJBQXlCLGNBQWMsMEJBQTBCLHVCQUF1Qix5QkFBeUIscUJBQXFCLHlCQUF5QixpQkFBaUIsY0FBYyxxQkFBcUIsNEJBQTRCLGtDQUFrQywrQkFBK0IsMEJBQTBCLEdBQUcsaURBQWlELGVBQWUsR0FBRywrR0FBK0csb0JBQW9CLDJCQUEyQiw0QkFBNEIseUJBQXlCLEdBQUcsNERBQTRELHlCQUF5Qiw0QkFBNEIsaUJBQWlCLHFCQUFxQiwyQkFBMkIsbUJBQW1CLG9CQUFvQix1QkFBdUIseUJBQXlCLHFCQUFxQixpQkFBaUIseUJBQXlCLHVCQUF1QixrQkFBa0IseUJBQXlCLHVCQUF1Qiw0QkFBNEIsbUNBQW1DLGlDQUFpQyw4QkFBOEIsZ0JBQWdCLEdBQUcsb0lBQW9JLGtCQUFrQixHQUFHLGtFQUFrRSxpQ0FBaUMsR0FBRywyRkFBMkYsa0NBQWtDLGtCQUFrQixlQUFlLEdBQUcsdUJBQXVCLDRCQUE0Qix1QkFBdUIscUJBQXFCLGdCQUFnQix5QkFBeUIsMEJBQTBCLHlCQUF5QixrQkFBa0IsOEJBQThCLGdDQUFnQywrQkFBK0IsZ0NBQWdDLGlCQUFpQixHQUFHLG1EQUFtRCx5QkFBeUIsMEJBQTBCLHlCQUF5QixrQkFBa0Isd0JBQXdCLG9CQUFvQixvQkFBb0Isb0JBQW9CLEdBQUcsMEJBQTBCLG9CQUFvQixtQkFBbUIsNEJBQTRCLDRCQUE0QixtQkFBbUIsY0FBYyx1QkFBdUIsbUJBQW1CLHdCQUF3QixvQkFBb0Isb0JBQW9CLG9CQUFvQix3QkFBd0IsR0FBRyxvQ0FBb0MsdUJBQXVCLEdBQUcsbUJBQW1CLHVCQUF1QixxQkFBcUIseUJBQXlCLDBCQUEwQix5QkFBeUIsa0JBQWtCLDZCQUE2QixvQ0FBb0MsOEJBQThCLG9DQUFvQyxxQkFBcUIsR0FBRyx5QkFBeUIsZUFBZSxHQUFHLGlCQUFpQixlQUFlLGVBQWUscUJBQXFCLHFCQUFxQix5QkFBeUIseUJBQXlCLG1DQUFtQyxtQ0FBbUMsMEJBQTBCLHlCQUF5Qix5QkFBeUIsMEJBQTBCLGtCQUFrQiw0QkFBNEIsNEJBQTRCLHdCQUF3QiwyQkFBMkIsMENBQTBDLDBDQUEwQyxrREFBa0Qsa0RBQWtELGVBQWUsR0FBRyxpQ0FBaUMseUNBQXlDLHlDQUF5QyxHQUFHLGtCQUFrQixxQkFBcUIsa0NBQWtDLHlCQUF5QixtQ0FBbUMsbUNBQW1DLG1CQUFtQixvQkFBb0IscUJBQXFCLHVCQUF1QixvQ0FBb0MsNkNBQTZDLG9DQUFvQyxvQkFBb0IsaUJBQWlCLHNCQUFzQixjQUFjLDBCQUEwQix1QkFBdUIsNkJBQTZCLG9DQUFvQyw4QkFBOEIsb0NBQW9DLHVCQUF1QixHQUFHLDJaQUEyWixvQkFBb0IsZUFBZSx3QkFBd0IsMEJBQTBCLEdBQUcsd0JBQXdCLDBCQUEwQixHQUFHLDJEQUEyRCwwQkFBMEIsd0JBQXdCLGdCQUFnQixHQUFHLDJtQkFBMm1CLHdCQUF3Qiw2QkFBNkIsNkJBQTZCLGdCQUFnQiwwQkFBMEIsR0FBRyxrSEFBa0gsaUNBQWlDLEdBQUcsNEdBQTRHLGlDQUFpQyxHQUFHLHdOQUF3TiwwQ0FBMEMsMENBQTBDLEdBQUcsNklBQTZJLHdCQUF3QixHQUFHLDBCQUEwQixxQkFBcUIsMERBQTBELDBEQUEwRCxHQUFHLHlQQUF5UCw4QkFBOEIsNEJBQTRCLDhCQUE4QixvQkFBb0IsR0FBRywrRUFBK0Usd0JBQXdCLDhCQUE4QixHQUFHLGdDQUFnQyxxQkFBcUIsMERBQTBELDBEQUEwRCxHQUFHLHlCQUF5Qix1QkFBdUIsR0FBRyw2QkFBNkIsb0JBQW9CLEdBQUcsMEJBQTBCLGdCQUFnQixHQUFHLDJDQUEyQyxvQkFBb0Isd0NBQXdDLHdDQUF3QyxHQUFHLDZDQUE2QyxnQkFBZ0IsZ0JBQWdCLHNCQUFzQixHQUFHLCtGQUErRixtQkFBbUIsZ0JBQWdCLG9CQUFvQiw4QkFBOEIsNEJBQTRCLG9CQUFvQixpQkFBaUIsR0FBRyw2QkFBNkIsbUJBQW1CLHlCQUF5QiwwQkFBMEIseUJBQXlCLGtCQUFrQixtQ0FBbUMsbUNBQW1DLHFCQUFxQixHQUFHLHlCQUF5QiwwQkFBMEIsZUFBZSxtQ0FBbUMsbUNBQW1DLEdBQUcsbUJBQW1CLHVCQUF1QixlQUFlLG1CQUFtQixjQUFjLHNCQUFzQixxQkFBcUIsbUNBQW1DLG1DQUFtQyxxQkFBcUIseUJBQXlCLDBCQUEwQix5QkFBeUIsa0JBQWtCLEdBQUcseUJBQXlCLGtCQUFrQixtQkFBbUIsZ0JBQWdCLEdBQUcsb0NBQW9DLHdCQUF3QixvQkFBb0Isb0JBQW9CLG9CQUFvQixlQUFlLGlCQUFpQixnQkFBZ0IsR0FBRyx1REFBdUQsaUNBQWlDLEdBQUcseURBQXlELDhCQUE4QixHQUFHLCtDQUErQyxlQUFlLEdBQUcsNkNBQTZDLGVBQWUsR0FBRyx5QkFBeUIsNEJBQTRCLDZCQUE2Qiw2QkFBNkIsY0FBYyxxQkFBcUIsdUJBQXVCLGNBQWMsZUFBZSxvQkFBb0IseUJBQXlCLG1CQUFtQixvQkFBb0IsdUJBQXVCLG1DQUFtQyxtQ0FBbUMsa0NBQWtDLCtCQUErQiwwQkFBMEIsR0FBRyx3Q0FBd0Msc0JBQXNCLEdBQUcsbUZBQW1GLHFCQUFxQixHQUFHLCtCQUErQixlQUFlLGNBQWMsR0FBRyxnRkFBZ0Ysb0JBQW9CLGdCQUFnQix5QkFBeUIsbUJBQW1CLHNCQUFzQixjQUFjLDhCQUE4Qiw4QkFBOEIsOEJBQThCLDhCQUE4QiwrQkFBK0Isb0NBQW9DLCtCQUErQixHQUFHLG9DQUFvQyxlQUFlLGVBQWUsb0JBQW9CLHVCQUF1QixxQkFBcUIsR0FBRywrSUFBK0kscUJBQXFCLEdBQUcsOEJBQThCLG9CQUFvQixHQUFHLG1DQUFtQyxVQUFVLGlCQUFpQixrREFBa0Qsa0RBQWtELEtBQUssUUFBUSxpQkFBaUIsOENBQThDLDhDQUE4QyxLQUFLLEdBQUcsMkJBQTJCLFVBQVUsaUJBQWlCLGtEQUFrRCxrREFBa0QsS0FBSyxRQUFRLGlCQUFpQiw4Q0FBOEMsOENBQThDLEtBQUssR0FBRyxHOzs7Ozs7Ozs7OztBQ0F2Mm1CLDRYQUE0WCx3QkFBd0IsNEJBQTRCLDZCQUE2Qix3Q0FBd0MsMEJBQTBCLHNCQUFzQixzQkFBc0IsS0FBSyxnSUFBZ0kseUJBQXlCLCtCQUErQixnQ0FBZ0Msc0NBQXNDLDBCQUEwQixzQkFBc0Isc0JBQXNCLEtBQUssd0ZBQXdGLDBCQUEwQixLQUFLLDBHQUEwRyxrQkFBa0IsbUJBQW1CLEtBQUssd0RBQXdELCtCQUErQixnQ0FBZ0Msc0NBQXNDLEtBQUssdURBQXVELDhCQUE4QiwrQkFBK0IscUNBQXFDLEtBQUssMERBQTBELHFDQUFxQyxxQ0FBcUMsMENBQTBDLDBDQUEwQyxLQUFLLDJEQUEyRCwyQkFBMkIsMkJBQTJCLG9CQUFvQiwrQkFBK0IsZ0NBQWdDLHNDQUFzQyxLQUFLLDBEQUEwRCxvQ0FBb0MsS0FBSyxzSEFBc0gscUNBQXFDLG9DQUFvQyxrQ0FBa0Msa0NBQWtDLEtBQUsscUJBQXFCLHlCQUF5Qix1QkFBdUIsMkJBQTJCLHFDQUFxQyw2QkFBNkIsMkJBQTJCLG9CQUFvQix3Q0FBd0MsZ0NBQWdDLEtBQUssMkJBQTJCLDhCQUE4QixzREFBc0Qsc0RBQXNELEtBQUssMEJBQTBCLGdDQUFnQywwQ0FBMEMsMENBQTBDLG1CQUFtQixLQUFLLDZDQUE2QywrQkFBK0IsS0FBSywwQkFBMEIsbUJBQW1CLEtBQUssSzs7Ozs7Ozs7Ozs7QUNBNS9GLG9EQUFvRCx3QkFBd0IscUZBQXFGLHlCQUF5QixtREFBbUQscUJBQXFCLG9CQUFvQixLQUFLLHlLQUF5Syx5REFBeUQsS0FBSywySEFBMkgsNERBQTRELEtBQUssdUJBQXVCLHlEQUF5RCxvQkFBb0IscUNBQXFDLHFDQUFxQyxxRkFBcUYsb0JBQW9CLHlCQUF5QixnQ0FBZ0MsaUNBQWlDLHFCQUFxQiwwREFBMEQsMERBQTBELEtBQUssNEJBQTRCLDREQUE0RCxvRUFBb0UsS0FBSyx5Q0FBeUMsdUJBQXVCLHVCQUF1Qix3QkFBd0IsS0FBSyw4Q0FBOEMsc0RBQXNELEtBQUssd0NBQXdDLG9CQUFvQixzQkFBc0IsS0FBSyw4Q0FBOEMsMkVBQTJFLEtBQUssaURBQWlELDhHQUE4RyxLQUFLLDhCQUE4Qix1QkFBdUIsS0FBSyxtQ0FBbUMsaURBQWlELGlEQUFpRCxLQUFLLHFDQUFxQyxpREFBaUQsaURBQWlELEtBQUssSzs7Ozs7Ozs7Ozs7QUNBcHdFO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLHVEQUFROztBQUU5QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDOztBQUVBO0FBQ0EsbUJBQW1CLDJCQUEyQjs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixtQkFBbUI7QUFDbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQiwyQkFBMkI7QUFDNUM7QUFDQTs7QUFFQSxRQUFRLHVCQUF1QjtBQUMvQjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLGlCQUFpQix1QkFBdUI7QUFDeEM7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjOztBQUVkLGtEQUFrRCxzQkFBc0I7QUFDeEU7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7O0FBRUEsNkJBQTZCLG1CQUFtQjs7QUFFaEQ7O0FBRUE7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDdFhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBbkgsTUFBTSxDQUFDNFMsT0FBUCxHQUFpQixVQUFVeTFDLEdBQVYsRUFBZTtBQUM5QjtBQUNBLE1BQUl6OUMsUUFBUSxHQUFHLE9BQU9GLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQ0UsUUFBdkQ7O0FBRUEsTUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYixVQUFNLElBQUlzb0IsS0FBSixDQUFVLGtDQUFWLENBQU47QUFDRCxHQU42QixDQVEvQjs7O0FBQ0EsTUFBSSxDQUFDbTFCLEdBQUQsSUFBUSxPQUFPQSxHQUFQLEtBQWUsUUFBM0IsRUFBcUM7QUFDbkMsV0FBT0EsR0FBUDtBQUNBOztBQUVELE1BQUl4OUMsT0FBTyxHQUFHRCxRQUFRLENBQUMwOUMsUUFBVCxHQUFvQixJQUFwQixHQUEyQjE5QyxRQUFRLENBQUMyOUMsSUFBbEQ7QUFDQSxNQUFJejlDLFVBQVUsR0FBR0QsT0FBTyxHQUFHRCxRQUFRLENBQUM0OUMsUUFBVCxDQUFrQm42QixPQUFsQixDQUEwQixXQUExQixFQUF1QyxHQUF2QyxDQUEzQixDQWQ4QixDQWdCL0I7O0FBQ0E7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQyxNQUFJdGpCLFFBQVEsR0FBR3M5QyxHQUFHLENBQUNoNkIsT0FBSixDQUFZLHFEQUFaLEVBQW1FLFVBQVNvNkIsU0FBVCxFQUFvQkMsT0FBcEIsRUFBNkI7QUFDOUc7QUFDQSxRQUFJMTlDLGVBQWUsR0FBRzA5QyxPQUFPLENBQzNCM2IsSUFEb0IsR0FFcEIxZSxPQUZvQixDQUVaLFVBRlksRUFFQSxVQUFTekgsQ0FBVCxFQUFZK2hDLEVBQVosRUFBZTtBQUFFLGFBQU9BLEVBQVA7QUFBWSxLQUY3QixFQUdwQnQ2QixPQUhvQixDQUdaLFVBSFksRUFHQSxVQUFTekgsQ0FBVCxFQUFZK2hDLEVBQVosRUFBZTtBQUFFLGFBQU9BLEVBQVA7QUFBWSxLQUg3QixDQUF0QixDQUY4RyxDQU85Rzs7QUFDQSxRQUFJLG9EQUFvRHA4QixJQUFwRCxDQUF5RHZoQixlQUF6RCxDQUFKLEVBQStFO0FBQzdFLGFBQU95OUMsU0FBUDtBQUNELEtBVjZHLENBWTlHOzs7QUFDQSxRQUFJeDlDLE1BQUo7O0FBRUEsUUFBSUQsZUFBZSxDQUFDaWdCLE9BQWhCLENBQXdCLElBQXhCLE1BQWtDLENBQXRDLEVBQXlDO0FBQ3RDO0FBQ0ZoZ0IsWUFBTSxHQUFHRCxlQUFUO0FBQ0EsS0FIRCxNQUdPLElBQUlBLGVBQWUsQ0FBQ2lnQixPQUFoQixDQUF3QixHQUF4QixNQUFpQyxDQUFyQyxFQUF3QztBQUM5QztBQUNBaGdCLFlBQU0sR0FBR0osT0FBTyxHQUFHRyxlQUFuQixDQUY4QyxDQUVWO0FBQ3BDLEtBSE0sTUFHQTtBQUNOO0FBQ0FDLFlBQU0sR0FBR0gsVUFBVSxHQUFHRSxlQUFlLENBQUNxakIsT0FBaEIsQ0FBd0IsT0FBeEIsRUFBaUMsRUFBakMsQ0FBdEIsQ0FGTSxDQUVzRDtBQUM1RCxLQXhCNkcsQ0EwQjlHOzs7QUFDQSxXQUFPLFNBQVNudEIsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZTN5QyxNQUFmLENBQVQsR0FBa0MsR0FBekM7QUFDQSxHQTVCYyxDQUFmLENBMUMrQixDQXdFL0I7O0FBQ0EsU0FBT0YsUUFBUDtBQUNBLENBMUVELEM7Ozs7Ozs7Ozs7Ozs7Ozs7QUNkQSxJQUFJdEcsQ0FBSixDLENBRUE7O0FBQ0FBLENBQUMsR0FBSSxZQUFXO0FBQ2YsU0FBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxHQUFDLEdBQUdBLENBQUMsSUFBSSxJQUFJeEIsUUFBSixDQUFhLGFBQWIsR0FBVDtBQUNBLENBSEQsQ0FHRSxPQUFPa0gsQ0FBUCxFQUFVO0FBQ1g7QUFDQSxNQUFJLFFBQU9PLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBdEIsRUFBZ0NqRyxDQUFDLEdBQUdpRyxNQUFKO0FBQ2hDLEMsQ0FFRDtBQUNBO0FBQ0E7OztBQUVBMUssTUFBTSxDQUFDNFMsT0FBUCxHQUFpQm5PLENBQWpCLEM7Ozs7Ozs7Ozs7Ozs7O0FDbkJBekUsTUFBTSxDQUFDNFMsT0FBUCxHQUFpQixVQUFTNVMsTUFBVCxFQUFpQjtBQUNqQyxNQUFJLENBQUNBLE1BQU0sQ0FBQzRvRCxlQUFaLEVBQTZCO0FBQzVCNW9ELFVBQU0sQ0FBQzZvRCxTQUFQLEdBQW1CLFlBQVcsQ0FBRSxDQUFoQzs7QUFDQTdvRCxVQUFNLENBQUM4b0QsS0FBUCxHQUFlLEVBQWYsQ0FGNEIsQ0FHNUI7O0FBQ0EsUUFBSSxDQUFDOW9ELE1BQU0sQ0FBQ2kzQyxRQUFaLEVBQXNCajNDLE1BQU0sQ0FBQ2kzQyxRQUFQLEdBQWtCLEVBQWxCO0FBQ3RCcDdDLFVBQU0sQ0FBQ0QsY0FBUCxDQUFzQm9FLE1BQXRCLEVBQThCLFFBQTlCLEVBQXdDO0FBQ3ZDakQsZ0JBQVUsRUFBRSxJQUQyQjtBQUV2Q0csU0FBRyxFQUFFLGVBQVc7QUFDZixlQUFPOEMsTUFBTSxDQUFDdkQsQ0FBZDtBQUNBO0FBSnNDLEtBQXhDO0FBTUFaLFVBQU0sQ0FBQ0QsY0FBUCxDQUFzQm9FLE1BQXRCLEVBQThCLElBQTlCLEVBQW9DO0FBQ25DakQsZ0JBQVUsRUFBRSxJQUR1QjtBQUVuQ0csU0FBRyxFQUFFLGVBQVc7QUFDZixlQUFPOEMsTUFBTSxDQUFDeEQsQ0FBZDtBQUNBO0FBSmtDLEtBQXBDO0FBTUF3RCxVQUFNLENBQUM0b0QsZUFBUCxHQUF5QixDQUF6QjtBQUNBOztBQUNELFNBQU81b0QsTUFBUDtBQUNBLENBckJELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1FBOztBQUNBOztBQUNBOztBQVZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO2VBTTBCd0ssbUJBQU8sQ0FBQyxnRUFBRCxDO0lBQXpCNDhDLGEsWUFBQUEsYTtBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTMkIsbUJBQVQsQ0FDTHhvRCxFQURLLEVBRUx5b0QsR0FGSyxFQUdMQyxNQUhLLEVBSUxDLFFBSkssRUFLTEMsU0FMSyxFQU1MQyxTQU5LLEVBT0w7QUFDQSxNQUFNMytDLE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9CO0FBQ0EsTUFBTTQrQyxHQUFHLEdBQUc1K0MsT0FBTyxDQUFDNCtDLEdBQXBCO0FBQ0EsTUFBTXBnQixJQUFJLEdBQUdvZ0IsR0FBRyxDQUFDQyxVQUFKLENBQWVOLEdBQWYsS0FBdUJLLEdBQUcsQ0FBQ0Usc0JBQUosQ0FBMkJQLEdBQTNCLENBQXBDO0FBRUF2bUQsU0FBTyxDQUFDK21ELEdBQVIsQ0FBWVIsR0FBWixFQUFpQi9mLElBQWpCO0FBRUF4K0IsU0FBTyxDQUFDNCtDLEdBQVIsQ0FBWUksZ0JBQVosQ0FBNkI7QUFDM0JDLFlBQVEsRUFBRXpnQixJQUFJLEdBQUdBLElBQUksQ0FBQ3lnQixRQUFSLEdBQW1CVixHQUROO0FBRTNCRSxZQUFRLEVBQUV6bEQsTUFBTSxDQUFDeWxELFFBQUQsQ0FGVztBQUczQkQsVUFBTSxFQUFOQSxNQUgyQjtBQUkzQkUsYUFBUyxFQUFUQSxTQUoyQjtBQUszQkMsYUFBUyxFQUFUQTtBQUwyQixHQUE3QjtBQU9EO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTTyxjQUFULENBQXdCcHBELEVBQXhCLEVBQTRCcXBELE1BQTVCLEVBQW9DO0FBQ3pDLDZCQUFXcnBELEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUI0K0MsR0FBdkIsQ0FBMkJRLFdBQTNCLENBQXVDRCxNQUF2QztBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0UsZ0JBQVQsQ0FBMEJ2cEQsRUFBMUIsRUFBOEI7QUFDbkMsNkJBQVdBLEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUI0K0MsR0FBdkIsQ0FBMkJVLGFBQTNCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxvQkFBVCxDQUE4QnpwRCxFQUE5QixFQUFrQztBQUN2Qyw2QkFBV0EsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQlksaUJBQTNCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxpQkFBVCxDQUEyQjNwRCxFQUEzQixFQUErQnlvRCxHQUEvQixFQUFvQ21CLE1BQXBDLEVBQTZEO0FBQUEsTUFBakJDLFFBQWlCLHVFQUFOLElBQU07QUFDbEUsTUFBTTMvQyxPQUFPLEdBQUcsMkJBQVdsSyxFQUFYLEVBQWVrSyxPQUEvQjtBQUNBLE1BQU00L0MsSUFBSSxHQUFHLDJCQUFXOXBELEVBQVgsQ0FBYixDQUZrRSxDQUlsRTs7QUFDQSxNQUFJa0ssT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWWlCLGVBQVosR0FBOEJsbEQsTUFBOUIsR0FBdUMsQ0FBM0MsRUFBOEM7QUFDNUM7QUFDRDs7QUFFRCxNQUFJLENBQUNsRSxJQUFJLENBQUN5OEMsS0FBTCxDQUFXLHNCQUFXcDlDLEVBQVgsRUFBZSwrQkFBZixFQUFnRCxFQUFoRCxDQUFYLEVBQWdFNkUsTUFBckUsRUFBNkU7QUFDM0VpbEQsUUFBSSxDQUFDelIsU0FBTCxDQUFlL0IsS0FBZjtBQUNBO0FBQ0Q7O0FBRUQsTUFBSXZTLENBQUosRUFBTzdmLENBQVAsRUFBVThsQyxDQUFWOztBQUNBLE1BQUl2QixHQUFHLElBQUksQ0FBQyxDQUFaLEVBQWU7QUFDYjtBQUNBLFFBQU13QixlQUFlLEdBQUcvL0MsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWW9CLGNBQVosRUFBeEI7O0FBRUEsUUFBSUQsZUFBSixFQUFxQjtBQUNuQmxtQixPQUFDLEdBQUdrbUIsZUFBZSxDQUFDZCxRQUFwQjtBQUNBamxDLE9BQUMsR0FBRytsQyxlQUFlLENBQUNMLE1BQWhCLENBQXVCTyxLQUEzQjtBQUNBSCxPQUFDLEdBQUdDLGVBQWUsQ0FBQ3BCLFNBQXBCO0FBQ0QsS0FKRCxNQUlPO0FBQ0w5a0IsT0FBQyxHQUFHLENBQUo7QUFDQTdmLE9BQUMsR0FBR2hhLE9BQU8sQ0FBQ2tnRCxTQUFSLENBQWtCQyxpQkFBbEIsR0FBc0MsQ0FBdEMsRUFBeUNGLEtBQTdDO0FBQ0FILE9BQUMsR0FBR0gsUUFBSjtBQUNEO0FBQ0YsR0FiRCxNQWFPO0FBQ0w5bEIsS0FBQyxHQUFHLENBQUMwa0IsR0FBRCxHQUNBLENBREEsR0FFQXZsRCxNQUFNLENBQUNvbkQsU0FBUCxDQUFpQixDQUFDN0IsR0FBbEIsSUFDQSxDQUFDQSxHQURELEdBRUF2K0MsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWUMsVUFBWixDQUF1Qk4sR0FBdkIsRUFBNEJVLFFBSmhDO0FBS0FqbEMsS0FBQyxHQUFHMGxDLE1BQU0sR0FBR0EsTUFBSCxHQUFZMS9DLE9BQU8sQ0FBQ2tnRCxTQUFSLENBQWtCQyxpQkFBbEIsR0FBc0MsQ0FBdEMsRUFBeUNGLEtBQS9EO0FBQ0FILEtBQUMsR0FBR0gsUUFBSjtBQUNEOztBQUVELDZCQUFXN3BELEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUI0K0MsR0FBdkIsQ0FBMkJ5QixjQUEzQixDQUEwQ3htQixDQUExQyxFQUE2QzdmLENBQTdDLEVBQWdEOGxDLENBQWhEO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNRLHFCQUFULENBQStCeHFELEVBQS9CLEVBQW1DO0FBQ3hDLE1BQU1rSyxPQUFPLEdBQUcsMkJBQVdsSyxFQUFYLEVBQWVrSyxPQUEvQjtBQUNBLE1BQU1kLE9BQU8sR0FBR2MsT0FBTyxDQUFDZCxPQUF4QjtBQUNBLE1BQU0wL0MsR0FBRyxHQUFHNStDLE9BQU8sQ0FBQzQrQyxHQUFwQjtBQUNBLE1BQU0yQixNQUFNLEdBQUczQixHQUFHLENBQUM0QixhQUFKLEVBQWY7QUFDQSxNQUFNNStDLEtBQUssR0FBR2c5QyxHQUFHLENBQUM2QixRQUFKLEVBQWQ7QUFDQSxNQUFJbGxELE1BQU0sR0FBRyxFQUFiO0FBRUFnbEQsUUFBTSxDQUFDeGQsT0FBUCxDQUFlLFVBQUFtVSxLQUFLLEVBQUk7QUFDdEI7QUFDQTtBQUVBO0FBQ0EsUUFBTXdKLE9BQU8sR0FBR3hKLEtBQUssQ0FBQ3dKLE9BQU4sQ0FDYm5NLE1BRGEsQ0FDTixVQUFDb00sV0FBRCxFQUFjL1QsT0FBZCxFQUEwQjtBQUNoQyxVQUFJLHlCQUF5QkEsT0FBTyxDQUFDcVQsS0FBckMsRUFBNEM7QUFDMUNVLG1CQUFXLENBQUM3WCxJQUFaLENBQWlCOEQsT0FBTyxDQUFDcVQsS0FBekI7QUFDRDs7QUFFRCxhQUFPVSxXQUFQO0FBQ0QsS0FQYSxFQU9YLEVBUFcsRUFRYmx6QyxNQVJhLENBUU5sUCxPQVJNLENBQWhCO0FBVUEsUUFBTXFpRCxTQUFTLEdBQUcxbkQsSUFBSSxDQUFDOEksR0FBTCxDQUFTazFDLEtBQUssQ0FBQzJKLFFBQU4sQ0FBZTVCLFFBQXhCLEVBQWtDL0gsS0FBSyxDQUFDNEosTUFBTixDQUFhN0IsUUFBL0MsQ0FBbEI7QUFDQSxRQUFNdlMsUUFBUSxHQUFHeHpDLElBQUksQ0FBQytJLEdBQUwsQ0FBU2kxQyxLQUFLLENBQUMySixRQUFOLENBQWU1QixRQUF4QixFQUFrQy9ILEtBQUssQ0FBQzRKLE1BQU4sQ0FBYTdCLFFBQS9DLENBQWpCO0FBQ0EsUUFBTThCLElBQUksR0FBRyxFQUFiOztBQUVBLFNBQUssSUFBSTlCLFFBQVEsR0FBRzJCLFNBQXBCLEVBQStCM0IsUUFBUSxJQUFJdlMsUUFBM0MsRUFBcUR1UyxRQUFRLEVBQTdELEVBQWlFO0FBQy9ELFVBQU16Z0IsSUFBSSxHQUFHNThCLEtBQUssQ0FBQ28vQyxNQUFOLENBQWEvQixRQUFiLENBQWI7O0FBQ0EsVUFBSXpnQixJQUFKLEVBQVU7QUFDUixZQUFNeWlCLFVBQVUsR0FBRyw4QkFBYXppQixJQUFiLEVBQW1CdC9CLE9BQW5CLENBQW5COztBQUNBLFlBQUkraEQsVUFBSixFQUFnQjtBQUNkRixjQUFJLENBQUNqWSxJQUFMLENBQVVtWSxVQUFWO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFFBQUlGLElBQUksQ0FBQ3BtRCxNQUFMLElBQWUrbEQsT0FBTyxDQUFDL2xELE1BQTNCLEVBQW1DO0FBQ2pDWSxZQUFNLENBQUN1dEMsSUFBUCxDQUFZO0FBQUVqUCxTQUFDLEVBQUVrbkIsSUFBTDtBQUFXL21DLFNBQUMsRUFBRTBtQztBQUFkLE9BQVo7QUFDRCxLQS9CcUIsQ0FnQ3RCOztBQUNELEdBakNEO0FBbUNBLFNBQU9qcUQsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZTUzQyxNQUFmLENBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTMmxELG9CQUFULENBQThCbGhELE9BQTlCLEVBQXVDazNDLEtBQXZDLEVBQThDO0FBQ25ELE1BQU1pSyxFQUFFLEdBQUd4RSxhQUFhLENBQUNsbUQsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZStELEtBQWYsQ0FBRCxDQUF4QjtBQUNBLE1BQU1qd0MsS0FBSyxHQUFHLEVBQUVrNkMsRUFBRSxDQUFDbDZDLEtBQUgsSUFBWSxJQUFkLElBQ1YsQ0FEVSxHQUVWak8sTUFBTSxDQUFDb25ELFNBQVAsQ0FBaUIsQ0FBQ2UsRUFBRSxDQUFDbDZDLEtBQXJCLElBQ0EsQ0FBQ2s2QyxFQUFFLENBQUNsNkMsS0FESixHQUVBakgsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWUMsVUFBWixDQUF1QnNDLEVBQUUsQ0FBQ2w2QyxLQUExQixFQUFpQ2c0QyxRQUpyQztBQUtBLE1BQU1tQyxHQUFHLEdBQUcsRUFBRUQsRUFBRSxDQUFDQyxHQUFILElBQVUsSUFBWixJQUNScGhELE9BQU8sQ0FBQ3FoRCxPQUFSLENBQWdCMW1ELE1BQWhCLEdBQXlCLENBRGpCLEdBRVIzQixNQUFNLENBQUNvbkQsU0FBUCxDQUFpQixDQUFDZSxFQUFFLENBQUNDLEdBQXJCLElBQ0EsQ0FBQ0QsRUFBRSxDQUFDQyxHQURKLEdBRUFwaEQsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWUMsVUFBWixDQUF1QnNDLEVBQUUsQ0FBQ0MsR0FBMUIsRUFBK0JuQyxRQUpuQztBQU1BLFNBQU87QUFDTHFDLGlCQUFhLEVBQUVwb0QsSUFBSSxDQUFDZ3BCLEdBQUwsQ0FBU2piLEtBQVQsQ0FEVjtBQUVMczZDLGVBQVcsRUFBRXJvRCxJQUFJLENBQUNncEIsR0FBTCxDQUFTay9CLEdBQVQsQ0FGUjtBQUdMVixXQUFPLEVBQUVTLEVBQUUsQ0FBQ1Q7QUFIUCxHQUFQO0FBS0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNjLGVBQVQsQ0FBeUIxckQsRUFBekIsRUFBNkJvaEQsS0FBN0IsRUFBb0M7QUFDekMsTUFBTWwzQyxPQUFPLEdBQUcsMkJBQVdsSyxFQUFYLEVBQWVrSyxPQUEvQjtBQUNBQSxTQUFPLENBQUM0K0MsR0FBUixDQUFZNkMsWUFBWixDQUF5QlAsb0JBQW9CLENBQUNsaEQsT0FBRCxFQUFVazNDLEtBQVYsQ0FBN0M7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVN3SyxzQkFBVCxDQUFnQzVyRCxFQUFoQyxFQUFvQztBQUN6Qyw2QkFBV0EsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQitDLG1CQUEzQjtBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RORDs7QUFDQTs7QUFWQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtlQUswQjVoRCxtQkFBTyxDQUFDLGdFQUFELEM7SUFBekI0OEMsYSxZQUFBQSxhO0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNpRix1QkFBVCxDQUFpQ3B1RCxNQUFqQyxFQUF5QztBQUM5QyxTQUNFQSxNQUFNLENBQUNvckQsR0FBUCxDQUFXaUQsa0JBQVgsQ0FBOEJDLFdBQTlCLENBQTBDNWlELE9BQTFDLENBQWtENmlELGlCQUFsRCxJQUF1RSxFQUR6RTtBQUdEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0MsZ0JBQVQsQ0FBMEJsc0QsRUFBMUIsRUFBOEJvaEQsS0FBOUIsRUFBcUM7QUFDMUMsTUFBTTBJLElBQUksR0FBRywyQkFBVzlwRCxFQUFYLENBQWI7QUFDQSxNQUFNa0ssT0FBTyxHQUFHNC9DLElBQUksQ0FBQzUvQyxPQUFyQjtBQUNBLE1BQU1taEQsRUFBRSxHQUFHeEUsYUFBYSxDQUFDbG1ELElBQUksQ0FBQzA4QyxTQUFMLENBQWUrRCxLQUFmLENBQUQsQ0FBeEI7QUFFQWlLLElBQUUsQ0FBQ2MsU0FBSCxHQUFlLGlDQUFxQmppRCxPQUFyQixFQUE4Qm1oRCxFQUFFLENBQUNjLFNBQWpDLENBQWY7QUFFQSxNQUFNQyxHQUFHLEdBQUdsaUQsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWXVELGdCQUFaLENBQTZCaEIsRUFBN0IsQ0FBWjtBQUNBLE1BQU1pQixJQUFJLEdBQUcseUJBQWI7QUFFQXhDLE1BQUksQ0FBQ3lDLGNBQUwsR0FBc0J6QyxJQUFJLENBQUN5QyxjQUFMLElBQXVCLEVBQTdDO0FBQ0F6QyxNQUFJLENBQUN5QyxjQUFMLENBQW9CRCxJQUFwQixJQUE0QkYsR0FBNUI7QUFFQSxTQUFPRSxJQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNFLGVBQVQsQ0FBeUJ4c0QsRUFBekIsRUFBNkJzc0QsSUFBN0IsRUFBbUM7QUFDeEMsTUFBTXhDLElBQUksR0FBRywyQkFBVzlwRCxFQUFYLENBQWI7O0FBRUEsTUFBSXNzRCxJQUFKLEVBQVU7QUFDUixRQUNFeEMsSUFBSSxDQUFDL2tELGNBQUwsQ0FBb0IsZ0JBQXBCLEtBQ0Era0QsSUFBSSxDQUFDeUMsY0FBTCxDQUFvQnhuRCxjQUFwQixDQUFtQ3VuRCxJQUFuQyxDQUZGLEVBR0U7QUFDQXhDLFVBQUksQ0FBQ3lDLGNBQUwsQ0FBb0JELElBQXBCLEVBQTBCRyxZQUExQjtBQUNEO0FBQ0YsR0FQRCxNQU9PO0FBQ0wsUUFBSTNDLElBQUksQ0FBQy9rRCxjQUFMLENBQW9CLGdCQUFwQixDQUFKLEVBQTJDO0FBQ3pDLFdBQUssSUFBTTlJLENBQVgsSUFBZ0I2dEQsSUFBSSxDQUFDeUMsY0FBckIsRUFBcUM7QUFDbkMsWUFBSXpDLElBQUksQ0FBQ3lDLGNBQUwsQ0FBb0J4bkQsY0FBcEIsQ0FBbUM5SSxDQUFuQyxDQUFKLEVBQTJDO0FBQ3pDLGNBQU15d0QsS0FBSyxHQUFHNUMsSUFBSSxDQUFDeUMsY0FBTCxDQUFvQnR3RCxDQUFwQixDQUFkO0FBQ0F5d0QsZUFBSyxDQUFDRCxZQUFOO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRixDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdFRDs7QUFDQTs7QUFUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtlQUkwQnhpRCxtQkFBTyxDQUFDLGdFQUFELEM7SUFBekI0OEMsYSxZQUFBQSxhO0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBUzhGLDBCQUFULENBQW9DQyxXQUFwQyxFQUFpRDtBQUFBLDZCQUM3QzN3RCxDQUQ2QztBQUVwRCxRQUFNNHdELEdBQUcsR0FBR0QsV0FBVyxDQUFDM3dELENBQUQsQ0FBdkI7QUFDQTR3RCxPQUFHLENBQUMxQyxLQUFKLEdBQVl6aEQsTUFBTSxDQUFDbWtELEdBQUcsQ0FBQzFDLEtBQUwsQ0FBbEI7QUFDQTBDLE9BQUcsQ0FBQ0MsS0FBSixHQUFZcGtELE1BQU0sQ0FBQ21rRCxHQUFHLENBQUNDLEtBQUwsQ0FBbEI7QUFFQUQsT0FBRyxDQUFDRSxpQkFBSixHQUF3QkYsR0FBRyxDQUFDRSxpQkFBSixJQUF5QkMsMEJBQWpEO0FBQ0FILE9BQUcsQ0FBQ0ksdUJBQUosR0FDRUosR0FBRyxDQUFDSSx1QkFBSixJQUErQkMsNEJBRGpDO0FBR0EsUUFBTUMsNEJBQTRCLEdBQUdOLEdBQUcsQ0FBQ08sa0JBQXpDOztBQUNBLFFBQUlELDRCQUFKLEVBQWtDO0FBQ2hDTixTQUFHLENBQUNPLGtCQUFKLEdBQXlCLFVBQUExdkQsTUFBTTtBQUFBLGVBQzdCLHNDQUFxQnl2RCw0QkFBckIsRUFBbUR6dkQsTUFBbkQsQ0FENkI7QUFBQSxPQUEvQjtBQUVEOztBQUVEbXZELE9BQUcsQ0FBQ1EsZ0JBQUosR0FBdUIsYUFBdkIsQ0FoQm9ELENBa0JwRDs7QUFDQSxRQUFJUixHQUFHLENBQUM5bkQsY0FBSixDQUFtQixVQUFuQixLQUFrQyxPQUFPOG5ELEdBQUcsQ0FBQ1MsUUFBWCxLQUF3QixRQUE5RCxFQUF3RTtBQUN0RSxVQUFNQSxRQUFRLEdBQUdULEdBQUcsQ0FBQ1MsUUFBckI7O0FBQ0FULFNBQUcsQ0FBQ1MsUUFBSixHQUFlLFVBQUE1dkQsTUFBTTtBQUFBLGVBQUksc0NBQXFCNHZELFFBQXJCLEVBQStCNXZELE1BQS9CLENBQUo7QUFBQSxPQUFyQjtBQUNELEtBdEJtRCxDQXdCcEQ7OztBQUNBLFFBQUltdkQsR0FBRyxDQUFDOW5ELGNBQUosQ0FBbUIsU0FBbkIsS0FBaUMsT0FBTzhuRCxHQUFHLENBQUNVLE9BQVgsS0FBdUIsUUFBNUQsRUFBc0U7QUFDcEUsVUFBTUEsT0FBTyxHQUFHVixHQUFHLENBQUNVLE9BQXBCOztBQUNBVixTQUFHLENBQUNVLE9BQUosR0FBYyxVQUFBN3ZELE1BQU07QUFBQSxlQUFJLHNDQUFxQjZ2RCxPQUFyQixFQUE4Qjd2RCxNQUE5QixDQUFKO0FBQUEsT0FBcEI7QUFDRCxLQTVCbUQsQ0E4QnBEOzs7QUFDQSxRQUFJbXZELEdBQUcsQ0FBQzluRCxjQUFKLENBQW1CLFNBQW5CLEtBQWlDLE9BQU84bkQsR0FBRyxDQUFDVyxPQUFYLEtBQXVCLFFBQTVELEVBQXNFO0FBQ3BFLFVBQU1BLE9BQU8sR0FBR1gsR0FBRyxDQUFDVyxPQUFwQjs7QUFDQVgsU0FBRyxDQUFDVyxPQUFKLEdBQWMsVUFBQTl2RCxNQUFNO0FBQUEsZUFBSSxzQ0FBcUI4dkQsT0FBckIsRUFBOEI5dkQsTUFBOUIsQ0FBSjtBQUFBLE9BQXBCO0FBQ0QsS0FsQ21ELENBb0NwRDs7O0FBQ0EsUUFBSW12RCxHQUFHLENBQUM5bkQsY0FBSixDQUFtQixVQUFuQixDQUFKLEVBQW9DO0FBQ2xDNG5ELGdDQUEwQixDQUFDRSxHQUFHLENBQUNuVyxRQUFMLENBQTFCO0FBQ0Q7QUF2Q21EOztBQUN0RCxPQUFLLElBQUl6NkMsQ0FBVCxJQUFjMndELFdBQWQsRUFBMkI7QUFBQSxVQUFsQjN3RCxDQUFrQjtBQXVDMUI7QUFDRjtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU3d4RCx1QkFBVCxDQUFpQ3p0RCxFQUFqQyxFQUFxQzRzRCxXQUFyQyxFQUFrRDtBQUN2RCxNQUFNOUMsSUFBSSxHQUFHLDJCQUFXOXBELEVBQVgsQ0FBYjtBQUNBLE1BQU0wdEQscUJBQXFCLEdBQUc3RyxhQUFhLENBQUNsbUQsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZXVQLFdBQWYsQ0FBRCxDQUEzQztBQUVBRCw0QkFBMEIsQ0FBQ2UscUJBQUQsQ0FBMUI7QUFFQTVELE1BQUksQ0FBQzUvQyxPQUFMLENBQWE0K0MsR0FBYixDQUFpQjZFLGFBQWpCLENBQStCRCxxQkFBL0I7QUFDQTVELE1BQUksQ0FBQzUvQyxPQUFMLENBQWEwakQsVUFBYixHQUEwQkYscUJBQTFCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNHLG1CQUFULENBQTZCN3RELEVBQTdCLEVBQWlDa3hDLEtBQWpDLEVBQXdDO0FBQzdDLE1BQU1obkMsT0FBTyxHQUFHLDJCQUFXbEssRUFBWCxFQUFla0ssT0FBL0I7QUFDQSxNQUFNNCtDLEdBQUcsR0FBRzUrQyxPQUFPLENBQUM0K0MsR0FBcEI7QUFDQSxNQUFNZ0YsVUFBVSxHQUFHNWpELE9BQU8sQ0FBQ2tnRCxTQUEzQjs7QUFDQSxNQUFJbFosS0FBSixFQUFXO0FBQ1Q0YyxjQUFVLENBQUNDLGdCQUFYLENBQTRCN3FELE1BQU0sQ0FBQ2d1QyxLQUFELENBQWxDO0FBQ0QsR0FGRCxNQUVPO0FBQ0w0WCxPQUFHLENBQUNpRixnQkFBSjtBQUNEO0FBQ0Y7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxrQkFBVCxDQUE0Qmh1RCxFQUE1QixFQUFvRTtBQUFBLE1BQXBDaXVELFVBQW9DLHVFQUF2QixLQUF1QjtBQUFBLE1BQWhCckQsT0FBZ0IsdUVBQU4sSUFBTTtBQUN6RSxNQUFNMWdELE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9CO0FBQ0EsTUFBTTRqRCxVQUFVLEdBQUc1akQsT0FBTyxDQUFDa2dELFNBQTNCOztBQUVBLE1BQUksRUFBRVEsT0FBTyxJQUFJQSxPQUFPLENBQUMvbEQsTUFBckIsQ0FBSixFQUFrQztBQUNoQyxRQUFNcXBELFlBQVksR0FBRyxFQUFyQjtBQUVBSixjQUFVLENBQUNLLGFBQVgsR0FBMkJsaEIsT0FBM0IsQ0FBbUMsVUFBQTJjLE1BQU0sRUFBSTtBQUMzQ3NFLGtCQUFZLENBQUNsYixJQUFiLENBQWtCNFcsTUFBTSxDQUFDTyxLQUF6QjtBQUNELEtBRkQ7QUFJQTJELGNBQVUsQ0FBQ00sZUFBWCxDQUEyQkYsWUFBM0IsRUFBeUN6bEQsT0FBTyxDQUFDd2xELFVBQUQsQ0FBaEQ7QUFDRCxHQVJELE1BUU87QUFDTEgsY0FBVSxDQUFDTSxlQUFYLENBQTJCeEQsT0FBM0IsRUFBb0NuaUQsT0FBTyxDQUFDd2xELFVBQUQsQ0FBM0M7QUFDRDtBQUNGO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTSSxzQkFBVCxDQUFnQ3J1RCxFQUFoQyxFQUFvQ3N1RCxRQUFwQyxFQUE4QztBQUNuRCw2QkFBV3R1RCxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCeUYsbUJBQTNCLENBQStDRCxRQUEvQztBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNFLGlCQUFULENBQTJCeHVELEVBQTNCLEVBQStCc3VELFFBQS9CLEVBQXlDcGQsS0FBekMsRUFBZ0Q7QUFDckQsNkJBQVdseEMsRUFBWCxFQUFla0ssT0FBZixDQUF1QmtnRCxTQUF2QixDQUFpQ3FFLGNBQWpDLENBQWdESCxRQUFoRCxFQUEwRHByRCxNQUFNLENBQUNndUMsS0FBRCxDQUFoRTtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTd2QsWUFBVCxDQUFzQjF1RCxFQUF0QixFQUEwQnN1RCxRQUExQixFQUFvQ0ssR0FBcEMsRUFBeUM7QUFDOUMsNkJBQVczdUQsRUFBWCxFQUFla0ssT0FBZixDQUF1QmtnRCxTQUF2QixDQUFpQ3dFLGVBQWpDLENBQWlETixRQUFqRCxFQUEyREssR0FBM0Q7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0UsYUFBVCxDQUF1Qjd1RCxFQUF2QixFQUEyQnN1RCxRQUEzQixFQUFxQ1EsT0FBckMsRUFBOEM7QUFDbkQsNkJBQVc5dUQsRUFBWCxFQUFla0ssT0FBZixDQUF1QmtnRCxTQUF2QixDQUFpQzJFLFVBQWpDLENBQTRDVCxRQUE1QyxFQUFzRFEsT0FBdEQ7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVM5QiwwQkFBVCxDQUFvQ2dDLEtBQXBDLEVBQTJDO0FBQ2hELE1BQUksQ0FBQ0EsS0FBSyxDQUFDNWxELE9BQU4sQ0FBYzZsRCxxQkFBbkIsRUFBMEM7QUFDeEMsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBTXJFLE9BQU8sR0FBR29FLEtBQUssQ0FBQzVFLFNBQU4sQ0FBZ0I4RSxzQkFBaEIsRUFBaEI7QUFFQSxTQUFPdEUsT0FBTyxDQUFDLENBQUQsQ0FBUCxLQUFlb0UsS0FBSyxDQUFDcEYsTUFBNUI7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNzRCw0QkFBVCxDQUFzQzhCLEtBQXRDLEVBQTZDO0FBQ2xELE1BQU01bEQsT0FBTyxHQUFHNGxELEtBQUssQ0FBQ2xHLEdBQU4sQ0FBVWlELGtCQUFWLENBQTZCQyxXQUE3QixDQUF5QzVpRCxPQUF6RDs7QUFFQSxNQUFJLENBQUNBLE9BQU8sQ0FBQytsRCwyQkFBYixFQUEwQztBQUN4QyxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFNdkUsT0FBTyxHQUFHb0UsS0FBSyxDQUFDNUUsU0FBTixDQUFnQjhFLHNCQUFoQixFQUFoQjtBQUVBLFNBQU90RSxPQUFPLENBQUMsQ0FBRCxDQUFQLEtBQWVvRSxLQUFLLENBQUNwRixNQUE1QjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVN3RixvQkFBVCxDQUE4QnB2RCxFQUE5QixFQUFrQzRxRCxPQUFsQyxFQUEyQzd0RCxHQUEzQyxFQUFnRDtBQUNyRCw2QkFBV2lELEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUJrZ0QsU0FBdkIsQ0FDRXJ0RCxHQUFHLEdBQUcsb0JBQUgsR0FBMEIsb0JBRC9CLEVBRUU2dEQsT0FBTyxDQUFDbm1DLEtBQVIsQ0FBYyxHQUFkLEVBQW1CcW5CLEdBQW5CLENBQXVCLFVBQUE3dkMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ3V3QyxJQUFGLEVBQUo7QUFBQSxHQUF4QixDQUZGO0FBR0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVM2aUIsdUJBQVQsQ0FBaUNydkQsRUFBakMsRUFBcUM0cUQsT0FBckMsRUFBOEM7QUFDbkQsNkJBQVc1cUQsRUFBWCxFQUFla0ssT0FBZixDQUF1QmtnRCxTQUF2QixDQUFpQ2tGLHFCQUFqQyxDQUNFMUUsT0FBTyxDQUFDbm1DLEtBQVIsQ0FBYyxHQUFkLEVBQW1CcW5CLEdBQW5CLENBQXVCLFVBQUE3dkMsQ0FBQztBQUFBLFdBQUlBLENBQUMsQ0FBQ3V3QyxJQUFGLEVBQUo7QUFBQSxHQUF4QixDQURGO0FBR0Q7O0FBRU0sU0FBUytpQixlQUFULENBQXlCdnZELEVBQXpCLEVBQTZCO0FBQ2xDLFNBQU8sMkJBQVdBLEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUJrZ0QsU0FBdkIsQ0FBaUNvRixXQUFqQyxFQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLGVBQVQsQ0FBeUJ6dkQsRUFBekIsRUFBNkJpbUMsSUFBN0IsRUFBbUM7QUFDeEMsNkJBQVdqbUMsRUFBWCxFQUFla0ssT0FBZixDQUF1QmtnRCxTQUF2QixDQUFpQ3NGLFlBQWpDLENBQThDLENBQUMsQ0FBQ3hzRCxNQUFNLENBQUMraUMsSUFBRCxDQUF0RDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVMwcEIsa0JBQVQsQ0FBNEIzdkQsRUFBNUIsRUFBZ0M0cUQsT0FBaEMsRUFBeUM3dEQsR0FBekMsRUFBOEM7QUFDbkQsNkJBQVdpRCxFQUFYLEVBQWVrSyxPQUFmLENBQXVCa2dELFNBQXZCLENBQWlDcnRELEdBQUcsR0FBRyxpQkFBSCxHQUF1QixpQkFBM0QsRUFDRTZ0RCxPQUFPLENBQUNubUMsS0FBUixDQUFjLEdBQWQsRUFBbUJxbkIsR0FBbkIsQ0FBdUIsVUFBQTd2QyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDdXdDLElBQUYsRUFBSjtBQUFBLEdBQXhCLENBREY7QUFHRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU29qQixxQkFBVCxDQUErQjV2RCxFQUEvQixFQUFtQzRxRCxPQUFuQyxFQUE0QztBQUNqRCw2QkFBVzVxRCxFQUFYLEVBQWVrSyxPQUFmLENBQXVCa2dELFNBQXZCLENBQWlDeUYsa0JBQWpDLENBQ0VqRixPQUFPLENBQUNubUMsS0FBUixDQUFjLEdBQWQsRUFBbUJxbkIsR0FBbkIsQ0FBdUIsVUFBQTd2QyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDdXdDLElBQUYsRUFBSjtBQUFBLEdBQXhCLENBREY7QUFHRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU3NqQixrQkFBVCxDQUE0Qjl2RCxFQUE1QixFQUFnQzRxRCxPQUFoQyxFQUF5QztBQUM5Qyw2QkFBVzVxRCxFQUFYLEVBQWVrSyxPQUFmLENBQXVCa2dELFNBQXZCLENBQWlDMkYsZUFBakMsQ0FDRW5GLE9BQU8sQ0FBQ25tQyxLQUFSLENBQWMsR0FBZCxFQUFtQnFuQixHQUFuQixDQUF1QixVQUFBN3ZDLENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUN1d0MsSUFBRixFQUFKO0FBQUEsR0FBeEIsQ0FERjtBQUdEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTd2pCLHFCQUFULENBQStCaHdELEVBQS9CLEVBQW1DNHFELE9BQW5DLEVBQTRDO0FBQ2pELDZCQUFXNXFELEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUJrZ0QsU0FBdkIsQ0FBaUM2RixrQkFBakMsQ0FDRXJGLE9BQU8sQ0FBQ25tQyxLQUFSLENBQWMsR0FBZCxFQUFtQnFuQixHQUFuQixDQUF1QixVQUFBN3ZDLENBQUM7QUFBQSxXQUFJQSxDQUFDLENBQUN1d0MsSUFBRixFQUFKO0FBQUEsR0FBeEIsQ0FERjtBQUdEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTMGpCLGVBQVQsQ0FBeUJsd0QsRUFBekIsRUFBNkI4TCxLQUE3QixFQUFvQztBQUN6QyxNQUFNcWtELE9BQU8sR0FBR3h2RCxJQUFJLENBQUN5OEMsS0FBTCxDQUFXdHhDLEtBQVgsQ0FBaEI7QUFDQSxNQUFNNUIsT0FBTyxHQUFHLDJCQUFXbEssRUFBWCxFQUFla0ssT0FBL0I7QUFDQSxNQUFNa21ELFdBQVcsR0FBRyxFQUFwQjtBQUNBRCxTQUFPLENBQUNsakIsT0FBUixDQUFnQixVQUFBaHhDLENBQUMsRUFBSTtBQUNuQixTQUFLLElBQU1FLEdBQVgsSUFBa0JGLENBQWxCLEVBQXFCO0FBQ25CbTBELGlCQUFXLENBQUNwZCxJQUFaLENBQWlCO0FBQ2ZtWCxhQUFLLEVBQUVodUQsR0FEUTtBQUVmOGtELFlBQUksRUFBRWhsRCxDQUFDLENBQUNFLEdBQUQ7QUFGUSxPQUFqQjtBQUlEO0FBQ0YsR0FQRDtBQVNBK04sU0FBTyxDQUFDa2dELFNBQVIsQ0FBa0JpRyxnQkFBbEIsQ0FBbUM7QUFDakNyNUMsU0FBSyxFQUFFbzVDLFdBRDBCO0FBRWpDRSxjQUFVLEVBQUUsS0FGcUI7QUFHakNDLGdCQUFZLEVBQUVybUQsT0FBTyxDQUFDa2dELFNBQVIsQ0FBa0JvRyxjQUFsQjtBQUhtQixHQUFuQztBQUtEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxnQkFBVCxDQUEwQnp3RCxFQUExQixFQUE4QjtBQUNuQyw2QkFBV0EsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQjRILFVBQTNCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0MsbUJBQVQsQ0FBNkIzd0QsRUFBN0IsRUFBaUM0cUQsT0FBakMsRUFBMENnRyxPQUExQyxFQUFtRDtBQUN4RCw2QkFBVzV3RCxFQUFYLEVBQWVrSyxPQUFmLENBQXVCa2dELFNBQXZCLENBQWlDeUcsaUJBQWpDLENBQ0VqRyxPQUFPLENBQUNubUMsS0FBUixDQUFjLEdBQWQsQ0FERixFQUVFaGMsT0FBTyxDQUFDbW9ELE9BQUQsQ0FGVDtBQUlEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTRSxpQkFBVCxDQUEyQjl3RCxFQUEzQixFQUErQit3RCxNQUEvQixFQUF1QztBQUM1QyxNQUFNQyxpQkFBaUIsR0FBRywyQkFBV2h4RCxFQUFYLEVBQWVrSyxPQUF6Qzs7QUFDQSxNQUFNK21ELFFBQVEsR0FBRyxTQUFYQSxRQUFXLEdBQU07QUFDckIsUUFBTUMsZ0JBQWdCLEdBQUcsMkJBQVdILE1BQVgsRUFBbUI3bUQsT0FBNUM7QUFDQThtRCxxQkFBaUIsQ0FBQ0csWUFBbEIsQ0FBK0JuZSxJQUEvQixDQUFvQ2tlLGdCQUFwQztBQUNELEdBSEQ7O0FBS0EsTUFBSTtBQUNGRCxZQUFRO0FBQ1QsR0FGRCxDQUVFLE9BQU8xckIsR0FBUCxFQUFZO0FBQ1p5ckIscUJBQWlCLENBQUNHLFlBQWxCLENBQStCbmUsSUFBL0IsQ0FBb0MrZCxNQUFwQztBQUNBNW1ELFVBQU0sQ0FBQzRvQyxnQkFBUCxXQUEyQmdlLE1BQTNCLGFBQTJDLFlBQU07QUFDL0MsVUFBTXJtQyxPQUFPLEdBQUdzbUMsaUJBQWlCLENBQUNHLFlBQWxCLENBQStCem1DLE9BQS9CLENBQXVDcW1DLE1BQXZDLENBQWhCOztBQUNBLFVBQUlybUMsT0FBTyxHQUFHLENBQUMsQ0FBZixFQUFrQjtBQUNoQnNtQyx5QkFBaUIsQ0FBQ0csWUFBbEIsQ0FBK0JyWCxNQUEvQixDQUFzQ3B2QixPQUF0QyxFQUErQyxDQUEvQztBQUNBdW1DLGdCQUFRO0FBQ1Q7QUFDRixLQU5EO0FBT0Q7QUFDRjtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0csb0JBQVQsQ0FBOEJweEQsRUFBOUIsRUFBa0Mrd0QsTUFBbEMsRUFBMEM7QUFDL0MsTUFBTUMsaUJBQWlCLEdBQUcsMkJBQVdoeEQsRUFBWCxFQUFla0ssT0FBekM7QUFDQSxNQUFNaW5ELFlBQVksR0FBR0gsaUJBQWlCLENBQUNHLFlBQXZDOztBQUNBLE9BQUssSUFBSXpsQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHeWxDLFlBQVksQ0FBQ3RzRCxNQUFqQyxFQUF5QzZtQixDQUFDLEVBQTFDLEVBQThDO0FBQzVDLFFBQU1vK0IsSUFBSSxHQUFHcUgsWUFBWSxDQUFDemxDLENBQUQsQ0FBekI7O0FBQ0EsUUFDRyxPQUFPbytCLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEJBLElBQUksS0FBS2lILE1BQXRDLElBQ0FqSCxJQUFJLENBQUMxZ0QsT0FBTCxDQUFhcEosRUFBYixLQUFvQit3RCxNQUZ0QixFQUdFO0FBQ0FJLGtCQUFZLENBQUNyWCxNQUFiLENBQW9CcHVCLENBQXBCLEVBQXVCLENBQXZCO0FBQ0Q7QUFDRjtBQUNGLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNsWUQ7O0FBUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVMybEMsZ0JBQVQsQ0FBMEJyeEQsRUFBMUIsRUFBOEJvSixPQUE5QixFQUF1QztBQUM1Qyw2QkFBV3BKLEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUJkLE9BQXZCLEdBQWlDQSxPQUFqQztBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3ZCRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDWEE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBWUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7ZUFFMEJhLG1CQUFPLENBQUMsZ0VBQUQsQztJQUF6QjQ4QyxhLFlBQUFBLGE7O0FBRUQsU0FBU3lLLE9BQVQsQ0FBaUJwbkQsT0FBakIsRUFBMEJxbkQsT0FBMUIsRUFBbUMzd0QsSUFBbkMsRUFBeUM7QUFDOUMsTUFBSTR3RCxNQUFNLENBQUNDLGNBQVAsSUFBeUJGLE9BQTdCLEVBQXNDO0FBQ3BDQyxVQUFNLENBQUNDLGNBQVAsQ0FBc0JDLGFBQXRCLENBQW9DSCxPQUFwQztBQUNEOztBQUVELE1BQU12eEQsRUFBRSxHQUFHa0ssT0FBTyxDQUFDZCxPQUFSLENBQWdCcEosRUFBM0I7QUFDQSxNQUFJcTRDLFNBQVMsR0FBRyxpQ0FBaUJzWixjQUFqQixDQUFnQzN4RCxFQUFoQyxDQUFoQjtBQUNBLE1BQU00eEQsY0FBYyxHQUFHdlosU0FBUyxDQUFDd1osU0FBVixDQUFvQixJQUFwQixDQUF2QjtBQUVBeFosV0FBUyxDQUFDdlAsVUFBVixDQUFxQmdwQixZQUFyQixDQUFrQ0YsY0FBbEMsRUFBa0R2WixTQUFsRDtBQUNBQSxXQUFTLEdBQUd1WixjQUFaLENBVjhDLENBVzlDOztBQUNBLE1BQU05SCxJQUFJLEdBQUcsMkJBQVc5cEQsRUFBWCxFQUFlO0FBQzFCcTRDLGFBQVMsRUFBVEEsU0FEMEI7QUFFMUJudUMsV0FBTyxFQUFQQTtBQUYwQixHQUFmLENBQWIsQ0FaOEMsQ0FpQjlDOztBQUNBbXVDLFdBQVMsQ0FBQ0gsU0FBVixHQUFzQixFQUF0QjtBQUVBLE1BQU02WixhQUFhLEdBQUdDLGVBQWUsQ0FBQzluRCxPQUFELENBQXJDO0FBQ0E2bkQsZUFBYSxDQUFDeEcsT0FBZCxHQUF3QjNxRCxJQUF4QjtBQUVBLE1BQU0ybkIsUUFBUSxHQUFHLElBQUlpcEMsTUFBTSxDQUFDUyxJQUFYLENBQWdCNVosU0FBaEIsRUFBMkIwWixhQUEzQixDQUFqQjtBQUNBakksTUFBSSxDQUFDdmhDLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0F1aEMsTUFBSSxDQUFDNS9DLE9BQUwsR0FBZTZuRCxhQUFmO0FBRUE3dkQsU0FBTyxDQUFDK21ELEdBQVIsb0JBQ2NqcEQsRUFEZCxvQkFFRSxrQ0FGRixFQUdFK3hELGFBSEY7QUFLRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTQyxlQUFULENBQXlCOW5ELE9BQXpCLEVBQWtDO0FBQ2hDLE1BQU1nb0QsaUJBQWlCLEdBQUdyTCxhQUFhLENBQUNsbUQsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZW56QyxPQUFmLENBQUQsQ0FBdkM7QUFDQSxNQUFNbEssRUFBRSxHQUFHa3lELGlCQUFpQixDQUFDOW9ELE9BQWxCLENBQTBCcEosRUFBckM7QUFDQSxNQUFNbXlELG1CQUFtQixHQUFHRCxpQkFBaUIsQ0FBQzlvRCxPQUFsQixDQUEwQmdwRCxXQUExQixJQUF5QyxFQUFyRSxDQUhnQyxDQUloQzs7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxHQUF6Qjs7QUFDQSxNQUFNQyxZQUFZLG1DQUNiSixpQkFEYSxHQUViO0FBQ0RLLGVBQVcsRUFBRTtBQUFBLGFBQU0sZ0NBQU47QUFBQSxLQURaO0FBRURDLHdCQUFvQixFQUFFLDhCQUFBNW9ELENBQUMsRUFBSTtBQUN6Qix5Q0FBc0I1SixFQUF0QixFQUEwQjRKLENBQTFCO0FBQ0QsS0FKQTtBQUtENm9ELHdCQUFvQixFQUFFLDhCQUFBN29ELENBQUMsRUFBSTtBQUN6Qix5Q0FBc0I1SixFQUF0QixFQUEwQjRKLENBQTFCO0FBQ0QsS0FQQTtBQVFEOG9ELHNCQUFrQixFQUFFLDRCQUFBOW9ELENBQUMsRUFBSTtBQUN2Qix5Q0FBc0I1SixFQUF0QixFQUEwQjRKLENBQTFCO0FBQ0QsS0FWQTtBQVdEK29ELHVCQUFtQixFQUFFLDZCQUFBL29ELENBQUMsRUFBSTtBQUN4Qix3Q0FBcUI1SixFQUFyQixFQUF5QjRKLENBQXpCO0FBQ0QsS0FiQTtBQWNEZ3BELHFCQUFpQixFQUFFLDJCQUFBaHBELENBQUMsRUFBSTtBQUN0Qix3Q0FBcUI1SixFQUFyQixFQUF5QjRKLENBQXpCO0FBQ0QsS0FoQkE7QUFpQkRpcEQsdUJBQW1CLEVBQUUsNkJBQUFqcEQsQ0FBQyxFQUFJO0FBQ3hCLHdDQUFxQjVKLEVBQXJCLEVBQXlCNEosQ0FBekI7QUFDRCxLQW5CQTtBQW9CRGtwRCxlQUFXLEVBQUUscUJBQUFscEQsQ0FBQyxFQUFJO0FBQ2hCLG1DQUFnQjVKLEVBQWhCLEVBQW9CNEosQ0FBcEI7QUFDRCxLQXRCQTtBQXVCRG1wRCxtQkFBZSxFQUFFLHlCQUFBbnBELENBQUMsRUFBSTtBQUNwQixzQ0FBbUI1SixFQUFuQixFQUF1QjRKLENBQXZCO0FBQ0QsS0F6QkE7QUEwQkRvcEQsWUFBUSxFQUFFLGtCQUFBcHlELElBQUk7QUFBQSxhQUFJLDJCQUFnQlosRUFBaEIsRUFBb0JZLElBQXBCLENBQUo7QUFBQSxLQTFCYjtBQTJCRHF5RCx1QkFBbUIsRUFBRSw2QkFBQXYxRCxNQUFNO0FBQUEsYUFBSSw4QkFBa0JzQyxFQUFsQixFQUFzQnRDLE1BQXRCLENBQUo7QUFBQSxLQTNCMUI7QUE0QkR3MUQsd0JBQW9CLEVBQUVwSCwrQkE1QnJCO0FBNkJEcUgsZUFBVyxFQUFFLGlDQUFpQnZuRCxJQTdCN0I7QUE4QkR3bkQsc0JBQWtCLEVBQUUseUJBQVlDLDZCQUFaLEVBQW1DaEIsZ0JBQW5DLENBOUJuQjtBQStCRGlCLGdCQUFZLEVBQUUseUJBQVlDLHVCQUFaLEVBQTZCbEIsZ0JBQTdCLENBL0JiO0FBZ0NEbUIsaUJBQWEsRUFBRSx5QkFBWUMsMkJBQVosRUFBaUNwQixnQkFBakMsQ0FoQ2Q7QUFpQ0RxQix1QkFBbUIsRUFBRSx5QkFBWUQsMkJBQVosRUFBaUNwQixnQkFBakMsQ0FqQ3BCO0FBa0NEc0Isc0JBQWtCLEVBQUUseUJBQVlDLDZCQUFaLEVBQW1DdkIsZ0JBQW5DLENBbENuQjtBQW1DRHdCLDJCQUF1QixFQUFFLHlCQUN2QkMsa0NBRHVCLEVBRXZCekIsZ0JBRnVCLENBbkN4QjtBQXVDRDBCLGNBQVUsRUFBRTtBQUNWOW9ELG1CQUFhLEVBQUV5QixLQUFLLENBQUNzbkQsZ0JBQU4sQ0FBdUIvb0QsYUFENUI7QUFFVk4scUJBQWUsRUFBRStCLEtBQUssQ0FBQ3NuRCxnQkFBTixDQUF1QnJwRCxlQUY5QjtBQUdWbkMsbUJBQWEsRUFBRWtFLEtBQUssQ0FBQ3NuRCxnQkFBTixDQUF1QnhyRCxhQUg1QjtBQUlWeUQsa0JBQVksRUFBRVMsS0FBSyxDQUFDc25ELGdCQUFOLENBQXVCL25ELFlBSjNCO0FBS1Z1QixnQkFBVSxFQUFFZCxLQUFLLENBQUNzbkQsZ0JBQU4sQ0FBdUJ4bUQsVUFMekI7QUFNVnFVLG9CQUFjLEVBQUVuVixLQUFLLENBQUNzbkQsZ0JBQU4sQ0FBdUJueUMsY0FON0I7QUFPVjlMLG9CQUFjLEVBQUVySixLQUFLLENBQUNzbkQsZ0JBQU4sQ0FBdUJqK0MsY0FQN0I7QUFRVkosbUJBQWEsRUFBRWpKLEtBQUssQ0FBQ3NuRCxnQkFBTixDQUF1QnIrQyxhQVI1QjtBQVNWcFMsc0JBQWdCLEVBQUVtSixLQUFLLENBQUNzbkQsZ0JBQU4sQ0FBdUJ6d0QsZ0JBVC9CO0FBVVYwd0QsaUJBQVcsRUFBRUEsb0JBVkg7QUFXVkMsc0JBQWdCLEVBQUVBO0FBWFIsS0F2Q1g7QUFvREQ5cUQsV0FBTyxrQ0FDRjhvRCxpQkFBaUIsQ0FBQzlvRCxPQURoQixHQUVGO0FBQ0RNLGNBQVEsRUFBRSxnQ0FEVDtBQUVEUyxZQUFNLEVBQUU7QUFGUCxLQUZFLENBcEROO0FBMkREZ25ELGdCQUFZLEVBQUU7QUEzRGIsR0FGYSxDQUFsQjs7QUFpRUEsT0FDRTtBQUNBbUIsY0FBWSxDQUFDbHBELE9BQWIsQ0FBcUJyRSxjQUFyQixDQUFvQyxvQkFBcEMsS0FDQXV0RCxZQUFZLENBQUNscEQsT0FBYixDQUFxQitxRCxrQkFIdkIsRUFJRTtBQUNBN0IsZ0JBQVksQ0FBQzZCLGtCQUFiLEdBQWtDLFVBQUF6MkQsTUFBTSxFQUFJO0FBQzFDLGFBQU8sZ0NBQXFCc0MsRUFBckIsRUFBeUJ0QyxNQUF6QixDQUFQO0FBQ0QsS0FGRDtBQUdEOztBQUVELE1BQUl5MEQsbUJBQW1CLElBQUlHLFlBQVksQ0FBQzhCLFFBQXhDLEVBQWtEO0FBQ2hELFFBQU1DLDJCQUEyQixHQUFHLHVCQUFTbEMsbUJBQVQsQ0FBcEM7O0FBQ0FHLGdCQUFZLENBQUNGLFdBQWIsR0FBMkIsVUFBQXh4RCxJQUFJO0FBQUEsYUFDN0J5ekQsMkJBQTJCLENBQUM7QUFBRXp6RCxZQUFJLEVBQUVBO0FBQVIsT0FBRCxDQURFO0FBQUEsS0FBL0I7QUFFRCxHQXJGK0IsQ0F1RmhDOzs7QUFDQSwyQ0FBMkIweEQsWUFBWSxDQUFDMUUsVUFBeEM7QUFFQSxTQUFPMEUsWUFBUDtBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUpEOztBQUNBOztBQVRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTZ0MsV0FBVCxDQUFxQnJSLFFBQXJCLEVBQStCWSxLQUEvQixFQUFzQztBQUMzQ04sS0FBRyxDQUFDcUQsV0FBSixDQUFnQixnQ0FBaEIsRUFBa0M3cEQsR0FBbEMsQ0FBc0NrbUQsUUFBdEMsRUFBZ0R0aUQsSUFBSSxDQUFDeThDLEtBQUwsQ0FBV3lHLEtBQVgsQ0FBaEQ7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTMFEsY0FBVCxDQUF3QnRSLFFBQXhCLEVBQWtDO0FBQ3ZDTSxLQUFHLENBQUNxRCxXQUFKLENBQWdCLGdDQUFoQixFQUFrQ3RlLE1BQWxDLENBQXlDMmEsUUFBekM7QUFDRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEJEOztBQUNBOztBQVRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS08sU0FBU3VSLGlCQUFULENBQTJCekQsTUFBM0IsRUFBbUNyekQsTUFBbkMsRUFBMkM7QUFDaEQsTUFBTSsyRCxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUMvMkQsTUFBRCxFQUFTc0MsRUFBVCxFQUFnQjtBQUM3QyxXQUFPLFlBQU07QUFDWCxVQUFNMG9DLElBQUksR0FBRyx1Q0FBc0JockMsTUFBdEIsQ0FBYjtBQUNBLFVBQU15c0QsS0FBSyxHQUFHenNELE1BQU0sQ0FBQ2tzRCxNQUFQLENBQWNPLEtBQTVCO0FBQ0EsVUFBTTd0RCxLQUFLLEdBQUdvQixNQUFNLENBQUNwQixLQUFyQjtBQUVBLG9DQUNFLDJCQUFXeTBELE1BQVgsRUFBbUI3bUQsT0FBbkIsQ0FBMkJkLE9BRDdCLEVBRUU7QUFDRWhILFlBQUksRUFBRSxnQkFEUjtBQUVFc3lELGNBQU0sRUFBRS96RCxJQUFJLENBQUMwOEMsU0FBTCxDQUFlO0FBQUV0WixXQUFDLEVBQUUyRSxJQUFMO0FBQVd4a0IsV0FBQyxFQUFFaW1DLEtBQWQ7QUFBcUJ3SyxXQUFDLEVBQUVyNEQsS0FBeEI7QUFBK0JMLFdBQUMsRUFBRStEO0FBQWxDLFNBQWY7QUFGVixPQUZGLEVBTUVBLEVBTkY7QUFRRCxLQWJEO0FBY0QsR0FmRDs7QUFpQkEsTUFBTTQwRCxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFBQyxJQUFJLEVBQUk7QUFDeEJBLFFBQUksQ0FBQzVuQixPQUFMLENBQWEsVUFBQXB0QyxJQUFJLEVBQUk7QUFDbkIsVUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCO0FBQ0Q7O0FBRURBLFVBQUksQ0FBQyxRQUFELENBQUosR0FBaUI0MEQsc0JBQXNCLENBQUMvMkQsTUFBRCxFQUFTbUMsSUFBSSxDQUFDRyxFQUFkLENBQXZDOztBQUVBLFVBQUlILElBQUksQ0FBQyxZQUFELENBQUosSUFBc0IsQ0FBQzhCLEtBQUssQ0FBQ3NELE9BQU4sQ0FBY3BGLElBQUksQ0FBQyxZQUFELENBQWxCLENBQTNCLEVBQThEO0FBQzVEQSxZQUFJLENBQUMsWUFBRCxDQUFKLEdBQXFCQSxJQUFJLENBQUMsWUFBRCxDQUFKLENBQW1CNGtCLEtBQW5CLENBQXlCLEdBQXpCLENBQXJCO0FBQ0Q7O0FBRUQsVUFBSTVrQixJQUFJLENBQUMsU0FBRCxDQUFSLEVBQXFCO0FBQ25CQSxZQUFJLENBQUMsU0FBRCxDQUFKLEdBQWtCKzBELFNBQVMsQ0FBQy8wRCxJQUFJLENBQUMsU0FBRCxDQUFMLENBQTNCO0FBQ0Q7QUFDRixLQWREO0FBZ0JBLFdBQU9nMUQsSUFBUDtBQUNELEdBbEJEOztBQW9CQSxTQUFPRCxTQUFTLENBQUMsMkJBQVc3RCxNQUFYLEVBQW1CN21ELE9BQW5CLENBQTJCZCxPQUEzQixDQUFtQzByRCxXQUFwQyxDQUFoQjtBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFDRDs7QUFSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0MscUJBQVQsQ0FBK0IvMEQsRUFBL0IsRUFBbUM7QUFDeEMsNkJBQVdBLEVBQVgsRUFBZWtLLE9BQWYsQ0FBdUI0K0MsR0FBdkIsQ0FBMkJrTSxrQkFBM0I7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLG9CQUFULENBQThCajFELEVBQTlCLEVBQWtDO0FBQ3ZDLDZCQUFXQSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCb00saUJBQTNCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxjQUFULENBQXdCbjFELEVBQXhCLEVBQTRCO0FBQ2pDLDZCQUFXQSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCc00sV0FBM0I7QUFDRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzQkQ7O0FBQ0E7O0FBQ0E7O0FBVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNTyxTQUFTQyxpQkFBVCxDQUEyQnIxRCxFQUEzQixFQUErQjJYLE1BQS9CLEVBQXVDO0FBQzVDLDZCQUFXM1gsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQndNLGNBQTNCLENBQTBDMzlDLE1BQTFDO0FBQ0Q7O0FBRU0sU0FBUzQ5QyxZQUFULENBQXNCdjFELEVBQXRCLEVBQTBCO0FBQy9CLDZCQUFXQSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCME0sU0FBM0I7QUFDRDs7QUFFTSxTQUFTQyxjQUFULENBQXdCejFELEVBQXhCLEVBQTRCO0FBQ2pDLDZCQUFXQSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCNE0sV0FBM0I7QUFDRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxxQkFBVCxDQUErQjMxRCxFQUEvQixFQUFtQ3lFLEtBQW5DLEVBQTBDK2UsUUFBMUMsRUFBb0Q7QUFDekQsTUFBTXNsQyxHQUFHLEdBQUcsMkJBQVc5b0QsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUFuQztBQUNBLE1BQU1wZ0IsSUFBSSxHQUFHb2dCLEdBQUcsQ0FBQ0MsVUFBSixDQUFldGtELEtBQWYsQ0FBYjs7QUFFQSxNQUFJaWtDLElBQUosRUFBVTtBQUNSb2dCLE9BQUcsQ0FBQzhNLGlCQUFKLENBQXNCbHRCLElBQXRCLEVBQTRCbGxCLFFBQTVCO0FBQ0QsR0FGRCxNQUVPO0FBQ0xzbEMsT0FBRyxDQUFDK00sa0JBQUosQ0FBdUIzeUQsTUFBTSxDQUFDdUIsS0FBRCxDQUE3QixFQUFzQytlLFFBQXRDO0FBQ0Q7QUFDRjs7QUFFTSxTQUFTc3lDLG9CQUFULENBQThCOTFELEVBQTlCLEVBQWtDdEMsTUFBbEMsRUFBMEM7QUFDL0MsTUFBTXdNLE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9CO0FBQ0EsTUFBSTZyRCxZQUFZLEdBQUdyNEQsTUFBTSxDQUFDczRELG9CQUExQjtBQUNBLE1BQUlDLGlCQUFpQixHQUFHdjRELE1BQU0sQ0FBQ3c0RCxnQkFBL0I7QUFFQSxNQUFNQyxNQUFNLEdBQUcsU0FBZjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxXQUFqQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxXQUFqQjtBQUNBLE1BQU1DLFNBQVMsR0FBRyxZQUFsQjs7QUFFQSxVQUFRNTRELE1BQU0sQ0FBQ3ZCLEdBQWY7QUFDRSxTQUFLaTZELFFBQUw7QUFDRTtBQUNBLFVBQUlILGlCQUFpQixJQUFJLENBQUNBLGlCQUFpQixDQUFDcE4sU0FBNUMsRUFBdUQ7QUFDckQsWUFBSWtOLFlBQVksQ0FBQ2xOLFNBQWpCLEVBQTRCO0FBQzFCLGNBQU1KLEdBQUcsR0FBR3YrQyxPQUFPLENBQUM0K0MsR0FBUixDQUFZRSxzQkFBWixDQUNWOStDLE9BQU8sQ0FBQzQrQyxHQUFSLENBQVl5TixvQkFBWixFQURVLENBQVo7O0FBR0EsY0FBSTlOLEdBQUosRUFBUztBQUNQQSxlQUFHLENBQUMrTixXQUFKLENBQWdCLElBQWhCO0FBQ0Q7QUFDRixTQVBELE1BT087QUFDTHRzRCxpQkFBTyxDQUFDNCtDLEdBQVIsQ0FBWTJOLFdBQVosQ0FBd0IsVUFBQS90QixJQUFJLEVBQUk7QUFDOUIsZ0JBQUlxdEIsWUFBWSxDQUFDNU0sUUFBYixHQUF3QixDQUF4QixLQUE4QnpnQixJQUFJLENBQUN5Z0IsUUFBdkMsRUFBaUQ7QUFDL0N6Z0Isa0JBQUksQ0FBQzh0QixXQUFMLENBQWlCLElBQWpCO0FBQ0Q7QUFDRixXQUpEO0FBS0Q7QUFDRjs7QUFFRCxhQUFPUCxpQkFBUDs7QUFDRixTQUFLRSxNQUFMO0FBQ0U7QUFDQSxVQUFJRixpQkFBaUIsSUFBSSxDQUFDQSxpQkFBaUIsQ0FBQ3BOLFNBQTVDLEVBQXVEO0FBQ3JELFlBQUlrTixZQUFZLENBQUNsTixTQUFqQixFQUE0QjtBQUMxQixjQUFNSixJQUFHLEdBQUd2K0MsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWUUsc0JBQVosQ0FDVjkrQyxPQUFPLENBQUM0K0MsR0FBUixDQUFZNE4sbUJBQVosRUFEVSxDQUFaOztBQUdBLGNBQUlqTyxJQUFKLEVBQVM7QUFDUEEsZ0JBQUcsQ0FBQytOLFdBQUosQ0FBZ0IsSUFBaEI7QUFDRDtBQUNGLFNBUEQsTUFPTztBQUNMdHNELGlCQUFPLENBQUM0K0MsR0FBUixDQUFZMk4sV0FBWixDQUF3QixVQUFBL3RCLElBQUksRUFBSTtBQUM5QixnQkFBSXF0QixZQUFZLENBQUM1TSxRQUFiLEdBQXdCLENBQXhCLEtBQThCemdCLElBQUksQ0FBQ3lnQixRQUF2QyxFQUFpRDtBQUMvQ3pnQixrQkFBSSxDQUFDOHRCLFdBQUwsQ0FBaUIsSUFBakI7QUFDRDtBQUNGLFdBSkQ7QUFLRDtBQUNGOztBQUNELGFBQU9QLGlCQUFQOztBQUNGLFNBQUtJLFFBQUw7QUFDQSxTQUFLQyxTQUFMO0FBQ0UsYUFBT0wsaUJBQVA7O0FBQ0Y7QUFDRSxZQUFNLElBQUl0akMsS0FBSixDQUFVLGlDQUFWLENBQU47QUE1Q0o7QUE4Q0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNna0MsZUFBVCxDQUF5QkMsR0FBekIsRUFBOEI5TSxJQUE5QixFQUFvQztBQUN6QyxNQUFNK00sU0FBUyxHQUFHL00sSUFBSSxDQUFDaEIsR0FBTCxDQUFTaUQsa0JBQVQsQ0FBNEJDLFdBQTVCLENBQXdDNWlELE9BQXhDLENBQWdEMHRELFlBQWxFO0FBQ0EsU0FBT2hOLElBQUksQ0FBQ2xwRCxJQUFMLENBQVVpMkQsU0FBVixDQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNFLGFBQVQsQ0FBdUIvMkQsRUFBdkIsRUFBMkJnM0QsSUFBM0IsRUFBaUM7QUFDdEMsTUFBTTlzRCxPQUFPLEdBQUcsMkJBQVdsSyxFQUFYLEVBQWVrSyxPQUEvQjtBQUVBQSxTQUFPLENBQUM0K0MsR0FBUixDQUFZbU8sVUFBWixDQUF1QkQsSUFBdkI7QUFDQTlzRCxTQUFPLENBQUNxaEQsT0FBUixHQUFrQnlMLElBQWxCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNFLGdCQUFULENBQTBCbDNELEVBQTFCLEVBQThCbTNELFdBQTlCLEVBQTJDQyxXQUEzQyxFQUF3RDtBQUM3RCxNQUFNbHRELE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9COztBQUVBLE1BQUlpdEQsV0FBVyxDQUFDN3VCLE1BQVosQ0FBbUJ6akMsTUFBdkIsRUFBK0I7QUFDN0IsUUFBSXd5RCxLQUFLLEdBQUcsRUFBWjtBQUVBRixlQUFXLENBQUM3dUIsTUFBWixDQUFtQjJFLE9BQW5CLENBQTJCLFVBQUF4b0MsS0FBSyxFQUFJO0FBQ2xDNHlELFdBQUssQ0FBQ3JrQixJQUFOLENBQVc5b0MsT0FBTyxDQUFDNCtDLEdBQVIsQ0FBWUMsVUFBWixDQUF1QnRrRCxLQUF2QixFQUE4QjdELElBQXpDO0FBQ0QsS0FGRDtBQUlBdTJELGVBQVcsQ0FBQzd1QixNQUFaLEdBQXFCK3VCLEtBQXJCO0FBQ0Q7O0FBRUQsTUFBSUYsV0FBVyxDQUFDOXVCLEdBQVosQ0FBZ0J4akMsTUFBcEIsRUFBNEI7QUFDMUJzeUQsZUFBVyxDQUFDOXVCLEdBQVosR0FBa0I4dUIsV0FBVyxDQUFDOXVCLEdBQVosQ0FBZ0JpdkIsT0FBaEIsRUFBbEI7QUFDRDs7QUFFRCxNQUFJLENBQUNGLFdBQUwsRUFBa0I7QUFDaEJsdEQsV0FBTyxDQUFDNCtDLEdBQVIsQ0FBWXlPLGdCQUFaLENBQTZCSixXQUE3QjtBQUNELEdBRkQsTUFFTztBQUNManRELFdBQU8sQ0FBQzQrQyxHQUFSLENBQVkwTyxxQkFBWixDQUFrQ0wsV0FBbEM7QUFDRDtBQUNGO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTTSxnQkFBVCxDQUEwQnozRCxFQUExQixFQUE4QjAzRCxNQUE5QixFQUFzQztBQUMzQyxNQUFNeHRELE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9CO0FBQ0EsTUFBTTQrQyxHQUFHLEdBQUc1K0MsT0FBTyxDQUFDNCtDLEdBQXBCO0FBRUFBLEtBQUcsQ0FBQzJOLFdBQUosQ0FBZ0IsVUFBQWhPLEdBQUcsRUFBSTtBQUNyQkEsT0FBRyxDQUFDa1AsWUFBSixDQUFpQkQsTUFBakI7QUFDRCxHQUZEO0FBSUE1TyxLQUFHLENBQUM4TyxrQkFBSjtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLGVBQVQsQ0FBeUI3M0QsRUFBekIsRUFBNkJ5RSxLQUE3QixFQUFvQ2l6RCxNQUFwQyxFQUE0QztBQUNqRCxNQUFNeHRELE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9CO0FBQ0EsTUFBTTQrQyxHQUFHLEdBQUc1K0MsT0FBTyxDQUFDNCtDLEdBQXBCO0FBQ0EsTUFBTUwsR0FBRyxHQUFHSyxHQUFHLENBQUNDLFVBQUosQ0FBZXRrRCxLQUFmLEtBQXlCcWtELEdBQUcsQ0FBQ0Usc0JBQUosQ0FBMkJ2a0QsS0FBM0IsQ0FBckM7O0FBRUEsTUFBSWdrRCxHQUFKLEVBQVM7QUFDUEEsT0FBRyxDQUFDa1AsWUFBSixDQUFpQkQsTUFBakI7QUFDQXh0RCxXQUFPLENBQUM0K0MsR0FBUixDQUFZOE8sa0JBQVo7QUFDRCxHQUhELE1BR087QUFDTDExRCxXQUFPLENBQUNELElBQVIsd0NBQTZDd0MsS0FBN0M7QUFDRDtBQUNGO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU3F6RCxrQkFBVCxDQUE0QjkzRCxFQUE1QixFQUFnQztBQUNyQyw2QkFBV0EsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQmlQLGVBQTNCO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNDLGtCQUFULENBQTRCaDRELEVBQTVCLEVBQWdDaXJELElBQWhDLEVBQXNDO0FBQzNDLE1BQU0vZ0QsT0FBTyxHQUFHLDJCQUFXbEssRUFBWCxFQUFla0ssT0FBL0I7QUFDQSxNQUFNNCtDLEdBQUcsR0FBRzUrQyxPQUFPLENBQUM0K0MsR0FBcEI7QUFFQUEsS0FBRyxDQUFDbVAsNkJBQUosQ0FBa0MsVUFBQXZ2QixJQUFJLEVBQUk7QUFDeEMsUUFDRXVpQixJQUFJLENBQUN2Z0MsT0FBTCxDQUFhaGlCLE1BQU0sQ0FBQ2dnQyxJQUFJLENBQUN5Z0IsUUFBTixDQUFuQixJQUFzQyxDQUFDLENBQXZDLElBQ0E4QixJQUFJLENBQUN2Z0MsT0FBTCxDQUFhaGlCLE1BQU0sQ0FBQ2dnQyxJQUFJLENBQUMxb0MsRUFBTixDQUFuQixJQUFnQyxDQUFDLENBRm5DLEVBR0U7QUFDQTBvQyxVQUFJLENBQUM4dEIsV0FBTCxDQUFpQixJQUFqQjtBQUNBOXRCLFVBQUksQ0FBQ3d2QixRQUFMLEdBQWdCLElBQWhCO0FBQ0Q7QUFDRixHQVJEO0FBVUFwUCxLQUFHLENBQUNxUCwwQkFBSjtBQUNEOztBQUVNLFNBQVNDLFlBQVQsQ0FBc0JwNEQsRUFBdEIsRUFBMEJxNEQsUUFBMUIsRUFBb0M7QUFDekMsTUFBTW51RCxPQUFPLEdBQUcsMkJBQVdsSyxFQUFYLEVBQWVrSyxPQUEvQjs7QUFFQSxNQUFJLE1BQU1tdUQsUUFBVixFQUFvQjtBQUNsQm51RCxXQUFPLENBQUM0K0MsR0FBUixDQUFZd1AsaUJBQVo7QUFDRCxHQUZELE1BRU87QUFDTHB1RCxXQUFPLENBQUM0K0MsR0FBUixDQUFZeVAsU0FBWjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU0MsY0FBVCxDQUF3Qng0RCxFQUF4QixFQUE0QnE0RCxRQUE1QixFQUFzQztBQUMzQyxNQUFNbnVELE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9COztBQUVBLE1BQUksTUFBTW11RCxRQUFWLEVBQW9CO0FBQ2xCbnVELFdBQU8sQ0FBQzQrQyxHQUFSLENBQVkyUCxtQkFBWjtBQUNELEdBRkQsTUFFTztBQUNMdnVELFdBQU8sQ0FBQzQrQyxHQUFSLENBQVk0UCxXQUFaO0FBQ0Q7QUFDRjtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxrQkFBVCxDQUE0QjM0RCxFQUE1QixFQUFnQztBQUNyQyxNQUFNa0ssT0FBTyxHQUFHLDJCQUFXbEssRUFBWCxFQUFla0ssT0FBL0I7QUFDQSxNQUFNMDRDLEtBQUssR0FBRzE0QyxPQUFPLENBQUM0K0MsR0FBUixDQUFZOFAsZ0JBQVosRUFBZDtBQUNBLE1BQUloK0MsTUFBTSxHQUFHLEVBQWI7QUFFQWdvQyxPQUFLLENBQUMzVixPQUFOLENBQWMsVUFBQXZFLElBQUksRUFBSTtBQUNwQjl0QixVQUFNLENBQUNvNEIsSUFBUCxDQUFZLDhCQUFhdEssSUFBYixFQUFtQngrQixPQUFPLENBQUNkLE9BQTNCLENBQVo7QUFDRCxHQUZEO0FBSUEsU0FBT3pJLElBQUksQ0FBQzA4QyxTQUFMLENBQWV6aUMsTUFBZixDQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU2krQyxpQkFBVCxDQUEyQjc0RCxFQUEzQixFQUErQjtBQUNwQyxNQUFNaXJELElBQUksR0FBR3RxRCxJQUFJLENBQUN5OEMsS0FBTCxDQUFXdWIsa0JBQWtCLENBQUMzNEQsRUFBRCxDQUE3QixDQUFiOztBQUVBLE1BQUlpckQsSUFBSSxDQUFDcG1ELE1BQVQsRUFBaUI7QUFDZixXQUFPbEUsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZTROLElBQUksQ0FBQ0EsSUFBSSxDQUFDcG1ELE1BQUwsR0FBYyxDQUFmLENBQW5CLENBQVA7QUFDRDs7QUFFRCxTQUFPLEVBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNpMEQsU0FBVCxDQUFtQjk0RCxFQUFuQixFQUF1QnlFLEtBQXZCLEVBQThCO0FBQ25DLE1BQU15RixPQUFPLEdBQUcsMkJBQVdsSyxFQUFYLEVBQWVrSyxPQUEvQjtBQUNBLFNBQU92SixJQUFJLENBQUMwOEMsU0FBTCxDQUNMLDhCQUFhbnpDLE9BQU8sQ0FBQzQrQyxHQUFSLENBQVlDLFVBQVosQ0FBdUJ0a0QsS0FBdkIsQ0FBYixFQUE0Q3lGLE9BQU8sQ0FBQ2QsT0FBcEQsQ0FESyxDQUFQO0FBR0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVMydkQsVUFBVCxDQUFvQi80RCxFQUFwQixFQUF3Qmc1RCxLQUF4QixFQUErQkMsZ0JBQS9CLEVBQWlEO0FBQ3RELE1BQU0vdUQsT0FBTyxHQUFHLDJCQUFXbEssRUFBWCxFQUFla0ssT0FBL0I7QUFDQSxNQUFNMFEsTUFBTSxHQUFHLEVBQWY7QUFFQTFRLFNBQU8sQ0FBQzQrQyxHQUFSLENBQVlrUSxLQUFaLEVBQW1CLFVBQUF0d0IsSUFBSSxFQUFJO0FBQ3pCLFFBQUksQ0FBQ0EsSUFBSSxDQUFDd3dCLEtBQVYsRUFBaUI7QUFDZixVQUFJRCxnQkFBSixFQUFzQjtBQUNwQixZQUFNRSxVQUFVLEdBQUcsc0NBQXFCRixnQkFBckIsRUFBdUM7QUFDeEQzOEQsZUFBSyxFQUFFb3NDLElBQUksQ0FBQzluQyxJQUQ0QztBQUV4RHdJLGlCQUFPLEVBQUVjLE9BQU8sQ0FBQ2QsT0FGdUM7QUFHeERnd0Qsa0JBQVEsRUFBRSxJQUg4QztBQUl4RHAzRCxrQkFBUSxFQUFFLElBSjhDO0FBS3hEMG1DLGNBQUksRUFBRUEsSUFMa0Q7QUFNeEQ5bkMsY0FBSSxFQUFFOG5DLElBQUksQ0FBQzluQyxJQU42QztBQU94RHk0RCxnQkFBTSxFQUFFLElBUGdEO0FBUXhEbFEsa0JBQVEsRUFBRXpnQixJQUFJLENBQUN5Z0IsUUFSeUM7QUFTeERMLGFBQUcsRUFBRXBnQixJQUFJLENBQUM0d0IsT0FUOEM7QUFVeERsUCxtQkFBUyxFQUFFMWhCLElBQUksQ0FBQzBoQixTQVZ3QztBQVd4RGw2QyxrQkFBUSxFQUFFO0FBQUEsbUJBQU13NEIsSUFBSSxDQUFDOW5DLElBQVg7QUFBQSxXQVg4QztBQVl4RGdwRCxnQkFBTSxFQUFFLElBWmdEO0FBYXhEMlAscUJBQVcsRUFDVDtBQUNBN3dCLGNBQUksQ0FBQzNqQyxjQUFMLENBQW9CLFFBQXBCLEtBQWlDMmpDLElBQUksQ0FBQ3hxQyxNQUFMLENBQVk2RyxjQUFaLENBQTJCLEtBQTNCLENBQWpDLEdBQ0kyakMsSUFBSSxDQUFDeHFDLE1BQUwsQ0FBWS9CLEdBRGhCLEdBRUk7QUFqQmtELFNBQXZDLENBQW5COztBQW9CQSxZQUFJZzlELFVBQUosRUFBZ0I7QUFDZHYrQyxnQkFBTSxDQUFDbzRCLElBQVAsQ0FBWSw4QkFBYXRLLElBQWIsRUFBbUJ4K0IsT0FBTyxDQUFDZCxPQUEzQixDQUFaO0FBQ0Q7QUFDRixPQXhCRCxNQXdCTztBQUNMd1IsY0FBTSxDQUFDbzRCLElBQVAsQ0FBWSw4QkFBYXRLLElBQWIsRUFBbUJ4K0IsT0FBTyxDQUFDZCxPQUEzQixDQUFaO0FBQ0Q7QUFDRjtBQUNGLEdBOUJEO0FBZ0NBLFNBQU96SSxJQUFJLENBQUMwOEMsU0FBTCxDQUFlemlDLE1BQWYsQ0FBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBUzQrQyxhQUFULENBQXVCeDVELEVBQXZCLEVBQTJCO0FBQ2hDLDZCQUFXQSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCNEgsVUFBM0I7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBUytJLHNCQUFULENBQWdDejVELEVBQWhDLEVBQW9DWSxJQUFwQyxFQUEwQztBQUMvQyw2QkFBV1osRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQjRRLG1CQUEzQixDQUErQzk0RCxJQUEvQztBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTKzRELHlCQUFULENBQW1DMzVELEVBQW5DLEVBQXVDWSxJQUF2QyxFQUE2QztBQUNsRCw2QkFBV1osRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQjhRLHNCQUEzQixDQUFrRGg1RCxJQUFsRDtBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeFdEOztBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSU8sU0FBU2k1RCxXQUFULENBQXFCNzVELEVBQXJCLEVBQXlCZ1gsS0FBekIsRUFBZ0M7QUFDckMsTUFBTTlNLE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9COztBQUVBLE1BQUk7QUFDRkEsV0FBTyxDQUFDa2dELFNBQVIsQ0FBa0JpRyxnQkFBbEIsQ0FBbUM7QUFDakNyNUMsV0FBSyxFQUFFQSxLQUFLLENBQUM0ekMsT0FEb0I7QUFFakMwRixnQkFBVSxFQUFFO0FBRnFCLEtBQW5DO0FBSUFwbUQsV0FBTyxDQUFDa2dELFNBQVIsQ0FBa0IwUCxtQkFBbEIsQ0FBc0M5aUQsS0FBSyxDQUFDK2lELE1BQTVDO0FBQ0E3dkQsV0FBTyxDQUFDNCtDLEdBQVIsQ0FBWWtSLGNBQVosQ0FBMkJoakQsS0FBSyxDQUFDaWpELE9BQWpDO0FBQ0QsR0FQRCxDQU9FLE9BQU9yd0QsQ0FBUCxFQUFVO0FBQ1YxSCxXQUFPLENBQUNELElBQVIsQ0FBYSxzQ0FBYixFQUFxRDJILENBQXJEO0FBQ0Q7QUFDRjs7QUFFTSxTQUFTc3dELFdBQVQsQ0FBcUJsNkQsRUFBckIsRUFBeUI7QUFDOUIsTUFBTWtLLE9BQU8sR0FBRywyQkFBV2xLLEVBQVgsRUFBZWtLLE9BQS9CO0FBQ0EsTUFBTTBnRCxPQUFPLEdBQUcxZ0QsT0FBTyxDQUFDa2dELFNBQVIsQ0FBa0JvRyxjQUFsQixFQUFoQjtBQUNBLE1BQU11SixNQUFNLEdBQUc3dkQsT0FBTyxDQUFDa2dELFNBQVIsQ0FBa0IrUCxtQkFBbEIsRUFBZjtBQUNBLE1BQU1GLE9BQU8sR0FBRy92RCxPQUFPLENBQUM0K0MsR0FBUixDQUFZc1IsY0FBWixFQUFoQjs7QUFFQSxNQUFJO0FBQ0YsV0FBT3o1RCxJQUFJLENBQUMwOEMsU0FBTCxDQUFlO0FBQ3BCdU4sYUFBTyxFQUFQQSxPQURvQjtBQUVwQm1QLFlBQU0sRUFBTkEsTUFGb0I7QUFHcEJFLGFBQU8sRUFBUEE7QUFIb0IsS0FBZixDQUFQO0FBS0QsR0FORCxDQU1FLE9BQU9yd0QsQ0FBUCxFQUFVO0FBQ1YxSCxXQUFPLENBQUNELElBQVIsQ0FBYSwwQ0FBYixFQUF5RDJILENBQXpEO0FBQ0Q7QUFDRixDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDaENEOztBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSU8sU0FBU3l3RCxrQ0FBVCxDQUE0Q3I2RCxFQUE1QyxFQUFnRDdELEdBQWhELEVBQXFEeTBDLFVBQXJELEVBQWlFO0FBQ3RFLDZCQUFXNXdDLEVBQVgsRUFDR2tLLE9BREgsQ0FDVzQrQyxHQURYLENBQ2V3UixjQURmLENBQzhCbitELEdBRDlCLEVBRUdvK0QsVUFGSCxDQUVjOXhELE9BQU8sQ0FBQ21vQyxVQUFELENBRnJCO0FBR0QsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ05EOztBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSU8sU0FBUzRwQixvQkFBVCxDQUE4Qng2RCxFQUE5QixFQUFrQzFELEtBQWxDLEVBQXlDO0FBQzlDLDZCQUFXMEQsRUFBWCxFQUFla0ssT0FBZixDQUF1QjQrQyxHQUF2QixDQUEyQjJSLGlCQUEzQixDQUE2Q2h5RCxPQUFPLENBQUNuTSxLQUFELENBQXBEO0FBQ0Q7O0FBRU0sU0FBU28rRCxnQkFBVCxDQUEwQjNKLE1BQTFCLEVBQWtDNEosV0FBbEMsRUFBK0M7QUFDcEQsNkJBQVc1SixNQUFYLEVBQW1CN21ELE9BQW5CLENBQTJCNCtDLEdBQTNCLENBQStCOFIsYUFBL0IsQ0FBNkNELFdBQTdDO0FBQ0Q7O0FBRU0sU0FBU0UsaUJBQVQsQ0FBMkI5SixNQUEzQixFQUFtQzRKLFdBQW5DLEVBQWdEO0FBQ3JELDZCQUFXNUosTUFBWCxFQUFtQjdtRCxPQUFuQixDQUEyQjQrQyxHQUEzQixDQUErQmdTLGNBQS9CLENBQThDSCxXQUE5QztBQUNEOztBQUVNLFNBQVNJLHVCQUFULENBQWlDLzZELEVBQWpDLEVBQXFDMFgsUUFBckMsRUFBK0M7QUFDcEQsNkJBQVcxWCxFQUFYLEVBQWVrSyxPQUFmLENBQXVCNCtDLEdBQXZCLENBQTJCa1Msb0JBQTNCLENBQWdEdnlELE9BQU8sQ0FBQ2lQLFFBQUQsQ0FBdkQ7QUFDRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4QkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTdWpELGNBQVQsR0FBMEI7QUFDL0IsU0FBTyxPQUFPQyxJQUFQLEtBQWdCLFdBQWhCLEdBQThCQSxJQUE5QixHQUFxQ3h4RCxRQUE1QztBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVN5eEQsWUFBVCxHQUF3QjtBQUM3QixTQUFPLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsR0FBOEJBLElBQTlCLEdBQXFDanhELE1BQTVDO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNreEQsU0FBVCxDQUFtQi8rRCxLQUFuQixFQUEwQjtBQUMvQixTQUFPQSxLQUFLLEtBQUssSUFBVixJQUFrQkEsS0FBSyxLQUFLeXNCLFNBQTVCLEdBQXdDenNCLEtBQXhDLEdBQWdELEVBQXZEO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU2cvRCxPQUFULEdBQW1CO0FBQ3hCLFNBQU8sdUNBQXVDeHRDLE9BQXZDLENBQStDLE9BQS9DLEVBQXdELFVBQVM1SixDQUFULEVBQVk7QUFDekUsUUFBSTZmLENBQUMsR0FBSTNnQyxJQUFJLENBQUNtNEQsTUFBTCxLQUFnQixFQUFqQixHQUF1QixDQUEvQjtBQUFBLFFBQ0U1RyxDQUFDLEdBQUd6d0MsQ0FBQyxJQUFJLEdBQUwsR0FBVzZmLENBQVgsR0FBZ0JBLENBQUMsR0FBRyxHQUFMLEdBQVksR0FEakM7QUFFQSxXQUFPNHdCLENBQUMsQ0FBQy90RCxRQUFGLENBQVcsRUFBWCxDQUFQO0FBQ0QsR0FKTSxDQUFQO0FBS0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBUzQwRCxVQUFULENBQW9CeDdELEVBQXBCLEVBQXdCO0FBQzdCbUssUUFBTSxDQUFDc3hELGVBQVAsR0FBeUJ0eEQsTUFBTSxDQUFDc3hELGVBQVAsSUFBMEIsRUFBbkQ7QUFDQSxNQUFNM1IsSUFBSSxHQUFHMy9DLE1BQU0sQ0FBQ3N4RCxlQUFQLENBQXVCejdELEVBQXZCLEtBQThCLElBQTNDOztBQUVBLE1BQUksQ0FBQzhwRCxJQUFMLEVBQVc7QUFDVCxRQUFNNFIsZUFBZSxHQUFHLzZELElBQUksQ0FBQzA4QyxTQUFMLENBQWUvaEQsTUFBTSxDQUFDUyxJQUFQLENBQVlvTyxNQUFNLENBQUNzeEQsZUFBbkIsQ0FBZixDQUF4QixDQURTLENBRVQ7O0FBRUEsVUFBTSxJQUFJaHpDLFNBQUosMEtBR1d6b0IsRUFIWCxxQ0FJVzA3RCxlQUpYLFFBQU47QUFPRDs7QUFFRCxTQUFPNVIsSUFBUDtBQUNEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVM2UixVQUFULENBQW9CMzdELEVBQXBCLEVBQXdCa0ssT0FBeEIsRUFBaUM7QUFDdENDLFFBQU0sQ0FBQ3N4RCxlQUFQLEdBQXlCdHhELE1BQU0sQ0FBQ3N4RCxlQUFQLElBQTBCLEVBQW5EO0FBQ0F0eEQsUUFBTSxDQUFDc3hELGVBQVAsQ0FBdUJ6N0QsRUFBdkIsSUFBNkJrSyxPQUE3QjtBQUVBLFNBQU9zeEQsVUFBVSxDQUFDeDdELEVBQUQsQ0FBakI7QUFDRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcEdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDTWkwRCxXOzs7Ozs7OztBQUNKO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7eUJBQ092MkQsTSxFQUFRO0FBQ1gsVUFBTWsrRCxJQUFJLEdBQUksS0FBS0EsSUFBTCxHQUFZbHlELFFBQVEsQ0FBQzYrQixhQUFULENBQXVCLEtBQXZCLENBQTFCO0FBQ0EsVUFBTTZrQixrQkFBa0IsR0FBRzF2RCxNQUFNLENBQUMyN0QsTUFBUCxDQUFjak0sa0JBQXpDO0FBQ0EsVUFBTXlPLFFBQVEsR0FBR24rRCxNQUFNLENBQUN5ckQsUUFBUCxLQUFvQnBnQyxTQUFyQztBQUNBLFVBQU0reUMsZUFBZSxHQUFHRCxRQUFRLElBQUksQ0FBQyxDQUFDbitELE1BQU0sQ0FBQzI3RCxNQUFQLENBQWMzaUIsUUFBcEQ7QUFDQXgwQyxhQUFPLENBQUMrbUQsR0FBUixDQUFZdnJELE1BQVosRUFMVyxDQU1YOztBQUNBLFVBQU1rRCxJQUFJLEdBQ1IsQ0FBQ2k3RCxRQUFELElBQWEsQ0FBQ0MsZUFBZCxHQUNJcCtELE1BQU0sQ0FBQ29yRCxHQUFQLENBQVdFLHNCQUFYLENBQWtDdHJELE1BQU0sQ0FBQ3lyRCxRQUF6QyxFQUFtRHZvRCxJQUR2RCxHQUVJLElBSE47QUFJQSxVQUFNbTdELEtBQUssR0FBR3IrRCxNQUFNLENBQUNvckQsR0FBUCxDQUFXaUQsa0JBQVgsQ0FBOEJpUSxRQUE5QixDQUF1Qzd6QixTQUF2QyxDQUFpRDh6QixRQUFqRCxDQUNaLE1BRFksSUFHVixpQkFIVSxHQUlWLGtCQUpKO0FBS0EsVUFBTUMsWUFBWSxHQUFHeCtELE1BQU0sQ0FBQzI3RCxNQUFQLENBQWM2QyxZQUFkLEdBQ2pCO0FBQ0F0N0QsVUFBSSxJQUFJQSxJQUFJLENBQUNtRSxjQUFMLENBQW9CckgsTUFBTSxDQUFDMjdELE1BQVAsQ0FBYzZDLFlBQWxDLENBQVIsR0FDRXQ3RCxJQUFJLENBQUNsRCxNQUFNLENBQUMyN0QsTUFBUCxDQUFjNkMsWUFBZixDQUROLEdBRUUsSUFKZSxHQUtqQixJQUxKOztBQU9BLFVBQU1DLFlBQVksaURBQ2J6K0QsTUFEYSxHQUViO0FBQUVrRCxZQUFJLEVBQUpBO0FBQUYsT0FGYSxHQUdiO0FBQUVpN0QsZ0JBQVEsRUFBUkEsUUFBRjtBQUFZQyx1QkFBZSxFQUFmQSxlQUFaO0FBQTZCSSxvQkFBWSxFQUFaQTtBQUE3QixPQUhhLENBQWxCOztBQU1BTixVQUFJLENBQUN4ekIsU0FBTCxDQUFlQyxHQUFmLENBQW1CLFlBQW5CLEVBQWlDMHpCLEtBQWpDO0FBQ0FILFVBQUksQ0FBQzFqQixTQUFMLEdBQ0UyakIsUUFBUSxJQUFJQyxlQUFaLEdBQ0lwK0QsTUFBTSxDQUFDcEIsS0FEWCxHQUVJNC9ELFlBQVksR0FDWkEsWUFEWSxHQUVaOU8sa0JBQWtCLEdBQ2xCQSxrQkFBa0IsQ0FBQytPLFlBQUQsQ0FEQSxHQUVsQnorRCxNQUFNLENBQUNwQixLQVBiO0FBUUQ7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OzZCQUNXO0FBQ1AsYUFBTyxLQUFLcy9ELElBQVo7QUFDRDs7Ozs7O2VBR1kzSCxXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzdEZjs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7SUFDTUMsZ0I7Ozs7Ozs7O0FBQ0o7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7eUJBQ094MkQsTSxFQUFRO0FBQ1gsVUFBTStQLE9BQU8sR0FBRy9QLE1BQU0sQ0FBQzArRCxXQUFQLElBQXNCLElBQXRDO0FBQ0EsVUFBTS80RCxRQUFRLEdBQUczRixNQUFNLENBQUMyK0QsWUFBUCxJQUF1QixLQUF4QztBQUNBLFVBQU0zdUQsS0FBSyxHQUFHaFEsTUFBTSxDQUFDNCtELFNBQVAsSUFBb0IsSUFBbEM7QUFDQSxVQUFNQyxjQUFjLEdBQUc3K0QsTUFBTSxDQUFDNitELGNBQVAsSUFBeUIsR0FBaEQ7QUFFQSxVQUFJandELFVBQUo7QUFFQSxXQUFLa3dELG1CQUFMLEdBQTJCOStELE1BQU0sQ0FBQysrRCxlQUFsQzs7QUFDQSxVQUFJLEtBQUtELG1CQUFULEVBQThCO0FBQzVCLFlBQU03ekQseUJBQXlCLEdBQzdCakwsTUFBTSxDQUFDaXJELFFBQVAsSUFBbUIsRUFBbkIsSUFBeUJqckQsTUFBTSxDQUFDaXJELFFBQVAsSUFBbUIsRUFEOUMsQ0FENEIsQ0FFcUI7O0FBRWpELFlBQUloZ0QseUJBQUosRUFBK0I7QUFDN0IyRCxvQkFBVSxHQUFHLEVBQWI7QUFDRCxTQUZELE1BRU8sSUFBSTVPLE1BQU0sQ0FBQ2tyRCxTQUFYLEVBQXNCO0FBQzNCdDhDLG9CQUFVLEdBQUc1TyxNQUFNLENBQUNrckQsU0FBcEI7QUFDRCxTQUZNLE1BRUE7QUFDTHQ4QyxvQkFBVSxHQUFHNU8sTUFBTSxDQUFDcEIsS0FBcEI7O0FBQ0EsY0FBSW9CLE1BQU0sQ0FBQ2lyRCxRQUFQLElBQW1CLEdBQXZCLEVBQTRCO0FBQzFCO0FBQ0EsaUJBQUsrVCxvQkFBTCxHQUE0QixJQUE1QjtBQUNEO0FBQ0Y7QUFDRixPQWZELE1BZU87QUFDTHB3RCxrQkFBVSxHQUFHNU8sTUFBTSxDQUFDcEIsS0FBcEI7QUFDRDs7QUFFRCxXQUFLMmIsT0FBTCxHQUFldmEsTUFBZjtBQUVBLFdBQUtzTCxJQUFMLEdBQVlVLFFBQVEsQ0FBQzYrQixhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQSxXQUFLdi9CLElBQUwsQ0FBVW0vQixTQUFWLEdBQXNCLCtDQUF0QjtBQUNBLFdBQUtuL0IsSUFBTCxDQUFVNnJDLFFBQVYsR0FBcUIsR0FBckI7QUFDQSxXQUFLN3JDLElBQUwsQ0FBVWt2QyxTQUFWO0FBQXNCO0FBQXRCLHdOQWpDVyxDQXdDWDs7QUFDQSxXQUFLcDJCLE1BQUwsR0FBY3BZLFFBQVEsQ0FBQzYrQixhQUFULENBQXVCLE9BQXZCLENBQWQ7QUFDQSxXQUFLem1CLE1BQUwsQ0FBWXFtQixTQUFaLEdBQ0UsNkZBREY7QUFFQSxXQUFLcm1CLE1BQUwsQ0FBWTFmLElBQVosR0FBbUIsTUFBbkI7QUFDQSxXQUFLMGYsTUFBTCxDQUFZeGxCLEtBQVosR0FBb0JnUSxVQUFwQjtBQUNBLFdBQUt3VixNQUFMLENBQVkreUIsUUFBWixHQUF1QixDQUF2Qjs7QUFFQSxXQUFLN3JDLElBQUwsQ0FBVW8xQyxhQUFWLENBQXdCLG1CQUF4QixFQUE2QzlVLFdBQTdDLENBQXlELEtBQUt4bkIsTUFBOUQ7O0FBRUEsVUFBSXJVLE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNwQixhQUFLcVUsTUFBTCxDQUFZdW5CLFlBQVosQ0FBeUIsU0FBekIsRUFBb0M1N0IsT0FBcEM7QUFDRDs7QUFFRCxVQUFJcEssUUFBUSxLQUFLLElBQWpCLEVBQXVCO0FBQ3JCLGFBQUt5ZSxNQUFMLENBQVl1bkIsWUFBWixDQUF5QixVQUF6QixFQUFxQyxVQUFyQztBQUNEOztBQUVELFVBQUkzN0IsS0FBSyxLQUFLLElBQVYsSUFBa0JBLEtBQUssS0FBSyxTQUFoQyxFQUEyQztBQUN6QyxhQUFLb1UsTUFBTCxDQUFZcFUsS0FBWixHQUFvQkEsS0FBcEI7QUFDRDs7QUFFRCxXQUFLaXZELFNBQUwsR0FBaUIsS0FBS0EsU0FBTCxDQUFlaGhFLElBQWYsQ0FBb0IsSUFBcEIsQ0FBakI7O0FBRUEsV0FBS21tQixNQUFMLENBQVlpeEIsZ0JBQVosQ0FBNkIsT0FBN0IsRUFBc0MsS0FBSzRwQixTQUEzQzs7QUFDQSxXQUFLNzZDLE1BQUwsQ0FBWWl4QixnQkFBWixDQUE2QixRQUE3QixFQUF1QyxLQUFLNHBCLFNBQTVDLEVBakVXLENBbUVYOzs7QUFDQSxXQUFLQyxtQkFBTCxHQUEyQixLQUFLM2tELE9BQUwsQ0FBYTRrRCxZQUFiLEdBQ3ZCLHVCQUFTLEtBQUs1a0QsT0FBTCxDQUFhNGtELFlBQXRCLENBRHVCLEdBRXZCLEVBRko7QUFHQSxXQUFLQyxvQkFBTCxHQUE0QixLQUFLN2tELE9BQUwsQ0FBYThrRCxhQUFiLEdBQ3hCLHVCQUFTLEtBQUs5a0QsT0FBTCxDQUFhOGtELGFBQXRCLENBRHdCLEdBRXhCLEVBRko7QUFJQTc2RCxhQUFPLENBQUMrbUQsR0FBUixDQUFZdnJELE1BQVo7QUFDQSxXQUFLcy9ELGFBQUwsR0FBcUIsNEJBQWE7QUFDaEMxdkQsYUFBSyxFQUFFLEtBQUt3VSxNQURvQjtBQUVoQ3k2QyxzQkFBYyxFQUFFQSxjQUZnQjtBQUdoQztBQUNBVSxxQkFBYSxFQUFFLElBSmlCO0FBS2hDQyxhQUFLLEVBQUUsS0FBS0Msb0JBQUwsQ0FBMEJ4aEUsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FMeUI7QUFNaEN5aEUsZ0JBQVEsRUFBRSxLQUFLQyxxQkFBTCxDQUEyQjFoRSxJQUEzQixDQUFnQyxJQUFoQyxDQU5zQjtBQU9oQzJoRSxtQkFBVyxFQUFFLEtBQUtDLDBCQUFMLENBQWdDNWhFLElBQWhDLENBQXFDLElBQXJDLENBUG1CO0FBUWhDNmhFLGNBQU0sRUFBRSxLQUFLQyx5QkFBTCxDQUErQjloRSxJQUEvQixDQUFvQyxJQUFwQyxDQVJ3QjtBQVNoQytoRSxpQkFBUyxFQUFFLEtBQUtDLHdCQUFMLENBQThCaGlFLElBQTlCLENBQW1DLElBQW5DLENBVHFCO0FBVWhDaWlFLGdCQUFRLEVBQUUsS0FBSzNsRCxPQUFMLENBQWE0bEQsWUFBYixJQUE2QixJQVZQO0FBV2hDQyxpQkFBUyxFQUFFLEtBQUs3bEQsT0FBTCxDQUFhNmxELFNBQWIsSUFBMEIsQ0FYTDtBQVloQ0MsbUJBQVcsRUFBRSxLQUFLOWxELE9BQUwsQ0FBYThsRCxXQUFiLElBQTRCLEtBWlQ7QUFhaEM1MUIsaUJBQVMsRUFBRXpxQyxNQUFNLENBQUNvckQsR0FBUCxDQUFXaUQsa0JBQVgsQ0FBOEJpUSxRQUE5QixDQUF1Qzd6QixTQUF2QyxDQUFpRDh6QixRQUFqRCxDQUNULE1BRFMsSUFHUCxNQUhPLEdBSVA7QUFqQjRCLE9BQWIsQ0FBckI7QUFtQkQ7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OzZCQUNXO0FBQ1AsYUFBTyxLQUFLanpELElBQVo7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7dUNBQ3FCO0FBQ2pCLFVBQUksS0FBSzB6RCxvQkFBVCxFQUErQjtBQUM3QixhQUFLNTZDLE1BQUwsQ0FBWS9LLE1BQVo7QUFDRCxPQUZELE1BRU87QUFDTCxZQUFJLEtBQUt5bEQsbUJBQVQsRUFBOEI7QUFDNUIsZUFBS3dCLE9BQUw7QUFDRDtBQUNGO0FBQ0Y7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7OytCQUNhO0FBQ1QsYUFBTyxLQUFLbDhDLE1BQUwsQ0FBWXhsQixLQUFuQjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7OzhCQUNZO0FBQ1IsV0FBS3dsQixNQUFMLENBQVl3MEIsS0FBWjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozt1Q0FDcUI7QUFBQTs7QUFDakIsVUFBTTJuQixpQkFBaUIsR0FBRyxLQUFLaG1ELE9BQUwsQ0FBYWdtRCxpQkFBYixJQUFrQyxLQUE1RDs7QUFDQSxVQUFJL3dELE9BQU8sR0FBRyxLQUFLZ3hELGNBQUwsQ0FBb0IsS0FBS3A4QyxNQUF6QixDQUFkOztBQUVBLFVBQUk1VSxPQUFPLElBQUkrd0QsaUJBQWlCLEtBQUssS0FBakMsSUFBMEMsS0FBS0UsZ0JBQW5ELEVBQXFFO0FBQ25FLFlBQU1DLGFBQWEsR0FBRyxLQUFLRCxnQkFBTCxDQUFzQnhtRCxNQUF0QixDQUNwQixVQUFBK1QsQ0FBQztBQUFBLGlCQUFJQSxDQUFDLENBQUNwdkIsS0FBRixLQUFZLEtBQUksQ0FBQ3dsQixNQUFMLENBQVl4bEIsS0FBNUI7QUFBQSxTQURtQixDQUF0Qjs7QUFHQTRRLGVBQU8sR0FBR2t4RCxhQUFhLENBQUN2NUQsTUFBZCxLQUF5QixDQUFuQztBQUNEOztBQUVELGFBQU8sQ0FBQ3FJLE9BQVI7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7OEJBQ1k7QUFDUixXQUFLNFUsTUFBTCxDQUFZdzRCLG1CQUFaLENBQWdDLE9BQWhDLEVBQXlDLEtBQUtxaUIsU0FBOUM7O0FBQ0EsV0FBSzc2QyxNQUFMLENBQVl3NEIsbUJBQVosQ0FBZ0MsUUFBaEMsRUFBMEMsS0FBS3FpQixTQUEvQzs7QUFDQSxXQUFLSyxhQUFMLENBQW1CanVCLE9BQW5CO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O3lDQUN1QnN2QixJLEVBQU1qMEQsTSxFQUFRO0FBQUE7O0FBQ2pDLFVBQU1rMEQsZ0NBQWdDLEdBQ3BDLEtBQUtybUQsT0FBTCxDQUFhcW1ELGdDQUFiLElBQWlELEtBRG5EOztBQUVBLFVBQU1weEQsT0FBTyxHQUFHLEtBQUtneEQsY0FBTCxDQUFvQixLQUFLcDhDLE1BQXpCLENBQWhCOztBQUVBLFVBQUl3OEMsZ0NBQWdDLElBQUksQ0FBQ3B4RCxPQUF6QyxFQUFrRDtBQUNoRCxlQUFPLEtBQVA7QUFDRDs7QUFFRCxVQUFNbE4sRUFBRSxHQUFHLEtBQUtpWSxPQUFMLENBQWFzbUQsT0FBeEI7QUFFQTcwRCxjQUFRLENBQUNxcEMsZ0JBQVQsQ0FBMEIveUMsRUFBMUIsRUFBOEIsVUFBQWlOLEtBQUssRUFBSTtBQUNyQyxjQUFJLENBQUNreEQsZ0JBQUwsR0FBd0JseEQsS0FBSyxDQUFDeW5ELE1BQTlCO0FBQ0F0cUQsY0FBTSxDQUFDNkMsS0FBSyxDQUFDeW5ELE1BQVAsQ0FBTjtBQUNELE9BSEQ7QUFLQXZxRCxZQUFNLENBQUNxMEQsd0JBQVAsQ0FBZ0MsS0FBS3ZtRCxPQUFMLENBQWF3bUQsU0FBN0MsRUFBd0Q7QUFDdERyOEQsWUFBSSxFQUFFLGVBRGdEO0FBRXREc3lELGNBQU0sRUFBRS96RCxJQUFJLENBQUMwOEMsU0FBTCxDQUFlO0FBQ3JCcjlDLFlBQUUsRUFBRkEsRUFEcUI7QUFFckJxK0QsY0FBSSxFQUFKQSxJQUZxQjtBQUdyQnpVLGdCQUFNLEVBQUUsS0FBSzN4QyxPQUFMLENBQWFvaEQsTUFBYixDQUFvQnZNLEtBSFA7QUFJckJyRSxhQUFHLEVBQUUsNkJBQ0gsS0FBS3h3QyxPQUFMLENBQWF5d0IsSUFEVixFQUVILEtBQUt6d0IsT0FBTCxDQUFhNndDLEdBQWIsQ0FBaUJpRCxrQkFBakIsQ0FBb0NDLFdBQXBDLENBQWdENWlELE9BRjdDO0FBSmdCLFNBQWY7QUFGOEMsT0FBeEQ7QUFhQSxhQUFPLElBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7MENBQ3dCdkosSSxFQUFNO0FBQzFCLFdBQUtpaUIsTUFBTCxDQUFZeGxCLEtBQVosR0FBb0J1RCxJQUFJLENBQUN2RCxLQUF6QjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OENBQzRCdUQsSSxFQUFNNitELFksRUFBYztBQUM1QyxVQUFNQyxHQUFHLEdBQUdqMUQsUUFBUSxDQUFDNitCLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjtBQUNBbzJCLFNBQUcsQ0FBQ3gyQixTQUFKLEdBQWdCLGlCQUFoQjs7QUFFQSxVQUFJLEtBQUt5MEIsbUJBQVQsRUFBOEI7QUFDNUIrQixXQUFHLENBQUN6bUIsU0FBSixHQUFnQixLQUFLMGtCLG1CQUFMLENBQXlCO0FBQ3ZDLzhELGNBQUksRUFBSkEsSUFEdUM7QUFFdkM2K0Qsc0JBQVksRUFBWkE7QUFGdUMsU0FBekIsQ0FBaEI7QUFJRCxPQUxELE1BS087QUFDTEMsV0FBRyxDQUFDem1CLFNBQUosR0FBZ0JyNEMsSUFBSSxDQUFDOEosS0FBckI7QUFDRDs7QUFFRCxhQUFPZzFELEdBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OytDQUM2QkMsUyxFQUFXRixZLEVBQWM7QUFDbEQsVUFBTUMsR0FBRyxHQUFHajFELFFBQVEsQ0FBQzYrQixhQUFULENBQXVCLEtBQXZCLENBQVo7QUFDQW8yQixTQUFHLENBQUN4MkIsU0FBSixHQUFnQixrQkFBaEI7O0FBRUEsVUFBSSxLQUFLMjBCLG9CQUFULEVBQStCO0FBQzdCNkIsV0FBRyxDQUFDem1CLFNBQUosR0FBZ0IsS0FBSzRrQixvQkFBTCxDQUEwQjtBQUFFOEIsbUJBQVMsRUFBVEEsU0FBRjtBQUFhRixzQkFBWSxFQUFaQTtBQUFiLFNBQTFCLENBQWhCO0FBQ0QsT0FGRCxNQUVPO0FBQ0xDLFdBQUcsQ0FBQ3ptQixTQUFKLEdBQWdCMG1CLFNBQWhCO0FBQ0Q7O0FBRUQsYUFBT0QsR0FBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0U7Ozs7NkNBQ3lCcnhELEssRUFBT3V4RCxTLEVBQVd4bUIsUyxFQUFXeW1CLFMsRUFBVztBQUMvRCxVQUFJLEtBQUs3bUQsT0FBTCxDQUFhaTVCLEtBQWpCLEVBQXdCO0FBQ3RCbUgsaUJBQVMsQ0FBQzFILEtBQVYsQ0FBZ0JPLEtBQWhCLGFBQTJCLEtBQUtqNUIsT0FBTCxDQUFhaTVCLEtBQXhDO0FBQ0Q7O0FBRUQsVUFBSSxLQUFLajVCLE9BQUwsQ0FBYXkvQyxNQUFqQixFQUF5QjtBQUN2QnJmLGlCQUFTLENBQUMxSCxLQUFWLENBQWdCK21CLE1BQWhCLGFBQTRCLEtBQUt6L0MsT0FBTCxDQUFheS9DLE1BQXpDO0FBQ0Q7O0FBRUQsVUFBSW9ILFNBQVMsR0FBRyxHQUFoQixFQUFxQjtBQUNuQnptQixpQkFBUyxDQUFDMUgsS0FBVixDQUFnQjJPLEdBQWhCLEdBQXNCLEVBQXRCO0FBQ0FqSCxpQkFBUyxDQUFDMUgsS0FBVixDQUFnQnlPLE1BQWhCLEdBQ0VqMUMsTUFBTSxDQUFDZzFDLFdBQVAsR0FBcUIwZixTQUFTLENBQUN6ZixNQUEvQixHQUF3Qzl4QyxLQUFLLENBQUNxeEMsWUFBOUMsR0FBNkQsSUFEL0Q7QUFFQXRHLGlCQUFTLENBQUMxSCxLQUFWLENBQWdCbXVCLFNBQWhCLEdBQTRCLEtBQUs3bUQsT0FBTCxDQUFheS9DLE1BQWIsYUFDckIsS0FBS3ovQyxPQUFMLENBQWF5L0MsTUFEUSxVQUV4QixPQUZKO0FBR0Q7QUFDRjtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OzhCQUNZenFELEssRUFBTztBQUNmLGFBQU8sS0FBS2l4RCxjQUFMLENBQW9CanhELEtBQUssQ0FBQ3ZRLE1BQTFCLENBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O21DQUNpQjRRLEssRUFBTztBQUNwQixVQUFNSixPQUFPLEdBQUdJLEtBQUssQ0FBQ3l4RCxhQUFOLEVBQWhCOztBQUVBLFVBQUksQ0FBQzd4RCxPQUFMLEVBQWM7QUFDWkksYUFBSyxDQUFDODZCLFNBQU4sQ0FBZ0JDLEdBQWhCLENBQW9CLDBCQUFwQjtBQUNBLzZCLGFBQUssQ0FBQzg2QixTQUFOLENBQWdCRSxNQUFoQixDQUF1Qiw0QkFBdkI7QUFDRCxPQUhELE1BR087QUFDTGg3QixhQUFLLENBQUM4NkIsU0FBTixDQUFnQkUsTUFBaEIsQ0FBdUIsMEJBQXZCO0FBQ0FoN0IsYUFBSyxDQUFDODZCLFNBQU4sQ0FBZ0JDLEdBQWhCLENBQW9CLDRCQUFwQjtBQUNEOztBQUVELGFBQU9uN0IsT0FBUDtBQUNEOzs7Ozs7ZUFHWWduRCxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvVmY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNPLElBQU04SyxtQkFBbUIsR0FBRyxFQUE1Qjs7QUFDQSxJQUFNQyxrQkFBa0IsR0FBRyxJQUEzQjs7QUFDQSxJQUFNQyx5QkFBeUIsR0FBRyxFQUFsQzs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBRyxJQUE1Qjs7QUFDQSxJQUFNQywwQkFBMEIsR0FBRyxJQUFuQyxDLENBRVA7OztBQUNPLElBQU1DLDZCQUE2QixHQUFHLElBQXRDOztBQUNBLElBQU1DLDZCQUE2QixHQUFHLElBQXRDOztBQUNBLElBQU1DLDJCQUEyQixHQUFHLElBQXBDOztBQUNBLElBQU1DLDRCQUE0QixHQUFHLElBQXJDOztBQUNBLElBQU1DLDRCQUE0QixHQUFHLElBQXJDOztBQUNBLElBQU1DLDBCQUEwQixHQUFHLElBQW5DLEMsQ0FFUDs7O0FBQ08sSUFBTUMsMEJBQTBCLEdBQUcsSUFBbkMsQyxDQUVQOzs7QUFDTyxJQUFNQyxnQ0FBZ0MsR0FBRyxJQUF6QyxDLENBRVA7OztBQUNPLElBQU1DLGlCQUFpQixHQUFHLElBQTFCLEMsQ0FFUDs7O0FBQ08sSUFBTUMsdUJBQXVCLEdBQUcsSUFBaEMsQyxDQUVQOzs7QUFDTyxJQUFNQyxjQUFjLEdBQUcsSUFBdkI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzNCUDs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFTQSxJQUFNQyx1QkFBdUIsR0FBRztBQUM5QkMsb0JBQWtCLEVBQUVaLHdDQURVO0FBRTlCYSxvQkFBa0IsRUFBRVosd0NBRlU7QUFHOUJhLGtCQUFnQixFQUFFWjtBQUhZLENBQWhDO0FBTUEsSUFBTWEsc0JBQXNCLEdBQUc7QUFDN0JDLG1CQUFpQixFQUFFYix1Q0FEVTtBQUU3QmMsbUJBQWlCLEVBQUViLHVDQUZVO0FBRzdCYyxpQkFBZSxFQUFFYjtBQUhZLENBQS9CO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNjLHFCQUFULENBQStCeGdFLEVBQS9CLEVBQW1DNEosQ0FBbkMsRUFBc0M7QUFDM0MsTUFBTXROLEtBQUssR0FBR3NOLENBQUMsQ0FBQzdFLGNBQUYsQ0FBaUIsVUFBakIsSUFDViwyQkFBVTZFLENBQUMsQ0FBQzVILFFBQVosQ0FEVSxHQUVWLDJCQUFVNEgsQ0FBQyxDQUFDdE4sS0FBWixDQUZKO0FBR0EsTUFBTTg4RCxRQUFRLEdBQUd4dkQsQ0FBQyxDQUFDN0UsY0FBRixDQUFpQixVQUFqQixJQUNiLDJCQUFVNkUsQ0FBQyxDQUFDd3ZELFFBQVosQ0FEYSxHQUVieHZELENBQUMsQ0FBQzdFLGNBQUYsQ0FBaUIsVUFBakIsSUFDQSwyQkFBVTZFLENBQUMsQ0FBQzVILFFBQVosQ0FEQSxHQUVBLDJCQUFVNEgsQ0FBQyxDQUFDdE4sS0FBWixDQUpKOztBQU1BLE1BQUlBLEtBQUssSUFBSTg4RCxRQUFULElBQXFCeHZELENBQUMsQ0FBQ3hILElBQUYsS0FBVyxrQkFBcEMsRUFBd0Q7QUFDdEQ7QUFDRDs7QUFFRCxNQUFNd1ksTUFBTSxHQUFHLHNDQUFzQmhSLENBQXRCLENBQWY7QUFDQSxNQUFNeEgsSUFBSSxHQUFHd0gsQ0FBQyxDQUFDeEgsSUFBZjtBQUNBLE1BQU0rbkQsS0FBSyxHQUFHdmdELENBQUMsQ0FBQ2dnRCxNQUFGLENBQVNPLEtBQXZCOztBQUVBLE1BQUl2dkMsTUFBSixFQUFZO0FBQ1YsaUNBQ0UsNEJBQVc1YSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCZCxPQUR6QixFQUVFO0FBQ0VoSCxVQUFJLGVBQVFBLElBQVIsQ0FETjtBQUVFc3lELFlBQU0sRUFBRS96RCxJQUFJLENBQUMwOEMsU0FBTCxDQUFlO0FBQ3JCdFosU0FBQyxrQ0FBT25wQixNQUFQLEdBQWtCO0FBQUU2bEQsWUFBRSxFQUFFNzJELENBQUMsQ0FBQ2hKO0FBQVIsU0FBbEIsQ0FEb0I7QUFDZ0I7QUFDckMrekQsU0FBQyxFQUFFcjRELEtBRmtCO0FBRVg7QUFDVitwQixTQUFDLEVBQUUreUMsUUFIa0I7QUFHUjtBQUNibDFDLFNBQUMsRUFBRWltQyxLQUprQixDQUlYOztBQUpXLE9BQWY7QUFGVixLQUZGLEVBV0U2Vix1QkFBdUIsQ0FBQzU5RCxJQUFELENBWHpCO0FBYUQ7QUFDRjtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNzK0Qsb0JBQVQsQ0FBOEIxZ0UsRUFBOUIsRUFBa0M0SixDQUFsQyxFQUFxQztBQUMxQyxNQUFNZ1IsTUFBTSxHQUFHLHNDQUFzQmhSLENBQXRCLENBQWY7O0FBRUEsTUFBSWdSLE1BQUosRUFBWTtBQUNWLFFBQU14WSxJQUFJLEdBQUd3SCxDQUFDLENBQUN4SCxJQUFmO0FBQ0EsaUNBQ0UsNEJBQVdwQyxFQUFYLEVBQWVrSyxPQUFmLENBQXVCZCxPQUR6QixFQUVFO0FBQ0VoSCxVQUFJLGVBQVF3SCxDQUFDLENBQUN4SCxJQUFWLENBRE47QUFFRXN5RCxZQUFNLEVBQUUvekQsSUFBSSxDQUFDMDhDLFNBQUwsaUNBQW9CemlDLE1BQXBCLEdBQStCO0FBQUU2bEQsVUFBRSxFQUFFNzJELENBQUMsQ0FBQ2hKO0FBQVIsT0FBL0IsRUFGVixDQUU0RDs7QUFGNUQsS0FGRixFQU1Fdy9ELHNCQUFzQixDQUFDaCtELElBQUQsQ0FOeEI7QUFRRDtBQUNGLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0R0Q7O0FBQ0E7O0FBVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU3UrRCxrQkFBVCxDQUE0QjNnRSxFQUE1QixFQUFnQzRKLENBQWhDLEVBQW1DO0FBQ3hDLE1BQU1SLE9BQU8sR0FBR1EsQ0FBQyxDQUFDay9DLEdBQUYsQ0FBTWlELGtCQUFOLENBQXlCQyxXQUF6QixDQUFxQzVpRCxPQUFyRDtBQUVBLCtCQUNFQSxPQURGLEVBRUU7QUFDRWhILFFBQUksRUFBRSxrQkFEUjtBQUVFc3lELFVBQU0sRUFBRTtBQUZWLEdBRkYsRUFNRW9MLGtDQU5GO0FBUUQsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdkJEOztBQU9BOztBQUNBOztBQUNBOztBQUNBLCtFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDVkE7O0FBQ0E7O0FBQ0E7O0FBVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU2MsWUFBVCxDQUFzQjVnRSxFQUF0QixFQUEwQjZnRSxZQUExQixFQUF3QztBQUM3QywrQkFDRSw0QkFBVzdnRSxFQUFYLEVBQWVrSyxPQUFmLENBQXVCZCxPQUR6QixFQUVFO0FBQ0VoSCxRQUFJLGVBRE47QUFFRXN5RCxVQUFNLEVBQUUvekQsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZTtBQUNyQm41QixPQUFDLEVBQUUyOEMsWUFBWSxDQUFDMWtFLEdBREs7QUFFckIya0UsUUFBRSxFQUFFRCxZQUFZLENBQUN0ZSxLQUFiLElBQXNCci9DLE1BQU0sQ0FBQzI5RCxZQUFZLENBQUM5OUMsT0FBZCxDQUZYO0FBR3JCZytDLFFBQUUsRUFBRUYsWUFBWSxDQUFDRyxNQUhJO0FBSXJCQyxRQUFFLEVBQUVKLFlBQVksQ0FBQzNrQixRQUpJO0FBS3JCZ2xCLFFBQUUsRUFBRUwsWUFBWSxDQUFDOWtCO0FBTEksS0FBZjtBQUZWLEdBRkYsRUFZRThqQiw0QkFaRjtBQWNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6QkQ7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTc0IsZUFBVCxDQUF5Qm5oRSxFQUF6QixFQUE2Qm9oRSxFQUE3QixFQUFpQztBQUN0QyxNQUFNdFgsSUFBSSxHQUFHLDRCQUFXOXBELEVBQVgsQ0FBYjtBQUVBLCtCQUNFOHBELElBQUksQ0FBQzUvQyxPQUFMLENBQWFkLE9BRGYsRUFFRTtBQUNFaEgsUUFBSSxFQUFFLGNBRFI7QUFFRXN5RCxVQUFNLEVBQUU7QUFGVixHQUZGLEVBTUVxTCx5QkFORixFQUhzQyxDQVl0Qzs7QUFDQSxNQUFNc0IsYUFBYSxHQUFHLDRCQUFZLFVBQUFDLFdBQVcsRUFBSTtBQUMvQyxrQ0FBa0J0aEUsRUFBbEIsRUFBc0JzaEUsV0FBdEI7QUFDRCxHQUZxQixFQUVuQixHQUZtQixDQUF0QjtBQUlDLEdBQ0MsYUFERCxFQUVDLGVBRkQsRUFHQyxlQUhELEVBSUMsY0FKRCxFQUtDLGVBTEQsRUFNQyxhQU5ELEVBT0Msa0JBUEQsRUFRQyxvQkFSRCxFQVNDLHlCQVRELEVBVUMsdUJBVkQsRUFXQyx5QkFYRCxFQVlDO0FBQ0EsdUJBYkQsQ0FjQztBQWRELElBZUNyMEIsT0FmRCxDQWVTLFVBQUFoZ0MsS0FBSyxFQUFJO0FBQ2pCNjhDLFFBQUksQ0FBQzUvQyxPQUFMLENBQWE0K0MsR0FBYixDQUFpQi9WLGdCQUFqQixDQUFrQzlsQyxLQUFsQyxFQUF5Q28wRCxhQUF6QztBQUNELEdBakJBLEVBakJxQyxDQW9DdEM7O0FBQ0F2WCxNQUFJLENBQUN6UixTQUFMLENBQWV0RixnQkFBZixDQUFnQyxTQUFoQyxFQUEyQyxVQUFBOHRCLFlBQVksRUFBSTtBQUN6RC9XLFFBQUksQ0FBQy90RCxJQUFMLEdBQVk7QUFDVm1vQixPQUFDLEVBQUUyOEMsWUFBWSxDQUFDMWtFLEdBRE47QUFFVjJrRSxRQUFFLEVBQUVELFlBQVksQ0FBQ3RlLEtBQWIsSUFBc0JyL0MsTUFBTSxDQUFDMjlELFlBQVksQ0FBQzk5QyxPQUFkLENBRnRCO0FBR1ZnK0MsUUFBRSxFQUFFRixZQUFZLENBQUNHLE1BSFA7QUFJVkMsUUFBRSxFQUFFSixZQUFZLENBQUMza0IsUUFKUDtBQUtWZ2xCLFFBQUUsRUFBRUwsWUFBWSxDQUFDOWtCO0FBTFAsS0FBWjtBQU9ELEdBUkQsRUFyQ3NDLENBK0N0Qzs7QUFDQStOLE1BQUksQ0FBQ3pSLFNBQUwsQ0FBZXRGLGdCQUFmLENBQ0UsT0FERixFQUVFO0FBQ0EsOEJBQVksVUFBQXF1QixFQUFFLEVBQUk7QUFDaEJ0WCxRQUFJLENBQUMvdEQsSUFBTCxHQUFZLElBQVo7QUFDRCxHQUZELEVBRUcsR0FGSCxDQUhGLEVBaERzQyxDQXdEdEM7O0FBRUErdEQsTUFBSSxDQUFDelIsU0FBTCxDQUFldEYsZ0JBQWYsQ0FDRSxTQURGLEVBRUUsNEJBQVksVUFBQTh0QixZQUFZLEVBQUk7QUFDMUIsZ0NBQWE3Z0UsRUFBYixFQUFpQjZnRSxZQUFqQjtBQUNELEdBRkQsRUFFRyxHQUZILENBRkY7QUFPQTEyRCxRQUFNLENBQUN1cUMsYUFBUCxDQUFxQixJQUFJNnNCLFdBQUosV0FBbUJ2aEUsRUFBbkIsYUFBK0I7QUFBRTAwRCxVQUFNLEVBQUU1SztBQUFWLEdBQS9CLENBQXJCO0FBQ0QsQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyRkQ7O0FBQ0E7O0FBQ0E7O0FBVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFhQSxJQUFNMFgsd0JBQXdCLEdBQUc7QUFDL0JDLGFBQVcsRUFBRXRDLDhCQURrQjtBQUUvQnVDLG1CQUFpQixFQUFFdEM7QUFGWSxDQUFqQztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVMvTCxxQkFBVCxDQUErQnpwRCxDQUEvQixFQUFrQztBQUN2QyxNQUFNUixPQUFPLEdBQUdRLENBQUMsQ0FBQ2svQyxHQUFGLENBQU1pRCxrQkFBTixDQUF5QkMsV0FBekIsQ0FBcUM1aUQsT0FBckQ7QUFFQSwrQkFDRUEsT0FERixFQUVFO0FBQ0VoSCxRQUFJLEVBQUUsbUJBRFI7QUFFRXN5RCxVQUFNLEVBQUUvekQsSUFBSSxDQUFDMDhDLFNBQUwsQ0FBZTtBQUNyQnh2QixPQUFDLEVBQUUsNEJBQVd6a0IsT0FBTyxDQUFDcEosRUFBbkIsRUFBdUJqRTtBQURMLEtBQWY7QUFGVixHQUZGLEVBUUVtakUsb0NBUkY7QUFVRDtBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVMzTCxlQUFULENBQXlCM3BELENBQXpCLEVBQTRCO0FBQ2pDLE1BQU1SLE9BQU8sR0FBR1EsQ0FBQyxDQUFDay9DLEdBQUYsQ0FBTWlELGtCQUFOLENBQXlCQyxXQUF6QixDQUFxQzVpRCxPQUFyRDtBQUVBLCtCQUNFQSxPQURGLEVBRUU7QUFDRWhILFFBQUksRUFBRSxhQURSO0FBRUVzeUQsVUFBTSxFQUFFL3pELElBQUksQ0FBQzA4QyxTQUFMLENBQWU7QUFDckJ4dkIsT0FBQyxFQUFFLDRCQUFXemtCLE9BQU8sQ0FBQ3BKLEVBQW5CLEVBQXVCakU7QUFETCxLQUFmO0FBRlYsR0FGRixFQVFFa2pFLDZCQVJGO0FBVUQ7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTckwscUJBQVQsQ0FBK0JocUQsQ0FBL0IsRUFBa0M7QUFDdkMsTUFBTVIsT0FBTyxHQUFHUSxDQUFDLENBQUNrL0MsR0FBRixDQUFNaUQsa0JBQU4sQ0FBeUJDLFdBQXpCLENBQXFDNWlELE9BQXJEO0FBQ0EsK0JBQ0VBLE9BREYsRUFFRTtBQUNFaEgsUUFBSSxFQUFFLGNBRFI7QUFFRXN5RCxVQUFNLEVBQUU7QUFGVixHQUZGLEVBTUVzSyw4QkFORjtBQVFEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU2xMLDBCQUFULENBQW9DbHFELENBQXBDLEVBQXVDO0FBQzVDLE1BQU1SLE9BQU8sR0FBR1EsQ0FBQyxDQUFDay9DLEdBQUYsQ0FBTWlELGtCQUFOLENBQXlCQyxXQUF6QixDQUFxQzVpRCxPQUFyRDtBQUNBLCtCQUNFQSxPQURGLEVBRUU7QUFDRWhILFFBQUksRUFBRSxtQkFEUjtBQUVFc3lELFVBQU0sRUFBRTtBQUZWLEdBRkYsRUFNRWtMLDJDQU5GO0FBUUQ7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNuTSxtQkFBVCxDQUE2QjdwRCxDQUE3QixFQUFnQztBQUNyQyxNQUFNUixPQUFPLEdBQUdRLENBQUMsQ0FBQ2svQyxHQUFGLENBQU1pRCxrQkFBTixDQUF5QkMsV0FBekIsQ0FBcUM1aUQsT0FBckQ7QUFDQSxNQUFNcEosRUFBRSxHQUFHb0osT0FBTyxDQUFDcEosRUFBbkI7QUFDQSxNQUFNNGEsTUFBTSxHQUFHLHNDQUFzQmhSLENBQXRCLENBQWY7O0FBRUEsTUFBSWdSLE1BQUosRUFBWTtBQUNWLFFBQU14WSxJQUFJLEdBQUd3SCxDQUFDLENBQUN4SCxJQUFmO0FBQ0EsaUNBQ0VnSCxPQURGLEVBRUU7QUFDRWhILFVBQUksZUFBUXdILENBQUMsQ0FBQ3hILElBQVYsQ0FETjtBQUVFc3lELFlBQU0sRUFBRS96RCxJQUFJLENBQUMwOEMsU0FBTCxDQUFlO0FBQ3JCdFosU0FBQyxFQUFFbnBCLE1BRGtCO0FBQ1Y7QUFDWCs1QyxTQUFDLEVBQUUsMkJBQVUvcUQsQ0FBQyxDQUFDdE4sS0FBWixDQUZrQjtBQUVFO0FBQ3ZCK3BCLFNBQUMsRUFBRSwyQkFBVXpjLENBQUMsQ0FBQ3ROLEtBQVosQ0FIa0I7QUFHRTtBQUN2QjRuQixTQUFDLEVBQUV0YSxDQUFDLENBQUNnZ0QsTUFBRixDQUFTTyxLQUpTO0FBSUY7QUFDbkJ0OEIsU0FBQyxFQUFFLDRCQUFXN3RCLEVBQVgsRUFBZWpFO0FBTEcsT0FBZjtBQUZWLEtBRkYsRUFZRXlsRSx3QkFBd0IsQ0FBQ3AvRCxJQUFELENBWjFCO0FBY0Q7QUFDRixDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeklEOztBQUNBOztBQUNBOztBQVZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLFNBQVN1L0QsaUJBQVQsQ0FBMkIzaEUsRUFBM0IsRUFBK0JvaEUsRUFBL0IsRUFBbUM7QUFDeEMsK0JBQ0UsNEJBQVdwaEUsRUFBWCxFQUFla0ssT0FBZixDQUF1QmQsT0FEekIsRUFFRTtBQUNFaEgsUUFBSSxFQUFFLGlCQURSO0FBRUVzeUQsVUFBTSxFQUFFO0FBRlYsR0FGRixFQU1FaUwscUNBTkY7QUFRRCxDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDeEJEOztBQVRBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBO0FBQ08sU0FBU2lDLFdBQVQsQ0FBcUJsK0QsSUFBckIsRUFBMkJra0MsSUFBM0IsRUFBaUNDLFNBQWpDLEVBQTRDO0FBQ2pELE1BQUlDLE9BQUo7QUFDQSxTQUFPLFlBQVc7QUFDaEIsUUFBSTErQixPQUFPLEdBQUcsSUFBZDtBQUFBLFFBQ0VuTSxJQUFJLEdBQUc4VSxTQURUOztBQUVBLFFBQUk4dkQsS0FBSyxHQUFHLFNBQVJBLEtBQVEsR0FBVztBQUNyQi81QixhQUFPLEdBQUcsSUFBVjs7QUFDQSxVQUFJLENBQUNELFNBQUwsRUFBZ0I7QUFDZG5rQyxZQUFJLENBQUNhLEtBQUwsQ0FBVzZFLE9BQVgsRUFBb0JuTSxJQUFwQjtBQUNEO0FBQ0YsS0FMRDs7QUFNQSxRQUFJNmtFLE9BQU8sR0FBR2o2QixTQUFTLElBQUksQ0FBQ0MsT0FBNUI7QUFDQUMsZ0JBQVksQ0FBQ0QsT0FBRCxDQUFaO0FBQ0FBLFdBQU8sR0FBR3ZrQixVQUFVLENBQUNzK0MsS0FBRCxFQUFRajZCLElBQVIsQ0FBcEI7O0FBQ0EsUUFBSWs2QixPQUFKLEVBQWE7QUFDWHArRCxVQUFJLENBQUNhLEtBQUwsQ0FBVzZFLE9BQVgsRUFBb0JuTSxJQUFwQjtBQUNEO0FBQ0YsR0FmRDtBQWdCRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTOGtFLFlBQVQsQ0FBc0IzNEQsT0FBdEIsRUFBMkQ7QUFBQSxNQUE1QjQ0RCxPQUE0Qix1RUFBbEIsRUFBa0I7QUFBQSxNQUFkekQsT0FBYyx1RUFBSixFQUFJO0FBQ2hFLE1BQU0wRCxtQkFBbUIsR0FBRzc0RCxPQUFPLENBQUM4NEQsU0FBUixJQUFxQixFQUFqRDs7QUFFQSxNQUFJRCxtQkFBbUIsQ0FBQ0UsUUFBcEIsQ0FBNkI1RCxPQUE3QixDQUFKLEVBQTJDO0FBQ3pDLFFBQU1JLEdBQUcsR0FBRyxpQ0FBaUJoTixjQUFqQixXQUFtQ3ZvRCxPQUFPLENBQUNwSixFQUEzQyxFQUFaLENBRHlDLENBR3pDOztBQUNBLFFBQUksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPMHFCLE9BQVAsQ0FBZXRoQixPQUFPLENBQUNnNUQsUUFBdkIsSUFBbUMsQ0FBQyxDQUF4QyxFQUEyQztBQUN6QyxVQUFNQyxVQUFVLHNCQUFlajVELE9BQU8sQ0FBQ3BKLEVBQXZCLENBQWhCO0FBQ0EsVUFBTXE0QyxTQUFTLEdBQUcsaUNBQWlCaXFCLHNCQUFqQixDQUF3Q0QsVUFBeEMsRUFBb0QsQ0FBcEQsQ0FBbEI7O0FBQ0EsVUFBSSxPQUFPaHFCLFNBQVMsQ0FBQ21tQix3QkFBakIsS0FBOEMsVUFBbEQsRUFBOEQ7QUFDNURubUIsaUJBQVMsQ0FBQ21tQix3QkFBVixDQUFtQ0csR0FBbkMsRUFBd0NxRCxPQUF4QztBQUNELE9BRkQsTUFFTztBQUNMNzNELGNBQU0sQ0FBQ3EwRCx3QkFBUCxDQUFnQ0csR0FBaEMsRUFBcUNxRCxPQUFyQztBQUNEO0FBQ0YsS0FSRCxNQVFPO0FBQ0w3M0QsWUFBTSxDQUFDcTBELHdCQUFQLENBQWdDRyxHQUFoQyxFQUFxQ3FELE9BQXJDO0FBQ0Q7QUFDRjtBQUNGO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU08sWUFBVCxDQUFzQjc1QixJQUF0QixFQUE0QnQvQixPQUE1QixFQUFxQztBQUMxQyxNQUFJLFNBQVNzL0IsSUFBSSxDQUFDd3dCLEtBQWxCLEVBQXlCO0FBQ3ZCLFdBQU8sS0FBUDtBQUNELEdBSHlDLENBR3hDOzs7QUFFRixNQUFNcEMsWUFBWSxHQUFHcHVCLElBQUksQ0FBQ21nQixTQUFMLEdBQWlCLGFBQWpCLEdBQWlDei9DLE9BQU8sQ0FBQzB0RCxZQUE5RDtBQUVBLFNBQU87QUFDTDc2RCxLQUFDLEVBQ0NtTixPQUFPLENBQUNyRSxjQUFSLENBQXVCLGNBQXZCLEtBQTBDMmpDLElBQUksQ0FBQzluQyxJQUFMLENBQVVrMkQsWUFBVixDQUExQyxHQUNJcHVCLElBQUksQ0FBQzluQyxJQUFMLENBQVVrMkQsWUFBVixDQURKLEdBRUlwdUIsSUFBSSxDQUFDMW9DLEVBSk47QUFJVTtBQUNmMHJCLEtBQUMsRUFBRWdkLElBQUksQ0FBQ3lnQixRQUxIO0FBS2E7QUFDbEJ2aUMsS0FBQyxFQUNDOGhCLElBQUksQ0FBQzNqQyxjQUFMLENBQW9CLFFBQXBCLEtBQWlDMmpDLElBQUksQ0FBQ3hxQyxNQUFMLENBQVk2RyxjQUFaLENBQTJCLEtBQTNCLENBQWpDLEdBQ0kyakMsSUFBSSxDQUFDeHFDLE1BQUwsQ0FBWS9CLEdBRGhCLEdBRUksRUFURDtBQVNLO0FBQ1YrbkIsS0FBQyxFQUFFd2tCLElBQUksQ0FBQ21nQixTQUFMLEdBQWlCLENBQUMsQ0FBbEIsR0FBc0JuZ0IsSUFBSSxDQUFDODVCLFVBVnpCO0FBVXFDO0FBQzFDMzdDLEtBQUMsRUFBRXBlLE9BQU8sQ0FBQ2lnQyxJQUFJLENBQUN5UCxRQUFOLENBWEw7QUFXc0I7QUFDM0I7QUFDQXNvQixNQUFFLEVBQ0FyM0QsT0FBTyxDQUFDckUsY0FBUixDQUF1QixzQkFBdkIsS0FDQXFFLE9BQU8sQ0FBQyxzQkFBRCxDQUFQLEtBQW9DLElBRHBDLEdBRUlzL0IsSUFBSSxDQUFDOW5DLElBRlQsR0FHSSxJQWpCRDtBQWtCTGd3QixNQUFFLEVBQUU4WCxJQUFJLENBQUNtZ0IsU0FsQkosQ0FrQmU7O0FBbEJmLEdBQVA7QUFvQkQ7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVM0WixxQkFBVCxDQUErQjc0RCxDQUEvQixFQUFrQztBQUN2QyxTQUFPMjRELFlBQVksQ0FBQzM0RCxDQUFDLENBQUM4K0IsSUFBSCxFQUFTOStCLENBQUMsQ0FBQ1IsT0FBWCxDQUFuQjtBQUNELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdkhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU3M1RCxvQkFBVCxDQUE4QnBpRCxVQUE5QixFQUEwQztBQUMvQztBQUNBLE1BQUksT0FBT29pRCxvQkFBb0IsQ0FBQ0MsZUFBNUIsSUFBK0MsV0FBbkQsRUFBZ0U7QUFDOURELHdCQUFvQixDQUFDQyxlQUFyQixHQUF1QyxFQUF2QztBQUNELEdBSjhDLENBTS9DOzs7QUFDQSxNQUFJRCxvQkFBb0IsQ0FBQ0MsZUFBckIsQ0FBcUNyaUQsVUFBckMsQ0FBSixFQUFzRDtBQUNwRCxXQUFPb2lELG9CQUFvQixDQUFDQyxlQUFyQixDQUFxQ3JpRCxVQUFyQyxDQUFQO0FBQ0QsR0FUOEMsQ0FXL0M7OztBQUNBLE1BQUlzaUQsWUFBWSxHQUFHLElBQW5CLENBWitDLENBYS9DO0FBQ0E7O0FBQ0EsTUFBSXRpRCxVQUFVLENBQUNvSyxPQUFYLENBQW1CLFFBQW5CLEtBQWdDLENBQXBDLEVBQXVDO0FBQ3JDazRDLGdCQUFZLEdBQUd0aUQsVUFBZjtBQUNELEdBRkQsTUFFTztBQUNMc2lELGdCQUFZLEdBQUcsWUFBWXRpRCxVQUFaLEdBQXlCLEdBQXhDO0FBQ0Q7O0FBRUQsTUFBTXVpRCxXQUFXLEdBQUcsSUFBSW5nRSxRQUFKLENBQ2xCLGdIQURrQixFQUVsQmtnRSxZQUZrQixDQUFwQixDQXJCK0MsQ0EwQi9DOztBQUNBRixzQkFBb0IsQ0FBQ0MsZUFBckIsQ0FBcUNyaUQsVUFBckMsSUFBbUR1aUQsV0FBbkQ7QUFFQSxTQUFPQSxXQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDTyxTQUFTQyxvQkFBVCxDQUE4QnhpRCxVQUE5QixFQUEwQzVpQixNQUExQyxFQUFrRDtBQUN2RCxNQUFJO0FBQ0YsUUFBTXFsRSxrQkFBa0IsR0FBR0wsb0JBQW9CLENBQUNwaUQsVUFBRCxDQUEvQyxDQURFLENBRUY7QUFDQTs7QUFDQSxRQUFNN2EsTUFBTSxHQUFHczlELGtCQUFrQixDQUMvQnJsRSxNQUFNLENBQUNwQixLQUR3QixFQUUvQm9CLE1BQU0sQ0FBQzBMLE9BRndCLEVBRy9CMUwsTUFBTSxDQUFDMDdELFFBSHdCLEVBSS9CMTdELE1BQU0sQ0FBQ3NFLFFBSndCLEVBSy9CdEUsTUFBTSxDQUFDcEIsS0FMd0IsRUFNL0JvQixNQUFNLENBQUNnckMsSUFOd0IsRUFPL0JockMsTUFBTSxDQUFDa0QsSUFQd0IsRUFRL0JsRCxNQUFNLENBQUMyN0QsTUFSd0IsRUFTL0IzN0QsTUFBTSxDQUFDeXJELFFBVHdCLEVBVS9CenJELE1BQU0sQ0FBQ29yRCxHQVZ3QixFQVcvQnByRCxNQUFNLENBQUMwc0QsU0FYd0IsRUFZL0Ixc0QsTUFBTSxDQUFDd1MsUUFad0IsRUFhL0J4UyxNQUFNLENBQUNrc0QsTUFid0IsRUFjL0Jsc0QsTUFBTSxDQUFDNjdELFdBZHdCLENBQWpDO0FBZ0JBLFdBQU85ekQsTUFBUDtBQUNELEdBckJELENBcUJFLE9BQU9tRSxDQUFQLEVBQVU7QUFDVjtBQUNBO0FBQ0ExSCxXQUFPLENBQUMrbUQsR0FBUixDQUFZLHFDQUFaO0FBQ0EvbUQsV0FBTyxDQUFDK21ELEdBQVIsQ0FBWSxrQkFBa0Izb0MsVUFBOUI7QUFDQXBlLFdBQU8sQ0FBQyttRCxHQUFSLENBQVksVUFBWixFQUF3QnZyRCxNQUF4QjtBQUNBd0UsV0FBTyxDQUFDK21ELEdBQVIsQ0FBWSxpQkFBaUJyL0MsQ0FBN0I7QUFDQSxXQUFPLElBQVA7QUFDRDtBQUNGLEM7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzlFRDs7QUFDQTs7QUFDQTs7QUFDQTs7QUFNQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFDQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQUssbUJBQU8sQ0FBQyxpRkFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLG9EQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsd0VBQUQsQ0FBUCxDOzs7Ozs7Ozs7Ozs7OztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFBQyxDQUFDLFlBQVc7QUFDWCxNQUFJLE9BQU9FLE1BQU0sQ0FBQ28zRCxXQUFkLEtBQThCLFVBQWxDLEVBQThDO0FBQzVDLFdBQU8sS0FBUDtBQUNELEdBSFUsQ0FHVDs7O0FBRUYsV0FBU0EsV0FBVCxDQUFxQnQwRCxLQUFyQixFQUE0QnZQLE1BQTVCLEVBQW9DO0FBQ2xDQSxVQUFNLEdBQUdBLE1BQU0sSUFBSTtBQUFFc2xFLGFBQU8sRUFBRSxLQUFYO0FBQWtCQyxnQkFBVSxFQUFFLEtBQTlCO0FBQXFDdk8sWUFBTSxFQUFFM3JDO0FBQTdDLEtBQW5CO0FBQ0EsUUFBSXpSLEdBQUcsR0FBRzVOLFFBQVEsQ0FBQytxQyxXQUFULENBQXFCLGFBQXJCLENBQVY7QUFDQW45QixPQUFHLENBQUM0ckQsZUFBSixDQUFvQmoyRCxLQUFwQixFQUEyQnZQLE1BQU0sQ0FBQ3NsRSxPQUFsQyxFQUEyQ3RsRSxNQUFNLENBQUN1bEUsVUFBbEQsRUFBOER2bEUsTUFBTSxDQUFDZzNELE1BQXJFO0FBQ0EsV0FBT3A5QyxHQUFQO0FBQ0Q7O0FBRURpcUQsYUFBVyxDQUFDNTZDLFNBQVosR0FBd0J4YyxNQUFNLENBQUNnNUQsS0FBUCxDQUFheDhDLFNBQXJDO0FBRUF4YyxRQUFNLENBQUNvM0QsV0FBUCxHQUFxQkEsV0FBckI7QUFDRCxDQWZBLEk7Ozs7Ozs7Ozs7OztBQ1RELGNBQWMsbUJBQU8sQ0FBQyxnSUFBZ0U7O0FBRXRGLDRDQUE0QyxRQUFTOztBQUVyRDtBQUNBOzs7O0FBSUEsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsc0dBQW1EOztBQUV4RTs7QUFFQSxHQUFHLEtBQVUsRUFBRSxFOzs7Ozs7Ozs7Ozs7QUNwQmYsY0FBYyxtQkFBTyxDQUFDLG9KQUEwRTs7QUFFaEcsNENBQTRDLFFBQVM7O0FBRXJEO0FBQ0E7Ozs7QUFJQSxlQUFlOztBQUVmO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyxzR0FBbUQ7O0FBRXhFOztBQUVBLEdBQUcsS0FBVSxFQUFFLEUiLCJmaWxlIjoiYmJqLWdyaWQtd2lkZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiIC8qXHJcbiAgKiBodHRwczovL2dpdGh1Yi5jb20va3JhYWRlbi9hdXRvY29tcGxldGVcclxuICAqIENvcHlyaWdodCAoYykgMjAxNiBEZW55cyBLcmFzbm9zaGNob2tcclxuICAqIE1JVCBMaWNlbnNlXHJcbiAgKi9cclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIEV2ZW50VHJpZ2dlciB7XHJcbiAgICBLZXlib2FyZCA9IDAsXHJcbiAgICBGb2N1cyA9IDFcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBdXRvY29tcGxldGVJdGVtIHtcclxuICAgIGxhYmVsPzogc3RyaW5nO1xyXG4gICAgZ3JvdXA/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQXV0b2NvbXBsZXRlU2V0dGluZ3M8VCBleHRlbmRzIEF1dG9jb21wbGV0ZUl0ZW0+IHtcclxuICAgIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgcmVuZGVyPzogKGl0ZW06IFQsIGN1cnJlbnRWYWx1ZTogc3RyaW5nKSA9PiBIVE1MRGl2RWxlbWVudCB8IHVuZGVmaW5lZDtcclxuICAgIHJlbmRlckdyb3VwPzogKG5hbWU6IHN0cmluZywgY3VycmVudFZhbHVlOiBzdHJpbmcpID0+IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkO1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gICAgbWluTGVuZ3RoPzogbnVtYmVyO1xyXG4gICAgZW1wdHlNc2c/OiBzdHJpbmc7XHJcbiAgICBvblNlbGVjdDogKGl0ZW06IFQsIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50KSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IGF1dG9jb21wbGV0ZSBvbiBmb2N1cyBldmVudC4gRm9jdXMgZXZlbnQgd2lsbCBpZ25vcmUgdGhlIGBtaW5MZW5ndGhgIHByb3BlcnR5IGFuZCB3aWxsIGFsd2F5cyBjYWxsIGBmZXRjaGAuXHJcbiAgICAgKi9cclxuICAgIHNob3dPbkZvY3VzPzogYm9vbGVhbjtcclxuICAgIGZldGNoOiAodGV4dDogc3RyaW5nLCB1cGRhdGU6IChpdGVtczogVFtdIHwgZmFsc2UpID0+IHZvaWQsIHRyaWdnZXI6IEV2ZW50VHJpZ2dlcikgPT4gdm9pZDtcclxuICAgIGRlYm91bmNlV2FpdE1zPzogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBmb3IgYWRkaXRpb25hbCBhdXRvY29tcGxldGUgY3VzdG9taXphdGlvblxyXG4gICAgICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dCAtIGlucHV0IGJveCBhc3NvY2lhdGVkIHdpdGggYXV0b2NvbXBsZXRlXHJcbiAgICAgKiBAcGFyYW0ge0NsaWVudFJlY3QgfCBET01SZWN0fSBpbnB1dFJlY3QgLSBzaXplIG9mIHRoZSBpbnB1dCBib3ggYW5kIGl0cyBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgdmlld3BvcnRcclxuICAgICAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IGNvbnRhaW5lciAtIGNvbnRhaW5lciB3aXRoIHN1Z2dlc3Rpb25zXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4SGVpZ2h0IC0gbWF4IGhlaWdodCB0aGF0IGNhbiBiZSB1c2VkIGJ5IGF1dG9jb21wbGV0ZVxyXG4gICAgICovXHJcbiAgICBjdXN0b21pemU/OiAoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQsIGlucHV0UmVjdDogQ2xpZW50UmVjdCB8IERPTVJlY3QsIGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIG1heEhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmV2ZW50cyBhdXRvbWF0aWMgZm9ybSBzdWJtaXQgd2hlbiBFTlRFUiBpcyBwcmVzc2VkXHJcbiAgICAgKi9cclxuICAgIHByZXZlbnRTdWJtaXQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9jb21wbGV0ZVJlc3VsdCB7XHJcbiAgICBkZXN0cm95OiAoKSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBlbnVtIEtleXMge1xyXG4gICAgRW50ZXIgPSAxMyxcclxuICAgIEVzYyA9IDI3LFxyXG4gICAgVXAgPSAzOCxcclxuICAgIERvd24gPSA0MCxcclxuICAgIExlZnQgPSAzNyxcclxuICAgIFJpZ2h0ID0gMzksXHJcbiAgICBTaGlmdCA9IDE2LFxyXG4gICAgQ3RybCA9IDE3LFxyXG4gICAgQWx0ID0gMTgsXHJcbiAgICBDYXBzTG9jayA9IDIwLFxyXG4gICAgV2luZG93c0tleSA9IDkxLFxyXG4gICAgVGFiID0gOSxcclxuICAgIEYxID0gMTEyLFxyXG4gICAgRjEyID0gMTIzXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9jb21wbGV0ZTxUIGV4dGVuZHMgQXV0b2NvbXBsZXRlSXRlbT4oc2V0dGluZ3M6IEF1dG9jb21wbGV0ZVNldHRpbmdzPFQ+KTogQXV0b2NvbXBsZXRlUmVzdWx0IHtcclxuXHJcbiAgICAvLyBqdXN0IGFuIGFsaWFzIHRvIG1pbmltaXplIEpTIGZpbGUgc2l6ZVxyXG4gICAgY29uc3QgZG9jID0gZG9jdW1lbnQ7XHJcblxyXG4gICAgY29uc3QgY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBjb250YWluZXIuc3R5bGU7XHJcbiAgICBjb25zdCB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gICAgY29uc3QgbW9iaWxlRmlyZWZveCA9IHVzZXJBZ2VudC5pbmRleE9mKFwiRmlyZWZveFwiKSAhPT0gLTEgJiYgdXNlckFnZW50LmluZGV4T2YoXCJNb2JpbGVcIikgIT09IC0xO1xyXG4gICAgY29uc3QgZGVib3VuY2VXYWl0TXMgPSBzZXR0aW5ncy5kZWJvdW5jZVdhaXRNcyB8fCAwO1xyXG4gICAgY29uc3QgcHJldmVudFN1Ym1pdCA9IHNldHRpbmdzLnByZXZlbnRTdWJtaXQgfHwgZmFsc2U7XHJcbiAgICBcclxuICAgIC8vICdrZXl1cCcgZXZlbnQgd2lsbCBub3QgYmUgZmlyZWQgb24gTW9iaWxlIEZpcmVmb3gsIHNvIHdlIGhhdmUgdG8gdXNlICdpbnB1dCcgZXZlbnQgaW5zdGVhZFxyXG4gICAgY29uc3Qga2V5VXBFdmVudE5hbWUgPSBtb2JpbGVGaXJlZm94ID8gXCJpbnB1dFwiIDogXCJrZXl1cFwiO1xyXG4gICAgXHJcbiAgICBsZXQgaXRlbXM6IFRbXSA9IFtdO1xyXG4gICAgbGV0IGlucHV0VmFsdWUgPSBcIlwiO1xyXG4gICAgbGV0IG1pbkxlbiA9IDI7XHJcbiAgICBjb25zdCBzaG93T25Gb2N1cyA9IHNldHRpbmdzLnNob3dPbkZvY3VzO1xyXG4gICAgbGV0IHNlbGVjdGVkOiBUIHwgdW5kZWZpbmVkO1xyXG4gICAgbGV0IGtleXByZXNzQ291bnRlciA9IDA7XHJcbiAgICBsZXQgZGVib3VuY2VUaW1lciA6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBpZiAoc2V0dGluZ3MubWluTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBtaW5MZW4gPSBzZXR0aW5ncy5taW5MZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFzZXR0aW5ncy5pbnB1dCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImlucHV0IHVuZGVmaW5lZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHNldHRpbmdzLmlucHV0O1xyXG5cclxuICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImF1dG9jb21wbGV0ZSBcIiArIChzZXR0aW5ncy5jbGFzc05hbWUgfHwgXCJcIik7XHJcblxyXG4gICAgLy8gSU9TIGltcGxlbWVudGF0aW9uIGZvciBmaXhlZCBwb3NpdGlvbmluZyBoYXMgbWFueSBidWdzLCBzbyB3ZSB3aWxsIHVzZSBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xyXG4gICAgY29udGFpbmVyU3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRhY2ggdGhlIGNvbnRhaW5lciBmcm9tIERPTVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBkZXRhY2goKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50ID0gY29udGFpbmVyLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhciBkZWJvdW5jaW5nIHRpbWVyIGlmIGFzc2lnbmVkXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNsZWFyRGVib3VuY2VUaW1lcigpOiB2b2lkIHtcclxuICAgICAgICBpZiAoZGVib3VuY2VUaW1lcikge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCB0aGUgY29udGFpbmVyIHRvIERPTVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBhdHRhY2goKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGNvbnRhaW5lciBmb3IgYXV0b2NvbXBsZXRlIGlzIGRpc3BsYXllZFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjb250YWluZXJEaXNwbGF5ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICEhY29udGFpbmVyLnBhcmVudE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhciBhdXRvY29tcGxldGUgc3RhdGUgYW5kIGhpZGUgY29udGFpbmVyXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHByZXZlbnQgdGhlIHVwZGF0ZSBjYWxsIGlmIHRoZXJlIGFyZSBwZW5kaW5nIEFKQVggcmVxdWVzdHNcclxuICAgICAgICBrZXlwcmVzc0NvdW50ZXIrKztcclxuICAgICAgICBcclxuICAgICAgICBpdGVtcyA9IFtdO1xyXG4gICAgICAgIGlucHV0VmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIHNlbGVjdGVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGRldGFjaCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIGF1dG9jb21wbGV0ZSBwb3NpdGlvblxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVQb3NpdGlvbigpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lckRpc3BsYXllZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRhaW5lclN0eWxlLmhlaWdodCA9IFwiYXV0b1wiO1xyXG4gICAgICAgIGNvbnRhaW5lclN0eWxlLndpZHRoID0gaW5wdXQub2Zmc2V0V2lkdGggKyBcInB4XCI7XHJcblxyXG4gICAgICAgIGxldCBtYXhIZWlnaHQgPSAwO1xyXG4gICAgICAgIGxldCBpbnB1dFJlY3Q6IENsaWVudFJlY3QgfCBET01SZWN0IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjYWxjKCkge1xyXG4gICAgICAgICAgICBjb25zdCBkb2NFbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudFRvcCA9IGRvY0VsLmNsaWVudFRvcCB8fCBkb2MuYm9keS5jbGllbnRUb3AgfHwgMDtcclxuICAgICAgICAgICAgY29uc3QgY2xpZW50TGVmdCA9IGRvY0VsLmNsaWVudExlZnQgfHwgZG9jLmJvZHkuY2xpZW50TGVmdCB8fCAwO1xyXG4gICAgICAgICAgICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jRWwuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBjb25zdCBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY0VsLnNjcm9sbExlZnQ7XHJcblxyXG4gICAgICAgICAgICBpbnB1dFJlY3QgPSBpbnB1dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgdG9wID0gaW5wdXRSZWN0LnRvcCArIGlucHV0Lm9mZnNldEhlaWdodCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcDtcclxuICAgICAgICAgICAgY29uc3QgbGVmdCA9IGlucHV0UmVjdC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnQ7XHJcbiAgICBcclxuICAgICAgICAgICAgY29udGFpbmVyU3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xyXG4gICAgICAgICAgICBjb250YWluZXJTdHlsZS5sZWZ0ID0gbGVmdCArIFwicHhcIjtcclxuICAgIFxyXG4gICAgICAgICAgICBtYXhIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSAoaW5wdXRSZWN0LnRvcCArIGlucHV0Lm9mZnNldEhlaWdodCk7XHJcbiAgICBcclxuICAgICAgICAgICAgaWYgKG1heEhlaWdodCA8IDApIHtcclxuICAgICAgICAgICAgICAgIG1heEhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBjb250YWluZXJTdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLmJvdHRvbSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLmxlZnQgPSBsZWZ0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICBjb250YWluZXJTdHlsZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0aGUgY2FsYyBtZXRob2QgbXVzdCBiZSBjYWxsZWQgdHdpY2UsIG90aGVyd2lzZSB0aGUgY2FsY3VsYXRpb24gbWF5IGJlIHdyb25nIG9uIHJlc2l6ZSBldmVudCAoY2hyb21lIGJyb3dzZXIpXHJcbiAgICAgICAgY2FsYygpO1xyXG4gICAgICAgIGNhbGMoKTtcclxuXHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmN1c3RvbWl6ZSAmJiBpbnB1dFJlY3QpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3MuY3VzdG9taXplKGlucHV0LCBpbnB1dFJlY3QsIGNvbnRhaW5lciwgbWF4SGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWRyYXcgdGhlIGF1dG9jb21wbGV0ZSBkaXYgZWxlbWVudCB3aXRoIHN1Z2dlc3Rpb25zXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBkZWxldGUgYWxsIGNoaWxkcmVuIGZyb20gYXV0b2NvbXBsZXRlIERPTSBjb250YWluZXJcclxuICAgICAgICB3aGlsZSAoY29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5maXJzdENoaWxkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGZ1bmN0aW9uIGZvciByZW5kZXJpbmcgYXV0b2NvbXBsZXRlIHN1Z2dlc3Rpb25zXHJcbiAgICAgICAgbGV0IHJlbmRlciA9IGZ1bmN0aW9uKGl0ZW06IFQsIGN1cnJlbnRWYWx1ZTogc3RyaW5nKTogSFRNTERpdkVsZW1lbnQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtRWxlbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBpdGVtRWxlbWVudC50ZXh0Q29udGVudCA9IGl0ZW0ubGFiZWwgfHwgXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1FbGVtZW50O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLnJlbmRlcikge1xyXG4gICAgICAgICAgICByZW5kZXIgPSBzZXR0aW5ncy5yZW5kZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmdW5jdGlvbiB0byByZW5kZXIgYXV0b2NvbXBsZXRlIGdyb3Vwc1xyXG4gICAgICAgIGxldCByZW5kZXJHcm91cCA9IGZ1bmN0aW9uKGdyb3VwTmFtZTogc3RyaW5nLCBjdXJyZW50VmFsdWU6IHN0cmluZyk6IEhUTUxEaXZFbGVtZW50IHwgdW5kZWZpbmVkIHtcclxuICAgICAgICAgICAgY29uc3QgZ3JvdXBEaXYgPSBkb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgZ3JvdXBEaXYudGV4dENvbnRlbnQgPSBncm91cE5hbWU7XHJcbiAgICAgICAgICAgIHJldHVybiBncm91cERpdjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChzZXR0aW5ncy5yZW5kZXJHcm91cCkge1xyXG4gICAgICAgICAgICByZW5kZXJHcm91cCA9IHNldHRpbmdzLnJlbmRlckdyb3VwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgIGxldCBwcmV2R3JvdXAgPSBcIiM5PyRcIjtcclxuXHJcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtOiBUKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLmdyb3VwICYmIGl0ZW0uZ3JvdXAgIT09IHByZXZHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgcHJldkdyb3VwID0gaXRlbS5ncm91cDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwRGl2ID0gcmVuZGVyR3JvdXAoaXRlbS5ncm91cCwgaW5wdXRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXBEaXYpIHtcclxuICAgICAgICAgICAgICAgICAgICBncm91cERpdi5jbGFzc05hbWUgKz0gXCIgZ3JvdXBcIjtcclxuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChncm91cERpdik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZGl2ID0gcmVuZGVyKGl0ZW0sIGlucHV0VmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoZGl2KSB7XHJcbiAgICAgICAgICAgICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub25TZWxlY3QoaXRlbSwgaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGl2LmNsYXNzTmFtZSArPSBcIiBzZWxlY3RlZFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XHJcbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmVtcHR5TXNnKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eSA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgZW1wdHkuY2xhc3NOYW1lID0gXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgZW1wdHkudGV4dENvbnRlbnQgPSBzZXR0aW5ncy5lbXB0eU1zZztcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbXB0eSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhdHRhY2goKTtcclxuICAgICAgICB1cGRhdGVQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICB1cGRhdGVTY3JvbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1cGRhdGVJZkRpc3BsYXllZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoY29udGFpbmVyRGlzcGxheWVkKCkpIHtcclxuICAgICAgICAgICAgdXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2l6ZUV2ZW50SGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICB1cGRhdGVJZkRpc3BsYXllZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNjcm9sbEV2ZW50SGFuZGxlcihlOiBFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUlmRGlzcGxheWVkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBrZXl1cEV2ZW50SGFuZGxlcihldjogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSBldi53aGljaCB8fCBldi5rZXlDb2RlIHx8IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IGlnbm9yZSA9IFtLZXlzLlVwLCBLZXlzLkVudGVyLCBLZXlzLkVzYywgS2V5cy5SaWdodCwgS2V5cy5MZWZ0LCBLZXlzLlNoaWZ0LCBLZXlzLkN0cmwsIEtleXMuQWx0LCBLZXlzLkNhcHNMb2NrLCBLZXlzLldpbmRvd3NLZXksIEtleXMuVGFiXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBpZ25vcmUpIHtcclxuICAgICAgICAgICAgaWYgKGtleUNvZGUgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoa2V5Q29kZSA+PSBLZXlzLkYxICYmIGtleUNvZGUgPD0gS2V5cy5GMTIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGhlIGRvd24ga2V5IGlzIHVzZWQgdG8gb3BlbiBhdXRvY29tcGxldGVcclxuICAgICAgICBpZiAoa2V5Q29kZSA9PT0gS2V5cy5Eb3duICYmIGNvbnRhaW5lckRpc3BsYXllZCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0RmV0Y2goRXZlbnRUcmlnZ2VyLktleWJvYXJkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEF1dG9tYXRpY2FsbHkgbW92ZSBzY3JvbGwgYmFyIGlmIHNlbGVjdGVkIGl0ZW0gaXMgbm90IHZpc2libGVcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gdXBkYXRlU2Nyb2xsKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzZWxlY3RlZFwiKTtcclxuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IGVsZW1lbnRzWzBdIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gbWFrZSBncm91cCB2aXNpYmxlXHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nIGFzIEhUTUxEaXZFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAocHJldmlvdXMgJiYgcHJldmlvdXMuY2xhc3NOYW1lLmluZGV4T2YoXCJncm91cFwiKSAhPT0gLTEgJiYgIXByZXZpb3VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBwcmV2aW91cztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQub2Zmc2V0VG9wIDwgY29udGFpbmVyLnNjcm9sbFRvcCkge1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNjcm9sbFRvcCA9IGVsZW1lbnQub2Zmc2V0VG9wO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0Qm90dG9tID0gZWxlbWVudC5vZmZzZXRUb3AgKyBlbGVtZW50Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckJvdHRvbSA9IGNvbnRhaW5lci5zY3JvbGxUb3AgKyBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdEJvdHRvbSA+IGNvbnRhaW5lckJvdHRvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zY3JvbGxUb3AgKz0gc2VsZWN0Qm90dG9tIC0gY29udGFpbmVyQm90dG9tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VsZWN0IHRoZSBwcmV2aW91cyBpdGVtIGluIHN1Z2dlc3Rpb25zXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNlbGVjdFByZXYoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkID09PSBpdGVtc1swXSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkID09PSBpdGVtc1tpXSB8fCBpID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gaXRlbXNbaSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZWxlY3QgdGhlIG5leHQgaXRlbSBpbiBzdWdnZXN0aW9uc1xyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBzZWxlY3ROZXh0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXNlbGVjdGVkIHx8IHNlbGVjdGVkID09PSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXSkge1xyXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGl0ZW1zWzBdO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKGl0ZW1zLmxlbmd0aCAtIDEpOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkID09PSBpdGVtc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBpdGVtc1tpICsgMV07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBrZXlkb3duRXZlbnRIYW5kbGVyKGV2OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IGV2LndoaWNoIHx8IGV2LmtleUNvZGUgfHwgMDtcclxuXHJcbiAgICAgICAgaWYgKGtleUNvZGUgPT09IEtleXMuVXAgfHwga2V5Q29kZSA9PT0gS2V5cy5Eb3duIHx8IGtleUNvZGUgPT09IEtleXMuRXNjKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lcklzRGlzcGxheWVkID0gY29udGFpbmVyRGlzcGxheWVkKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoa2V5Q29kZSA9PT0gS2V5cy5Fc2MpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRhaW5lckRpc3BsYXllZCB8fCBpdGVtcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAga2V5Q29kZSA9PT0gS2V5cy5VcFxyXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZWN0UHJldigpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxlY3ROZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lcklzRGlzcGxheWVkKSB7XHJcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGtleUNvZGUgPT09IEtleXMuRW50ZXIpIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5vblNlbGVjdChzZWxlY3RlZCwgaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgY2xlYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICAgIGlmIChwcmV2ZW50U3VibWl0KSB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZvY3VzRXZlbnRIYW5kbGVyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChzaG93T25Gb2N1cykge1xyXG4gICAgICAgICAgICBzdGFydEZldGNoKEV2ZW50VHJpZ2dlci5Gb2N1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0RmV0Y2godHJpZ2dlcjogRXZlbnRUcmlnZ2VyKSB7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGUga2V5cyB3ZXJlIHByZXNzZWQsIGJlZm9yZSB3ZSBnZXQgdXBkYXRlIGZyb20gc2VydmVyLFxyXG4gICAgICAgIC8vIHRoaXMgbWF5IGNhdXNlIHJlZHJhd2luZyBvdXIgYXV0b2NvbXBsZXRlIG11bHRpcGxlIHRpbWVzIGFmdGVyIHRoZSBsYXN0IGtleSBwcmVzcy5cclxuICAgICAgICAvLyB0byBhdm9pZCB0aGlzLCB0aGUgbnVtYmVyIG9mIHRpbWVzIGtleWJvYXJkIHdhcyBwcmVzc2VkIHdpbGwgYmVcclxuICAgICAgICAvLyBzYXZlZCBhbmQgY2hlY2tlZCBiZWZvcmUgcmVkcmF3IG91ciBhdXRvY29tcGxldGUgYm94LlxyXG4gICAgICAgIGNvbnN0IHNhdmVkS2V5cHJlc3NDb3VudGVyID0gKytrZXlwcmVzc0NvdW50ZXI7XHJcblxyXG4gICAgICAgIGNvbnN0IHZhbCA9IGlucHV0LnZhbHVlO1xyXG4gICAgICAgIGlmICh2YWwubGVuZ3RoID49IG1pbkxlbiB8fCB0cmlnZ2VyID09PSBFdmVudFRyaWdnZXIuRm9jdXMpIHtcclxuICAgICAgICAgICAgY2xlYXJEZWJvdW5jZVRpbWVyKCk7XHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpOiB2b2lkIHtcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzLmZldGNoKHZhbCwgZnVuY3Rpb24oZWxlbWVudHM6IFRbXSB8IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXByZXNzQ291bnRlciA9PT0gc2F2ZWRLZXlwcmVzc0NvdW50ZXIgJiYgZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBlbGVtZW50cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBpdGVtcy5sZW5ndGggPiAwID8gaXRlbXNbMF0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIEV2ZW50VHJpZ2dlci5LZXlib2FyZCk7XHJcbiAgICAgICAgICAgIH0sIHRyaWdnZXIgPT09IEV2ZW50VHJpZ2dlci5LZXlib2FyZCA/IGRlYm91bmNlV2FpdE1zIDogMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYmx1ckV2ZW50SGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGRlbGF5IGNsZWFyLCBiZWNhdXNlIHdoZW4gd2UgY2xpY2sgb24gYW4gaXRlbSwgYmx1ciB3aWxsIGJlIGNhbGxlZCBiZWZvcmUgY2xpY2sgYW5kIHJlbW92ZSBpdGVtcyBmcm9tIERPTVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgIT09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpeGVzICMyNjogb24gbG9uZyBjbGlja3MgZm9jdXMgd2lsbCBiZSBsb3N0IGFuZCBvblNlbGVjdCBtZXRob2Qgd2lsbCBub3QgYmUgY2FsbGVkXHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uKGV2dDogRXZlbnQpIHtcclxuICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpeGVzICMzMDogYXV0b2NvbXBsZXRlIGNsb3NlcyB3aGVuIHNjcm9sbGJhciBpcyBjbGlja2VkIGluIElFXHJcbiAgICAgKiBTZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS85MjEwMjY3LzEzMTcyMzQ5XHJcbiAgICAgKi9cclxuICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4gaW5wdXQuZm9jdXMoKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgcmVtb3ZlIERPTSBlbGVtZW50cyBhbmQgY2xlYXIgZXZlbnQgaGFuZGxlcnNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBpbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZm9jdXNFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGtleWRvd25FdmVudEhhbmRsZXIpO1xyXG4gICAgICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5VXBFdmVudE5hbWUsIGtleXVwRXZlbnRIYW5kbGVyIGFzIEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QpO1xyXG4gICAgICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGJsdXJFdmVudEhhbmRsZXIpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHJlc2l6ZUV2ZW50SGFuZGxlcik7XHJcbiAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgc2Nyb2xsRXZlbnRIYW5kbGVyLCB0cnVlKTtcclxuICAgICAgICBjbGVhckRlYm91bmNlVGltZXIoKTtcclxuICAgICAgICBjbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNldHVwIGV2ZW50IGhhbmRsZXJzXHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlkb3duRXZlbnRIYW5kbGVyKTtcclxuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoa2V5VXBFdmVudE5hbWUsIGtleXVwRXZlbnRIYW5kbGVyIGFzIEV2ZW50TGlzdGVuZXJPckV2ZW50TGlzdGVuZXJPYmplY3QpO1xyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgYmx1ckV2ZW50SGFuZGxlcik7XHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZm9jdXNFdmVudEhhbmRsZXIpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgcmVzaXplRXZlbnRIYW5kbGVyKTtcclxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHNjcm9sbEV2ZW50SGFuZGxlciwgdHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkZXN0cm95XHJcbiAgICB9O1xyXG59XHJcbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImJiai1tYXNrcy9zcmMvU3RyaW5nTWFza1wiKSwgcmVxdWlyZShcImJiai1tYXNrcy9zcmMvTnVtYmVyTWFza1wiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJiYmotbWFza3Mvc3JjL1N0cmluZ01hc2tcIiwgXCJiYmotbWFza3Mvc3JjL051bWJlck1hc2tcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiSW5wdXRNYXNraW5nXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiYmJqLW1hc2tzL3NyYy9TdHJpbmdNYXNrXCIpLCByZXF1aXJlKFwiYmJqLW1hc2tzL3NyYy9OdW1iZXJNYXNrXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJCYXNpc1wiXSA9IHJvb3RbXCJCYXNpc1wiXSB8fCB7fSwgcm9vdFtcIkJhc2lzXCJdW1wiSW5wdXRNYXNraW5nXCJdID0gZmFjdG9yeShyb290W1wiQkJqXCJdW1wiTWFza3NcIl1bXCJTdHJpbmdNYXNrXCJdLCByb290W1wiQkJqXCJdW1wiTWFza3NcIl1bXCJOdW1iZXJNYXNrXCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV83X18pIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGNiNjc5ZDZiODJhNGRjNGE3YTBkIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL0NvbXBvbmVudCdcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tcG9uZW50L2luZGV4LmpzIiwiaW1wb3J0IHsgZGVjb3JhdGUsIGNyZWF0ZURlZmF1bHRTZXR0ZXIsXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMsIGdldE93bktleXMsIGJpbmQgfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xuY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSwgZ2V0UHJvdG90eXBlT2YgfSA9IE9iamVjdDtcblxubGV0IG1hcFN0b3JlO1xuXG5mdW5jdGlvbiBnZXRCb3VuZFN1cGVyKG9iaiwgZm4pIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBVc2luZyBAYXV0b2JpbmQgb24gJHtmbi5uYW1lfSgpIHJlcXVpcmVzIFdlYWtNYXAgc3VwcG9ydCBkdWUgdG8gaXRzIHVzZSBvZiBzdXBlci4ke2ZuLm5hbWV9KClcbiAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamF5cGhlbHBzL2NvcmUtZGVjb3JhdG9ycy5qcy9pc3N1ZXMvMjBgXG4gICAgKTtcbiAgfVxuXG4gIGlmICghbWFwU3RvcmUpIHtcbiAgICAgbWFwU3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgaWYgKG1hcFN0b3JlLmhhcyhvYmopID09PSBmYWxzZSkge1xuICAgIG1hcFN0b3JlLnNldChvYmosIG5ldyBXZWFrTWFwKCkpO1xuICB9XG5cbiAgY29uc3Qgc3VwZXJTdG9yZSA9IG1hcFN0b3JlLmdldChvYmopO1xuXG4gIGlmIChzdXBlclN0b3JlLmhhcyhmbikgPT09IGZhbHNlKSB7XG4gICAgc3VwZXJTdG9yZS5zZXQoZm4sIGJpbmQoZm4sIG9iaikpO1xuICB9XG5cbiAgcmV0dXJuIHN1cGVyU3RvcmUuZ2V0KGZuKTtcbn1cblxuZnVuY3Rpb24gYXV0b2JpbmRDbGFzcyhrbGFzcykge1xuICBjb25zdCBkZXNjcyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoa2xhc3MucHJvdG90eXBlKTtcbiAgY29uc3Qga2V5cyA9IGdldE93bktleXMoZGVzY3MpO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgIGNvbnN0IGRlc2MgPSBkZXNjc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBkZXNjLnZhbHVlICE9PSAnZnVuY3Rpb24nIHx8IGtleSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgZGVmaW5lUHJvcGVydHkoa2xhc3MucHJvdG90eXBlLCBrZXksIGF1dG9iaW5kTWV0aG9kKGtsYXNzLnByb3RvdHlwZSwga2V5LCBkZXNjKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXV0b2JpbmRNZXRob2QodGFyZ2V0LCBrZXksIHsgdmFsdWU6IGZuLCBjb25maWd1cmFibGUsIGVudW1lcmFibGUgfSkge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBAYXV0b2JpbmQgY2FuIG9ubHkgYmUgdXNlZCBvbiBmdW5jdGlvbnMsIG5vdDogJHtmbn1gKTtcbiAgfVxuXG4gIGNvbnN0IHsgY29uc3RydWN0b3IgfSA9IHRhcmdldDtcblxuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZSxcbiAgICBlbnVtZXJhYmxlLFxuXG4gICAgZ2V0KCkge1xuICAgICAgLy8gQ2xhc3MucHJvdG90eXBlLmtleSBsb29rdXBcbiAgICAgIC8vIFNvbWVvbmUgYWNjZXNzZXMgdGhlIHByb3BlcnR5IGRpcmVjdGx5IG9uIHRoZSBwcm90b3R5cGUgb24gd2hpY2ggaXQgaXNcbiAgICAgIC8vIGFjdHVhbGx5IGRlZmluZWQgb24sIGkuZS4gQ2xhc3MucHJvdG90eXBlLmhhc093blByb3BlcnR5KGtleSlcbiAgICAgIGlmICh0aGlzID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuXG4gICAgICAvLyBDbGFzcy5wcm90b3R5cGUua2V5IGxvb2t1cFxuICAgICAgLy8gU29tZW9uZSBhY2Nlc3NlcyB0aGUgcHJvcGVydHkgZGlyZWN0bHkgb24gYSBwcm90b3R5cGUgYnV0IGl0IHdhcyBmb3VuZFxuICAgICAgLy8gdXAgdGhlIGNoYWluLCBub3QgZGVmaW5lZCBkaXJlY3RseSBvbiBpdFxuICAgICAgLy8gaS5lLiBDbGFzcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoa2V5KSA9PSBmYWxzZSAmJiBrZXkgaW4gQ2xhc3MucHJvdG90eXBlXG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gY29uc3RydWN0b3IgJiYgZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IgPT09IGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmbjtcbiAgICAgIH1cblxuICAgICAgLy8gQXV0b2JvdW5kIG1ldGhvZCBjYWxsaW5nIHN1cGVyLnNhbWVNZXRob2QoKSB3aGljaCBpcyBhbHNvIGF1dG9ib3VuZCBhbmQgc28gb24uXG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciAhPT0gY29uc3RydWN0b3IgJiYga2V5IGluIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlKSB7XG4gICAgICAgIHJldHVybiBnZXRCb3VuZFN1cGVyKHRoaXMsIGZuKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYm91bmRGbiA9IGJpbmQoZm4sIHRoaXMpO1xuXG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgLy8gTk9UIGVudW1lcmFibGUgd2hlbiBpdCdzIGEgYm91bmQgbWV0aG9kXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogYm91bmRGblxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBib3VuZEZuO1xuICAgIH0sXG4gICAgc2V0OiBjcmVhdGVEZWZhdWx0U2V0dGVyKGtleSlcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlKGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGF1dG9iaW5kQ2xhc3MoLi4uYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGF1dG9iaW5kTWV0aG9kKC4uLmFyZ3MpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9iaW5kKC4uLmFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBoYW5kbGUoYXJndW1lbnRzKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYW5kbGUoYXJncyk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvc3JjL2F1dG9iaW5kLmpzIiwiaW1wb3J0IHsgZGVjb3JhdGUgfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xuXG5jb25zdCBHRU5FUklDX0ZVTkNUSU9OX0VSUk9SID0gJ3tjaGlsZH0gZG9lcyBub3QgcHJvcGVybHkgb3ZlcnJpZGUge3BhcmVudH0nO1xuY29uc3QgRlVOQ1RJT05fUkVHRVhQID0gL15mdW5jdGlvbiAoW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSopPyhcXChbXlxcKV0qXFwpKVtcXHNcXFNdKyQvO1xuXG5jbGFzcyBTeW50YXhFcnJvclJlcG9ydGVyIHtcbiAgcGFyZW50S2xhc3M7XG4gIGNoaWxkS2xhc3M7XG4gIHBhcmVudERlc2NyaXB0b3I7XG4gIGNoaWxkRGVzY3JpcHRvcjtcbiAgXG4gIGdldCBrZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGREZXNjcmlwdG9yLmtleTsgIFxuICB9XG4gIFxuICBnZXQgcGFyZW50Tm90YXRpb24oKSB7XG4gICAgcmV0dXJuIGAke3RoaXMucGFyZW50S2xhc3MuY29uc3RydWN0b3IubmFtZX0jJHt0aGlzLnBhcmVudFByb3BlcnR5U2lnbmF0dXJlfWA7XG4gIH1cblxuICBnZXQgY2hpbGROb3RhdGlvbigpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jaGlsZEtsYXNzLmNvbnN0cnVjdG9yLm5hbWV9IyR7dGhpcy5jaGlsZFByb3BlcnR5U2lnbmF0dXJlfWA7XG4gIH1cbiAgXG4gIGdldCBwYXJlbnRUb3BpYygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VG9waWModGhpcy5wYXJlbnREZXNjcmlwdG9yKTtcbiAgfVxuICBcbiAgZ2V0IGNoaWxkVG9waWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFRvcGljKHRoaXMuY2hpbGREZXNjcmlwdG9yKTtcbiAgfVxuICBcbiAgX2dldFRvcGljKGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoZGVzY3JpcHRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDsgIFxuICAgIH1cbiAgICBcbiAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICByZXR1cm4gZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCdnZXQnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIHJldHVybiBkZXNjcmlwdG9yLmdldDtcbiAgICB9XG4gICAgXG4gICAgaWYgKCdzZXQnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIHJldHVybiBkZXNjcmlwdG9yLnNldDtcbiAgICB9XG4gIH1cbiAgXG4gIGdldCBwYXJlbnRQcm9wZXJ0eVNpZ25hdHVyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZXh0cmFjdFRvcGljU2lnbmF0dXJlKHRoaXMucGFyZW50VG9waWMpOyBcbiAgfVxuICBcbiAgZ2V0IGNoaWxkUHJvcGVydHlTaWduYXR1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2V4dHJhY3RUb3BpY1NpZ25hdHVyZSh0aGlzLmNoaWxkVG9waWMpOyBcbiAgfVxuICBcbiAgX2V4dHJhY3RUb3BpY1NpZ25hdHVyZSh0b3BpYykge1xuICAgIHN3aXRjaCAodHlwZW9mIHRvcGljKSB7XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHJldHVybiB0aGlzLl9leHRyYWN0RnVuY3Rpb25TaWduYXR1cmUodG9waWMpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5O1xuICAgIH1cbiAgfVxuICBcbiAgX2V4dHJhY3RGdW5jdGlvblNpZ25hdHVyZShmbikge1xuICAgIHJldHVybiBmblxuICAgICAgLnRvU3RyaW5nKClcbiAgICAgIC5yZXBsYWNlKFxuICAgICAgICBGVU5DVElPTl9SRUdFWFAsXG4gICAgICAgIChtYXRjaCwgbmFtZSA9IHRoaXMua2V5LCBwYXJhbXMpID0+IG5hbWUgKyBwYXJhbXNcbiAgICAgICk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnRLbGFzcywgY2hpbGRLbGFzcywgcGFyZW50RGVzY3JpcHRvciwgY2hpbGREZXNjcmlwdG9yKSB7XG4gICAgdGhpcy5wYXJlbnRLbGFzcyA9IHBhcmVudEtsYXNzO1xuICAgIHRoaXMuY2hpbGRLbGFzcyA9IGNoaWxkS2xhc3M7XG4gICAgdGhpcy5wYXJlbnREZXNjcmlwdG9yID0gcGFyZW50RGVzY3JpcHRvcjtcbiAgICB0aGlzLmNoaWxkRGVzY3JpcHRvciA9IGNoaWxkRGVzY3JpcHRvcjtcbiAgfVxuICBcbiAgYXNzZXJ0KGNvbmRpdGlvbiwgbXNnID0gJycpIHtcbiAgICBpZiAoY29uZGl0aW9uICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLmVycm9yKEdFTkVSSUNfRlVOQ1RJT05fRVJST1IgKyBtc2cpO1xuICAgIH1cbiAgfVxuICBcbiAgZXJyb3IobXNnKSB7XG4gICAgbXNnID0gbXNnXG4gICAgICAvLyBSZXBsYWNlIGxhemlseSwgYmVjYXVzZSB0aGV5IGFjdHVhbGx5IG1pZ2h0IG5vdFxuICAgICAgLy8gYmUgYXZhaWxhYmxlIGluIGFsbCBjYXNlc1xuICAgICAgLnJlcGxhY2UoJ3twYXJlbnR9JywgbSA9PiB0aGlzLnBhcmVudE5vdGF0aW9uKVxuICAgICAgLnJlcGxhY2UoJ3tjaGlsZH0nLCBtID0+IHRoaXMuY2hpbGROb3RhdGlvbik7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKG1zZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVzY3JpcHRvclR5cGUoZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgIHJldHVybiAnZGF0YSc7XG4gIH1cblxuICBpZiAoZGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgnZ2V0JykgfHwgZGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgnc2V0JykpIHtcbiAgICByZXR1cm4gJ2FjY2Vzc29yJztcbiAgfVxuXG4gIC8vIElmIG5vbmUgb2YgdGhlbSBleGlzdCwgYnJvd3NlcnMgdHJlYXQgaXQgYXNcbiAgLy8gYSBkYXRhIGRlc2NyaXB0b3Igd2l0aCBhIHZhbHVlIG9mIGB1bmRlZmluZWRgXG4gIHJldHVybiAnZGF0YSc7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRnVuY3Rpb25TaWduYXR1cmVzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKSB7XG4gIHJlcG9ydGVyLmFzc2VydChwYXJlbnQubGVuZ3RoID09PSBjaGlsZC5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBjaGVja0RhdGFEZXNjcmlwdG9ycyhwYXJlbnQsIGNoaWxkLCByZXBvcnRlcikge1xuICBjb25zdCBwYXJlbnRWYWx1ZVR5cGUgPSB0eXBlb2YgcGFyZW50LnZhbHVlO1xuICBjb25zdCBjaGlsZFZhbHVlVHlwZSA9IHR5cGVvZiBjaGlsZC52YWx1ZTtcbiAgXG4gIGlmIChwYXJlbnRWYWx1ZVR5cGUgPT09ICd1bmRlZmluZWQnICYmIGNoaWxkVmFsdWVUeXBlID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGNsYXNzIHByb3BlcnRpZXMgY2FuIGJlIGFueSBleHByZXNzaW9uLCB3aGljaCBpc24ndCByYW4gdW50aWwgdGhlXG4gICAgLy8gdGhlIGluc3RhbmNlIGlzIGNyZWF0ZWQsIHNvIHdlIGNhbid0IHJlbGlhYmx5IGdldCB0eXBlIGluZm9ybWF0aW9uXG4gICAgLy8gZm9yIHRoZW0geWV0IChwZXIgc3BlYykuIFBlcmhhcHMgd2hlbiBCYWJlbCBpbmNsdWRlcyBmbG93LXR5cGUgaW5mb1xuICAgIC8vIGluIHJ1bnRpbWU/IFRyaWVkIHJlZ2V4IHNvbHV0aW9ucywgYnV0IHN1cGVyIGhhY2t5IGFuZCBvbmx5IGZlYXNpYmxlXG4gICAgLy8gb24gcHJpbWl0aXZlcywgd2hpY2ggaXMgY29uZnVzaW5nIGZvciB1c2FnZS4uLlxuICAgIHJlcG9ydGVyLmVycm9yKGBkZXNjcmlwdG9yIHZhbHVlcyBhcmUgYm90aCB1bmRlZmluZWQuIChjbGFzcyBwcm9wZXJ0aWVzIGFyZSBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQpJ2ApO1xuICB9XG4gIFxuICBpZiAocGFyZW50VmFsdWVUeXBlICE9PSBjaGlsZFZhbHVlVHlwZSkge1xuICAgIGNvbnN0IGlzRnVuY3Rpb25PdmVyVW5kZWZpbmVkID0gKGNoaWxkVmFsdWVUeXBlID09PSAnZnVuY3Rpb24nICYmIHBhcmVudFZhbHVlVHlwZSA9PT0gdW5kZWZpbmVkKTtcbiAgICAvLyBFdmVuIHRob3VnaCB3ZSBkb24ndCBzdXBwb3J0IGNsYXNzIHByb3BlcnRpZXMsIHRoaXNcbiAgICAvLyB3aWxsIHN0aWxsIGhhbmRsZSBtb3JlIHRoYW4ganVzdCBmdW5jdGlvbnMsIGp1c3QgaW4gY2FzZS5cbiAgICAvLyBTaGFkb3dpbmcgYW4gdW5kZWZpbmVkIHZhbHVlIGlzIGFuIGVycm9yIGlmIHRoZSBpbmhlcml0ZWRcbiAgICAvLyB2YWx1ZSB3YXMgdW5kZWZpbmVkICh1c3VhbGx5IGEgY2xhc3MgcHJvcGVydHksIG5vdCBhIG1ldGhvZClcbiAgICBpZiAoaXNGdW5jdGlvbk92ZXJVbmRlZmluZWQgfHwgcGFyZW50VmFsdWVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcG9ydGVyLmVycm9yKGB2YWx1ZSB0eXBlcyBkbyBub3QgbWF0Y2guIHtwYXJlbnR9IGlzIFwiJHtwYXJlbnRWYWx1ZVR5cGV9XCIsIHtjaGlsZH0gaXMgXCIke2NoaWxkVmFsdWVUeXBlfVwiYCk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBTd2l0Y2gsIGluIHByZXBhcmF0aW9uIGZvciBzdXBwb3J0aW5nIG1vcmUgdHlwZXNcbiAgc3dpdGNoIChjaGlsZFZhbHVlVHlwZSkge1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIGNoZWNrRnVuY3Rpb25TaWduYXR1cmVzKHBhcmVudC52YWx1ZSwgY2hpbGQudmFsdWUsIHJlcG9ydGVyKTtcbiAgICAgIGJyZWFrO1xuICAgICAgXG4gICAgZGVmYXVsdDpcbiAgICAgIHJlcG9ydGVyLmVycm9yKGBVbmV4cGVjdGVkIGVycm9yLiBQbGVhc2UgZmlsZSBhIGJ1ZyB3aXRoOiB7cGFyZW50fSBpcyBcIiR7cGFyZW50VmFsdWVUeXBlfVwiLCB7Y2hpbGR9IGlzIFwiJHtjaGlsZFZhbHVlVHlwZX1cImApO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tBY2Nlc3NvckRlc2NyaXB0b3JzKHBhcmVudCwgY2hpbGQsIHJlcG9ydGVyKSB7XG4gIGNvbnN0IHBhcmVudEhhc0dldHRlciA9IHR5cGVvZiBwYXJlbnQuZ2V0ID09PSAnZnVuY3Rpb24nO1xuICBjb25zdCBjaGlsZEhhc0dldHRlciA9IHR5cGVvZiBjaGlsZC5nZXQgPT09ICdmdW5jdGlvbic7XG4gIGNvbnN0IHBhcmVudEhhc1NldHRlciA9IHR5cGVvZiBwYXJlbnQuc2V0ID09PSAnZnVuY3Rpb24nO1xuICBjb25zdCBjaGlsZEhhc1NldHRlciA9IHR5cGVvZiBjaGlsZC5zZXQgPT09ICdmdW5jdGlvbic7XG4gIFxuICBpZiAocGFyZW50SGFzR2V0dGVyIHx8IGNoaWxkSGFzR2V0dGVyKSB7XG4gICAgaWYgKCFwYXJlbnRIYXNHZXR0ZXIgJiYgcGFyZW50SGFzU2V0dGVyKSB7XG4gICAgICByZXBvcnRlci5lcnJvcihge3BhcmVudH0gaXMgc2V0dGVyIGJ1dCB7Y2hpbGR9IGlzIGdldHRlcmApO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIWNoaWxkSGFzR2V0dGVyICYmIGNoaWxkSGFzU2V0dGVyKSB7XG4gICAgICByZXBvcnRlci5lcnJvcihge3BhcmVudH0gaXMgZ2V0dGVyIGJ1dCB7Y2hpbGR9IGlzIHNldHRlcmApO1xuICAgIH1cbiAgICBcbiAgICBjaGVja0Z1bmN0aW9uU2lnbmF0dXJlcyhwYXJlbnQuZ2V0LCBjaGlsZC5nZXQsIHJlcG9ydGVyKTtcbiAgfVxuICBcbiAgaWYgKHBhcmVudEhhc1NldHRlciB8fCBjaGlsZEhhc1NldHRlcikge1xuICAgIGlmICghcGFyZW50SGFzU2V0dGVyICYmIHBhcmVudEhhc0dldHRlcikge1xuICAgICAgcmVwb3J0ZXIuZXJyb3IoYHtwYXJlbnR9IGlzIGdldHRlciBidXQge2NoaWxkfSBpcyBzZXR0ZXJgKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFjaGlsZEhhc1NldHRlciAmJiBjaGlsZEhhc0dldHRlcikge1xuICAgICAgcmVwb3J0ZXIuZXJyb3IoYHtwYXJlbnR9IGlzIHNldHRlciBidXQge2NoaWxkfSBpcyBnZXR0ZXJgKTtcbiAgICB9XG4gICAgXG4gICAgY2hlY2tGdW5jdGlvblNpZ25hdHVyZXMocGFyZW50LnNldCwgY2hpbGQuc2V0LCByZXBvcnRlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tEZXNjcmlwdG9ycyhwYXJlbnQsIGNoaWxkLCByZXBvcnRlcikge1xuICBjb25zdCBwYXJlbnRUeXBlID0gZ2V0RGVzY3JpcHRvclR5cGUocGFyZW50KTtcbiAgY29uc3QgY2hpbGRUeXBlID0gZ2V0RGVzY3JpcHRvclR5cGUoY2hpbGQpO1xuXG4gIGlmIChwYXJlbnRUeXBlICE9PSBjaGlsZFR5cGUpIHtcbiAgICByZXBvcnRlci5lcnJvcihgZGVzY3JpcHRvciB0eXBlcyBkbyBub3QgbWF0Y2guIHtwYXJlbnR9IGlzIFwiJHtwYXJlbnRUeXBlfVwiLCB7Y2hpbGR9IGlzIFwiJHtjaGlsZFR5cGV9XCJgKTtcbiAgfVxuXG4gIHN3aXRjaCAoY2hpbGRUeXBlKSB7XG4gICAgY2FzZSAnZGF0YSc6XG4gICAgICBjaGVja0RhdGFEZXNjcmlwdG9ycyhwYXJlbnQsIGNoaWxkLCByZXBvcnRlcik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2FjY2Vzc29yJzpcbiAgICAgIGNoZWNrQWNjZXNzb3JEZXNjcmlwdG9ycyhwYXJlbnQsIGNoaWxkLCByZXBvcnRlcik7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5jb25zdCBzdWdnZXN0aW9uVHJhbnNmb3JtcyA9IFtcbiAga2V5ID0+IGtleS50b0xvd2VyQ2FzZSgpLFxuICBrZXkgPT4ga2V5LnRvVXBwZXJDYXNlKCksXG4gIGtleSA9PiBrZXkgKyAncycsXG4gIGtleSA9PiBrZXkuc2xpY2UoMCwgLTEpLFxuICBrZXkgPT4ga2V5LnNsaWNlKDEsIGtleS5sZW5ndGgpLFxuXTtcblxuZnVuY3Rpb24gZmluZFBvc3NpYmxlQWx0ZXJuYXRpdmVzKHN1cGVyS2xhc3MsIGtleSkge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IHN1Z2dlc3Rpb25UcmFuc2Zvcm1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IGZuID0gc3VnZ2VzdGlvblRyYW5zZm9ybXNbaV07XG4gICAgY29uc3Qgc3VnZ2VzdGlvbiA9IGZuKGtleSk7XG5cbiAgICBpZiAoc3VnZ2VzdGlvbiBpbiBzdXBlcktsYXNzKSB7XG4gICAgICByZXR1cm4gc3VnZ2VzdGlvbjtcbiAgICB9XG4gIH1cbiAgXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGRlc2NyaXB0b3Iua2V5ID0ga2V5O1xuICBjb25zdCBzdXBlcktsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gIGNvbnN0IHN1cGVyRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3VwZXJLbGFzcywga2V5KTtcbiAgY29uc3QgcmVwb3J0ZXIgPSBuZXcgU3ludGF4RXJyb3JSZXBvcnRlcihzdXBlcktsYXNzLCB0YXJnZXQsIHN1cGVyRGVzY3JpcHRvciwgZGVzY3JpcHRvcik7XG4gIFxuICBpZiAoc3VwZXJEZXNjcmlwdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzdWdnZXN0ZWRLZXkgPSBmaW5kUG9zc2libGVBbHRlcm5hdGl2ZXMoc3VwZXJLbGFzcywga2V5KTtcbiAgICBjb25zdCBzdWdnZXN0aW9uID0gc3VnZ2VzdGVkS2V5ID8gYFxcblxcbiAgRGlkIHlvdSBtZWFuIFwiJHtzdWdnZXN0ZWRLZXl9XCI/YCA6ICcnO1xuICAgIHJlcG9ydGVyLmVycm9yKGBObyBkZXNjcmlwdG9yIG1hdGNoaW5nIHtjaGlsZH0gd2FzIGZvdW5kIG9uIHRoZSBwcm90b3R5cGUgY2hhaW4uJHtzdWdnZXN0aW9ufWApO1xuICB9XG4gIFxuICBjaGVja0Rlc2NyaXB0b3JzKHN1cGVyRGVzY3JpcHRvciwgZGVzY3JpcHRvciwgcmVwb3J0ZXIpO1xuICBcbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG92ZXJyaWRlKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGFyZ3MpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtZGVjb3JhdG9ycy9zcmMvb3ZlcnJpZGUuanMiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMiLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCJpbXBvcnQgbGF6eUluaXRpYWxpemUgZnJvbSAnLi4vbGF6eS1pbml0aWFsaXplJztcblxuY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzLCBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgfSA9IE9iamVjdDtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGVzY3JpcHRvcihkZXNjKSB7XG4gIGlmICghZGVzYyB8fCAhZGVzYy5oYXNPd25Qcm9wZXJ0eSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBbJ3ZhbHVlJywgJ2luaXRpYWxpemVyJywgJ2dldCcsICdzZXQnXTtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKGRlc2MuaGFzT3duUHJvcGVydHkoa2V5c1tpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29yYXRlKGhhbmRsZURlc2NyaXB0b3IsIGVudHJ5QXJncykge1xuICBpZiAoaXNEZXNjcmlwdG9yKGVudHJ5QXJnc1tlbnRyeUFyZ3MubGVuZ3RoIC0gMV0pKSB7XG4gICAgcmV0dXJuIGhhbmRsZURlc2NyaXB0b3IoLi4uZW50cnlBcmdzLCBbXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBoYW5kbGVEZXNjcmlwdG9yKC4uLkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksIGVudHJ5QXJncyk7XG4gICAgfTtcbiAgfVxufVxuXG5jbGFzcyBNZXRhIHtcbiAgQGxhenlJbml0aWFsaXplXG4gIGRlYm91bmNlVGltZW91dElkcyA9IHt9O1xuXG4gIEBsYXp5SW5pdGlhbGl6ZVxuICB0aHJvdHRsZVRpbWVvdXRJZHMgPSB7fTtcblxuICBAbGF6eUluaXRpYWxpemVcbiAgdGhyb3R0bGVQcmV2aW91c1RpbWVzdGFtcHMgPSB7fTtcblxuICBAbGF6eUluaXRpYWxpemVcbiAgdGhyb3R0bGVUcmFpbGluZ0FyZ3MgPSBudWxsO1xuXG4gIEBsYXp5SW5pdGlhbGl6ZVxuICBwcm9maWxlTGFzdFJhbiA9IG51bGw7XG59XG5cbmNvbnN0IE1FVEFfS0VZID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpXG4gID8gU3ltYm9sKCdfX2NvcmVfZGVjb3JhdG9yc19fJylcbiAgOiAnX19jb3JlX2RlY29yYXRvcnNfXyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXRhRm9yKG9iaikge1xuICBpZiAob2JqLmhhc093blByb3BlcnR5KE1FVEFfS0VZKSA9PT0gZmFsc2UpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmosIE1FVEFfS0VZLCB7XG4gICAgICAvLyBEZWZhdWx0czogTk9UIGVudW1lcmFibGUsIGNvbmZpZ3VyYWJsZSwgb3Igd3JpdGFibGVcbiAgICAgIHZhbHVlOiBuZXcgTWV0YSgpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb2JqW01FVEFfS0VZXTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldE93bktleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbiAgICA/IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KVxuICAgICAgICAgIC5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCkpO1xuICAgICAgfVxuICAgIDogZ2V0T3duUHJvcGVydHlOYW1lcztcblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopIHtcbiAgY29uc3QgZGVzY3MgPSB7fTtcblxuICBnZXRPd25LZXlzKG9iaikuZm9yRWFjaChcbiAgICBrZXkgPT4gKGRlc2NzW2tleV0gPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpKVxuICApO1xuXG4gIHJldHVybiBkZXNjcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRTZXR0ZXIoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZXQobmV3VmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIC8vIElTIGVudW1lcmFibGUgd2hlbiByZWFzc2lnbmVkIGJ5IHRoZSBvdXRzaWRlIHdvcmRcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICB9KTtcblxuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmQoZm4sIGNvbnRleHQpIHtcbiAgaWYgKGZuLmJpbmQpIHtcbiAgICByZXR1cm4gZm4uYmluZChjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gX19hdXRvYmluZF9fKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgd2FybiA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ29iamVjdCcgfHwgIWNvbnNvbGUgfHwgdHlwZW9mIGNvbnNvbGUud2FybiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiAoKSA9PiB7fTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmluZChjb25zb2xlLndhcm4sIGNvbnNvbGUpO1xuICB9XG59KSgpO1xuXG5jb25zdCBzZWVuRGVwcmVjYXRpb25zID0ge307XG5leHBvcnQgZnVuY3Rpb24gaW50ZXJuYWxEZXByZWNhdGlvbihtc2cpIHtcbiAgaWYgKHNlZW5EZXByZWNhdGlvbnNbbXNnXSAhPT0gdHJ1ZSkge1xuICAgIHNlZW5EZXByZWNhdGlvbnNbbXNnXSA9IHRydWU7XG4gICAgd2FybignREVQUkVDQVRJT046ICcgKyBtc2cpO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1kZWNvcmF0b3JzL3NyYy9wcml2YXRlL3V0aWxzLmpzIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3ltYm9sLmpzIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5TGlrZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtYWdncmlkLWNvbXBvbmVudHMgbGliLlxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxuICpcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgQm9vbGVhblN3aXRjaCBmcm9tICcuL0Jvb2xlYW5Td2l0Y2gnXG5cbmV4cG9ydCBkZWZhdWx0IEJvb2xlYW5Td2l0Y2hcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Cb29sZWFuU3dpdGNoL2luZGV4LmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IFRlbXBsYXRlUmVuZGVyZXIgZnJvbSAnLi9UZW1wbGF0ZVJlbmRlcmVyJ1xuXG5leHBvcnQgZGVmYXVsdCBUZW1wbGF0ZVJlbmRlcmVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVGVtcGxhdGVSZW5kZXJlci9pbmRleC5qcyIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ25WYWx1ZS5qcyIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgZnVuYyh7fSwgJycsIHt9KTtcbiAgICByZXR1cm4gZnVuYztcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZVByb3BlcnR5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGdW5jdGlvbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoKGUpIHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxyXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXHJcblx0XHRnID0gd2luZG93O1xyXG59XHJcblxyXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXHJcbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXHJcbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZztcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBvdmVyUmVzdCBmcm9tICcuL19vdmVyUmVzdC5qcyc7XG5pbXBvcnQgc2V0VG9TdHJpbmcgZnJvbSAnLi9fc2V0VG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVJlc3Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUmVzdC5qcyIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlkZW50aXR5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pZGVudGl0eS5qcyIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXBwbHk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcHBseS5qcyIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc0luZGV4IGZyb20gJy4vX2lzSW5kZXguanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIG9iamVjdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gIGlmICh0eXBlID09ICdudW1iZXInXG4gICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgKSB7XG4gICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSXRlcmF0ZWVDYWxsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJdGVyYXRlZUNhbGwuanMiLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTGVuZ3RoO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0xlbmd0aC5qcyIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzSW5kZXguanMiLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xyXG5cdGlmKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vICh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzUHJvdG90eXBlLmpzIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaXNQbGFpbk9iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBkb21FeGNUYWcgPSAnW29iamVjdCBET01FeGNlcHRpb25dJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBlcnJvciBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Vycm9yKG5ldyBFcnJvcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Vycm9yKEVycm9yKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXJyb3IodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgKHR5cGVvZiB2YWx1ZS5tZXNzYWdlID09ICdzdHJpbmcnICYmIHR5cGVvZiB2YWx1ZS5uYW1lID09ICdzdHJpbmcnICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRXJyb3I7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzRXJyb3IuanMiLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlckFyZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX292ZXJBcmcuanMiLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheU1hcDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwiLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbnZhciByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbmV4cG9ydCBkZWZhdWx0IHJlSW50ZXJwb2xhdGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUludGVycG9sYXRlLmpzIiwiaW1wb3J0IGJhc2VUb1N0cmluZyBmcm9tICcuL19iYXNlVG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU3RyaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1N0cmluZy5qcyIsImltcG9ydCB7IGRlY29yYXRlIH0gZnJvbSAnLi9wcml2YXRlL3V0aWxzJztcblxuZnVuY3Rpb24gaGFuZGxlRGVzY3JpcHRvcih0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWFkb25seSguLi5hcmdzKSB7XG4gIHJldHVybiBkZWNvcmF0ZShoYW5kbGVEZXNjcmlwdG9yLCBhcmdzKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvc3JjL3JlYWRvbmx5LmpzIiwiaW1wb3J0IHR6UGFyc2VUaW1lem9uZSBmcm9tICcuLi9fbGliL3R6UGFyc2VUaW1lem9uZSdcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSAnZGF0ZS1mbnMvZXNtL3N1Yk1pbGxpc2Vjb25kcydcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlJ1xuXG4vKipcbiAqIEBuYW1lIHV0Y1RvWm9uZWRUaW1lXG4gKiBAY2F0ZWdvcnkgVGltZSBab25lIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCBhIGRhdGUvdGltZSByZXByZXNlbnRpbmcgbG9jYWwgdGltZSBpbiBhIGdpdmVuIHRpbWUgem9uZSBmcm9tIHRoZSBVVEMgZGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIGRhdGUgaW5zdGFuY2Ugd2l0aCB2YWx1ZXMgcmVwcmVzZW50aW5nIHRoZSBsb2NhbCB0aW1lIGluIHRoZSB0aW1lIHpvbmVcbiAqIHNwZWNpZmllZCBvZiB0aGUgVVRDIHRpbWUgZnJvbSB0aGUgZGF0ZSBwcm92aWRlZC4gSW4gb3RoZXIgd29yZHMsIHdoZW4gdGhlIG5ldyBkYXRlXG4gKiBpcyBmb3JtYXR0ZWQgaXQgd2lsbCBzaG93IHRoZSBlcXVpdmFsZW50IGhvdXJzIGluIHRoZSB0YXJnZXQgdGltZSB6b25lIHJlZ2FyZGxlc3NcbiAqIG9mIHRoZSBjdXJyZW50IHN5c3RlbSB0aW1lIHpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB3aXRoIHRoZSByZWxldmFudCBVVEMgdGltZVxuICogQHBhcmFtIHtTdHJpbmd9IHRpbWVab25lIC0gdGhlIHRpbWUgem9uZSB0byBnZXQgbG9jYWwgdGltZSBmb3IsIGNhbiBiZSBhbiBvZmZzZXQgb3IgSUFOQSB0aW1lIHpvbmVcbiAqIEBwYXJhbSB7T3B0aW9uc1dpdGhUWn0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnMuIFNlZSBbT3B0aW9uc117QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9PcHRpb25zfVxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHBhc3NlZCB0byBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBlcXVpdmFsZW50IHRpbWUgaW4gdGhlIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSW4gSnVuZSAxMGFtIFVUQyBpcyA2YW0gaW4gTmV3IFlvcmsgKC0wNDowMClcbiAqIGNvbnN0IHJlc3VsdCA9IHV0Y1RvWm9uZWRUaW1lKCcyMDE0LTA2LTI1VDEwOjAwOjAwLjAwMFonLCAnQW1lcmljYS9OZXdfWW9yaycpXG4gKiAvLz0+IEp1biAyNSAyMDE0IDA2OjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHV0Y1RvWm9uZWRUaW1lKGRpcnR5RGF0ZSwgdGltZVpvbmUsIG9wdGlvbnMpIHtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlLCBvcHRpb25zKVxuXG4gIC8vIFRoaXMgZGF0ZSBoYXMgdGhlIFVUQyB0aW1lIHZhbHVlcyBvZiB0aGUgaW5wdXQgZGF0ZSBhdCB0aGUgc3lzdGVtIHRpbWUgem9uZVxuICB2YXIgdXRjRGF0ZSA9IG5ldyBEYXRlKFxuICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICBkYXRlLmdldFVUQ01vbnRoKCksXG4gICAgZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgZGF0ZS5nZXRVVENIb3VycygpLFxuICAgIGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgIGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgIGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgKVxuICAvLyBXZSBqdXN0IG5lZWQgdG8gYXBwbHkgdGhlIG9mZnNldCBpbmRpY2F0ZWQgYnkgdGhlIHRpbWUgem9uZSB0byB0aGlzIGxvY2FsaXplZCBkYXRlXG4gIHZhciBvZmZzZXRNaWxsaXNlY29uZHMgPSB0elBhcnNlVGltZXpvbmUodGltZVpvbmUsIHV0Y0RhdGUpXG5cbiAgcmV0dXJuIG9mZnNldE1pbGxpc2Vjb25kc1xuICAgID8gc3ViTWlsbGlzZWNvbmRzKHV0Y0RhdGUsIG9mZnNldE1pbGxpc2Vjb25kcylcbiAgICA6IHV0Y0RhdGVcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9lc20vdXRjVG9ab25lZFRpbWUvaW5kZXguanMiLCJpbXBvcnQgdHpUb2tlbml6ZURhdGUgZnJvbSAnLi4vdHpUb2tlbml6ZURhdGUvaW5kZXguanMnXG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDBcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDBcblxudmFyIHBhdHRlcm5zID0ge1xuICB0aW1lem9uZTogLyhbWistXS4qKSQvLFxuICB0aW1lem9uZVo6IC9eKFopJC8sXG4gIHRpbWV6b25lSEg6IC9eKFsrLV0pKFxcZHsyfSkkLyxcbiAgdGltZXpvbmVISE1NOiAvXihbKy1dKShcXGR7Mn0pOj8oXFxkezJ9KSQvLFxuICB0aW1lem9uZUlBTkE6IC8oVVRDfCg/OlthLXpBLVpdK1xcL1thLXpBLVpfXSsoPzpcXC9bYS16QS1aX10rKT8pKSQvXG59XG5cbi8vIFBhcnNlIHZhcmlvdXMgdGltZSB6b25lIG9mZnNldCBmb3JtYXRzIHRvIGFuIG9mZnNldCBpbiBtaWxsaXNlY29uZHNcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHR6UGFyc2VUaW1lem9uZSh0aW1lem9uZVN0cmluZywgZGF0ZSkge1xuICB2YXIgdG9rZW5cbiAgdmFyIGFic29sdXRlT2Zmc2V0XG5cbiAgLy8gWlxuICB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lWi5leGVjKHRpbWV6b25lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgdmFyIGhvdXJzXG5cbiAgLy8gwrFoaFxuICB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lSEguZXhlYyh0aW1lem9uZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgaG91cnMgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXG5cbiAgICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMpKSB7XG4gICAgICByZXR1cm4gTmFOXG4gICAgfVxuXG4gICAgYWJzb2x1dGVPZmZzZXQgPSBob3VycyAqIE1JTExJU0VDT05EU19JTl9IT1VSXG4gICAgcmV0dXJuIHRva2VuWzFdID09PSAnKycgPyAtYWJzb2x1dGVPZmZzZXQgOiBhYnNvbHV0ZU9mZnNldFxuICB9XG5cbiAgLy8gwrFoaDptbSBvciDCsWhobW1cbiAgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZUhITU0uZXhlYyh0aW1lem9uZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgaG91cnMgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXG4gICAgdmFyIG1pbnV0ZXMgPSBwYXJzZUludCh0b2tlblszXSwgMTApXG5cbiAgICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgICByZXR1cm4gTmFOXG4gICAgfVxuXG4gICAgYWJzb2x1dGVPZmZzZXQgPVxuICAgICAgaG91cnMgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUiArIG1pbnV0ZXMgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFXG4gICAgcmV0dXJuIHRva2VuWzFdID09PSAnKycgPyAtYWJzb2x1dGVPZmZzZXQgOiBhYnNvbHV0ZU9mZnNldFxuICB9XG5cbiAgLy8gSUFOQSB0aW1lIHpvbmVcbiAgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZUlBTkEuZXhlYyh0aW1lem9uZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgLy8gdmFyIFtmWWVhciwgZk1vbnRoLCBmRGF5LCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF0gPSB0elRva2VuaXplRGF0ZShkYXRlLCB0aW1lem9uZVN0cmluZylcbiAgICB2YXIgdG9rZW5zID0gdHpUb2tlbml6ZURhdGUoZGF0ZSwgdGltZXpvbmVTdHJpbmcpXG4gICAgdmFyIGFzVVRDID0gRGF0ZS5VVEMoXG4gICAgICB0b2tlbnNbMF0sXG4gICAgICB0b2tlbnNbMV0gLSAxLFxuICAgICAgdG9rZW5zWzJdLFxuICAgICAgdG9rZW5zWzNdLFxuICAgICAgdG9rZW5zWzRdLFxuICAgICAgdG9rZW5zWzVdXG4gICAgKVxuICAgIHZhciB0aW1lc3RhbXBXaXRoTXNaZXJvZWQgPSBkYXRlLmdldFRpbWUoKSAtIChkYXRlLmdldFRpbWUoKSAlIDEwMDApXG4gICAgcmV0dXJuIC0oYXNVVEMgLSB0aW1lc3RhbXBXaXRoTXNaZXJvZWQpXG4gIH1cblxuICByZXR1cm4gMFxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWV6b25lKGhvdXJzLCBtaW51dGVzKSB7XG4gIGlmIChtaW51dGVzICE9IG51bGwgJiYgKG1pbnV0ZXMgPCAwIHx8IG1pbnV0ZXMgPiA1OSkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMtdHovZXNtL19saWIvdHpQYXJzZVRpbWV6b25lL2luZGV4LmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IHsgRXZlbnRzTWl4aW4sIHdpdGhFdmVudHNNaXhpbiB9IGZyb20gJy4vRXZlbnRzTWl4aW4nXG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50c01peGluXG5leHBvcnQgeyB3aXRoRXZlbnRzTWl4aW4gfVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0V2ZW50c01peGluL2luZGV4LmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IERhdGVUaW1lSW5wdXQgZnJvbSAnLi9EYXRlVGltZUlucHV0J1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZUlucHV0XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvRGF0ZVRpbWVJbnB1dC9pbmRleC5qcyIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWlucHV0LW1hc2tpbmcgbGliLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSAnLi9UZXh0SW5wdXQnXHJcbmltcG9ydCBOdW1iZXJJbnB1dCBmcm9tICcuL051bWJlcklucHV0J1xyXG5cclxuZXhwb3J0IHsgVGV4dElucHV0ICwgTnVtYmVySW5wdXR9XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBCb29sZWFuRWRpdG9yIGZyb20gJy4vQm9vbGVhbkVkaXRvcidcblxuZXhwb3J0IGRlZmF1bHQgQm9vbGVhbkVkaXRvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0Jvb2xlYW5FZGl0b3IvaW5kZXguanMiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtYWdncmlkLWNvbXBvbmVudHMgbGliLlxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxuICpcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCdcbmltcG9ydCBCb29sZWFuU3dpdGNoIGZyb20gJy4uL0Jvb2xlYW5Td2l0Y2gnXG5cbi8qKlxuICogQm9vbGVhbnMgRWRpdG9yXG4gKlxuICogSGFuZGxlIGJvb2xlYW4gdmFsdWVzIEVkaXRpbmdcbiAqXG4gKiAjIyBPcHRpb25zXG4gKlxuICogfCBOYW1lICAgICAgICAgICAgICAgICAgXHR8IERlZmF1bHQgICAgIFx0fCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHR8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0fDotLS0tLS0tLS0tLS0tOnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgKipib29sZWFuVXNlZFRydWVWYWx1ZSoqICAgfCB1bmRlZmluZWQgICAgfCB0aGUgdmFsdWUgdG8gcmV0dXJuIHdoZW4gdGhlIGVkaXRvciBjaGFuZ2VzIHRoZSBjdXJyZW50IGNlbGwgdmFsdWUgdG8gdHJ1ZS4gaW4gY2FzZSBpdCBpcyB1bmRlZmluZWQgdGhlbiB3ZSB1c2UgdGhlIGZpcnN0IGl0ZW0gaW4gKipib29sZWFuVHJ1ZVZhbHVlW10qKlxuICogfCAqKmJvb2xlYW5Vc2VkRmFsc2VWYWx1ZSoqICAgfCB1bmRlZmluZWQgICAgfCB0aGUgdmFsdWUgdG8gcmV0dXJuIHdoZW4gdGhlIGVkaXRvciBjaGFuZ2VzIHRoZSBjdXJyZW50IGNlbGwgdmFsdWUgdG8gZmFsc2UuIGluIGNhc2UgaXQgaXMgdW5kZWZpbmVkIHRoZW4gd2UgdXNlIHRoZSBmaXJzdCBpdGVtIGluICoqYm9vbGVhbkZhbHNlVmFsdWVbXSoqXG4gKiB8ICoqYm9vbGVhblRydWVWYWx1ZVtdKiogICAgICAgfCB0cnVlKGJvb2wpICBcdHwgVGhlIG9wdGlvbnMgZGVzY3JpYmVzIHdoYXQgaXMgY29uc2lkZXJlZCBgdHJ1ZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0fFxuICogfCAqKmJvb2xlYW5GYWxzZVZhbHVlW10qKiAgICAgIHwgZmFsc2UoYm9vbCkgXHR8IFRoZSBvcHRpb25zIGRlc2NyaWJlcyB3aGF0IGlzIGNvbnNpZGVyZWQgYGZhbHNlYFxuICpcbiAqIEBhdXRob3IgSHl5YW4gQWJvIEZha2hlciA8aGFib2Zha2hlckBiYXNpcy5jb20+XG4gKi9cbmNsYXNzIEJvb2xlYW5FZGl0b3IgZXh0ZW5kcyBDb21wb25lbnQge1xuICAvKipcbiAgICogIEBpbmhlcml0RG9jXG4gICAqL1xuICBpbml0KHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMua2V5UHJlc3MgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gQm9vbGVhbihwYXJhbXMua2V5UHJlc3MpXG4gICAgfSBlbHNlIGlmIChwYXJhbXMuY2hhclByZXNzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IEJvb2xlYW4ocGFyYW1zLmNoYXJQcmVzcylcbiAgICB9XG5cbiAgICB0aGlzLl90cnVlVmFsdWUgPSBbXS5jb25jYXQoXG4gICAgICB0aGlzLmdldE9wdGlvbignYm9vbGVhblRydWVWYWx1ZScsIHBhcmFtcywgW3RydWVdKVxuICAgIClcblxuICAgIHRoaXMuX2ZhbHNlVmFsdWUgPSBbXS5jb25jYXQoXG4gICAgICB0aGlzLmdldE9wdGlvbignYm9vbGVhbkZhbHNlVmFsdWUnLCBwYXJhbXMsIFtmYWxzZV0pXG4gICAgKVxuXG4gICAgdGhpcy5fcmV0dXJuVHJ1ZVZhbHVlID0gdGhpcy5nZXRPcHRpb24oXG4gICAgICAnYm9vbGVhblVzZWRUcnVlVmFsdWUnLFxuICAgICAgcGFyYW1zLFxuICAgICAgdGhpcy5fdHJ1ZVZhbHVlWzBdXG4gICAgKVxuICAgIHRoaXMuX3JldHVybkZhbHNlVmFsdWUgPSB0aGlzLmdldE9wdGlvbihcbiAgICAgICdib29sZWFuVXNlZEZhbHNlVmFsdWUnLFxuICAgICAgcGFyYW1zLFxuICAgICAgdGhpcy5fZmFsc2VWYWx1ZVswXVxuICAgIClcblxuICAgIHRoaXMuX3RydWVWYWx1ZSA9IHRoaXMuX3RydWVWYWx1ZS5tYXAoeCA9PiBTdHJpbmcoeCkpXG4gICAgdGhpcy5fZmFsc2VWYWx1ZSA9IHRoaXMuX2ZhbHNlVmFsdWUubWFwKHggPT4gU3RyaW5nKHgpKVxuXG4gICAgdGhpcy5mb2N1c0FmdGVyQXR0YWNoZWQgPSBwYXJhbXMuY2VsbFN0YXJ0ZWRFZGl0XG4gICAgaWYgKHRoaXMuZm9jdXNBZnRlckF0dGFjaGVkKSB7XG4gICAgICBsZXQga2V5UHJlc3NCYWNrc3BhY2VPckRlbGV0ZSA9XG4gICAgICAgIHBhcmFtcy5rZXlQcmVzcyA9PSAzMiB8fCBwYXJhbXMua2V5UHJlc3MgPT0gNDYgLy8gc3BhY2UgLy8gZGVsZXRlXG5cbiAgICAgIGlmIChrZXlQcmVzc0JhY2tzcGFjZU9yRGVsZXRlKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmNoYXJQcmVzcyAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHBhcmFtcy5jaGFyUHJlc3NcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gcGFyYW1zLnZhbHVlXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gcGFyYW1zLnZhbHVlXG4gICAgfVxuXG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9jb252ZXJ0VmFsdWUoXG4gICAgICB0aGlzLl92YWx1ZSxcbiAgICAgIHRoaXMuX3RydWVWYWx1ZSxcbiAgICAgIHRoaXMuX2ZhbHNlVmFsdWVcbiAgICApXG5cbiAgICB0aGlzLl9zd2l0Y2hlciA9IG5ldyBCb29sZWFuU3dpdGNoKHRoaXMuX3ZhbHVlLCBzd2l0Y2hlciA9PiB7XG4gICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX2NvbnZlcnRWYWx1ZShcbiAgICAgICAgc3dpdGNoZXIuaXNDaGVja2VkKCksXG4gICAgICAgIHRoaXMuX3RydWVWYWx1ZSxcbiAgICAgICAgdGhpcy5fZmFsc2VWYWx1ZVxuICAgICAgKVxuICAgIH0pXG4gICAgdGhpcy5fc3dpdGNoZXIuaW5pdChwYXJhbXMpXG4gIH1cblxuICAvKipcbiAgICogIEBpbmhlcml0RG9jXG4gICAqL1xuICBnZXRHdWkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N3aXRjaGVyLmdldEd1aSgpXG4gIH1cblxuICAvKipcbiAgICogIEBpbmhlcml0RG9jXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX3N3aXRjaGVyLmRlc3Ryb3koKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIG9uY2UgYWZ0ZXIgR1VJIGlzIGF0dGFjaGVkIHRvIERPTS5cbiAgICogTWFrZSBzdXJlIHRoZSBjb250YWluZXIgaXMgYWx3YXlzIGZvY3VzZWQgYW5kIGxpc3RlbmluZyB0byBrZXkgY2hhbmdlc1xuICAgKi9cbiAgYWZ0ZXJHdWlBdHRhY2hlZCgpIHtcbiAgICBpZiAodGhpcy5mb2N1c0FmdGVyQXR0YWNoZWQpIHtcbiAgICAgIHRoaXMuZm9jdXNJbigpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmluYWwgdmFsdWUgdG8gdGhlIGdyaWQsIHRoZSByZXN1bHQgb2YgdGhlIGVkaXRpbmdcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZSA/IHRoaXMuX3JldHVyblRydWVWYWx1ZSA6IHRoaXMuX3JldHVybkZhbHNlVmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBvbmNlIGFmdGVyIGluaXRpYWxpemVkIGFuZCByZXR1cm5zIGZhbHNlIHNvIHRoZSBlZGl0b3IgYXBwZWFycyBpbiB0aGUgY2VsbFxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBhbHdheXMgZmFsc2VcbiAgICoqL1xuICBpc1BvcHVwKCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGRvaW5nIGZ1bGwgcm93IGVkaXQsIHRoZW4gZ2V0cyBjYWxsZWQgd2hlbiB0YWJiaW5nIGludG8gdGhlIGNlbGwuXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBmb2N1c0luKCkge1xuICAgIHRoaXMuX3N3aXRjaGVyLnNldERpc2FibGVkKGZhbHNlKVxuICAgIHRoaXMuX3N3aXRjaGVyLmZvY3VzKClcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGRvaW5nIGZ1bGwgcm93IGVkaXQsIHRoZW4gZ2V0cyBjYWxsZWQgd2hlbiB0YWJiaW5nIG91dCBvZiB0aGUgY2VsbC5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGZvY3VzT3V0KCkge1xuICAgIHRoaXMuX3N3aXRjaGVyLnNldERpc2FibGVkKHRydWUpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZhbHVlIHRoZSBjdXJyZW50IGNlbGwgdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB0cnVlVmFsdWUgdHJ1ZSB2YWx1ZSBhbGlhc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGZhbHNlVmFsdWUgZmFsc2UgdmFsdWUgYWxpYXNcbiAgICovXG4gIF9jb252ZXJ0VmFsdWUodmFsdWUsIHRydWVWYWx1ZSwgZmFsc2VWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlQXNTdHJpbmcgPSBTdHJpbmcodmFsdWUpXG5cbiAgICByZXR1cm4gdHJ1ZVZhbHVlLmluZGV4T2YodmFsdWVBc1N0cmluZykgPiAtMVxuICAgICAgPyB0cnVlXG4gICAgICA6IGZhbHNlVmFsdWUuaW5kZXhPZih2YWx1ZUFzU3RyaW5nKSA+IC0xXG4gICAgICA/IGZhbHNlXG4gICAgICA6IHZhbHVlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm9vbGVhbkVkaXRvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0Jvb2xlYW5FZGl0b3IvQm9vbGVhbkVkaXRvci5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xuXG4vKipcbiAqIFRoZSBiYXNlIGNvbXBvbmVudCBjbGFzc1xuICpcbiAqIFRoaXMgY2xhc3MgaXMgdGhlIGFic3RyYWN0IGNsYXNzIHdoaWNoIGFsbCBjb21wb25lbnRzIHNob3VsZCB1c2VcbiAqXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxuICovXG5jbGFzcyBDb21wb25lbnQge1xuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBodG1sIGVsZW1lbnRcbiAgICpcbiAgICogQHR5cGUge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgX2d1aSA9IG51bGxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICpcbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgaW5pdChwYXJhbXMpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9IGRvZXMgbm90IGltcGxlbWVudCB0aGUgW2luaXRdIG1ldGhvZGBcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBET00gZWxlbWVudCBvZiB0aGUgY29tcG9uZW50LCB0aGlzIGlzIHdoYXQgdGhlIGdyaWQgcHV0cyBpbnRvIHRoZSBjZWxsXG4gICAqXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZ2V0R3VpKCkge1xuICAgIHJldHVybiB0aGlzLl9ndWlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZGVzdHJveWVkLiBJZiB5b3VyIGN1c3RvbSBjb21wb25lbnQgbmVlZHMgdG8gZG9cbiAgICogYW55IHJlc291cmNlIGNsZWFuaW5nIHVwLCBkbyBpdCBoZXJlLlxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICAvLyBwYXNzXG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgcmVxdWlyZWQgb3B0aW9uIHZhbHVlXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB0cnkgdG8gZmluZCB0aGUgcGFzc2VkIG9wdGlvbidzIHZhbHVlIGluIHRoZSBmb2xsb3dpbmcgb3JkZXJcbiAgICpcbiAgICogIDEuIHBhcmFtc1xuICAgKiAgMi4gU2VhcmNoIGBwYXJhbXMuY29sRGVmYFxuICAgKiAgMy4gU2VhcmNoIGBwYXJhbXMuY29udGV4dC5BR3JpZENvbXBvbmVudHNNZXRhQ29uZmlnW0NPTFVNTl9JRF1gIG9yIGBwYXJhbXMuY29udGV4dC5tZXRhW0NPTFVNTl9JRF1gXG4gICAqICA0LiBTZWFyY2ggYHBhcmFtcy5jb250ZXh0LkFHcmlkQ29tcG9uZW50c01ldGFDb25maWdgIG9yIGBwYXJhbXMuY29udGV4dC5tZXRhYFxuICAgKiAgNS4gU2VhcmNoIGBwYXJhbXMuY29udGV4dGBcbiAgICogIDYuIElmIG5vbmUgZm91bmQgcmV0dXJuIHRoZSBmYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgb3B0aW9uXG4gICAqIEBwYXJhbSB7cGFyYW1zfSBwYXJhbXMgYW4gb2JqZWN0IHVzZWQgdG8gc2VhcmNoIGZvciB0aGUgb3B0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmYWxsYmFjayBhIHZhbHVlIHRvIHJldHVybiBpbiBjYXNlIHRoZSBvcHRpb24gY2FuIG5vdCBiZSBmb3VuZFxuICAgKi9cbiAgZ2V0T3B0aW9uKG5hbWUsIHBhcmFtcywgZmFsbGJhY2sgPSBudWxsKSB7XG4gICAgbGV0IG9wdGlvblxuXG4gICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcGFyYW1zW25hbWVdICE9PSBudWxsKSB7XG4gICAgICBvcHRpb24gPSBwYXJhbXNbbmFtZV1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdHJ5IHRvIGZldGNoIGZyb20gdGhlIGNvbHVtbiBkZWYgZmlyc3RcbiAgICAgIGlmIChcbiAgICAgICAgcGFyYW1zLmhhc093blByb3BlcnR5KCdjb2xEZWYnKSAmJlxuICAgICAgICBwYXJhbXMuY29sRGVmLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgIHBhcmFtcy5jb2xEZWZbbmFtZV0gIT09IG51bGxcbiAgICAgICkge1xuICAgICAgICBvcHRpb24gPSBwYXJhbXMuY29sRGVmW25hbWVdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0cnkgdG8gZmV0Y2ggZnJvbSBBR3JpZENvbXBvbmVudHNNZXRhQ29uZmlnfG1ldGEgaW4gdGhlIGNvbnRleHRcbiAgICAgICAgbGV0IEFHcmlkQ29tcG9uZW50c01ldGFDb25maWcgPSBudWxsXG4gICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoJ2NvbnRleHQnKSkge1xuICAgICAgICAgIEFHcmlkQ29tcG9uZW50c01ldGFDb25maWcgPVxuICAgICAgICAgICAgcGFyYW1zLmNvbnRleHQuQUdyaWRDb21wb25lbnRzTWV0YUNvbmZpZyB8fCBwYXJhbXMuY29udGV4dC5tZXRhXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgQUdyaWRDb21wb25lbnRzTWV0YUNvbmZpZyAmJlxuICAgICAgICAgIEFHcmlkQ29tcG9uZW50c01ldGFDb25maWcuaGFzT3duUHJvcGVydHkocGFyYW1zLmNvbHVtbi5jb2xJZCkgJiZcbiAgICAgICAgICBBR3JpZENvbXBvbmVudHNNZXRhQ29uZmlnW3BhcmFtcy5jb2x1bW4uY29sSWRdLmhhc093blByb3BlcnR5KG5hbWUpICYmXG4gICAgICAgICAgQUdyaWRDb21wb25lbnRzTWV0YUNvbmZpZ1twYXJhbXMuY29sdW1uLmNvbElkXVtuYW1lXSAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICBvcHRpb24gPSBBR3JpZENvbXBvbmVudHNNZXRhQ29uZmlnW3BhcmFtcy5jb2x1bW4uY29sSWRdW25hbWVdXG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgQUdyaWRDb21wb25lbnRzTWV0YUNvbmZpZyAmJlxuICAgICAgICAgIEFHcmlkQ29tcG9uZW50c01ldGFDb25maWcuaGFzT3duUHJvcGVydHkobmFtZSkgJiZcbiAgICAgICAgICBBR3JpZENvbXBvbmVudHNNZXRhQ29uZmlnW25hbWVdICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbiA9IEFHcmlkQ29tcG9uZW50c01ldGFDb25maWdbbmFtZV1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB0cnkgdG8gZmV0Y2ggZnJvbSB0aGUgY29udGV4dCBvYmplY3QgaXRzZWxmXG4gICAgICAgICAgY29uc3QgY29udGV4dCA9IHBhcmFtcy5jb250ZXh0XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29udGV4dCAmJlxuICAgICAgICAgICAgY29udGV4dC5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJlxuICAgICAgICAgICAgY29udGV4dFtuYW1lXSAhPT0gbnVsbFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgb3B0aW9uID0gY29udGV4dFtuYW1lXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0cnkgdG8gY2hlY2sgcGFyYW1zIGl0c2VsZiBvciBmYWxsYmFjayB0byBkZWZhdWx0XG4gICAgICAgICAgICBvcHRpb24gPSBmYWxsYmFja1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2Ygb3B0aW9uICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbiA6IGZhbGxiYWNrXG4gIH1cblxuICAvKipcbiAgICogR2V0IFdpbmRvdyBJbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0ge3BhcmFtc30gcGFyYW1zIGFuIG9iamVjdCB1c2VkIHRvIHNlYXJjaCBmb3IgdGhlIHdpbmRvdyBpbnN0YW5jZVxuICAgKlxuICAgKiBAcmV0dXJuIHtXaW5kb3d9XG4gICAqL1xuICBnZXRXaW4ocGFyYW1zKSB7XG4gICAgY29uc3Qgd2luID0gdGhpcy5nZXRPcHRpb24oJ3dpbmRvdycsIHBhcmFtcykgfHwgd2luZG93IHx8IG51bGxcblxuICAgIGlmICghd2luKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0N1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCB3aW5kb3cnKVxuICAgIH1cblxuICAgIHJldHVybiB3aW5cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZG9jdW1lbnQgSW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHtwYXJhbXN9IHBhcmFtcyBhbiBvYmplY3QgdXNlZCB0byBzZWFyY2ggZm9yIHRoZSBkb2N1bWVudCBpbnN0YW5jZVxuICAgKlxuICAgKiBAcmV0dXJuIHtIVE1MRG9jdW1lbnR9XG4gICAqL1xuICBnZXREb2MocGFyYW1zKSB7XG4gICAgY29uc3QgZG9jID0gdGhpcy5nZXRPcHRpb24oJ2RvY3VtZW50JywgcGFyYW1zKSB8fCBkb2N1bWVudCB8fCBudWxsXG5cbiAgICBpZiAoIWRvYykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZG9jdW1lbnQnKVxuICAgIH1cblxuICAgIHJldHVybiBkb2NcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnRcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db21wb25lbnQvQ29tcG9uZW50LmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IHsgYXV0b2JpbmQsIG92ZXJyaWRlIH0gZnJvbSAnY29yZS1kZWNvcmF0b3JzJ1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuLi9Db21wb25lbnQnXG5pbXBvcnQgJy4vc3R5bGUuc2NzcydcblxuLyoqXG4gKiBCb29sZWFuIFJlbmRlcmVyXG4gKlxuICogU2ltcGxlIHRvZ2dsZSBzd2l0Y2ggdG8gaGFuZGxlIGJvb2xlYW4gdmFsdWVzXG4gKlxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cbiAqL1xuY2xhc3MgQm9vbGVhblN3aXRjaCBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgbmV3IEJvb2xlYW5Td2l0Y2ggQ29tcG9uZW50XG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2luaXRpYWxWYWx1ZSA9IGZhbHNlXSB0aGUgZGVmYXVsdCBzdGF0ZSAsIGNoZWNrZWQgb3IgdW5jaGVja2VkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtsaXN0ZW5lciA9IG51bGxdIGEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHN0YXRlIGlzIGNoYW5nZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGluaXRpYWxWYWx1ZSA9IGZhbHNlLCBsaXN0ZW5lciA9IG51bGwpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zZXRDaGVja2VkKGluaXRpYWxWYWx1ZSlcbiAgICB0aGlzLnNldExpc3RlbmVyKGxpc3RlbmVyKVxuICAgIHRoaXMuc2V0RGlzYWJsZWQoZmFsc2UpXG4gIH1cblxuICAvKipcbiAgICogIEBpbmhlcml0RG9jXG4gICAqL1xuICBAb3ZlcnJpZGVcbiAgaW5pdChwYXJhbXMpIHtcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXNcbiAgICB0aGlzLl9vbkNsaWNrID0gdGhpcy5fb25DbGljay5iaW5kKHRoaXMpXG4gICAgdGhpcy5fb25LZXlkb3duID0gdGhpcy5fb25LZXlkb3duLmJpbmQodGhpcylcblxuICAgIHRoaXMuX2d1aSA9IHRoaXMuZ2V0RG9jKHBhcmFtcykuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLl9ndWkuY2xhc3NOYW1lID0gJ2Jvb2xTd2l0Y2hfX3dyYXBwZXInXG4gICAgdGhpcy5fZ3VpLnRhYkluZGV4ID0gLTFcblxuICAgIHRoaXMucmVuZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHN3aXRjaCBzbGlkZXIgYW5kIGhpZGRlbiBpbnB1dC5cbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBkb2MgPSB0aGlzLmdldERvYyh0aGlzLl9wYXJhbXMpXG5cbiAgICBjb25zdCBib29sU3dpdGNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBib29sU3dpdGNoLmNsYXNzTmFtZSA9ICdib29sU3dpdGNoJ1xuXG4gICAgLy8gaW5wdXRcbiAgICB0aGlzLl9pbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG4gICAgdGhpcy5faW5wdXQuaWQgPSBgZWwtJHtNYXRoLnJhbmRvbSgpfWBcbiAgICB0aGlzLl9pbnB1dC5uYW1lID0gJ2NoZWNrYm94J1xuICAgIHRoaXMuX2lucHV0LmNsYXNzTmFtZSA9ICdib29sU3dpdGNoX19jaGVja2JveCdcbiAgICB0aGlzLl9pbnB1dC50eXBlID0gJ2NoZWNrYm94J1xuICAgIHRoaXMuX2lucHV0LmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpXG4gICAgdGhpcy5faW5wdXQuZGlzYWJsZWQgPSB0aGlzLmlzRGlzYWJsZWQoKVxuICAgIHRoaXMuX2lucHV0LnRhYkluZGV4ID0gJzAnXG5cbiAgICAvLyBsYWJlbFxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKVxuICAgIGxhYmVsLmNsYXNzTmFtZSA9ICdib29sU3dpdGNoX19sYWJlbCdcbiAgICBsYWJlbC5mb3IgPSB0aGlzLl9pbnB1dC5pZFxuICAgIGxhYmVsLmlubmVySFRNTCA9IC8qIGh0bWwgKi8gYFxuICAgICAgPHNwYW4gY2xhc3M9XCJib29sU3dpdGNoX19pbm5lclwiPjwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYm9vbFN3aXRjaF9fc3dpdGNoXCI+PC9zcGFuPlxuICAgIGBcblxuICAgIC8vIGF0dGFjaGUgaW5wdXQgYW5kIHNsaWRlciB0byBjb21wb25lbnRcbiAgICBib29sU3dpdGNoLmFwcGVuZENoaWxkKHRoaXMuX2lucHV0KVxuICAgIGJvb2xTd2l0Y2guYXBwZW5kQ2hpbGQobGFiZWwpXG5cbiAgICBib29sU3dpdGNoLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGljaylcbiAgICB0aGlzLl9ndWkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5ZG93bilcblxuICAgIHRoaXMuX2d1aS5hcHBlbmRDaGlsZChib29sU3dpdGNoKVxuICB9XG5cbiAgLyoqXG4gICAqICBAaW5oZXJpdERvY1xuICAgKi9cbiAgQG92ZXJyaWRlXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3QgYm9vbFN3aXRjaCA9IHRoaXMuX2d1aS5xdWVyeVNlbGVjdG9yKCcuYm9vbFN3aXRjaCcpXG4gICAgYm9vbFN3aXRjaC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2spXG4gICAgdGhpcy5fZ3VpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbktleWRvd24pXG4gIH1cblxuICAvKipcbiAgICogRm9jdXMgdGhlIGNvbXBvbmVudFxuICAgKi9cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5fZ3VpLmZvY3VzKClcbiAgICB0aGlzLl9pbnB1dC5mb2N1cygpXG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHN3aXRjaCBzdGF0ZSBpcyBjaGFuZ2VkXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyXG4gICAqL1xuICBzZXRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMuX2xpc3RlbmVyID0gbGlzdGVuZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxpc3RlbmVyIGluc3RhbmNlICwgaWZcbiAgICpcbiAgICogQHJldHVybiB7RnVuY3Rpb258bnVsbH1cbiAgICovXG4gIGdldExpc3RlbmVyKCkge1xuICAgIHJldHVybiB0aGlzLl9saXN0ZW5lclxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBjaGVja2VkXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gdmFsdWUgdHJ1ZSB0byBjaGVjayAsIGZhbHNlIHRvIHVuY2hlY2tcbiAgICovXG4gIHNldENoZWNrZWQodmFsdWUpIHtcbiAgICB0aGlzLl9jaGVja2VkID0gdmFsdWVcbiAgICBpZiAodGhpcy5faW5wdXQpIHtcbiAgICAgIHRoaXMuX2lucHV0LmNoZWNrZWQgPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB0aGUgaWYgc3dpdGNoIGlzIGNoZWNrZWRcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gIHRydWUgd2hlbiBjaGVja2VkICwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBpc0NoZWNrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoZWNrZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIGNvbXBvbmVudCBzdGF0ZVxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXMuc2V0Q2hlY2tlZCghdGhpcy5pc0NoZWNrZWQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgZGlzYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZSB0cnVlIHRvIGRpc2FibGVkICwgZmFsc2UgdG8gZW5hYmxlXG4gICAqL1xuICBzZXREaXNhYmxlZCh2YWx1ZSkge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gdmFsdWVcbiAgICBpZiAodGhpcy5faW5wdXQpIHtcbiAgICAgIHRoaXMuX2lucHV0LmRpc2FibGVkID0gdmFsdWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIHN3aXRjaCBpcyBkaXNhYmxlZFxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIHdoZW4gZGlzYWJsZWQgLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIGlzRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkXG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgY2xpY2sgbGlzdGVuZXIgb2YgdGhlIHN3aXRjaC4gSXQgd2lsbCB0b2dnbGUgdGhlIHN0YXRlIGFuZCBmaXJlIGFueSByZWdpc3RlcmVkIGxpc3RlbmVyXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgdGhlIGV2ZW50IG9iamVjdFxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIF9vbkNsaWNrKGUpIHtcbiAgICBpZiAodGhpcy5fZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXMudG9nZ2xlKClcblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcikge1xuICAgICAgdGhpcy5fbGlzdGVuZXIodGhpcylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQga2V5IGxpc3RlbmVyIG9mIHRoZSBzd2l0Y2guIEl0IHdpbGwgdG9nZ2xlIHRoZSBzdGF0ZSB1c2luZyBrZXlib2FyZCBrZXlzIChsZWZ0ICwgcmlnaHQgLCBzcGFjZSlcbiAgICogYW5kIGZpcmUgYW55IHJlZ2lzdGVyZWQgbGlzdGVuZXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZSAgdGhlIGV2ZW50IG9iamVjdFxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX29uS2V5ZG93bihlKSB7XG4gICAgaWYgKHRoaXMuX2Rpc2FibGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBlLndoaWNoIHx8IGUua2V5Q29kZVxuXG4gICAgLy8gc3BhY2VcbiAgICBpZiAoa2V5ID09IDMyKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpXG4gICAgICBpZiAodGhpcy5fbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXIodGhpcylcbiAgICAgIH1cbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcbiAgICB9XG4gICAgLy8gcmlnaHRcbiAgICBlbHNlIGlmIChrZXkgPT0gMzkpIHtcbiAgICAgIHRoaXMuc2V0Q2hlY2tlZCh0cnVlKVxuICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyKHRoaXMpXG4gICAgICB9XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgfVxuICAgIC8vIGxlZnRcbiAgICBlbHNlIGlmIChrZXkgPT0gMzcpIHtcbiAgICAgIHRoaXMuc2V0Q2hlY2tlZChmYWxzZSlcbiAgICAgIGlmICh0aGlzLl9saXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcih0aGlzKVxuICAgICAgfVxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuU3dpdGNoXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQm9vbGVhblN3aXRjaC9Cb29sZWFuU3dpdGNoLmpzIiwiaW1wb3J0IHsgZGVjb3JhdGUsIGNyZWF0ZURlZmF1bHRTZXR0ZXIgfSBmcm9tICcuL3ByaXZhdGUvdXRpbHMnO1xuY29uc3QgeyBkZWZpbmVQcm9wZXJ0eSB9ID0gT2JqZWN0O1xuXG5mdW5jdGlvbiBoYW5kbGVEZXNjcmlwdG9yKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGNvbnN0IHsgY29uZmlndXJhYmxlLCBlbnVtZXJhYmxlLCBpbml0aWFsaXplciwgdmFsdWUgfSA9IGRlc2NyaXB0b3I7XG4gIHJldHVybiB7XG4gICAgY29uZmlndXJhYmxlLFxuICAgIGVudW1lcmFibGUsXG5cbiAgICBnZXQoKSB7XG4gICAgICAvLyBUaGlzIGhhcHBlbnMgaWYgc29tZW9uZSBhY2Nlc3NlcyB0aGVcbiAgICAgIC8vIHByb3BlcnR5IGRpcmVjdGx5IG9uIHRoZSBwcm90b3R5cGVcbiAgICAgIGlmICh0aGlzID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXQgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyLmNhbGwodGhpcykgOiB2YWx1ZTtcblxuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZSxcbiAgICAgICAgZW51bWVyYWJsZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiByZXRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBzZXQ6IGNyZWF0ZURlZmF1bHRTZXR0ZXIoa2V5KVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYXp5SW5pdGlhbGl6ZSguLi5hcmdzKSB7XG4gIHJldHVybiBkZWNvcmF0ZShoYW5kbGVEZXNjcmlwdG9yLCBhcmdzKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWRlY29yYXRvcnMvc3JjL2xhenktaW5pdGlhbGl6ZS5qcyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuaGVhZFxuICAgICAgICAgICAgICB9O1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Cb29sZWFuU3dpdGNoL3N0eWxlLnNjc3MiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5hZy1jZWxsLWlubGluZS1lZGl0aW5nIC5ib29sU3dpdGNoX193cmFwcGVye21hcmdpbjphdXRvIDExcHh9LmJvb2xTd2l0Y2hfX3dyYXBwZXJ7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7YWxpZ24taXRlbXM6Y2VudGVyO291dGxpbmU6bm9uZTtwYWRkaW5nLWxlZnQ6NnB4O292ZXJmbG93OmhpZGRlbjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lfS5ib29sU3dpdGNoe3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjU1cHg7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZX0uYm9vbFN3aXRjaF9fY2hlY2tib3h7ZGlzcGxheTpub25lfS5ib29sU3dpdGNoX19sYWJlbHtkaXNwbGF5OmJsb2NrO292ZXJmbG93OmhpZGRlbjtjdXJzb3I6cG9pbnRlcjtib3JkZXI6MnB4IHNvbGlkIHZhcigtLWFnLWlucHV0LWJvcmRlci1jb2xvciwgdmFyKC0tYWctYm9yZGVyLWNvbG9yLCAjYmFiZmM3KSk7Ym9yZGVyLXJhZGl1czoyMHB4fS5ib29sU3dpdGNoX19pbm5lcntkaXNwbGF5OmJsb2NrO3dpZHRoOjIwMCU7bWFyZ2luLWxlZnQ6LTEwMCU7dHJhbnNpdGlvbjptYXJnaW4gMC4zcyBlYXNlLWluIDBzfS5ib29sU3dpdGNoX19pbm5lcjpiZWZvcmUsLmJvb2xTd2l0Y2hfX2lubmVyOmFmdGVye2Rpc3BsYXk6YmxvY2s7ZmxvYXQ6bGVmdDt3aWR0aDo1MCU7aGVpZ2h0OjE1cHg7cGFkZGluZzowO2xpbmUtaGVpZ2h0OjE1cHg7Zm9udC1zaXplOjE0cHg7Y29sb3I6d2hpdGU7Zm9udC1mYW1pbHk6J1NlZ29lIFVJIFN5bWJvbCcsIFRyZWJ1Y2hldCwgQXJpYWwsIHNhbnMtc2VyaWY7Zm9udC13ZWlnaHQ6Ym9sZDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LmJvb2xTd2l0Y2hfX2lubmVyOmJlZm9yZXtjb250ZW50OidcXFxcMjcxNCc7cGFkZGluZy1sZWZ0OjEwcHg7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1hZy1jaGVja2JveC1jaGVja2VkLWNvbG9yLCB2YXIoLS1hZy1hbHBpbmUtYWN0aXZlLWNvbG9yLCAjMjE5NmYzKSk7Y29sb3I6I2ZmZmZmZn0uYm9vbFN3aXRjaF9faW5uZXI6YWZ0ZXJ7Y29udGVudDonXFxcXDI3MTgnO3BhZGRpbmctcmlnaHQ6MTBweDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFnLWJhY2tncm91bmQtY29sb3IpO2NvbG9yOnZhcigtLWFnLWlucHV0LWJvcmRlci1jb2xvciwgdmFyKC0tYWctYm9yZGVyLWNvbG9yLCAjYmFiZmM3KSk7dGV4dC1hbGlnbjpyaWdodH0uYm9vbFN3aXRjaF9fc3dpdGNoe2Rpc3BsYXk6YmxvY2s7d2lkdGg6MThweDttYXJnaW46MXB4O2JhY2tncm91bmQ6I2ZmZmZmZjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDozNXB4O2JvcmRlcjoycHggc29saWQgdmFyKC0tYWctaW5wdXQtYm9yZGVyLWNvbG9yLCB2YXIoLS1hZy1ib3JkZXItY29sb3IsICNiYWJmYzcpKTtib3JkZXItcmFkaXVzOjIwcHg7dHJhbnNpdGlvbjphbGwgMC4zcyBlYXNlLWluIDBzfS5ib29sU3dpdGNoX19jaGVja2JveDpjaGVja2VkKy5ib29sU3dpdGNoX19sYWJlbCAuYm9vbFN3aXRjaF9faW5uZXJ7bWFyZ2luLWxlZnQ6MH0uYm9vbFN3aXRjaF9fY2hlY2tib3g6Y2hlY2tlZCsuYm9vbFN3aXRjaF9fbGFiZWwgLmJvb2xTd2l0Y2hfX3N3aXRjaHtyaWdodDowcHh9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9Cb29sZWFuU3dpdGNoL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBCb29sZWFuUmVuZGVyZXIgZnJvbSAnLi9Cb29sZWFuUmVuZGVyZXInXG5cbmV4cG9ydCBkZWZhdWx0IEJvb2xlYW5SZW5kZXJlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0Jvb2xlYW5SZW5kZXJlci9pbmRleC5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50J1xuaW1wb3J0IEJvb2xlYW5Td2l0Y2ggZnJvbSAnLi4vQm9vbGVhblN3aXRjaCdcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zICovXG5cbi8qKlxuICogQm9vbGVhbnMgUmVuZGVyZXJcbiAqXG4gKiBIYW5kbGUgYm9vbGVhbiB2YWx1ZXMgUmVuZGVyaW5nXG4gKlxuICogIyMgT3B0aW9uc1xuICpcbiAqIHwgTmFtZSAgICAgICAgICAgICAgICAgIFx0fCBEZWZhdWx0ICAgICBcdHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0fFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdHw6LS0tLS0tLS0tLS0tLTp8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICoqYm9vbGVhblRydWVSZW5kZXJWYWx1ZSoqICBcdHwgc3dpdGNoICAgICAgXHR8IFRoZSBvcHRpb24gY29udHJvbHMgaG93IHRvIHJlbmRlciBgdHJ1ZWAgdmFsdWVzLiA8YnI+ICoqc3dpdGNoKiogaXMgYSBzcGVjaWFsIHZhbHVlIHVzZWQgdG8gcmVuZGVyIHRydWUgdmFsdWVzIGFzIGEgc3dpdGNoIGNvbXBvbmVudCAgXHR8XG4gKiB8ICoqYm9vbGVhbkZhbHNlUmVuZGVyVmFsdWUqKiBcdHwgc3dpdGNoICAgICAgXHR8IFRoZSBvcHRpb24gY29udHJvbHMgaG93IHRvIHJlbmRlciBgZmFsc2VgIHZhbHVlcy4gPGJyPiAqKnN3aXRjaCoqIGlzIGEgc3BlY2lhbCB2YWx1ZSB1c2VkIHRvIHJlbmRlciB0cnVlIHZhbHVlcyBhcyBhIHN3aXRjaCBjb21wb25lbnQgXHR8XG4gKiB8ICoqYm9vbGVhblRydWVWYWx1ZVtdKiogICAgICAgfCB0cnVlKGJvb2wpICBcdHwgVGhlIG9wdGlvbnMgZGVzY3JpYmVzIHdoYXQgaXMgY29uc2lkZXJlZCBgdHJ1ZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0fFxuICogfCAqKmJvb2xlYW5GYWxzZVZhbHVlW10qKiAgICAgIHwgZmFsc2UoYm9vbCkgXHR8IFRoZSBvcHRpb25zIGRlc2NyaWJlcyB3aGF0IGlzIGNvbnNpZGVyZWQgYGZhbHNlYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdHxcbiAqXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxuICovXG5jbGFzcyBCb29sZWFuUmVuZGVyZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAvKipcbiAgICogQ29uc3RydWN0IG5ldyBCb29sZWFuUmVuZGVyZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcblxuICAgIC8vIHdpbGwgdGhpcyBhZmZlY3QgQkJqIGJ1aSA/XG4gICAgdGhpcy5fZ3VpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgdGhpcy5fZ3VpLmNsYXNzTmFtZSA9ICdib29sUmVuZGVyZXInXG4gICAgdGhpcy5fZ3VpLnN0eWxlLmZvbnRGYW1pbHkgPVxuICAgICAgJ1wiU2Vnb2UgVUkgU3ltYm9sXCIsVHJlYnVjaGV0LCBBcmlhbCwgc2Fucy1zZXJpZidcbiAgfVxuXG4gIC8qKlxuICAgKiAgQGluaGVyaXREb2NcbiAgICovXG4gIGluaXQocGFyYW1zKSB7XG4gICAgdGhpcy5yZWZyZXNoKHBhcmFtcywgdHJ1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiAgQGluaGVyaXREb2NcbiAgICovXG4gIGdldEd1aSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ3VpXG4gIH1cblxuICAvKipcbiAgICogIEBpbmhlcml0RG9jXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl9zd2l0Y2hlcikge1xuICAgICAgdGhpcy5fc3dpdGNoZXIuZGVzdHJveSgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZnJlc2ggdGhlIGNlbGxcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBjZWxsIHJlbmRlcmVyIHBhcmFtc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5pdCB0cnVlIHdoZW4gdGhpcyBtZXRob2QgaXMgYmVpbmcgY2FsbGVkIGluIGBpbml0YCBwaGFzZSAsIGZhbHNlIG90aGVyd2lzZVxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSByZWZyZXNoIHN1Y2NlZWRlZCwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICByZWZyZXNoKHBhcmFtcywgaXNJbml0KSB7XG4gICAgbGV0IHZhbHVlID0gcGFyYW1zLnZhbHVlRm9ybWF0dGVkID8gcGFyYW1zLnZhbHVlRm9ybWF0dGVkIDogcGFyYW1zLnZhbHVlXG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhpcy5fZ3VpLmlubmVySFRNTCA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICAgICAgY29uc3QgYm9vbGVhblRydWVSZW5kZXJWYWx1ZSA9IFN0cmluZyhcbiAgICAgICAgdGhpcy5nZXRPcHRpb24oJ2Jvb2xlYW5UcnVlUmVuZGVyVmFsdWUnLCBwYXJhbXMsICdzd2l0Y2gnKVxuICAgICAgKVxuICAgICAgY29uc3QgYm9vbGVhbkZhbHNlUmVuZGVyVmFsdWUgPSBTdHJpbmcoXG4gICAgICAgIHRoaXMuZ2V0T3B0aW9uKCdib29sZWFuRmFsc2VSZW5kZXJWYWx1ZScsIHBhcmFtcywgJ3N3aXRjaCcpXG4gICAgICApXG4gICAgICBjb25zdCBib29sZWFuVHJ1ZVZhbHVlID0gW11cbiAgICAgICAgLmNvbmNhdCh0aGlzLmdldE9wdGlvbignYm9vbGVhblRydWVWYWx1ZScsIHBhcmFtcywgW3RydWVdKSlcbiAgICAgICAgLm1hcCh4ID0+IFN0cmluZyh4KSlcbiAgICAgIGNvbnN0IGJvb2xlYW5GYWxzZVZhbHVlID0gW11cbiAgICAgICAgLmNvbmNhdCh0aGlzLmdldE9wdGlvbignYm9vbGVhbkZhbHNlVmFsdWUnLCBwYXJhbXMsIFtmYWxzZV0pKVxuICAgICAgICAubWFwKHggPT4gU3RyaW5nKHgpKVxuXG4gICAgICAvLyBoYW5kbGUgdHJ1ZSB2YWx1ZXNcbiAgICAgIGlmIChib29sZWFuVHJ1ZVZhbHVlLmluZGV4T2YodmFsdWUpID4gLTEpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFib29sZWFuVHJ1ZVJlbmRlclZhbHVlLmxlbmd0aCB8fFxuICAgICAgICAgIGJvb2xlYW5UcnVlUmVuZGVyVmFsdWUgPT09ICdzd2l0Y2gnXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHN3aXRjaGVyID0gdGhpcy5fZ2V0U3dpdGNoZXIocGFyYW1zKVxuICAgICAgICAgIHN3aXRjaGVyLnNldENoZWNrZWQodHJ1ZSlcbiAgICAgICAgICB0aGlzLl9ndWkuaW5uZXJIVE1MID0gJydcbiAgICAgICAgICB0aGlzLl9ndWkuYXBwZW5kQ2hpbGQoc3dpdGNoZXIuZ2V0R3VpKCkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fZ3VpLmlubmVySFRNTCA9IGJvb2xlYW5UcnVlUmVuZGVyVmFsdWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gaGFuZGxlIGZhbHNlIHZhbHVlc1xuICAgICAgZWxzZSBpZiAoYm9vbGVhbkZhbHNlVmFsdWUuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIWJvb2xlYW5GYWxzZVJlbmRlclZhbHVlLmxlbmd0aCB8fFxuICAgICAgICAgIGJvb2xlYW5GYWxzZVJlbmRlclZhbHVlID09PSAnc3dpdGNoJ1xuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBzd2l0Y2hlciA9IHRoaXMuX2dldFN3aXRjaGVyKHBhcmFtcylcbiAgICAgICAgICBzd2l0Y2hlci5zZXRDaGVja2VkKGZhbHNlKVxuICAgICAgICAgIHRoaXMuX2d1aS5pbm5lckhUTUwgPSAnJ1xuICAgICAgICAgIHRoaXMuX2d1aS5hcHBlbmRDaGlsZChzd2l0Y2hlci5nZXRHdWkoKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9ndWkuaW5uZXJIVE1MID0gYm9vbGVhbkZhbHNlUmVuZGVyVmFsdWVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZ3VpLmlubmVySFRNTCA9IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3dpdGNoIGluc3RhbmNlIGlmIGF2YWlsYWJsZSAsIG9yIGNyZWF0ZSBpdCBvdGhlcndpc2VcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFuU3dpdGNofSBzd2l0Y2ggaW5zdGFuY2VcbiAgICovXG4gIF9nZXRTd2l0Y2hlcihwYXJhbXMpIHtcbiAgICBpZiAoIXRoaXMuX3N3aXRjaGVyKSB7XG4gICAgICB0aGlzLl9zd2l0Y2hlciA9IG5ldyBCb29sZWFuU3dpdGNoKClcbiAgICAgIHRoaXMuX3N3aXRjaGVyLnNldERpc2FibGVkKHRydWUpXG4gICAgICB0aGlzLl9zd2l0Y2hlci5pbml0KHBhcmFtcylcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3dpdGNoZXJcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuUmVuZGVyZXJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Cb29sZWFuUmVuZGVyZXIvQm9vbGVhblJlbmRlcmVyLmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IEJvb2xlYW5GaWx0ZXIgZnJvbSAnLi9Cb29sZWFuRmlsdGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuRmlsdGVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQm9vbGVhbkZpbHRlci9pbmRleC5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCB7IGF1dG9iaW5kLCBvdmVycmlkZSB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycydcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50J1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbmNvbnN0IHRvVGl0bGVDYXNlID0gcGhyYXNlID0+IHtcbiAgcmV0dXJuIHBocmFzZVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnNwbGl0KCcgJylcbiAgICAubWFwKHdvcmQgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkpXG4gICAgLmpvaW4oJyAnKVxufVxuXG5jb25zdCBzdHJpcEhUTUwgPSBodG1sID0+IHtcbiAgY29uc3QgdG1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJylcbiAgdG1wLmlubmVySFRNTCA9IGh0bWxcbiAgcmV0dXJuIHRtcC50ZXh0Q29udGVudCB8fCB0bXAuaW5uZXJUZXh0IHx8ICcnXG59XG5cbi8qKlxuICogQm9vbGVhbnMgRmlsdGVyXG4gKlxuICogSGFuZGxlIGJvb2xlYW4gdmFsdWVzIEZpbHRlcmluZ1xuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiB8IE5hbWUgICAgICAgICAgICAgICAgICBcdHwgRGVmYXVsdCAgICAgXHR8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHR8Oi0tLS0tLS0tLS0tLS06fC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAqKmJvb2xlYW5Vc2VkVHJ1ZVZhbHVlKiogICB8IHVuZGVmaW5lZCAgICB8IHRoZSB2YWx1ZSB0byB1c2Ugd2hlbiB0aGUgZmlsdGVyIGRpc3BsYXlzIHRoZSB0cnVlIHN0YXRlIC4gaW4gY2FzZSBpdCBpcyB1bmRlZmluZWQgdGhlbiB3ZSB1c2UgdGhlIGZpcnN0IGl0ZW0gaW4gKipib29sZWFuVHJ1ZVZhbHVlW10qKlxuICogfCAqKmJvb2xlYW5Vc2VkRmFsc2VWYWx1ZSoqICAgfCB1bmRlZmluZWQgICAgfCB0aGUgdmFsdWUgdG8gdXNlIHdoZW4gdGhlIGZpbHRlciBkaXNwbGF5cyB0aGUgZmFsc2Ugc3RhdGUuIGluIGNhc2UgaXQgaXMgdW5kZWZpbmVkIHRoZW4gd2UgdXNlIHRoZSBmaXJzdCBpdGVtIGluICoqYm9vbGVhbkZhbHNlVmFsdWVbXSoqXG4gKiB8ICoqYm9vbGVhblRydWVWYWx1ZVtdKiogICAgICAgfCB0cnVlKGJvb2wpICBcdHwgVGhlIG9wdGlvbnMgZGVzY3JpYmVzIHdoYXQgaXMgY29uc2lkZXJlZCBgdHJ1ZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0fFxuICogfCAqKmJvb2xlYW5GYWxzZVZhbHVlW10qKiAgICAgIHwgZmFsc2UoYm9vbCkgXHR8IFRoZSBvcHRpb25zIGRlc2NyaWJlcyB3aGF0IGlzIGNvbnNpZGVyZWQgYGZhbHNlYFxuICogfCAqKmNsZWFyQnV0dG9uKiogICB8IGZhbHNlICAgIHwgIFNldCB0byB0cnVlIHRvIGhhdmUgdGhlIGZpbHRlciB1c2UgYSBDbGVhciBidXR0b24uIFRoZSBDbGVhciBidXR0b24gd2lsbCBjbGVhciB0aGUgKGZvcm0pIGRldGFpbHMgb2YgdGhlIGZpbHRlciB3aXRob3V0IHJlbW92aW5nIGFueSBhY3RpdmUgZmlsdGVycyBvbiB0aGUgY29sdW1uLlxuICogfCAqKmFwcGx5QnV0dG9uKiogICB8IGZhbHNlICAgIHwgIFNldCB0byB0cnVlIHRvIGhhdmUgdGhlIGZpbHRlciB1c2UgYW4gQXBwbHkgYnV0dG9uLiBJZiB0aGUgQXBwbHkgYnV0dG9uIGlzIHByZXNlbnQsIHRoZW4gdGhlIGZpbHRlciBpcyBvbmx5IGFwcGxpZWQgYWZ0ZXIgdGhlIHVzZXIgaGl0cyB0aGUgQXBwbHkgYnV0dG9uLlxuICogfCAqKnJlc2V0QnV0dG9uKiogICB8IGZhbHNlICAgIHwgIFNldCB0byB0cnVlIHRvIGhhdmUgdGhlIGZpbHRlciB1c2UgYSBSZXNldCBidXR0b24uIFRoZSBSZXNldCBidXR0b24gd2lsbCBjbGVhciB0aGUgZGV0YWlscyBvZiB0aGUgZmlsdGVyIGFuZCBhbnkgYWN0aXZlIGZpbHRlcnMgb24gdGhhdCBjb2x1bW4uXG4gKlxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cbiAqL1xuY2xhc3MgQm9vbGVhbkZpbHRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBUcnVlICwgZmFsc2UgdHJhbnNsYXRpb25cbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIF9ib29sZWFuRmlsdGVyVHJhbnNsYXRpb24gPSB7fVxuICAvKipcbiAgICogQ29uc3RydWN0IG5ldyBCb29sZWFuRmlsdGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG5cbiAgICB0aGlzLl9ndWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuX2d1aS5jbGFzc05hbWUgPSAnYm9vbGVhbkZpbHRlciBhZy1maWx0ZXItYm9keS13cmFwcGVyJ1xuICAgIHRoaXMuX2d1aS50YWJJbmRleCA9ICcwJ1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBAb3ZlcnJpZGVcbiAgaW5pdChwYXJhbXMpIHtcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBwYXJhbXMuYXBpLmdyaWRPcHRpb25zV3JhcHBlci5nZXRMb2NhbGVUZXh0RnVuYygpXG4gICAgY29uc3QgaXNDbGVhckZpbHRlciA9IHRoaXMuZ2V0T3B0aW9uKCdjbGVhckJ1dHRvbicsIHBhcmFtcywgZmFsc2UpXG4gICAgY29uc3QgaXNSZXNldEJ1dHRvbiA9IHRoaXMuZ2V0T3B0aW9uKCdyZXNldEJ1dHRvbicsIHBhcmFtcywgZmFsc2UpXG4gICAgY29uc3QgaXNBcHBseUJ1dHRvbiA9IHRoaXMuZ2V0T3B0aW9uKCdhcHBseUJ1dHRvbicsIHBhcmFtcywgZmFsc2UpXG5cbiAgICB0aGlzLl90cnVlVmFsdWUgPSBbXVxuICAgICAgLmNvbmNhdCh0aGlzLmdldE9wdGlvbignYm9vbGVhblRydWVWYWx1ZScsIHBhcmFtcywgW3RydWVdKSlcbiAgICAgIC5tYXAoeCA9PiBTdHJpbmcoeCkpXG5cbiAgICB0aGlzLl9mYWxzZVZhbHVlID0gW11cbiAgICAgIC5jb25jYXQodGhpcy5nZXRPcHRpb24oJ2Jvb2xlYW5GYWxzZVZhbHVlJywgcGFyYW1zLCBbZmFsc2VdKSlcbiAgICAgIC5tYXAoeCA9PiBTdHJpbmcoeCkpXG5cbiAgICB0aGlzLl91c2VkVHJ1ZVZhbHVlID0gU3RyaW5nKFxuICAgICAgdGhpcy5nZXRPcHRpb24oJ2Jvb2xlYW5Vc2VkVHJ1ZVZhbHVlJywgcGFyYW1zLCB0aGlzLl90cnVlVmFsdWVbMF0pXG4gICAgKVxuXG4gICAgdGhpcy5fdXNlZEZhbHNlVmFsdWUgPSBTdHJpbmcoXG4gICAgICB0aGlzLmdldE9wdGlvbignYm9vbGVhblVzZWRGYWxzZVZhbHVlJywgcGFyYW1zLCB0aGlzLl9mYWxzZVZhbHVlWzBdKVxuICAgIClcblxuICAgIHRoaXMuX2Jvb2xlYW5GaWx0ZXJUcmFuc2xhdGlvbiA9IHRoaXMuZ2V0T3B0aW9uKFxuICAgICAgJ2Jvb2xlYW5GaWx0ZXJUcmFuc2xhdGlvbicsXG4gICAgICBwYXJhbXMsXG4gICAgICB7XG4gICAgICAgIHRydWU6IHRyYW5zbGF0ZShcbiAgICAgICAgICAnYm9vbGVhblRydWUnLFxuICAgICAgICAgIHRvVGl0bGVDYXNlKFN0cmluZyh0aGlzLl91c2VkVHJ1ZVZhbHVlKSlcbiAgICAgICAgKSxcbiAgICAgICAgZmFsc2U6IHRyYW5zbGF0ZShcbiAgICAgICAgICAnYm9vbGVhbkZhbHNlJyxcbiAgICAgICAgICB0b1RpdGxlQ2FzZShTdHJpbmcodGhpcy5fdXNlZEZhbHNlVmFsdWUpKVxuICAgICAgICApLFxuICAgICAgICByZXNldDogdHJhbnNsYXRlKFxuICAgICAgICAgICdib29sZWFuUmVzZXQnLFxuICAgICAgICAgIHRyYW5zbGF0ZSgncmVzZXRGaWx0ZXInLCAnUmVzZXQgRmlsdGVyJylcbiAgICAgICAgKSxcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXNcbiAgICB0aGlzLl9maWx0ZXJUZXh0ID0gbnVsbFxuXG4gICAgdGhpcy5fb25SYWRpb0NoYW5nZSA9IHRoaXMuX29uUmFkaW9DaGFuZ2UuYmluZCh0aGlzLCBpc0FwcGx5QnV0dG9uKVxuXG4gICAgLy8gY3JlYXRlIGJvZHlcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBib2R5LmNsYXNzTmFtZSA9ICdib29sZWFuRmlsdGVyX19ib2R5IGFnLWZpbHRlci1ib2R5J1xuICAgIGJvZHkuc3R5bGUucGFkZGluZyA9ICc1cHggMTVweCdcbiAgICBib2R5LmlubmVySFRNTCA9IC8qIGh0bWwgKi8gYFxuICAgICAgPGRpdiBjbGFzcz1cImJvb2xlYW5GaWx0ZXJfX2JvZHlfX2xhYmVsc1wiPlxuXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImFnLWlucHV0LWZpZWxkLWxhYmVsIGFnLWxhYmVsIGFnLXJhZGlvLWJ1dHRvbi1sYWJlbFwiPiAgICAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhZy13cmFwcGVyLXRydWUgYWctd3JhcHBlciBhZy1pbnB1dC13cmFwcGVyIGFnLXJhZGlvLWJ1dHRvbi1pbnB1dC13cmFwcGVyXCI+XG4gICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cInRydWUtaW5wdXQgYWctaW5wdXQtZmllbGQtaW5wdXQgYWctcmFkaW8tYnV0dG9uLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cImJvb2xlYW5cIiB2YWx1ZT1cInRydWVcIi8+ICAgICAgICAgICAgICBcbiAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgPHNwYW4+JHt0aGlzLl9ib29sZWFuRmlsdGVyVHJhbnNsYXRpb24udHJ1ZX08L3NwYW4+XG4gICAgICAgIDwvbGFiZWw+XG5cblxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJhZy1pbnB1dC1maWVsZC1sYWJlbCBhZy1sYWJlbCBhZy1yYWRpby1idXR0b24tbGFiZWxcIj4gICAgICAgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWctd3JhcHBlci1mYWxzZSBhZy13cmFwcGVyIGFnLWlucHV0LXdyYXBwZXIgYWctcmFkaW8tYnV0dG9uLWlucHV0LXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmFsc2UtaW5wdXQgYWctaW5wdXQtZmllbGQtaW5wdXQgYWctcmFkaW8tYnV0dG9uLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cImJvb2xlYW5cIiB2YWx1ZT1cImZhbHNlXCIvPiAgICAgICAgICAgICAgXG4gICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgIDxzcGFuPiR7dGhpcy5fYm9vbGVhbkZpbHRlclRyYW5zbGF0aW9uLmZhbHNlfTwvc3Bhbj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICBcbiAgICAgICAgICAke1xuICAgICAgICAgICAgIWlzUmVzZXRCdXR0b25cbiAgICAgICAgICAgICAgPyAvKiBodG1sICovIGBcbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYWctaW5wdXQtZmllbGQtbGFiZWwgYWctbGFiZWwgYWctcmFkaW8tYnV0dG9uLWxhYmVsXCI+ICAgICAgIFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFnLXdyYXBwZXItcmVzZXQgYWctd3JhcHBlciBhZy1pbnB1dC13cmFwcGVyIGFnLXJhZGlvLWJ1dHRvbi1pbnB1dC13cmFwcGVyIGFnLWNoZWNrZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwicmVzZXQtaW5wdXQgYWctaW5wdXQtZmllbGQtaW5wdXQgYWctcmFkaW8tYnV0dG9uLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cImJvb2xlYW5cIiB2YWx1ZT1cIlwiIGNoZWNrZWQvPiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgICAgIDxzcGFuPiR7dGhpcy5fYm9vbGVhbkZpbHRlclRyYW5zbGF0aW9uLnJlc2V0fTwvc3Bhbj5cbiAgICAgICAgICAgICAgPC9sYWJlbD4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgIH0gICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgIGBcblxuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25SYWRpb0NoYW5nZSlcblxuICAgIHRoaXMuX2d1aS5hcHBlbmRDaGlsZChib2R5KVxuXG4gICAgLy8gY3JlYXRlIGFwcGx5IGZpbHRlciBwYW5lbFxuICAgIGNvbnN0IGFwcGx5RmlsdGVyUGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGFwcGx5RmlsdGVyUGFuZWwuY2xhc3NOYW1lID0gYGJvb2xlYW5GaWx0ZXJfX2JvZHlfX2FwcGx5UGFuZWwgYWctZmlsdGVyLWFwcGx5LXBhbmVsIGFnLWhpZGRlbmBcbiAgICBhcHBseUZpbHRlclBhbmVsLmlubmVySFRNTCA9IC8qIGh0bWwgKi8gYFxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImFnLXN0YW5kYXJkLWJ1dHRvbiBhZy1maWx0ZXItYXBwbHktcGFuZWwtYnV0dG9uIGNsZWFyICR7IWlzQ2xlYXJGaWx0ZXIgJiZcbiAgICAgICAgJ2FnLWhpZGRlbid9XCIgdHlwZT1cImJ1dHRvblwiPiR7dHJhbnNsYXRlKFxuICAgICAgJ2NsZWFyRmlsdGVyJyxcbiAgICAgICdDbGVhciBGaWx0ZXInXG4gICAgKX08L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJhZy1zdGFuZGFyZC1idXR0b24gYWctZmlsdGVyLWFwcGx5LXBhbmVsLWJ1dHRvbiByZXNldCAkeyFpc1Jlc2V0QnV0dG9uICYmXG4gICAgICAgICdhZy1oaWRkZW4nfVwiIHR5cGU9XCJidXR0b25cIj4ke3RyYW5zbGF0ZShcbiAgICAgICdyZXNldEZpbHRlcicsXG4gICAgICAnUmVzZXQgRmlsdGVyJ1xuICAgICl9PC9idXR0b24+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYWctc3RhbmRhcmQtYnV0dG9uIGFnLWZpbHRlci1hcHBseS1wYW5lbC1idXR0b24gYXBwbHkgJHshaXNBcHBseUJ1dHRvbiAmJlxuICAgICAgICAnYWctaGlkZGVuJ31cIiB0eXBlPVwiYnV0dG9uXCI+JHt0cmFuc2xhdGUoXG4gICAgICAnYXBwbHlGaWx0ZXInLFxuICAgICAgJ0FwcGx5IEZpbHRlcidcbiAgICApfTwvYnV0dG9uPlxuICAgIGBcblxuICAgIGlmIChpc0NsZWFyRmlsdGVyIHx8IGlzUmVzZXRCdXR0b24gfHwgaXNBcHBseUJ1dHRvbikge1xuICAgICAgYXBwbHlGaWx0ZXJQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdhZy1oaWRkZW4nKVxuICAgIH1cblxuICAgIGFwcGx5RmlsdGVyUGFuZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICB0aGlzLl9BcHBseUZpbHRlclBhbmVsQnV0dG9uQ2xpY2tcbiAgICApXG5cbiAgICB0aGlzLl9ndWkuYXBwZW5kQ2hpbGQoYXBwbHlGaWx0ZXJQYW5lbClcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgQG92ZXJyaWRlXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZ3VpXG4gICAgICAucXVlcnlTZWxlY3RvcignLmJvb2xlYW5GaWx0ZXJfX2JvZHlfX2xhYmVscycpXG4gICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25SYWRpb0NoYW5nZSlcblxuICAgIHRoaXMuX2d1aVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5ib29sZWFuRmlsdGVyX19ib2R5X19hcHBseVBhbmVsJylcbiAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX0FwcGx5RmlsdGVyUGFuZWxCdXR0b25DbGljaylcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIHNlbGVjdGVkIGZpbHRlciBtYXRjaGVzIHRoZSBwYXNzZWQgY2VsbCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSB3aGVuIHBhc3MsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgZG9lc0ZpbHRlclBhc3MocGFyYW1zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIGNvbnN0IHZhbHVlID0gU3RyaW5nKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgdGhpcy5fcGFyYW1zLmhhc093blByb3BlcnR5KCdmaWx0ZXJWYWx1ZUdldHRlcicpXG4gICAgICAgID8gdGhpcy5fcGFyYW1zLmZpbHRlclZhbHVlR2V0dGVyKHBhcmFtcylcbiAgICAgICAgOiB0aGlzLl9wYXJhbXMudmFsdWVHZXR0ZXIocGFyYW1zKVxuICAgIClcblxuICAgIHJldHVybiB0aGlzLl9maWx0ZXJUZXh0ID09PSAndHJ1ZSdcbiAgICAgID8gdGhpcy5fdHJ1ZVZhbHVlLmluZGV4T2YodmFsdWUpID4gLTFcbiAgICAgIDogdGhpcy5fZmFsc2VWYWx1ZS5pbmRleE9mKHZhbHVlKSA+IC0xXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0aGUgY29tcG9uZW50IGlzIGFwcGx5aW5nIGFueSBmaWx0ZXIgb24gdGhlIGNvbHVtblxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgKiovXG4gIGlzRmlsdGVyQWN0aXZlKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLl9maWx0ZXJUZXh0ICE9PSBudWxsICYmXG4gICAgICB0aGlzLl9maWx0ZXJUZXh0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHRoaXMuX2ZpbHRlclRleHQgIT09ICcnXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGZpbHRlciBzdGF0ZS4gSWYgZmlsdGVyIGlzIG5vdCBhY3RpdmUsIHRoZW4gc2hvdWxkIHJldHVybiBudWxsL3VuZGVmaW5lZC5cbiAgICogVGhlIGdyaWQgY2FsbHMgZ2V0TW9kZWwoKSBvbiBhbGwgYWN0aXZlIGZpbHRlcnMgd2hlbiBncmlkQXBpLmdldEZpbHRlck1vZGVsKCkgaXMgY2FsbGVkLlxuICAgKlxuICAgKiBAcmV0dXJuIE9iamVjdCB8IG51bGwgdGhlIGZpbHRlciBzdGF0ZVxuICAgKi9cbiAgZ2V0TW9kZWwoKSB7XG4gICAgaWYgKCF0aGlzLmlzRmlsdGVyQWN0aXZlKCkpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgbW9kZWwgPSB7IHZhbHVlOiB0aGlzLl9maWx0ZXJUZXh0LCBmaWx0ZXJUeXBlOiAnYm9vbGVhbicgfVxuICAgIHJldHVybiBtb2RlbFxuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHRoZSBmaWx0ZXIgc3RhdGUuIENhbGxlZCBieSB0aGUgZ3JpZCBhZnRlciBncmlkQXBpLnNldEZpbHRlck1vZGVsKG1vZGVsKSBpcyBjYWxsZWQuXG4gICAqIFRoZSBncmlkIHdpbGwgcGFzcyB1bmRlZmluZWQvbnVsbCB0byBjbGVhciB0aGUgZmlsdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdCB8IG51bGx9IG1vZGVsXG4gICAqL1xuICBzZXRNb2RlbChtb2RlbCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xuICAgIHRoaXMuX2ZpbHRlclRleHQgPSBtb2RlbCAmJiBtb2RlbC5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSA/IG1vZGVsLnZhbHVlIDogJydcblxuICAgIGNvbnN0IGZpbHRlclRleHRBc1N0cmluZyA9IFN0cmluZyh0aGlzLl9maWx0ZXJUZXh0KVxuICAgIGNvbnN0IGJvZHkgPSB0aGlzLl9ndWkucXVlcnlTZWxlY3RvcignLmJvb2xlYW5GaWx0ZXJfX2JvZHknKVxuICAgIGJvZHkucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdJykuZm9yRWFjaChpID0+IHtcbiAgICAgIGlmIChpLnZhbHVlID09IGZpbHRlclRleHRBc1N0cmluZykge1xuICAgICAgICBpLmNoZWNrZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpLmNoZWNrZWQgPSBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBmaWx0ZXIgbW9kZWwgYXMgcGxhaW4gc3RyaW5nIHRvIGRpc3BsYXkgaW4gdGhlIGZsb2F0aW5nIGZpbHRlciBpbnB1dFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdCB8IG51bGx9IG1vZGVsXG4gICAqL1xuICBnZXRNb2RlbEFzU3RyaW5nKG1vZGVsKSB7XG4gICAgaWYgKCFtb2RlbCkge1xuICAgICAgcmV0dXJuICcnXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmlwSFRNTChcbiAgICAgIG1vZGVsLnZhbHVlID09PSAndHJ1ZSdcbiAgICAgICAgPyB0aGlzLl9ib29sZWFuRmlsdGVyVHJhbnNsYXRpb24udHJ1ZVxuICAgICAgICA6IHRoaXMuX2Jvb2xlYW5GaWx0ZXJUcmFuc2xhdGlvbi5mYWxzZVxuICAgIClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgZmlsdGVyIHN0YXRlXG4gICAqL1xuICByZXNldCgpIHtcbiAgICBjb25zdCBib2R5ID0gdGhpcy5fZ3VpLnF1ZXJ5U2VsZWN0b3IoJy5ib29sZWFuRmlsdGVyX19ib2R5JylcbiAgICBib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpLmZvckVhY2goaSA9PiB7XG4gICAgICBpLmNoZWNrZWQgPSBmYWxzZVxuICAgIH0pXG5cbiAgICBib2R5LnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLXRydWUnKS5jbGFzc0xpc3QucmVtb3ZlKCdhZy1jaGVja2VkJylcbiAgICBib2R5LnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLWZhbHNlJykuY2xhc3NMaXN0LnJlbW92ZSgnYWctY2hlY2tlZCcpXG4gICAgdHJ5IHtcbiAgICAgIGJvZHkucXVlcnlTZWxlY3RvcignLmFnLXdyYXBwZXItcmVzZXQnKS5jbGFzc0xpc3QucmVtb3ZlKCdhZy1jaGVja2VkJylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBwYXNzICovXG4gICAgfVxuXG4gICAgdGhpcy5fZmlsdGVyVGV4dCA9IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gdG8gc2VsZWN0aW9uIGNoYW5nZXMgaW4gdGhlIGZpbHRlciByYWRpbyBidXR0b25zIGFuZCB1cGRhdGUgdGhlIGN1cnJlbnQgZmlsdGVyIHRleHRcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKi9cbiAgX29uUmFkaW9DaGFuZ2UoaXNBcHBseUJ1dHRvbiwgZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0XG4gICAgdGhpcy5fZmlsdGVyVGV4dCA9IHRhcmdldC52YWx1ZVxuXG4gICAgY29uc3QgYm9keSA9IHRoaXMuX2d1aS5xdWVyeVNlbGVjdG9yKCcuYm9vbGVhbkZpbHRlcl9fYm9keScpXG5cbiAgICBpZiAoYm9keSkge1xuICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3RydWUtaW5wdXQnKSkge1xuICAgICAgICBib2R5LnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLXRydWUnKS5jbGFzc0xpc3QuYWRkKCdhZy1jaGVja2VkJylcbiAgICAgICAgYm9keS5xdWVyeVNlbGVjdG9yKCcuYWctd3JhcHBlci1mYWxzZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FnLWNoZWNrZWQnKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGJvZHkucXVlcnlTZWxlY3RvcignLmFnLXdyYXBwZXItcmVzZXQnKS5jbGFzc0xpc3QucmVtb3ZlKCdhZy1jaGVja2VkJylcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8qIHBhc3MgKi9cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYWxzZS1pbnB1dCcpKSB7XG4gICAgICAgIGJvZHkucXVlcnlTZWxlY3RvcignLmFnLXdyYXBwZXItdHJ1ZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FnLWNoZWNrZWQnKVxuICAgICAgICBib2R5LnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLWZhbHNlJykuY2xhc3NMaXN0LmFkZCgnYWctY2hlY2tlZCcpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYm9keS5xdWVyeVNlbGVjdG9yKCcuYWctd3JhcHBlci1yZXNldCcpLmNsYXNzTGlzdC5yZW1vdmUoJ2FnLWNoZWNrZWQnKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLyogcGFzcyAqL1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib2R5LnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLXRydWUnKS5jbGFzc0xpc3QucmVtb3ZlKCdhZy1jaGVja2VkJylcbiAgICAgICAgYm9keS5xdWVyeVNlbGVjdG9yKCcuYWctd3JhcHBlci1mYWxzZScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FnLWNoZWNrZWQnKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGJvZHkucXVlcnlTZWxlY3RvcignLmFnLXdyYXBwZXItcmVzZXQnKS5jbGFzc0xpc3QuYWRkKCdhZy1jaGVja2VkJylcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8qIHBhc3MgKi9cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmYWxzZSA9PT0gaXNBcHBseUJ1dHRvbikge1xuICAgICAgdGhpcy5fcGFyYW1zLmZpbHRlckNoYW5nZWRDYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byB0aGUgYnV0dG9uIGNsaWNrcyBpbiB0aGUgYnV0dG9ucyBwYW5lbCBhbmQgYXBwbHkgdGhlIGNob3NlbiBhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIF9BcHBseUZpbHRlclBhbmVsQnV0dG9uQ2xpY2soZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0XG5cbiAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnQlVUVE9OJykge1xuICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3Jlc2V0JykpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpXG4gICAgICAgIHRoaXMuX3BhcmFtcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbGVhcicpKSB7XG4gICAgICAgIHRoaXMucmVzZXQoKVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcHBseScpKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb29sZWFuRmlsdGVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQm9vbGVhbkZpbHRlci9Cb29sZWFuRmlsdGVyLmpzIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBhcmVudC5kb2N1bWVudC5oZWFkXG4gICAgICAgICAgICAgIH07XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0Jvb2xlYW5GaWx0ZXIvc3R5bGUuc2NzcyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmJvb2xlYW5GaWx0ZXJfX2JvZHlfX2xhYmVscyBsYWJlbHtkaXNwbGF5OmJsb2NrO3BhZGRpbmc6NnB4fS5ib29sZWFuRmlsdGVyX19ib2R5X19sYWJlbHMgbGFiZWx7ZGlzcGxheTpibG9jaztwYWRkaW5nOjZweCAwfS5ib29sZWFuRmlsdGVyX19ib2R5X19sYWJlbHMgbGFiZWwgc3BhbntwYWRkaW5nLWxlZnQ6NnB4fVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zcmMvQm9vbGVhbkZpbHRlci9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtYWdncmlkLWNvbXBvbmVudHMgbGliLlxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxuICpcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgTnVtYmVyRWRpdG9yIGZyb20gJy4vTnVtYmVyRWRpdG9yJ1xuXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJFZGl0b3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9OdW1iZXJFZGl0b3IvaW5kZXguanMiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtYWdncmlkLWNvbXBvbmVudHMgbGliLlxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxuICpcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCdcbmltcG9ydCB7IGF1dG9iaW5kLCBvdmVycmlkZSB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycydcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbi8qKlxuICogTnVtYmVycyBFZGl0b3JcbiAqXG4gKiBIYW5kbGUgbnVtYmVyIHZhbHVlcyBFZGl0aW5nXG4gKlxuICogfCBOYW1lICAgICAgICAgICAgICAgICAgXHR8IERlZmF1bHQgICAgIFx0fCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHR8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0fDotLS0tLS0tLS0tLS0tOnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgKipudW1iZXJNaW5WYWx1ZSoqICAgfCB1bmRlZmluZWQgICAgfCBtaW4gYWxsb3dlZCB2YWx1ZVxuICogfCAqKm51bWJlck1heFZhbHVlKiogICB8IHVuZGVmaW5lZCAgICB8IG1heCBhbGxvd2VkIHZhbHVlXG4gKiB8ICoqbnVtYmVyU3RlcFZhbHVlKiogICAgICAgfCB1bmRlZmluZWQgIFx0fCBudW1iZXIgb2Ygc3RlcCBieSBpbmNyZW1lbnQgb3IgZGVjcmVtZW50XG4gKiB8ICoqbnVtYmVyTWFzayoqICAgICAgIHwgdW5kZWZpbmVkICBcdHwgYSBiYmogbnVtYmVyIG1hc2sgdG8gdmFsaWRhdGUgdGhlIG51bWJlciBhZ2FpbnN0XG4gKiB8KipudW1iZXJHcm91cGluZ1NlcGFyYXRvcioqIHwgLCB8IGEgY2hhciB3aGljaCB3aWxsIGJlIHVzZWQgYXMgYSBncm91cGluZyBzZXBhcmF0b3IuIFRoZSBvcHRpb25zIGlzIHVzZWQgb25seSB3aGVuICoqbnVtYmVyTWFzayoqIGlzIGRlZmluZWQgfFxuICogfCoqbnVtYmVyRGVjaW1hbFNlcGFyYXRvcioqIHwgLiB8IGEgY2hhciB3aGljaCB3aWxsIGJlIHVzZWQgYXMgYSBkZWNpbWFsIHNlcGFyYXRvci4gVGhlIG9wdGlvbnMgaXMgdXNlZCBvbmx5IHdoZW4gKipudW1iZXJNYXNrKiogaXMgZGVmaW5lZCAgfFxuICogfCoqbnVtYmVyRm9yY2VUcmFpbGluZ1plcm9zKiogfCBmYWxzZSB8IEFmZmVjdHMgdGhlIG91dHB1dCBieSBzd2l0Y2hpbmcgdGhlIHdheSBhIG1hc2sgd2l0aCBcIiNcIiBjaGFyYWN0ZXJzIGluIHRoZSB0cmFpbGluZyBwb3NpdGlvbnMgaXMgZmlsbGVkLiBmb3IgZXhhbXBsZSwgdGhlIGZ1bmN0aW9uIE51bWJlck1hc2subWFzayguMTA6XCIjLiMjXCIpIHJldHVybnMgLjEwIGluc3RlYWQgb2YgLjEgLiBUaGUgb3B0aW9ucyBpcyB1c2VkIG9ubHkgd2hlbiAqKm51bWJlck1hc2sqKiBpcyBkZWZpbmVkfFxuICpcbiAqIEBhdXRob3IgSHl5YW4gQWJvIEZha2hlciA8aGFib2Zha2hlckBiYXNpcy5jb20+XG4gKi9cbmNsYXNzIE51bWJlckVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiAgQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBpbml0KHBhcmFtcykge1xuICAgIGNvbnN0IG1pbiA9IHRoaXMuZ2V0T3B0aW9uKCdudW1iZXJNaW5WYWx1ZScsIHBhcmFtcylcbiAgICBjb25zdCBtYXggPSB0aGlzLmdldE9wdGlvbignbnVtYmVyTWF4VmFsdWUnLCBwYXJhbXMpXG4gICAgY29uc3Qgc3RlcCA9IHRoaXMuZ2V0T3B0aW9uKCdudW1iZXJTdGVwVmFsdWUnLCBwYXJhbXMpXG4gICAgY29uc3QgbWFzayA9IHRoaXMuZ2V0T3B0aW9uKCdudW1iZXJNYXNrJywgcGFyYW1zKVxuXG4gICAgbGV0IHN0YXJ0VmFsdWVcblxuICAgIHRoaXMuX2ZvY3VzQWZ0ZXJBdHRhY2hlZCA9IHBhcmFtcy5jZWxsU3RhcnRlZEVkaXRcbiAgICBpZiAodGhpcy5fZm9jdXNBZnRlckF0dGFjaGVkKSB7XG4gICAgICBsZXQga2V5UHJlc3NCYWNrc3BhY2VPckRlbGV0ZSA9XG4gICAgICAgIHBhcmFtcy5rZXlQcmVzcyA9PSAzMiB8fCBwYXJhbXMua2V5UHJlc3MgPT0gNDYgLy8gc3BhY2UgLy8gZGVsZXRlXG5cbiAgICAgIGlmIChrZXlQcmVzc0JhY2tzcGFjZU9yRGVsZXRlKSB7XG4gICAgICAgIHN0YXJ0VmFsdWUgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2hhclByZXNzKSB7XG4gICAgICAgIHN0YXJ0VmFsdWUgPSBwYXJhbXMuY2hhclByZXNzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydFZhbHVlID0gcGFyYW1zLnZhbHVlXG4gICAgICAgIGlmIChwYXJhbXMua2V5UHJlc3MgIT0gMTEzKSB7XG4gICAgICAgICAgLy9GMlxuICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodEFsbE9uRm9jdXMgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRWYWx1ZSA9IHBhcmFtcy52YWx1ZVxuICAgIH1cblxuICAgIC8vIG1ha2UgcGFyYW1zIGl0IGFjY2Vzc2libGUgZnJvbSB0YWxsIG1ldGhvZHNcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXNcblxuICAgIC8vIGNyZWF0ZSB0aGUgaW5wdXQgd3JhcHBlclxuICAgIHRoaXMuX2d1aSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJylcbiAgICB0aGlzLl9ndWkuY2xhc3NOYW1lID0gJ251bWJlckVkaXRvciBhZy1jZWxsLWVkaXQtd3JhcHBlcidcbiAgICB0aGlzLl9ndWkudGFiSW5kZXggPSAnMCdcbiAgICB0aGlzLl9ndWkuaW5uZXJIVE1MID0gLyogaHRtbCAqLyBgXG4gICAgPGRpdiBjbGFzcz1cImFnLWNlbGwtZWRpdG9yIGFnLWxhYmVsZWQgYWctbGFiZWwtYWxpZ24tbGVmdCBhZy10ZXh0LWZpZWxkIGFnLWlucHV0LWZpZWxkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYWctd3JhcHBlciBhZy1pbnB1dC13cmFwcGVyIGFnLXRleHQtZmllbGQtaW5wdXQtd3JhcHBlclwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYFxuXG4gICAgLy8gY3JlYXRlIHRoZSBpbnB1dFxuICAgIHRoaXMuX2lucHV0R2VuZXJhdGVkSWQgPSBNYXRoLnJhbmRvbSgpXG4gICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAuc2xpY2UoMiwgMTApIC8vIGdlbmVyYXRlIHJhbmRvbSBpZFxuICAgIHRoaXMuX2lucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKVxuICAgIHRoaXMuX2lucHV0LmNsYXNzTmFtZSA9ICdudW1iZXJFZGl0b3JfX2lucHV0IGFnLWNlbGwtZWRpdC1pbnB1dCdcbiAgICB0aGlzLl9pbnB1dC5pZCA9IGBlbC0ke3RoaXMuX2lucHV0R2VuZXJhdGVkSWR9YFxuICAgIHRoaXMuX2lucHV0LnR5cGUgPSBtYXNrID8gJ3RleHQnIDogJ251bWJlcidcbiAgICB0aGlzLl9pbnB1dC52YWx1ZSA9IHN0YXJ0VmFsdWVcbiAgICB0aGlzLl9pbnB1dC50YWJJbmRleCA9IDBcblxuICAgIC8vIHBsYWNlIHRoZSBpbnB1dCBpbnNpZGUgdGhlIHdyYXBwZXJcbiAgICB0aGlzLl9ndWkucXVlcnlTZWxlY3RvcignLmFnLWlucHV0LXdyYXBwZXInKS5hcHBlbmRDaGlsZCh0aGlzLl9pbnB1dClcblxuICAgIGlmIChtaW4gIT09IG51bGwpIHtcbiAgICAgIG1hc2sgPyAodGhpcy5faW5wdXQuZGF0YXNldC5taW4gPSBtaW4pIDogKHRoaXMuX2lucHV0Lm1pbiA9IG1pbilcbiAgICB9XG5cbiAgICBpZiAobWF4ICE9PSBudWxsKSB7XG4gICAgICBtYXNrID8gKHRoaXMuX2lucHV0LmRhdGFzZXQubWF4ID0gbWF4KSA6ICh0aGlzLl9pbnB1dC5tYXggPSBtYXgpXG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgIT09IG51bGwpIHtcbiAgICAgIG1hc2sgPyAodGhpcy5faW5wdXQuZGF0YXNldC5zdGVwID0gc3RlcCkgOiAodGhpcy5faW5wdXQuc3RlcCA9IHN0ZXApXG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgaXMgYSBtYXNrIHRoZW4gd2UgdXNlIHRoZSBgQmFzaXMuSW5wdXRNYXNraW5nLk51bWJlcklucHV0YFxuICAgIGlmIChtYXNrKSB7XG4gICAgICBjb25zdCBncm91cGluZ1NlcGFyYXRvciA9IHRoaXMuZ2V0T3B0aW9uKFxuICAgICAgICAnbnVtYmVyR3JvdXBpbmdTZXBhcmF0b3InLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHRoaXMuZ2V0T3B0aW9uKCdudW1iZXJHcm91cFNlcCcsIHBhcmFtcylcbiAgICAgIClcbiAgICAgIGNvbnN0IGRlY2ltYWxTZXBhcmF0b3IgPSB0aGlzLmdldE9wdGlvbihcbiAgICAgICAgJ251bWJlckRlY2ltYWxTZXBhcmF0b3InLFxuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHRoaXMuZ2V0T3B0aW9uKCdudW1iZXJEZWNpbWFsU2VwJywgcGFyYW1zKVxuICAgICAgKVxuICAgICAgY29uc3QgZm9yY2VUcmFpbGluZ1plcm9zID0gdGhpcy5nZXRPcHRpb24oXG4gICAgICAgICdudW1iZXJGb3JjZVRyYWlsaW5nWmVyb3MnLFxuICAgICAgICBwYXJhbXNcbiAgICAgIClcblxuICAgICAgaWYgKGdyb3VwaW5nU2VwYXJhdG9yICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2lucHV0LmRhdGFzZXQuZ3JvdXBpbmdTZXBhcmF0b3IgPSBncm91cGluZ1NlcGFyYXRvclxuICAgICAgfVxuXG4gICAgICBpZiAoZGVjaW1hbFNlcGFyYXRvciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9pbnB1dC5kYXRhc2V0LmRlY2ltYWxTZXBhcmF0b3IgPSBkZWNpbWFsU2VwYXJhdG9yXG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZVRyYWlsaW5nWmVyb3MgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5faW5wdXQuZGF0YXNldC5mb3JjZVRyYWlsaW5nWmVyb3MgPSBmb3JjZVRyYWlsaW5nWmVyb3NcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5wdXQuZGF0YXNldC5tYXNrID0gbWFza1xuICAgICAgdGhpcy5fbnVtYmVySW5wdXQgPSBuZXcgQmFzaXMuSW5wdXRNYXNraW5nLk51bWJlcklucHV0KHtcbiAgICAgICAgZWxlbWVudHM6IFt0aGlzLl9pbnB1dF0sXG4gICAgICAgIC8vIGRvYzogdGhpcy5nZXREb2MocGFyYW1zKSxcbiAgICAgICAgb25VcGRhdGU6IHRoaXMuX29uTnVtYmVySW5wdXRVcGRhdGUsXG4gICAgICAgIG9uSW52YWxpZDogdGhpcy5fb25OdW1iZXJJbnB1dEludmFsaWQsXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25JbnB1dEtleURvd25VcClcbiAgICAgIHRoaXMuX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fb25JbnB1dEtleURvd25VcClcbiAgICAgIHRoaXMuX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uQ2hhbmdlKVxuICAgIH1cblxuICAgIHRoaXMuX2d1aS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25Db21wb25lbnRLZXlEb3duKVxuXG4gICAgLy8gdXBkYXRlIGBjdXJyZW50VmFsdWVgIHRoZSB2YWx1ZSB3aGljaCB0aGlzIGNvbXBvbmVudCBpcyBtYW5hZ2luZ1xuICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHN0YXJ0VmFsdWVcbiAgICB0aGlzLl9faXNNYXNrZWRfXyA9IG1hc2sgJiYgbWFzay5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiAgQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5fX2lzTWFza2VkX18pIHtcbiAgICAgIHRoaXMuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbklucHV0S2V5RG93blVwKVxuICAgICAgdGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9vbklucHV0S2V5RG93blVwKVxuICAgICAgdGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25DaGFuZ2UpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX251bWJlcklucHV0LmRlc3Ryb3koKVxuICAgIH1cblxuICAgIHRoaXMuX2d1aS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25Db21wb25lbnRLZXlEb3duKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIG9uY2UgYWZ0ZXIgR1VJIGlzIGF0dGFjaGVkIHRvIERPTS5cbiAgICpcbiAgICogTWFrZSBzdXJlIGNvbnRhaW5lciBpcyBhbHdheXMgZm9jdXNlZCB0byBsaXN0ZW4gdG8ga2V5IGNoYW5nZXNcbiAgICovXG4gIGFmdGVyR3VpQXR0YWNoZWQoKSB7XG4gICAgaWYgKCF0aGlzLl9faXNNYXNrZWRfXykge1xuICAgICAgdGhpcy5fdmFsaWRhdGVJbnB1dCh0aGlzLl9pbnB1dClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faGlnaGxpZ2h0QWxsT25Gb2N1cykge1xuICAgICAgdGhpcy5faW5wdXQuc2VsZWN0KClcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuX2ZvY3VzQWZ0ZXJBdHRhY2hlZCkge1xuICAgICAgICB0aGlzLmZvY3VzSW4oKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgVGhlIGNvbXBvbmVudCB2YWx1ZVxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBnZXRWYWx1ZSgpIHtcbiAgICBjb25zdCBjYXN0ZWQgPSBOdW1iZXIodGhpcy5fY3VycmVudFZhbHVlKVxuICAgIGNvbnN0IHJldFZhbHVlID0gaXNOYU4oY2FzdGVkKSA/IHRoaXMuX2N1cnJlbnRWYWx1ZSA6IGNhc3RlZFxuICAgIHJldHVybiB0aGlzLl9faXNNYXNrZWRfXyA/IHJldFZhbHVlIDogdGhpcy5fcGFyYW1zLnBhcnNlVmFsdWUocmV0VmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogSWYgZG9pbmcgZnVsbCByb3cgZWRpdCwgdGhlbiBnZXRzIGNhbGxlZCB3aGVuIHRhYmJpbmcgaW50byB0aGUgY2VsbC5cbiAgICovXG4gIGZvY3VzSW4oKSB7XG4gICAgaWYgKCF0aGlzLl9faXNNYXNrZWRfXykge1xuICAgICAgdGhpcy5faW5wdXQuZm9jdXMoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9pbnB1dC5jbGljaygpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIG9uY2UgYWZ0ZXIgaW5pdGlhbGl6ZWQgYW5kIHJldHVybnMgZmFsc2Ugc28gdGhlIGVkaXRvciBhcHBlYXJzIGluIHRoZSBjZWxsXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGFsd2F5cyBmYWxzZVxuICAgKiovXG4gIGlzUG9wdXAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGBjdXJyZW50VmFsdWVgIHdoZW4gdGhlIGNoZWNrYm94IHZhbHVlIGlzIGNoYW5nZWRcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25DaGFuZ2UoZXZlbnQpIHtcbiAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy5fdmFsaWRhdGVJbnB1dChldmVudC50YXJnZXQpXG4gICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHRoaXMuX2lucHV0LnZhbHVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgY3VycmVudCB2YWx1ZSB3aGVuIHRoZSBOdW1iZXJJbnB1dCBjb21wb25lbnRzIGZpcmUgdGhlIHVwZGF0ZVxuICAgKiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IF9tYXNrZWQgIHRoZSBtYXNrZWQgdmFsdWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHVubWFza2VkICB0aGUgdW5tYXNrZWQgdmFsdWVcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25OdW1iZXJJbnB1dFVwZGF0ZShfbWFza2VkLCB1bm1hc2tlZCkge1xuICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHVubWFza2VkXG4gICAgdGhpcy5mb2N1c0luKClcbiAgICAvLyB3ZSBwYXNzIHRoZSBsYXN0IGNhcHR1cmVkIGV2ZW50IGJhY2sgdG8gdGhlIGdyaWQgdG8gaGFuZGxlIGl0IGludGVybmFsbHlcbiAgICBpZiAodGhpcy5fX2xhc3RDb21wb25lbnRLZXlib2FyZFByZXNzX18pIHtcbiAgICAgIHRoaXMuX3BhcmFtcy5vbktleURvd24odGhpcy5fX2xhc3RDb21wb25lbnRLZXlib2FyZFByZXNzX18pXG4gICAgICB0aGlzLl9fbGFzdENvbXBvbmVudEtleWJvYXJkUHJlc3NfXyA9IG51bGxcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIE9uIGludmFsaWQgaW5wdXRzICwgdXBkYXRlIHRoZSBpbnB1dCB3aXRoIGEgY3VzdG9tIHZhbGlkaXR5IG1lc3NhZ2VcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBlcnJvciB0aGUgZXJyb3IgbWVzc2FnZSByZXBvcnRlZCBieSBOdW1iZXJJbnB1dFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBpbnB1dCBUaGUgaW5wdXQgZWxlbWVudCB1c2VkIGluc3RhbmNlXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX29uTnVtYmVySW5wdXRJbnZhbGlkKGVycm9yLCBpbnB1dCkge1xuICAgIHRoaXMuZm9jdXNJbigpXG4gICAgLy8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWUgb2YgdGhlIGNlbGxcbiAgICB0aGlzLl9jdXJyZW50VmFsdWUgPSB0aGlzLl9wYXJhbXMudmFsdWVcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoZXJyb3IpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KGVycm9yLm1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhcHR1cmUgYWxsIGtleWJvYXJkIGV2ZW50cyB0byBhbGxvdyB2YWx1ZSBwcm9jZXNzaW5nIGJ5IHRoZSBOdW1iZXJJbnB1dCBjb21wb25lbnRcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBlXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX29uQ29tcG9uZW50S2V5RG93bihlKSB7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZVxuXG4gICAgY29uc3QgaXNOYXZpZ2F0aW9uS2V5ID1cbiAgICAgIGtleSA9PT0gMzcgfHwgLy8gbGVmdFxuICAgICAga2V5ID09PSAzOCB8fCAvLyB1cFxuICAgICAga2V5ID09PSAzOSB8fCAvLyByaWdodFxuICAgICAga2V5ID09PSA0MCB8fCAvLyBkb3duXG4gICAgICBrZXkgPT09IDMzIHx8IC8vIHBhZ2UgdXBcbiAgICAgIGtleSA9PT0gMzQgfHwgLy8gcGFnZSBkb3duXG4gICAgICBrZXkgPT09IDM1IHx8IC8vIHBhZ2UgaG9tZVxuICAgICAga2V5ID09PSAzNiB8fCAvLyBwYWdlIGVuZFxuICAgICAga2V5ID09PSAxMyAvLyBlbnRlclxuXG4gICAgaWYgKGlzTmF2aWdhdGlvbktleSkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgIC8vIHNhdmUgdGhlIGxhc3QgY2FwdHVyZSBrZXkgc28gTnVtYmVySW5wdXQgY2FuIHBhc3MgaXQgYWdhaW4gdG8gdGhlIGdyaWQuXG4gICAgICB0aGlzLl9fbGFzdENvbXBvbmVudEtleWJvYXJkUHJlc3NfXyA9IGVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuIHRvIGtleSBjaGFuZ2VzIGFuZCB2YWxpZGF0ZSB0aGUgaW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25JbnB1dEtleURvd25VcChldmVudCkge1xuICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLl92YWxpZGF0ZUlucHV0KGV2ZW50LnRhcmdldClcblxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZVxuXG4gICAgaWYgKGtleSA9PSAzOCB8fCBrZXkgPT0gNDApIHtcbiAgICAgIC8vIHRvcCB8IGRvd25cbiAgICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHRoaXMuX2lucHV0LnZhbHVlXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgIH0gZWxzZSBpZiAoa2V5ID09IDEzIHx8IGtleSA9PT0gOSkge1xuICAgICAgLy8gZW50ZXJcbiAgICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHRoaXMuX2lucHV0LnZhbHVlXG4gICAgfVxuXG4gICAgLy8gd2UgcGFzcyB0aGUgbGFzdCBjYXB0dXJlZCBldmVudCBiYWNrIHRvIHRoZSBncmlkIHRvIGhhbmRsZSBpdCBpbnRlcm5hbGx5XG4gICAgaWYgKHRoaXMuX19sYXN0Q29tcG9uZW50S2V5Ym9hcmRQcmVzc19fKSB7XG4gICAgICB0aGlzLl9wYXJhbXMub25LZXlEb3duKHRoaXMuX19sYXN0Q29tcG9uZW50S2V5Ym9hcmRQcmVzc19fKVxuICAgICAgdGhpcy5fX2xhc3RDb21wb25lbnRLZXlib2FyZFByZXNzX18gPSBudWxsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIHRoZSBnaXZlbiBpbnB1dCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXQgaW5wdXQgZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIHdoZW4gdmFsaWQgLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIF92YWxpZGF0ZUlucHV0KGlucHV0KSB7XG4gICAgY29uc3QgaXNWYWxpZCA9IGlucHV0LmNoZWNrVmFsaWRpdHkoKVxuXG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdiYmotbWFzay1lcnJvcicpXG4gICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdiYmotbWFzay1zdWNjZXNzJylcbiAgICAgIC8vIHJlc3RvcmUgdGhlIG9yaWdpbmFsIHZhbHVlXG4gICAgICB0aGlzLl9jdXJyZW50VmFsdWUgPSB0aGlzLl9wYXJhbXMudmFsdWVcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnYmJqLW1hc2stZXJyb3InKVxuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnYmJqLW1hc2stc3VjY2VzcycpXG4gICAgfVxuXG4gICAgcmV0dXJuIGlzVmFsaWRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJFZGl0b3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9OdW1iZXJFZGl0b3IvTnVtYmVyRWRpdG9yLmpzIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBhcmVudC5kb2N1bWVudC5oZWFkXG4gICAgICAgICAgICAgIH07XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL051bWJlckVkaXRvci9zdHlsZS5zY3NzIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIubnVtYmVyRWRpdG9ye292ZXJmbG93OmhpZGRlbn0ubnVtYmVyRWRpdG9yIC5udW1iZXJJbnB1dE1hc2tfX3dyYXB7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3g7b3V0bGluZTpub25lO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowO21hcmdpbjowO2Rpc3BsYXk6ZmxleDtmbGV4OjEgMSBhdXRvO2FsaWduLWl0ZW1zOmNlbnRlcjtsaW5lLWhlaWdodDpub3JtYWw7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6aGlkZGVufS5udW1iZXJFZGl0b3IgLmJiai1tYXNrLWVycm9ye2JveC1zaGFkb3c6MCAtMnB4IDAgI2U5MWU2MyBpbnNldH0ubnVtYmVyRWRpdG9yIC5iYmotbWFzay1zdWNjZXNze2JveC1zaGFkb3c6MCAtMnB4IDAgIzRjYWY1MCBpbnNldH0ubnVtYmVyRWRpdG9yX19pbnB1dHtwYWRkaW5nLWxlZnQ6NnB4O2JvcmRlcjp0aGluIHNvbGlkIHZhcigtLWFnLWlucHV0LWZvY3VzLWJvcmRlci1jb2xvciwgcmdiYSgzMywxNTAsMjQzLDAuNCkpO2JvcmRlci1yYWRpdXM6M3B4O2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvcik7Y29sb3I6aW5oZXJpdH0uYWctdGhlbWUtYWxwaW5lIC5udW1iZXJFZGl0b3JfX2lucHV0LC5hZy10aGVtZS1iYWxoYW0gLm51bWJlckVkaXRvcl9faW5wdXQsLmFnLXRoZW1lLW1hdGVyaWFsIC5udW1iZXJFZGl0b3JfX2lucHV0e2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvciwgI2ZmZil9LmFnLXRoZW1lLWFscGluZS1kYXJrIC5udW1iZXJFZGl0b3JfX2lucHV0LC5hZy10aGVtZS1iYWxoYW0tZGFyayAubnVtYmVyRWRpdG9yX19pbnB1dHtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFnLWJhY2tncm91bmQtY29sb3IsICMyZDM0MzYpfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zcmMvTnVtYmVyRWRpdG9yL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBUZXh0RWRpdG9yIGZyb20gJy4vVGV4dEVkaXRvcidcblxuZXhwb3J0IGRlZmF1bHQgVGV4dEVkaXRvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1RleHRFZGl0b3IvaW5kZXguanMiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtYWdncmlkLWNvbXBvbmVudHMgbGliLlxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxuICpcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCdcbmltcG9ydCB7IGF1dG9iaW5kLCBvdmVycmlkZSB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycydcblxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbi8qKlxuICogVGV4dCBFZGl0b3JcbiAqXG4gKiBIYW5kbGUgdGV4dCB2YWx1ZXMgRWRpdGluZ1xuICpcbiAqIHwgTmFtZSAgICAgICAgICAgICAgICAgIFx0fCBEZWZhdWx0ICAgICBcdHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0fFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdHw6LS0tLS0tLS0tLS0tLTp8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICoqdGV4dFBhdHRlcm4qKiAgIHwgdW5kZWZpbmVkICAgIHwgQSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCB0aGUgaW5wdXQncyB2YWx1ZSBtdXN0IG1hdGNoIGluIG9yZGVyIGZvciB0aGUgdmFsdWUgdG8gcGFzcyBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAqIHwgKip0ZXh0UmVxdWlyZWQqKiAgIHwgdW5kZWZpbmVkICAgIHwgQm9vbGVhbi4gQSB2YWx1ZSBpcyByZXF1aXJlZCB0byBjb25zaWRlciB0aGUgaW5wdXQgdmFsaWRcbiAqIHwgKip0ZXh0TWFzayoqICAgfCB1bmRlZmluZWQgICAgfCBBIGJiaiBzdHJpbmcgbWFzayB0byB2YWxpZGF0ZSB0aGUgdmFsdWVcbiAqIHwgKip0ZXh0VGl0bGUqKiAgIHwgbnVsbCAgICB8IFRoZSBpbnB1dCB0aXRsZSAsIHdoZW4gbnVsbCBhbmQgdGhlICoqdGV4dE1hc2sqKiBvcHRpb25zIGlzIGRlZmluZWQgLCB0aGVuIHdlIHVzZSB0aGUgbWFzayBhcyB0aXRsZSAsIHdoZW4gc2V0IHRvIGBkZWZhdWx0YCB3ZSB0aGUgYnJvd3NlcidzIGRlZmF1bHQgdGl0bGUgLCBvdGhlcndpc2UgdGhlIHZhbHVlIGRlZmluZWQgaW4gdGhpcyBvcHRpb25cbiAqXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxuICovXG5jbGFzcyBUZXh0RWRpdG9yIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqICBAaW5oZXJpdERvY1xuICAgKi9cbiAgQG92ZXJyaWRlXG4gIGluaXQocGFyYW1zKSB7XG4gICAgY29uc3QgcGF0dGVybiA9IHRoaXMuZ2V0T3B0aW9uKCd0ZXh0UGF0dGVybicsIHBhcmFtcylcbiAgICBjb25zdCByZXF1aXJlZCA9IHRoaXMuZ2V0T3B0aW9uKCd0ZXh0UmVxdWlyZWQnLCBwYXJhbXMpXG4gICAgY29uc3QgbWFzayA9IHRoaXMuZ2V0T3B0aW9uKCd0ZXh0TWFzaycsIHBhcmFtcylcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuZ2V0T3B0aW9uKCd0ZXh0VGl0bGUnLCBwYXJhbXMpXG5cbiAgICBsZXQgc3RhcnRWYWx1ZVxuXG4gICAgdGhpcy5fZm9jdXNBZnRlckF0dGFjaGVkID0gcGFyYW1zLmNlbGxTdGFydGVkRWRpdFxuICAgIGlmICh0aGlzLl9mb2N1c0FmdGVyQXR0YWNoZWQpIHtcbiAgICAgIGxldCBrZXlQcmVzc0JhY2tzcGFjZU9yRGVsZXRlID1cbiAgICAgICAgcGFyYW1zLmtleVByZXNzID09IDMyIHx8IHBhcmFtcy5rZXlQcmVzcyA9PSA0NiAvLyBzcGFjZSAvLyBkZWxldGVcblxuICAgICAgaWYgKGtleVByZXNzQmFja3NwYWNlT3JEZWxldGUpIHtcbiAgICAgICAgc3RhcnRWYWx1ZSA9ICcnXG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5jaGFyUHJlc3MpIHtcbiAgICAgICAgc3RhcnRWYWx1ZSA9IHBhcmFtcy5jaGFyUHJlc3NcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0VmFsdWUgPSBwYXJhbXMudmFsdWVcbiAgICAgICAgaWYgKHBhcmFtcy5rZXlQcmVzcyAhPSAxMTMpIHtcbiAgICAgICAgICAvL0YyXG4gICAgICAgICAgdGhpcy5faGlnaGxpZ2h0QWxsT25Gb2N1cyA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydFZhbHVlID0gcGFyYW1zLnZhbHVlXG4gICAgfVxuXG4gICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zXG5cbiAgICB0aGlzLl9ndWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRoaXMuX2d1aS5jbGFzc05hbWUgPSAndGV4dEVkaXRvciBhZy1jZWxsLWVkaXQtd3JhcHBlcidcbiAgICB0aGlzLl9ndWkudGFiSW5kZXggPSAnMCdcbiAgICB0aGlzLl9ndWkuaW5uZXJIVE1MID0gLyogaHRtbCAqLyBgXG4gICAgPGRpdiBjbGFzcz1cImFnLWNlbGwtZWRpdG9yIGFnLWxhYmVsZWQgYWctbGFiZWwtYWxpZ24tbGVmdCBhZy10ZXh0LWZpZWxkIGFnLWlucHV0LWZpZWxkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYWctd3JhcHBlciBhZy1pbnB1dC13cmFwcGVyIGFnLXRleHQtZmllbGQtaW5wdXQtd3JhcHBlclwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYFxuXG4gICAgLy8gaW5wdXRcbiAgICB0aGlzLl9pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JylcbiAgICB0aGlzLl9pbnB1dC5jbGFzc05hbWUgPVxuICAgICAgJ3RleHRFZGl0b3JfX2lucHV0IGFnLWNlbGwtZWRpdC1pbnB1dCBhZy1pbnB1dC1maWVsZC1pbnB1dCBhZy10ZXh0LWZpZWxkLWlucHV0J1xuICAgIHRoaXMuX2lucHV0LmlkID0gYGVsLSR7TWF0aC5yYW5kb20oKVxuICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgLnNsaWNlKDIsIDEwKX1gIC8vIGdlbmVyYXRlIHJhbmRvbSBpZFxuICAgIHRoaXMuX2lucHV0LnR5cGUgPSAndGV4dCdcbiAgICB0aGlzLl9pbnB1dC52YWx1ZSA9IHN0YXJ0VmFsdWVcbiAgICB0aGlzLl9pbnB1dC50YWJJbmRleCA9IDBcblxuICAgIHRoaXMuX2d1aS5xdWVyeVNlbGVjdG9yKCcuYWctaW5wdXQtd3JhcHBlcicpLmFwcGVuZENoaWxkKHRoaXMuX2lucHV0KVxuXG4gICAgaWYgKHBhdHRlcm4gIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX2lucHV0LnNldEF0dHJpYnV0ZSgncGF0dGVybicsIHBhdHRlcm4pXG4gICAgfVxuXG4gICAgaWYgKHJlcXVpcmVkID09PSB0cnVlKSB7XG4gICAgICB0aGlzLl9pbnB1dC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgJ3JlcXVpcmVkJylcbiAgICB9XG5cbiAgICBpZiAodGl0bGUgIT09IG51bGwpIHtcbiAgICAgIGlmICh0aXRsZSAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgIHRoaXMuX2lucHV0LnRpdGxlID0gdGl0bGVcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1hc2spIHtcbiAgICAgIHRoaXMuX2lucHV0LnRpdGxlID0gbWFza1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGlzIGEgbWFzayB0aGVuIHdlIHVzZSB0aGUgYEJhc2lzLklucHV0TWFza2luZy5UZXh0SW5wdXRgXG4gICAgaWYgKG1hc2spIHtcbiAgICAgIHRoaXMuX2lucHV0LmRhdGFzZXQubWFzayA9IG1hc2tcbiAgICAgIHRoaXMuX3RleHRJbnB1dCA9IG5ldyBCYXNpcy5JbnB1dE1hc2tpbmcuVGV4dElucHV0KHtcbiAgICAgICAgZWxlbWVudHM6IFt0aGlzLl9pbnB1dF0sXG4gICAgICAgIGRvYzogdGhpcy5nZXREb2MocGFyYW1zKSxcbiAgICAgICAgb25VcGRhdGU6IHRoaXMuX29uVGV4dElucHV0VXBkYXRlLFxuICAgICAgICBvbkludmFsaWQ6IHRoaXMuX29uVGV4dElucHV0SW52YWxpZCxcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbklucHV0S2V5RG93blVwKVxuICAgICAgdGhpcy5faW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9vbklucHV0S2V5RG93blVwKVxuICAgICAgdGhpcy5faW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkNoYW5nZSlcbiAgICAgIHRoaXMuX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uQ2hhbmdlKVxuICAgIH1cblxuICAgIHRoaXMuX2d1aS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25Db21wb25lbnRLZXlEb3duKVxuXG4gICAgLy8gdXBkYXRlIGBjdXJyZW50VmFsdWVgIHRoZSB2YWx1ZSB3aGljaCB0aGlzIGNvbXBvbmVudCBpcyBtYW5hZ2luZ1xuICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHN0YXJ0VmFsdWVcbiAgICB0aGlzLl9faXNNYXNrZWRfXyA9IG1hc2sgJiYgbWFzay5sZW5ndGhcbiAgfVxuXG4gIC8qKlxuICAgKiAgQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5fX2lzTWFza2VkX18pIHtcbiAgICAgIHRoaXMuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbklucHV0S2V5RG93blVwKVxuICAgICAgdGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9vbklucHV0S2V5RG93blVwKVxuICAgICAgdGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkNoYW5nZSlcbiAgICAgIHRoaXMuX2lucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uQ2hhbmdlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl90ZXh0SW5wdXQuZGVzdHJveSgpXG4gICAgfVxuXG4gICAgdGhpcy5fZ3VpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9vbkNvbXBvbmVudEtleURvd24pXG4gIH1cblxuICAvKipcbiAgICogR2V0cyBjYWxsZWQgb25jZSBhZnRlciBHVUkgaXMgYXR0YWNoZWQgdG8gRE9NLlxuICAgKlxuICAgKiBNYWtlIHN1cmUgY29udGFpbmVyIGlzIGFsd2F5cyBmb2N1c2VkIHRvIGxpc3RlbiB0byBrZXkgY2hhbmdlc1xuICAgKi9cbiAgYWZ0ZXJHdWlBdHRhY2hlZCgpIHtcbiAgICBpZiAoIXRoaXMuX19pc01hc2tlZF9fKSB7XG4gICAgICB0aGlzLl92YWxpZGF0ZUlucHV0KHRoaXMuX2lucHV0KVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9oaWdobGlnaHRBbGxPbkZvY3VzKSB7XG4gICAgICB0aGlzLl9pbnB1dC5zZWxlY3QoKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5fZm9jdXNBZnRlckF0dGFjaGVkKSB7XG4gICAgICAgIHRoaXMuZm9jdXNJbigpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBUaGUgY29tcG9uZW50IHZhbHVlXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn1cbiAgICovXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXJhbXMucGFyc2VWYWx1ZSh0aGlzLl9jdXJyZW50VmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogSWYgZG9pbmcgZnVsbCByb3cgZWRpdCwgdGhlbiBnZXRzIGNhbGxlZCB3aGVuIHRhYmJpbmcgaW50byB0aGUgY2VsbC5cbiAgICovXG4gIGZvY3VzSW4oKSB7XG4gICAgdGhpcy5faW5wdXQuZm9jdXMoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIG9uY2UgYWZ0ZXIgaW5pdGlhbGl6ZWQgYW5kIHJldHVybnMgZmFsc2Ugc28gdGhlIGVkaXRvciBhcHBlYXJzIGluIHRoZSBjZWxsXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGFsd2F5cyBmYWxzZVxuICAgKiovXG4gIGlzUG9wdXAoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjdXJyZW50IHZhbHVlIHdoZW4gdGhlIFRleHRJbnB1dCBjb21wb25lbnQgZmlyZXMgdGhlIHVwZGF0ZVxuICAgKiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IF9tYXNrZWQgIHRoZSBtYXNrZWQgdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVubWFza2VkICB0aGUgdW5tYXNrZWQgdmFsdWVcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25UZXh0SW5wdXRVcGRhdGUoX21hc2tlZCwgdW5tYXNrZWQsIGlucHV0KSB7XG4gICAgdGhpcy5fY3VycmVudFZhbHVlID0gdW5tYXNrZWRcbiAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnJylcbiAgICB0aGlzLmZvY3VzSW4oKVxuICAgIC8vIHdlIHBhc3MgdGhlIGxhc3QgY2FwdHVyZWQgZXZlbnQgYmFjayB0byB0aGUgZ3JpZCB0byBoYW5kbGUgaXQgaW50ZXJuYWxseVxuICAgIGlmICh0aGlzLl9fbGFzdENvbXBvbmVudEtleWJvYXJkUHJlc3NfXykge1xuICAgICAgdGhpcy5fcGFyYW1zLm9uS2V5RG93bih0aGlzLl9fbGFzdENvbXBvbmVudEtleWJvYXJkUHJlc3NfXylcbiAgICAgIHRoaXMuX19sYXN0Q29tcG9uZW50S2V5Ym9hcmRQcmVzc19fID0gbnVsbFxuICAgIH1cbiAgfVxuICAvKipcbiAgICogT24gaW52YWxpZCBpbnB1dHMgLCB1cGRhdGUgdGhlIGlucHV0IHdpdGggYSBjdXN0b20gdmFsaWRpdHkgbWVzc2FnZVxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGVycm9yIHRoZSBlcnJvciBtZXNzYWdlIHJlcG9ydGVkIGJ5IFRleHRJbnB1dFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBpbnB1dCBUaGUgaW5wdXQgZWxlbWVudCB1c2VkIGluc3RhbmNlXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX29uVGV4dElucHV0SW52YWxpZChlcnJvciwgaW5wdXQpIHtcbiAgICB0aGlzLmZvY3VzSW4oKVxuICAgIC8vIHJlc3RvcmUgdGhlIG9yaWdpbmFsIHZhbHVlIG9mIHRoZSBjZWxsXG4gICAgdGhpcy5fY3VycmVudFZhbHVlID0gdGhpcy5fcGFyYW1zLnZhbHVlXG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYXB0dXJlIGFsbCBrZXlib2FyZCBldmVudHMgdG8gYWxsb3cgdmFsdWUgcHJvY2Vzc2luZyBieSB0aGUgTnVtYmVySW5wdXQgY29tcG9uZW50XG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZVxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIF9vbkNvbXBvbmVudEtleURvd24oZSkge1xuICAgIGNvbnN0IGtleSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGVcblxuICAgIGNvbnN0IGlzTmF2aWdhdGlvbktleSA9XG4gICAgICBrZXkgPT09IDM3IHx8IC8vIGxlZnRcbiAgICAgIGtleSA9PT0gMzggfHwgLy8gdXBcbiAgICAgIGtleSA9PT0gMzkgfHwgLy8gcmlnaHRcbiAgICAgIGtleSA9PT0gNDAgfHwgLy8gZG93blxuICAgICAga2V5ID09PSAzMyB8fCAvLyBwYWdlIHVwXG4gICAgICBrZXkgPT09IDM0IHx8IC8vIHBhZ2UgZG93blxuICAgICAga2V5ID09PSAzNSB8fCAvLyBwYWdlIGhvbWVcbiAgICAgIGtleSA9PT0gMzYgfHwgLy8gcGFnZSBlbmRcbiAgICAgIGtleSA9PT0gMTMgLy8gZW50ZXJcblxuICAgIGlmIChpc05hdmlnYXRpb25LZXkpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAvLyBzYXZlIHRoZSBsYXN0IGNhcHR1cmUga2V5IHNvIE51bWJlcklucHV0IGNhbiBwYXNzIGl0IGFnYWluIHRvIHRoZSBncmlkLlxuICAgICAgdGhpcy5fX2xhc3RDb21wb25lbnRLZXlib2FyZFByZXNzX18gPSBlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExpc3RlbiB0byBrZXkgY2hhbmdlcyBhbmQgdmFsaWRhdGUgdGhlIGlucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX29uSW5wdXRLZXlEb3duVXAoZXZlbnQpIHtcbiAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy5fdmFsaWRhdGVJbnB1dChldmVudC50YXJnZXQpXG5cbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IGtleSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGVcblxuICAgIGlmIChrZXkgPT0gMTMgfHwga2V5ID09PSA5KSB7XG4gICAgICAvLyBlbnRlclxuICAgICAgdGhpcy5fY3VycmVudFZhbHVlID0gdGhpcy5faW5wdXQudmFsdWVcbiAgICB9XG5cbiAgICAvLyB3ZSBwYXNzIHRoZSBsYXN0IGNhcHR1cmVkIGV2ZW50IGJhY2sgdG8gdGhlIGdyaWQgdG8gaGFuZGxlIGl0IGludGVybmFsbHlcbiAgICBpZiAodGhpcy5fX2xhc3RDb21wb25lbnRLZXlib2FyZFByZXNzX18pIHtcbiAgICAgIHRoaXMuX3BhcmFtcy5vbktleURvd24odGhpcy5fX2xhc3RDb21wb25lbnRLZXlib2FyZFByZXNzX18pXG4gICAgICB0aGlzLl9fbGFzdENvbXBvbmVudEtleWJvYXJkUHJlc3NfXyA9IG51bGxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGBjdXJyZW50VmFsdWVgIG9uIHRoZSBpbnB1dCB2YWx1ZSBpcyBjaGFuZ2VkIGFuZCBpdCBpcyB2YWxpZFxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIF9vbkNoYW5nZShldmVudCkge1xuICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLl92YWxpZGF0ZUlucHV0KGV2ZW50LnRhcmdldClcbiAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgdGhpcy5fY3VycmVudFZhbHVlID0gdGhpcy5faW5wdXQudmFsdWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgdGhlIGdpdmVuIGlucHV0IGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dCBpbnB1dCBlbGVtZW50XG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgd2hlbiB2YWxpZCAsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgX3ZhbGlkYXRlSW5wdXQoaW5wdXQpIHtcbiAgICBjb25zdCBpc1ZhbGlkID0gaW5wdXQuY2hlY2tWYWxpZGl0eSgpXG5cbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ2Jiai1tYXNrLWVycm9yJylcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ2Jiai1tYXNrLXN1Y2Nlc3MnKVxuICAgICAgLy8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgICAgIHRoaXMuX2N1cnJlbnRWYWx1ZSA9IHRoaXMuX3BhcmFtcy52YWx1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKCdiYmotbWFzay1lcnJvcicpXG4gICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdiYmotbWFzay1zdWNjZXNzJylcbiAgICB9XG5cbiAgICByZXR1cm4gaXNWYWxpZFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRFZGl0b3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9UZXh0RWRpdG9yL1RleHRFZGl0b3IuanMiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucGFyZW50LmRvY3VtZW50LmhlYWRcbiAgICAgICAgICAgICAgfTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVGV4dEVkaXRvci9zdHlsZS5zY3NzIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGV4dEVkaXRvcntvdmVyZmxvdzpoaWRkZW59LnRleHRFZGl0b3IgLnRleHRJbnB1dE1hc2tfX3dyYXB7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3g7b3V0bGluZTpub25lO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzowO21hcmdpbjowO2Rpc3BsYXk6ZmxleDtmbGV4OjEgMSBhdXRvO2FsaWduLWl0ZW1zOmNlbnRlcjtsaW5lLWhlaWdodDpub3JtYWw7cG9zaXRpb246cmVsYXRpdmU7b3ZlcmZsb3c6aGlkZGVufS50ZXh0RWRpdG9yIC5iYmotbWFzay1lcnJvcntib3gtc2hhZG93OjAgLTJweCAwICNlOTFlNjMgaW5zZXR9LnRleHRFZGl0b3IgLmJiai1tYXNrLXN1Y2Nlc3N7Ym94LXNoYWRvdzowIC0ycHggMCAjNGNhZjUwIGluc2V0fS50ZXh0RWRpdG9yX19pbnB1dHtwYWRkaW5nLWxlZnQ6NnB4O2JvcmRlcjp0aGluIHNvbGlkIHZhcigtLWFnLWlucHV0LWZvY3VzLWJvcmRlci1jb2xvciwgcmdiYSgzMywxNTAsMjQzLDAuNCkpO2JvcmRlci1yYWRpdXM6M3B4O2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvcik7Y29sb3I6aW5oZXJpdH0uYWctdGhlbWUtYWxwaW5lIC50ZXh0RWRpdG9yX19pbnB1dCwuYWctdGhlbWUtYmFsaGFtIC50ZXh0RWRpdG9yX19pbnB1dCwuYWctdGhlbWUtbWF0ZXJpYWwgLnRleHRFZGl0b3JfX2lucHV0e2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvciwgI2ZmZil9LmFnLXRoZW1lLWFscGluZS1kYXJrIC50ZXh0RWRpdG9yX19pbnB1dCwuYWctdGhlbWUtYmFsaGFtLWRhcmsgLnRleHRFZGl0b3JfX2lucHV0e2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvciwgIzJkMzQzNil9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9UZXh0RWRpdG9yL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50J1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ2xvZGFzaC1lcy90ZW1wbGF0ZSdcblxuLyoqXG4gKiBOdW1iZXJzIEVkaXRvclxuICpcbiAqIEhhbmRsZSBudW1iZXIgdmFsdWVzIEVkaXRpbmdcbiAqXG4gKiB8IE5hbWUgICAgICAgICAgICAgICAgICBcdHwgRGVmYXVsdCAgICAgXHR8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHR8Oi0tLS0tLS0tLS0tLS06fC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAqKnJlbmRlclRlbXBsYXRlKiogICB8IHVuZGVmaW5lZCAgICB8IGxvZGFzaCB0ZW1wbGF0ZVxuICpcbiAqIEBhdXRob3IgSHl5YW4gQWJvIEZha2hlciA8aGFib2Zha2hlckBiYXNpcy5jb20+XG4gKi9cbmNsYXNzIFRlbXBsYXRlUmVuZGVyZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAvKipcbiAgICogQ29uc3RydWN0IG5ldyBUZW1wbGF0ZVJlbmRlcmVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG5cbiAgICAvLyB3aWxsIHRoaXMgYWZmZWN0IEJCaiBidWkgP1xuICAgIHRoaXMuX2d1aSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGhpcy5fZ3VpLmNsYXNzTmFtZSA9ICd0ZW1wbGF0ZVJlbmRlcmVyIGFnLWNlbGwtd3JhcHBlcidcbiAgICB0aGlzLl9ndWkuc3R5bGUud2lkdGggPSAnMTAwJSdcbiAgICB0aGlzLl9ndWkuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnXG4gICAgdGhpcy5fZ3VpLnN0eWxlLmxpbmVIZWlnaHQgPSAnbm9ybWFsJ1xuICB9XG5cbiAgLyoqXG4gICAqICBAaW5oZXJpdERvY1xuICAgKi9cbiAgaW5pdChwYXJhbXMpIHtcbiAgICB0aGlzLnJlZnJlc2gocGFyYW1zLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqICBAaW5oZXJpdERvY1xuICAgKi9cbiAgZ2V0R3VpKCkge1xuICAgIHJldHVybiB0aGlzLl9ndWlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoIHRoZSBjZWxsIGxcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBjZWxsIHJlbmRlcmVyIHBhcmFtc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzSW5pdCB0cnVlIHdoZW4gdGhpcyBtZXRob2QgaXMgYmVpbmcgY2FsbGVkIGluIGBpbml0YCBwaGFzZSAsIGZhbHNlIG90aGVyd2lzZVxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSByZWZyZXNoIHN1Y2NlZWRlZCwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAgICovXG4gIHJlZnJlc2gocGFyYW1zLCBpc0luaXQpIHtcbiAgICBpZiAoaXNJbml0KSB7XG4gICAgICB0aGlzLl9jb21waWxlZFRlbXBsYXRlID0gdGVtcGxhdGUoXG4gICAgICAgIHRoaXMuZ2V0T3B0aW9uKCdyZW5kZXJUZW1wbGF0ZScsIHBhcmFtcywgJycpXG4gICAgICApXG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRcblxuICAgIGlmICh0eXBlb2YgdGhpcy5fY29tcGlsZWRUZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29udGVudCA9IHRoaXMuX2NvbXBpbGVkVGVtcGxhdGUoeyBwYXJhbXMgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCA9IHBhcmFtcy52YWx1ZUZvcm1hdHRlZCA/IHBhcmFtcy52YWx1ZUZvcm1hdHRlZCA6IHBhcmFtcy52YWx1ZVxuICAgIH1cblxuICAgIHRoaXMuX2d1aS5pbm5lckhUTUwgPSBjb250ZW50XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRlbXBsYXRlUmVuZGVyZXJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9UZW1wbGF0ZVJlbmRlcmVyL1RlbXBsYXRlUmVuZGVyZXIuanMiLCJpbXBvcnQgYXNzaWduSW5XaXRoIGZyb20gJy4vYXNzaWduSW5XaXRoLmpzJztcbmltcG9ydCBhdHRlbXB0IGZyb20gJy4vYXR0ZW1wdC5qcyc7XG5pbXBvcnQgYmFzZVZhbHVlcyBmcm9tICcuL19iYXNlVmFsdWVzLmpzJztcbmltcG9ydCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluIGZyb20gJy4vX2N1c3RvbURlZmF1bHRzQXNzaWduSW4uanMnO1xuaW1wb3J0IGVzY2FwZVN0cmluZ0NoYXIgZnJvbSAnLi9fZXNjYXBlU3RyaW5nQ2hhci5qcyc7XG5pbXBvcnQgaXNFcnJvciBmcm9tICcuL2lzRXJyb3IuanMnO1xuaW1wb3J0IGlzSXRlcmF0ZWVDYWxsIGZyb20gJy4vX2lzSXRlcmF0ZWVDYWxsLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQgcmVJbnRlcnBvbGF0ZSBmcm9tICcuL19yZUludGVycG9sYXRlLmpzJztcbmltcG9ydCB0ZW1wbGF0ZVNldHRpbmdzIGZyb20gJy4vdGVtcGxhdGVTZXR0aW5ncy5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG52YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgcmVFbXB0eVN0cmluZ01pZGRsZSA9IC9cXGIoX19wIFxcKz0pICcnIFxcKy9nLFxuICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaFxuICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAqL1xudmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xudmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xudmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gKlxuICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J3RlbXBsYXRlU291cmNlc1tuXSddXG4gKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICpcbiAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICpcbiAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAqXG4gKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gKlxuICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gKlxuICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAqXG4gKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gKlxuICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAqIGNvbXBpbGVkKGRhdGEpO1xuICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAqXG4gKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAqIGNvbXBpbGVkLnNvdXJjZTtcbiAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAqIC8vICAgcmV0dXJuIF9fcDtcbiAqIC8vIH1cbiAqXG4gKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAqXG4gKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAqICAgdmFyIEpTVCA9IHtcXFxuICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gKiAgIH07XFxcbiAqICcpO1xuICovXG5mdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgdmFyIHNldHRpbmdzID0gdGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzLl8udGVtcGxhdGVTZXR0aW5ncyB8fCB0ZW1wbGF0ZVNldHRpbmdzO1xuXG4gIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gIHZhciBpc0VzY2FwaW5nLFxuICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgLCAnZycpO1xuXG4gIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAvLyB3aXRoIGxvb2t1cCAoaW4gY2FzZSBvZiBlLmcuIHByb3RvdHlwZSBwb2xsdXRpb24pLCBhbmQgc3RyaXAgbmV3bGluZXMgaWYgYW55LlxuICAvLyBBIG5ld2xpbmUgd291bGRuJ3QgYmUgYSB2YWxpZCBzb3VyY2VVUkwgYW55d2F5LCBhbmQgaXQnZCBlbmFibGUgY29kZSBpbmplY3Rpb24uXG4gIHZhciBzb3VyY2VVUkwgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgID8gKCcvLyMgc291cmNlVVJMPScgK1xuICAgICAgIChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9bXFxyXFxuXS9nLCAnICcpICtcbiAgICAgICAnXFxuJylcbiAgICA6ICcnO1xuXG4gIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgIH1cbiAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICB9XG4gICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgIH1cbiAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9KTtcblxuICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAvLyBMaWtlIHdpdGggc291cmNlVVJMLCB3ZSB0YWtlIGNhcmUgdG8gbm90IGNoZWNrIHRoZSBvcHRpb24ncyBwcm90b3R5cGUsXG4gIC8vIGFzIHRoaXMgY29uZmlndXJhdGlvbiBpcyBhIGNvZGUgaW5qZWN0aW9uIHZlY3Rvci5cbiAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gIH1cbiAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAodmFyaWFibGVcbiAgICAgID8gJydcbiAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICApICtcbiAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgIChpc0VzY2FwaW5nXG4gICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICA6ICcnXG4gICAgKSArXG4gICAgKGlzRXZhbHVhdGluZ1xuICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgOiAnO1xcbidcbiAgICApICtcbiAgICBzb3VyY2UgK1xuICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgfSk7XG5cbiAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICB0aHJvdyByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGVtcGxhdGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RlbXBsYXRlLmpzIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQgY3JlYXRlQXNzaWduZXIgZnJvbSAnLi9fY3JlYXRlQXNzaWduZXIuanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGFsaWFzIGV4dGVuZFdpdGhcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKiBAc2VlIF8uYXNzaWduV2l0aFxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICogfVxuICpcbiAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAqXG4gKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICovXG52YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25JbldpdGg7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2Fzc2lnbkluV2l0aC5qcyIsImltcG9ydCBhc3NpZ25WYWx1ZSBmcm9tICcuL19hc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5T2JqZWN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduVmFsdWU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25WYWx1ZS5qcyIsImltcG9ydCBiYXNlSXNOYXRpdmUgZnJvbSAnLi9fYmFzZUlzTmF0aXZlLmpzJztcbmltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL19nZXRWYWx1ZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hdGl2ZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX29iamVjdFRvU3RyaW5nLmpzIiwiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNNYXNrZWQuanMiLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU291cmNlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmFsdWU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRWYWx1ZS5qcyIsImltcG9ydCBiYXNlUmVzdCBmcm9tICcuL19iYXNlUmVzdC5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUFzc2lnbmVyLmpzIiwiaW1wb3J0IGFwcGx5IGZyb20gJy4vX2FwcGx5LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlclJlc3Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyUmVzdC5qcyIsImltcG9ydCBiYXNlU2V0VG9TdHJpbmcgZnJvbSAnLi9fYmFzZVNldFRvU3RyaW5nLmpzJztcbmltcG9ydCBzaG9ydE91dCBmcm9tICcuL19zaG9ydE91dC5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRvU3RyaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9TdHJpbmcuanMiLCJpbXBvcnQgY29uc3RhbnQgZnJvbSAnLi9jb25zdGFudC5qcyc7XG5pbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSAnLi9fZGVmaW5lUHJvcGVydHkuanMnO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkoZnVuYywgJ3RvU3RyaW5nJywge1xuICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgJ3ZhbHVlJzogY29uc3RhbnQoc3RyaW5nKSxcbiAgICAnd3JpdGFibGUnOiB0cnVlXG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZVNldFRvU3RyaW5nO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVNldFRvU3RyaW5nLmpzIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnN0YW50O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jb25zdGFudC5qcyIsIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hvcnRPdXQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zaG9ydE91dC5qcyIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzSW4gZnJvbSAnLi9fYmFzZUtleXNJbi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzSW47XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsImltcG9ydCBiYXNlSXNBcmd1bWVudHMgZnJvbSAnLi9fYmFzZUlzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcmd1bWVudHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzQXJndW1lbnRzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzQXJndW1lbnRzLmpzIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5pbXBvcnQgc3R1YkZhbHNlIGZyb20gJy4vc3R1YkZhbHNlLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCBpc0J1ZmZlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkZhbHNlLmpzIiwiaW1wb3J0IGJhc2VJc1R5cGVkQXJyYXkgZnJvbSAnLi9fYmFzZUlzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNUeXBlZEFycmF5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1R5cGVkQXJyYXkuanMiLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1R5cGVkQXJyYXk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNUeXBlZEFycmF5LmpzIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19ub2RlVXRpbC5qcyIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5c0luIGZyb20gJy4vX25hdGl2ZUtleXNJbi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzSW47XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5c0luLmpzIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXNJbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXNJbi5qcyIsImltcG9ydCBhcHBseSBmcm9tICcuL19hcHBseS5qcyc7XG5pbXBvcnQgYmFzZVJlc3QgZnJvbSAnLi9fYmFzZVJlc3QuanMnO1xuaW1wb3J0IGlzRXJyb3IgZnJvbSAnLi9pc0Vycm9yLmpzJztcblxuLyoqXG4gKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAqIH0sICc+Xz4nKTtcbiAqXG4gKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICogICBlbGVtZW50cyA9IFtdO1xuICogfVxuICovXG52YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGF0dGVtcHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2F0dGVtcHQuanMiLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVmFsdWVzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVZhbHVlcy5qcyIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqVmFsdWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1c3RvbURlZmF1bHRzQXNzaWduSW47XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jdXN0b21EZWZhdWx0c0Fzc2lnbkluLmpzIiwiLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG52YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgJ1xcXFwnOiAnXFxcXCcsXG4gIFwiJ1wiOiBcIidcIixcbiAgJ1xcbic6ICduJyxcbiAgJ1xccic6ICdyJyxcbiAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAnXFx1MjAyOSc6ICd1MjAyOSdcbn07XG5cbi8qKlxuICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlc2NhcGVTdHJpbmdDaGFyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXNjYXBlU3RyaW5nQ2hhci5qcyIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzIGZyb20gJy4vX2Jhc2VLZXlzLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXMuanMiLCJpbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXMgZnJvbSAnLi9fbmF0aXZlS2V5cy5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzLmpzIiwiaW1wb3J0IGVzY2FwZSBmcm9tICcuL2VzY2FwZS5qcyc7XG5pbXBvcnQgcmVFc2NhcGUgZnJvbSAnLi9fcmVFc2NhcGUuanMnO1xuaW1wb3J0IHJlRXZhbHVhdGUgZnJvbSAnLi9fcmVFdmFsdWF0ZS5qcyc7XG5pbXBvcnQgcmVJbnRlcnBvbGF0ZSBmcm9tICcuL19yZUludGVycG9sYXRlLmpzJztcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciB0ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge1JlZ0V4cH1cbiAgICovXG4gICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgJ2ltcG9ydHMnOiB7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgJ18nOiB7ICdlc2NhcGUnOiBlc2NhcGUgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZVNldHRpbmdzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90ZW1wbGF0ZVNldHRpbmdzLmpzIiwiaW1wb3J0IGVzY2FwZUh0bWxDaGFyIGZyb20gJy4vX2VzY2FwZUh0bWxDaGFyLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xudmFyIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgIHJlSGFzVW5lc2NhcGVkSHRtbCA9IFJlZ0V4cChyZVVuZXNjYXBlZEh0bWwuc291cmNlKTtcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAqXG4gKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICpcbiAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICogWFNTIHZlY3RvcnMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICA6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXNjYXBlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lc2NhcGUuanMiLCJpbXBvcnQgYmFzZVByb3BlcnR5T2YgZnJvbSAnLi9fYmFzZVByb3BlcnR5T2YuanMnO1xuXG4vKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xudmFyIGh0bWxFc2NhcGVzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuXG4vKipcbiAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gKi9cbnZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuZXhwb3J0IGRlZmF1bHQgZXNjYXBlSHRtbENoYXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lc2NhcGVIdG1sQ2hhci5qcyIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5T2Y7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUHJvcGVydHlPZi5qcyIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9TdHJpbmc7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVG9TdHJpbmcuanMiLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N5bWJvbC5qcyIsIi8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG52YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZztcblxuZXhwb3J0IGRlZmF1bHQgcmVFc2NhcGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUVzY2FwZS5qcyIsIi8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG52YXIgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2c7XG5cbmV4cG9ydCBkZWZhdWx0IHJlRXZhbHVhdGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUV2YWx1YXRlLmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IEltYWdlUmVuZGVyZXIgZnJvbSAnLi9JbWFnZVJlbmRlcmVyJ1xuXG5leHBvcnQgZGVmYXVsdCBJbWFnZVJlbmRlcmVyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvSW1hZ2VSZW5kZXJlci9pbmRleC5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBUZW1wbGF0ZVJlbmRlcmVyIGZyb20gJy4uL1RlbXBsYXRlUmVuZGVyZXInXG5cbi8qKlxuICogTnVtYmVycyBFZGl0b3JcbiAqXG4gKiBIYW5kbGUgbnVtYmVyIHZhbHVlcyBFZGl0aW5nXG4gKlxuICogfCBOYW1lICAgICAgICAgICAgICAgICAgXHR8IERlZmF1bHQgICAgIFx0fCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHR8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0fDotLS0tLS0tLS0tLS0tOnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgKippbWFnZVJlbmRlcmVyV2lkdGgqKiAgIHwgMjhweCAgICB8IGltYWdlIHdpZHRoXG4gKiB8ICoqaW1hZ2VSZW5kZXJlckhlaWdodCoqICAgfCAyOHB4ICAgIHwgaW1hZ2UgaGVpZ2h0XG4gKiB8ICoqaW1hZ2VSZW5kZXJlckxpc3QqKiAgICAgICB8IHt9ICBcdHwgYSBsaXN0IG9mIHdoaWNoIG1hcHMgaW1hZ2VzIHdpdGggY2VsbCB2YWx1ZXMgYXMgSlNPTiBvciBwbGFpbiBKUyBvYmplY3RcbiAqXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9sb2Rhc2guY29tL2RvY3MvNC4xNy4xNSN0ZW1wbGF0ZVxuICovXG5jbGFzcyBJbWFnZVJlbmRlcmVyIGV4dGVuZHMgVGVtcGxhdGVSZW5kZXJlciB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVmcmVzaChwYXJhbXMsIGlzSW5pdCkge1xuICAgIGNvbnN0IHZhbHVlID0gcGFyYW1zLnZhbHVlXG4gICAgY29uc3QgaW1hZ2VXaWR0aCA9IHRoaXMuZ2V0T3B0aW9uKCdpbWFnZVJlbmRlcmVyV2lkdGgnLCBwYXJhbXMsICcyOHB4JylcbiAgICBjb25zdCBpbWFnZUhlaWdodCA9IHRoaXMuZ2V0T3B0aW9uKCdpbWFnZVJlbmRlcmVySGVpZ2h0JywgcGFyYW1zLCAnMjhweCcpXG4gICAgbGV0IGltYWdlTGlzdCA9IHRoaXMuZ2V0T3B0aW9uKCdpbWFnZVJlbmRlcmVyTGlzdCcsIHBhcmFtcylcblxuICAgIHRyeSB7XG4gICAgICBpbWFnZUxpc3QgPSBKU09OLnBhcnNlKGltYWdlTGlzdClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbWFnZUxpc3QgPSBpbWFnZUxpc3QgfHwge31cbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbiAgICBpZiAoaW1hZ2VMaXN0ICYmIGltYWdlTGlzdC5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICAgIHBhcmFtcy5yZW5kZXJUZW1wbGF0ZSA9IC8qaHRtbCovIGBcbiAgICAgICAgPGltZyBcbiAgICAgICAgICBzcmM9XCIke2ltYWdlTGlzdFtwYXJhbXMudmFsdWVdfVwiIFxuICAgICAgICAgIHdpZHRoPVwiJHtpbWFnZVdpZHRofVwiXG4gICAgICAgICAgaGVpZ2h0PVwiJHtpbWFnZUhlaWdodH1cIiAgXG4gICAgICAgIC8+XG4gICAgICBgXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy5yZW5kZXJUZW1wbGF0ZSA9IHZhbHVlXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnJlZnJlc2gocGFyYW1zLCBpc0luaXQpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VSZW5kZXJlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0ltYWdlUmVuZGVyZXIvSW1hZ2VSZW5kZXJlci5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCBEYXRlVGltZUZpbHRlciBmcm9tICcuL0RhdGVUaW1lRmlsdGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZUZpbHRlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0RhdGVUaW1lRmlsdGVyL2luZGV4LmpzIiwiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzIGxpYi5cbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cbiAqXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXG4gKi9cblxuaW1wb3J0IHsgYXV0b2JpbmQsIG92ZXJyaWRlLCByZWFkb25seSB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycydcbmltcG9ydCB1dGNUb1pvbmVkVGltZSBmcm9tICdkYXRlLWZucy10ei91dGNUb1pvbmVkVGltZSdcbmltcG9ydCB7IHdpdGhFdmVudHNNaXhpbiB9IGZyb20gJy4uL0V2ZW50c01peGluJ1xuaW1wb3J0IERhdGVUaW1lSW5wdXQgZnJvbSAnLi4vRGF0ZVRpbWVJbnB1dCdcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50J1xuaW1wb3J0ICcuL3N0eWxlLnNjc3MnXG5cbmNvbnN0IFRPS0VOUyA9IHtcbiAgVE9LRU5fRVFVQUw6ICdlcXVhbHMnLFxuICBUT0tFTl9OT1RfRVFVQUw6ICdub3RFcXVhbCcsXG4gIFRPS0VOX0xFU1M6ICdsZXNzVGhhbicsXG4gIFRPS0VOX0dSRUFURVI6ICdncmVhdGVyVGhhbicsXG4gIFRPS0VOX1JBTkdFOiAnaW5SYW5nZScsXG4gIFRPS0VOX0FORDogJ0FORCcsXG4gIFRPS0VOX09SOiAnT1InLFxufVxuXG5Ad2l0aEV2ZW50c01peGluXG5jbGFzcyBDb25kaXRpb25QYW5lbCBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBDb25zdGFudCB3aGljaCBkZXNjcmliZXMgdGhlIGV2ZW50IG5hbWUgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gdGhlIG9wdGlvblxuICAgKiBzdGF0ZSBpcyBjaGFuZ2VkXG4gICAqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBAcmVhZG9ubHlcbiAgc3RhdGljIE9OX0NPTkRJVElPTl9DSEFOR0VEID0gJ0NvbmRpdGlvblBhbmVsLk9OX0NPTkRJVElPTl9DSEFOR0VEJ1xuICAvKipcbiAgICogVGhlIG9wdGlvbiBzdGF0ZVxuICAgKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgQHJlYWRvbmx5XG4gIHN0YXRlID0ge1xuICAgIHR5cGU6IFRPS0VOUy5UT0tFTl9FUVVBTCxcbiAgICBmaWx0ZXI6IG51bGwsXG4gICAgZmlsdGVyVG86IG51bGwsXG4gIH1cblxuICAvKipcbiAgICogQHR5cGUge0RhdGVUaW1lSW5wdXR9XG4gICAqL1xuICBfZmlsdGVyVGltZUlucHV0ID0gbmV3IERhdGVUaW1lSW5wdXQoKVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7RGF0ZVRpbWVJbnB1dH1cbiAgICovXG4gIF9maWx0ZXJUb0RhdGVUaW1lSW5wdXQgPSBuZXcgRGF0ZVRpbWVJbnB1dCgpXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGVuYWJsZWQgZmlsdGVyIHR5cGVzXG4gICAqXG4gICAqIEB0eXBlIHtBcnJheX1cbiAgICovXG4gIF9maWx0ZXJPcHRpb25zID0gW11cblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgZW5hYmxlZCBmaWx0ZXIgdHlwZVxuICAgKlxuICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgKi9cbiAgX2RlZmF1bHRPcHRpb24gPSAtMVxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBpbml0KHBhcmFtcykge1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldExvY2FsZVRleHRGdW5jKClcblxuICAgIHRoaXMuX2ZpbHRlck9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbignZmlsdGVyT3B0aW9ucycsIHBhcmFtcywgW1xuICAgICAgVE9LRU5TLlRPS0VOX0VRVUFMLFxuICAgICAgVE9LRU5TLlRPS0VOX05PVF9FUVVBTCxcbiAgICAgIFRPS0VOUy5UT0tFTl9MRVNTLFxuICAgICAgVE9LRU5TLlRPS0VOX0dSRUFURVIsXG4gICAgICBUT0tFTlMuVE9LRU5fUkFOR0UsXG4gICAgXSlcblxuICAgIHRoaXMuX2RlZmF1bHRPcHRpb24gPSB0aGlzLmdldE9wdGlvbihcbiAgICAgICdkZWZhdWx0T3B0aW9uJyxcbiAgICAgIHBhcmFtcyxcbiAgICAgIHRoaXMuX2ZpbHRlck9wdGlvbnMuaW5kZXhPZihUT0tFTlMuVE9LRU5fRVFVQUwpID4gLTFcbiAgICAgICAgPyBUT0tFTlMuVE9LRU5fRVFVQUxcbiAgICAgICAgOiB0aGlzLl9maWx0ZXJPcHRpb25zWzBdXG4gICAgKVxuXG4gICAgdGhpcy5zdGF0ZS50eXBlID0gdGhpcy5fZGVmYXVsdE9wdGlvblxuXG4gICAgY29uc3Qgb3B0aW9uc1RyYW5zbGF0aW9ucyA9IHtcbiAgICAgIFtUT0tFTlMuVE9LRU5fRVFVQUxdOiB0cmFuc2xhdGUoVE9LRU5TLlRPS0VOX0VRVUFMLCAnRXF1YWxzJyksXG4gICAgICBbVE9LRU5TLlRPS0VOX05PVF9FUVVBTF06IHRyYW5zbGF0ZShUT0tFTlMuVE9LRU5fRVFVQUwsICdOb3QgZXF1YWwnKSxcbiAgICAgIFtUT0tFTlMuVE9LRU5fTEVTU106IHRyYW5zbGF0ZShUT0tFTlMuVE9LRU5fTEVTUywgJ0xlc3MgdGhhbicpLFxuICAgICAgW1RPS0VOUy5UT0tFTl9HUkVBVEVSXTogdHJhbnNsYXRlKFRPS0VOUy5UT0tFTl9HUkVBVEVSLCAnR3JlYXRlciB0aGFuJyksXG4gICAgICBbVE9LRU5TLlRPS0VOX1JBTkdFXTogdHJhbnNsYXRlKFRPS0VOUy5UT0tFTl9SQU5HRSwgJ0luIHJhbmdlJyksXG4gICAgfVxuXG4gICAgdGhpcy5fZ3VpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLl9ndWkuY2xhc3NOYW1lID0gJ2RhdGVUaW1lRmlsdGVyIGFnLWZpbHRlci1ib2R5LXdyYXBwZXInXG4gICAgdGhpcy5fZ3VpLmlubmVySFRNTCA9IC8qIGh0bWwgKi8gYFxuICAgICAgPHNlbGVjdCBjbGFzcz1cImFnLWZpbHRlci1zZWxlY3QgZGF0ZVRpbWVGaWx0ZXJfX3NlbGVjdFwiICAke1xuICAgICAgICB0aGlzLl9maWx0ZXJPcHRpb25zLmxlbmd0aCA9PT0gMSA/ICdkaXNhYmxlZCcgOiAnJ1xuICAgICAgfT5cbiAgICAgICAgJHt0aGlzLl9maWx0ZXJPcHRpb25zLm1hcChcbiAgICAgICAgICBvcHRpb24gPT4gLyogaHRtbCAqLyBgXG4gICAgICAgICAgPG9wdGlvbiBcbiAgICAgICAgICAgIHZhbHVlPVwiJHtvcHRpb259XCIgXG4gICAgICAgICAgICAke29wdGlvbiA9PT0gdGhpcy5fZGVmYXVsdE9wdGlvbiA/ICdzZWxlY3RlZCcgOiAnJ31cbiAgICAgICAgICA+XG4gICAgICAgICAgICAgICR7b3B0aW9uc1RyYW5zbGF0aW9uc1tvcHRpb25dfVxuICAgICAgICAgIDwvb3B0aW9uPmBcbiAgICAgICAgKX1cbiAgICAgIDwvc2VsZWN0PlxuICAgICAgPGRpdiBjbGFzcz1cImFnLWZpbHRlci1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhZy1maWx0ZXItZGF0ZS1mcm9tXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWctZmlsdGVyLWRhdGUtdG8gYWctaGlkZGVuXCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgYFxuXG4gICAgdGhpcy5fZmlsdGVyVGltZUlucHV0LmluaXQocGFyYW1zKVxuICAgIHRoaXMuX2ZpbHRlclRpbWVJbnB1dC5vbihEYXRlVGltZUlucHV0Lk9OX0RBVEVfQ0hBTkdFRCwgc2VsZWN0ZWREYXRlID0+IHtcbiAgICAgIHRoaXMuc3RhdGUuZmlsdGVyID0gc2VsZWN0ZWREYXRlXG4gICAgICB0aGlzLm5vdGlmeShDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgICB9KVxuXG4gICAgdGhpcy5fZmlsdGVyVG9EYXRlVGltZUlucHV0LmluaXQocGFyYW1zKVxuICAgIHRoaXMuX2ZpbHRlclRvRGF0ZVRpbWVJbnB1dC5vbihcbiAgICAgIERhdGVUaW1lSW5wdXQuT05fREFURV9DSEFOR0VELFxuICAgICAgc2VsZWN0ZWREYXRlID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5maWx0ZXJUbyA9IHNlbGVjdGVkRGF0ZVxuICAgICAgICB0aGlzLm5vdGlmeShDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLl9ndWlcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuYWctZmlsdGVyLWRhdGUtZnJvbScpXG4gICAgICAuYXBwZW5kQ2hpbGQodGhpcy5fZmlsdGVyVGltZUlucHV0LmdldEd1aSgpKVxuICAgIHRoaXMuX2d1aVxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5hZy1maWx0ZXItZGF0ZS10bycpXG4gICAgICAuYXBwZW5kQ2hpbGQodGhpcy5fZmlsdGVyVG9EYXRlVGltZUlucHV0LmdldEd1aSgpKVxuXG4gICAgY29uc3Qgc2VsZWN0ID0gdGhpcy5fZ3VpLnF1ZXJ5U2VsZWN0b3IoJy5hZy1maWx0ZXItc2VsZWN0JylcbiAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25UeXBlQ2hhbmdlKVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh0aGlzLl9zdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgQG92ZXJyaWRlXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5vZmYoQ29uZGl0aW9uUGFuZWwuT05fQ09ORElUSU9OX0NIQU5HRUQpXG4gICAgdGhpcy5fZmlsdGVyVGltZUlucHV0LmRlc3Ryb3koKVxuICAgIHRoaXMuX2ZpbHRlclRvRGF0ZVRpbWVJbnB1dC5kZXN0cm95KClcbiAgICB0aGlzLl9ndWlcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuYWctZmlsdGVyLXNlbGVjdCcpXG4gICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25UeXBlQ2hhbmdlKVxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBzdGF0ZVxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zdGF0ZS5maWx0ZXIgPSBudWxsXG4gICAgdGhpcy5zdGF0ZS5maWx0ZXJUbyA9IG51bGxcbiAgICB0aGlzLl9maWx0ZXJUaW1lSW5wdXQucmVzZXQoKVxuICAgIHRoaXMuX2ZpbHRlclRvRGF0ZVRpbWVJbnB1dC5yZXNldCgpXG5cbiAgICB0aGlzLm5vdGlmeShDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGNvbmRpdGlvbiBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAgICovXG4gIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgc3RhdGUgPSBzdGF0ZSB8fCB7fVxuICAgIHRoaXMuc3RhdGUuZmlsdGVyID0gc3RhdGUuZmlsdGVyIHx8IG51bGxcbiAgICB0aGlzLnN0YXRlLmZpbHRlclRvID0gc3RhdGUuZmlsdGVyVG8gfHwgbnVsbFxuICAgIHRoaXMuc3RhdGUudHlwZSA9IHN0YXRlLnR5cGUgfHwgdGhpcy5fZGVmYXVsdE9wdGlvblxuXG4gICAgY29uc3QgZ3VpID0gdGhpcy5fZ3VpXG4gICAgY29uc3QgZmlsdGVyT3B0aW9ucyA9IHRoaXMuX2ZpbHRlck9wdGlvbnNcbiAgICBjb25zdCBzZWxlY3RFbCA9IGd1aS5xdWVyeVNlbGVjdG9yKCcuYWctZmlsdGVyLXNlbGVjdCcpXG4gICAgY29uc3QgZmlsdGVySW5wdXQgPSB0aGlzLl9maWx0ZXJUaW1lSW5wdXRcbiAgICBjb25zdCBmaWx0ZXJUb0lucHV0ID0gdGhpcy5fZmlsdGVyVG9EYXRlVGltZUlucHV0XG5cbiAgICBzZWxlY3RFbC5zZWxlY3RlZEluZGV4ID0gZmlsdGVyT3B0aW9ucy5pbmRleE9mKHRoaXMuc3RhdGUudHlwZSlcbiAgICBmaWx0ZXJJbnB1dC5zZXREYXRlKHRoaXMuc3RhdGUuZmlsdGVyKVxuICAgIGZpbHRlclRvSW5wdXQuc2V0RGF0ZSh0aGlzLnN0YXRlLmZpbHRlclRvKVxuXG4gICAgLy8gd2UgZmlyZSBvbiBjaGFuZ2UgZXZlbnQgaW4gY2FzZSB0aGUgZmlsdGVyIG9wdGlvbnMgY29udGFpblxuICAgIC8vIG9uZSBvcHRpb24gd2hpY2ggaXMgaW4gUmFuZ2UgXCJpblJhbmdlXCJcbiAgICBpZiAoJ2NyZWF0ZUV2ZW50JyBpbiBkb2N1bWVudCkge1xuICAgICAgY29uc3QgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKVxuICAgICAgZXZ0LmluaXRFdmVudCgnY2hhbmdlJywgZmFsc2UsIHRydWUpXG4gICAgICBzZWxlY3RFbC5kaXNwYXRjaEV2ZW50KGV2dClcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0RWwuZmlyZUV2ZW50KCdvbmNoYW5nZScpXG4gICAgfVxuXG4gICAgdGhpcy5ub3RpZnkoQ29uZGl0aW9uUGFuZWwuT05fQ09ORElUSU9OX0NIQU5HRUQsIHRoaXMuc3RhdGUpXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBzdGF0ZSB3aXRoIHRoZSBzZWxlY3RlZCB0eXBlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25UeXBlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCBlbCA9IGUudGFyZ2V0XG4gICAgY29uc3QgZmlsdGVyRGF0ZVRvID0gdGhpcy5fZ3VpLnF1ZXJ5U2VsZWN0b3IoJy5hZy1maWx0ZXItZGF0ZS10bycpXG5cbiAgICB0aGlzLnN0YXRlLnR5cGUgPSBlbC5vcHRpb25zW2VsLnNlbGVjdGVkSW5kZXhdLnZhbHVlXG5cbiAgICBpZiAodGhpcy5zdGF0ZS50eXBlID09PSBUT0tFTlMuVE9LRU5fUkFOR0UpIHtcbiAgICAgIGZpbHRlckRhdGVUby5jbGFzc0xpc3QucmVtb3ZlKCdhZy1oaWRkZW4nKVxuICAgIH0gZWxzZSB7XG4gICAgICBmaWx0ZXJEYXRlVG8uY2xhc3NMaXN0LmFkZCgnYWctaGlkZGVuJylcbiAgICB9XG5cbiAgICB0aGlzLm5vdGlmeShDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgfVxufVxuXG5Ad2l0aEV2ZW50c01peGluXG5jbGFzcyBKb2luQ29uZGl0aW9uUGFuZWwgZXh0ZW5kcyBDb21wb25lbnQge1xuICAvKipcbiAgICogQ29uc3RhbnQgd2hpY2ggZGVzY3JpYmVzIHRoZSBldmVudCBuYW1lIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIHRoZSBqb2luXG4gICAqIHN0YXRlIGlzIGNoYW5nZWRcbiAgICpcbiAgICogQHR5cGUge1N0cmluZ31cbiAgICovXG4gIEByZWFkb25seVxuICBzdGF0aWMgT05fSk9JTl9DT05ESVRJT05fQ0hBTkdFRCA9XG4gICAgJ0pvaW5Db25kaXRpb25QYW5lbC5PTl9KT0lOX0NPTkRJVElPTl9DSEFOR0VEJ1xuICAvKipcbiAgICogVGhlIGpvaW4gc3RhdGVcbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIEByZWFkb25seVxuICBzdGF0ZSA9IHtcbiAgICBjb25kaXRpb24xOiB7fSxcbiAgICBjb25kaXRpb24yOiB7fSxcbiAgICBvcGVyYXRvcjogVE9LRU5TLlRPS0VOX09SLFxuICB9XG5cbiAgLyoqXG4gICAqIEB0eXBlIHtPcHRpb259XG4gICAqL1xuICBfZmlyc3RDb25kaXRpb25QYW5lbCA9IG5ldyBDb25kaXRpb25QYW5lbCgpXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtPcHRpb259XG4gICAqL1xuICBfc2Vjb25kQ29uZGl0aW9uUGFuZWwgPSBuZXcgQ29uZGl0aW9uUGFuZWwoKVxuXG4gIC8qKlxuICAgKiBAdHlwZSB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBfb3BlcmF0b3JQYW5lbCA9IG51bGxcblxuICAvKipcbiAgICogUGFyYW1zIHJlY2VpdmVkIGFmdGVyIGluaXRcbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIF9wYXJhbXMgPSBudWxsXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgQG92ZXJyaWRlXG4gIGluaXQocGFyYW1zKSB7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmFwaS5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0TG9jYWxlVGV4dEZ1bmMoKVxuXG4gICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zXG5cbiAgICB0aGlzLl9maXJzdENvbmRpdGlvblBhbmVsLmluaXQocGFyYW1zKVxuICAgIHRoaXMuX2ZpcnN0Q29uZGl0aW9uUGFuZWwub24oXG4gICAgICBDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCxcbiAgICAgIHRoaXMuX29uRmlyc3RDb25kaXRpb25DaGFuZ2VkXG4gICAgKVxuXG4gICAgdGhpcy5fc2Vjb25kQ29uZGl0aW9uUGFuZWwuaW5pdChwYXJhbXMpXG4gICAgdGhpcy5fc2Vjb25kQ29uZGl0aW9uUGFuZWwub24oXG4gICAgICBDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCxcbiAgICAgIHRoaXMuX29uU2Vjb25kQ29uZGl0aW9uQ2hhbmdlZFxuICAgIClcbiAgICB0aGlzLl9zZWNvbmRDb25kaXRpb25QYW5lbC5nZXRHdWkoKS5jbGFzc0xpc3QuYWRkKCdhZy1oaWRkZW4nKVxuXG4gICAgdGhpcy5fZ3VpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLl9ndWkuY2xhc3NOYW1lID0gJ2FnLWZpbHRlci1ib2R5LXdyYXBwZXIgYWctc2ltcGxlLWZpbHRlci1ib2R5LXdyYXBwZXInXG4gICAgdGhpcy5fZ3VpLmFwcGVuZENoaWxkKHRoaXMuX2ZpcnN0Q29uZGl0aW9uUGFuZWwuZ2V0R3VpKCkpXG5cbiAgICAvL3ByZXR0aWVyLWlnbm9yZVxuICAgIGNvbnN0IGlkT25lID0gJ18nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpLFxuICAgICAgICAgIGlkVHdvID0gJ18nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpXG5cbiAgICB0aGlzLl9vcGVyYXRvclBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB0aGlzLl9vcGVyYXRvclBhbmVsLmNsYXNzTmFtZSA9ICdhZy1maWx0ZXItY29uZGl0aW9uIGFnLWhpZGRlbidcbiAgICB0aGlzLl9vcGVyYXRvclBhbmVsLmlubmVySFRNTCA9IC8qIGh0bWwgKi8gYFxuICAgIDxkaXYgY2xhc3M9XCJhZy1maWx0ZXItY29uZGl0aW9uLW9wZXJhdG9yIGFnLWZpbHRlci1jb25kaXRpb24tb3BlcmF0b3ItYW5kIGFnLWxhYmVsZWQgYWctbGFiZWwtYWxpZ24tcmlnaHQgYWctcmFkaW8tYnV0dG9uIGFnLWlucHV0LWZpZWxkXCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImFnLWlucHV0LWZpZWxkLWxhYmVsIGFnLWxhYmVsIGFnLXJhZGlvLWJ1dHRvbi1sYWJlbFwiIGZvcj1cIiR7aWRPbmV9XCI+ICAgICAgIFxuICAgICAgICAgICR7dHJhbnNsYXRlKCdhbmRDb25kaXRpb24nLCAnQU5EJyl9XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhZy13cmFwcGVyLWFuZCBhZy13cmFwcGVyIGFnLWlucHV0LXdyYXBwZXIgYWctcmFkaW8tYnV0dG9uLWlucHV0LXdyYXBwZXIgYWctY2hlY2tlZFwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7aWRPbmV9XCIgY2xhc3M9XCJBTkQgYWctaW5wdXQtZmllbGQtaW5wdXQgYWctcmFkaW8tYnV0dG9uLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIm9yQW5kUmFkaW9cIiB2YWx1ZT1cIiR7XG4gICAgICBUT0tFTlMuVE9LRU5fQU5EXG4gICAgfVwiLz4gICAgICAgICAgICAgIFxuICAgICAgICA8L2Rpdj4gXG4gICAgPC9kaXY+ICAgXG4gICAgXG4gICAgPGRpdiBjbGFzcz1cImFnLWZpbHRlci1jb25kaXRpb24tb3BlcmF0b3IgYWctZmlsdGVyLWNvbmRpdGlvbi1vcGVyYXRvci1hbmQgYWctbGFiZWxlZCBhZy1sYWJlbC1hbGlnbi1yaWdodCBhZy1yYWRpby1idXR0b24gYWctaW5wdXQtZmllbGRcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiYWctaW5wdXQtZmllbGQtbGFiZWwgYWctbGFiZWwgYWctcmFkaW8tYnV0dG9uLWxhYmVsXCIgZm9yPVwiJHtpZFR3b31cIj4gICAgICAgXG4gICAgICAgICAgJHt0cmFuc2xhdGUoJ29yQ29uZGl0aW9uJywgJ09SJyl9XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhZy13cmFwcGVyLW9yIGFnLXdyYXBwZXIgYWctaW5wdXQtd3JhcHBlciBhZy1yYWRpby1idXR0b24taW5wdXQtd3JhcHBlclwiPlxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7aWRUd299XCIgY2xhc3M9XCJPUiBhZy1pbnB1dC1maWVsZC1pbnB1dCBhZy1yYWRpby1idXR0b24taW5wdXRcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwib3JBbmRSYWRpb1wiIHZhbHVlPVwiJHtcbiAgICAgIFRPS0VOUy5UT0tFTl9PUlxuICAgIH1cIi8+ICAgICAgICAgICAgICBcbiAgICAgICAgPC9kaXY+ICAgICAgICAgXG4gICAgPC9kaXY+ICAgXG4gICAgYFxuICAgIHRoaXMuX2d1aS5hcHBlbmRDaGlsZCh0aGlzLl9vcGVyYXRvclBhbmVsKVxuICAgIHRoaXMuX29wZXJhdG9yUGFuZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25PcGVyYXRvckNoYW5nZWQpXG5cbiAgICB0aGlzLl9ndWkuYXBwZW5kQ2hpbGQodGhpcy5fc2Vjb25kQ29uZGl0aW9uUGFuZWwuZ2V0R3VpKCkpXG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX2ZpcnN0Q29uZGl0aW9uUGFuZWwuZGVzdHJveSgpXG4gICAgdGhpcy5fc2Vjb25kQ29uZGl0aW9uUGFuZWwuZGVzdHJveSgpXG4gICAgdGhpcy5fb3BlcmF0b3JQYW5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLl9vbk9wZXJhdG9yQ2hhbmdlZClcbiAgICB0aGlzLm9mZihKb2luQ29uZGl0aW9uUGFuZWwuT05fSk9JTl9DT05ESVRJT05fQ0hBTkdFRClcbiAgICB0aGlzLnJlc2V0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgc3RhdGVcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX2ZpcnN0Q29uZGl0aW9uUGFuZWwucmVzZXQoKVxuICAgIHRoaXMuX3NlY29uZENvbmRpdGlvblBhbmVsLnJlc2V0KClcbiAgICB0aGlzLm5vdGlmeShDb25kaXRpb25QYW5lbC5PTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGNvbmRpdGlvbiBqb2luIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICBzdGF0ZSA9IHN0YXRlIHx8IHt9XG4gICAgdGhpcy5zdGF0ZS5vcGVyYXRvciA9IHN0YXRlLm9wZXJhdG9yIHx8IFRPS0VOUy5UT0tFTl9PUlxuICAgIHRoaXMuc3RhdGUuY29uZGl0aW9uMSA9IHN0YXRlLmNvbmRpdGlvbjEgfHwgbnVsbFxuICAgIHRoaXMuc3RhdGUuY29uZGl0aW9uMiA9IHN0YXRlLmNvbmRpdGlvbjIgfHwgbnVsbFxuXG4gICAgdGhpcy5fZmlyc3RDb25kaXRpb25QYW5lbC5zZXRTdGF0ZSh0aGlzLnN0YXRlLmNvbmRpdGlvbjEpXG4gICAgdGhpcy5fc2Vjb25kQ29uZGl0aW9uUGFuZWwuc2V0U3RhdGUodGhpcy5zdGF0ZS5jb25kaXRpb24yKVxuICAgIHRoaXMuX29wZXJhdG9yUGFuZWwucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmIChpbnB1dC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5zdGF0ZS5vcGVyYXRvcikpIHtcbiAgICAgICAgaW5wdXQuY2hlY2tlZCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0LmNoZWNrZWQgPSBmYWxzZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLm5vdGlmeShKb2luQ29uZGl0aW9uUGFuZWwuT05fSk9JTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgdGhlIHNlbGVjdGVkIGNvbmRpdGlvbiB0byB0aGUgY29tcG9uZW50IHN0YXRlclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX29uT3BlcmF0b3JDaGFuZ2VkKGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldFxuXG4gICAgdGhpcy5zdGF0ZS5vcGVyYXRvciA9IHRhcmdldC52YWx1ZVxuXG4gICAgaWYgKHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ09SJykpIHtcbiAgICAgIHRoaXMuX29wZXJhdG9yUGFuZWxcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLW9yJylcbiAgICAgICAgLmNsYXNzTGlzdC5hZGQoJ2FnLWNoZWNrZWQnKVxuICAgICAgdGhpcy5fb3BlcmF0b3JQYW5lbFxuICAgICAgICAucXVlcnlTZWxlY3RvcignLmFnLXdyYXBwZXItYW5kJylcbiAgICAgICAgLmNsYXNzTGlzdC5yZW1vdmUoJ2FnLWNoZWNrZWQnKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9vcGVyYXRvclBhbmVsXG4gICAgICAgIC5xdWVyeVNlbGVjdG9yKCcuYWctd3JhcHBlci1vcicpXG4gICAgICAgIC5jbGFzc0xpc3QucmVtb3ZlKCdhZy1jaGVja2VkJylcbiAgICAgIHRoaXMuX29wZXJhdG9yUGFuZWxcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5hZy13cmFwcGVyLWFuZCcpXG4gICAgICAgIC5jbGFzc0xpc3QuYWRkKCdhZy1jaGVja2VkJylcbiAgICB9XG5cbiAgICB0aGlzLm5vdGlmeShKb2luQ29uZGl0aW9uUGFuZWwuT05fSk9JTl9DT05ESVRJT05fQ0hBTkdFRCwgdGhpcy5zdGF0ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgIHRoZSBvcHRpb24gc3RhdGVcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25GaXJzdENvbmRpdGlvbkNoYW5nZWQoc3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlLmNvbmRpdGlvbjEgPSBzdGF0ZVxuXG4gICAgY29uc3Qgc3VwcHJlc3NBbmRPckNvbmRpdGlvbiA9IHRoaXMuZ2V0T3B0aW9uKFxuICAgICAgJ3N1cHByZXNzQW5kT3JDb25kaXRpb24nLFxuICAgICAgdGhpcy5fcGFyYW1zLFxuICAgICAgZmFsc2VcbiAgICApXG5cbiAgICBpZiAoIXN1cHByZXNzQW5kT3JDb25kaXRpb24pIHtcbiAgICAgIGNvbnN0IHsgZmlsdGVyLCBmaWx0ZXJUbywgdHlwZSB9ID0gdGhpcy5zdGF0ZS5jb25kaXRpb24xXG4gICAgICBjb25zdCBzZWNvbmRDb25kaXRpb25HdWkgPSB0aGlzLl9zZWNvbmRDb25kaXRpb25QYW5lbC5nZXRHdWkoKVxuICAgICAgY29uc3Qgb3BlcmF0b3JQYW5lbEd1aSA9IHRoaXMuX29wZXJhdG9yUGFuZWxcbiAgICAgIGNvbnN0IGNvbmRpdGlvbiA9XG4gICAgICAgIHR5cGUgPT09IFRPS0VOUy5UT0tFTl9SQU5HRSA/ICFmaWx0ZXIgfHwgIWZpbHRlclRvIDogIWZpbHRlclxuXG4gICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHNlY29uZENvbmRpdGlvbkd1aS5jbGFzc0xpc3QuYWRkKCdhZy1oaWRkZW4nKVxuICAgICAgICBvcGVyYXRvclBhbmVsR3VpLmNsYXNzTGlzdC5hZGQoJ2FnLWhpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWNvbmRDb25kaXRpb25HdWkuY2xhc3NMaXN0LnJlbW92ZSgnYWctaGlkZGVuJylcbiAgICAgICAgb3BlcmF0b3JQYW5lbEd1aS5jbGFzc0xpc3QucmVtb3ZlKCdhZy1oaWRkZW4nKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubm90aWZ5KEpvaW5Db25kaXRpb25QYW5lbC5PTl9KT0lOX0NPTkRJVElPTl9DSEFOR0VELCB0aGlzLnN0YXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSAgdGhlIG9wdGlvbiBzdGF0ZVxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIF9vblNlY29uZENvbmRpdGlvbkNoYW5nZWQoc3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlLmNvbmRpdGlvbjIgPSBzdGF0ZVxuICAgIHRoaXMubm90aWZ5KEpvaW5Db25kaXRpb25QYW5lbC5PTl9KT0lOX0NPTkRJVElPTl9DSEFOR0VELCB0aGlzLnN0YXRlKVxuICB9XG59XG5cbi8qKlxuICogRGF0ZVRpbWUgRmlsdGVyXG4gKlxuICogIyMgT3B0aW9uc1xuICpcbiAqIHwgTmFtZSAgICAgICAgICAgICAgICAgIFx0fCBEZWZhdWx0ICAgICBcdHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFx0fFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdHw6LS0tLS0tLS0tLS0tLTp8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICoqZGF0ZVRpbWVFbmFibGVUaW1lKiogICB8IGZhbHNlICAgIHwgZW5hYmxlIC8gZGlzYWJsZSB0aW1lXG4gKiB8ICoqZGF0ZVRpbWVFbmFibGUyNEhSKiogICB8IGZhbHNlICAgIHwgZW5hYmxlIC8gZGlzYWJsZSB0aW1lIDI0IGZvcm1hdFxuICogfCAqKmRhdGVUaW1lRW5hYmxlU2Vjb25kcyoqICAgfCBmYWxzZSAgICB8IGVuYWJsZSAvIGRpc2FibGUgc2Vjb25kcyBtYW5hZ2VtZW50XG4gKiB8ICoqZGF0ZVRpbWVFbmFibGVDYWxlbmRhcioqICAgfCBmYWxzZSAgICB8IGVuYWJsZSAvIGRpc2FibGUgQ2FsZW5kYXIuXG4gKiB8ICoqZGF0ZVRpbWVNYXNrKiogICB8IGZhbHNlICAgIHwgVGhlIG1hc2sgdXNlZCB0byBmb3JtYXQgdGhlIHNlbGVjdGVkIGRhdGVcbiAqIHwgKipkYXRlVGltZU1heCoqICAgfCB1bmRlZmluZWQgICAgfCAgTWF4IGFsbG93ZWQgZGF0ZVxuICogfCAqKmRhdGVUaW1lTWluKiogICB8IHVuZGVmaW5lZCAgICB8ICBNaW4gYWxsb3dlZCBkYXRlXG4gKiB8ICoqZGF0ZVRpbWVGb3JtYXR0ZXIqKiAgIHwgdW5kZWZpbmVkICAgIHwgIEEgZnVuY3Rpb24gb3IgZXhwcmVzc2lvbiB0byBmb3JtYXQgdGhlIGRhdGUgKEBzZWUgc3VwcG9ydGVkIHBhcmFtKVxuICogfCAqKmRhdGVUaW1lTG9jYWxlKiogICB8IFN5c3RlbSBkZWZhdWx0ICAgIHwgIEEgbG9jYWxlIHRvIHVzZSBmb3IgZGF0ZSBmb3JtYXR0aW5nXG4gKiB8ICoqZGF0ZVRpbWVEZWZhdWx0SG91cioqICAgfCAxMiAgICB8ICBJbml0aWFsIHZhbHVlIG9mIHRoZSBob3VyIGVsZW1lbnQuXG4gKiB8ICoqZGF0ZVRpbWVEZWZhdWx0TWludXRlKiogICB8IDAgICAgfCAgSW5pdGlhbCB2YWx1ZSBvZiB0aGUgbWludXRlIGVsZW1lbnQuXG4gKiB8ICoqZGF0ZVRpbWVEaXNhYmxlTW9iaWxlKiogICB8IGZhbHNlICAgIHwgIFNldCBkaXNhYmxlTW9iaWxlIHRvIHRydWUgdG8gYWx3YXlzIHVzZSB0aGUgbm9uLW5hdGl2ZSBwaWNrZXIuXG4gKiB8ICoqZGF0ZVRpbWVFbmFibGVXZWVrTnVtYmVyKiogICB8IHRydWUgICAgfCAgRW5hYmxlcyBkaXNwbGF5IG9mIHdlZWsgbnVtYmVycyBpbiBjYWxlbmRhci5cbiAqIHwgKipmaWx0ZXJPcHRpb25zKiogICB8IEVxdWFscywgR3JlYXRlciBUaGFuLCBMZXNzIFRoYW4sIE5vdCBFcXVhbHMsIEluIFJhbmdlLiAgICB8ICBXaGF0IEZpbHRlciBPcHRpb25zIHRvIHByZXNlbnQgdG8gdGhlIHVzZXIuXG4gKiB8ICoqZGVmYXVsdE9wdGlvbioqICAgfCBFcXVhbHMgICAgfCAgVGhlIGRlZmF1bHQgRmlsdGVyIE9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuXG4gKiB8ICoqc3VwcHJlc3NBbmRPckNvbmRpdGlvbioqICAgfCBmYWxzZSAgICB8ICBJZiB0cnVlLCB0aGUgZmlsdGVyIHdpbGwgb25seSBvZmZlciBDb25kaXRpb24gMS5cbiAqIHwgKippblJhbmdlSW5jbHVzaXZlKiogICB8IGZhbHNlICAgIHwgIElmIHRydWUgdGhlbiBkb2luZyAnaW5SYW5nZScgZmlsdGVyIG9wdGlvbiB3aWxsIGluY2x1ZGUgdmFsdWVzIGVxdWFsIHRvIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSByYW5nZS5cbiAqIHwgKipjbGVhckJ1dHRvbioqICAgfCBmYWxzZSAgICB8ICBTZXQgdG8gdHJ1ZSB0byBoYXZlIHRoZSBmaWx0ZXIgdXNlIGEgQ2xlYXIgYnV0dG9uLiBUaGUgQ2xlYXIgYnV0dG9uIHdpbGwgY2xlYXIgdGhlIChmb3JtKSBkZXRhaWxzIG9mIHRoZSBmaWx0ZXIgd2l0aG91dCByZW1vdmluZyBhbnkgYWN0aXZlIGZpbHRlcnMgb24gdGhlIGNvbHVtbi5cbiAqIHwgKiphcHBseUJ1dHRvbioqICAgfCBmYWxzZSAgICB8ICBTZXQgdG8gdHJ1ZSB0byBoYXZlIHRoZSBmaWx0ZXIgdXNlIGFuIEFwcGx5IGJ1dHRvbi4gSWYgdGhlIEFwcGx5IGJ1dHRvbiBpcyBwcmVzZW50LCB0aGVuIHRoZSBmaWx0ZXIgaXMgb25seSBhcHBsaWVkIGFmdGVyIHRoZSB1c2VyIGhpdHMgdGhlIEFwcGx5IGJ1dHRvbi5cbiAqIHwgKipyZXNldEJ1dHRvbioqICAgfCBmYWxzZSAgICB8ICBTZXQgdG8gdHJ1ZSB0byBoYXZlIHRoZSBmaWx0ZXIgdXNlIGEgUmVzZXQgYnV0dG9uLiBUaGUgUmVzZXQgYnV0dG9uIHdpbGwgY2xlYXIgdGhlIGRldGFpbHMgb2YgdGhlIGZpbHRlciBhbmQgYW55IGFjdGl2ZSBmaWx0ZXJzIG9uIHRoYXQgY29sdW1uLlxuICpcbiAqIEBhdXRob3IgSHl5YW4gQWJvIEZha2hlciA8aGFib2Zha2hlckBiYXNpcy5jb20+XG4gKi9cbmNsYXNzIERhdGVUaW1lRmlsdGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEB0eXBlIHtKb2lufVxuICAgKi9cbiAgX0pvaW5Db25kaXRpb25QYW5lbCA9IG5ldyBKb2luQ29uZGl0aW9uUGFuZWwoKVxuXG4gIC8qKlxuICAgKiBKb2luIHBhbmVsIHN0YXRlXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBfc3RhdGUgPSB7fVxuXG4gIC8qKlxuICAgKiBDb21wb25lbnQgcGFyYW1zXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBfcGFyYW1zID0ge31cblxuICAvKipcbiAgICogQW4gb2JqZWN0IG9mIGFsbCB0aGUgcmVxdWlyZWQgb3B0aW9ucyBjYWNoZWQgZm9yIGRvZXNGaWx0ZXJQYXNzIG1ldGhvZFxuICAgKi9cbiAgX2RvZXNGaWx0ZXJQYXNzT3B0aW9ucyA9IG51bGxcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBpbml0KHBhcmFtcykge1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldExvY2FsZVRleHRGdW5jKClcbiAgICBjb25zdCBpc0NsZWFyRmlsdGVyID0gdGhpcy5nZXRPcHRpb24oJ2NsZWFyQnV0dG9uJywgcGFyYW1zLCBmYWxzZSlcbiAgICBjb25zdCBpc1Jlc2V0QnV0dG9uID0gdGhpcy5nZXRPcHRpb24oJ3Jlc2V0QnV0dG9uJywgcGFyYW1zLCBmYWxzZSlcbiAgICBjb25zdCBpc0FwcGx5QnV0dG9uID0gdGhpcy5nZXRPcHRpb24oJ2FwcGx5QnV0dG9uJywgcGFyYW1zLCBmYWxzZSlcblxuICAgIHRoaXMuX2d1aSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG5cbiAgICB0aGlzLl9Kb2luQ29uZGl0aW9uUGFuZWwuaW5pdChwYXJhbXMpXG4gICAgdGhpcy5fSm9pbkNvbmRpdGlvblBhbmVsLm9uKFxuICAgICAgSm9pbkNvbmRpdGlvblBhbmVsLk9OX0pPSU5fQ09ORElUSU9OX0NIQU5HRUQsXG4gICAgICBzdGF0ZSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5fX2Rpc2FibGVTdGF0ZUNoYW5nZUxpc3RlbmVyKSB7XG4gICAgICAgICAgdGhpcy5fb25Kb2luQ29uZGl0aW9uUGFuZWxTdGF0ZUNoYW5nZWQoc3RhdGUsIGlzQXBwbHlCdXR0b24pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG5cbiAgICB0aGlzLl9ndWkuYXBwZW5kQ2hpbGQodGhpcy5fSm9pbkNvbmRpdGlvblBhbmVsLmdldEd1aSgpKVxuXG4gICAgY29uc3QgYXBwbHlGaWx0ZXJQYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgYXBwbHlGaWx0ZXJQYW5lbC5jbGFzc05hbWUgPSBgYWctZmlsdGVyLWFwcGx5LXBhbmVsIGFnLWhpZGRlbmBcbiAgICBhcHBseUZpbHRlclBhbmVsLmlubmVySFRNTCA9IC8qIGh0bWwgKi8gYFxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImFnLXN0YW5kYXJkLWJ1dHRvbiBhZy1maWx0ZXItYXBwbHktcGFuZWwtYnV0dG9uIGNsZWFyICR7IWlzQ2xlYXJGaWx0ZXIgJiZcbiAgICAgICAgJ2FnLWhpZGRlbid9XCIgdHlwZT1cImJ1dHRvblwiPiR7dHJhbnNsYXRlKFxuICAgICAgJ2NsZWFyRmlsdGVyJyxcbiAgICAgICdDbGVhciBGaWx0ZXInXG4gICAgKX08L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9XCJhZy1zdGFuZGFyZC1idXR0b24gYWctZmlsdGVyLWFwcGx5LXBhbmVsLWJ1dHRvbiByZXNldCAkeyFpc1Jlc2V0QnV0dG9uICYmXG4gICAgICAgICdhZy1oaWRkZW4nfVwiIHR5cGU9XCJidXR0b25cIj4ke3RyYW5zbGF0ZShcbiAgICAgICdyZXNldEZpbHRlcicsXG4gICAgICAnUmVzZXQgRmlsdGVyJ1xuICAgICl9PC9idXR0b24+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiYWctc3RhbmRhcmQtYnV0dG9uIGFnLWZpbHRlci1hcHBseS1wYW5lbC1idXR0b24gYXBwbHkgJHshaXNBcHBseUJ1dHRvbiAmJlxuICAgICAgICAnYWctaGlkZGVuJ31cIiB0eXBlPVwiYnV0dG9uXCI+JHt0cmFuc2xhdGUoXG4gICAgICAnYXBwbHlGaWx0ZXInLFxuICAgICAgJ0FwcGx5IEZpbHRlcidcbiAgICApfTwvYnV0dG9uPlxuICAgIGBcblxuICAgIGlmIChpc0NsZWFyRmlsdGVyIHx8IGlzUmVzZXRCdXR0b24gfHwgaXNBcHBseUJ1dHRvbikge1xuICAgICAgYXBwbHlGaWx0ZXJQYW5lbC5jbGFzc0xpc3QucmVtb3ZlKCdhZy1oaWRkZW4nKVxuICAgIH1cblxuICAgIGFwcGx5RmlsdGVyUGFuZWwuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdjbGljaycsXG4gICAgICB0aGlzLl9BcHBseUZpbHRlclBhbmVsQnV0dG9uQ2xpY2tcbiAgICApXG5cbiAgICB0aGlzLl9ndWkuYXBwZW5kQ2hpbGQoYXBwbHlGaWx0ZXJQYW5lbClcblxuICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fSm9pbkNvbmRpdGlvblBhbmVsLnN0YXRlXG4gICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zXG5cbiAgICB0aGlzLl9kb2VzRmlsdGVyUGFzc09wdGlvbnMgPSB7XG4gICAgICBlbmFibGVUaW1lOiB0aGlzLmdldE9wdGlvbignZGF0ZVRpbWVFbmFibGVUaW1lJywgdGhpcy5fcGFyYW1zLCB0cnVlKSxcbiAgICAgIGluUmFuZ2VJbmNsdXNpdmU6IHRoaXMuZ2V0T3B0aW9uKCdpblJhbmdlSW5jbHVzaXZlJywgdGhpcy5fcGFyYW1zLCBmYWxzZSksXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICB2YWx1ZUdldHRlcjogdGhpcy5fcGFyYW1zLmhhc093blByb3BlcnR5KCdmaWx0ZXJWYWx1ZUdldHRlcicpXG4gICAgICAgID8gdGhpcy5fcGFyYW1zLmZpbHRlclZhbHVlR2V0dGVyXG4gICAgICAgIDogdGhpcy5fcGFyYW1zLnZhbHVlR2V0dGVyLFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgQG92ZXJyaWRlXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fSm9pbkNvbmRpdGlvblBhbmVsLmRlc3Ryb3koKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgc2VsZWN0ZWQgZmlsdGVyIG1hdGNoZXMgdGhlIHBhc3NlZCBjZWxsIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIHdoZW4gcGFzcywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBkb2VzRmlsdGVyUGFzcyhwYXJhbXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RvZXNGaWx0ZXJQYXNzT3B0aW9ucy52YWx1ZUdldHRlcihwYXJhbXMpXG4gICAgY29uc3QgeyBjb25kaXRpb24xLCBjb25kaXRpb24yLCBvcGVyYXRvciB9ID0gdGhpcy5fc3RhdGVcbiAgICBjb25zdCBkb2VzUGFzc0ZpcnN0Q29uZGl0aW9uID0gdGhpcy5fZG9lc1Bhc3NDb25kaXRpb24oY29uZGl0aW9uMSwgdmFsdWUpXG4gICAgY29uc3QgZG9lc1Bhc3NTZWNvbmRDb25kaXRpb24gPSB0aGlzLl9kb2VzUGFzc0NvbmRpdGlvbihjb25kaXRpb24yLCB2YWx1ZSlcblxuICAgIHJldHVybiBvcGVyYXRvciA9PT0gVE9LRU5TLlRPS0VOX09SXG4gICAgICA/IGRvZXNQYXNzRmlyc3RDb25kaXRpb24gfHwgZG9lc1Bhc3NTZWNvbmRDb25kaXRpb25cbiAgICAgIDogZG9lc1Bhc3NGaXJzdENvbmRpdGlvbiAmJiBkb2VzUGFzc1NlY29uZENvbmRpdGlvblxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBpcyBhcHBseWluZyBhbnkgZmlsdGVyIG9uIHRoZSBjb2x1bW5cbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICoqL1xuICBpc0ZpbHRlckFjdGl2ZSgpIHtcbiAgICBjb25zdCB7IGNvbmRpdGlvbjEgfSA9IHRoaXMuX3N0YXRlXG5cbiAgICBpZiAoY29uZGl0aW9uMSAmJiBjb25kaXRpb24xLmZpbHRlcikge1xuICAgICAgaWYgKGNvbmRpdGlvbjEuZmlsdGVyVG8gJiYgY29uZGl0aW9uMS50eXBlID09PSBUT0tFTlMuVE9LRU5fUkFOR0UpIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbjEuZmlsdGVyICE9PSBudWxsICYmIGNvbmRpdGlvbjEuZmlsdGVyVG8gIT09IG51bGxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmRpdGlvbjEuZmlsdGVyICE9PSBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgZmlsdGVyIHN0YXRlLiBJZiBmaWx0ZXIgaXMgbm90IGFjdGl2ZSwgdGhlbiBzaG91bGQgcmV0dXJuIG51bGwvdW5kZWZpbmVkLlxuICAgKiBUaGUgZ3JpZCBjYWxscyBnZXRNb2RlbCgpIG9uIGFsbCBhY3RpdmUgZmlsdGVycyB3aGVuIGdyaWRBcGkuZ2V0RmlsdGVyTW9kZWwoKSBpcyBjYWxsZWQuXG4gICAqXG4gICAqIEByZXR1cm4gT2JqZWN0IHwgbnVsbCB0aGUgZmlsdGVyIHN0YXRlXG4gICAqL1xuICBnZXRNb2RlbCgpIHtcbiAgICBjb25zdCBjbG9uZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5fc3RhdGUpKVxuICAgIDtbY2xvbmUuY29uZGl0aW9uMSwgY2xvbmUuY29uZGl0aW9uMl0uZm9yRWFjaCgoY29uZGl0aW9uLCBpKSA9PiB7XG4gICAgICBpZiAoY29uZGl0aW9uLmZpbHRlcikge1xuICAgICAgICBjb25kaXRpb24uZmlsdGVyID0gdGhpcy5fc3RhdGVbYGNvbmRpdGlvbiR7aSArIDF9YF0uZmlsdGVyLnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICAgIGlmIChjb25kaXRpb24uZmlsdGVyVG8pIHtcbiAgICAgICAgY29uZGl0aW9uLmZpbHRlclRvID0gdGhpcy5fc3RhdGVbXG4gICAgICAgICAgYGNvbmRpdGlvbiR7aSArIDF9YFxuICAgICAgICBdLmZpbHRlclRvLnRvSVNPU3RyaW5nKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY2xvbmUuZmlsdGVyVHlwZSA9ICdkYXRldGltZSdcbiAgICBjbG9uZS5jb25kaXRpb24xLmZpbHRlclR5cGUgPSAnZGF0ZXRpbWUnXG4gICAgY2xvbmUuY29uZGl0aW9uMi5maWx0ZXJUeXBlID0gJ2RhdGV0aW1lJ1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIHJldHVybiBjbG9uZS5oYXNPd25Qcm9wZXJ0eSgnY29uZGl0aW9uMicpICYmXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICBjbG9uZS5jb25kaXRpb24yLmhhc093blByb3BlcnR5KCdmaWx0ZXInKSAmJlxuICAgICAgY2xvbmUuY29uZGl0aW9uMi5maWx0ZXJcbiAgICAgID8gY2xvbmVcbiAgICAgIDogY2xvbmUuY29uZGl0aW9uMVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHRoZSBmaWx0ZXIgc3RhdGUuIENhbGxlZCBieSB0aGUgZ3JpZCBhZnRlciBncmlkQXBpLnNldEZpbHRlck1vZGVsKG1vZGVsKSBpcyBjYWxsZWQuXG4gICAqIFRoZSBncmlkIHdpbGwgcGFzcyB1bmRlZmluZWQvbnVsbCB0byBjbGVhciB0aGUgZmlsdGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdCB8IG51bGx9IG1vZGVsXG4gICAqL1xuICBzZXRNb2RlbChtb2RlbCkge1xuICAgIGlmIChcbiAgICAgIG1vZGVsICYmXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICAhbW9kZWwuaGFzT3duUHJvcGVydHkoJ2NvbmRpdGlvbjEnKSAmJlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgIW1vZGVsLmhhc093blByb3BlcnR5KCdjb25kaXRpb24yJylcbiAgICApIHtcbiAgICAgIG1vZGVsID0ge1xuICAgICAgICBjb25kaXRpb24xOiBtb2RlbCxcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fX2Rpc2FibGVTdGF0ZUNoYW5nZUxpc3RlbmVyID0gdHJ1ZVxuICAgIHRoaXMuX0pvaW5Db25kaXRpb25QYW5lbC5zZXRTdGF0ZShtb2RlbClcbiAgICB0aGlzLl9fZGlzYWJsZVN0YXRlQ2hhbmdlTGlzdGVuZXIgPSBmYWxzZVxuXG4gICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9Kb2luQ29uZGl0aW9uUGFuZWwuc3RhdGVcbiAgICA7W3RoaXMuX3N0YXRlLmNvbmRpdGlvbjEsIHRoaXMuX3N0YXRlLmNvbmRpdGlvbjJdLmZvckVhY2goY29uZGl0aW9uID0+IHtcbiAgICAgIGlmIChjb25kaXRpb24uZmlsdGVyKSB7XG4gICAgICAgIGNvbmRpdGlvbi5maWx0ZXIgPSBuZXcgRGF0ZShjb25kaXRpb24uZmlsdGVyKVxuICAgICAgfVxuICAgICAgaWYgKGNvbmRpdGlvbi5maWx0ZXJUbykge1xuICAgICAgICBjb25kaXRpb24uZmlsdGVyVG8gPSBuZXcgRGF0ZShjb25kaXRpb24uZmlsdGVyVG8pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZpbHRlciBtb2RlbCBhcyBwbGFpbiBzdHJpbmcgdG8gZGlzcGxheSBpbiB0aGUgZmxvYXRpbmcgZmlsdGVyIGlucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0IHwgbnVsbH0gbW9kZWxcbiAgICovXG4gIGdldE1vZGVsQXNTdHJpbmcobW9kZWwpIHtcbiAgICBpZiAoIW1vZGVsKSB7XG4gICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBjb25zdCBkYXRlVGltZU1hc2sgPSB0aGlzLmdldE9wdGlvbihcbiAgICAgICdkYXRlVGltZU1hc2snLFxuICAgICAgdGhpcy5fcGFyYW1zLFxuICAgICAgLy8gQHRvZG8gRmluZCBhIGJldHRlciB3YXkgZm9yIHRoaXNcbiAgICAgIHRoaXMuX0pvaW5Db25kaXRpb25QYW5lbC5fZmlyc3RDb25kaXRpb25QYW5lbC5fZmlsdGVyVGltZUlucHV0LnBpY2tlclxuICAgICAgICAuY29uZmlnWydkYXRlRm9ybWF0J11cbiAgICApXG4gICAgY29uc3QgbG9jYWxlID0gdGhpcy5nZXRPcHRpb24oXG4gICAgICAnZGF0ZVRpbWVMb2NhbGUnLFxuICAgICAgdGhpcy5fcGFyYW1zLFxuICAgICAgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZSB8fCAnZW4tVVMnXG4gICAgKVxuXG4gICAgY29uc3QgeyBjb25kaXRpb24xLCBjb25kaXRpb24yLCBvcGVyYXRvciB9ID0gSlNPTi5wYXJzZShcbiAgICAgIEpTT04uc3RyaW5naWZ5KG1vZGVsKVxuICAgIClcblxuICAgIDtbY29uZGl0aW9uMSwgY29uZGl0aW9uMl0uZm9yRWFjaChjb25kaXRpb24gPT4ge1xuICAgICAgaWYgKGNvbmRpdGlvbi5maWx0ZXIpIHtcbiAgICAgICAgY29uZGl0aW9uLmZpbHRlciA9IEJCai5NYXNrcy5EYXRlTWFzay5tYXNrKFxuICAgICAgICAgIGNvbmRpdGlvbi5maWx0ZXIsXG4gICAgICAgICAgZGF0ZVRpbWVNYXNrLFxuICAgICAgICAgIGxvY2FsZVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGlmIChjb25kaXRpb24uZmlsdGVyVG8pIHtcbiAgICAgICAgY29uZGl0aW9uLmZpbHRlclRvID0gQkJqLk1hc2tzLkRhdGVNYXNrLm1hc2soXG4gICAgICAgICAgY29uZGl0aW9uLmZpbHRlclRvLFxuICAgICAgICAgIGRhdGVUaW1lTWFzayxcbiAgICAgICAgICBsb2NhbGVcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBmaXJzdENvbmRpdGlvbkFzU3RyaW5nID0gYCR7Y29uZGl0aW9uMS5maWx0ZXIgfHwgJyd9ICR7XG4gICAgICBjb25kaXRpb24xLmZpbHRlclRvID8gJ+KGkiAnICsgY29uZGl0aW9uMS5maWx0ZXJUbyA6ICcnXG4gICAgfWBcbiAgICBjb25zdCBzZWNvbmRDb25kaXRpb25Bc1N0cmluZyA9IGAke2NvbmRpdGlvbjIuZmlsdGVyIHx8ICcnfSAke1xuICAgICAgY29uZGl0aW9uMi5maWx0ZXJUbyA/ICfihpIgJyArIGNvbmRpdGlvbjIuZmlsdGVyVG8gOiAnJ1xuICAgIH1gXG4gICAgY29uc3Qgb3BlcmF0b3JBc1N0cmluZyA9IGAke2NvbmRpdGlvbjIuZmlsdGVyICYmIG9wZXJhdG9yID8gb3BlcmF0b3IgOiAnJ31gXG5cbiAgICByZXR1cm4gYCR7Zmlyc3RDb25kaXRpb25Bc1N0cmluZ30gJHtvcGVyYXRvckFzU3RyaW5nfSAke3NlY29uZENvbmRpdGlvbkFzU3RyaW5nfWAudHJpbSgpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIHBhc3NlcyB0aGUgZmlsdGVyIGRlZmluZWQgaW4gdGhlIHBhc3NlZCBDb25kaXRpb25QYW5lbCdzIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb25kaXRpb24gY29uZGl0aW9uIHBhbmVsIHN0YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBjZWxsIHZhbHVlXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgd2hlbiBwYXNzLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIF9kb2VzUGFzc0NvbmRpdGlvbihjb25kaXRpb24sIHZhbHVlKSB7XG4gICAgaWYgKCFjb25kaXRpb24uZmlsdGVyIHx8ICF2YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgY29uc3QgeyBmaWx0ZXIsIGZpbHRlclRvLCB0eXBlIH0gPSBjb25kaXRpb25cbiAgICBjb25zdCB0aW1lem9uZSA9IEJCai5NYXNrcy5VdGlscy5EYXRlcy5nZXRUaW1lem9uZU9yT2Zmc2V0KClcbiAgICBjb25zdCBpblJhbmdlSW5jbHVzaXZlID0gdGhpcy5fZG9lc0ZpbHRlclBhc3NPcHRpb25zLmluUmFuZ2VJbmNsdXNpdmVcbiAgICBjb25zdCBlbmFibGVUaW1lID0gdGhpcy5fZG9lc0ZpbHRlclBhc3NPcHRpb25zLmVuYWJsZVRpbWVcbiAgICBsZXQgcGFzc2VkID0gZmFsc2VcblxuICAgIGlmIChCQmouTWFza3MuVXRpbHMuRGF0ZXMuSVNfVElNRV9SRUdFWC50ZXN0KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZSA9IEJCai5NYXNrcy5VdGlscy5EYXRlcy5maXhTaG9ydElTTyh2YWx1ZSlcbiAgICAgIDtbZmlsdGVyLCBmaWx0ZXJUb10uZm9yRWFjaChkYXRlID0+IHtcbiAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcigxOTcwKVxuICAgICAgICAgIGRhdGUuc2V0TW9udGgoMClcbiAgICAgICAgICBkYXRlLnNldERhdGUoMSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKEJCai5NYXNrcy5VdGlscy5EYXRlcy5JU19EQVRFX1JFR0VYLnRlc3QodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IEJCai5NYXNrcy5VdGlscy5EYXRlcy5maXhTaG9ydElTTyh2YWx1ZSlcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IHRoZSBkYXRldGltZSBmcm9tIHV0YyB0byBsb2NhbGVcbiAgICB2YWx1ZSA9IHV0Y1RvWm9uZWRUaW1lKHZhbHVlLCB0aW1lem9uZSlcbiAgICAvLyBmaXJzdERhdGUgPSBmaXJzdERhdGUgPyB6b25lZFRpbWVUb1V0YyhmaXJzdERhdGUgLCB0aW1lem9uZSkgOiBmaXJzdERhdGVcbiAgICAvLyBzZWNvbmREYXRlID0gc2Vjb25kRGF0ZSA/IHpvbmVkVGltZVRvVXRjKHNlY29uZERhdGUgLCB0aW1lem9uZSkgOiBzZWNvbmREYXRlXG5cbiAgICBpZiAoIWVuYWJsZVRpbWUpIHtcbiAgICAgIC8vIHJlbW92ZSB0aGUgdGltZSBwb3J0aW9uIGZyb20gdGhlIGRhdGVcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1zZW1pXG4gICAgICA7W3ZhbHVlLCBmaWx0ZXIsIGZpbHRlclRvXS5mb3JFYWNoKGRhdGUgPT4ge1xuICAgICAgICBpZiAoZGF0ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICBkYXRlLnNldEhvdXJzKDApXG4gICAgICAgICAgZGF0ZS5zZXRNaW51dGVzKDApXG4gICAgICAgICAgZGF0ZS5zZXRTZWNvbmRzKDApXG4gICAgICAgICAgZGF0ZS5zZXRNaWxsaXNlY29uZHMoMClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gVE9LRU5TLlRPS0VOX0VRVUFMKSB7XG4gICAgICBwYXNzZWQgPSBmaWx0ZXIgPiB2YWx1ZSA9PT0gZmFsc2UgJiYgZmlsdGVyIDwgdmFsdWUgPT0gZmFsc2VcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOUy5UT0tFTl9OT1RfRVFVQUwpIHtcbiAgICAgIHBhc3NlZCA9ICEoZmlsdGVyID4gdmFsdWUgPT09IGZhbHNlICYmIGZpbHRlciA8IHZhbHVlID09IGZhbHNlKVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gVE9LRU5TLlRPS0VOX0dSRUFURVIpIHtcbiAgICAgIHBhc3NlZCA9IGZpbHRlciA8IHZhbHVlXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBUT0tFTlMuVE9LRU5fTEVTUykge1xuICAgICAgcGFzc2VkID0gZmlsdGVyID4gdmFsdWVcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRPS0VOUy5UT0tFTl9SQU5HRSAmJiBmaWx0ZXJUbykge1xuICAgICAgaWYgKGluUmFuZ2VJbmNsdXNpdmUpIHtcbiAgICAgICAgcGFzc2VkID1cbiAgICAgICAgICAoKGZpbHRlciA8IHZhbHVlIHx8XG4gICAgICAgICAgICAoZmlsdGVyID4gdmFsdWUgPT09IGZhbHNlICYmIGZpbHRlciA8IHZhbHVlID09IGZhbHNlKSkgJiZcbiAgICAgICAgICAgIGZpbHRlclRvID4gdmFsdWUpIHx8XG4gICAgICAgICAgKGZpbHRlclRvID4gdmFsdWUgPT09IGZhbHNlICYmIGZpbHRlclRvIDwgdmFsdWUgPT0gZmFsc2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXNzZWQgPSBmaWx0ZXIgPCB2YWx1ZSAmJiBmaWx0ZXJUbyA+IHZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhc3NlZFxuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgdG8gY2xpY2sgYnV0dG9uIGV2ZW50IG9uIHRoZSBmaWx0ZXIgcGFuZWwgYW5kIGV4ZWN1dGUgdGhlXG4gICAqIHJpZ2h0IGFjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAqL1xuICBAYXV0b2JpbmRcbiAgX0FwcGx5RmlsdGVyUGFuZWxCdXR0b25DbGljayhlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXRcblxuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncmVzZXQnKSkge1xuICAgICAgICB0aGlzLl9Kb2luQ29uZGl0aW9uUGFuZWwucmVzZXQoKVxuICAgICAgICB0aGlzLl9wYXJhbXMuZmlsdGVyQ2hhbmdlZENhbGxiYWNrKClcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnY2xlYXInKSkge1xuICAgICAgICB0aGlzLl9Kb2luQ29uZGl0aW9uUGFuZWwucmVzZXQoKVxuICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhcHBseScpKSB7XG4gICAgICAgIHRoaXMuX3BhcmFtcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZpbHRlciBzdGF0ZSBhbmQgQXBwbHkgdGhlIGZpbHRlciBkZXBlbmRpbmcgb25cbiAgICogd2hldGhlciB0aGUgYGlzQXBwbHlCdXR0b25BY3RpdmVgIGlzIHRydWUgb3IgZmFsc2VcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNBcHBseUJ1dHRvbkFjdGl2ZVxuICAgKi9cbiAgQGF1dG9iaW5kXG4gIF9vbkpvaW5Db25kaXRpb25QYW5lbFN0YXRlQ2hhbmdlZChzdGF0ZSwgaXNBcHBseUJ1dHRvbkFjdGl2ZSkge1xuICAgIHRoaXMuX3N0YXRlID0gc3RhdGVcbiAgICBpZiAoZmFsc2UgPT09IGlzQXBwbHlCdXR0b25BY3RpdmUpIHtcbiAgICAgIHRoaXMuX3BhcmFtcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZUZpbHRlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0RhdGVUaW1lRmlsdGVyL0RhdGVUaW1lRmlsdGVyLmpzIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmRzXSB0b2tlbnMgb2YgdGhlIHByb3ZpZGVkXG4gKiBgZGF0ZWAgYXMgaXQgd2lsbCBiZSByZW5kZXJlZCBpbiB0aGUgYHRpbWVab25lYC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHpUb2tlbml6ZURhdGUoZGF0ZSwgdGltZVpvbmUpIHtcbiAgdmFyIGR0ZiA9IGdldERhdGVUaW1lRm9ybWF0KHRpbWVab25lKVxuICByZXR1cm4gZHRmLmZvcm1hdFRvUGFydHMgPyBwYXJ0c09mZnNldChkdGYsIGRhdGUpIDogaGFja3lPZmZzZXQoZHRmLCBkYXRlKVxufVxuXG52YXIgdHlwZVRvUG9zID0ge1xuICB5ZWFyOiAwLFxuICBtb250aDogMSxcbiAgZGF5OiAyLFxuICBob3VyOiAzLFxuICBtaW51dGU6IDQsXG4gIHNlY29uZDogNVxufVxuXG5mdW5jdGlvbiBwYXJ0c09mZnNldChkdGYsIGRhdGUpIHtcbiAgdmFyIGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXRUb1BhcnRzKGRhdGUpXG4gIHZhciBmaWxsZWQgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZvcm1hdHRlZC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwb3MgPSB0eXBlVG9Qb3NbZm9ybWF0dGVkW2ldLnR5cGVdXG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gcGFyc2VJbnQoZm9ybWF0dGVkW2ldLnZhbHVlLCAxMClcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpbGxlZFxufVxuXG5mdW5jdGlvbiBoYWNreU9mZnNldChkdGYsIGRhdGUpIHtcbiAgdmFyIGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXFx1MjAwRS9nLCAnJylcbiAgdmFyIHBhcnNlZCA9IC8oXFxkKylcXC8oXFxkKylcXC8oXFxkKyksPyAoXFxkKyk6KFxcZCspOihcXGQrKS8uZXhlYyhmb3JtYXR0ZWQpXG4gIC8vIHZhciBbLCBmTW9udGgsIGZEYXksIGZZZWFyLCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF0gPSBwYXJzZWRcbiAgLy8gcmV0dXJuIFtmWWVhciwgZk1vbnRoLCBmRGF5LCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF1cbiAgcmV0dXJuIFtwYXJzZWRbM10sIHBhcnNlZFsxXSwgcGFyc2VkWzJdLCBwYXJzZWRbNF0sIHBhcnNlZFs1XSwgcGFyc2VkWzZdXVxufVxuXG4vLyBHZXQgYSBjYWNoZWQgSW50bC5EYXRlVGltZUZvcm1hdCBpbnN0YW5jZSBmb3IgdGhlIElBTkEgYHRpbWVab25lYC4gVGhpcyBjYW4gYmUgdXNlZFxuLy8gdG8gZ2V0IGRldGVybWluaXN0aWMgbG9jYWwgZGF0ZS90aW1lIG91dHB1dCBhY2NvcmRpbmcgdG8gdGhlIGBlbi1VU2AgbG9jYWxlIHdoaWNoXG4vLyBjYW4gYmUgdXNlZCB0byBleHRyYWN0IGxvY2FsIHRpbWUgcGFydHMgYXMgbmVjZXNzYXJ5LlxudmFyIGR0ZkNhY2hlID0ge31cbmZ1bmN0aW9uIGdldERhdGVUaW1lRm9ybWF0KHRpbWVab25lKSB7XG4gIGlmICghZHRmQ2FjaGVbdGltZVpvbmVdKSB7XG4gICAgLy8gTmV3IGJyb3dzZXJzIHVzZSBgaG91ckN5Y2xlYCwgSUUgYW5kIENocm9tZSA8NzMgZG9lcyBub3Qgc3VwcG9ydCBpdCBhbmQgdXNlcyBgaG91cjEyYFxuICAgIHZhciB0ZXN0RGF0ZUZvcm1hdHRlZCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycsIHtcbiAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICB0aW1lWm9uZTogJ0FtZXJpY2EvTmV3X1lvcmsnLFxuICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcbiAgICAgIGRheTogJzItZGlnaXQnLFxuICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICBzZWNvbmQ6ICcyLWRpZ2l0J1xuICAgIH0pLmZvcm1hdChuZXcgRGF0ZSgnMjAxNC0wNi0yNVQwNDowMDowMC4xMjNaJykpXG4gICAgdmFyIGhvdXJDeWNsZVN1cHBvcnRlZCA9XG4gICAgICB0ZXN0RGF0ZUZvcm1hdHRlZCA9PT0gJzA2LzI1LzIwMTQsIDAwOjAwOjAwJyB8fFxuICAgICAgdGVzdERhdGVGb3JtYXR0ZWQgPT09ICfigI4wNuKAji/igI4yNeKAji/igI4yMDE04oCOIOKAjjAw4oCOOuKAjjAw4oCOOuKAjjAwJ1xuXG4gICAgZHRmQ2FjaGVbdGltZVpvbmVdID0gaG91ckN5Y2xlU3VwcG9ydGVkXG4gICAgICA/IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCdlbi1VUycsIHtcbiAgICAgICAgICBob3VyMTI6IGZhbHNlLFxuICAgICAgICAgIHRpbWVab25lOiB0aW1lWm9uZSxcbiAgICAgICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcbiAgICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCdcbiAgICAgICAgfSlcbiAgICAgIDogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywge1xuICAgICAgICAgIGhvdXJDeWNsZTogJ2gyMycsXG4gICAgICAgICAgdGltZVpvbmU6IHRpbWVab25lLFxuICAgICAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgICAgIGRheTogJzItZGlnaXQnLFxuICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcbiAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0J1xuICAgICAgICB9KVxuICB9XG4gIHJldHVybiBkdGZDYWNoZVt0aW1lWm9uZV1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9kYXRlLWZucy10ei9lc20vX2xpYi90elRva2VuaXplRGF0ZS9pbmRleC5qcyIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanMnO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tICcuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiB2YXIgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiB2YXIgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzJ1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSAnZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcydcbmltcG9ydCB0elBhcnNlVGltZXpvbmUgZnJvbSAnLi4vX2xpYi90elBhcnNlVGltZXpvbmUnXG5cbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDBcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDBcbnZhciBERUZBVUxUX0FERElUSU9OQUxfRElHSVRTID0gMlxuXG52YXIgcGF0dGVybnMgPSB7XG4gIGRhdGVUaW1lRGVsaW1ldGVyOiAvW1QgXS8sXG4gIHBsYWluVGltZTogLzovLFxuICB0aW1lWm9uZURlbGltZXRlcjogL1taIF0vaSxcblxuICAvLyB5ZWFyIHRva2Vuc1xuICBZWTogL14oXFxkezJ9KSQvLFxuICBZWVk6IFtcbiAgICAvXihbKy1dXFxkezJ9KSQvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXG4gICAgL14oWystXVxcZHszfSkkLywgLy8gMSBhZGRpdGlvbmFsIGRpZ2l0XG4gICAgL14oWystXVxcZHs0fSkkLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXG4gIF0sXG4gIFlZWVk6IC9eKFxcZHs0fSkvLFxuICBZWVlZWTogW1xuICAgIC9eKFsrLV1cXGR7NH0pLywgLy8gMCBhZGRpdGlvbmFsIGRpZ2l0c1xuICAgIC9eKFsrLV1cXGR7NX0pLywgLy8gMSBhZGRpdGlvbmFsIGRpZ2l0XG4gICAgL14oWystXVxcZHs2fSkvIC8vIDIgYWRkaXRpb25hbCBkaWdpdHNcbiAgXSxcblxuICAvLyBkYXRlIHRva2Vuc1xuICBNTTogL14tKFxcZHsyfSkkLyxcbiAgREREOiAvXi0/KFxcZHszfSkkLyxcbiAgTU1ERDogL14tPyhcXGR7Mn0pLT8oXFxkezJ9KSQvLFxuICBXd3c6IC9eLT9XKFxcZHsyfSkkLyxcbiAgV3d3RDogL14tP1coXFxkezJ9KS0/KFxcZHsxfSkkLyxcblxuICBISDogL14oXFxkezJ9KFsuLF1cXGQqKT8pJC8sXG4gIEhITU06IC9eKFxcZHsyfSk6PyhcXGR7Mn0oWy4sXVxcZCopPykkLyxcbiAgSEhNTVNTOiAvXihcXGR7Mn0pOj8oXFxkezJ9KTo/KFxcZHsyfShbLixdXFxkKik/KSQvLFxuXG4gIC8vIHRpbWV6b25lIHRva2VucyAodG8gaWRlbnRpZnkgdGhlIHByZXNlbmNlIG9mIGEgdHopXG4gIHRpbWV6b25lOiAvKFtaKy1dLip8IFVUQ3woPzpbYS16QS1aXStcXC9bYS16QS1aX10rKD86XFwvW2EtekEtWl9dKyk/KSkkL1xufVxuXG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiBhbiBhcmd1bWVudCBpcyBhIHN0cmluZywgdGhlIGZ1bmN0aW9uIHRyaWVzIHRvIHBhcnNlIGl0LlxuICogRnVuY3Rpb24gYWNjZXB0cyBjb21wbGV0ZSBJU08gODYwMSBmb3JtYXRzIGFzIHdlbGwgYXMgcGFydGlhbCBpbXBsZW1lbnRhdGlvbnMuXG4gKiBJU08gODYwMTogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMVxuICogSWYgdGhlIGZ1bmN0aW9uIGNhbm5vdCBwYXJzZSB0aGUgc3RyaW5nIG9yIHRoZSB2YWx1ZXMgYXJlIGludmFsaWQsIGl0IHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICogQWxsICpkYXRlLWZucyogZnVuY3Rpb25zIHdpbGwgdGhyb3cgYFJhbmdlRXJyb3JgIGlmIGBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNgIGlzIG5vdCAwLCAxLCAyIG9yIHVuZGVmaW5lZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8U3RyaW5nfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHBhcmFtIHtPcHRpb25zV2l0aFRafSBbb3B0aW9uc10gLSB0aGUgb2JqZWN0IHdpdGggb3B0aW9ucy4gU2VlIFtPcHRpb25zXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL09wdGlvbnN9XG4gKiBAcGFyYW0gezB8MXwyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy50aW1lWm9uZT0nJ10gLSB1c2VkIHRvIHNwZWNpZnkgdGhlIElBTkEgdGltZSB6b25lIG9mZnNldCBvZiBhIGRhdGUgU3RyaW5nLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNgIG11c3QgYmUgMCwgMSBvciAyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcyMDE0LTAyLTExVDExOjMwOjMwJyB0byBkYXRlOlxuICogdmFyIHJlc3VsdCA9IHRvRGF0ZSgnMjAxNC0wMi0xMVQxMTozMDozMCcpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnKzAyMDE0MTAxJyB0byBkYXRlLFxuICogLy8gaWYgdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXQgaXMgMTpcbiAqIHZhciByZXN1bHQgPSB0b0RhdGUoJyswMjAxNDEwMScsIHthZGRpdGlvbmFsRGlnaXRzOiAxfSlcbiAqIC8vPT4gRnJpIEFwciAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCwgZGlydHlPcHRpb25zKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3VtZW50cy5sZW5ndGggKyAnIHByZXNlbnQnXG4gICAgKVxuICB9XG5cbiAgaWYgKGFyZ3VtZW50ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgfVxuXG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9XG5cbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPVxuICAgIG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cyA9PSBudWxsXG4gICAgICA/IERFRkFVTFRfQURESVRJT05BTF9ESUdJVFNcbiAgICAgIDogdG9JbnRlZ2VyKG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cylcbiAgaWYgKFxuICAgIGFkZGl0aW9uYWxEaWdpdHMgIT09IDIgJiZcbiAgICBhZGRpdGlvbmFsRGlnaXRzICE9PSAxICYmXG4gICAgYWRkaXRpb25hbERpZ2l0cyAhPT0gMFxuICApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYWRkaXRpb25hbERpZ2l0cyBtdXN0IGJlIDAsIDEgb3IgMicpXG4gIH1cblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoXG4gICAgYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IERhdGVdJylcbiAgKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSlcbiAgfSBlbHNlIGlmIChcbiAgICB0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8XG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbiAgKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KVxuICB9IGVsc2UgaWYgKFxuICAgICEoXG4gICAgICB0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8XG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJ1xuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgfVxuXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudClcblxuICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpXG4gIHZhciB5ZWFyID0gcGFyc2VZZWFyUmVzdWx0LnllYXJcbiAgdmFyIHJlc3REYXRlU3RyaW5nID0gcGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nXG5cbiAgdmFyIGRhdGUgPSBwYXJzZURhdGUocmVzdERhdGVTdHJpbmcsIHllYXIpXG5cbiAgaWYgKGlzTmFOKGRhdGUpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgfVxuXG4gIGlmIChkYXRlKSB7XG4gICAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpXG4gICAgdmFyIHRpbWUgPSAwXG4gICAgdmFyIG9mZnNldFxuXG4gICAgaWYgKGRhdGVTdHJpbmdzLnRpbWUpIHtcbiAgICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSlcblxuICAgICAgaWYgKGlzTmFOKHRpbWUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGVTdHJpbmdzLnRpbWV6b25lIHx8IG9wdGlvbnMudGltZVpvbmUpIHtcbiAgICAgIG9mZnNldCA9IHR6UGFyc2VUaW1lem9uZShcbiAgICAgICAgZGF0ZVN0cmluZ3MudGltZXpvbmUgfHwgb3B0aW9ucy50aW1lWm9uZSxcbiAgICAgICAgbmV3IERhdGUodGltZXN0YW1wICsgdGltZSlcbiAgICAgIClcbiAgICAgIGlmIChpc05hTihvZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXG4gICAgICB9XG4gICAgICBvZmZzZXQgPSB0elBhcnNlVGltZXpvbmUoXG4gICAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lIHx8IG9wdGlvbnMudGltZVpvbmUsXG4gICAgICAgIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpXG4gICAgICApXG4gICAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoTmFOKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBnZXQgb2Zmc2V0IGFjY3VyYXRlIHRvIGhvdXIgaW4gdGltZXpvbmVzIHRoYXQgY2hhbmdlIG9mZnNldFxuICAgICAgb2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lKSlcbiAgICAgIG9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoXG4gICAgICAgIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdERhdGVTdHJpbmcoZGF0ZVN0cmluZykge1xuICB2YXIgZGF0ZVN0cmluZ3MgPSB7fVxuICB2YXIgYXJyYXkgPSBkYXRlU3RyaW5nLnNwbGl0KHBhdHRlcm5zLmRhdGVUaW1lRGVsaW1ldGVyKVxuICB2YXIgdGltZVN0cmluZ1xuXG4gIGlmIChwYXR0ZXJucy5wbGFpblRpbWUudGVzdChhcnJheVswXSkpIHtcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gbnVsbFxuICAgIHRpbWVTdHJpbmcgPSBhcnJheVswXVxuICB9IGVsc2Uge1xuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXVxuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXVxuICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gYXJyYXlbMl1cbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWV0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xuICAgICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMudGltZVpvbmVEZWxpbWV0ZXIpWzBdXG4gICAgICB0aW1lU3RyaW5nID0gZGF0ZVN0cmluZy5zdWJzdHIoZGF0ZVN0cmluZ3MuZGF0ZS5sZW5ndGgsIGRhdGVTdHJpbmcubGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIGlmICh0aW1lU3RyaW5nKSB7XG4gICAgdmFyIHRva2VuID0gcGF0dGVybnMudGltZXpvbmUuZXhlYyh0aW1lU3RyaW5nKVxuICAgIGlmICh0b2tlbikge1xuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmcucmVwbGFjZSh0b2tlblsxXSwgJycpXG4gICAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IHRva2VuWzFdXG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGVTdHJpbmdzXG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkYXRlU3RyaW5nLCBhZGRpdGlvbmFsRGlnaXRzKSB7XG4gIHZhciBwYXR0ZXJuWVlZID0gcGF0dGVybnMuWVlZW2FkZGl0aW9uYWxEaWdpdHNdXG4gIHZhciBwYXR0ZXJuWVlZWVkgPSBwYXR0ZXJucy5ZWVlZWVthZGRpdGlvbmFsRGlnaXRzXVxuXG4gIHZhciB0b2tlblxuXG4gIC8vIFlZWVkgb3IgwrFZWVlZWVxuICB0b2tlbiA9IHBhdHRlcm5zLllZWVkuZXhlYyhkYXRlU3RyaW5nKSB8fCBwYXR0ZXJuWVlZWVkuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB2YXIgeWVhclN0cmluZyA9IHRva2VuWzFdXG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6IHBhcnNlSW50KHllYXJTdHJpbmcsIDEwKSxcbiAgICAgIHJlc3REYXRlU3RyaW5nOiBkYXRlU3RyaW5nLnNsaWNlKHllYXJTdHJpbmcubGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIC8vIFlZIG9yIMKxWVlZXG4gIHRva2VuID0gcGF0dGVybnMuWVkuZXhlYyhkYXRlU3RyaW5nKSB8fCBwYXR0ZXJuWVlZLmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgdmFyIGNlbnR1cnlTdHJpbmcgPSB0b2tlblsxXVxuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiBwYXJzZUludChjZW50dXJ5U3RyaW5nLCAxMCkgKiAxMDAsXG4gICAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZShjZW50dXJ5U3RyaW5nLmxlbmd0aClcbiAgICB9XG4gIH1cblxuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICByZXR1cm4ge1xuICAgIHllYXI6IG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuICBpZiAoeWVhciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICB2YXIgdG9rZW5cbiAgdmFyIGRhdGVcbiAgdmFyIG1vbnRoXG4gIHZhciB3ZWVrXG5cbiAgLy8gWVlZWVxuICBpZiAoZGF0ZVN0cmluZy5sZW5ndGggPT09IDApIHtcbiAgICBkYXRlID0gbmV3IERhdGUoMClcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIC8vIFlZWVktTU1cbiAgdG9rZW4gPSBwYXR0ZXJucy5NTS5leGVjKGRhdGVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcblxuICAgIGlmICghdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgICB9XG5cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoKVxuICAgIHJldHVybiBkYXRlXG4gIH1cblxuICAvLyBZWVlZLURERCBvciBZWVlZREREXG4gIHRva2VuID0gcGF0dGVybnMuRERELmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApXG4gICAgdmFyIGRheU9mWWVhciA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcblxuICAgIGlmICghdmFsaWRhdGVEYXlPZlllYXJEYXRlKHllYXIsIGRheU9mWWVhcikpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXG4gICAgfVxuXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBkYXlPZlllYXIpXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIC8vIHl5eXktTU0tZGQgb3IgWVlZWU1NRERcbiAgdG9rZW4gPSBwYXR0ZXJucy5NTURELmV4ZWMoZGF0ZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKDApXG4gICAgbW9udGggPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxuICAgIHZhciBkYXkgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXG5cbiAgICBpZiAoIXZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF5KSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgICB9XG5cbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkpXG4gICAgcmV0dXJuIGRhdGVcbiAgfVxuXG4gIC8vIFlZWVktV3d3IG9yIFlZWVlXd3dcbiAgdG9rZW4gPSBwYXR0ZXJucy5Xd3cuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcblxuICAgIGlmICghdmFsaWRhdGVXZWVrRGF0ZSh5ZWFyLCB3ZWVrKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5T2ZJU09XZWVrWWVhcih5ZWFyLCB3ZWVrKVxuICB9XG5cbiAgLy8gWVlZWS1Xd3ctRCBvciBZWVlZV3d3RFxuICB0b2tlbiA9IHBhdHRlcm5zLld3d0QuZXhlYyhkYXRlU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICB3ZWVrID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcbiAgICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKSAtIDFcblxuICAgIGlmICghdmFsaWRhdGVXZWVrRGF0ZSh5ZWFyLCB3ZWVrLCBkYXlPZldlZWspKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKVxuICAgIH1cblxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWssIGRheU9mV2VlaylcbiAgfVxuXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBkYXRlXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XG4gIHZhciB0b2tlblxuICB2YXIgaG91cnNcbiAgdmFyIG1pbnV0ZXNcblxuICAvLyBoaFxuICB0b2tlbiA9IHBhdHRlcm5zLkhILmV4ZWModGltZVN0cmluZylcbiAgaWYgKHRva2VuKSB7XG4gICAgaG91cnMgPSBwYXJzZUZsb2F0KHRva2VuWzFdLnJlcGxhY2UoJywnLCAnLicpKVxuXG4gICAgaWYgKCF2YWxpZGF0ZVRpbWUoaG91cnMpKSB7XG4gICAgICByZXR1cm4gTmFOXG4gICAgfVxuXG4gICAgcmV0dXJuIChob3VycyAlIDI0KSAqIE1JTExJU0VDT05EU19JTl9IT1VSXG4gIH1cblxuICAvLyBoaDptbSBvciBoaG1tXG4gIHRva2VuID0gcGF0dGVybnMuSEhNTS5leGVjKHRpbWVTdHJpbmcpXG4gIGlmICh0b2tlbikge1xuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKVxuICAgIG1pbnV0ZXMgPSBwYXJzZUZsb2F0KHRva2VuWzJdLnJlcGxhY2UoJywnLCAnLicpKVxuXG4gICAgaWYgKCF2YWxpZGF0ZVRpbWUoaG91cnMsIG1pbnV0ZXMpKSB7XG4gICAgICByZXR1cm4gTmFOXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChob3VycyAlIDI0KSAqIE1JTExJU0VDT05EU19JTl9IT1VSICsgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEVcbiAgICApXG4gIH1cblxuICAvLyBoaDptbTpzcyBvciBoaG1tc3NcbiAgdG9rZW4gPSBwYXR0ZXJucy5ISE1NU1MuZXhlYyh0aW1lU3RyaW5nKVxuICBpZiAodG9rZW4pIHtcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcbiAgICBtaW51dGVzID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxuICAgIHZhciBzZWNvbmRzID0gcGFyc2VGbG9hdCh0b2tlblszXS5yZXBsYWNlKCcsJywgJy4nKSlcblxuICAgIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSkge1xuICAgICAgcmV0dXJuIE5hTlxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAoaG91cnMgJSAyNCkgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUiArXG4gICAgICBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArXG4gICAgICBzZWNvbmRzICogMTAwMFxuICAgIClcbiAgfVxuXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB0aW1lXG4gIHJldHVybiBudWxsXG59XG5cbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xuICB3ZWVrID0gd2VlayB8fCAwXG4gIGRheSA9IGRheSB8fCAwXG4gIHZhciBkYXRlID0gbmV3IERhdGUoMClcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNClcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeURheSA9IGRhdGUuZ2V0VVRDRGF5KCkgfHwgN1xuICB2YXIgZGlmZiA9IHdlZWsgKiA3ICsgZGF5ICsgMSAtIGZvdXJ0aE9mSmFudWFyeURheVxuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKVxuICByZXR1cm4gZGF0ZVxufVxuXG4vLyBWYWxpZGF0aW9uIGZ1bmN0aW9uc1xuXG52YXIgREFZU19JTl9NT05USCA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVxudmFyIERBWVNfSU5fTU9OVEhfTEVBUF9ZRUFSID0gWzMxLCAyOSwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdXG5cbmZ1bmN0aW9uIGlzTGVhcFllYXJJbmRleCh5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8ICh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgaWYgKG1vbnRoIDwgMCB8fCBtb250aCA+IDExKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAoZGF0ZSAhPSBudWxsKSB7XG4gICAgaWYgKGRhdGUgPCAxKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICB2YXIgaXNMZWFwWWVhciA9IGlzTGVhcFllYXJJbmRleCh5ZWFyKVxuICAgIGlmIChpc0xlYXBZZWFyICYmIGRhdGUgPiBEQVlTX0lOX01PTlRIX0xFQVBfWUVBUlttb250aF0pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAoIWlzTGVhcFllYXIgJiYgZGF0ZSA+IERBWVNfSU5fTU9OVEhbbW9udGhdKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIGlmIChkYXlPZlllYXIgPCAxKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgaXNMZWFwWWVhciA9IGlzTGVhcFllYXJJbmRleCh5ZWFyKVxuICBpZiAoaXNMZWFwWWVhciAmJiBkYXlPZlllYXIgPiAzNjYpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAoIWlzTGVhcFllYXIgJiYgZGF5T2ZZZWFyID4gMzY1KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheSkge1xuICBpZiAod2VlayA8IDAgfHwgd2VlayA+IDUyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAoZGF5ICE9IG51bGwgJiYgKGRheSA8IDAgfHwgZGF5ID4gNikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgIT0gbnVsbCAmJiAoaG91cnMgPCAwIHx8IGhvdXJzID49IDI1KSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaWYgKG1pbnV0ZXMgIT0gbnVsbCAmJiAobWludXRlcyA8IDAgfHwgbWludXRlcyA+PSA2MCkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGlmIChzZWNvbmRzICE9IG51bGwgJiYgKHNlY29uZHMgPCAwIHx8IHNlY29uZHMgPj0gNjApKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zLXR6L2VzbS90b0RhdGUvaW5kZXguanMiLCJ2YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xuXG5mdW5jdGlvbiBnZXREYXRlTWlsbGlzZWNvbmRzUGFydChkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAlIE1JTExJU0VDT05EU19JTl9NSU5VVEU7XG59XG4vKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGRpcnR5RGF0ZS5nZXRUaW1lKCkpO1xuICB2YXIgYmFzZVRpbWV6b25lT2Zmc2V0ID0gTWF0aC5jZWlsKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gIGRhdGUuc2V0U2Vjb25kcygwLCAwKTtcbiAgdmFyIGhhc05lZ2F0aXZlVVRDT2Zmc2V0ID0gYmFzZVRpbWV6b25lT2Zmc2V0ID4gMDtcbiAgdmFyIG1pbGxpc2Vjb25kc1BhcnRPZlRpbWV6b25lT2Zmc2V0ID0gaGFzTmVnYXRpdmVVVENPZmZzZXQgPyAoTUlMTElTRUNPTkRTX0lOX01JTlVURSArIGdldERhdGVNaWxsaXNlY29uZHNQYXJ0KGRhdGUpKSAlIE1JTExJU0VDT05EU19JTl9NSU5VVEUgOiBnZXREYXRlTWlsbGlzZWNvbmRzUGFydChkYXRlKTtcbiAgcmV0dXJuIGJhc2VUaW1lem9uZU9mZnNldCAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBtaWxsaXNlY29uZHNQYXJ0T2ZUaW1lem9uZU9mZnNldDtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xuXG4vKipcbiAqIEV2ZW50cyBNaXhpblxuICpcbiAqIEFsbG93IGNsYXNzZXMgdG8gaGF2ZSB0aGVpciBvd24gZXZlbnRzIG1hbmFnZXJcbiAqXG4gKiBAcGFyYW0ge0NsYXNzfSBzdXBlckNsYXNzXG4gKlxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cbiAqL1xuY29uc3QgRXZlbnRzTWl4aW4gPSBzdXBlckNsYXNzID0+XG4gIGNsYXNzIGV4dGVuZHMgc3VwZXJDbGFzcyB7XG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIHJlZ2lzdGVycyBoYW5kbGVyc1xuICAgICAqXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBfX2hhbmRsZXJzID0ge31cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGFuIGV2ZW50IGhhbmRsZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIGhhbmRsZXIgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvbihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICB0aGlzLl9faGFuZGxlcnNbbmFtZV0gPSB0aGlzLl9faGFuZGxlcnNbbmFtZV0gfHwgW11cbiAgICAgIHRoaXMuX19oYW5kbGVyc1tuYW1lXS5wdXNoKGhhbmRsZXIpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXJcbiAgICAgKlxuICAgICAqICoqTm90ZSA6KiogaWYgaGFuZGxlciBpcyBub3QgcHJvdmlkZWQgdGhlbiBhbGwgcmVnaXN0ZXJlZCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gZXZlbnQgd2lsbCBiZSByZW1vdmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBoYW5kbGVyIGZ1bmN0aW9uXG4gICAgICovXG4gICAgb2ZmKG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX19oYW5kbGVyc1tuYW1lXSA9IHRoaXMuX19oYW5kbGVyc1tuYW1lXSB8fCBbXVxuICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9faGFuZGxlcnNbbmFtZV1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgcmVnaXN0ZXJlZEhhbmRsZXIgaW4gdGhpcy5fX2hhbmRsZXJzKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5fX2hhbmRsZXJzLmhhc093blByb3BlcnR5KHJlZ2lzdGVyZWRIYW5kbGVyKSAmJlxuICAgICAgICAgICAgdGhpcy5fX2hhbmRsZXJzW3JlZ2lzdGVyZWRIYW5kbGVyXSA9PT0gaGFuZGxlclxuICAgICAgICAgICkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX19oYW5kbGVyc1tuYW1lXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5vdGlmeSBoYW5kbGVyc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgZXZlbnQgbmFtZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCBwYXlsb2FkXG4gICAgICovXG4gICAgbm90aWZ5KG5hbWUsIHBheWxvYWQpIHtcbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5fX2hhbmRsZXJzW25hbWVdIHx8IFtdXG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgICBoYW5kbGVyKHBheWxvYWQpXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4vKipcbiAqIEFuIGV2ZW50cyBtaXhpbiBkZWNvcmF0b3JcbiAqXG4gKiBAcGFyYW0ge0NsYXNzfSBzdXBlckNsYXNzXG4gKlxuICogQHNlZSB7RXZlbnRzTWl4aW59XG4gKi9cbmZ1bmN0aW9uIHdpdGhFdmVudHNNaXhpbihzdXBlckNsYXNzKSB7XG4gIHJldHVybiBFdmVudHNNaXhpbihzdXBlckNsYXNzKVxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudHNNaXhpblxuZXhwb3J0IHsgRXZlbnRzTWl4aW4sIHdpdGhFdmVudHNNaXhpbiB9XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvRXZlbnRzTWl4aW4vRXZlbnRzTWl4aW4uanMiLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgYXV0b2JpbmQsIG92ZXJyaWRlLCByZWFkb25seSB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycydcclxuaW1wb3J0IHsgd2l0aEV2ZW50c01peGluIH0gZnJvbSAnLi4vRXZlbnRzTWl4aW4nXHJcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi4vQ29tcG9uZW50J1xyXG5pbXBvcnQgJy4vc3R5bGUuc2NzcydcclxuXHJcbi8qKlxyXG4gKiBEYXRlVGltZUlucHV0XHJcbiAqXHJcbiAqIFNpbXBsZSBEYXRlVGltZUlucHV0IGNvbXBvbmVudCB3aGljaCBpbnRlZ3JhdGVzIHRoZSBmbGF0cGlja3JcclxuICpcclxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cclxuICovXHJcbkB3aXRoRXZlbnRzTWl4aW5cclxuY2xhc3MgRGF0ZVRpbWVJbnB1dCBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgLyoqXHJcbiAgICogQ29uc3RhbnQgd2hpY2ggZGVzY3JpYmVzIHRoZSBldmVudCBuYW1lIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGEgZGF0ZVxyXG4gICAqIGlzIHNlbGVjdGVkIHVzaW5nIHRoZSBkYXRlIHBpY2tlclxyXG4gICAqXHJcbiAgICogQHR5cGUge1N0cmluZ31cclxuICAgKi9cclxuICBAcmVhZG9ubHlcclxuICBzdGF0aWMgT05fREFURV9DSEFOR0VEID0gJ0RhdGVUaW1lSW5wdXQuT05fREFURV9DSEFOR0VEJ1xyXG5cclxuICAvKipcclxuICAgKiBUaGUgZGF0ZSBwaWNrZXIgaW5zdGFuY2VcclxuICAgKlxyXG4gICAqIEB0eXBlIHtGbGF0cGlja3JGbn1cclxuICAgKi9cclxuICBwaWNrZXIgPSBudWxsXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBsYXN0IHNlbGVjdGVkIGRhdGVcclxuICAgKlxyXG4gICAqIEB0eXBlIHtEYXRlfG51bGx9XHJcbiAgICovXHJcbiAgc2VsZWN0ZWREYXRlID0gbnVsbFxyXG5cclxuICAvKipcclxuICAgKiBUaGUgY29tcG9uZW50IHJlY2VpdmVkIHBhcmFtcyB3aGVuIGluaXQgaXMgY2FsbGVkXHJcbiAgICpzXHJcbiAgICogQHR5cGUge09iamVjdH1cclxuICAgKi9cclxuICBfcGFyYW1zID0ge31cclxuXHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0IG5ldyBEYXRlVGltZUlucHV0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzRWRpdG9yIHdoZW4gdHJ1ZSAsIHRoZSBpbnB1dCB3aWxsIHN0eWxlZCB0byBmaXQgYXMgYSBjZWxsIGVkaXRvclxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKGlzRWRpdG9yID0gZmFsc2UpIHtcclxuICAgIHN1cGVyKClcclxuXHJcbiAgICB0aGlzLl9ndWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgdGhpcy5fZ3VpLmNsYXNzTmFtZSA9ICdhZy1jZWxsLWVkaXQtd3JhcHBlcidcclxuICAgIHRoaXMuX2d1aS5pbm5lckhUTUwgPSAvKiBodG1sICovIGBcclxuICAgIDxkaXYgY2xhc3M9XCJhZy1jZWxsLWVkaXRvciBhZy1sYWJlbGVkIGFnLWxhYmVsLWFsaWduLWxlZnQgYWctdGV4dC1maWVsZCBhZy1pbnB1dC1maWVsZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiZGF0ZXRpbWVfX2lucHV0ICR7XHJcbiAgICAgICAgaXNFZGl0b3IgPyAnZGF0ZXRpbWVfX2lucHV0LS1lZGl0b3IgJyA6ICcnXHJcbiAgICAgIH0gYWctd3JhcHBlciBhZy1pbnB1dC13cmFwcGVyIGFnLXRleHQtZmllbGQtaW5wdXQtd3JhcHBlclwiPlxyXG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiZGF0ZXRpbWVfX2lucHV0X19pbnB1dCAke1xyXG4gICAgICAgICAgICBpc0VkaXRvciA/ICdhZy1jZWxsLWVkaXQtaW5wdXQgJyA6ICcnXHJcbiAgICAgICAgICB9IGFnLWlucHV0LWZpZWxkLWlucHV0IGFnLXRleHQtZmllbGQtaW5wdXRcIiB0eXBlPVwidGV4dFwiIGRhdGEtaW5wdXQ+XHJcbiAgICAgICAgICA8YSBjbGFzcz1cImRhdGV0aW1lX19pbnB1dF9fY2xlYXJcIiBkYXRhLWNsZWFyPlxyXG4gICAgICAgICAgICA8aSBjbGFzcz1cImRhdGV0aW1lX19pbnB1dF9fY2xlYXJfX2ljb24gYWctaWNvbiBhZy1pY29uLWNyb3NzXCI+PC9pPlxyXG4gICAgICAgICAgPC9hPiAgICBcclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBpbmhlcml0RG9jXHJcbiAgICovXHJcbiAgQG92ZXJyaWRlXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgaW5pdChwYXJhbXMpIHtcclxuICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtc1xyXG4gICAgY29uc3QgZW5hYmxlVGltZSA9IHRoaXMuZ2V0T3B0aW9uKCdkYXRlVGltZUVuYWJsZVRpbWUnLCBwYXJhbXMsIHRydWUpXHJcbiAgICBjb25zdCB0aW1lXzI0aHIgPSB0aGlzLmdldE9wdGlvbignZGF0ZVRpbWVFbmFibGUyNEhSJywgcGFyYW1zLCB0cnVlKVxyXG4gICAgY29uc3QgZW5hYmxlU2Vjb25kcyA9IHRoaXMuZ2V0T3B0aW9uKCdkYXRlVGltZUVuYWJsZVNlY29uZHMnLCBwYXJhbXMsIGZhbHNlKVxyXG4gICAgY29uc3Qgbm9DYWxlbmRhciA9ICF0aGlzLmdldE9wdGlvbignZGF0ZVRpbWVFbmFibGVDYWxlbmRhcicsIHBhcmFtcywgdHJ1ZSlcclxuXHJcbiAgICBsZXQgZGF0ZUZvcm1hdCA9IHRoaXMuZ2V0T3B0aW9uKCdkYXRlVGltZU1hc2snLCBwYXJhbXMpXHJcblxyXG4gICAgLy8gdHJ5IHRvIGdlbmVyYXRlIGEgZGVmYXVsdCBkYXRlIGZvcm1hdCBiYXNlZCBvbiB0aGUgb3B0aW9uc1xyXG4gICAgaWYgKCFkYXRlRm9ybWF0KSB7XHJcbiAgICAgIGRhdGVGb3JtYXQgPSBub0NhbGVuZGFyID8gJycgOiAnJVkvJU16LyVEeidcclxuICAgICAgaWYgKGVuYWJsZVRpbWUpIHtcclxuICAgICAgICBkYXRlRm9ybWF0ICs9IHRpbWVfMjRociA/ICcgJUh6OiVteicgOiAnICVoejolbXonXHJcblxyXG4gICAgICAgIGlmIChlbmFibGVTZWNvbmRzKSB7XHJcbiAgICAgICAgICBkYXRlRm9ybWF0ICs9ICc6JXN6J1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRhdGVGb3JtYXQgPSBkYXRlRm9ybWF0LnRyaW0oKVxyXG5cclxuICAgIC8vIGluaXQgdGhlIGRhdGUgcGlja2VyXHJcbiAgICB0aGlzLnBpY2tlciA9IGZsYXRwaWNrcih0aGlzLl9ndWksIHtcclxuICAgICAgd3JhcDogdHJ1ZSxcclxuICAgICAgLy8gYWxsb3cgZW50ZXJpbmcgdGhlIGRhdGUgbWFudWFsbHkgcmVxdWlyZXMgZGF0ZSBwYXJzaW5nIGZyb20gc3RyaW5nXHJcbiAgICAgIC8vIHRoaXMgaXMgYSB0b3VnaCB0aGluZyBhbmQgcmVxdWlyZXMgbGlicyBsaWtlIG1vbWVudFxyXG4gICAgICBhbGxvd0lucHV0OiBmYWxzZSxcclxuICAgICAgb25DaGFuZ2U6IHRoaXMuX29uRGF0ZUNoYW5nZWQsXHJcbiAgICAgIGZvcm1hdERhdGU6IHRoaXMuZm9ybWF0RGF0ZSxcclxuICAgICAgbWF4RGF0ZTogdGhpcy5nZXRPcHRpb24oJ2RhdGVUaW1lTWF4JywgcGFyYW1zLCBudWxsKSxcclxuICAgICAgbWluRGF0ZTogdGhpcy5nZXRPcHRpb24oJ2RhdGVUaW1lTWluJywgcGFyYW1zLCBudWxsKSxcclxuICAgICAgZGVmYXVsdEhvdXI6IHRoaXMuZ2V0T3B0aW9uKCdkYXRlVGltZURlZmF1bHRIb3VyJywgcGFyYW1zLCAxMiksXHJcbiAgICAgIGRlZmF1bHRNaW51dGU6IHRoaXMuZ2V0T3B0aW9uKCdkYXRlVGltZURlZmF1bHRNaW51dGUnLCBwYXJhbXMsIDApLFxyXG4gICAgICBkaXNhYmxlTW9iaWxlOiB0aGlzLmdldE9wdGlvbignZGF0ZVRpbWVEaXNhYmxlTW9iaWxlJywgcGFyYW1zLCBmYWxzZSksXHJcbiAgICAgIHdlZWtOdW1iZXJzOiB0aGlzLmdldE9wdGlvbignZGF0ZVRpbWVFbmFibGVXZWVrTnVtYmVyJywgcGFyYW1zLCBmYWxzZSksXHJcbiAgICAgIGxvY2FsZTogdGhpcy5fZ2V0UGlja2VyTG9jYWxlKCksXHJcbiAgICAgIG5vQ2FsZW5kYXIsXHJcbiAgICAgIGRhdGVGb3JtYXQsXHJcbiAgICAgIGVuYWJsZVRpbWUsXHJcbiAgICAgIGVuYWJsZVNlY29uZHMsXHJcbiAgICAgIHRpbWVfMjRocixcclxuICAgIH0pXHJcblxyXG4gICAgLy8gZm9yY2UgZGlhbG9nIG92ZXJmbG93XHJcbiAgICB0aGlzLnBpY2tlci5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdhZy1jdXN0b20tY29tcG9uZW50LXBvcHVwJylcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBpbmhlcml0RG9jXHJcbiAgICovXHJcbiAgQG92ZXJyaWRlXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMucGlja2VyLmRlc3Ryb3koKVxyXG4gICAgdGhpcy5vZmYoRGF0ZVRpbWVJbnB1dC5PTl9EQVRFX0NIQU5HRUQpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHBpY2tlciBkYXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0RhdGV8U3RyaW5nfSB2YWx1ZSB0aGUgZGF0ZSB2YWx1ZSB0byBzZXRcclxuICAgKi9cclxuICBzZXREYXRlKHZhbHVlKSB7XHJcbiAgICB0aGlzLnBpY2tlci5zZXREYXRlKHZhbHVlLCB0cnVlKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3BlbiBQaWNrZXJcclxuICAgKi9cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5waWNrZXIub3BlbigpXHJcbiAgICB0aGlzLl9ndWkucXVlcnlTZWxlY3RvcignaW5wdXQnKS5mb2N1cygpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbG9zZSBwaWNrZXJcclxuICAgKi9cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMucGlja2VyLmNsb3NlKClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IHRoZSBwaWNrZXJcclxuICAgKi9cclxuICByZXNldCgpIHtcclxuICAgIC8qKiB0aGlzIGNoZWNrIGJlY2F1c2UgdGhlIHRlc3RzIGZhaWwgaGVyZSBmb3Igc29tZSByZWFzb25zICAqL1xyXG4gICAgaWYgKHRoaXMucGlja2VyLmNvbmZpZykge1xyXG4gICAgICB0aGlzLnBpY2tlci5jbGVhcigpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3JtYXQgdGhlIGRhdGUgdXNpbmcgYEJCai5NYXNrcy5UeXBlcy5kYXRlYFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGUgZGF0ZSBhcyBhIHN0cmluZ1xyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgQkJqIGRhdGUgZm9ybWF0XHJcbiAgICpcclxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGZvcm1hdHRlZCBkYXRlIGFzIHN0cmluZ1xyXG4gICAqL1xyXG4gIEBhdXRvYmluZFxyXG4gIGZvcm1hdERhdGUoZGF0ZSwgZm9ybWF0KSB7XHJcbiAgICBjb25zdCBkYXRlVGltZUZvcm1hdHRlciA9IHRoaXMuZ2V0T3B0aW9uKCdkYXRlVGltZUZvcm1hdHRlcicsIHRoaXMuX3BhcmFtcylcclxuICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuZ2V0T3B0aW9uKFxyXG4gICAgICAnZGF0ZVRpbWVMb2NhbGUnLFxyXG4gICAgICB0aGlzLl9wYXJhbXMsXHJcbiAgICAgIEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS5sb2NhbGUgfHwgJ2VuLVVTJ1xyXG4gICAgKVxyXG5cclxuICAgIGlmIChkYXRlVGltZUZvcm1hdHRlcikge1xyXG4gICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGRhdGVUaW1lRm9ybWF0dGVyXHJcbiAgICAgIGxldCBleHByZXNzaW9uID0gZGF0ZVRpbWVGb3JtYXR0ZXJcclxuXHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICBpZiAoIShleHByZXNzaW9uLmluZGV4T2YoJ3JldHVybicpID49IDApKSB7XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSAncmV0dXJuICcgKyBleHByZXNzaW9uICsgJzsnXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcclxuICAgICAgICAgICAgJ2RhdGUnLFxyXG4gICAgICAgICAgICAnZm9ybWF0JyxcclxuICAgICAgICAgICAgJ2xvY2FsZScsXHJcbiAgICAgICAgICAgICdEYXRlTWFzaycsXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25cclxuICAgICAgICAgICkoZGF0ZSwgZm9ybWF0LCBsb2NhbGUsIEJCai5NYXNrcy5EYXRlTWFzaylcclxuXHJcbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICAgICAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0dGVyKGRhdGUsIGZvcm1hdCwgbG9jYWxlLCBCQmouTWFza3MuRGF0ZU1hc2spXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgYEludmFsaWQgZGF0ZVRpbWVGb3JtYXR0ZXIgZGVmaW5lZCBmb3IgY29sdW1uIFwiJHt0aGlzLl9wYXJhbXMuY29sRGVmLmZpZWxkfVwiLiBUaGUgZm9ybWF0dGVyIHNob3VsZCBiZSBhbiBleHByZXNzaW9uIG9yIHBsYWluIGZ1bmN0aW9uYFxyXG4gICAgICAgICAgKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIWZvcm1hdCB8fCAoZm9ybWF0ICYmIGZvcm1hdC5pbmRleE9mKCclJykgPCAwKSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gQkJqLk1hc2tzLkRhdGVNYXNrLm1hc2soZGF0ZSwgZm9ybWF0LCBsb2NhbGUpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaXN0ZW4gdG8gZGF0ZSBwaWNrZXIgY2hhbmdlcyBhbmQgdXBkYXRlIHRoZSBzZWxlY3RlZCBkYXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0FycmF5fSBzZWxlY3RlZERhdGVzICBhcnJheSBvZiBzZWxlY3RlZCBkYXRlc1xyXG4gICAqL1xyXG4gIEBhdXRvYmluZFxyXG4gIF9vbkRhdGVDaGFuZ2VkKHNlbGVjdGVkRGF0ZXMpIHtcclxuICAgIHRoaXMuc2VsZWN0ZWREYXRlID0gc2VsZWN0ZWREYXRlc1swXSB8fCBudWxsXHJcbiAgICB0aGlzLm5vdGlmeShEYXRlVGltZUlucHV0Lk9OX0RBVEVfQ0hBTkdFRCwgdGhpcy5zZWxlY3RlZERhdGUpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgcGlja2VyIGdsb2JhbCBsb2NhbGl6YXRpb24gd2hpY2ggd2lsbCB3b3JrIHdpdGggYW55IGxvY2FsZVxyXG4gICAqXHJcbiAgICogQHJldHVybiB7T2JqZWN0fVxyXG4gICAqXHJcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZsYXRwaWNrci9mbGF0cGlja3IvYmxvYi9tYXN0ZXIvc3JjL2wxMG4vZGVmYXVsdC50c1xyXG4gICAqL1xyXG4gIF9nZXRQaWNrZXJMb2NhbGUoKSB7XHJcbiAgICBjb25zdCBsb2NhbGUgPSBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlIHx8ICdlbi1VUydcclxuXHJcbiAgICBjb25zdCB3ZWVrRGF5c1Nob3J0ID0gW11cclxuICAgIGNvbnN0IHdlZWtEYXlzTG9uZyA9IFtdXHJcblxyXG4gICAgZm9yIChsZXQgZGF5ID0gNDsgZGF5IDwgMTE7IGRheSsrKSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgxOTcwLCAxIC0gMSwgZGF5KVxyXG5cclxuICAgICAgd2Vla0RheXNTaG9ydC5wdXNoKFxyXG4gICAgICAgIGRhdGVcclxuICAgICAgICAgIC50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcclxuICAgICAgICAgICAgd2Vla2RheTogJ3Nob3J0JyxcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuc3BsaXQoJywnKVswXSAvLyB0aGUgZGF0ZS10aW1lLWZvcm1hdC10aW1lem9uZSBwb2x5ZmlsbCBhdHRhY2ggdGhlIGRhdGUgYWxzb1xyXG4gICAgICApXHJcblxyXG4gICAgICB3ZWVrRGF5c0xvbmcucHVzaChcclxuICAgICAgICBkYXRlXHJcbiAgICAgICAgICAudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7XHJcbiAgICAgICAgICAgIHdlZWtkYXk6ICdsb25nJyxcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuc3BsaXQoJywnKVswXSAvLyB0aGUgZGF0ZS10aW1lLWZvcm1hdC10aW1lem9uZSBwb2x5ZmlsbCBhdHRhY2ggdGhlIGRhdGUgYWxzb1xyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbW9udGhzU2hvcnQgPSBbXVxyXG4gICAgY29uc3QgbW9udGhzTG9uZyA9IFtdXHJcblxyXG4gICAgZm9yIChsZXQgbW9udGggPSAwOyBtb250aCA8IDEyOyBtb250aCsrKSB7XHJcbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgxOTcwLCBtb250aCwgNClcclxuXHJcbiAgICAgIG1vbnRoc1Nob3J0LnB1c2goXHJcbiAgICAgICAgZGF0ZS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcclxuICAgICAgICAgIG1vbnRoOiAnc2hvcnQnLFxyXG4gICAgICAgIH0pXHJcbiAgICAgIClcclxuXHJcbiAgICAgIG1vbnRoc0xvbmcucHVzaChcclxuICAgICAgICBkYXRlLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwge1xyXG4gICAgICAgICAgbW9udGg6ICdsb25nJyxcclxuICAgICAgICB9KVxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2Vla2RheXM6IHtcclxuICAgICAgICBzaG9ydGhhbmQ6IHdlZWtEYXlzU2hvcnQsXHJcbiAgICAgICAgbG9uZ2hhbmQ6IHdlZWtEYXlzTG9uZyxcclxuICAgICAgfSxcclxuICAgICAgbW9udGhzOiB7XHJcbiAgICAgICAgc2hvcnRoYW5kOiBtb250aHNTaG9ydCxcclxuICAgICAgICBsb25naGFuZDogbW9udGhzTG9uZyxcclxuICAgICAgfSxcclxuICAgICAgZGF5c0luTW9udGg6IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSxcclxuICAgICAgZmlyc3REYXlPZldlZWs6IEJCai5NYXNrcy5VdGlscy5EYXRlcy5nZXRXZWVrU3RhcnRCeUxvY2FsZShsb2NhbGUpLFxyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcclxuICAgICAgb3JkaW5hbDogbnVtYmVyID0+ICcnLFxyXG4gICAgICByYW5nZVNlcGFyYXRvcjogJyAgJyxcclxuICAgICAgd2Vla0FiYnJldmlhdGlvbjogJycsXHJcbiAgICAgIHNjcm9sbFRpdGxlOiAnJyxcclxuICAgICAgdG9nZ2xlVGl0bGU6ICcnLFxyXG4gICAgICBhbVBNOiBbJ0FNJywgJ1BNJ10sXHJcbiAgICAgIHllYXJBcmlhTGFiZWw6ICcnLFxyXG4gICAgICBob3VyQXJpYUxhYmVsOiAnJyxcclxuICAgICAgbWludXRlQXJpYUxhYmVsOiAnJyxcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERhdGVUaW1lSW5wdXRcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0RhdGVUaW1lSW5wdXQvRGF0ZVRpbWVJbnB1dC5qcyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuaGVhZFxuICAgICAgICAgICAgICB9O1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9EYXRlVGltZUlucHV0L3N0eWxlLnNjc3MiLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5kYXRldGltZV9faW5wdXR7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbjtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWFnLWlucHV0LWJvcmRlci1jb2xvciwgdmFyKC0tYWctYm9yZGVyLWNvbG9yLCAjYmFiZmM3KSk7Ym9yZGVyLXJhZGl1czozcHh9LmRhdGV0aW1lX19pbnB1dDpmb2N1cywuZGF0ZXRpbWVfX2lucHV0OmFjdGl2ZSwuZGF0ZXRpbWVfX2lucHV0OmhvdmVye2JvcmRlci1jb2xvcjp2YXIoLS1hZy1pbnB1dC1mb2N1cy1ib3JkZXItY29sb3IsIHJnYmEoMzMsMTUwLDI0MywwLjQpKX0uZGF0ZXRpbWVfX2lucHV0X19pbnB1dHtmbGV4OjE7cGFkZGluZzo2cHg7Ym9yZGVyOm5vbmU7b3V0bGluZTpub25lO2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvcik7Y29sb3I6aW5oZXJpdH0uYWctdGhlbWUtYWxwaW5lIC5kYXRldGltZV9faW5wdXRfX2lucHV0LC5hZy10aGVtZS1iYWxoYW0gLmRhdGV0aW1lX19pbnB1dF9faW5wdXQsLmFnLXRoZW1lLW1hdGVyaWFsIC5kYXRldGltZV9faW5wdXRfX2lucHV0e2JhY2tncm91bmQtY29sb3I6dmFyKC0tYWctYmFja2dyb3VuZC1jb2xvciwgI2ZmZil9LmFnLXRoZW1lLWFscGluZS1kYXJrIC5kYXRldGltZV9faW5wdXRfX2lucHV0LC5hZy10aGVtZS1iYWxoYW0tZGFyayAuZGF0ZXRpbWVfX2lucHV0X19pbnB1dHtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWFnLWJhY2tncm91bmQtY29sb3IsICMyZDM0MzYpfS5kYXRldGltZV9faW5wdXRfX2NsZWFye21hcmdpbi1sZWZ0OjFweDttYXJnaW4tdG9wOjFweDtwYWRkaW5nOjZweDt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXI6bm9uZTtvdXRsaW5lOm5vbmU7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6aW5oZXJpdH0uZGF0ZXRpbWVfX2lucHV0LS1lZGl0b3J7Ym9yZGVyLWNvbG9yOnZhcigtLWFnLWlucHV0LWZvY3VzLWJvcmRlci1jb2xvciwgcmdiYSgzMywxNTAsMjQzLDAuNCkpfS5kYXRldGltZV9faW5wdXQtLWVkaXRvciAuZGF0ZXRpbWVfX2lucHV0X19pbnB1dHtwYWRkaW5nOjA7cGFkZGluZy1sZWZ0OjZweH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3JjL0RhdGVUaW1lSW5wdXQvc3R5bGUuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMTI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuaGVhZFxuICAgICAgICAgICAgICB9O1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9EYXRlVGltZUZpbHRlci9zdHlsZS5zY3NzIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZGF0ZVRpbWVGaWx0ZXIgc2VsZWN0e21hcmdpbi1ib3R0b206OXB4O3BhZGRpbmc6NnB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgdmFyKC0tYWctaW5wdXQtYm9yZGVyLWNvbG9yLCB2YXIoLS1hZy1ib3JkZXItY29sb3IsICNiYWJmYzcpKTtjb2xvcjppbmhlcml0fS5kYXRlVGltZUZpbHRlciBzZWxlY3Q6Zm9jdXMsLmRhdGVUaW1lRmlsdGVyIHNlbGVjdDphY3RpdmV7Ym9yZGVyLWNvbG9yOnZhcigtLWFnLWlucHV0LWZvY3VzLWJvcmRlci1jb2xvciwgcmdiYSgzMywxNTAsMjQzLDAuNCkpfS5kYXRlVGltZUZpbHRlciBzZWxlY3Qgb3B0aW9ue3RleHQtaW5kZW50OjZweH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3JjL0RhdGVUaW1lRmlsdGVyL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMiLCIvKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtYWdncmlkLWNvbXBvbmVudHMgbGliLlxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxuICpcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cbiAqL1xuXG5pbXBvcnQgRGF0ZVRpbWVFZGl0b3IgZnJvbSAnLi9EYXRlVGltZUVkaXRvcidcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVRpbWVFZGl0b3JcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9EYXRlVGltZUVkaXRvci9pbmRleC5qcyIsIi8qXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1hZ2dyaWQtY29tcG9uZW50cyBsaWIuXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XG4gKlxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxuICovXG5cbmltcG9ydCB7IGF1dG9iaW5kLCBvdmVycmlkZSB9IGZyb20gJ2NvcmUtZGVjb3JhdG9ycydcbmltcG9ydCB1dGNUb1pvbmVkVGltZSBmcm9tICdkYXRlLWZucy10ei91dGNUb1pvbmVkVGltZSdcbmltcG9ydCBEYXRlVGltZUlucHV0IGZyb20gJy4uL0RhdGVUaW1lSW5wdXQnXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4uL0NvbXBvbmVudCdcblxuLyoqXG4gKiBEYXRlVGltZUlucHV0XG4gKlxuICogU2ltcGxlIERhdGVUaW1lSW5wdXQgY29tcG9uZW50IHdoaWNoIGludGVncmF0ZXMgdGhlIGZsYXRwaWNrclxuICpcbiAqICMjIE9wdGlvbnNcbiAqXG4gKiB8IE5hbWUgICAgICAgICAgICAgICAgICBcdHwgRGVmYXVsdCAgICAgXHR8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcdHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHR8Oi0tLS0tLS0tLS0tLS06fC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAqKmRhdGVUaW1lRW5hYmxlVGltZSoqICAgfCBmYWxzZSAgICB8IGVuYWJsZSAvIGRpc2FibGUgdGltZVxuICogfCAqKmRhdGVUaW1lRW5hYmxlMjRIUioqICAgfCBmYWxzZSAgICB8IGVuYWJsZSAvIGRpc2FibGUgdGltZSAyNCBmb3JtYXRcbiAqIHwgKipkYXRlVGltZUVuYWJsZVNlY29uZHMqKiAgIHwgZmFsc2UgICAgfCBlbmFibGUgLyBkaXNhYmxlIHNlY29uZHMgbWFuYWdlbWVudFxuICogfCAqKmRhdGVUaW1lRW5hYmxlQ2FsZW5kYXIqKiAgIHwgZmFsc2UgICAgfCBlbmFibGUgLyBkaXNhYmxlIENhbGVuZGFyLlxuICogfCAqKmRhdGVUaW1lTWFzayoqICAgfCBmYWxzZSAgICB8IFRoZSBtYXNrIHVzZWQgdG8gZm9ybWF0IHRoZSBzZWxlY3RlZCBkYXRlXG4gKiB8ICoqZGF0ZVRpbWVNYXgqKiAgIHwgdW5kZWZpbmVkICAgIHwgIE1heCBhbGxvd2VkIGRhdGVcbiAqIHwgKipkYXRlVGltZU1pbioqICAgfCB1bmRlZmluZWQgICAgfCAgTWluIGFsbG93ZWQgZGF0ZVxuICogfCAqKmRhdGVUaW1lRm9ybWF0dGVyKiogICB8IGZhbHNlICAgIHwgIEEgZnVuY3Rpb24gb3IgZXhwcmVzc2lvbiB0byBmb3JtYXQgdGhlIGRhdGUgKEBzZWUgc3VwcG9ydGVkIHBhcmFtKVxuICogfCAqKmRhdGVUaW1lTG9jYWxlKiogICB8IFN5c3RlbSBkZWZhdWx0ICAgIHwgIEEgbG9jYWxlIHRvIHVzZSBmb3IgZGF0ZSBmb3JtYXR0aW5nXG4gKiB8ICoqZGF0ZVRpbWVEZWZhdWx0SG91cioqICAgfCAxMiAgICB8ICBJbml0aWFsIHZhbHVlIG9mIHRoZSBob3VyIGVsZW1lbnQuXG4gKiB8ICoqZGF0ZVRpbWVEZWZhdWx0TWludXRlKiogICB8IDAgICAgfCAgSW5pdGlhbCB2YWx1ZSBvZiB0aGUgbWludXRlIGVsZW1lbnQuXG4gKiB8ICoqZGF0ZVRpbWVEaXNhYmxlTW9iaWxlKiogICB8IGZhbHNlICAgIHwgIFNldCBkaXNhYmxlTW9iaWxlIHRvIHRydWUgdG8gYWx3YXlzIHVzZSB0aGUgbm9uLW5hdGl2ZSBwaWNrZXIuXG4gKiB8ICoqZGF0ZVRpbWVFbmFibGVXZWVrTnVtYmVyKiogICB8IHRydWUgICAgfCAgRW5hYmxlcyBkaXNwbGF5IG9mIHdlZWsgbnVtYmVycyBpbiBjYWxlbmRhci5cbiAqXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxuICovXG5jbGFzcyBEYXRlVGltZUVkaXRvciBleHRlbmRzIENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBAdHlwZSB7RGF0ZVRpbWVJbnB1dH1cbiAgICovXG4gIF9pbnB1dCA9IG5ldyBEYXRlVGltZUlucHV0KHRydWUpXG5cbiAgLyoqXG4gICAqIEB0eXBlIHtTdHJpbmd9XG4gICAqL1xuICBfdmFsdWUgPSBudWxsXG5cbiAgLyoqXG4gICAqIFBhcmFtcyByZWNlaXZlZCBpbiBpbml0XG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICBfcGFyYW1zID0gbnVsbFxuXG4gIC8qKlxuICAgKiBUYWtlcyBpbmNvbXBsZXRlIGlzbyBzdHJpbmcgYW5kIHJldHVybiBhIGNvbXBsZXRlIG9uZVxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0ZSBpbmNvbXBsZXRlIGlzbyBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfSBjb21wbGV0ZSBpc28gc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgZml4U2hvcnRJU08odmFsdWUpIHtcbiAgICByZXR1cm4gQkJqLk1hc2tzLlV0aWxzLkRhdGVzLmZpeFNob3J0SVNPKHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBAb3ZlcnJpZGVcbiAgaW5pdChwYXJhbXMpIHtcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXNcbiAgICB0aGlzLmZvY3VzQWZ0ZXJBdHRhY2hlZCA9IHBhcmFtcy5jZWxsU3RhcnRlZEVkaXRcbiAgICBpZiAodGhpcy5mb2N1c0FmdGVyQXR0YWNoZWQpIHtcbiAgICAgIGxldCBrZXlQcmVzc0JhY2tzcGFjZU9yRGVsZXRlID1cbiAgICAgICAgcGFyYW1zLmtleVByZXNzID09IDMyIHx8IHBhcmFtcy5rZXlQcmVzcyA9PSA0NiAvLyBzcGFjZSAvLyBkZWxldGVcblxuICAgICAgaWYgKGtleVByZXNzQmFja3NwYWNlT3JEZWxldGUpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSAnJ1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2hhclByZXNzICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gcGFyYW1zLmNoYXJQcmVzc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBwYXJhbXMudmFsdWVcbiAgICAgICAgaWYgKHBhcmFtcy5rZXlQcmVzcyAhPSAxMTMpIHtcbiAgICAgICAgICAvL0YyXG4gICAgICAgICAgdGhpcy5oaWdobGlnaHRBbGxPbkZvY3VzID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ZhbHVlID0gcGFyYW1zLnZhbHVlXG4gICAgfVxuXG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLl92YWx1ZSA/IERhdGVUaW1lRWRpdG9yLmZpeFNob3J0SVNPKHRoaXMuX3ZhbHVlKSA6IHRoaXMuX3ZhbHVlO1xuICAgIHRoaXMuX2lucHV0LmluaXQocGFyYW1zKVxuICAgIHRoaXMuX2lucHV0Lm9uKERhdGVUaW1lSW5wdXQuT05fREFURV9DSEFOR0VELCB0aGlzLl9vbkRhdGVDaGFuZ2UpXG5cbiAgICBpZiAodGhpcy5fdmFsdWUpIHtcbiAgICAgIHRoaXMuX2lucHV0LnNldERhdGUoXG4gICAgICAgIHV0Y1RvWm9uZWRUaW1lKHRoaXMuX3ZhbHVlLCBCQmouTWFza3MuVXRpbHMuRGF0ZXMuZ2V0VGltZXpvbmVPck9mZnNldCgpKVxuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuX2d1aSA9IHRoaXMuX2lucHV0LmdldEd1aSgpXG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIEBvdmVycmlkZVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuX2lucHV0LmRlc3Ryb3koKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgY2FsbGVkIG9uY2UgYWZ0ZXIgR1VJIGlzIGF0dGFjaGVkIHRvIERPTS5cbiAgICogTWFrZSBzdXJlIHRoZSBjb250YWluZXIgaXMgYWx3YXlzIGZvY3VzZWQgYW5kIGxpc3RlbmluZyB0byBrZXkgY2hhbmdlc1xuICAgKi9cbiAgYWZ0ZXJHdWlBdHRhY2hlZCgpIHtcbiAgICBpZiAodGhpcy5mb2N1c0FmdGVyQXR0YWNoZWQpIHtcbiAgICAgIHRoaXMuZm9jdXNJbigpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZmluYWwgdmFsdWUgdG8gdGhlIGdyaWQsIHRoZSByZXN1bHQgb2YgdGhlIGVkaXRpbmdcbiAgICpcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIGdldFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXJhbXMucGFyc2VWYWx1ZSh0aGlzLl92YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGNhbGxlZCBvbmNlIGFmdGVyIGluaXRpYWxpemVkIGFuZCByZXR1cm5zIGZhbHNlIHNvIHRoZSBlZGl0b3IgYXBwZWFycyBpbiB0aGUgY2VsbFxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBhbHdheXMgZmFsc2VcbiAgICoqL1xuICBpc1BvcHVwKCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGRvaW5nIGZ1bGwgcm93IGVkaXQsIHRoZW4gZ2V0cyBjYWxsZWQgd2hlbiB0YWJiaW5nIGludG8gdGhlIGNlbGwuXG4gICAqL1xuICBmb2N1c0luKCkge1xuICAgIHRoaXMuX2lucHV0Lm9wZW4oKVxuICB9XG5cbiAgLyoqXG4gICAqIElmIGRvaW5nIGZ1bGwgcm93IGVkaXQsIHRoZW4gZ2V0cyBjYWxsZWQgd2hlbiB0YWJiaW5nIG91dCBvZiB0aGUgY2VsbC5cbiAgICovXG4gIGZvY3VzT3V0KCkge1xuICAgIHRoaXMuX2lucHV0LmNsb3NlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGVkaXRvciB2YWx1ZSB3aXRoIHNlbGVjdGVkIGRhdGUgZnJvbSB0aGUgaW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGVcbiAgICovXG4gIEBhdXRvYmluZFxuICBfb25EYXRlQ2hhbmdlKGRhdGUpIHtcbiAgICB0aGlzLl92YWx1ZSA9IGRhdGUgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZS50b0lTT1N0cmluZygpIDogJydcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRlVGltZUVkaXRvclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0RhdGVUaW1lRWRpdG9yL0RhdGVUaW1lRWRpdG9yLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNmIzYjQ1ODI2ZGYwMTNhZmFiYWIiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJiYmotbWFza3Mvc3JjL1N0cmluZ01hc2tcIixcImNvbW1vbmpzMlwiOlwiYmJqLW1hc2tzL3NyYy9TdHJpbmdNYXNrXCIsXCJhbWRcIjpcImJiai1tYXNrcy9zcmMvU3RyaW5nTWFza1wiLFwicm9vdFwiOltcIkJCalwiLFwiTWFza3NcIixcIlN0cmluZ01hc2tcIl19XG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtaW5wdXQtbWFza2luZyBsaWIuXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRleHRJbnB1dCBmcm9tICcuL1RleHRJbnB1dCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRleHRJbnB1dFxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvVGV4dElucHV0L2luZGV4LmpzIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmFzaXMtaW5wdXQtbWFza2luZyBsaWIuXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0cmluZ01hc2sgZnJvbSAnYmJqLW1hc2tzL3NyYy9TdHJpbmdNYXNrJ1xyXG5pbXBvcnQge1xyXG4gIG1hc2tJZk5vdE1hc2tlZCxcclxuICB1bm1hc2ssXHJcbiAgZmluZENhcmV0UG9zaXRpb24sXHJcbiAgZ2VuZXJhdGVQYXR0ZXJuRnJvbU1hc2ssXHJcbn0gZnJvbSAnLi90b29scy5qcydcclxuXHJcbi8qKlxyXG4gKiBUaGUgYFRleHRJbnB1dGAgd2lsbCB3cmFwIHRleHQgaW5wdXRzIGFuZCBhcHBseSB0aGUgZ2l2ZW4gW2JiaiBzdHJpbmcgbWFza10oaHR0cHM6Ly9naXRodWIuY29tL0Jhc2lzSHViL2Jiai1tYXNrcyNzdHJpbmctbWFza3MpXHJcbiAqXHJcbiAqICoqT3B0aW9ucyoqXHJcbiAqXHJcbiAqIF9PcHRpb25zIGNhbiBiZSBwYXNzZWQgdmlhIGRhdGEgYXR0cmlidXRlcyAuIEZvciBkYXRhIGF0dHJpYnV0ZXMsIGFwcGVuZCB0aGUgb3B0aW9uIG5hbWUgdG8gZGF0YS0sIGFzIGluIGRhdGEtbWFza19cclxuICpcclxuICogfCBPcHRpb24gICAgfCBEZWZhdWx0IHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxyXG4gKiB8IG1hc2sgfCAgICAgICAgIHwgVGhlIGJiaiBzdHJpbmcgbWFzayBAc2VlIFtCQmogU3RyaW5nIE1hc2tzXShodHRwczovL2dpdGh1Yi5jb20vQmFzaXNIdWIvYmJqLW1hc2tzI3N0cmluZy1tYXNrcykgfFxyXG4gKlxyXG4gKiAgPGJyPlxyXG4gKlxyXG4gKiAqKkV4YW1wbGUgOioqXHJcbiAqIGBgYGh0bWxcclxuICogIDxpbnB1dCBjbGFzcz1cImJiai10ZXh0LW1hc2tlZFwiIG5hbWU9XCJ0ZXN0XCIgaWQ9XCJ0ZXN0XCIgdmFsdWU9XCJlZDIzXCIgZGF0YS1tYXNrPVwiQUEtMDBcIj5cclxuICpcclxuICogIDxzY3JpcHQ+XHJcbiAqICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoZSkge1xyXG4gKiAgICAgIG5ldyBCYXNpcy5JbnB1dE1hc2tpbmcuVGV4dElucHV0KHtcclxuICogICAgICAgICBvblVwZGF0ZTogKG1hc2tlZFZhbHVlICwgcmF3VmFsdWUgLCBpbnB1dCkgPT4ge1xyXG4gKiAgICAgICAgICAgIC8vIGRvIHNvbWV0aGluZ1xyXG4gKiAgICAgICAgIH0sXHJcbiAqICAgICAgICAgb25JbnZhbGlkOiAoZXJyICwgaW5wdXQpID0+IHtcclxuICogICAgICAgICAgICAvLyBkbyBzb21ldGhpbmdcclxuICogICAgICAgICB9XHJcbiAqICAgICAgfSlcclxuICogICAgfSlcclxuICogIDwvc2NyaXB0PlxyXG4gKiBgYGBcclxuICpcclxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cclxuICovXHJcbmNsYXNzIFRleHRJbnB1dCB7XHJcbiAgLyoqXHJcbiAgICogQ29uc3RydWN0IG5ldyBUZXh0SW5wdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7P09iamVjdH0gb3B0aW9ucyAtIFRoZSBpbnB1dCBvcHRpb25zLlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8U3RyaW5nfSBbb3B0aW9ucy5lbGVtZW50cz1cIi5iYmotdGV4dC1tYXNrZWRcIl0gLSBUaGUgY2xhc3MgbmFtZSBvciB0aGUgbm9kZSB0byB1c2VcclxuICAgKiBAcGFyYW0ge0hUTUxEb2N1bWVudH0gW29wdGlvbnMuZG9jdW1lbnQ9ZG9jdW1lbnRdIC0gRG9jdW1lbnQgaW5zdGFuY2UgdG8gdXNlXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNzc0NsYXNzRXJyb3I9XCJiYmotbWFzay1lcnJvclwiXSAtIEEgY3NzIGNsYXNzIHRvIGF0dGFjaCB0byB0aGUgaW5wdXQgd2hlbiBpdCBpcyBpbnZhbGlkXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNzc0NsYXNzU3VjY2Vzcz1cImJiai1tYXNrLXN1Y2Nlc3NcIl0gLSBBIGNzcyBjbGFzcyB0byBhdHRhY2ggdG8gdGhlIGlucHV0IHdoZW4gaXQgaXMgdmFsaWQgYWZ0ZXIgdGhlIHVzZXIgaW50ZXJhY3Rpb25cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5vblVwZGF0ZT1udWxsXSAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIHRoZSBuZXcgbWFza2VkIHZhbHVlIGlzIHNldFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLm9uSW52YWxpZD1udWxsXSAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIHRoZSBpbnB1dCBvciB0aGUgbWFzayBpcyBpbnZhbGlkXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgIC4uLntcclxuICAgICAgICBlbGVtZW50czogJy5iYmotdGV4dC1tYXNrZWQnLFxyXG4gICAgICAgIGRvYzogZG9jdW1lbnQsXHJcbiAgICAgICAgY3NzQ2xhc3NFcnJvcjogJ2Jiai1tYXNrLWVycm9yJyxcclxuICAgICAgICBjc3NDbGFzc1N1Y2Nlc3M6ICdiYmotbWFzay1zdWNjZXNzJyxcclxuICAgICAgICBvblVwZGF0ZTogbnVsbCxcclxuICAgICAgICBvbkludmFsaWQ6IG51bGwsXHJcbiAgICAgIH0sXHJcbiAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICB9XHJcbiAgICB0aGlzLl9vbktleXN0cm9rZSA9IHRoaXMuX29uS2V5c3Ryb2tlLmJpbmQodGhpcylcclxuICAgIHRoaXMuX29uRm9jdXMgPSB0aGlzLl9vbkZvY3VzLmJpbmQodGhpcylcclxuICAgIHRoaXMucmVmcmVzaCgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBjb21wb25lbnQgYW5kIHdyYXAgdGhlIGlucHV0IGVsZW1lbnRzIGZvciBtYXNraW5nIGluIGNhc2VcclxuICAgKiB0aGV5IGFyZSBub3Qgd3JhcHBlZCB5ZXRcclxuICAgKi9cclxuICByZWZyZXNoKCkge1xyXG4gICAgY29uc3QgZWxlbWVudHMgPVxyXG4gICAgICB0eXBlb2YgdGhpcy5vcHRpb25zLmVsZW1lbnRzID09PSAnc3RyaW5nJ1xyXG4gICAgICAgID8gdGhpcy5vcHRpb25zLmRvYy5xdWVyeVNlbGVjdG9yQWxsKHRoaXMub3B0aW9ucy5lbGVtZW50cylcclxuICAgICAgICA6IHRoaXMub3B0aW9ucy5lbGVtZW50c1xyXG4gICAgbGV0IGlucHV0LCBwYXJlbnRDbGFzc1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaW5wdXQgPSBlbGVtZW50c1tpXVxyXG4gICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgICAgICAgcGFyZW50Q2xhc3MgPSBpbnB1dC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxyXG5cclxuICAgICAgICBpZiAoIWlucHV0LmdldEF0dHJpYnV0ZSgnaWQnKSkge1xyXG4gICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICBgQkJqTWFza2luZzogSW5wdXQgaGFzIG5vIElELiBXaXRob3V0IGFuIElEIHRoZSBpbnB1dCBjYW5ub3QgYmUgbWFza2VkYCxcclxuICAgICAgICAgICAgaW5wdXRcclxuICAgICAgICAgIClcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB3ZSBkb24ndCBpbml0aWFsaXplIHRoZSBpbnB1dCdzIHdyYXAgdHdpY2VcclxuICAgICAgICBjb25zdCBpc1dyYXBwZWQgPVxyXG4gICAgICAgICAgcGFyZW50Q2xhc3MgJiYgcGFyZW50Q2xhc3MuaW5kZXhPZigndGV4dElucHV0TWFza19fd3JhcCcpID4gLTFcclxuICAgICAgICB0aGlzLl93cmFwKGlucHV0LCBpc1dyYXBwZWQpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgYEJCak1hc2tpbmc6IEludmFsaWQgaW5wdXQgZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkYCxcclxuICAgICAgICAgIGlucHV0XHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbndyYXAgdGhlIGlucHV0IGVsZW1lbnRzIGFuZCByZW1vdmUgYXR0YWNoZWQgbGlzdGVuZXJzXHJcbiAgICovXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIGNvbnN0IGVsZW1lbnRzID1cclxuICAgICAgdHlwZW9mIHRoaXMub3B0aW9ucy5lbGVtZW50cyA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IHRoaXMub3B0aW9ucy5kb2MucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdGlvbnMuZWxlbWVudHMpXHJcbiAgICAgICAgOiB0aGlzLm9wdGlvbnMuZWxlbWVudHNcclxuXHJcbiAgICBsZXQgaW5wdXQsIHBhcmVudCwgcGFyZW50Q2xhc3NcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlucHV0ID0gZWxlbWVudHNbaV1cclxuICAgICAgcGFyZW50ID0gaW5wdXQucGFyZW50Tm9kZVxyXG4gICAgICBwYXJlbnRDbGFzcyA9IHBhcmVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcclxuXHJcbiAgICAgIGlmIChwYXJlbnRDbGFzcyAmJiBwYXJlbnRDbGFzcy5pbmRleE9mKCd0ZXh0SW5wdXRNYXNrX193cmFwJykgPiAtMSkge1xyXG4gICAgICAgIHRoaXMuX3Vud3JhcChwYXJlbnQpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSB0aGUgdGV4dCBtYXNraW5nIGlucHV0IHdyYXBwZXJcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXQgdGhlIGlucHV0IGVsZW1lbnRcclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzV3JhcHBlZCB3aGVuIHRydWUgdGhlIGlucHV0IGlzIGFscmVhZHkgd3JhcHBlZCBhbmQgd2UgbmVlZCB0byBhZGQgd2hhdCBpc1xyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmcgb25seVxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0hUTUxTcGFuRWxlbWVudH0gdGhlIHdyYXAgZWxlbWVudFxyXG4gICAqXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIF93cmFwKGlucHV0LCBpc1dyYXBwZWQpIHtcclxuICAgIGNvbnN0IGlucHV0SWQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJyksXHJcbiAgICAgIGlucHV0TmFtZSA9IGlucHV0LmdldEF0dHJpYnV0ZSgnbmFtZScpLFxyXG4gICAgICBtYXNrID0gaW5wdXQuZGF0YXNldC5tYXNrIHx8ICcnLFxyXG4gICAgICBvcmlnaW5hbFBhdHRlcm4gPSBpbnB1dC5wYXR0ZXJuLFxyXG4gICAgICBkZWZhdWx0UGF0dGVybiA9IGdlbmVyYXRlUGF0dGVybkZyb21NYXNrKG1hc2spLFxyXG4gICAgICBwYXR0ZXJuID0gb3JpZ2luYWxQYXR0ZXJuIHx8IGRlZmF1bHRQYXR0ZXJuXHJcblxyXG4gICAgbGV0IHdyYXAgPSBudWxsLFxyXG4gICAgICB1bm1hc2tJbnB1dCA9IG51bGxcclxuXHJcbiAgICBpZiAoIWlzV3JhcHBlZCkge1xyXG4gICAgICB3cmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXHJcbiAgICAgIHVubWFza0lucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSAvLyBoaWRkZW4gaW5wdXQgd2l0aCB0aGUgdW5tYXNrZWQgdmFsdWVzIGZvciBmb3Jtc1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd3JhcCA9IGlucHV0LnBhcmVudE5vZGVcclxuICAgICAgdW5tYXNrSW5wdXQgPSB3cmFwLnF1ZXJ5U2VsZWN0b3IoJy50ZXh0SW5wdXRNYXNrX191bm1hc2tlZElucHV0JylcclxuICAgIH1cclxuXHJcbiAgICAvLyBjb25maWd1cmUgdGhlIGFjdHVhbCBpbnB1dFxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGlucHV0LnZhbHVlID0gbWFza0lmTm90TWFza2VkKGlucHV0LnZhbHVlLCBtYXNrKVxyXG4gICAgaW5wdXQucGF0dGVybiA9IHBhdHRlcm5cclxuICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoJ3RleHRJbnB1dE1hc2tfX3RleHRJbnB1dCcpXHJcbiAgICBpbnB1dC5kYXRhc2V0Lm1hc2sgPSBtYXNrXHJcbiAgICBpbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWQgPSB1bm1hc2soaW5wdXQudmFsdWUsIG1hc2spXHJcbiAgICBpZiAob3JpZ2luYWxQYXR0ZXJuICYmIG9yaWdpbmFsUGF0dGVybiAhPT0gZGVmYXVsdFBhdHRlcm4pIHtcclxuICAgICAgaW5wdXQuZGF0YXNldC5pc0N1c3RvbVBhdHRlcm4gPSB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc1dyYXBwZWQpIHtcclxuICAgICAgaWYgKCEoaW5wdXQuaGFzQXR0cmlidXRlKCdyZWFkb25seScpIHx8IGlucHV0Lmhhc0F0dHJpYnV0ZSgnZGlzYWJsZScpKSkge1xyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fb25LZXlzdHJva2UpXHJcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCB0aGlzLl9vbktleXN0cm9rZSlcclxuICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMuX29uS2V5c3Ryb2tlKVxyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCB0aGlzLl9vbkZvY3VzKVxyXG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25Gb2N1cylcclxuICAgICAgfVxyXG4gICAgICBpbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwLCBpbnB1dCkgLy8gbW92ZSB0aGUgaW5wdXQgb3V0c2lkZSB0aGUgd3JhcHBlclxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl92YWxpZGF0ZUlucHV0KGlucHV0KSkge1xyXG4gICAgICB0aGlzLl9fZmlyZU9uVXBkYXRlKGlucHV0LnZhbHVlLCBpbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWQsIGlucHV0KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbmZpZ3VyZSB0aGUgdW5tYXNrZWQgaW5wdXRcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHVubWFza0lucHV0LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpXHJcbiAgICB1bm1hc2tJbnB1dC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnaGlkZGVuJylcclxuICAgIHVubWFza0lucHV0LmNsYXNzTGlzdC5hZGQoJ3RleHRJbnB1dE1hc2tfX3VubWFza2VkSW5wdXQnKVxyXG4gICAgdW5tYXNrSW5wdXQudmFsdWUgPSBpbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWRcclxuICAgIGlmIChpbnB1dElkKSB1bm1hc2tJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7aW5wdXRJZH0tdW5tYXNrZWRgKVxyXG4gICAgaWYgKGlucHV0TmFtZSkgdW5tYXNrSW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgYCR7aW5wdXROYW1lfS11bm1hc2tlZGApXHJcblxyXG4gICAgaWYgKCFpc1dyYXBwZWQpIHtcclxuICAgICAgLy8gY29uZmlndXJlIHRoZSB3cmFwcGVyXHJcbiAgICAgIHdyYXAuc2V0QXR0cmlidXRlKCdjbGFzcycsICd0ZXh0SW5wdXRNYXNrX193cmFwJylcclxuICAgICAgd3JhcC5hcHBlbmRDaGlsZCh1bm1hc2tJbnB1dClcclxuICAgICAgd3JhcC5hcHBlbmRDaGlsZChpbnB1dClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gd3JhcFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW53cmFwIHRoZSBtYXNrZWQgaW5wdXQgYW5kIHJlbW92ZSB0aGUgdmFsdWUgY2hhbmdlZCBsaXN0ZW5lclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MU3BhbkVsZW1lbnR9IHRleHRJbnB1dCB0aGUgd3JhcHBlciBzcGFuIGluc3RhbmNlXHJcbiAgICpcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgX3Vud3JhcCh0ZXh0SW5wdXQpIHtcclxuICAgIHRleHRJbnB1dC5yZW1vdmVDaGlsZChcclxuICAgICAgdGV4dElucHV0LnF1ZXJ5U2VsZWN0b3IoJy50ZXh0SW5wdXRNYXNrX191bm1hc2tlZElucHV0JylcclxuICAgIClcclxuXHJcbiAgICBjb25zdCBpbnB1dCA9IHRleHRJbnB1dC5xdWVyeVNlbGVjdG9yKCcudGV4dElucHV0TWFza19fdGV4dElucHV0JylcclxuICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fb25LZXlzdHJva2UpXHJcbiAgICBpbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIHRoaXMuX29uS2V5c3Ryb2tlKVxyXG4gICAgaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGFzdGUnLCB0aGlzLl9vbktleXN0cm9rZSlcclxuICAgIGlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCB0aGlzLl9vbkZvY3VzKVxyXG4gICAgaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkZvY3VzKVxyXG4gICAgZGVsZXRlIGlucHV0LmRhdGFzZXQudmFsdWVVbm1hc2tlZFxyXG4gICAgaWYgKCFpbnB1dC5kYXRhc2V0LmlzQ3VzdG9tUGF0dGVybikge1xyXG4gICAgICBpbnB1dC5yZW1vdmVBdHRyaWJ1dGUoJ3BhdHRlcm4nKVxyXG4gICAgICBkZWxldGUgaW5wdXQuZGF0YXNldC5pc0N1c3RvbVBhdHRlcm5cclxuICAgIH1cclxuXHJcbiAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMub3B0aW9ucy5jc3NDbGFzc0Vycm9yKVxyXG5cclxuICAgIHRleHRJbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpbnB1dCwgdGV4dElucHV0KVxyXG4gICAgdGV4dElucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGV4dElucHV0KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdGVuIHRvIGV2ZXJ5IGtleXN0cm9rZSBvbiB0aGUgaW5wdXQgYW5kIHVwZGF0ZSB0aGUgbWFza2VkIGFuZCB0aGUgdW5tYXNrZWQgdmFsdWVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcclxuICAgKlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKi9cclxuICBfb25LZXlzdHJva2UoZSkge1xyXG4gICAgaWYgKGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUubWV0YUtleSkgcmV0dXJuXHJcbiAgICBpZihlLmtleUNvZGUgIT09IDEzKSBlLnByZXZlbnREZWZhdWx0KClcclxuICAgIFxyXG4gICAgY29uc3QgaW5wdXQgPSBlLnRhcmdldCxcclxuICAgICAgbWFzayA9IGlucHV0LmRhdGFzZXQubWFzayB8fCB0aGlzLm9wdGlvbnMubWFzayxcclxuICAgICAgZXZlbnRUeXBlID0gZS50eXBlXHJcblxyXG4gICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2VzcylcclxuICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcclxuXHJcbiAgICBsZXQgdmFsdWUgPSBpbnB1dC52YWx1ZSxcclxuICAgICAga2V5Q29kZSA9IGUua2V5Q29kZSxcclxuICAgICAga2V5Q29udGVudCA9IGUua2V5IHx8IGUuY29kZS5yZXBsYWNlKC9bXjAtOV0vZywgJycpLFxyXG4gICAgICBrZXkgPSBrZXlDb250ZW50ID8gKGtleUNvbnRlbnQubGVuZ3RoID4gMSA/ICcnIDoga2V5Q29udGVudCkgOiAnJyxcclxuICAgICAgaW5zZXJ0UG9zaXRpb24gPSBmaW5kQ2FyZXRQb3NpdGlvbih2YWx1ZSwgbWFzayksXHJcbiAgICAgIG5ld1ZhbHVlLFxyXG4gICAgICB1bm1hc2tlZFZhbHVlLFxyXG4gICAgICBtYXNrRXJyb3IgPSBmYWxzZVxyXG5cclxuICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XHJcbiAgICAgIGNhc2UgJ3Bhc3RlJzpcclxuICAgICAgICBuZXdWYWx1ZSA9IG1hc2tJZk5vdE1hc2tlZChcclxuICAgICAgICAgIChlLmNsaXBib2FyZERhdGEgfHwgd2luZG93LmNsaXBib2FyZERhdGEpLmdldERhdGEoJ1RleHQnKSxcclxuICAgICAgICAgIG1hc2tcclxuICAgICAgICApXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAna2V5dXAnOlxyXG4gICAgICAgIG5ld1ZhbHVlID0gdmFsdWVcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdrZXlwcmVzcyc6XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uU3RhcnQgPSBpbnB1dC5zZWxlY3Rpb25TdGFydFxyXG4gICAgICAgIGlmIChzZWxlY3Rpb25TdGFydCAhPT0gaW5zZXJ0UG9zaXRpb24pIGluc2VydFBvc2l0aW9uID0gc2VsZWN0aW9uU3RhcnRcclxuXHJcbiAgICAgICAgbmV3VmFsdWUgPVxyXG4gICAgICAgICAgdmFsdWUuc3Vic3RyKDAsIGluc2VydFBvc2l0aW9uKSArIGtleSArIHZhbHVlLnN1YnN0cihpbnNlcnRQb3NpdGlvbilcclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrXHJcbiAgICB9XHJcblxyXG4gICAgdW5tYXNrZWRWYWx1ZSA9IHVubWFzayhuZXdWYWx1ZSwgbWFzaylcclxuXHJcbiAgICBpZiAoWzM1LCAzNiwgMzcsIDM4LCAzOSwgNDBdLmluZGV4T2Yoa2V5Q29kZSkgPT09IC0xKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaW5wdXQudmFsdWUgPSBTdHJpbmdNYXNrLm1hc2sodW5tYXNrZWRWYWx1ZSwgbWFzaywgZmFsc2UpXHJcbiAgICAgICAgaWYodGhpcy5fdmFsaWRhdGVJbnB1dChpbnB1dCkpIHtcclxuICAgICAgICAgIGlucHV0LmRhdGFzZXQudmFsdWVVbm1hc2tlZCA9IHVubWFza2VkVmFsdWVcclxuICAgICAgICAgIHRoaXMub3B0aW9ucy5kb2MucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgYCMke2lucHV0LmdldEF0dHJpYnV0ZSgnaWQnKX0tdW5tYXNrZWRgXHJcbiAgICAgICAgICApLnZhbHVlID0gdW5tYXNrZWRWYWx1ZVxyXG4gICAgICAgICAgdGhpcy5fX2FwcGx5Q3NzQ2xhc3NTdGF0ZShpbnB1dCwgJ3N1Y2Nlc3MnKVxyXG4gICAgICAgICAgdGhpcy5fX2ZpcmVPblVwZGF0ZShpbnB1dC52YWx1ZSwgaW5wdXQuZGF0YXNldC52YWx1ZVVubWFza2VkLCBpbnB1dClcclxuICAgICAgICB9XHJcbiAgICAgICAgbWFza0Vycm9yID0gZmFsc2VcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLl9fYXBwbHlDc3NDbGFzc1N0YXRlKGlucHV0LCAnZXJyb3InKVxyXG4gICAgICAgIHRoaXMuX19maXJlT25JbnZhbGlkKGVycm9yLCBpbnB1dClcclxuICAgICAgICBtYXNrRXJyb3IgPSB0cnVlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3VwZGF0ZUNhcmV0UG9zaXRpb24oaW5wdXQsIG1hc2spXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFtYXNrRXJyb3IpIHRoaXMuX3ZhbGlkYXRlSW5wdXQoaW5wdXQpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaXN0ZW4gdG8gZm9jdXMgZXZlbnRzIG9uIHRoZSBpbnB1dCBhbmQgdXBkYXRlIHRoZSBjYXJldCBwb3NpdGlvblxyXG4gICAqIHdoZXJlIHRoZSBuZXh0IGNoYXIgc2hvdWxkIGJlIGluc2VydGVkIGFjY29yZGluZyB0byB0aGUgbWFza1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHtGb2N1c0V2ZW50fSBlXHJcbiAgICpcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgX29uRm9jdXMoZSkge1xyXG4gICAgY29uc3QgaW5wdXQgPSBlLnRhcmdldFxyXG4gICAgY29uc3QgbWFzayA9IGlucHV0LmRhdGFzZXQubWFzayB8fCB0aGlzLm9wdGlvbnMubWFza1xyXG4gICAgdGhpcy5fdXBkYXRlQ2FyZXRQb3NpdGlvbihpbnB1dCwgbWFzaylcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUgY2FyZXQgcG9zaXRpb24gb24gdGhlIGlucHV0IGJhc2VkIG9uIHRoZSBnaXZlbiBtYXNrXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0IGluc3RhbmNlXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1hc2sgIGJiaiBzdHJpbmdcclxuICAgKlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKi9cclxuICBfdXBkYXRlQ2FyZXRQb3NpdGlvbihpbnB1dCwgbWFzaykge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZmluZENhcmV0UG9zaXRpb24oaW5wdXQudmFsdWUsIG1hc2spXHJcbiAgICAgIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKHBvc2l0aW9uLCBwb3NpdGlvbilcclxuICAgIH0sIDApXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmlnZ2VyIGBjaGVja1ZhbGlkaXR5YCBvbiB0aGUgaW5wdXRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXRcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIHdoZW4gdmFsaWQgLCBmYWxzZSBvdGhlcndpc2VcclxuICAgKlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKi9cclxuICBfdmFsaWRhdGVJbnB1dChpbnB1dCkge1xyXG4gICAgY29uc3QgaXNWYWxpZCA9IGlucHV0LmNoZWNrVmFsaWRpdHkoKVxyXG5cclxuICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX19hcHBseUNzc0NsYXNzU3RhdGUoaW5wdXQsICdzdWNjZXNzJylcclxuICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoJycpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9fYXBwbHlDc3NDbGFzc1N0YXRlKGlucHV0LCAnZXJyb3InKVxyXG4gICAgICB0aGlzLl9fZmlyZU9uSW52YWxpZChpbnB1dC52YWxpZGF0aW9uTWVzc2FnZSwgaW5wdXQpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzVmFsaWRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgX19maXJlT25VcGRhdGUodmFsdWVNYXNrZWQsIHZhbHVlVW5tYXNrZWQsIGlucHV0KSB7XHJcbiAgICBpZiAodGhpcy5vcHRpb25zLm9uVXBkYXRlKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucy5vblVwZGF0ZSh2YWx1ZU1hc2tlZCwgdmFsdWVVbm1hc2tlZCwgaW5wdXQpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIF9fZmlyZU9uSW52YWxpZChlcnJvciwgaW5wdXQpIHtcclxuICAgIGlmICh0aGlzLm9wdGlvbnMub25JbnZhbGlkKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucy5vbkludmFsaWQoZXJyb3IsIGlucHV0KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBfX2FwcGx5Q3NzQ2xhc3NTdGF0ZShpbnB1dCwgc3RhdGUpIHtcclxuICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JykgfHwgaW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XHJcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzRXJyb3IpXHJcbiAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2VzcylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChzdGF0ZSA9PT0gJ3N1Y2Nlc3MnKSB7XHJcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMub3B0aW9ucy5jc3NDbGFzc1N1Y2Nlc3MpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGF0ZSA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5vcHRpb25zLmNzc0NsYXNzRXJyb3IpXHJcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NTdWNjZXNzKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZXh0SW5wdXRcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1RleHRJbnB1dC9UZXh0SW5wdXQuanMiLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1pbnB1dC1tYXNraW5nIGxpYi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nTWFzayBmcm9tICdiYmotbWFza3Mvc3JjL1N0cmluZ01hc2snXHJcblxyXG5jb25zdCBTVVBQT1JURURfTUFTS1MgPSBbJ1gnLCAnYScsICdBJywgJzAnLCAneicsICdaJywgJ1UnXVxyXG4vKipcclxuICogV2hlbiB0cnVlICwgdGhlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyBVbmljb2RlIFByb3BlcnR5IEVzY2FwZXNcclxuICogb3RoZXJ3aXNlIGl0IGlzIGZhbHNlIFxyXG4gKiBcclxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlZ2V4cC11bmljb2RlLXByb3BlcnR5LWVzY2FwZXN9XHJcbiAqL1xyXG5sZXQgSVNfVU5JQ09ERV9QUk9QRVJUWV9TVVBQT1JURUQgPSBmYWxzZVxyXG50cnkge1xyXG4gIGV2YWwoJy9cXFxccHtMfS91JylcclxuICBJU19VTklDT0RFX1BST1BFUlRZX1NVUFBPUlRFRCA9IHRydWVcclxufSBjYXRjaCAoZXJyKSB7XHJcbiAgSVNfVU5JQ09ERV9QUk9QRVJUWV9TVVBQT1JURUQgPSBmYWxzZVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIG1hc2tlZCB3aXRoIHRoZSBnaXZlbiBtYXNrIG9yIG5vdFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUgbWFza2VkIG9yIHVubWFza2VkIHZhbHVlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXNrICBhIGJiaiBtYXNrXHJcbiAqXHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgd2hlbiB0aGUgdmFsdWUgaXMgbWFza2VkIHdpdGggZ2l2ZW4gbWFzayAsIGZhbHNlIG90aGVyd2lzZVxyXG4gKi9cclxuY29uc3QgaXNNYXNrZWRWYWx1ZSA9ICh2YWx1ZSwgbWFzaykgPT4ge1xyXG4gIGlmICh0eXBlb2YgaXNNYXNrZWRWYWx1ZS5fX0NBQ0hFX18gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBpc01hc2tlZFZhbHVlLl9fQ0FDSEVfXyA9IHt9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjYWNoZUtleSA9IGAke3ZhbHVlfS0ke21hc2t9YFxyXG5cclxuICBpZiAoIWlzTWFza2VkVmFsdWUuX19DQUNIRV9fW2NhY2hlS2V5XSkge1xyXG4gICAgY29uc3QgdW5tYXNrZWRWYWx1ZSA9IHVubWFzayh2YWx1ZSwgbWFzaylcclxuICAgIGlzTWFza2VkVmFsdWUuX19DQUNIRV9fW2NhY2hlS2V5XSA9XHJcbiAgICAgIHZhbHVlID09PSBTdHJpbmdNYXNrLm1hc2sodW5tYXNrZWRWYWx1ZSwgbWFzaylcclxuICB9XHJcblxyXG4gIHJldHVybiBpc01hc2tlZFZhbHVlLl9fQ0FDSEVfX1tjYWNoZUtleV1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1hc2sgdGhlIGdpdmVuIHZhbHVlIHdpdGggdGhlIGdpdmVuIG1hc2sgaW4gY2FzZSB0aGUgdmFsdWUgaXMgbm90IGFscmVhZHkgbWFza2VkIHdpdGggdGhlXHJcbiAqIGdpdmVuIG1hc2tcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIG1hc2tlZCBvciB1bm1hc2tlZCB2YWx1ZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gbWFzayAgYSBiYmogbWFza1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGEgbWFza2VkIHZhbHVlXHJcbiAqL1xyXG5jb25zdCBtYXNrSWZOb3RNYXNrZWQgPSAodmFsdWUsIG1hc2spID0+IHtcclxuICBpZiAodHlwZW9mIG1hc2tJZk5vdE1hc2tlZC5fX0NBQ0hFX18gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBtYXNrSWZOb3RNYXNrZWQuX19DQUNIRV9fID0ge31cclxuICB9XHJcblxyXG4gIGNvbnN0IGNhY2hlS2V5ID0gYCR7dmFsdWV9LSR7bWFza31gXHJcblxyXG4gIGlmICghbWFza0lmTm90TWFza2VkLl9fQ0FDSEVfX1tjYWNoZUtleV0pIHtcclxuICAgIGlmIChpc01hc2tlZFZhbHVlKHZhbHVlLCBtYXNrKSkge1xyXG4gICAgICBtYXNrSWZOb3RNYXNrZWQuX19DQUNIRV9fW2NhY2hlS2V5XSA9IHZhbHVlXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIG1hc2tJZk5vdE1hc2tlZC5fX0NBQ0hFX19bY2FjaGVLZXldID0gU3RyaW5nTWFzay5tYXNrKFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBtYXNrLFxyXG4gICAgICAgICAgZmFsc2VcclxuICAgICAgICApXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBtYXNrSWZOb3RNYXNrZWQuX19DQUNIRV9fW2NhY2hlS2V5XSA9IFN0cmluZ01hc2subWFzaygnJywgbWFzaylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG1hc2tJZk5vdE1hc2tlZC5fX0NBQ0hFX19bY2FjaGVLZXldXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIHJlZ2V4IHBhdHRlciBiYXNlZCBvbiB0aGUgZ2l2ZSB0YXNrXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXNrICBiYmogc3RyaW5nIG1hc2tcclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSByZWdleCBmb3IgdGhlIGdpdmUgbWFza1xyXG4gKi9cclxuY29uc3QgZ2VuZXJhdGVQYXR0ZXJuRnJvbU1hc2sgPSBtYXNrID0+IHtcclxuICBpZiAodHlwZW9mIGdlbmVyYXRlUGF0dGVybkZyb21NYXNrLl9fQ0FDSEVfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGdlbmVyYXRlUGF0dGVybkZyb21NYXNrLl9fQ0FDSEVfXyA9IHt9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjYWNoZUtleSA9IG1hc2tcclxuXHJcbiAgaWYgKCFnZW5lcmF0ZVBhdHRlcm5Gcm9tTWFzay5fX0NBQ0hFX19bY2FjaGVLZXldKSB7XHJcbiAgICBjb25zdCBtYXNrQXNBcnJ5ID0gbWFzay5zcGxpdCgnJylcclxuICAgIGxldCByZWdleCA9ICcnXHJcbiAgICBtYXNrQXNBcnJ5LmZvckVhY2goYyA9PiB7XHJcbiAgICAgIHN3aXRjaCAoYykge1xyXG4gICAgICAgIGNhc2UgJ1gnOlxyXG4gICAgICAgICAgcmVnZXggKz0gJyhbYS16QS1aMC05IUAjJCVeJiooKV8rXFxcXC09XFxcXFtcXFxcXXt9O1xcJ1wiOlxcXFxcXFxcfCwuPD5cXFxcLz9dKSdcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgY2FzZSAnQSc6XHJcbiAgICAgICAgICAvLyBodHRwczovL21vdGhlcmVmZi5pbi9yZWdleHB1I2lucHV0PXZhcityZWdleCslM0QrLyU1Q3AlN0JMJTdEL3UlM0ImdW5pY29kZVByb3BlcnR5RXNjYXBlPTFcclxuICAgICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE1MDAzMy9yZWd1bGFyLWV4cHJlc3Npb24tdG8tbWF0Y2gtbm9uLWFzY2lpLWNoYXJhY3RlcnMjYW5zd2VyLTQ4OTAyNzY1XHJcbiAgICAgICAgICByZWdleCArPSBJU19VTklDT0RFX1BST1BFUlRZX1NVUFBPUlRFRFxyXG4gICAgICAgICAgICA/ICdcXFxccHtMfSdcclxuICAgICAgICAgICAgOiAnKCg/OltBLVphLXpcXHhBQVxceEI1XFx4QkFcXHhDMC1cXHhENlxceEQ4LVxceEY2XFx4RjgtXFx1MDJDMVxcdTAyQzYtXFx1MDJEMVxcdTAyRTAtXFx1MDJFNFxcdTAyRUNcXHUwMkVFXFx1MDM3MC1cXHUwMzc0XFx1MDM3NlxcdTAzNzdcXHUwMzdBLVxcdTAzN0RcXHUwMzdGXFx1MDM4NlxcdTAzODgtXFx1MDM4QVxcdTAzOENcXHUwMzhFLVxcdTAzQTFcXHUwM0EzLVxcdTAzRjVcXHUwM0Y3LVxcdTA0ODFcXHUwNDhBLVxcdTA1MkZcXHUwNTMxLVxcdTA1NTZcXHUwNTU5XFx1MDU2MC1cXHUwNTg4XFx1MDVEMC1cXHUwNUVBXFx1MDVFRi1cXHUwNUYyXFx1MDYyMC1cXHUwNjRBXFx1MDY2RVxcdTA2NkZcXHUwNjcxLVxcdTA2RDNcXHUwNkQ1XFx1MDZFNVxcdTA2RTZcXHUwNkVFXFx1MDZFRlxcdTA2RkEtXFx1MDZGQ1xcdTA2RkZcXHUwNzEwXFx1MDcxMi1cXHUwNzJGXFx1MDc0RC1cXHUwN0E1XFx1MDdCMVxcdTA3Q0EtXFx1MDdFQVxcdTA3RjRcXHUwN0Y1XFx1MDdGQVxcdTA4MDAtXFx1MDgxNVxcdTA4MUFcXHUwODI0XFx1MDgyOFxcdTA4NDAtXFx1MDg1OFxcdTA4NjAtXFx1MDg2QVxcdTA4QTAtXFx1MDhCNFxcdTA4QjYtXFx1MDhCRFxcdTA5MDQtXFx1MDkzOVxcdTA5M0RcXHUwOTUwXFx1MDk1OC1cXHUwOTYxXFx1MDk3MS1cXHUwOTgwXFx1MDk4NS1cXHUwOThDXFx1MDk4RlxcdTA5OTBcXHUwOTkzLVxcdTA5QThcXHUwOUFBLVxcdTA5QjBcXHUwOUIyXFx1MDlCNi1cXHUwOUI5XFx1MDlCRFxcdTA5Q0VcXHUwOURDXFx1MDlERFxcdTA5REYtXFx1MDlFMVxcdTA5RjBcXHUwOUYxXFx1MDlGQ1xcdTBBMDUtXFx1MEEwQVxcdTBBMEZcXHUwQTEwXFx1MEExMy1cXHUwQTI4XFx1MEEyQS1cXHUwQTMwXFx1MEEzMlxcdTBBMzNcXHUwQTM1XFx1MEEzNlxcdTBBMzhcXHUwQTM5XFx1MEE1OS1cXHUwQTVDXFx1MEE1RVxcdTBBNzItXFx1MEE3NFxcdTBBODUtXFx1MEE4RFxcdTBBOEYtXFx1MEE5MVxcdTBBOTMtXFx1MEFBOFxcdTBBQUEtXFx1MEFCMFxcdTBBQjJcXHUwQUIzXFx1MEFCNS1cXHUwQUI5XFx1MEFCRFxcdTBBRDBcXHUwQUUwXFx1MEFFMVxcdTBBRjlcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzOVxcdTBDM0RcXHUwQzU4LVxcdTBDNUFcXHUwQzYwXFx1MEM2MVxcdTBDODBcXHUwQzg1LVxcdTBDOENcXHUwQzhFLVxcdTBDOTBcXHUwQzkyLVxcdTBDQThcXHUwQ0FBLVxcdTBDQjNcXHUwQ0I1LVxcdTBDQjlcXHUwQ0JEXFx1MENERVxcdTBDRTBcXHUwQ0UxXFx1MENGMVxcdTBDRjJcXHUwRDA1LVxcdTBEMENcXHUwRDBFLVxcdTBEMTBcXHUwRDEyLVxcdTBEM0FcXHUwRDNEXFx1MEQ0RVxcdTBENTQtXFx1MEQ1NlxcdTBENUYtXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODYtXFx1MEU4QVxcdTBFOEMtXFx1MEVBM1xcdTBFQTVcXHUwRUE3LVxcdTBFQjBcXHUwRUIyXFx1MEVCM1xcdTBFQkRcXHUwRUMwLVxcdTBFQzRcXHUwRUM2XFx1MEVEQy1cXHUwRURGXFx1MEYwMFxcdTBGNDAtXFx1MEY0N1xcdTBGNDktXFx1MEY2Q1xcdTBGODgtXFx1MEY4Q1xcdTEwMDAtXFx1MTAyQVxcdTEwM0ZcXHUxMDUwLVxcdTEwNTVcXHUxMDVBLVxcdTEwNURcXHUxMDYxXFx1MTA2NVxcdTEwNjZcXHUxMDZFLVxcdTEwNzBcXHUxMDc1LVxcdTEwODFcXHUxMDhFXFx1MTBBMC1cXHUxMEM1XFx1MTBDN1xcdTEwQ0RcXHUxMEQwLVxcdTEwRkFcXHUxMEZDLVxcdTEyNDhcXHUxMjRBLVxcdTEyNERcXHUxMjUwLVxcdTEyNTZcXHUxMjU4XFx1MTI1QS1cXHUxMjVEXFx1MTI2MC1cXHUxMjg4XFx1MTI4QS1cXHUxMjhEXFx1MTI5MC1cXHUxMkIwXFx1MTJCMi1cXHUxMkI1XFx1MTJCOC1cXHUxMkJFXFx1MTJDMFxcdTEyQzItXFx1MTJDNVxcdTEyQzgtXFx1MTJENlxcdTEyRDgtXFx1MTMxMFxcdTEzMTItXFx1MTMxNVxcdTEzMTgtXFx1MTM1QVxcdTEzODAtXFx1MTM4RlxcdTEzQTAtXFx1MTNGNVxcdTEzRjgtXFx1MTNGRFxcdTE0MDEtXFx1MTY2Q1xcdTE2NkYtXFx1MTY3RlxcdTE2ODEtXFx1MTY5QVxcdTE2QTAtXFx1MTZFQVxcdTE2RjEtXFx1MTZGOFxcdTE3MDAtXFx1MTcwQ1xcdTE3MEUtXFx1MTcxMVxcdTE3MjAtXFx1MTczMVxcdTE3NDAtXFx1MTc1MVxcdTE3NjAtXFx1MTc2Q1xcdTE3NkUtXFx1MTc3MFxcdTE3ODAtXFx1MTdCM1xcdTE3RDdcXHUxN0RDXFx1MTgyMC1cXHUxODc4XFx1MTg4MC1cXHUxODg0XFx1MTg4Ny1cXHUxOEE4XFx1MThBQVxcdTE4QjAtXFx1MThGNVxcdTE5MDAtXFx1MTkxRVxcdTE5NTAtXFx1MTk2RFxcdTE5NzAtXFx1MTk3NFxcdTE5ODAtXFx1MTlBQlxcdTE5QjAtXFx1MTlDOVxcdTFBMDAtXFx1MUExNlxcdTFBMjAtXFx1MUE1NFxcdTFBQTdcXHUxQjA1LVxcdTFCMzNcXHUxQjQ1LVxcdTFCNEJcXHUxQjgzLVxcdTFCQTBcXHUxQkFFXFx1MUJBRlxcdTFCQkEtXFx1MUJFNVxcdTFDMDAtXFx1MUMyM1xcdTFDNEQtXFx1MUM0RlxcdTFDNUEtXFx1MUM3RFxcdTFDODAtXFx1MUM4OFxcdTFDOTAtXFx1MUNCQVxcdTFDQkQtXFx1MUNCRlxcdTFDRTktXFx1MUNFQ1xcdTFDRUUtXFx1MUNGM1xcdTFDRjVcXHUxQ0Y2XFx1MUNGQVxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkZcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGRUZcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5RFxcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTdCRlxcdUE3QzItXFx1QTdDNlxcdUE3RjctXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOEZEXFx1QThGRVxcdUE5MEEtXFx1QTkyNVxcdUE5MzAtXFx1QTk0NlxcdUE5NjAtXFx1QTk3Q1xcdUE5ODQtXFx1QTlCMlxcdUE5Q0ZcXHVBOUUwLVxcdUE5RTRcXHVBOUU2LVxcdUE5RUZcXHVBOUZBLVxcdUE5RkVcXHVBQTAwLVxcdUFBMjhcXHVBQTQwLVxcdUFBNDJcXHVBQTQ0LVxcdUFBNEJcXHVBQTYwLVxcdUFBNzZcXHVBQTdBXFx1QUE3RS1cXHVBQUFGXFx1QUFCMVxcdUFBQjVcXHVBQUI2XFx1QUFCOS1cXHVBQUJEXFx1QUFDMFxcdUFBQzJcXHVBQURCLVxcdUFBRERcXHVBQUUwLVxcdUFBRUFcXHVBQUYyLVxcdUFBRjRcXHVBQjAxLVxcdUFCMDZcXHVBQjA5LVxcdUFCMEVcXHVBQjExLVxcdUFCMTZcXHVBQjIwLVxcdUFCMjZcXHVBQjI4LVxcdUFCMkVcXHVBQjMwLVxcdUFCNUFcXHVBQjVDLVxcdUFCNjdcXHVBQjcwLVxcdUFCRTJcXHVBQzAwLVxcdUQ3QTNcXHVEN0IwLVxcdUQ3QzZcXHVEN0NCLVxcdUQ3RkJcXHVGOTAwLVxcdUZBNkRcXHVGQTcwLVxcdUZBRDlcXHVGQjAwLVxcdUZCMDZcXHVGQjEzLVxcdUZCMTdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQjFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkJcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNcXHVGRjIxLVxcdUZGM0FcXHVGRjQxLVxcdUZGNUFcXHVGRjY2LVxcdUZGQkVcXHVGRkMyLVxcdUZGQzdcXHVGRkNBLVxcdUZGQ0ZcXHVGRkQyLVxcdUZGRDdcXHVGRkRBLVxcdUZGRENdfFxcdUQ4MDBbXFx1REMwMC1cXHVEQzBCXFx1REMwRC1cXHVEQzI2XFx1REMyOC1cXHVEQzNBXFx1REMzQ1xcdURDM0RcXHVEQzNGLVxcdURDNERcXHVEQzUwLVxcdURDNURcXHVEQzgwLVxcdURDRkFcXHVERTgwLVxcdURFOUNcXHVERUEwLVxcdURFRDBcXHVERjAwLVxcdURGMUZcXHVERjJELVxcdURGNDBcXHVERjQyLVxcdURGNDlcXHVERjUwLVxcdURGNzVcXHVERjgwLVxcdURGOURcXHVERkEwLVxcdURGQzNcXHVERkM4LVxcdURGQ0ZdfFxcdUQ4MDFbXFx1REMwMC1cXHVEQzlEXFx1RENCMC1cXHVEQ0QzXFx1RENEOC1cXHVEQ0ZCXFx1REQwMC1cXHVERDI3XFx1REQzMC1cXHVERDYzXFx1REUwMC1cXHVERjM2XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjY3XXxcXHVEODAyW1xcdURDMDAtXFx1REMwNVxcdURDMDhcXHVEQzBBLVxcdURDMzVcXHVEQzM3XFx1REMzOFxcdURDM0NcXHVEQzNGLVxcdURDNTVcXHVEQzYwLVxcdURDNzZcXHVEQzgwLVxcdURDOUVcXHVEQ0UwLVxcdURDRjJcXHVEQ0Y0XFx1RENGNVxcdUREMDAtXFx1REQxNVxcdUREMjAtXFx1REQzOVxcdUREODAtXFx1RERCN1xcdUREQkVcXHVEREJGXFx1REUwMFxcdURFMTAtXFx1REUxM1xcdURFMTUtXFx1REUxN1xcdURFMTktXFx1REUzNVxcdURFNjAtXFx1REU3Q1xcdURFODAtXFx1REU5Q1xcdURFQzAtXFx1REVDN1xcdURFQzktXFx1REVFNFxcdURGMDAtXFx1REYzNVxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY3MlxcdURGODAtXFx1REY5MV18XFx1RDgwM1tcXHVEQzAwLVxcdURDNDhcXHVEQzgwLVxcdURDQjJcXHVEQ0MwLVxcdURDRjJcXHVERDAwLVxcdUREMjNcXHVERjAwLVxcdURGMUNcXHVERjI3XFx1REYzMC1cXHVERjQ1XFx1REZFMC1cXHVERkY2XXxcXHVEODA0W1xcdURDMDMtXFx1REMzN1xcdURDODMtXFx1RENBRlxcdURDRDAtXFx1RENFOFxcdUREMDMtXFx1REQyNlxcdURENDRcXHVERDUwLVxcdURENzJcXHVERDc2XFx1REQ4My1cXHVEREIyXFx1RERDMS1cXHVEREM0XFx1REREQVxcdURERENcXHVERTAwLVxcdURFMTFcXHVERTEzLVxcdURFMkJcXHVERTgwLVxcdURFODZcXHVERTg4XFx1REU4QS1cXHVERThEXFx1REU4Ri1cXHVERTlEXFx1REU5Ri1cXHVERUE4XFx1REVCMC1cXHVERURFXFx1REYwNS1cXHVERjBDXFx1REYwRlxcdURGMTBcXHVERjEzLVxcdURGMjhcXHVERjJBLVxcdURGMzBcXHVERjMyXFx1REYzM1xcdURGMzUtXFx1REYzOVxcdURGM0RcXHVERjUwXFx1REY1RC1cXHVERjYxXXxcXHVEODA1W1xcdURDMDAtXFx1REMzNFxcdURDNDctXFx1REM0QVxcdURDNUZcXHVEQzgwLVxcdURDQUZcXHVEQ0M0XFx1RENDNVxcdURDQzdcXHVERDgwLVxcdUREQUVcXHVEREQ4LVxcdUREREJcXHVERTAwLVxcdURFMkZcXHVERTQ0XFx1REU4MC1cXHVERUFBXFx1REVCOFxcdURGMDAtXFx1REYxQV18XFx1RDgwNltcXHVEQzAwLVxcdURDMkJcXHVEQ0EwLVxcdURDREZcXHVEQ0ZGXFx1RERBMC1cXHVEREE3XFx1RERBQS1cXHVEREQwXFx1RERFMVxcdURERTNcXHVERTAwXFx1REUwQi1cXHVERTMyXFx1REUzQVxcdURFNTBcXHVERTVDLVxcdURFODlcXHVERTlEXFx1REVDMC1cXHVERUY4XXxcXHVEODA3W1xcdURDMDAtXFx1REMwOFxcdURDMEEtXFx1REMyRVxcdURDNDBcXHVEQzcyLVxcdURDOEZcXHVERDAwLVxcdUREMDZcXHVERDA4XFx1REQwOVxcdUREMEItXFx1REQzMFxcdURENDZcXHVERDYwLVxcdURENjVcXHVERDY3XFx1REQ2OFxcdURENkEtXFx1REQ4OVxcdUREOThcXHVERUUwLVxcdURFRjJdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODQwLVxcdUQ4NjhcXHVEODZBLVxcdUQ4NkNcXHVEODZGLVxcdUQ4NzJcXHVEODc0LVxcdUQ4NzldW1xcdURDMDAtXFx1REZGRl18XFx1RDgwRFtcXHVEQzAwLVxcdURDMkVdfFxcdUQ4MTFbXFx1REMwMC1cXHVERTQ2XXxcXHVEODFBW1xcdURDMDAtXFx1REUzOFxcdURFNDAtXFx1REU1RVxcdURFRDAtXFx1REVFRFxcdURGMDAtXFx1REYyRlxcdURGNDAtXFx1REY0M1xcdURGNjMtXFx1REY3N1xcdURGN0QtXFx1REY4Rl18XFx1RDgxQltcXHVERTQwLVxcdURFN0ZcXHVERjAwLVxcdURGNEFcXHVERjUwXFx1REY5My1cXHVERjlGXFx1REZFMFxcdURGRTFcXHVERkUzXXxcXHVEODIxW1xcdURDMDAtXFx1REZGN118XFx1RDgyMltcXHVEQzAwLVxcdURFRjJdfFxcdUQ4MkNbXFx1REMwMC1cXHVERDFFXFx1REQ1MC1cXHVERDUyXFx1REQ2NC1cXHVERDY3XFx1REQ3MC1cXHVERUZCXXxcXHVEODJGW1xcdURDMDAtXFx1REM2QVxcdURDNzAtXFx1REM3Q1xcdURDODAtXFx1REM4OFxcdURDOTAtXFx1REM5OV18XFx1RDgzNVtcXHVEQzAwLVxcdURDNTRcXHVEQzU2LVxcdURDOUNcXHVEQzlFXFx1REM5RlxcdURDQTJcXHVEQ0E1XFx1RENBNlxcdURDQTktXFx1RENBQ1xcdURDQUUtXFx1RENCOVxcdURDQkJcXHVEQ0JELVxcdURDQzNcXHVEQ0M1LVxcdUREMDVcXHVERDA3LVxcdUREMEFcXHVERDBELVxcdUREMTRcXHVERDE2LVxcdUREMUNcXHVERDFFLVxcdUREMzlcXHVERDNCLVxcdUREM0VcXHVERDQwLVxcdURENDRcXHVERDQ2XFx1REQ0QS1cXHVERDUwXFx1REQ1Mi1cXHVERUE1XFx1REVBOC1cXHVERUMwXFx1REVDMi1cXHVERURBXFx1REVEQy1cXHVERUZBXFx1REVGQy1cXHVERjE0XFx1REYxNi1cXHVERjM0XFx1REYzNi1cXHVERjRFXFx1REY1MC1cXHVERjZFXFx1REY3MC1cXHVERjg4XFx1REY4QS1cXHVERkE4XFx1REZBQS1cXHVERkMyXFx1REZDNC1cXHVERkNCXXxcXHVEODM4W1xcdUREMDAtXFx1REQyQ1xcdUREMzctXFx1REQzRFxcdURENEVcXHVERUMwLVxcdURFRUJdfFxcdUQ4M0FbXFx1REMwMC1cXHVEQ0M0XFx1REQwMC1cXHVERDQzXFx1REQ0Ql18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXXxcXHVEODY5W1xcdURDMDAtXFx1REVENlxcdURGMDAtXFx1REZGRl18XFx1RDg2RFtcXHVEQzAwLVxcdURGMzRcXHVERjQwLVxcdURGRkZdfFxcdUQ4NkVbXFx1REMwMC1cXHVEQzFEXFx1REMyMC1cXHVERkZGXXxcXHVEODczW1xcdURDMDAtXFx1REVBMVxcdURFQjAtXFx1REZGRl18XFx1RDg3QVtcXHVEQzAwLVxcdURGRTBdfFxcdUQ4N0VbXFx1REMwMC1cXHVERTFEXSkpJ1xyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlICcwJzpcclxuICAgICAgICAgIHJlZ2V4ICs9ICcoWzAtOV0pJ1xyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBjYXNlICd6JzpcclxuICAgICAgICBjYXNlICdaJzpcclxuICAgICAgICAgIHJlZ2V4ICs9IElTX1VOSUNPREVfUFJPUEVSVFlfU1VQUE9SVEVEXHJcbiAgICAgICAgICAgID8gJyhbMC05XXxcXFxccHtMfSknXHJcbiAgICAgICAgICAgIDogJyhbMC05XXwoPzpbQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1RDAtXFx1MDVFQVxcdTA1RUYtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NkFcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTA5RkNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg2LVxcdTBFOEFcXHUwRThDLVxcdTBFQTNcXHUwRUE1XFx1MEVBNy1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQzkwLVxcdTFDQkFcXHUxQ0JELVxcdTFDQkZcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjNcXHUxQ0Y1XFx1MUNGNlxcdTFDRkFcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJGXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkVGXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QkZcXHVBN0MyLVxcdUE3QzZcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE4RkVcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY3XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYyRC1cXHVERjQwXFx1REY0Mi1cXHVERjQ5XFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzVcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXFx1REQwMC1cXHVERDIzXFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NVxcdURGRTAtXFx1REZGNl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDQ0XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzVGXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURFQjhcXHVERjAwLVxcdURGMUFdfFxcdUQ4MDZbXFx1REMwMC1cXHVEQzJCXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdUREQTAtXFx1RERBN1xcdUREQUEtXFx1REREMFxcdURERTFcXHVEREUzXFx1REUwMFxcdURFMEItXFx1REUzMlxcdURFM0FcXHVERTUwXFx1REU1Qy1cXHVERTg5XFx1REU5RFxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM3Mi1cXHVEQzhGXFx1REQwMC1cXHVERDA2XFx1REQwOFxcdUREMDlcXHVERDBCLVxcdUREMzBcXHVERDQ2XFx1REQ2MC1cXHVERDY1XFx1REQ2N1xcdURENjhcXHVERDZBLVxcdUREODlcXHVERDk4XFx1REVFMC1cXHVERUYyXXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REU0MC1cXHVERTdGXFx1REYwMC1cXHVERjRBXFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBcXHVERkUxXFx1REZFM118XFx1RDgyMVtcXHVEQzAwLVxcdURGRjddfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDAtXFx1REQxRVxcdURENTAtXFx1REQ1MlxcdURENjQtXFx1REQ2N1xcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzOFtcXHVERDAwLVxcdUREMkNcXHVERDM3LVxcdUREM0RcXHVERDRFXFx1REVDMC1cXHVERUVCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M1xcdURENEJdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFcXHVERUIwLVxcdURGRkZdfFxcdUQ4N0FbXFx1REMwMC1cXHVERkUwXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0pKSdcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnVSc6XHJcbiAgICAgICAgICByZWdleCArPSBJU19VTklDT0RFX1BST1BFUlRZX1NVUFBPUlRFRFxyXG4gICAgICAgICAgICA/ICcoKFswLTldKXwoXFxcXHMpfChbLiwvIyEkJV4mKjs6e309LV9gfigpXSl8KFxcXFxwe0x9KSknXHJcbiAgICAgICAgICAgIDogJygoWzAtOV0pfChcXFxccyl8KFsuLC8jISQlXiYqOzp7fT0tX2B+KCldKXwoPzpbQS1aYS16XFx4QUFcXHhCNVxceEJBXFx4QzAtXFx4RDZcXHhEOC1cXHhGNlxceEY4LVxcdTAyQzFcXHUwMkM2LVxcdTAyRDFcXHUwMkUwLVxcdTAyRTRcXHUwMkVDXFx1MDJFRVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3QS1cXHUwMzdEXFx1MDM3RlxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTJGXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjAtXFx1MDU4OFxcdTA1RDAtXFx1MDVFQVxcdTA1RUYtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwODYwLVxcdTA4NkFcXHUwOEEwLVxcdTA4QjRcXHUwOEI2LVxcdTA4QkRcXHUwOTA0LVxcdTA5MzlcXHUwOTNEXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Q1xcdTA5OEZcXHUwOTkwXFx1MDk5My1cXHUwOUE4XFx1MDlBQS1cXHUwOUIwXFx1MDlCMlxcdTA5QjYtXFx1MDlCOVxcdTA5QkRcXHUwOUNFXFx1MDlEQ1xcdTA5RERcXHUwOURGLVxcdTA5RTFcXHUwOUYwXFx1MDlGMVxcdTA5RkNcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQUY5XFx1MEIwNS1cXHUwQjBDXFx1MEIwRlxcdTBCMTBcXHUwQjEzLVxcdTBCMjhcXHUwQjJBLVxcdTBCMzBcXHUwQjMyXFx1MEIzM1xcdTBCMzUtXFx1MEIzOVxcdTBCM0RcXHUwQjVDXFx1MEI1RFxcdTBCNUYtXFx1MEI2MVxcdTBCNzFcXHUwQjgzXFx1MEI4NS1cXHUwQjhBXFx1MEI4RS1cXHUwQjkwXFx1MEI5Mi1cXHUwQjk1XFx1MEI5OVxcdTBCOUFcXHUwQjlDXFx1MEI5RVxcdTBCOUZcXHUwQkEzXFx1MEJBNFxcdTBCQTgtXFx1MEJBQVxcdTBCQUUtXFx1MEJCOVxcdTBCRDBcXHUwQzA1LVxcdTBDMENcXHUwQzBFLVxcdTBDMTBcXHUwQzEyLVxcdTBDMjhcXHUwQzJBLVxcdTBDMzlcXHUwQzNEXFx1MEM1OC1cXHUwQzVBXFx1MEM2MFxcdTBDNjFcXHUwQzgwXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDU0LVxcdTBENTZcXHUwRDVGLVxcdTBENjFcXHUwRDdBLVxcdTBEN0ZcXHUwRDg1LVxcdTBEOTZcXHUwRDlBLVxcdTBEQjFcXHUwREIzLVxcdTBEQkJcXHUwREJEXFx1MERDMC1cXHUwREM2XFx1MEUwMS1cXHUwRTMwXFx1MEUzMlxcdTBFMzNcXHUwRTQwLVxcdTBFNDZcXHUwRTgxXFx1MEU4MlxcdTBFODRcXHUwRTg2LVxcdTBFOEFcXHUwRThDLVxcdTBFQTNcXHUwRUE1XFx1MEVBNy1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjVcXHUxM0Y4LVxcdTEzRkRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNkYxLVxcdTE2RjhcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3OFxcdTE4ODAtXFx1MTg4NFxcdTE4ODctXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUVcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUIwLVxcdTE5QzlcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQzgwLVxcdTFDODhcXHUxQzkwLVxcdTFDQkFcXHUxQ0JELVxcdTFDQkZcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjNcXHUxQ0Y1XFx1MUNGNlxcdTFDRkFcXHUxRDAwLVxcdTFEQkZcXHUxRTAwLVxcdTFGMTVcXHUxRjE4LVxcdTFGMURcXHUxRjIwLVxcdTFGNDVcXHUxRjQ4LVxcdTFGNERcXHUxRjUwLVxcdTFGNTdcXHUxRjU5XFx1MUY1QlxcdTFGNURcXHUxRjVGLVxcdTFGN0RcXHUxRjgwLVxcdTFGQjRcXHUxRkI2LVxcdTFGQkNcXHUxRkJFXFx1MUZDMi1cXHUxRkM0XFx1MUZDNi1cXHUxRkNDXFx1MUZEMC1cXHUxRkQzXFx1MUZENi1cXHUxRkRCXFx1MUZFMC1cXHUxRkVDXFx1MUZGMi1cXHUxRkY0XFx1MUZGNi1cXHUxRkZDXFx1MjA3MVxcdTIwN0ZcXHUyMDkwLVxcdTIwOUNcXHUyMTAyXFx1MjEwN1xcdTIxMEEtXFx1MjExM1xcdTIxMTVcXHUyMTE5LVxcdTIxMURcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJBLVxcdTIxMkRcXHUyMTJGLVxcdTIxMzlcXHUyMTNDLVxcdTIxM0ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRFXFx1MjE4M1xcdTIxODRcXHUyQzAwLVxcdTJDMkVcXHUyQzMwLVxcdTJDNUVcXHUyQzYwLVxcdTJDRTRcXHUyQ0VCLVxcdTJDRUVcXHUyQ0YyXFx1MkNGM1xcdTJEMDAtXFx1MkQyNVxcdTJEMjdcXHUyRDJEXFx1MkQzMC1cXHUyRDY3XFx1MkQ2RlxcdTJEODAtXFx1MkQ5NlxcdTJEQTAtXFx1MkRBNlxcdTJEQTgtXFx1MkRBRVxcdTJEQjAtXFx1MkRCNlxcdTJEQjgtXFx1MkRCRVxcdTJEQzAtXFx1MkRDNlxcdTJEQzgtXFx1MkRDRVxcdTJERDAtXFx1MkRENlxcdTJERDgtXFx1MkRERVxcdTJFMkZcXHUzMDA1XFx1MzAwNlxcdTMwMzEtXFx1MzAzNVxcdTMwM0JcXHUzMDNDXFx1MzA0MS1cXHUzMDk2XFx1MzA5RC1cXHUzMDlGXFx1MzBBMS1cXHUzMEZBXFx1MzBGQy1cXHUzMEZGXFx1MzEwNS1cXHUzMTJGXFx1MzEzMS1cXHUzMThFXFx1MzFBMC1cXHUzMUJBXFx1MzFGMC1cXHUzMUZGXFx1MzQwMC1cXHU0REI1XFx1NEUwMC1cXHU5RkVGXFx1QTAwMC1cXHVBNDhDXFx1QTREMC1cXHVBNEZEXFx1QTUwMC1cXHVBNjBDXFx1QTYxMC1cXHVBNjFGXFx1QTYyQVxcdUE2MkJcXHVBNjQwLVxcdUE2NkVcXHVBNjdGLVxcdUE2OURcXHVBNkEwLVxcdUE2RTVcXHVBNzE3LVxcdUE3MUZcXHVBNzIyLVxcdUE3ODhcXHVBNzhCLVxcdUE3QkZcXHVBN0MyLVxcdUE3QzZcXHVBN0Y3LVxcdUE4MDFcXHVBODAzLVxcdUE4MDVcXHVBODA3LVxcdUE4MEFcXHVBODBDLVxcdUE4MjJcXHVBODQwLVxcdUE4NzNcXHVBODgyLVxcdUE4QjNcXHVBOEYyLVxcdUE4RjdcXHVBOEZCXFx1QThGRFxcdUE4RkVcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QTlFMC1cXHVBOUU0XFx1QTlFNi1cXHVBOUVGXFx1QTlGQS1cXHVBOUZFXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBN0UtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUIzMC1cXHVBQjVBXFx1QUI1Qy1cXHVBQjY3XFx1QUI3MC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXXxcXHVEODAwW1xcdURDMDAtXFx1REMwQlxcdURDMEQtXFx1REMyNlxcdURDMjgtXFx1REMzQVxcdURDM0NcXHVEQzNEXFx1REMzRi1cXHVEQzREXFx1REM1MC1cXHVEQzVEXFx1REM4MC1cXHVEQ0ZBXFx1REU4MC1cXHVERTlDXFx1REVBMC1cXHVERUQwXFx1REYwMC1cXHVERjFGXFx1REYyRC1cXHVERjQwXFx1REY0Mi1cXHVERjQ5XFx1REY1MC1cXHVERjc1XFx1REY4MC1cXHVERjlEXFx1REZBMC1cXHVERkMzXFx1REZDOC1cXHVERkNGXXxcXHVEODAxW1xcdURDMDAtXFx1REM5RFxcdURDQjAtXFx1RENEM1xcdURDRDgtXFx1RENGQlxcdUREMDAtXFx1REQyN1xcdUREMzAtXFx1REQ2M1xcdURFMDAtXFx1REYzNlxcdURGNDAtXFx1REY1NVxcdURGNjAtXFx1REY2N118XFx1RDgwMltcXHVEQzAwLVxcdURDMDVcXHVEQzA4XFx1REMwQS1cXHVEQzM1XFx1REMzN1xcdURDMzhcXHVEQzNDXFx1REMzRi1cXHVEQzU1XFx1REM2MC1cXHVEQzc2XFx1REM4MC1cXHVEQzlFXFx1RENFMC1cXHVEQ0YyXFx1RENGNFxcdURDRjVcXHVERDAwLVxcdUREMTVcXHVERDIwLVxcdUREMzlcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzVcXHVERTYwLVxcdURFN0NcXHVERTgwLVxcdURFOUNcXHVERUMwLVxcdURFQzdcXHVERUM5LVxcdURFRTRcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNzJcXHVERjgwLVxcdURGOTFdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XFx1REM4MC1cXHVEQ0IyXFx1RENDMC1cXHVEQ0YyXFx1REQwMC1cXHVERDIzXFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NVxcdURGRTAtXFx1REZGNl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDQ0XFx1REQ1MC1cXHVERDcyXFx1REQ3NlxcdUREODMtXFx1RERCMlxcdUREQzEtXFx1RERDNFxcdUREREFcXHVERERDXFx1REUwMC1cXHVERTExXFx1REUxMy1cXHVERTJCXFx1REU4MC1cXHVERTg2XFx1REU4OFxcdURFOEEtXFx1REU4RFxcdURFOEYtXFx1REU5RFxcdURFOUYtXFx1REVBOFxcdURFQjAtXFx1REVERVxcdURGMDUtXFx1REYwQ1xcdURGMEZcXHVERjEwXFx1REYxMy1cXHVERjI4XFx1REYyQS1cXHVERjMwXFx1REYzMlxcdURGMzNcXHVERjM1LVxcdURGMzlcXHVERjNEXFx1REY1MFxcdURGNUQtXFx1REY2MV18XFx1RDgwNVtcXHVEQzAwLVxcdURDMzRcXHVEQzQ3LVxcdURDNEFcXHVEQzVGXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURFQjhcXHVERjAwLVxcdURGMUFdfFxcdUQ4MDZbXFx1REMwMC1cXHVEQzJCXFx1RENBMC1cXHVEQ0RGXFx1RENGRlxcdUREQTAtXFx1RERBN1xcdUREQUEtXFx1REREMFxcdURERTFcXHVEREUzXFx1REUwMFxcdURFMEItXFx1REUzMlxcdURFM0FcXHVERTUwXFx1REU1Qy1cXHVERTg5XFx1REU5RFxcdURFQzAtXFx1REVGOF18XFx1RDgwN1tcXHVEQzAwLVxcdURDMDhcXHVEQzBBLVxcdURDMkVcXHVEQzQwXFx1REM3Mi1cXHVEQzhGXFx1REQwMC1cXHVERDA2XFx1REQwOFxcdUREMDlcXHVERDBCLVxcdUREMzBcXHVERDQ2XFx1REQ2MC1cXHVERDY1XFx1REQ2N1xcdURENjhcXHVERDZBLVxcdUREODlcXHVERDk4XFx1REVFMC1cXHVERUYyXXxcXHVEODA4W1xcdURDMDAtXFx1REY5OV18XFx1RDgwOVtcXHVEQzgwLVxcdURENDNdfFtcXHVEODBDXFx1RDgxQy1cXHVEODIwXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REU0MC1cXHVERTdGXFx1REYwMC1cXHVERjRBXFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBcXHVERkUxXFx1REZFM118XFx1RDgyMVtcXHVEQzAwLVxcdURGRjddfFxcdUQ4MjJbXFx1REMwMC1cXHVERUYyXXxcXHVEODJDW1xcdURDMDAtXFx1REQxRVxcdURENTAtXFx1REQ1MlxcdURENjQtXFx1REQ2N1xcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzOFtcXHVERDAwLVxcdUREMkNcXHVERDM3LVxcdUREM0RcXHVERDRFXFx1REVDMC1cXHVERUVCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M1xcdURENEJdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRDZcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFcXHVERUIwLVxcdURGRkZdfFxcdUQ4N0FbXFx1REMwMC1cXHVERkUwXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF0pKSdcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJlZ2V4ICs9IGMucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKVxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBnZW5lcmF0ZVBhdHRlcm5Gcm9tTWFzay5fX0NBQ0hFX19bY2FjaGVLZXldID0gcmVnZXhcclxuICB9XHJcblxyXG4gIHJldHVybiBnZW5lcmF0ZVBhdHRlcm5Gcm9tTWFzay5fX0NBQ0hFX19bY2FjaGVLZXldXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVbm1hc2sgdGhlIGdpdmVuIHZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXNrZWRWYWx1ZSBtYXNrZWQgc3RyaW5nXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXNrICB0aGUgdXNlZCBtYXNrIHRvIHByb2R1Y2UgdGhlIG1hc2tlZCBzdHJpbmdcclxuICovXHJcbmNvbnN0IHVubWFzayA9IChtYXNrZWRWYWx1ZSwgbWFzaykgPT4ge1xyXG4gIGlmICh0eXBlb2YgdW5tYXNrLl9fQ0FDSEVfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHVubWFzay5fX0NBQ0hFX18gPSB7fVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHttYXNrZWRWYWx1ZX0tJHttYXNrfWBcclxuXHJcbiAgaWYgKCF1bm1hc2suX19DQUNIRV9fW2NhY2hlS2V5XSkge1xyXG4gICAgY29uc3QgbWFza0FzQXJyYXkgPSBtYXNrLnNwbGl0KCcnKVxyXG4gICAgY29uc3QgbWFza2VkVmFsdWVBc0FycmF5ID0gbWFza2VkVmFsdWUuc3BsaXQoJycpXHJcblxyXG4gICAgbGV0IHVubWFza2VkID0gJydcclxuXHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbWFza2VkVmFsdWVBc0FycmF5Lmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBjb25zdCBlbCA9IG1hc2tlZFZhbHVlQXNBcnJheVtpbmRleF1cclxuICAgICAgY29uc3QgbWFzayA9IG1hc2tBc0FycmF5W2luZGV4XVxyXG4gICAgICBjb25zdCBlbEhhc01hc2sgPSBTVVBQT1JURURfTUFTS1MuaW5kZXhPZihtYXNrKSA+IC0xXHJcbiAgICAgIGlmIChlbEhhc01hc2spIHtcclxuICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcclxuICAgICAgICAgIGdlbmVyYXRlUGF0dGVybkZyb21NYXNrKG1hc2spLFxyXG4gICAgICAgICAgSVNfVU5JQ09ERV9QUk9QRVJUWV9TVVBQT1JURUQgPyAndScgOiAnJ1xyXG4gICAgICAgIClcclxuICAgICAgICBpZiAocGF0dGVybi50ZXN0KGVsKSkgdW5tYXNrZWQgKz0gZWxcclxuICAgICAgICBlbHNlIGJyZWFrXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1bm1hc2suX19DQUNIRV9fW2NhY2hlS2V5XSA9IHVubWFza2VkLnRvTG9jYWxlTG93ZXJDYXNlKClcclxuICB9XHJcblxyXG4gIHJldHVybiB1bm1hc2suX19DQUNIRV9fW2NhY2hlS2V5XVxyXG59XHJcblxyXG4vKipcclxuICogR2l2ZW4gdGhlIG1hc2tlZCBzdHJpbmcgLCBmaW5kIHRoZSBuZXh0IGNhcmV0IHBvc2l0aW9uIGRlcGVuZGluZyBvblxyXG4gKiB3aGF0IGlzIG1pc3NpbmcgdG8gY29tcGxldGUgdGhlIG1hc2tcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IG1hc2tlZFZhbHVlIG1hc2tlZCBzdHJpbmdcclxuICogQHBhcmFtIHtTdHJpbmd9IG1hc2sgIHRoZSB1c2VkIG1hc2sgdG8gcHJvZHVjZSB0aGUgbWFza2VkIHN0cmluZ1xyXG4gKi9cclxuY29uc3QgZmluZENhcmV0UG9zaXRpb24gPSAobWFza2VkVmFsdWUsIG1hc2spID0+IHtcclxuICBpZiAodHlwZW9mIGZpbmRDYXJldFBvc2l0aW9uLl9fQ0FDSEVfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIGZpbmRDYXJldFBvc2l0aW9uLl9fQ0FDSEVfXyA9IHt9XHJcbiAgfVxyXG5cclxuICBjb25zdCBjYWNoZUtleSA9IGAke21hc2tlZFZhbHVlfS0ke21hc2t9YFxyXG4gIGlmICghZmluZENhcmV0UG9zaXRpb24uX19DQUNIRV9fW2NhY2hlS2V5XSkge1xyXG4gICAgY29uc3QgbWFza0FzQXJyYXkgPSBtYXNrLnNwbGl0KCcnKVxyXG4gICAgbGV0IG1hc2tlZFZhbHVlQXNBcnJheSA9IG1hc2tlZFZhbHVlLnNwbGl0KCcnKVxyXG4gICAgaWYgKG1hc2tlZFZhbHVlQXNBcnJheS5sZW5ndGggPCBtYXNrQXNBcnJheS5sZW5ndGgpIHtcclxuICAgICAgbWFza2VkVmFsdWVBc0FycmF5ID0gbWFza2VkVmFsdWVBc0FycmF5LmNvbmNhdChcclxuICAgICAgICBuZXcgQXJyYXkobWFza0FzQXJyYXkubGVuZ3RoIC0gbWFza2VkVmFsdWVBc0FycmF5Lmxlbmd0aCkuam9pbignICcpLnNwbGl0KCcnKVxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHBvc2l0aW9uID0gLTFcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBtYXNrQXNBcnJheS5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgY29uc3QgZWwgPSBtYXNrQXNBcnJheVtpbmRleF1cclxuICAgICAgaWYgKGVsICE9PSBtYXNrZWRWYWx1ZUFzQXJyYXlbaW5kZXhdKSB7XHJcbiAgICAgICAgLy8gaWYgKG1hc2tlZFZhbHVlQXNBcnJheVtpbmRleF0gPT09ICcgJykgcmV0dXJuIGluZGV4XHJcbiAgICAgICAgaWYgKFNVUFBPUlRFRF9NQVNLUy5pbmRleE9mKGVsKSA+IC0xKSB7XHJcbiAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gbmV3IFJlZ0V4cChcclxuICAgICAgICAgICAgZ2VuZXJhdGVQYXR0ZXJuRnJvbU1hc2soZWwpLFxyXG4gICAgICAgICAgICBJU19VTklDT0RFX1BST1BFUlRZX1NVUFBPUlRFRCA/ICd1JyA6ICcnXHJcbiAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgaWYgKCFwYXR0ZXJuLnRlc3QobWFza2VkVmFsdWVBc0FycmF5W2luZGV4XSkpIHtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSBpbmRleFxyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpbmRDYXJldFBvc2l0aW9uLl9fQ0FDSEVfX1tjYWNoZUtleV0gPVxyXG4gICAgICBwb3NpdGlvbiA8IDAgPyBtYXNrZWRWYWx1ZUFzQXJyYXkubGVuZ3RoIDogcG9zaXRpb25cclxuICB9XHJcblxyXG4gIHJldHVybiBmaW5kQ2FyZXRQb3NpdGlvbi5fX0NBQ0hFX19bY2FjaGVLZXldXHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgaXNNYXNrZWRWYWx1ZSxcclxuICBtYXNrSWZOb3RNYXNrZWQsXHJcbiAgdW5tYXNrLFxyXG4gIGZpbmRDYXJldFBvc2l0aW9uLFxyXG4gIGdlbmVyYXRlUGF0dGVybkZyb21NYXNrLFxyXG4gIElTX1VOSUNPREVfUFJPUEVSVFlfU1VQUE9SVEVELFxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9UZXh0SW5wdXQvdG9vbHMuanMiLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYXNpcy1pbnB1dC1tYXNraW5nIGxpYi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVySW5wdXQgZnJvbSAnLi9OdW1iZXJJbnB1dCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE51bWJlcklucHV0XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9OdW1iZXJJbnB1dC9pbmRleC5qcyIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJhc2lzLWlucHV0LW1hc2tpbmcgbGliLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCBOdW1iZXJNYXNrIGZyb20gJ2Jiai1tYXNrcy9zcmMvTnVtYmVyTWFzaydcclxuXHJcbmNvbnN0IGNvdW50RGVjaW1hbHMgPSB2YWx1ZSA9PiB7XHJcbiAgaWYgKHZhbHVlICUgMSAhPSAwKSB7XHJcbiAgICBjb25zdCBzcGxpdCA9IHZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVxyXG4gICAgaWYgKHNwbGl0Lmxlbmd0aCA9PT0gMikgcmV0dXJuIHNwbGl0WzFdLmxlbmd0aFxyXG4gIH1cclxuICByZXR1cm4gMFxyXG59XHJcblxyXG4vKipcclxuICogVGhlIGBOdW1iZXJJbnB1dGAgd2lsbCB3cmFwIHRleHQgaW5wdXRzIGFuZCBhcHBseSB0aGUgZ2l2ZW4gW2JiaiBOdW1iZXIgbWFza10oaHR0cHM6Ly9naXRodWIuY29tL0Jhc2lzSHViL2Jiai1tYXNrcyNudW1iZXItbWFza3MpXHJcbiAqXHJcbiAqICoqT3B0aW9ucyoqXHJcbiAqXHJcbiAqIF9PcHRpb25zIGNhbiBiZSBwYXNzZWQgdmlhIGRhdGEgYXR0cmlidXRlcyAuIEZvciBkYXRhIGF0dHJpYnV0ZXMsIGFwcGVuZCB0aGUgb3B0aW9uIG5hbWUgdG8gZGF0YS0sIGFzIGluIGRhdGEtbWFza19cclxuICpcclxuICogfCBPcHRpb24gICAgfCBEZWZhdWx0IHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxyXG4gKiB8IG1hc2sgfCAgICAgICAgIHwgVGhlIGJiaiBudW1iZXIgbWFzayBAc2VlIFtCQmogTnVtYmVyIE1hc2tzXShodHRwczovL2dpdGh1Yi5jb20vQmFzaXNIdWIvYmJqLW1hc2tzI251bWJlci1tYXNrcykgfFxyXG4gKiB8IG1pbiB8ICAgICAgICAgfCBUaGUgbWluaW11bSB2YWx1ZSB0byBhY2NlcHQgZm9yIHRoaXMgaW5wdXR8XHJcbiAqIHwgbWF4IHwgICAgICAgICB8IFRoZSBtYXhpbXVtIHZhbHVlIHRvIGFjY2VwdCBmb3IgdGhpcyBpbnB1dHxcclxuICogfCBzdGVwIHwgICAgICAgICB8IEEgc3RlcHBpbmcgaW50ZXJ2YWwgdG8gdXNlIHdoZW4gdXNpbmcgdXAgYW5kIGRvd24gYXJyb3dzIHRvIGFkanVzdCB0aGUgdmFsdWUsIGFzIHdlbGwgYXMgZm9yIHZhbGlkYXRpb258XHJcbiAqIHxncm91cGluZy1zZXBhcmF0b3IgfCAsIHwgYSBjaGFyIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBhIGdyb3VwaW5nIHNlcGFyYXRvciB8XHJcbiAqIHxkZWNpbWFsLXNlcGFyYXRvciB8IC4gfCBhIGNoYXIgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGEgZGVjaW1hbCBzZXBhcmF0b3IgfFxyXG4gKiB8Zm9yY2UtdHJhaWxpbmctemVyb3MgfCBmYWxzZSB8IEFmZmVjdHMgdGhlIG91dHB1dCBieSBzd2l0Y2hpbmcgdGhlIHdheSBhIG1hc2sgd2l0aCBcIiNcIiBjaGFyYWN0ZXJzIGluIHRoZSB0cmFpbGluZyBwb3NpdGlvbnMgaXMgZmlsbGVkLiBmb3IgZXhhbXBsZSwgdGhlIGZ1bmN0aW9uIE51bWJlck1hc2subWFzayguMTA6XCIjLiMjXCIpIHJldHVybnMgLjEwIGluc3RlYWQgb2YgLjF8XHJcbiAqXHJcbiAqICA8YnI+XHJcbiAqXHJcbiAqICoqRXhhbXBsZSA6KipcclxuICogYGBgaHRtbFxyXG4gKiAgPGlucHV0IGNsYXNzPVwiYmJqLW51bWJlci1tYXNrZWRcIiBuYW1lPVwidGVzdFwiIGlkPVwidGVzdFwiIHZhbHVlPVwiMTIzNFwiIGRhdGEtbWFzaz1cIiMjLCMjMFwiPlxyXG4gKlxyXG4gKiAgPHNjcmlwdD5cclxuICogICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uIChlKSB7XHJcbiAqICAgICAgbmV3IEJhc2lzLklucHV0TWFza2luZy5OdW1iZXJJbnB1dCh7XHJcbiAqXHJcbiAqICAgICAgICAgLy8gQHBhcmFtIHtTdHJpbmd9IHZhbHVlTWFza2VkICBtYXNrZWQgdmFsdWVcclxuICogICAgICAgICAvLyBAcGFyYW0ge051bWJlcn0gdmFsdWVVbm1hc2tlZCAgb3JpZ2luYWwgdmFsdWVcclxuICogICAgICAgICAvLyBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0IHRoZSBhY3R1YWwgaW5wdXQgaW5zdGFuY2VcclxuICogICAgICAgICBvblVwZGF0ZTogKHZhbHVlTWFza2VkLCB2YWx1ZVVubWFza2VkLCBpbnB1dCwgaXNBcHBsaWVkLCBpc0luaXRpYWwpID0+IHtcclxuICogICAgICAgICAgICAvLyBkbyBzb21ldGhpbmdcclxuICogICAgICAgICB9LFxyXG4gKlxyXG4gKiAgICAgICAgIC8vIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZXJyb3IgbGFzdCBvY2N1cnJlZCBlcnJvci4gY291bGQgYmUgbWFzayBlcnJvciBvciB2YWxpZGF0aW9uIGVycm9yXHJcbiAqICAgICAgICAgLy8gQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dCB0aGUgYWN0dWFsIGlucHV0IGluc3RhbmNlXHJcbiAqICAgICAgICAgb25JbnZhbGlkOiAoZXJyICwgaW5wdXQpID0+IHtcclxuICogICAgICAgICAgICAvLyBkbyBzb21ldGhpbmdcclxuICogICAgICAgICB9XHJcbiAqICAgICAgfSlcclxuICogICAgfSlcclxuICogIDwvc2NyaXB0PlxyXG4gKiBgYGBcclxuICpcclxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cclxuICovXHJcbmNsYXNzIE51bWJlcklucHV0IHtcclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3QgbmV3IE51bWJlcklucHV0XHJcbiAgICpcclxuICAgKiBAcGFyYW0gez9PYmplY3R9IG9wdGlvbnMgLSBUaGUgaW5wdXQgb3B0aW9ucy5cclxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fFN0cmluZ30gW29wdGlvbnMuZWxlbWVudHM9XCIuYmJqLW51bWJlci1tYXNrZWRcIl0gLSBUaGUgY2xhc3MgbmFtZSBvciB0aGUgbm9kZSB0byB1c2VcclxuICAgKiBAcGFyYW0ge0hUTUxEb2N1bWVudH0gW29wdGlvbnMuZG9jdW1lbnQ9ZG9jdW1lbnRdIC0gRG9jdW1lbnQgaW5zdGFuY2UgdG8gdXNlXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNzc0NsYXNzRXJyb3I9XCJiYmotbWFzay1lcnJvclwiXSAtIEEgY3NzIGNsYXNzIHRvIGF0dGFjaCB0byB0aGUgaW5wdXQgd2hlbiBpdCBpcyBpbnZhbGlkXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNzc0NsYXNzU3VjY2Vzcz1cImJiai1tYXNrLXN1Y2Nlc3NcIl0gLSBBIGNzcyBjbGFzcyB0byBhdHRhY2ggdG8gdGhlIGlucHV0IHdoZW4gaXQgaXMgdmFsaWQgYWZ0ZXIgdGhlIHVzZXIgaW50ZXJhY3Rpb25cclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5vblVwZGF0ZT1udWxsXSAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIHRoZSBuZXcgbWFza2VkIHZhbHVlIGlzIHNldFxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLm9uSW52YWxpZD1udWxsXSAtIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIHRoZSBpbnB1dCBvciB0aGUgbWFzayBpcyBpbnZhbGlkXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgIC4uLntcclxuICAgICAgICBlbGVtZW50czogJy5iYmotbnVtYmVyLW1hc2tlZCcsXHJcbiAgICAgICAgZG9jOiBkb2N1bWVudCxcclxuICAgICAgICBjc3NDbGFzc0Vycm9yOiAnYmJqLW1hc2stZXJyb3InLFxyXG4gICAgICAgIGNzc0NsYXNzU3VjY2VzczogJ2Jiai1tYXNrLXN1Y2Nlc3MnLFxyXG4gICAgICAgIG9uVXBkYXRlOiBudWxsLFxyXG4gICAgICAgIG9uSW52YWxpZDogbnVsbCxcclxuICAgICAgfSxcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9hY3R1YWxJbnB1dEhhbmRsZXIgPSB0aGlzLl9hY3R1YWxJbnB1dEhhbmRsZXIuYmluZCh0aGlzKVxyXG4gICAgdGhpcy5fdW5tYXNrZWRJbnB1dEhhbmRsZXIgPSB0aGlzLl91bm1hc2tlZElucHV0SGFuZGxlci5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnJlZnJlc2goKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IGFuZCB3cmFwIHRoZSBpbnB1dCBlbGVtZW50cyBmb3IgbWFza2luZyBpbiBjYXNlXHJcbiAgICogdGhleSBhcmUgbm90IHdyYXBwZWQgeWV0XHJcbiAgICovXHJcbiAgcmVmcmVzaCgpIHtcclxuICAgIGNvbnN0IGVsZW1lbnRzID1cclxuICAgICAgdHlwZW9mIHRoaXMub3B0aW9ucy5lbGVtZW50cyA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IHRoaXMub3B0aW9ucy5kb2MucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdGlvbnMuZWxlbWVudHMpXHJcbiAgICAgICAgOiB0aGlzLm9wdGlvbnMuZWxlbWVudHNcclxuICAgIGxldCBpbnB1dCwgcGFyZW50Q2xhc3NcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlucHV0ID0gZWxlbWVudHNbaV1cclxuICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xyXG4gICAgICAgIHBhcmVudENsYXNzID0gaW5wdXQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcclxuXHJcbiAgICAgICAgaWYgKCFpbnB1dC5nZXRBdHRyaWJ1dGUoJ2lkJykpIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgYEJCak1hc2tpbmc6IElucHV0IGhhcyBubyBJRC4gV2l0aG91dCBhbiBJRCB0aGUgaW5wdXQgY2Fubm90IGJlIG1hc2tlZGAsXHJcbiAgICAgICAgICAgIGlucHV0XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gd2UgZG9uJ3QgaW5pdGlhbGl6ZSB0aGUgaW5wdXQncyB3cmFwIHR3aWNlXHJcbiAgICAgICAgY29uc3QgaXNXcmFwcGVkID1cclxuICAgICAgICAgIHBhcmVudENsYXNzICYmIHBhcmVudENsYXNzLmluZGV4T2YoJ251bWJlcklucHV0TWFza19fd3JhcCcpID4gLTFcclxuICAgICAgICB0aGlzLl93cmFwKGlucHV0LCBpc1dyYXBwZWQpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgYEJCak1hc2tpbmc6IEludmFsaWQgaW5wdXQgZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkYCxcclxuICAgICAgICAgIGlucHV0XHJcbiAgICAgICAgKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVbndyYXAgdGhlIGlucHV0IGVsZW1lbnRzIGFuZCByZW1vdmUgYXR0YWNoZWQgbGlzdGVuZXJzXHJcbiAgICovXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIGNvbnN0IGVsZW1lbnRzID1cclxuICAgICAgdHlwZW9mIHRoaXMub3B0aW9ucy5lbGVtZW50cyA9PT0gJ3N0cmluZydcclxuICAgICAgICA/IHRoaXMub3B0aW9ucy5kb2MucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdGlvbnMuZWxlbWVudHMpXHJcbiAgICAgICAgOiB0aGlzLm9wdGlvbnMuZWxlbWVudHNcclxuXHJcbiAgICBsZXQgaW5wdXQsIHBhcmVudCwgcGFyZW50Q2xhc3NcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlucHV0ID0gZWxlbWVudHNbaV1cclxuICAgICAgcGFyZW50ID0gaW5wdXQucGFyZW50Tm9kZVxyXG4gICAgICBwYXJlbnRDbGFzcyA9IHBhcmVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcclxuXHJcbiAgICAgIGlmIChwYXJlbnRDbGFzcyAmJiBwYXJlbnRDbGFzcy5pbmRleE9mKCdudW1iZXJJbnB1dE1hc2tfX3dyYXAnKSA+IC0xKSB7XHJcbiAgICAgICAgdGhpcy5fdW53cmFwKHBhcmVudClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIHRoZSBudW1iZXIgbWFza2luZyBpbnB1dCB3cmFwcGVyXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGFjdHVhbElucHV0IHRoZSBpbnB1dCBlbGVtZW50XHJcbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1dyYXBwZWQgd2hlbiB0cnVlIHRoZSBpbnB1dCBpcyBhbHJlYWR5IHdyYXBwZWQgYW5kIHdlIG5lZWQgdG8gYWRkIHdoYXQgaXNcclxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nIG9ubHlcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtIVE1MU3BhbkVsZW1lbnR9IHdyYXBwZXIgaW5zdGFuY2VcclxuICAgKlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKi9cclxuICBfd3JhcChhY3R1YWxJbnB1dCwgaXNXcmFwcGVkKSB7XHJcbiAgICBjb25zdCBhY3R1YWxJbnB1dElkID0gYWN0dWFsSW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpLFxyXG4gICAgICBhY3R1YWxJbnB1dE5hbWUgPSBhY3R1YWxJbnB1dC5nZXRBdHRyaWJ1dGUoJ25hbWUnKSxcclxuICAgICAgYWN0dWFsSW5wdXRTdGVwID0gYWN0dWFsSW5wdXQuZGF0YXNldC5zdGVwIHx8IG51bGwsXHJcbiAgICAgIGFjdHVhbElucHV0TWF4ID0gYWN0dWFsSW5wdXQuZGF0YXNldC5tYXggfHwgbnVsbCxcclxuICAgICAgYWN0dWFsSW5wdXRNaW4gPSBhY3R1YWxJbnB1dC5kYXRhc2V0Lm1pbiB8fCBudWxsLFxyXG4gICAgICBhY3R1YWxJbnB1dEdyb3VwaW5nU2VwYXJhdG9yID1cclxuICAgICAgICBhY3R1YWxJbnB1dC5kYXRhc2V0Lmdyb3VwaW5nU2VwYXJhdG9yIHx8ICcsJyxcclxuICAgICAgYWN0dWFsSW5wdXREZWNpbWFsU2VwYXJhdG9yID0gYWN0dWFsSW5wdXQuZGF0YXNldC5kZWNpbWFsU2VwYXJhdG9yIHx8ICcuJyxcclxuICAgICAgYWN0dWFsSW5wdXRGb3JjZVRyYWlsaW5nWmVyb3MgPVxyXG4gICAgICAgIGFjdHVhbElucHV0LmRhdGFzZXQuZm9yY2VUcmFpbGluZ1plcm9zIHx8IG51bGwsXHJcbiAgICAgIGFjdHVhbElucHV0TWFzayA9IGFjdHVhbElucHV0LmRhdGFzZXQubWFzayB8fCAnJyxcclxuICAgICAgYWN0dWFsSW5wdXRDbGFzc2VzID0gYWN0dWFsSW5wdXQuZ2V0QXR0cmlidXRlKCdjbGFzcycpLFxyXG4gICAgICBhY3R1YWxJbnB1dFJlcXVpcmVkID0gYWN0dWFsSW5wdXQuZ2V0QXR0cmlidXRlKCdyZXF1aXJlZCcpIHx8IG51bGxcclxuXHJcbiAgICBsZXQgd3JhcCA9IG51bGwsXHJcbiAgICAgIHVubWFza2VkSW5wdXQgPSBudWxsXHJcblxyXG4gICAgaWYgKCFpc1dyYXBwZWQpIHtcclxuICAgICAgd3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKVxyXG4gICAgICB1bm1hc2tlZElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSAvLyBoaWRkZW4gaW5wdXQgd2l0aCB0aGUgdW5tYXNrZWQgdmFsdWVzIGZvciBmb3Jtc1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgd3JhcCA9IGFjdHVhbElucHV0LnBhcmVudE5vZGVcclxuICAgICAgdW5tYXNrZWRJbnB1dCA9IHdyYXAucXVlcnlTZWxlY3RvcignLm51bWJlcklucHV0TWFza19fdW5tYXNrZWRJbnB1dCcpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29uZmlndXJlIHRoZSBhY3R1YWwgaW5wdXRcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBpZiAoIWlzV3JhcHBlZCkge1xyXG4gICAgICBhY3R1YWxJbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwLCBhY3R1YWxJbnB1dCkgLy8gbW92ZSB0aGUgaW5wdXQgb3V0c2lkZSB0aGUgd3JhcHBlclxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgIShcclxuICAgICAgICAgIGFjdHVhbElucHV0Lmhhc0F0dHJpYnV0ZSgncmVhZG9ubHknKSB8fFxyXG4gICAgICAgICAgYWN0dWFsSW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXHJcbiAgICAgICAgKVxyXG4gICAgICApIHtcclxuICAgICAgICBhY3R1YWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2FjdHVhbElucHV0SGFuZGxlcilcclxuICAgICAgICBhY3R1YWxJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1c2luJywgdGhpcy5fYWN0dWFsSW5wdXRIYW5kbGVyKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWN0dWFsSW5wdXQuZGF0YXNldC52YWx1ZVVubWFza2VkID0gYWN0dWFsSW5wdXQudmFsdWUgfHwgMFxyXG4gICAgYWN0dWFsSW5wdXQuZGF0YXNldC5ncm91cGluZ1NlcGFyYXRvciA9IGFjdHVhbElucHV0R3JvdXBpbmdTZXBhcmF0b3JcclxuICAgIGFjdHVhbElucHV0LmRhdGFzZXQuZGVjaW1hbFNlcGFyYXRvciA9IGFjdHVhbElucHV0RGVjaW1hbFNlcGFyYXRvclxyXG4gICAgYWN0dWFsSW5wdXQuZGF0YXNldC5mb3JjZVRyYWlsaW5nWmVyb3MgPSBhY3R1YWxJbnB1dEZvcmNlVHJhaWxpbmdaZXJvc1xyXG4gICAgYWN0dWFsSW5wdXQudmFsdWUgPSBOdW1iZXJNYXNrLm1hc2soXHJcbiAgICAgIGFjdHVhbElucHV0LmRhdGFzZXQudmFsdWVVbm1hc2tlZCxcclxuICAgICAgYWN0dWFsSW5wdXRNYXNrLFxyXG4gICAgICBhY3R1YWxJbnB1dEdyb3VwaW5nU2VwYXJhdG9yLFxyXG4gICAgICBhY3R1YWxJbnB1dERlY2ltYWxTZXBhcmF0b3IsXHJcbiAgICAgIGFjdHVhbElucHV0Rm9yY2VUcmFpbGluZ1plcm9zXHJcbiAgICApLnRyaW0oKVxyXG4gICAgYWN0dWFsSW5wdXQuY2xhc3NMaXN0LmFkZChcclxuICAgICAgJ251bWJlcklucHV0TWFza19fdGV4dElucHV0JyxcclxuICAgICAgdGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2Vzc1xyXG4gICAgKVxyXG5cclxuICAgIC8vIGNvbmZpZ3VyZSB0aGUgdW5tYXNrZWQgaW5wdXRcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHVubWFza2VkSW5wdXQudmFsdWUgPSBhY3R1YWxJbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWRcclxuICAgIHVubWFza2VkSW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJylcclxuICAgIHVubWFza2VkSW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2hpZGRlbicpXHJcbiAgICB1bm1hc2tlZElucHV0LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBhY3R1YWxJbnB1dENsYXNzZXMpXHJcbiAgICBpZiAoYWN0dWFsSW5wdXRJZClcclxuICAgICAgdW5tYXNrZWRJbnB1dC5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7YWN0dWFsSW5wdXRJZH0tdW5tYXNrZWRgKVxyXG4gICAgaWYgKGFjdHVhbElucHV0TmFtZSlcclxuICAgICAgdW5tYXNrZWRJbnB1dC5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBgJHthY3R1YWxJbnB1dE5hbWV9LXVubWFza2VkYClcclxuICAgIGlmIChhY3R1YWxJbnB1dFJlcXVpcmVkKSB1bm1hc2tlZElucHV0LnNldEF0dHJpYnV0ZSgncmVxdWlyZWQnLCAncmVxdWlyZWQnKVxyXG5cclxuICAgIGlmIChhY3R1YWxJbnB1dFN0ZXApIHVubWFza2VkSW5wdXQuc2V0QXR0cmlidXRlKCdzdGVwJywgYWN0dWFsSW5wdXRTdGVwKVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGNvbnN0IGRlY2ltYWxzID0gY291bnREZWNpbWFscyh1bm1hc2tlZElucHV0LnZhbHVlKVxyXG4gICAgICBsZXQgc3RlcCA9ICcxJ1xyXG4gICAgICBpZiAoZGVjaW1hbHMgPiAwKSB7XHJcbiAgICAgICAgc3RlcCA9IGAuJHtBcnJheShkZWNpbWFscykuam9pbignMCcpfTFgXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHVubWFza2VkSW5wdXQuc2V0QXR0cmlidXRlKCdzdGVwJywgc3RlcClcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWN0dWFsSW5wdXRNaW4pIHVubWFza2VkSW5wdXQuc2V0QXR0cmlidXRlKCdtaW4nLCBhY3R1YWxJbnB1dE1pbilcclxuICAgIGlmIChhY3R1YWxJbnB1dE1heCkgdW5tYXNrZWRJbnB1dC5zZXRBdHRyaWJ1dGUoJ21heCcsIGFjdHVhbElucHV0TWF4KVxyXG4gICAgdW5tYXNrZWRJbnB1dC5kYXRhc2V0LmlucHV0SWQgPSBhY3R1YWxJbnB1dElkXHJcbiAgICB1bm1hc2tlZElucHV0LmRhdGFzZXQubWFzayA9IGFjdHVhbElucHV0TWFza1xyXG4gICAgdW5tYXNrZWRJbnB1dC5kYXRhc2V0Lmdyb3VwaW5nU2VwYXJhdG9yID0gYWN0dWFsSW5wdXRHcm91cGluZ1NlcGFyYXRvclxyXG4gICAgdW5tYXNrZWRJbnB1dC5kYXRhc2V0LmRlY2ltYWxTZXBhcmF0b3IgPSBhY3R1YWxJbnB1dERlY2ltYWxTZXBhcmF0b3JcclxuICAgIGlmIChhY3R1YWxJbnB1dEZvcmNlVHJhaWxpbmdaZXJvcylcclxuICAgICAgdW5tYXNrZWRJbnB1dC5kYXRhc2V0LmZvcmNlVHJhaWxpbmdaZXJvcyA9IGFjdHVhbElucHV0Rm9yY2VUcmFpbGluZ1plcm9zXHJcblxyXG4gICAgaWYgKCFpc1dyYXBwZWQpIHtcclxuICAgICAgdW5tYXNrZWRJbnB1dC5jbGFzc0xpc3QuYWRkKCdudW1iZXJJbnB1dE1hc2tfX3VubWFza2VkSW5wdXQnKVxyXG4gICAgICB1bm1hc2tlZElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl91bm1hc2tlZElucHV0SGFuZGxlcilcclxuICAgICAgdW5tYXNrZWRJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuX3VubWFza2VkSW5wdXRIYW5kbGVyKVxyXG4gICAgICB1bm1hc2tlZElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgdGhpcy5fdW5tYXNrZWRJbnB1dEhhbmRsZXIpXHJcblxyXG4gICAgICAvLyBjb25maWd1cmUgdGhlIHdyYXBwZXJcclxuICAgICAgd3JhcC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ251bWJlcklucHV0TWFza19fd3JhcCcpXHJcbiAgICAgIHdyYXAuYXBwZW5kQ2hpbGQodW5tYXNrZWRJbnB1dClcclxuICAgICAgd3JhcC5hcHBlbmRDaGlsZChhY3R1YWxJbnB1dClcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWlzTmFOKE51bWJlcihhY3R1YWxJbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWQpKSkge1xyXG4gICAgICBpZiAodGhpcy5fdmFsaWRhdGVJbnB1dCh1bm1hc2tlZElucHV0LCBhY3R1YWxJbnB1dCkpIHtcclxuICAgICAgICB0aGlzLl9fZmlyZU9uVXBkYXRlKFxyXG4gICAgICAgICAgYWN0dWFsSW5wdXQudmFsdWUsXHJcbiAgICAgICAgICBhY3R1YWxJbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWQsXHJcbiAgICAgICAgICBhY3R1YWxJbnB1dFxyXG4gICAgICAgIClcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0dWFsSW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gd3JhcFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW53cmFwIHRoZSBtYXNrZWQgaW5wdXQgYW5kIHJlbW92ZSB0aGUgdmFsdWUgY2hhbmdlZCBsaXN0ZW5lclxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtIVE1MU3BhbkVsZW1lbnR9IHdyYXBwZXIgdGhlIHdyYXBwZXIgc3BhbiBpbnN0YW5jZVxyXG4gICAqXHJcbiAgICogQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIF91bndyYXAod3JhcHBlcikge1xyXG4gICAgY29uc3QgYWN0dWFsSW5wdXQgPSB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoJy5udW1iZXJJbnB1dE1hc2tfX3RleHRJbnB1dCcpLFxyXG4gICAgICBhY3R1YWxJbnB1dElkID0gYWN0dWFsSW5wdXQuaWQsXHJcbiAgICAgIHVubWFza2VkSW5wdXQgPSB3cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoYCMke2FjdHVhbElucHV0SWR9LXVubWFza2VkYClcclxuXHJcbiAgICB1bm1hc2tlZElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fdW5tYXNrZWRJbnB1dEhhbmRsZXIpXHJcbiAgICB1bm1hc2tlZElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgdGhpcy5fdW5tYXNrZWRJbnB1dEhhbmRsZXIpXHJcbiAgICB1bm1hc2tlZElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgdGhpcy5fdW5tYXNrZWRJbnB1dEhhbmRsZXIpXHJcblxyXG4gICAgd3JhcHBlci5yZW1vdmVDaGlsZCh1bm1hc2tlZElucHV0KVxyXG5cclxuICAgIGFjdHVhbElucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fYWN0dWFsSW5wdXRIYW5kbGVyKVxyXG4gICAgYWN0dWFsSW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIHRoaXMuX2FjdHVhbElucHV0SGFuZGxlcilcclxuICAgIGFjdHVhbElucHV0LmNsYXNzTGlzdC5yZW1vdmUoJ251bWJlcklucHV0TWFza19fdGV4dElucHV0JylcclxuICAgIGFjdHVhbElucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzRXJyb3IpXHJcbiAgICBhY3R1YWxJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMub3B0aW9ucy5jc3NDbGFzc1N1Y2Nlc3MpXHJcbiAgICBkZWxldGUgYWN0dWFsSW5wdXQuZGF0YXNldC52YWx1ZVVubWFza2VkXHJcblxyXG4gICAgd3JhcHBlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhY3R1YWxJbnB1dCwgd3JhcHBlcilcclxuICAgIHdyYXBwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwcGVyKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdGVuIHRvIGNsaWNrIGFuZCBmb2N1c2luIGV2ZW50IG9uIHRoZSBhY3R1YWwgaW5wdXQgYW5kIHRvZ2dsZSB0aGUgbnVtYmVyIGlucHV0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0V2ZW50fSBlXHJcbiAgICpcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgX2FjdHVhbElucHV0SGFuZGxlcihlKSB7XHJcbiAgICBjb25zdCBhY3R1YWxJbnB1dCA9IGUudGFyZ2V0LFxyXG4gICAgICBhY3R1YWxJbnB1dElkID0gYWN0dWFsSW5wdXQuaWQsXHJcbiAgICAgIHVubWFza2VkSW5wdXQgPSB0aGlzLm9wdGlvbnMuZG9jLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgYCMke2FjdHVhbElucHV0SWR9LXVubWFza2VkYFxyXG4gICAgICApXHJcblxyXG4gICAgYWN0dWFsSW5wdXQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJylcclxuICAgIGFjdHVhbElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdoaWRkZW4nKVxyXG5cclxuICAgIHVubWFza2VkSW5wdXQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpXHJcbiAgICB1bm1hc2tlZElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdudW1iZXInKVxyXG4gICAgdGhpcy5fdmFsaWRhdGVJbnB1dCh1bm1hc2tlZElucHV0LCBhY3R1YWxJbnB1dClcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB1bm1hc2tlZElucHV0LmZvY3VzKClcclxuICAgICAgY29uc3QgbGVuZ3RoID0gU3RyaW5nKHVubWFza2VkSW5wdXQudmFsdWUpLmxlbmd0aFxyXG4gICAgICB1bm1hc2tlZElucHV0LnR5cGUgPSAndGV4dCdcclxuICAgICAgdW5tYXNrZWRJbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShsZW5ndGgsIGxlbmd0aClcclxuICAgICAgdW5tYXNrZWRJbnB1dC50eXBlID0gJ251bWJlcidcclxuICAgIH0sIDApXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaXN0ZW4gdG8gdGhlIHVubWFza2VkIGlucHV0IGtleWRvd24gYW5kIGZvY3Vzb3V0IGV2ZW50cyBhbmQgY2hlY2tcclxuICAgKiBpZiB0aGUgaW5wdXQgdmFsdWUgY2FuIGJlIG1hc2tlZCBvciBub3RcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcclxuICAgKlxyXG4gICAqIEBwcm90ZWN0ZWRcclxuICAgKi9cclxuICBfdW5tYXNrZWRJbnB1dEhhbmRsZXIoZSkge1xyXG4gICAgY29uc3QgdW5tYXNrZWRJbnB1dCA9IGUudGFyZ2V0LFxyXG4gICAgICBrZXlDb2RlID0gZS5rZXlDb2RlLFxyXG4gICAgICBtYXNrID0gdW5tYXNrZWRJbnB1dC5kYXRhc2V0Lm1hc2ssXHJcbiAgICAgIGdyb3VwaW5nU2VwYXJhdG9yID0gdW5tYXNrZWRJbnB1dC5kYXRhc2V0Lmdyb3VwaW5nU2VwYXJhdG9yLFxyXG4gICAgICBkZWNpbWFsU2VwYXJhdG9yID0gdW5tYXNrZWRJbnB1dC5kYXRhc2V0LmRlY2ltYWxTZXBhcmF0b3IsXHJcbiAgICAgIGZvcmNlVHJhaWxpbmdaZXJvcyA9IHVubWFza2VkSW5wdXQuZGF0YXNldC5mb3JjZVRyYWlsaW5nWmVyb3MsXHJcbiAgICAgIGFjdHVhbElucHV0SWQgPSB1bm1hc2tlZElucHV0LmRhdGFzZXQuaW5wdXRJZCxcclxuICAgICAgYWN0dWFsSW5wdXQgPSB0aGlzLm9wdGlvbnMuZG9jLnF1ZXJ5U2VsZWN0b3IoYCMke2FjdHVhbElucHV0SWR9YClcclxuXHJcbiAgICBsZXQgcmVzdG9yZSA9IGZhbHNlLFxyXG4gICAgICBhcHBseSA9IGZhbHNlLFxyXG4gICAgICBtYXNrZWRWYWx1ZSA9IGZhbHNlLFxyXG4gICAgICBpc1ZhbGlkID0gdGhpcy5fdmFsaWRhdGVJbnB1dCh1bm1hc2tlZElucHV0LCBhY3R1YWxJbnB1dClcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBtYXNrZWRWYWx1ZSA9IE51bWJlck1hc2subWFzayhcclxuICAgICAgICB1bm1hc2tlZElucHV0LnZhbHVlIHx8IDAsXHJcbiAgICAgICAgbWFzayxcclxuICAgICAgICBncm91cGluZ1NlcGFyYXRvcixcclxuICAgICAgICBkZWNpbWFsU2VwYXJhdG9yLFxyXG4gICAgICAgIGZvcmNlVHJhaWxpbmdaZXJvcyxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApLnRyaW0oKVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBtYXNrZWRWYWx1ZSA9IGZhbHNlXHJcbiAgICAgIHRoaXMuX19hcHBseUNzc0NsYXNzU3RhdGUodW5tYXNrZWRJbnB1dCwgYWN0dWFsSW5wdXQsICdlcnJvcicpXHJcbiAgICAgIHRoaXMuX19maXJlT25JbnZhbGlkKGUsIGFjdHVhbElucHV0KVxyXG4gICAgfVxyXG5cclxuICAgIHJlc3RvcmUgPSBbMTMsIDI3XS5pbmRleE9mKGtleUNvZGUpID4gLTEgfHwgZS50eXBlID09PSAnZm9jdXNvdXQnXHJcbiAgICBhcHBseSA9IG1hc2tlZFZhbHVlICYmIGlzVmFsaWRcclxuXHJcbiAgICBpZiAocmVzdG9yZSkge1xyXG4gICAgICB1bm1hc2tlZElucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzRXJyb3IpXHJcbiAgICAgIHVubWFza2VkSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NTdWNjZXNzKVxyXG5cclxuICAgICAgdW5tYXNrZWRJbnB1dC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxyXG4gICAgICB1bm1hc2tlZElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICdoaWRkZW4nKVxyXG5cclxuICAgICAgYWN0dWFsSW5wdXQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpXHJcbiAgICAgIGFjdHVhbElucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0JylcclxuXHJcbiAgICAgIGFjdHVhbElucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2VzcylcclxuXHJcbiAgICAgIGlmIChhcHBseSkge1xyXG4gICAgICAgIGFjdHVhbElucHV0LnZhbHVlID0gbWFza2VkVmFsdWVcclxuICAgICAgICBhY3R1YWxJbnB1dC5kYXRhc2V0LnZhbHVlVW5tYXNrZWQgPSB1bm1hc2tlZElucHV0LnZhbHVlXHJcbiAgICAgICAgdGhpcy5fX2ZpcmVPblVwZGF0ZShtYXNrZWRWYWx1ZSwgdW5tYXNrZWRJbnB1dC52YWx1ZSwgYWN0dWFsSW5wdXQpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdW5tYXNrZWRJbnB1dC52YWx1ZSA9IGFjdHVhbElucHV0LmRhdGFzZXQudmFsdWVVbm1hc2tlZFxyXG4gICAgICAgIHRoaXMuX19hcHBseUNzc0NsYXNzU3RhdGUodW5tYXNrZWRJbnB1dCwgYWN0dWFsSW5wdXQsICdzdWNjZXNzJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVHJpZ2dlciBgY2hlY2tWYWxpZGl0eWAgb24gdGhlIGlucHV0XHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IHVubWFza2VkSW5wdXRcclxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGFjdHVhbElucHV0XHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSB3aGVuIHZhbGlkICwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICpcclxuICAgKiBAcHJvdGVjdGVkXHJcbiAgICovXHJcbiAgX3ZhbGlkYXRlSW5wdXQodW5tYXNrZWRJbnB1dCwgYWN0dWFsSW5wdXQpIHtcclxuICAgIGxldCBpc1ZhbGlkID0gdHJ1ZVxyXG4gICAgY29uc3QgdmFsdWUgPSBOdW1iZXIodW5tYXNrZWRJbnB1dC52YWx1ZSlcclxuICAgIGlmICh1bm1hc2tlZElucHV0LmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnaGlkZGVuJyAmJiAhaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgIGNvbnN0IG1heCA9IHVubWFza2VkSW5wdXQuZ2V0QXR0cmlidXRlKCdtYXgnKVxyXG4gICAgICBjb25zdCBtaW4gPSB1bm1hc2tlZElucHV0LmdldEF0dHJpYnV0ZSgnbWluJylcclxuICAgICAgY29uc3Qgc3RlcCA9IHVubWFza2VkSW5wdXQuZ2V0QXR0cmlidXRlKCdzdGVwJylcclxuXHJcbiAgICAgIGlmIChtaW4pIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbHVlID49IE51bWJlcihtaW4pXHJcbiAgICAgIGlmIChtYXgpIGlzVmFsaWQgPSBpc1ZhbGlkICYmIHZhbHVlIDw9IE51bWJlcihtYXgpXHJcblxyXG4gICAgICBpZiAoc3RlcClcclxuICAgICAgICBpc1ZhbGlkID1cclxuICAgICAgICAgIGlzVmFsaWQgJiYgY291bnREZWNpbWFscyhzdGVwKSA9PT0gY291bnREZWNpbWFscyh1bm1hc2tlZElucHV0LnZhbHVlKVxyXG4gICAgfSBlbHNlIGlzVmFsaWQgPSB1bm1hc2tlZElucHV0LmNoZWNrVmFsaWRpdHkoKVxyXG5cclxuICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgIHRoaXMuX19hcHBseUNzc0NsYXNzU3RhdGUodW5tYXNrZWRJbnB1dCwgYWN0dWFsSW5wdXQsICdzdWNjZXNzJylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX19hcHBseUNzc0NsYXNzU3RhdGUodW5tYXNrZWRJbnB1dCwgYWN0dWFsSW5wdXQsICdlcnJvcicpXHJcbiAgICAgIHRoaXMuX19maXJlT25JbnZhbGlkKFxyXG4gICAgICAgIHVubWFza2VkSW5wdXQudmFsaWRhdGlvbk1lc3NhZ2UgfHwgJ1ZhbGlkaXR5IGNoZWNrIGZhaWxzJyxcclxuICAgICAgICBhY3R1YWxJbnB1dFxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzVmFsaWRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZU1hc2tlZCAgbWFza2VkIHZhbHVlXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlVW5tYXNrZWQgIG9yaWdpbmFsIHZhbHVlXHJcbiAgICogQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fSBpbnB1dCB0aGUgYWN0dWFsIGlucHV0IGluc3RhbmNlXHJcbiAgICpcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIF9fZmlyZU9uVXBkYXRlKHZhbHVlTWFza2VkLCB2YWx1ZVVubWFza2VkLCBpbnB1dCkge1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5vblVwZGF0ZSkge1xyXG4gICAgICB0aGlzLm9wdGlvbnMub25VcGRhdGUodmFsdWVNYXNrZWQsIHZhbHVlVW5tYXNrZWQsIGlucHV0KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBlcnJvciBsYXN0IG9jY3VycmVkIGVycm9yLiBjb3VsZCBiZSBtYXNrIGVycm9yIG9yIHZhbGlkYXRpb24gZXJyb3JcclxuICAgKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR9IGlucHV0IHRoZSBhY3R1YWwgaW5wdXQgaW5zdGFuY2VcclxuICAgKlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgX19maXJlT25JbnZhbGlkKGVycm9yLCBpbnB1dCkge1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5vbkludmFsaWQpIHtcclxuICAgICAgdGhpcy5vcHRpb25zLm9uSW52YWxpZChlcnJvciwgaW5wdXQpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIF9fYXBwbHlDc3NDbGFzc1N0YXRlKHVubWFza2VkSW5wdXQsIGFjdHVhbElucHV0LCBzdGF0ZSkge1xyXG4gICAgaWYgKFxyXG4gICAgICBhY3R1YWxJbnB1dC5oYXNBdHRyaWJ1dGUoJ3JlYWRvbmx5JykgfHxcclxuICAgICAgYWN0dWFsSW5wdXQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXHJcbiAgICApIHtcclxuICAgICAgYWN0dWFsSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgICAgYWN0dWFsSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NTdWNjZXNzKVxyXG5cclxuICAgICAgdW5tYXNrZWRJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMub3B0aW9ucy5jc3NDbGFzc0Vycm9yKVxyXG4gICAgICB1bm1hc2tlZElucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2VzcylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChzdGF0ZSA9PT0gJ3N1Y2Nlc3MnKSB7XHJcbiAgICAgICAgYWN0dWFsSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgICAgICBhY3R1YWxJbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMub3B0aW9ucy5jc3NDbGFzc1N1Y2Nlc3MpXHJcblxyXG4gICAgICAgIHVubWFza2VkSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgICAgICB1bm1hc2tlZElucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2VzcylcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHN0YXRlID09PSAnZXJyb3InKSB7XHJcbiAgICAgICAgYWN0dWFsSW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgICAgICBhY3R1YWxJbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMub3B0aW9ucy5jc3NDbGFzc1N1Y2Nlc3MpXHJcblxyXG4gICAgICAgIHVubWFza2VkSW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLm9wdGlvbnMuY3NzQ2xhc3NFcnJvcilcclxuICAgICAgICB1bm1hc2tlZElucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5vcHRpb25zLmNzc0NsYXNzU3VjY2VzcylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTnVtYmVySW5wdXRcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL051bWJlcklucHV0L051bWJlcklucHV0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzdfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwiYmJqLW1hc2tzL3NyYy9OdW1iZXJNYXNrXCIsXCJjb21tb25qczJcIjpcImJiai1tYXNrcy9zcmMvTnVtYmVyTWFza1wiLFwiYW1kXCI6XCJiYmotbWFza3Mvc3JjL051bWJlck1hc2tcIixcInJvb3RcIjpbXCJCQmpcIixcIk1hc2tzXCIsXCJOdW1iZXJNYXNrXCJdfVxuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XHJcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxyXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXHJcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xyXG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxyXG5cdFx0ZXhwb3J0c1tcIk1hc2tzXCJdID0gZmFjdG9yeSgpO1xyXG5cdGVsc2VcclxuXHRcdHJvb3RbXCJCQmpcIl0gPSByb290W1wiQkJqXCJdIHx8IHt9LCByb290W1wiQkJqXCJdW1wiTWFza3NcIl0gPSBmYWN0b3J5KCk7XHJcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHtcclxucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcclxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXHJcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxyXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxyXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xyXG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0bDogZmFsc2UsXHJcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXHJcbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcclxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXHJcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqL1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXHJcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XHJcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XHJcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XHJcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcclxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXHJcbi8qKioqKiovIFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdH07XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcclxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcclxuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xyXG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxyXG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xyXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcclxuLyoqKioqKi8gXHR9O1xyXG4vKioqKioqL1xyXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcclxuLyoqKioqKi9cclxuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xyXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XHJcbi8qKioqKiovXHJcbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXHJcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNSk7XHJcbi8qKioqKiovIH0pXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKioqKiovIChbXHJcbi8qIDAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gdG9JbnRlZ2VyO1xyXG5mdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcclxuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gTmFOO1xyXG4gIH1cclxuXHJcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XHJcblxyXG4gIGlmIChpc05hTihudW1iZXIpKSB7XHJcbiAgICByZXR1cm4gbnVtYmVyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcclxufVxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDEgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX051bWJlck1hc2tfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XHJcbi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJiai1tYXNrcyBsaWIuXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX051bWJlck1hc2tfX1tcImFcIiAvKiBkZWZhdWx0ICovXSk7XHJcblxyXG4vKioqLyB9KSxcclxuLyogMiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fRGF0ZU1hc2tfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XHJcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0RhdGVNYXNrX19bXCJlXCJdOyB9KTtcclxuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZ1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fRGF0ZU1hc2tfX1tcImdcIl07IH0pO1xyXG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJoXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19EYXRlTWFza19fW1wiaFwiXTsgfSk7XHJcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0RhdGVNYXNrX19bXCJhXCJdOyB9KTtcclxuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fRGF0ZU1hc2tfX1tcImJcIl07IH0pO1xyXG4vKiBoYXJtb255IHJlZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJkXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19EYXRlTWFza19fW1wiZFwiXTsgfSk7XHJcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImZcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0RhdGVNYXNrX19bXCJmXCJdOyB9KTtcclxuLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmJqLW1hc2tzIGxpYi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiY1wiXSA9IChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX0RhdGVNYXNrX19bXCJjXCIgLyogZGVmYXVsdCAqL10pO1xyXG5cclxuLyoqKi8gfSksXHJcbi8qIDMgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gdHpQYXJzZVRpbWV6b25lO1xyXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX190elRva2VuaXplRGF0ZV9pbmRleF9qc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcclxuXHJcblxyXG52YXIgTUlMTElTRUNPTkRTX0lOX0hPVVIgPSAzNjAwMDAwXHJcbnZhciBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFID0gNjAwMDBcclxuXHJcbnZhciBwYXR0ZXJucyA9IHtcclxuICB0aW1lem9uZTogLyhbWistXS4qKSQvLFxyXG4gIHRpbWV6b25lWjogL14oWikkLyxcclxuICB0aW1lem9uZUhIOiAvXihbKy1dKShcXGR7Mn0pJC8sXHJcbiAgdGltZXpvbmVISE1NOiAvXihbKy1dKShcXGR7Mn0pOj8oXFxkezJ9KSQvLFxyXG4gIHRpbWV6b25lSUFOQTogLyhVVEN8KD86W2EtekEtWl0rXFwvW2EtekEtWl9dKyg/OlxcL1thLXpBLVpfXSspPykpJC9cclxufVxyXG5cclxuLy8gUGFyc2UgdmFyaW91cyB0aW1lIHpvbmUgb2Zmc2V0IGZvcm1hdHMgdG8gYW4gb2Zmc2V0IGluIG1pbGxpc2Vjb25kc1xyXG5mdW5jdGlvbiB0elBhcnNlVGltZXpvbmUodGltZXpvbmVTdHJpbmcsIGRhdGUpIHtcclxuICB2YXIgdG9rZW5cclxuICB2YXIgYWJzb2x1dGVPZmZzZXRcclxuXHJcbiAgLy8gWlxyXG4gIHRva2VuID0gcGF0dGVybnMudGltZXpvbmVaLmV4ZWModGltZXpvbmVTdHJpbmcpXHJcbiAgaWYgKHRva2VuKSB7XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuXHJcbiAgdmFyIGhvdXJzXHJcblxyXG4gIC8vIMKxaGhcclxuICB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lSEguZXhlYyh0aW1lem9uZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIGhvdXJzID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVUaW1lem9uZShob3VycykpIHtcclxuICAgICAgcmV0dXJuIE5hTlxyXG4gICAgfVxyXG5cclxuICAgIGFic29sdXRlT2Zmc2V0ID0gaG91cnMgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUlxyXG4gICAgcmV0dXJuIHRva2VuWzFdID09PSAnKycgPyAtYWJzb2x1dGVPZmZzZXQgOiBhYnNvbHV0ZU9mZnNldFxyXG4gIH1cclxuXHJcbiAgLy8gwrFoaDptbSBvciDCsWhobW1cclxuICB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lSEhNTS5leGVjKHRpbWV6b25lU3RyaW5nKVxyXG4gIGlmICh0b2tlbikge1xyXG4gICAgaG91cnMgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXHJcbiAgICB2YXIgbWludXRlcyA9IHBhcnNlSW50KHRva2VuWzNdLCAxMClcclxuXHJcbiAgICBpZiAoIXZhbGlkYXRlVGltZXpvbmUoaG91cnMsIG1pbnV0ZXMpKSB7XHJcbiAgICAgIHJldHVybiBOYU5cclxuICAgIH1cclxuXHJcbiAgICBhYnNvbHV0ZU9mZnNldCA9XHJcbiAgICAgIGhvdXJzICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURVxyXG4gICAgcmV0dXJuIHRva2VuWzFdID09PSAnKycgPyAtYWJzb2x1dGVPZmZzZXQgOiBhYnNvbHV0ZU9mZnNldFxyXG4gIH1cclxuXHJcbiAgLy8gSUFOQSB0aW1lIHpvbmVcclxuICB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lSUFOQS5leGVjKHRpbWV6b25lU3RyaW5nKVxyXG4gIGlmICh0b2tlbikge1xyXG4gICAgLy8gdmFyIFtmWWVhciwgZk1vbnRoLCBmRGF5LCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF0gPSB0elRva2VuaXplRGF0ZShkYXRlLCB0aW1lem9uZVN0cmluZylcclxuICAgIHZhciB0b2tlbnMgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX190elRva2VuaXplRGF0ZV9pbmRleF9qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShkYXRlLCB0aW1lem9uZVN0cmluZylcclxuICAgIHZhciBhc1VUQyA9IERhdGUuVVRDKFxyXG4gICAgICB0b2tlbnNbMF0sXHJcbiAgICAgIHRva2Vuc1sxXSAtIDEsXHJcbiAgICAgIHRva2Vuc1syXSxcclxuICAgICAgdG9rZW5zWzNdLFxyXG4gICAgICB0b2tlbnNbNF0sXHJcbiAgICAgIHRva2Vuc1s1XVxyXG4gICAgKVxyXG4gICAgdmFyIHRpbWVzdGFtcFdpdGhNc1plcm9lZCA9IGRhdGUuZ2V0VGltZSgpIC0gKGRhdGUuZ2V0VGltZSgpICUgMTAwMClcclxuICAgIHJldHVybiAtKGFzVVRDIC0gdGltZXN0YW1wV2l0aE1zWmVyb2VkKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIDBcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lem9uZShob3VycywgbWludXRlcykge1xyXG4gIGlmIChtaW51dGVzICE9IG51bGwgJiYgKG1pbnV0ZXMgPCAwIHx8IG1pbnV0ZXMgPiA1OSkpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWVcclxufVxyXG5cclxuXHJcbi8qKiovIH0pLFxyXG4vKiA0ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19TdHJpbmdNYXNrX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcclxuLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmJqLW1hc2tzIGxpYi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fU3RyaW5nTWFza19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA1ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJVdGlsc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFV0aWxzOyB9KTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fTnVtYmVyTWFza19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fRGF0ZU1hc2tfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1N0cmluZ01hc2tfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1R5cGVzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcclxuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVHlwZXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1R5cGVzX19bXCJhXCJdOyB9KTtcclxuLyogaGFybW9ueSByZWV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTnVtYmVyTWFza1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fTnVtYmVyTWFza19fW1wiYVwiXTsgfSk7XHJcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRhdGVNYXNrXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19EYXRlTWFza19fW1wiY1wiXTsgfSk7XHJcbi8qIGhhcm1vbnkgcmVleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlN0cmluZ01hc2tcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1N0cmluZ01hc2tfX1tcImFcIl07IH0pO1xyXG4vKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYmotbWFza3MgbGliLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcblxyXG5cclxuXHJcbnZhciBVdGlscyA9IHtcclxuICBEYXRlczoge1xyXG4gICAgZ2V0RGF5T2ZZZWFyOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0RhdGVNYXNrX19bXCJlXCIgLyogZ2V0RGF5T2ZZZWFyICovXSxcclxuICAgIGdldFdlZWtOdW1iZXI6IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fRGF0ZU1hc2tfX1tcImdcIiAvKiBnZXRXZWVrTnVtYmVyICovXSxcclxuICAgIGdldFdlZWtTdGFydEJ5TG9jYWxlOiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0RhdGVNYXNrX19bXCJoXCIgLyogZ2V0V2Vla1N0YXJ0QnlMb2NhbGUgKi9dLFxyXG4gICAgSVNfREFURV9SRUdFWDogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19EYXRlTWFza19fW1wiYVwiIC8qIElTX0RBVEVfUkVHRVggKi9dLFxyXG4gICAgSVNfVElNRV9SRUdFWDogX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19EYXRlTWFza19fW1wiYlwiIC8qIElTX1RJTUVfUkVHRVggKi9dLFxyXG4gICAgZml4U2hvcnRJU086IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fRGF0ZU1hc2tfX1tcImRcIiAvKiBmaXhTaG9ydElTTyAqL10sXHJcbiAgICBnZXRUaW1lem9uZU9yT2Zmc2V0OiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0RhdGVNYXNrX19bXCJmXCIgLyogZ2V0VGltZXpvbmVPck9mZnNldCAqL11cclxuICB9XHJcbn07XHJcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImRlZmF1bHRcIl0gPSAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19UeXBlc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKTtcclxuXHJcblxyXG4vKioqLyB9KSxcclxuLyogNiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XHJcblxyXG4vKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYmotbWFza3MgbGliLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBOdW1iZXJNYXNrXHJcbiAqXHJcbiAqIEEgamF2YXNjcmlwdCBpbXBsZW1lbnRhdGlvbiBmb3IgQkJqIG51bWJlcnMgbWFza2luZ1xyXG4gKlxyXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxyXG4gKi9cclxudmFyIE51bWJlck1hc2sgPVxyXG4vKiNfX1BVUkVfXyovXHJcbmZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBOdW1iZXJNYXNrKCkge1xyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE51bWJlck1hc2spO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZUNsYXNzKE51bWJlck1hc2ssIG51bGwsIFt7XHJcbiAgICBrZXk6IFwibWFza1wiLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFzayB0aGUgZ2l2ZW4gbnVtYmVyIHdpdGggdGhlIGdpdmVuIG1hc2sgYWNjb3JkaW5nIHRvIEJCaiBydWxlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXIgdGhlIG51bWJlciB0byBmb3JtYXRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtYXNrIHRoZSBtYXNrIHRvIHVzZSBmb3IgZm9ybWF0dGluZ1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtncm91cGluZ1NlcGFyYXRvcj0sXSAtIGEgY2hhciB3aGljaCB3aWxsIGJlIHVzZWQgYXMgYSBncm91cGluZyBzZXBhcmF0b3JcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbZGVjaW1hbFNlcGFyYXRvcj0uXSAgLSBhIGNoYXIgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGEgZGVjaW1hbCBzZXBhcmF0b3JcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ZvcmNlVHJhaWxpbmdaZXJvcz1mYWxzZV0gLSBBZmZlY3RzIHRoZSBvdXRwdXQgYnkgc3dpdGNoaW5nIHRoZSB3YXkgYSBtYXNrIHdpdGggXCIjXCIgY2hhcmFjdGVycyBpbiB0aGUgdHJhaWxpbmcgcG9zaXRpb25zIGlzIGZpbGxlZC5cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBleGFtcGxlLCB0aGUgZnVuY3Rpb24gYE51bWJlck1hc2subWFzayguMTA6XCIjLiMjXCIpYCByZXR1cm5zIGAgLjEwYCBpbnN0ZWFkIG9mIGAgLjEgYFxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbbG9vc2U9dHJ1ZV0gd2hlbiB0cnVlICwgZXJyb3JzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIG1ldGhvZCB3aWxsIHRyeSBhdCBhcHBseSB0aGUgbWFza1xyXG4gICAgICogICAgICAgICAgICAgICAgYW55d2F5ICwgb3RoZXJ3aXNlIGl0IHdpbGwgc3RvcCBhdCBmaXJzdCBlcnJvciBhbmQgdGhyb3cgaXQuXHJcbiAgICAgKiBcclxuICAgICAqIEB0aHJvd3Mge01hc2tFcnJvcn0gb25seSBpZiBsb29zZSBpcyBkaXNhYmxlZFxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgbWFza2VkIG51bWJlclxyXG4gICAgICovXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFzayhudW1iZXIsIF9tYXNrKSB7XHJcbiAgICAgIHZhciBncm91cGluZ1NlcGFyYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJywnO1xyXG4gICAgICB2YXIgZGVjaW1hbFNlcGFyYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogJy4nO1xyXG4gICAgICB2YXIgZm9yY2VUcmFpbGluZ1plcm9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTtcclxuICAgICAgdmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB0cnVlO1xyXG4gICAgICB2YXIgbWFza0xlbiA9IF9tYXNrLmxlbmd0aDtcclxuXHJcbiAgICAgIGlmICgwID09PSBtYXNrTGVuKSB7XHJcbiAgICAgICAgaWYgKGxvb3NlKSByZXR1cm4gc3RyOyAvLyBmcmllbmRseSBzaWxlbnQgZmFpbFxyXG4gICAgICAgIGVsc2UgdGhyb3cge1xyXG4gICAgICAgICAgICBuYW1lOiAnTWFza0Vycm9yJyxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJNYXNrRXJyb3I6IE1hc2sgaXMgZW1wdHlcIlxyXG4gICAgICAgICAgfTtcclxuICAgICAgfSAvLyBHZXQgbWFnbml0dWRlIGFuZCBwcmVjaXNpb24gb2YgTUFTS1xyXG5cclxuXHJcbiAgICAgIHZhciBtYXNrQmVmb3JlRGVjaW1hbCA9IDA7XHJcbiAgICAgIHZhciBtYXNrQWZ0ZXJEZWNpbWFsID0gMDtcclxuICAgICAgdmFyIGZvdW5kRGVjaW1hbCA9IGZhbHNlO1xyXG5cclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXNrTGVuOyArK2kpIHtcclxuICAgICAgICB2YXIgbSA9IF9tYXNrLmNoYXJBdChpKTtcclxuXHJcbiAgICAgICAgaWYgKG0gPT0gJzAnIHx8IG0gPT0gJyMnKSB7XHJcbiAgICAgICAgICBpZiAoZm91bmREZWNpbWFsKSArK21hc2tBZnRlckRlY2ltYWw7ZWxzZSArK21hc2tCZWZvcmVEZWNpbWFsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobSA9PSAnLicpIGZvdW5kRGVjaW1hbCA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBudW0gPSBOdW1iZXJNYXNrLl9yb3VuZChudW1iZXIsIG1hc2tBZnRlckRlY2ltYWwpO1xyXG5cclxuICAgICAgdmFyIGJ5dGVzID0gTnVtYmVyTWFzay5fdG9DaGFyQXJyYXkobnVtKTsgLy8gR2V0IG1hZ25pdHVkZSBhbmQgcHJlY2lzaW9uIG9mIE5VTUJFUlxyXG5cclxuXHJcbiAgICAgIHZhciBpbkxlbiA9IGJ5dGVzLmxlbmd0aDtcclxuICAgICAgdmFyIG51bUJlZm9yZURlY2ltYWwgPSAwO1xyXG4gICAgICB2YXIgbnVtQWZ0ZXJEZWNpbWFsID0gMDtcclxuICAgICAgZm91bmREZWNpbWFsID0gZmFsc2U7XHJcblxyXG4gICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgaW5MZW47ICsrX2kpIHtcclxuICAgICAgICBpZiAoYnl0ZXNbX2ldID09ICcuJykgZm91bmREZWNpbWFsID0gdHJ1ZTtlbHNlIHtcclxuICAgICAgICAgIGlmIChmb3VuZERlY2ltYWwpICsrbnVtQWZ0ZXJEZWNpbWFsO2Vsc2UgKytudW1CZWZvcmVEZWNpbWFsO1xyXG4gICAgICAgIH1cclxuICAgICAgfSAvLyBhbHdheXMgaWdub3JlIG1hc2sgb3ZlcmZsb3dcclxuXHJcblxyXG4gICAgICBpZiAobnVtQmVmb3JlRGVjaW1hbCA+IG1hc2tCZWZvcmVEZWNpbWFsKSB7XHJcbiAgICAgICAgaWYgKGxvb3NlKSByZXR1cm4gbnVtYmVyLnRvU3RyaW5nKCk7IC8vIGZyaWVuZGx5IHNpbGVudCBmYWlsXHJcbiAgICAgICAgZWxzZSB0aHJvdyB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdNYXNrRXJyb3InLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBcIk1hc2tFcnJvcjogTnVtYmVyIGlzIHRvbyBsYXJnZSBmb3IgbWFza1wiXHJcbiAgICAgICAgICB9O1xyXG4gICAgICB9IC8vIHJvdW5kIGlmIG1hc2sgaXMgZm9yIGEgbG93ZXIgcHJlY2lzaW9uIG51bWJlclxyXG5cclxuXHJcbiAgICAgIGlmIChudW1BZnRlckRlY2ltYWwgPiBtYXNrQWZ0ZXJEZWNpbWFsKSB7XHJcbiAgICAgICAgbnVtID0gTnVtYmVyTWFzay5fcm91bmQobnVtLCBtYXNrQWZ0ZXJEZWNpbWFsKTtcclxuICAgICAgICBieXRlcyA9IE51bWJlck1hc2suX3RvQ2hhckFycmF5KG51bSk7XHJcbiAgICAgICAgaW5MZW4gPSBieXRlcy5sZW5ndGg7IC8vIEdldCBuZXcgbWFnbml0dWRlIGFuZCBwcmVjaXNpb24gb2YgTlVNQkVSXHJcblxyXG4gICAgICAgIG51bUJlZm9yZURlY2ltYWwgPSAwO1xyXG4gICAgICAgIG51bUFmdGVyRGVjaW1hbCA9IDA7XHJcbiAgICAgICAgZm91bmREZWNpbWFsID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGluTGVuOyArK19pMikge1xyXG4gICAgICAgICAgaWYgKGJ5dGVzW19pMl0gPT0gJy4nKSBmb3VuZERlY2ltYWwgPSB0cnVlO2Vsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZm91bmREZWNpbWFsKSArK251bUFmdGVyRGVjaW1hbDtlbHNlICsrbnVtQmVmb3JlRGVjaW1hbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IC8vIGFsd2F5cyBpZ25vcmUgbWFzayBvdmVyZmxvd1xyXG5cclxuXHJcbiAgICAgICAgaWYgKG51bUJlZm9yZURlY2ltYWwgPiBtYXNrQmVmb3JlRGVjaW1hbCkge1xyXG4gICAgICAgICAgaWYgKGxvb3NlKSByZXR1cm4gbnVtYmVyLnRvU3RyaW5nKCk7IC8vIGZyaWVuZGx5IHNpbGVudCBmYWlsXHJcbiAgICAgICAgICBlbHNlIHRocm93IHtcclxuICAgICAgICAgICAgICBuYW1lOiAnTWFza0Vycm9yJyxcclxuICAgICAgICAgICAgICBtZXNzYWdlOiBcIk1hc2tFcnJvcjogTnVtYmVyIGlzIHRvbyBsYXJnZSBmb3IgbWFza1wiXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZmlsbEJ5dGUgPSAnICcsXHJcbiAgICAgICAgICBmbG9hdEJ5dGUgPSAnICc7XHJcbiAgICAgIHZhciBpblBvcyA9IDAsXHJcbiAgICAgICAgICBvdXRQb3MgPSAwLFxyXG4gICAgICAgICAgZmxvYXRQb3MgPSAwO1xyXG4gICAgICBpZiAoX21hc2suY2hhckF0KDApID09ICcqJykgZmlsbEJ5dGUgPSAnKic7XHJcbiAgICAgIHZhciBmaWxsSW5pdCA9IGZpbGxCeXRlO1xyXG4gICAgICB2YXIgaXNOZWdhdGl2ZSA9IE51bWJlck1hc2suX2dldFNpZ24obnVtKSA8IDA7XHJcbiAgICAgIHZhciBlbWl0RGVjaW1hbCA9IGluTGVuID4gMCB8fCBfbWFzay5pbmRleE9mKCcwJykgPj0gMDtcclxuICAgICAgdmFyIGZvdW5kWmVybyA9IGZhbHNlO1xyXG4gICAgICB2YXIgZm91bmREaWdpdCA9IGZhbHNlO1xyXG4gICAgICB2YXIgY3VycmVuY3kgPSBmYWxzZTtcclxuICAgICAgZm91bmREZWNpbWFsID0gZmFsc2U7XHJcbiAgICAgIHZhciByZXQgPSBuZXcgQXJyYXkobWFza0xlbik7XHJcblxyXG4gICAgICBmb3IgKHZhciBtYXNrUG9zID0gMDsgbWFza1BvcyA8IG1hc2tMZW47ICsrbWFza1Bvcykge1xyXG4gICAgICAgIHZhciBfbSA9IF9tYXNrLmNoYXJBdChtYXNrUG9zKTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChfbSkge1xyXG4gICAgICAgICAgY2FzZSAnMCc6XHJcbiAgICAgICAgICAgIC0tbWFza0JlZm9yZURlY2ltYWw7XHJcblxyXG4gICAgICAgICAgICBpZiAobWFza0JlZm9yZURlY2ltYWwgPCBudW1CZWZvcmVEZWNpbWFsICYmIGluUG9zIDwgaW5MZW4pIHtcclxuICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9IGJ5dGVzW2luUG9zXTtcclxuICAgICAgICAgICAgICArK2luUG9zO1xyXG4gICAgICAgICAgICAgIGZvdW5kRGlnaXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldFtvdXRQb3NdID0gJzAnO1xyXG4gICAgICAgICAgICAgIGZvdW5kWmVybyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICsrb3V0UG9zO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICcjJzpcclxuICAgICAgICAgICAgLS1tYXNrQmVmb3JlRGVjaW1hbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChtYXNrQmVmb3JlRGVjaW1hbCA8IG51bUJlZm9yZURlY2ltYWwgJiYgaW5Qb3MgPCBpbkxlbikge1xyXG4gICAgICAgICAgICAgIHJldFtvdXRQb3NdID0gYnl0ZXNbaW5Qb3NdO1xyXG4gICAgICAgICAgICAgICsraW5Qb3M7XHJcbiAgICAgICAgICAgICAgZm91bmREaWdpdCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0W291dFBvc10gPSBmb3VuZERlY2ltYWwgJiYgZm9yY2VUcmFpbGluZ1plcm9zICYmIE51bWJlck1hc2suX2dldFNpZ24obnVtKSAhPSAwID8gJzAnIDogZmlsbEJ5dGU7XHJcbiAgICAgICAgICAgICAgaWYgKCFmb3VuZERlY2ltYWwpIGZsb2F0UG9zID0gbWFza1BvcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJywnOlxyXG4gICAgICAgICAgICBpZiAoZm91bmRaZXJvIHx8IGluUG9zID4gMCkgcmV0W291dFBvc10gPSBncm91cGluZ1NlcGFyYXRvcjtlbHNlIHtcclxuICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9IGZpbGxCeXRlO1xyXG4gICAgICAgICAgICAgIGlmICghZm91bmREZWNpbWFsKSBmbG9hdFBvcyA9IG1hc2tQb3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJy0nOlxyXG4gICAgICAgICAgICBpZiAoIWZvdW5kRGlnaXQgJiYgZmxvYXRCeXRlID09ICcgJykge1xyXG4gICAgICAgICAgICAgIGlmIChpc05lZ2F0aXZlKSBmbG9hdEJ5dGUgPSAnLSc7XHJcbiAgICAgICAgICAgICAgcmV0W291dFBvc10gPSBmaWxsQnl0ZTtcclxuICAgICAgICAgICAgICBmbG9hdFBvcyA9IGZvdW5kRGVjaW1hbCA/IC0xIDogbWFza1BvcztcclxuICAgICAgICAgICAgfSBlbHNlIHJldFtvdXRQb3NdID0gaXNOZWdhdGl2ZSA/ICctJyA6IGZpbGxCeXRlO1xyXG5cclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJysnOlxyXG4gICAgICAgICAgICBpZiAoIWZvdW5kRGlnaXQgJiYgZmxvYXRCeXRlID09ICcgJykge1xyXG4gICAgICAgICAgICAgIGZsb2F0Qnl0ZSA9IGlzTmVnYXRpdmUgPyAnLScgOiAnKyc7XHJcbiAgICAgICAgICAgICAgcmV0W291dFBvc10gPSBmaWxsQnl0ZTtcclxuICAgICAgICAgICAgICBmbG9hdFBvcyA9IGZvdW5kRGVjaW1hbCA/IC0xIDogbWFza1BvcztcclxuICAgICAgICAgICAgfSBlbHNlIHJldFtvdXRQb3NdID0gaXNOZWdhdGl2ZSA/ICctJyA6ICcrJztcclxuXHJcbiAgICAgICAgICAgICsrb3V0UG9zO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICckJzpcclxuICAgICAgICAgICAgaWYgKCFmb3VuZERpZ2l0ICYmIGZsb2F0Qnl0ZSA9PSAnICcpIHtcclxuICAgICAgICAgICAgICBmbG9hdEJ5dGUgPSAnJCc7XHJcbiAgICAgICAgICAgICAgcmV0W291dFBvc10gPSBmaWxsQnl0ZTtcclxuICAgICAgICAgICAgICBmbG9hdFBvcyA9IGZvdW5kRGVjaW1hbCA/IC0xIDogbWFza1BvcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9ICckJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgLy8gY2FzZSAnJic6XHJcbiAgICAgICAgICAvLyAgIGN1cnJlbmN5ID0gdHJ1ZVxyXG4gICAgICAgICAgLy8gICBpZiAoIWZvdW5kRGlnaXQgJiYgZmxvYXRCeXRlID09ICcgJykge1xyXG4gICAgICAgICAgLy8gICAgIGZsb2F0Qnl0ZSA9ICcmJ1xyXG4gICAgICAgICAgLy8gICAgIHJldFtvdXRQb3NdID0gZmlsbEJ5dGVcclxuICAgICAgICAgIC8vICAgICBmbG9hdFBvcyA9IGZvdW5kRGVjaW1hbCA/IC0xIDogbWFza1Bvc1xyXG4gICAgICAgICAgLy8gICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gICAgIHJldFtvdXRQb3NdID0gJyYnXHJcbiAgICAgICAgICAvLyAgIH1cclxuICAgICAgICAgIC8vICAgKytvdXRQb3NcclxuICAgICAgICAgIC8vICAgYnJlYWtcclxuICAgICAgICAgIC8vIGNhc2UgJ0AnOlxyXG4gICAgICAgICAgLy8gICBjdXJyZW5jeSA9IHRydWVcclxuICAgICAgICAgIC8vICAgaWYgKCFmb3VuZERpZ2l0ICYmIGZsb2F0Qnl0ZSA9PSAnICcpIHtcclxuICAgICAgICAgIC8vICAgICBmbG9hdEJ5dGUgPSAnQCdcclxuICAgICAgICAgIC8vICAgICByZXRbb3V0UG9zXSA9IGZpbGxCeXRlXHJcbiAgICAgICAgICAvLyAgICAgZmxvYXRQb3MgPSBmb3VuZERlY2ltYWwgPyAtMSA6IG1hc2tQb3NcclxuICAgICAgICAgIC8vICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vICAgICByZXRbb3V0UG9zXSA9ICdAJ1xyXG4gICAgICAgICAgLy8gICB9XHJcbiAgICAgICAgICAvLyAgICsrb3V0UG9zXHJcbiAgICAgICAgICAvLyAgIGJyZWFrXHJcblxyXG4gICAgICAgICAgY2FzZSAnKCc6XHJcbiAgICAgICAgICAgIGlmICghZm91bmREaWdpdCAmJiBmbG9hdEJ5dGUgPT0gJyAnKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGlzTmVnYXRpdmUpIGZsb2F0Qnl0ZSA9ICcoJztcclxuICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9IGZpbGxCeXRlO1xyXG4gICAgICAgICAgICAgIGZsb2F0UG9zID0gZm91bmREZWNpbWFsID8gLTEgOiBtYXNrUG9zO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGlmIChpc05lZ2F0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9ICcoJztcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0W291dFBvc10gPSBmb3VuZERlY2ltYWwgPyAnICcgOiBmaWxsQnl0ZTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICsrb3V0UG9zO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICcpJzpcclxuICAgICAgICAgICAgaWYgKGlzTmVnYXRpdmUpIHtcclxuICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9ICcpJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9IGZvdW5kRGVjaW1hbCA/ICcgJyA6IGZpbGxCeXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICArK291dFBvcztcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgIGlmIChtYXNrUG9zIDwgbWFza0xlbiAtIDEgJiYgX21hc2suY2hhckF0KG1hc2tQb3MgKyAxKSA9PSAnUicpIHtcclxuICAgICAgICAgICAgICBpZiAoaXNOZWdhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0W291dFBvc10gPSAnQyc7XHJcbiAgICAgICAgICAgICAgICByZXRbb3V0UG9zICsgMV0gPSAnUic7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldFtvdXRQb3NdID0gJyAnO1xyXG4gICAgICAgICAgICAgICAgcmV0W291dFBvcyArIDFdID0gJyAnO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgb3V0UG9zICs9IDI7XHJcbiAgICAgICAgICAgICAgKyttYXNrUG9zO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldFtvdXRQb3NdID0gJ0MnO1xyXG4gICAgICAgICAgICAgICsrb3V0UG9zO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdEJzpcclxuICAgICAgICAgICAgaWYgKG1hc2tQb3MgPCBtYXNrTGVuIC0gMSAmJiBfbWFzay5jaGFyQXQobWFza1BvcyArIDEpID09ICdSJykge1xyXG4gICAgICAgICAgICAgIGlmIChpc05lZ2F0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICByZXRbb3V0UG9zXSA9ICdDJztcclxuICAgICAgICAgICAgICAgIHJldFtvdXRQb3MgKyAxXSA9ICdSJztcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0W291dFBvc10gPSAnRCc7XHJcbiAgICAgICAgICAgICAgICByZXRbb3V0UG9zICsgMV0gPSAnUic7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBvdXRQb3MgKz0gMjtcclxuICAgICAgICAgICAgICArK21hc2tQb3M7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0W291dFBvc10gPSAnRCc7XHJcbiAgICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJyonOlxyXG4gICAgICAgICAgICByZXRbb3V0UG9zXSA9ICcqJztcclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJy4nOlxyXG4gICAgICAgICAgICByZXRbb3V0UG9zXSA9IGVtaXREZWNpbWFsID8gZGVjaW1hbFNlcGFyYXRvciA6IGZpbGxCeXRlO1xyXG4gICAgICAgICAgICBmaWxsQnl0ZSA9ICcgJztcclxuICAgICAgICAgICAgZm91bmREZWNpbWFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgKytpblBvcztcclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0InOlxyXG4gICAgICAgICAgICByZXRbb3V0UG9zXSA9ICcgJztcclxuICAgICAgICAgICAgKytvdXRQb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldFtvdXRQb3NdID0gX207XHJcbiAgICAgICAgICAgICsrb3V0UG9zO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChmbG9hdEJ5dGUgIT0gJyAnKSB7XHJcbiAgICAgICAgaWYgKGZsb2F0UG9zIDwgMCkgZmxvYXRQb3MgPSBvdXRQb3M7XHJcblxyXG4gICAgICAgIHdoaWxlIChmbG9hdFBvcyA+PSBtYXNrTGVuKSB7XHJcbiAgICAgICAgICAtLWZsb2F0UG9zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJldFtmbG9hdFBvc10gPT0gZmlsbEluaXQpIHJldFtmbG9hdFBvc10gPSBmbG9hdEJ5dGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXQuam9pbignJyk7XHJcbiAgICB9XHJcbiAgfSwge1xyXG4gICAga2V5OiBcIl9zaGlmdFwiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zaGlmdChudW1iZXIsIHByZWNpc2lvbiwgcmV2ZXJzZVNoaWZ0KSB7XHJcbiAgICAgIGlmIChyZXZlcnNlU2hpZnQpIHByZWNpc2lvbiA9IC1wcmVjaXNpb247XHJcbiAgICAgIHZhciBudW1BcnJheSA9ICgnJyArIG51bWJlcikuc3BsaXQoJ2UnKTtcclxuICAgICAgcmV0dXJuICsobnVtQXJyYXlbMF0gKyAnZScgKyAobnVtQXJyYXlbMV0gPyArbnVtQXJyYXlbMV0gKyBwcmVjaXNpb24gOiBwcmVjaXNpb24pKTtcclxuICAgIH1cclxuICB9LCB7XHJcbiAgICBrZXk6IFwiX3JvdW5kXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JvdW5kKG51bWJlciwgcHJlY2lzaW9uKSB7XHJcbiAgICAgIHJldHVybiBOdW1iZXJNYXNrLl9zaGlmdChNYXRoLnJvdW5kKE51bWJlck1hc2suX3NoaWZ0KG51bWJlciwgcHJlY2lzaW9uLCBmYWxzZSkpLCBwcmVjaXNpb24sIHRydWUpO1xyXG4gICAgfVxyXG4gIH0sIHtcclxuICAgIGtleTogXCJfdG9DaGFyQXJyYXlcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBfdG9DaGFyQXJyYXkobnVtYmVyKSB7XHJcbiAgICAgIHZhciBzaWdudW0gPSBOdW1iZXJNYXNrLl9nZXRTaWduKG51bWJlcik7XHJcblxyXG4gICAgICB2YXIgY2hhcnMgPSBbXTtcclxuXHJcbiAgICAgIGlmIChzaWdudW0gIT09IDApIHtcclxuICAgICAgICB2YXIgc3RyaW5nID0gc2lnbnVtIDwgMCA/IFwiXCIuY29uY2F0KC0xICogbnVtYmVyLnRvU3RyaW5nKCkpIDogbnVtYmVyLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAxICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJzAnKSBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDEpOyAvLyBUaGUgc3RyaW5nIGNvbnRhaW5zIG9ubHkgWzAtOV0gYW5kICcuJ1xyXG5cclxuICAgICAgICBjaGFycyA9IHN0cmluZy5zcGxpdCgnJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjaGFycztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgc2lnbiBvZiBhIG51bWJlclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IG51bWJlclxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBzaWduIG9mIHRoZSBnaXZlbiBhcmd1bWVudC5cclxuICAgICAqICAgICAgICAgICAgICAgICAgIElmIHRoZSBhcmd1bWVudCBpcyBhIHBvc2l0aXZlIG51bWJlciwgbmVnYXRpdmUgbnVtYmVyLCBwb3NpdGl2ZSB6ZXJvXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICBvciBuZWdhdGl2ZSB6ZXJvLCB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gMSwgLTEsIDAgb3IgLTAgcmVzcGVjdGl2ZWx5LlxyXG4gICAgICogICAgICAgICAgICAgICAgICAgT3RoZXJ3aXNlLCBOYU4gaXMgcmV0dXJuZWQuXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcIl9nZXRTaWduXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFNpZ24oeCkge1xyXG4gICAgICByZXR1cm4gKHggPiAwKSAtICh4IDwgMCkgfHwgK3g7XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gTnVtYmVyTWFzaztcclxufSgpO1xyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChOdW1iZXJNYXNrKTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiA3ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYlwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIElTX1RJTUVfUkVHRVg7IH0pO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIElTX0RBVEVfUkVHRVg7IH0pO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiaFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGdldFdlZWtTdGFydEJ5TG9jYWxlOyB9KTtcclxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBnZXREYXlPZlllYXI7IH0pO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZpeFNob3J0SVNPOyB9KTtcclxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImZcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBnZXRUaW1lem9uZU9yT2Zmc2V0OyB9KTtcclxuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImdcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBnZXRXZWVrTnVtYmVyOyB9KTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9kYXRlX2Zuc190el91dGNUb1pvbmVkVGltZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV93ZWVrc3RhcnRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cclxuXHJcbi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIGJiai1tYXNrcyBsaWIuXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNvbT5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuXHJcbnZhciBJU19USU1FX1JFR0VYID0gL14oMlswLTNdfFswMV1bMC05XSk6PyhbMC01XVswLTldKTo/KFswLTVdWzAtOV0pKFp8WystXSg/OjJbMC0zXXxbMDFdWzAtOV0pKD86Oj8oPzpbMC01XVswLTldKSk/KSQvO1xyXG52YXIgSVNfREFURV9SRUdFWCA9IC9eKChbMTJdXFxkezN9KS0oMFsxLTldfDFbMC0yXSktKDBbMS05XXxbMTJdXFxkfDNbMDFdKShafFsrLV0oPzoyWzAtM118WzAxXVswLTldKSg/Ojo/KD86WzAtNV1bMC05XSkpPykpJC87XHJcbi8qKlxyXG4gKiBGaW5kIG91dCB3aGVuIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgYmFzZWQgb24gdGhlIHBhc3NlZCBsb2NhbGVcclxuICpcclxuICogQHBhcmFtIHtsb2NhbGV9IGxvY2FsZVxyXG4gKlxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGEgbnVtYmVyIDAgPSBzdW5kYXkgLCAxID0gbW9uZGF5ICwgLi4uLlxyXG4gKi9cclxuXHJcbnZhciBnZXRXZWVrU3RhcnRCeUxvY2FsZSA9IGZ1bmN0aW9uIGdldFdlZWtTdGFydEJ5TG9jYWxlKGxvY2FsZSkge1xyXG4gIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX3dlZWtzdGFydF9fW1wiYVwiIC8qIGdldFdlZWtTdGFydEJ5TG9jYWxlICovXSkobG9jYWxlKTtcclxufTtcclxuLyoqXHJcbiAqICBHZXQgZGF5IG51bWJlciBpbiB0aGUgeWVhciBvZiB0aGUgcGFzc2VkIGRhdGVcclxuICpcclxuICogQHBhcmFtIHtEYXRlfSBkYXRlXHJcbiAqXHJcbiAqIEByZXR1cm4ge051bWJlcn0gZGF5IG51bWJlclxyXG4gKi9cclxuXHJcbnZhciBnZXREYXlPZlllYXIgPSBmdW5jdGlvbiBnZXREYXlPZlllYXIoZGF0ZSkge1xyXG4gIHZhciBzdGFydCA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMCk7XHJcbiAgdmFyIGRpZmYgPSBkYXRlIC0gc3RhcnQgKyAoc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiA2MCAqIDEwMDA7XHJcbiAgdmFyIG9uZURheSA9IDEwMDAgKiA2MCAqIDYwICogMjQ7XHJcbiAgdmFyIGRheSA9IE1hdGguZmxvb3IoZGlmZiAvIG9uZURheSk7XHJcbiAgcmV0dXJuIGRheTtcclxufTtcclxuLyoqXHJcbiAqIFRha2VzIGluY29tcGxldGUgaXNvIHN0cmluZyBhbmQgcmV0dXJuIGEgY29tcGxldGUgb25lXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlIGluY29tcGxldGUgaXNvIHN0cmluZ1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGNvbXBsZXRlIGlzbyBzdHJpbmdcclxuICovXHJcblxyXG52YXIgZml4U2hvcnRJU08gPSBmdW5jdGlvbiBmaXhTaG9ydElTTyhkYXRlKSB7XHJcbiAgdmFyIHZhbHVlID0gZGF0ZTtcclxuICB2YXIgb2Zmc2V0ID0gKHZhbHVlLm1hdGNoKC96JHxbK1xcLV1cXGRcXGQ6XFxkXFxkJC9pKSB8fCBbXSlbMF07XHJcblxyXG4gIGlmICghb2Zmc2V0KSB7XHJcbiAgICBvZmZzZXQgPSAnWic7XHJcbiAgICB2YWx1ZSArPSBvZmZzZXQ7XHJcbiAgfVxyXG5cclxuICBpZiAoSVNfVElNRV9SRUdFWC50ZXN0KHZhbHVlKSkge1xyXG4gICAgdmFsdWUgPSBcIjE5NzAtMDEtMDFUXCIuY29uY2F0KHZhbHVlKTtcclxuICB9IGVsc2UgaWYgKElTX0RBVEVfUkVHRVgudGVzdCh2YWx1ZSkpIHtcclxuICAgIHZhbHVlID0gXCJcIi5jb25jYXQodmFsdWUuc3BsaXQob2Zmc2V0KVswXSwgXCJUMDA6MDA6MDBcIikuY29uY2F0KG9mZnNldCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmFsdWU7XHJcbn07XHJcbi8qKlxyXG4gKiBHZXQgdGhlIGJyb3dzZXIgdGltZXpvbmUgbmFtZSAsIGlmIG5vdCBzdXBwb3J0ZWQgdGhlbiB0aGUgYnJvd3NlclxyXG4gKiB0aW1lem9uZSBvZmZzZXQgZm9ybWF0dGVkXHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gdGltZXpvbmUgb2Ygb2Zmc2V0XHJcbiAqL1xyXG5cclxudmFyIGdldFRpbWV6b25lT3JPZmZzZXQgPSBmdW5jdGlvbiBnZXRUaW1lem9uZU9yT2Zmc2V0KCkge1xyXG4gIHZhciB0aW1lem9uZSA9IEludGwuRGF0ZVRpbWVGb3JtYXQoKS5yZXNvbHZlZE9wdGlvbnMoKS50aW1lWm9uZTtcclxuXHJcbiAgaWYgKCF0aW1lem9uZSkge1xyXG4gICAgdmFyIHBhZCA9IGZ1bmN0aW9uIHBhZChudW1iZXIsIGxlbmd0aCkge1xyXG4gICAgICB2YXIgc3RyID0gJycgKyBudW1iZXI7XHJcblxyXG4gICAgICB3aGlsZSAoc3RyLmxlbmd0aCA8IGxlbmd0aCkge1xyXG4gICAgICAgIHN0ciA9ICcwJyArIHN0cjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG9mZnNldCA9IG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcclxuICAgIG9mZnNldCA9IChvZmZzZXQgPCAwID8gJysnIDogJy0nKSArIC8vIE5vdGUgdGhlIHJldmVyc2VkIHNpZ24hXHJcbiAgICBwYWQocGFyc2VJbnQoTWF0aC5hYnMob2Zmc2V0IC8gNjApKSwgMikgKyBwYWQoTWF0aC5hYnMob2Zmc2V0ICUgNjApLCAyKTtcclxuICAgIHJldHVybiBvZmZzZXQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGltZXpvbmU7XHJcbn07XHJcbi8qKlxyXG4gKiBHZXQgdGhlIFdlZWsgTnVtYmVyIGluIHRoZSBwYXNzZWQgZGF0ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgLSBEYXRlIG9iamVjdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gd2Vla1N0YXJ0IEEgbnVtYmVyIHdoaWNoIGRlZmluZXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAgPSBzdW5kYXkgLCAxID0gbW9uZGF5ICwgLi4uKVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgd2VlayBudW1iZXJcclxuICovXHJcblxyXG52YXIgZ2V0V2Vla051bWJlciA9IGZ1bmN0aW9uIGdldFdlZWtOdW1iZXIoZGF0ZSwgd2Vla1N0YXJ0KSB7XHJcbiAgdmFyIGQgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpKTtcclxuICB2YXIgZGF5TnVtID0gZC5nZXRVVENEYXkoKSAtICh3ZWVrU3RhcnQgLSAxKSB8fCA3O1xyXG4gIGQuc2V0VVRDRGF0ZShkLmdldFVUQ0RhdGUoKSArIDQgLSBkYXlOdW0pO1xyXG4gIHZhciB5ZWFyU3RhcnQgPSBuZXcgRGF0ZShEYXRlLlVUQyhkLmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEpKTtcclxuICByZXR1cm4gTWF0aC5jZWlsKCgoZCAtIHllYXJTdGFydCkgLyA4NjQwMDAwMCArIDEpIC8gNyk7XHJcbn07XHJcbi8qKlxyXG4gKiBEYXRlTWFza1xyXG4gKlxyXG4gKiBBIGphdmFzY3JpcHQgaW1wbGVtZW50YXRpb24gZm9yIEJCaiBkYXRlcyBtYXNraW5nXHJcbiAqXHJcbiAqIEBhdXRob3IgSHl5YW4gQWJvIEZha2hlciA8aGFib2Zha2hlckBiYXNpcy5jb20+XHJcbiAqL1xyXG5cclxudmFyIERhdGVNYXNrID1cclxuLyojX19QVVJFX18qL1xyXG5mdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gRGF0ZU1hc2soKSB7XHJcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRGF0ZU1hc2spO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZUNsYXNzKERhdGVNYXNrLCBudWxsLCBbe1xyXG4gICAga2V5OiBcIm1hc2tcIixcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1hc2sgZGF0ZVxyXG4gICAgICpcclxuICAgICAqIE1hc2sgdGhlIHBhc3NlZCBkYXRlIHdpdGggdGhlIHBhc3NlZCBtYXNrXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRhdGUgZGF0ZSBhcyBhIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1hc2sgbWFzayBhcyBhIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtsb2NhbGU9QnJvd3NlcidzIGxvY2FsZV0gdGhlIGxhbmd1YWdlIHRvIHVzZSBleChlbi1VUykuIGRlZmF1bHQgaXMgdG8gdGhlIHN5c3RlbSBsYW5ndWFnZVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFt0aW1lem9uZT1TeXN0ZW0gdGltZXpvbmVdIHRoZSB0aW1lIHpvbmUgZGVzY3JpcHRvciAoZS5nLiBBbWVyaWNhL0xvc19BbmdlbGVzKS4gZGVmYXVsdCB0byB0aGUgc3lzdGVtXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXpvbmVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGEgZGF0ZSBtYXNrZWQgd2l0aCB0aGUgZ2l2ZW4gbWFza1xyXG4gICAgICovXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFzayhkYXRlLCBfbWFzaywgbG9jYWxlLCB0aW1lem9uZSkge1xyXG4gICAgICBpZiAoIWRhdGUpIHJldHVybiAnJztcclxuICAgICAgaWYgKCFfbWFzaykgcmV0dXJuIGRhdGU7XHJcbiAgICAgIHRpbWV6b25lID0gdGltZXpvbmUgfHwgZ2V0VGltZXpvbmVPck9mZnNldCgpO1xyXG4gICAgICBsb2NhbGUgPSBsb2NhbGUgfHwgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLmxvY2FsZSB8fCAnZW4tVVMnOyAvLyBtYWtlIHN1cmUgd2UgaGF2ZSBhIGNvbXBsZXRlIGlzbyBzdHJpbmdcclxuXHJcbiAgICAgIGRhdGUgPSBkYXRlIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGUgOiBmaXhTaG9ydElTTyhkYXRlKTtcclxuICAgICAgdmFyIGRhdGVPYmplY3QgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX2RhdGVfZm5zX3R6X3V0Y1RvWm9uZWRUaW1lX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKGRhdGUsIHRpbWV6b25lKTtcclxuXHJcbiAgICAgIHZhciB0cmFuc2xhdGlvbiA9IERhdGVNYXNrLl9idWlsZFRyYW5zbGF0aW9uKHtcclxuICAgICAgICB5ZWFyOiBkYXRlT2JqZWN0LmdldEZ1bGxZZWFyKCksXHJcbiAgICAgICAgbW9udGg6IGRhdGVPYmplY3QuZ2V0TW9udGgoKSArIDEsXHJcbiAgICAgICAgbW9udGhTaG9ydDogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoW2xvY2FsZV0sIHtcclxuICAgICAgICAgIG1vbnRoOiAnc2hvcnQnXHJcbiAgICAgICAgfSkuZm9ybWF0KGRhdGVPYmplY3QpLFxyXG4gICAgICAgIG1vbnRoTG9uZzogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoW2xvY2FsZV0sIHtcclxuICAgICAgICAgIG1vbnRoOiAnbG9uZydcclxuICAgICAgICB9KS5mb3JtYXQoZGF0ZU9iamVjdCksXHJcbiAgICAgICAgZGF5OiBkYXRlT2JqZWN0LmdldERhdGUoKSxcclxuICAgICAgICBkYXlTaG9ydDogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoW2xvY2FsZV0sIHtcclxuICAgICAgICAgIHdlZWtkYXk6ICdzaG9ydCdcclxuICAgICAgICB9KS5mb3JtYXQoZGF0ZU9iamVjdCksXHJcbiAgICAgICAgZGF5TG9uZzogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoW2xvY2FsZV0sIHtcclxuICAgICAgICAgIHdlZWtkYXk6ICdsb25nJ1xyXG4gICAgICAgIH0pLmZvcm1hdChkYXRlT2JqZWN0KSxcclxuICAgICAgICBtaW51dGVzOiBkYXRlT2JqZWN0LmdldE1pbnV0ZXMoKSxcclxuICAgICAgICBzZWNvbmRzOiBkYXRlT2JqZWN0LmdldFNlY29uZHMoKSxcclxuXHJcbiAgICAgICAgZ2V0IGhvdXJzMjQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gZGF0ZU9iamVjdC5nZXRIb3VycygpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldCBob3VyczEyKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMyNCAlIDEyIHx8IDEyO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRheU9mWWVhcjogZ2V0RGF5T2ZZZWFyKGRhdGVPYmplY3QpLFxyXG4gICAgICAgIGRheU9mV2VlazogZGF0ZU9iamVjdC5nZXREYXkoKSArIDEsXHJcbiAgICAgICAgLy8gU3VuZGF5ID0gMSBpbiBCQmogYnV0IFN1bmRheSA9IDAgaW4gSlNcclxuICAgICAgICB3ZWVrTnVtYmVyOiBnZXRXZWVrTnVtYmVyKGRhdGVPYmplY3QsIGdldFdlZWtTdGFydEJ5TG9jYWxlKGxvY2FsZSkpLFxyXG4gICAgICAgIGxvY2FsZTogbG9jYWxlLFxyXG4gICAgICAgIHRpbWV6b25lOiB0aW1lem9uZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZhciByZXN1bHQgPSBfbWFzaztcclxuXHJcbiAgICAgIGZvciAodmFyIGsgaW4gdHJhbnNsYXRpb24pIHtcclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShuZXcgUmVnRXhwKCcoJScgKyBrICsgJyknLCAnZycpLCB0cmFuc2xhdGlvbltrXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhIG1hcCBvYmplY3Qgd2hpY2ggY29udGFpbnMgYWxsIHBvc3NpYmxlIGZvcm1zIG9mIG1hc2tzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGVEZXRhaWxzIGRhdGVcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGZvcm1zIG1hc2tzXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcIl9idWlsZFRyYW5zbGF0aW9uXCIsXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2J1aWxkVHJhbnNsYXRpb24oZGF0ZURldGFpbHMpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAvLyB5ZWFyXHJcbiAgICAgICAgWXo6IGRhdGVEZXRhaWxzLnllYXIudG9TdHJpbmcoKS5zdWJzdHIoLTIpLFxyXG4gICAgICAgIFlzOiBkYXRlRGV0YWlscy55ZWFyLFxyXG4gICAgICAgIFlsOiBkYXRlRGV0YWlscy55ZWFyLFxyXG4gICAgICAgIFlwOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGVEZXRhaWxzLnllYXIpLFxyXG4gICAgICAgIFlkOiBkYXRlRGV0YWlscy55ZWFyLFxyXG4gICAgICAgIFk6IGRhdGVEZXRhaWxzLnllYXIsXHJcbiAgICAgICAgLy8gbW9udGhcclxuICAgICAgICBNejogU3RyaW5nKGRhdGVEZXRhaWxzLm1vbnRoKS5sZW5ndGggPT0gMSA/ICcwJyArIGRhdGVEZXRhaWxzLm1vbnRoIDogZGF0ZURldGFpbHMubW9udGgsXHJcbiAgICAgICAgTXM6IGRhdGVEZXRhaWxzLm1vbnRoU2hvcnQsXHJcbiAgICAgICAgTWw6IGRhdGVEZXRhaWxzLm1vbnRoTG9uZyxcclxuICAgICAgICBNcDogU3RyaW5nLmZyb21DaGFyQ29kZShkYXRlRGV0YWlscy5tb250aCksXHJcbiAgICAgICAgTWQ6IGRhdGVEZXRhaWxzLm1vbnRoLFxyXG4gICAgICAgIE06IGRhdGVEZXRhaWxzLm1vbnRoLFxyXG4gICAgICAgIC8vIGRheVxyXG4gICAgICAgIER6OiBTdHJpbmcoZGF0ZURldGFpbHMuZGF5KS5sZW5ndGggPT0gMSA/ICcwJyArIGRhdGVEZXRhaWxzLmRheSA6IGRhdGVEZXRhaWxzLmRheSxcclxuICAgICAgICBEczogZGF0ZURldGFpbHMuZGF5U2hvcnQsXHJcbiAgICAgICAgRGw6IGRhdGVEZXRhaWxzLmRheUxvbmcsXHJcbiAgICAgICAgRHA6IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0ZURldGFpbHMuZGF5KSxcclxuICAgICAgICBEZDogZGF0ZURldGFpbHMuZGF5LFxyXG4gICAgICAgIEQ6IGRhdGVEZXRhaWxzLmRheSxcclxuICAgICAgICAvLyBob3VyIDI0XHJcbiAgICAgICAgSHo6IFN0cmluZyhkYXRlRGV0YWlscy5ob3VyczI0KS5sZW5ndGggPT0gMSA/ICcwJyArIGRhdGVEZXRhaWxzLmhvdXJzMjQgOiBkYXRlRGV0YWlscy5ob3VyczI0LFxyXG4gICAgICAgIEhzOiBkYXRlRGV0YWlscy5ob3VyczI0LFxyXG4gICAgICAgIEhsOiBkYXRlRGV0YWlscy5ob3VyczI0LFxyXG4gICAgICAgIEhwOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGVEZXRhaWxzLmhvdXJzMjQpLFxyXG4gICAgICAgIEhkOiBkYXRlRGV0YWlscy5ob3VyczI0LFxyXG4gICAgICAgIEg6IGRhdGVEZXRhaWxzLmhvdXJzMjQsXHJcbiAgICAgICAgLy8gaG91ciAxMlxyXG4gICAgICAgIGh6OiBTdHJpbmcoZGF0ZURldGFpbHMuaG91cnMxMikubGVuZ3RoID09IDEgPyAnMCcgKyBkYXRlRGV0YWlscy5ob3VyczEyIDogZGF0ZURldGFpbHMuaG91cnMxMixcclxuICAgICAgICBoczogZGF0ZURldGFpbHMuaG91cnMxMixcclxuICAgICAgICBobDogZGF0ZURldGFpbHMuaG91cnMxMixcclxuICAgICAgICBocDogU3RyaW5nLmZyb21DaGFyQ29kZShkYXRlRGV0YWlscy5ob3VyczEyKSxcclxuICAgICAgICBoZDogZGF0ZURldGFpbHMuaG91cnMxMixcclxuICAgICAgICBoOiBkYXRlRGV0YWlscy5ob3VyczEyLFxyXG4gICAgICAgIC8vIG1pbnV0ZXNcclxuICAgICAgICBtejogU3RyaW5nKGRhdGVEZXRhaWxzLm1pbnV0ZXMpLmxlbmd0aCA9PSAxID8gJzAnICsgZGF0ZURldGFpbHMubWludXRlcyA6IGRhdGVEZXRhaWxzLm1pbnV0ZXMsXHJcbiAgICAgICAgbXM6IGRhdGVEZXRhaWxzLm1pbnV0ZXMsXHJcbiAgICAgICAgbWw6IGRhdGVEZXRhaWxzLm1pbnV0ZXMsXHJcbiAgICAgICAgbXA6IFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0ZURldGFpbHMubWludXRlcyksXHJcbiAgICAgICAgbWQ6IGRhdGVEZXRhaWxzLm1pbnV0ZXMsXHJcbiAgICAgICAgbTogZGF0ZURldGFpbHMubWludXRlcyxcclxuICAgICAgICAvLyBzZWNvbmRzXHJcbiAgICAgICAgc3o6IFN0cmluZyhkYXRlRGV0YWlscy5zZWNvbmRzKS5sZW5ndGggPT0gMSA/ICcwJyArIGRhdGVEZXRhaWxzLnNlY29uZHMgOiBkYXRlRGV0YWlscy5zZWNvbmRzLFxyXG4gICAgICAgIHNzOiBkYXRlRGV0YWlscy5zZWNvbmRzLFxyXG4gICAgICAgIHNsOiBkYXRlRGV0YWlscy5zZWNvbmRzLFxyXG4gICAgICAgIHNwOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGVEZXRhaWxzLnNlY29uZHMpLFxyXG4gICAgICAgIHNkOiBkYXRlRGV0YWlscy5zZWNvbmRzLFxyXG4gICAgICAgIHM6IGRhdGVEZXRhaWxzLnNlY29uZHMsXHJcbiAgICAgICAgLy8gQU0gLCBQTVxyXG4gICAgICAgIFBQOiBkYXRlRGV0YWlscy5ob3VyczI0ID4gMTIgPyAnUE0nIDogJ1BNJyxcclxuICAgICAgICBQOiBkYXRlRGV0YWlscy5ob3VyczI0ID4gMTIgPyAnUE0nIDogJ0FNJyxcclxuICAgICAgICBwcDogZGF0ZURldGFpbHMuaG91cnMyNCA+IDEyID8gJ3BtJyA6ICdhbScsXHJcbiAgICAgICAgcDogZGF0ZURldGFpbHMuaG91cnMyNCA+IDEyID8gJ3BtJyA6ICdhbScsXHJcbiAgICAgICAgLy8gRGF5IG9mIFllYXJcclxuICAgICAgICBKejogU3RyaW5nKGRhdGVEZXRhaWxzLmRheU9mWWVhcikubGVuZ3RoID09IDEgPyAnMCcgKyBkYXRlRGV0YWlscy5kYXlPZlllYXIgOiBkYXRlRGV0YWlscy5kYXlPZlllYXIsXHJcbiAgICAgICAgSnM6IGRhdGVEZXRhaWxzLmRheU9mWWVhcixcclxuICAgICAgICBKbDogZGF0ZURldGFpbHMuZGF5T2ZZZWFyLFxyXG4gICAgICAgIEpkOiBkYXRlRGV0YWlscy5kYXlPZlllYXIsXHJcbiAgICAgICAgSjogZGF0ZURldGFpbHMuZGF5T2ZZZWFyLFxyXG4gICAgICAgIC8vIERheSBPZiBXZWVrXHJcbiAgICAgICAgV3o6IFN0cmluZyhkYXRlRGV0YWlscy5kYXlPZldlZWspLmxlbmd0aCA9PSAxID8gJzAnICsgZGF0ZURldGFpbHMuZGF5T2ZXZWVrIDogZGF0ZURldGFpbHMuZGF5T2ZXZWVrLFxyXG4gICAgICAgIFdzOiBkYXRlRGV0YWlscy5kYXlPZldlZWssXHJcbiAgICAgICAgV2w6IGRhdGVEZXRhaWxzLmRheU9mV2VlayxcclxuICAgICAgICBXcDogU3RyaW5nLmZyb21DaGFyQ29kZShkYXRlRGV0YWlscy5kYXlPZldlZWspLFxyXG4gICAgICAgIFdkOiBkYXRlRGV0YWlscy5kYXlPZldlZWssXHJcbiAgICAgICAgVzogZGF0ZURldGFpbHMuZGF5T2ZXZWVrLFxyXG4gICAgICAgIC8vIHdlZWsgbnVtYmVyXHJcbiAgICAgICAgd3o6IFN0cmluZyhkYXRlRGV0YWlscy53ZWVrTnVtYmVyKS5sZW5ndGggPT0gMSA/ICcwJyArIGRhdGVEZXRhaWxzLndlZWtOdW1iZXIgOiBkYXRlRGV0YWlscy53ZWVrTnVtYmVyLFxyXG4gICAgICAgIHdzOiBkYXRlRGV0YWlscy53ZWVrTnVtYmVyLFxyXG4gICAgICAgIHdsOiBkYXRlRGV0YWlscy53ZWVrTnVtYmVyLFxyXG4gICAgICAgIHdwOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGVEZXRhaWxzLndlZWtOdW1iZXIpLFxyXG4gICAgICAgIHdkOiBkYXRlRGV0YWlscy53ZWVrTnVtYmVyLFxyXG4gICAgICAgIHc6IGRhdGVEZXRhaWxzLndlZWtOdW1iZXJcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBEYXRlTWFzaztcclxufSgpO1xyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiY1wiXSA9IChEYXRlTWFzayk7XHJcblxyXG4vKioqLyB9KSxcclxuLyogOCAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSB1dGNUb1pvbmVkVGltZTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGliX3R6UGFyc2VUaW1lem9uZV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9kYXRlX2Zuc19lc21fc3ViTWlsbGlzZWNvbmRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdG9EYXRlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSB1dGNUb1pvbmVkVGltZVxyXG4gKiBAY2F0ZWdvcnkgVGltZSBab25lIEhlbHBlcnNcclxuICogQHN1bW1hcnkgR2V0IGEgZGF0ZS90aW1lIHJlcHJlc2VudGluZyBsb2NhbCB0aW1lIGluIGEgZ2l2ZW4gdGltZSB6b25lIGZyb20gdGhlIFVUQyBkYXRlXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBSZXR1cm5zIGEgZGF0ZSBpbnN0YW5jZSB3aXRoIHZhbHVlcyByZXByZXNlbnRpbmcgdGhlIGxvY2FsIHRpbWUgaW4gdGhlIHRpbWUgem9uZVxyXG4gKiBzcGVjaWZpZWQgb2YgdGhlIFVUQyB0aW1lIGZyb20gdGhlIGRhdGUgcHJvdmlkZWQuIEluIG90aGVyIHdvcmRzLCB3aGVuIHRoZSBuZXcgZGF0ZVxyXG4gKiBpcyBmb3JtYXR0ZWQgaXQgd2lsbCBzaG93IHRoZSBlcXVpdmFsZW50IGhvdXJzIGluIHRoZSB0YXJnZXQgdGltZSB6b25lIHJlZ2FyZGxlc3NcclxuICogb2YgdGhlIGN1cnJlbnQgc3lzdGVtIHRpbWUgem9uZS5cclxuICpcclxuICogQHBhcmFtIHtEYXRlfFN0cmluZ3xOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB3aXRoIHRoZSByZWxldmFudCBVVEMgdGltZVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdGltZVpvbmUgLSB0aGUgdGltZSB6b25lIHRvIGdldCBsb2NhbCB0aW1lIGZvciwgY2FuIGJlIGFuIG9mZnNldCBvciBJQU5BIHRpbWUgem9uZVxyXG4gKiBAcGFyYW0ge09wdGlvbnNXaXRoVFp9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zLiBTZWUgW09wdGlvbnNde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvT3B0aW9uc31cclxuICogQHBhcmFtIHswfDF8Mn0gW29wdGlvbnMuYWRkaXRpb25hbERpZ2l0cz0yXSAtIHBhc3NlZCB0byBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxyXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGVxdWl2YWxlbnQgdGltZSBpbiB0aGUgdGltZSB6b25lXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcclxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcclxuICpcclxuICogQGV4YW1wbGVcclxuICogLy8gSW4gSnVuZSAxMGFtIFVUQyBpcyA2YW0gaW4gTmV3IFlvcmsgKC0wNDowMClcclxuICogY29uc3QgcmVzdWx0ID0gdXRjVG9ab25lZFRpbWUoJzIwMTQtMDYtMjVUMTA6MDA6MDAuMDAwWicsICdBbWVyaWNhL05ld19Zb3JrJylcclxuICogLy89PiBKdW4gMjUgMjAxNCAwNjowMDowMFxyXG4gKi9cclxuZnVuY3Rpb24gdXRjVG9ab25lZFRpbWUoZGlydHlEYXRlLCB0aW1lWm9uZSwgb3B0aW9ucykge1xyXG4gIHZhciBkYXRlID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fdG9EYXRlX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKGRpcnR5RGF0ZSwgb3B0aW9ucylcclxuXHJcbiAgLy8gVGhpcyBkYXRlIGhhcyB0aGUgVVRDIHRpbWUgdmFsdWVzIG9mIHRoZSBpbnB1dCBkYXRlIGF0IHRoZSBzeXN0ZW0gdGltZSB6b25lXHJcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShcclxuICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcclxuICAgIGRhdGUuZ2V0VVRDTW9udGgoKSxcclxuICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxyXG4gICAgZGF0ZS5nZXRVVENIb3VycygpLFxyXG4gICAgZGF0ZS5nZXRVVENNaW51dGVzKCksXHJcbiAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcclxuICAgIGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKClcclxuICApXHJcbiAgLy8gV2UganVzdCBuZWVkIHRvIGFwcGx5IHRoZSBvZmZzZXQgaW5kaWNhdGVkIGJ5IHRoZSB0aW1lIHpvbmUgdG8gdGhpcyBsb2NhbGl6ZWQgZGF0ZVxyXG4gIHZhciBvZmZzZXRNaWxsaXNlY29uZHMgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19saWJfdHpQYXJzZVRpbWV6b25lX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKHRpbWVab25lLCBkYXRlKVxyXG5cclxuICByZXR1cm4gb2Zmc2V0TWlsbGlzZWNvbmRzXHJcbiAgICA/IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfZGF0ZV9mbnNfZXNtX3N1Yk1pbGxpc2Vjb25kc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKSh1dGNEYXRlLCBvZmZzZXRNaWxsaXNlY29uZHMpXHJcbiAgICA6IHV0Y0RhdGVcclxufVxyXG5cclxuXHJcbi8qKiovIH0pLFxyXG4vKiA5ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IHR6VG9rZW5pemVEYXRlO1xyXG4vKipcclxuICogUmV0dXJucyB0aGUgW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kc10gdG9rZW5zIG9mIHRoZSBwcm92aWRlZFxyXG4gKiBgZGF0ZWAgYXMgaXQgd2lsbCBiZSByZW5kZXJlZCBpbiB0aGUgYHRpbWVab25lYC5cclxuICovXHJcbmZ1bmN0aW9uIHR6VG9rZW5pemVEYXRlKGRhdGUsIHRpbWVab25lKSB7XHJcbiAgdmFyIGR0ZiA9IGdldERhdGVUaW1lRm9ybWF0KHRpbWVab25lKVxyXG4gIHJldHVybiBkdGYuZm9ybWF0VG9QYXJ0cyA/IHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkgOiBoYWNreU9mZnNldChkdGYsIGRhdGUpXHJcbn1cclxuXHJcbnZhciB0eXBlVG9Qb3MgPSB7XHJcbiAgeWVhcjogMCxcclxuICBtb250aDogMSxcclxuICBkYXk6IDIsXHJcbiAgaG91cjogMyxcclxuICBtaW51dGU6IDQsXHJcbiAgc2Vjb25kOiA1XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkge1xyXG4gIHZhciBmb3JtYXR0ZWQgPSBkdGYuZm9ybWF0VG9QYXJ0cyhkYXRlKVxyXG4gIHZhciBmaWxsZWQgPSBbXVxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm9ybWF0dGVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgcG9zID0gdHlwZVRvUG9zW2Zvcm1hdHRlZFtpXS50eXBlXVxyXG5cclxuICAgIGlmIChwb3MgPj0gMCkge1xyXG4gICAgICBmaWxsZWRbcG9zXSA9IHBhcnNlSW50KGZvcm1hdHRlZFtpXS52YWx1ZSwgMTApXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmaWxsZWRcclxufVxyXG5cclxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XHJcbiAgdmFyIGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSkucmVwbGFjZSgvXFx1MjAwRS9nLCAnJylcclxuICB2YXIgcGFyc2VkID0gLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKSw/IChcXGQrKTooXFxkKyk6KFxcZCspLy5leGVjKGZvcm1hdHRlZClcclxuICAvLyB2YXIgWywgZk1vbnRoLCBmRGF5LCBmWWVhciwgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdID0gcGFyc2VkXHJcbiAgLy8gcmV0dXJuIFtmWWVhciwgZk1vbnRoLCBmRGF5LCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF1cclxuICByZXR1cm4gW3BhcnNlZFszXSwgcGFyc2VkWzFdLCBwYXJzZWRbMl0sIHBhcnNlZFs0XSwgcGFyc2VkWzVdLCBwYXJzZWRbNl1dXHJcbn1cclxuXHJcbi8vIEdldCBhIGNhY2hlZCBJbnRsLkRhdGVUaW1lRm9ybWF0IGluc3RhbmNlIGZvciB0aGUgSUFOQSBgdGltZVpvbmVgLiBUaGlzIGNhbiBiZSB1c2VkXHJcbi8vIHRvIGdldCBkZXRlcm1pbmlzdGljIGxvY2FsIGRhdGUvdGltZSBvdXRwdXQgYWNjb3JkaW5nIHRvIHRoZSBgZW4tVVNgIGxvY2FsZSB3aGljaFxyXG4vLyBjYW4gYmUgdXNlZCB0byBleHRyYWN0IGxvY2FsIHRpbWUgcGFydHMgYXMgbmVjZXNzYXJ5LlxyXG52YXIgZHRmQ2FjaGUgPSB7fVxyXG5mdW5jdGlvbiBnZXREYXRlVGltZUZvcm1hdCh0aW1lWm9uZSkge1xyXG4gIGlmICghZHRmQ2FjaGVbdGltZVpvbmVdKSB7XHJcbiAgICAvLyBOZXcgYnJvd3NlcnMgdXNlIGBob3VyQ3ljbGVgLCBJRSBhbmQgQ2hyb21lIDw3MyBkb2VzIG5vdCBzdXBwb3J0IGl0IGFuZCB1c2VzIGBob3VyMTJgXHJcbiAgICB2YXIgdGVzdERhdGVGb3JtYXR0ZWQgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnLCB7XHJcbiAgICAgIGhvdXIxMjogZmFsc2UsXHJcbiAgICAgIHRpbWVab25lOiAnQW1lcmljYS9OZXdfWW9yaycsXHJcbiAgICAgIHllYXI6ICdudW1lcmljJyxcclxuICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcclxuICAgICAgZGF5OiAnMi1kaWdpdCcsXHJcbiAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXHJcbiAgICAgIHNlY29uZDogJzItZGlnaXQnXHJcbiAgICB9KS5mb3JtYXQobmV3IERhdGUoJzIwMTQtMDYtMjVUMDQ6MDA6MDAuMTIzWicpKVxyXG4gICAgdmFyIGhvdXJDeWNsZVN1cHBvcnRlZCA9XHJcbiAgICAgIHRlc3REYXRlRm9ybWF0dGVkID09PSAnMDYvMjUvMjAxNCwgMDA6MDA6MDAnIHx8XHJcbiAgICAgIHRlc3REYXRlRm9ybWF0dGVkID09PSAn4oCOMDbigI4v4oCOMjXigI4v4oCOMjAxNOKAjiDigI4wMOKAjjrigI4wMOKAjjrigI4wMCdcclxuXHJcbiAgICBkdGZDYWNoZVt0aW1lWm9uZV0gPSBob3VyQ3ljbGVTdXBwb3J0ZWRcclxuICAgICAgPyBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnLCB7XHJcbiAgICAgICAgICBob3VyMTI6IGZhbHNlLFxyXG4gICAgICAgICAgdGltZVpvbmU6IHRpbWVab25lLFxyXG4gICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxyXG4gICAgICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgIGRheTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgaG91cjogJzItZGlnaXQnLFxyXG4gICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0J1xyXG4gICAgICAgIH0pXHJcbiAgICAgIDogbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLVVTJywge1xyXG4gICAgICAgICAgaG91ckN5Y2xlOiAnaDIzJyxcclxuICAgICAgICAgIHRpbWVab25lOiB0aW1lWm9uZSxcclxuICAgICAgICAgIHllYXI6ICdudW1lcmljJyxcclxuICAgICAgICAgIG1vbnRoOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCdcclxuICAgICAgICB9KVxyXG4gIH1cclxuICByZXR1cm4gZHRmQ2FjaGVbdGltZVpvbmVdXHJcbn1cclxuXHJcblxyXG4vKioqLyB9KSxcclxuLyogMTAgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gc3ViTWlsbGlzZWNvbmRzO1xyXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19saWJfdG9JbnRlZ2VyX2luZGV4X2pzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hZGRNaWxsaXNlY29uZHNfaW5kZXhfanNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcclxuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcclxuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cclxuICpcclxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxyXG4gKlxyXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkXHJcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcclxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcclxuICogdmFyIHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcclxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcclxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzIgYXJndW1lbnRzIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgcHJlc2VudCcpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGFtb3VudCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2xpYl90b0ludGVnZXJfaW5kZXhfanNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoZGlydHlBbW91bnQpO1xyXG4gIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19hZGRNaWxsaXNlY29uZHNfaW5kZXhfanNfX1tcImFcIiAvKiBkZWZhdWx0ICovXSkoZGlydHlEYXRlLCAtYW1vdW50KTtcclxufVxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDExICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IGFkZE1pbGxpc2Vjb25kcztcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGliX3RvSW50ZWdlcl9pbmRleF9qc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fdG9EYXRlX2luZGV4X2pzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcclxuXHJcblxyXG4vKipcclxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXHJcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXHJcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxyXG4gKlxyXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XHJcbiAqXHJcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cclxuICpcclxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcclxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkXHJcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXHJcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcclxuICpcclxuICogQGV4YW1wbGVcclxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcclxuICogdmFyIHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcclxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcclxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzIgYXJndW1lbnRzIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJndW1lbnRzLmxlbmd0aCArICcgcHJlc2VudCcpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHRpbWVzdGFtcCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3RvRGF0ZV9pbmRleF9qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShkaXJ0eURhdGUpLmdldFRpbWUoKTtcclxuICB2YXIgYW1vdW50ID0gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fbGliX3RvSW50ZWdlcl9pbmRleF9qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShkaXJ0eUFtb3VudCk7XHJcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XHJcbn1cclxuXHJcbi8qKiovIH0pLFxyXG4vKiAxMiAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSB0b0RhdGU7XHJcbi8qKlxyXG4gKiBAbmFtZSB0b0RhdGVcclxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXHJcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXHJcbiAqXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxyXG4gKlxyXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxyXG4gKlxyXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXHJcbiAqXHJcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxyXG4gKlxyXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cclxuICpcclxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxyXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcclxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxyXG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxyXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcclxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXHJcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcclxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBwcmVzZW50Jyk7XHJcbiAgfVxyXG5cclxuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcclxuXHJcbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XHJcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcclxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XHJcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXHJcblxyXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xyXG4gIH1cclxufVxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDEzICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IHRvRGF0ZTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9kYXRlX2Zuc19lc21fbGliX3RvSW50ZWdlcl9pbmRleF9qc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9kYXRlX2Zuc19lc21fbGliX2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHNfaW5kZXhfanNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpO1xyXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19saWJfdHpQYXJzZVRpbWV6b25lX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xyXG5cclxuXHJcblxyXG5cclxudmFyIE1JTExJU0VDT05EU19JTl9IT1VSID0gMzYwMDAwMFxyXG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwXHJcbnZhciBERUZBVUxUX0FERElUSU9OQUxfRElHSVRTID0gMlxyXG5cclxudmFyIHBhdHRlcm5zID0ge1xyXG4gIGRhdGVUaW1lRGVsaW1ldGVyOiAvW1QgXS8sXHJcbiAgcGxhaW5UaW1lOiAvOi8sXHJcbiAgdGltZVpvbmVEZWxpbWV0ZXI6IC9bWiBdL2ksXHJcblxyXG4gIC8vIHllYXIgdG9rZW5zXHJcbiAgWVk6IC9eKFxcZHsyfSkkLyxcclxuICBZWVk6IFtcclxuICAgIC9eKFsrLV1cXGR7Mn0pJC8sIC8vIDAgYWRkaXRpb25hbCBkaWdpdHNcclxuICAgIC9eKFsrLV1cXGR7M30pJC8sIC8vIDEgYWRkaXRpb25hbCBkaWdpdFxyXG4gICAgL14oWystXVxcZHs0fSkkLyAvLyAyIGFkZGl0aW9uYWwgZGlnaXRzXHJcbiAgXSxcclxuICBZWVlZOiAvXihcXGR7NH0pLyxcclxuICBZWVlZWTogW1xyXG4gICAgL14oWystXVxcZHs0fSkvLCAvLyAwIGFkZGl0aW9uYWwgZGlnaXRzXHJcbiAgICAvXihbKy1dXFxkezV9KS8sIC8vIDEgYWRkaXRpb25hbCBkaWdpdFxyXG4gICAgL14oWystXVxcZHs2fSkvIC8vIDIgYWRkaXRpb25hbCBkaWdpdHNcclxuICBdLFxyXG5cclxuICAvLyBkYXRlIHRva2Vuc1xyXG4gIE1NOiAvXi0oXFxkezJ9KSQvLFxyXG4gIERERDogL14tPyhcXGR7M30pJC8sXHJcbiAgTU1ERDogL14tPyhcXGR7Mn0pLT8oXFxkezJ9KSQvLFxyXG4gIFd3dzogL14tP1coXFxkezJ9KSQvLFxyXG4gIFd3d0Q6IC9eLT9XKFxcZHsyfSktPyhcXGR7MX0pJC8sXHJcblxyXG4gIEhIOiAvXihcXGR7Mn0oWy4sXVxcZCopPykkLyxcclxuICBISE1NOiAvXihcXGR7Mn0pOj8oXFxkezJ9KFsuLF1cXGQqKT8pJC8sXHJcbiAgSEhNTVNTOiAvXihcXGR7Mn0pOj8oXFxkezJ9KTo/KFxcZHsyfShbLixdXFxkKik/KSQvLFxyXG5cclxuICAvLyB0aW1lem9uZSB0b2tlbnMgKHRvIGlkZW50aWZ5IHRoZSBwcmVzZW5jZSBvZiBhIHR6KVxyXG4gIHRpbWV6b25lOiAvKFtaKy1dLip8IFVUQ3woPzpbYS16QS1aXStcXC9bYS16QS1aX10rKD86XFwvW2EtekEtWl9dKyk/KSkkL1xyXG59XHJcblxyXG4vKipcclxuICogQG5hbWUgdG9EYXRlXHJcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xyXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cclxuICpcclxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cclxuICpcclxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxyXG4gKlxyXG4gKiBJZiBhbiBhcmd1bWVudCBpcyBhIHN0cmluZywgdGhlIGZ1bmN0aW9uIHRyaWVzIHRvIHBhcnNlIGl0LlxyXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cclxuICogSVNPIDg2MDE6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDFcclxuICogSWYgdGhlIGZ1bmN0aW9uIGNhbm5vdCBwYXJzZSB0aGUgc3RyaW5nIG9yIHRoZSB2YWx1ZXMgYXJlIGludmFsaWQsIGl0IHJldHVybnMgSW52YWxpZCBEYXRlLlxyXG4gKlxyXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cclxuICpcclxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXHJcbiAqIEFsbCAqZGF0ZS1mbnMqIGZ1bmN0aW9ucyB3aWxsIHRocm93IGBSYW5nZUVycm9yYCBpZiBgb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzYCBpcyBub3QgMCwgMSwgMiBvciB1bmRlZmluZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RGF0ZXxTdHJpbmd8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XHJcbiAqIEBwYXJhbSB7T3B0aW9uc1dpdGhUWn0gW29wdGlvbnNdIC0gdGhlIG9iamVjdCB3aXRoIG9wdGlvbnMuIFNlZSBbT3B0aW9uc117QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9PcHRpb25zfVxyXG4gKiBAcGFyYW0gezB8MXwyfSBbb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzPTJdIC0gdGhlIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgZXh0ZW5kZWQgeWVhciBmb3JtYXRcclxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRpbWVab25lPScnXSAtIHVzZWQgdG8gc3BlY2lmeSB0aGUgSUFOQSB0aW1lIHpvbmUgb2Zmc2V0IG9mIGEgZGF0ZSBTdHJpbmcuXHJcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcclxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0c2AgbXVzdCBiZSAwLCAxIG9yIDJcclxuICpcclxuICogQGV4YW1wbGVcclxuICogLy8gQ29udmVydCBzdHJpbmcgJzIwMTQtMDItMTFUMTE6MzA6MzAnIHRvIGRhdGU6XHJcbiAqIHZhciByZXN1bHQgPSB0b0RhdGUoJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxyXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBDb252ZXJ0IHN0cmluZyAnKzAyMDE0MTAxJyB0byBkYXRlLFxyXG4gKiAvLyBpZiB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdCBpcyAxOlxyXG4gKiB2YXIgcmVzdWx0ID0gdG9EYXRlKCcrMDIwMTQxMDEnLCB7YWRkaXRpb25hbERpZ2l0czogMX0pXHJcbiAqIC8vPT4gRnJpIEFwciAxMSAyMDE0IDAwOjAwOjAwXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQsIGRpcnR5T3B0aW9ucykge1xyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcclxuICAgICAgJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmd1bWVudHMubGVuZ3RoICsgJyBwcmVzZW50J1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgaWYgKGFyZ3VtZW50ID09PSBudWxsKSB7XHJcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKVxyXG4gIH1cclxuXHJcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge31cclxuXHJcbiAgdmFyIGFkZGl0aW9uYWxEaWdpdHMgPVxyXG4gICAgb3B0aW9ucy5hZGRpdGlvbmFsRGlnaXRzID09IG51bGxcclxuICAgICAgPyBERUZBVUxUX0FERElUSU9OQUxfRElHSVRTXHJcbiAgICAgIDogT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9kYXRlX2Zuc19lc21fbGliX3RvSW50ZWdlcl9pbmRleF9qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMpXHJcbiAgaWYgKFxyXG4gICAgYWRkaXRpb25hbERpZ2l0cyAhPT0gMiAmJlxyXG4gICAgYWRkaXRpb25hbERpZ2l0cyAhPT0gMSAmJlxyXG4gICAgYWRkaXRpb25hbERpZ2l0cyAhPT0gMFxyXG4gICkge1xyXG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2FkZGl0aW9uYWxEaWdpdHMgbXVzdCBiZSAwLCAxIG9yIDInKVxyXG4gIH1cclxuXHJcbiAgLy8gQ2xvbmUgdGhlIGRhdGVcclxuICBpZiAoXHJcbiAgICBhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHxcclxuICAgICh0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmXHJcbiAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IERhdGVdJylcclxuICApIHtcclxuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxyXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSlcclxuICB9IGVsc2UgaWYgKFxyXG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fFxyXG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcclxuICApIHtcclxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudClcclxuICB9IGVsc2UgaWYgKFxyXG4gICAgIShcclxuICAgICAgdHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBTdHJpbmddJ1xyXG4gICAgKVxyXG4gICkge1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcclxuICB9XHJcblxyXG4gIHZhciBkYXRlU3RyaW5ncyA9IHNwbGl0RGF0ZVN0cmluZyhhcmd1bWVudClcclxuXHJcbiAgdmFyIHBhcnNlWWVhclJlc3VsdCA9IHBhcnNlWWVhcihkYXRlU3RyaW5ncy5kYXRlLCBhZGRpdGlvbmFsRGlnaXRzKVxyXG4gIHZhciB5ZWFyID0gcGFyc2VZZWFyUmVzdWx0LnllYXJcclxuICB2YXIgcmVzdERhdGVTdHJpbmcgPSBwYXJzZVllYXJSZXN1bHQucmVzdERhdGVTdHJpbmdcclxuXHJcbiAgdmFyIGRhdGUgPSBwYXJzZURhdGUocmVzdERhdGVTdHJpbmcsIHllYXIpXHJcblxyXG4gIGlmIChpc05hTihkYXRlKSkge1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcclxuICB9XHJcblxyXG4gIGlmIChkYXRlKSB7XHJcbiAgICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKClcclxuICAgIHZhciB0aW1lID0gMFxyXG4gICAgdmFyIG9mZnNldFxyXG5cclxuICAgIGlmIChkYXRlU3RyaW5ncy50aW1lKSB7XHJcbiAgICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSlcclxuXHJcbiAgICAgIGlmIChpc05hTih0aW1lKSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0ZVN0cmluZ3MudGltZXpvbmUgfHwgb3B0aW9ucy50aW1lWm9uZSkge1xyXG4gICAgICBvZmZzZXQgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19saWJfdHpQYXJzZVRpbWV6b25lX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKFxyXG4gICAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lIHx8IG9wdGlvbnMudGltZVpvbmUsXHJcbiAgICAgICAgbmV3IERhdGUodGltZXN0YW1wICsgdGltZSlcclxuICAgICAgKVxyXG4gICAgICBpZiAoaXNOYU4ob2Zmc2V0KSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGdldCBvZmZzZXQgYWNjdXJhdGUgdG8gaG91ciBpbiB0aW1lem9uZXMgdGhhdCBjaGFuZ2Ugb2Zmc2V0XHJcbiAgICAgIG9mZnNldCA9IE9iamVjdChfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfZGF0ZV9mbnNfZXNtX2xpYl9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzX2luZGV4X2pzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pKG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUpKVxyXG4gICAgICBvZmZzZXQgPSBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX2RhdGVfZm5zX2VzbV9saWJfZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kc19pbmRleF9qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKShcclxuICAgICAgICBuZXcgRGF0ZSh0aW1lc3RhbXAgKyB0aW1lICsgb2Zmc2V0KVxyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdERhdGVTdHJpbmcoZGF0ZVN0cmluZykge1xyXG4gIHZhciBkYXRlU3RyaW5ncyA9IHt9XHJcbiAgdmFyIGFycmF5ID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy5kYXRlVGltZURlbGltZXRlcilcclxuICB2YXIgdGltZVN0cmluZ1xyXG5cclxuICBpZiAocGF0dGVybnMucGxhaW5UaW1lLnRlc3QoYXJyYXlbMF0pKSB7XHJcbiAgICBkYXRlU3RyaW5ncy5kYXRlID0gbnVsbFxyXG4gICAgdGltZVN0cmluZyA9IGFycmF5WzBdXHJcbiAgfSBlbHNlIHtcclxuICAgIGRhdGVTdHJpbmdzLmRhdGUgPSBhcnJheVswXVxyXG4gICAgdGltZVN0cmluZyA9IGFycmF5WzFdXHJcbiAgICBkYXRlU3RyaW5ncy50aW1lem9uZSA9IGFycmF5WzJdXHJcbiAgICBpZiAocGF0dGVybnMudGltZVpvbmVEZWxpbWV0ZXIudGVzdChkYXRlU3RyaW5ncy5kYXRlKSkge1xyXG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy50aW1lWm9uZURlbGltZXRlcilbMF1cclxuICAgICAgdGltZVN0cmluZyA9IGRhdGVTdHJpbmcuc3Vic3RyKGRhdGVTdHJpbmdzLmRhdGUubGVuZ3RoLCBkYXRlU3RyaW5nLmxlbmd0aClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICh0aW1lU3RyaW5nKSB7XHJcbiAgICB2YXIgdG9rZW4gPSBwYXR0ZXJucy50aW1lem9uZS5leGVjKHRpbWVTdHJpbmcpXHJcbiAgICBpZiAodG9rZW4pIHtcclxuICAgICAgZGF0ZVN0cmluZ3MudGltZSA9IHRpbWVTdHJpbmcucmVwbGFjZSh0b2tlblsxXSwgJycpXHJcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZGF0ZVN0cmluZ3NcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VZZWFyKGRhdGVTdHJpbmcsIGFkZGl0aW9uYWxEaWdpdHMpIHtcclxuICB2YXIgcGF0dGVybllZWSA9IHBhdHRlcm5zLllZWVthZGRpdGlvbmFsRGlnaXRzXVxyXG4gIHZhciBwYXR0ZXJuWVlZWVkgPSBwYXR0ZXJucy5ZWVlZWVthZGRpdGlvbmFsRGlnaXRzXVxyXG5cclxuICB2YXIgdG9rZW5cclxuXHJcbiAgLy8gWVlZWSBvciDCsVlZWVlZXHJcbiAgdG9rZW4gPSBwYXR0ZXJucy5ZWVlZLmV4ZWMoZGF0ZVN0cmluZykgfHwgcGF0dGVybllZWVlZLmV4ZWMoZGF0ZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIHZhciB5ZWFyU3RyaW5nID0gdG9rZW5bMV1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHllYXI6IHBhcnNlSW50KHllYXJTdHJpbmcsIDEwKSxcclxuICAgICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoeWVhclN0cmluZy5sZW5ndGgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBZWSBvciDCsVlZWVxyXG4gIHRva2VuID0gcGF0dGVybnMuWVkuZXhlYyhkYXRlU3RyaW5nKSB8fCBwYXR0ZXJuWVlZLmV4ZWMoZGF0ZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIHZhciBjZW50dXJ5U3RyaW5nID0gdG9rZW5bMV1cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHllYXI6IHBhcnNlSW50KGNlbnR1cnlTdHJpbmcsIDEwKSAqIDEwMCxcclxuICAgICAgcmVzdERhdGVTdHJpbmc6IGRhdGVTdHJpbmcuc2xpY2UoY2VudHVyeVN0cmluZy5sZW5ndGgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxyXG4gIHJldHVybiB7XHJcbiAgICB5ZWFyOiBudWxsXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZURhdGUoZGF0ZVN0cmluZywgeWVhcikge1xyXG4gIC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCB5ZWFyXHJcbiAgaWYgKHllYXIgPT09IG51bGwpIHtcclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG5cclxuICB2YXIgdG9rZW5cclxuICB2YXIgZGF0ZVxyXG4gIHZhciBtb250aFxyXG4gIHZhciB3ZWVrXHJcblxyXG4gIC8vIFlZWVlcclxuICBpZiAoZGF0ZVN0cmluZy5sZW5ndGggPT09IDApIHtcclxuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxyXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyKVxyXG4gICAgcmV0dXJuIGRhdGVcclxuICB9XHJcblxyXG4gIC8vIFlZWVktTU1cclxuICB0b2tlbiA9IHBhdHRlcm5zLk1NLmV4ZWMoZGF0ZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxyXG4gICAgbW9udGggPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoKSkge1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKVxyXG4gICAgfVxyXG5cclxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgpXHJcbiAgICByZXR1cm4gZGF0ZVxyXG4gIH1cclxuXHJcbiAgLy8gWVlZWS1EREQgb3IgWVlZWURERFxyXG4gIHRva2VuID0gcGF0dGVybnMuRERELmV4ZWMoZGF0ZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIGRhdGUgPSBuZXcgRGF0ZSgwKVxyXG4gICAgdmFyIGRheU9mWWVhciA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcclxuXHJcbiAgICBpZiAoIXZhbGlkYXRlRGF5T2ZZZWFyRGF0ZSh5ZWFyLCBkYXlPZlllYXIpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pXHJcbiAgICB9XHJcblxyXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBkYXlPZlllYXIpXHJcbiAgICByZXR1cm4gZGF0ZVxyXG4gIH1cclxuXHJcbiAgLy8geXl5eS1NTS1kZCBvciBZWVlZTU1ERFxyXG4gIHRva2VuID0gcGF0dGVybnMuTU1ERC5leGVjKGRhdGVTdHJpbmcpXHJcbiAgaWYgKHRva2VuKSB7XHJcbiAgICBkYXRlID0gbmV3IERhdGUoMClcclxuICAgIG1vbnRoID0gcGFyc2VJbnQodG9rZW5bMV0sIDEwKSAtIDFcclxuICAgIHZhciBkYXkgPSBwYXJzZUludCh0b2tlblsyXSwgMTApXHJcblxyXG4gICAgaWYgKCF2YWxpZGF0ZURhdGUoeWVhciwgbW9udGgsIGRheSkpIHtcclxuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcclxuICAgIH1cclxuXHJcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkpXHJcbiAgICByZXR1cm4gZGF0ZVxyXG4gIH1cclxuXHJcbiAgLy8gWVlZWS1Xd3cgb3IgWVlZWVd3d1xyXG4gIHRva2VuID0gcGF0dGVybnMuV3d3LmV4ZWMoZGF0ZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIHdlZWsgPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVXZWVrRGF0ZSh5ZWFyLCB3ZWVrKSkge1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWspXHJcbiAgfVxyXG5cclxuICAvLyBZWVlZLVd3dy1EIG9yIFlZWVlXd3dEXHJcbiAgdG9rZW4gPSBwYXR0ZXJucy5Xd3dELmV4ZWMoZGF0ZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIHdlZWsgPSBwYXJzZUludCh0b2tlblsxXSwgMTApIC0gMVxyXG4gICAgdmFyIGRheU9mV2VlayA9IHBhcnNlSW50KHRva2VuWzJdLCAxMCkgLSAxXHJcblxyXG4gICAgaWYgKCF2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheU9mV2VlaykpIHtcclxuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTilcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF5T2ZJU09XZWVrWWVhcih5ZWFyLCB3ZWVrLCBkYXlPZldlZWspXHJcbiAgfVxyXG5cclxuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgZGF0ZVxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XHJcbiAgdmFyIHRva2VuXHJcbiAgdmFyIGhvdXJzXHJcbiAgdmFyIG1pbnV0ZXNcclxuXHJcbiAgLy8gaGhcclxuICB0b2tlbiA9IHBhdHRlcm5zLkhILmV4ZWModGltZVN0cmluZylcclxuICBpZiAodG9rZW4pIHtcclxuICAgIGhvdXJzID0gcGFyc2VGbG9hdCh0b2tlblsxXS5yZXBsYWNlKCcsJywgJy4nKSlcclxuXHJcbiAgICBpZiAoIXZhbGlkYXRlVGltZShob3VycykpIHtcclxuICAgICAgcmV0dXJuIE5hTlxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoaG91cnMgJSAyNCkgKiBNSUxMSVNFQ09ORFNfSU5fSE9VUlxyXG4gIH1cclxuXHJcbiAgLy8gaGg6bW0gb3IgaGhtbVxyXG4gIHRva2VuID0gcGF0dGVybnMuSEhNTS5leGVjKHRpbWVTdHJpbmcpXHJcbiAgaWYgKHRva2VuKSB7XHJcbiAgICBob3VycyA9IHBhcnNlSW50KHRva2VuWzFdLCAxMClcclxuICAgIG1pbnV0ZXMgPSBwYXJzZUZsb2F0KHRva2VuWzJdLnJlcGxhY2UoJywnLCAnLicpKVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzKSkge1xyXG4gICAgICByZXR1cm4gTmFOXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgKyBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgLy8gaGg6bW06c3Mgb3IgaGhtbXNzXHJcbiAgdG9rZW4gPSBwYXR0ZXJucy5ISE1NU1MuZXhlYyh0aW1lU3RyaW5nKVxyXG4gIGlmICh0b2tlbikge1xyXG4gICAgaG91cnMgPSBwYXJzZUludCh0b2tlblsxXSwgMTApXHJcbiAgICBtaW51dGVzID0gcGFyc2VJbnQodG9rZW5bMl0sIDEwKVxyXG4gICAgdmFyIHNlY29uZHMgPSBwYXJzZUZsb2F0KHRva2VuWzNdLnJlcGxhY2UoJywnLCAnLicpKVxyXG5cclxuICAgIGlmICghdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSkge1xyXG4gICAgICByZXR1cm4gTmFOXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgKGhvdXJzICUgMjQpICogTUlMTElTRUNPTkRTX0lOX0hPVVIgK1xyXG4gICAgICBtaW51dGVzICogTUlMTElTRUNPTkRTX0lOX01JTlVURSArXHJcbiAgICAgIHNlY29uZHMgKiAxMDAwXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgdGltZVxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRheU9mSVNPV2Vla1llYXIoaXNvV2Vla1llYXIsIHdlZWssIGRheSkge1xyXG4gIHdlZWsgPSB3ZWVrIHx8IDBcclxuICBkYXkgPSBkYXkgfHwgMFxyXG4gIHZhciBkYXRlID0gbmV3IERhdGUoMClcclxuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGlzb1dlZWtZZWFyLCAwLCA0KVxyXG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDdcclxuICB2YXIgZGlmZiA9IHdlZWsgKiA3ICsgZGF5ICsgMSAtIGZvdXJ0aE9mSmFudWFyeURheVxyXG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpXHJcbiAgcmV0dXJuIGRhdGVcclxufVxyXG5cclxuLy8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcclxuXHJcbnZhciBEQVlTX0lOX01PTlRIID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdXHJcbnZhciBEQVlTX0lOX01PTlRIX0xFQVBfWUVBUiA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXVxyXG5cclxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcclxuICByZXR1cm4geWVhciAlIDQwMCA9PT0gMCB8fCAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMClcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXRlKSB7XHJcbiAgaWYgKG1vbnRoIDwgMCB8fCBtb250aCA+IDExKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGlmIChkYXRlICE9IG51bGwpIHtcclxuICAgIGlmIChkYXRlIDwgMSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaXNMZWFwWWVhciA9IGlzTGVhcFllYXJJbmRleCh5ZWFyKVxyXG4gICAgaWYgKGlzTGVhcFllYXIgJiYgZGF0ZSA+IERBWVNfSU5fTU9OVEhfTEVBUF9ZRUFSW21vbnRoXSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuICAgIGlmICghaXNMZWFwWWVhciAmJiBkYXRlID4gREFZU19JTl9NT05USFttb250aF0pIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XHJcbiAgaWYgKGRheU9mWWVhciA8IDEpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgdmFyIGlzTGVhcFllYXIgPSBpc0xlYXBZZWFySW5kZXgoeWVhcilcclxuICBpZiAoaXNMZWFwWWVhciAmJiBkYXlPZlllYXIgPiAzNjYpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuICBpZiAoIWlzTGVhcFllYXIgJiYgZGF5T2ZZZWFyID4gMzY1KSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHZhbGlkYXRlV2Vla0RhdGUoeWVhciwgd2VlaywgZGF5KSB7XHJcbiAgaWYgKHdlZWsgPCAwIHx8IHdlZWsgPiA1Mikge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBpZiAoZGF5ICE9IG51bGwgJiYgKGRheSA8IDAgfHwgZGF5ID4gNikpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWVcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVUaW1lKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XHJcbiAgaWYgKGhvdXJzICE9IG51bGwgJiYgKGhvdXJzIDwgMCB8fCBob3VycyA+PSAyNSkpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgaWYgKG1pbnV0ZXMgIT0gbnVsbCAmJiAobWludXRlcyA8IDAgfHwgbWludXRlcyA+PSA2MCkpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgaWYgKHNlY29uZHMgIT0gbnVsbCAmJiAoc2Vjb25kcyA8IDAgfHwgc2Vjb25kcyA+PSA2MCkpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWVcclxufVxyXG5cclxuXHJcbi8qKiovIH0pLFxyXG4vKiAxNCAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzO1xyXG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xyXG4vKipcclxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxyXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxyXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxyXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcclxuICpcclxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcclxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxyXG4gKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUpIHtcclxuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKGRpcnR5RGF0ZS5nZXRUaW1lKCkpO1xyXG4gIHZhciBiYXNlVGltZXpvbmVPZmZzZXQgPSBNYXRoLmNlaWwoZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcclxuICBkYXRlLnNldFNlY29uZHMoMCwgMCk7XHJcbiAgdmFyIG1pbGxpc2Vjb25kc1BhcnRPZlRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lKCkgJSBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFO1xyXG4gIHJldHVybiBiYXNlVGltZXpvbmVPZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFICsgbWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQ7XHJcbn1cclxuXHJcbi8qKiovIH0pLFxyXG4vKiAxNSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0IGdldFdlZWtTdGFydEJ5UmVnaW9uICovXHJcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZ2V0V2Vla1N0YXJ0QnlMb2NhbGUkMTsgfSk7XHJcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2FwaV9qc19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XHJcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2xhbmdSZWdpb25NYXBfanNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpO1xyXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19yZWdpb25EYXlNYXBfanNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0V2Vla1N0YXJ0QnlSZWdpb24kMShyZWdpb25Db2RlKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0KF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fYXBpX2pzX19bXCJiXCIgLyogZ2V0V2Vla1N0YXJ0QnlSZWdpb24gKi9dKShyZWdpb25Db2RlLCBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX3JlZ2lvbkRheU1hcF9qc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0V2Vla1N0YXJ0QnlMb2NhbGUkMShsb2NhbGUpIHtcclxuICAgIHJldHVybiBPYmplY3QoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19hcGlfanNfX1tcImFcIiAvKiBnZXRXZWVrU3RhcnRCeUxvY2FsZSAqL10pKGxvY2FsZSwgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19sYW5nUmVnaW9uTWFwX2pzX19bXCJhXCIgLyogZGVmYXVsdCAqL10sIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fcmVnaW9uRGF5TWFwX2pzX19bXCJhXCIgLyogZGVmYXVsdCAqL10pO1xyXG59XHJcblxyXG5cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFpbi5qcy5tYXBcclxuXHJcblxyXG4vKioqLyB9KSxcclxuLyogMTYgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJiXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZ2V0V2Vla1N0YXJ0QnlSZWdpb247IH0pO1xyXG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIGdldFdlZWtTdGFydEJ5TG9jYWxlOyB9KTtcclxuZnVuY3Rpb24gZ2V0V2Vla1N0YXJ0QnlSZWdpb24ocmVnaW9uQ29kZSwgcmVnaW9uRGF5TWFwKSB7XHJcbiAgICB2YXIgY29kZSA9IHJlZ2lvbkRheU1hcFt0eXBlb2YgcmVnaW9uQ29kZSA9PT0gJ3N0cmluZycgPyByZWdpb25Db2RlLnRvVXBwZXJDYXNlKCkgOiByZWdpb25Db2RlXTtcclxuICAgIHJldHVybiB0eXBlb2YgY29kZSA9PT0gJ251bWJlcicgPyBjb2RlIDogMTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0V2Vla1N0YXJ0QnlMb2NhbGUobG9jYWxlLCBsYW5nUmVnaW9uTWFwLCByZWdpb25EYXlNYXApIHtcclxuICAgIGlmIChsb2NhbGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGxvY2FsZS50b0xvd2VyQ2FzZSgpLnNwbGl0KC9bLV9dLyk7XHJcbiAgICAgICAgdmFyIGxhbmd1YWdlID0gZGF0YVswXTtcclxuICAgICAgICB2YXIgY291bnRyeTtcclxuICAgICAgICBpZiAoZGF0YVsxXSAmJiBkYXRhWzFdLmxlbmd0aCA9PT0gNCkge1xyXG4gICAgICAgICAgICBsYW5ndWFnZSArPSBcIl9cIiArIChkYXRhWzFdKTtcclxuICAgICAgICAgICAgY291bnRyeSA9IGRhdGFbMl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY291bnRyeSA9IGRhdGFbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghY291bnRyeSkge1xyXG4gICAgICAgICAgICBjb3VudHJ5ID0gbGFuZ1JlZ2lvbk1hcFtsYW5ndWFnZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb3VudHJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRXZWVrU3RhcnRCeVJlZ2lvbihjb3VudHJ5Lm1hdGNoKC9eXFxkKyQvKSA/IE51bWJlcihjb3VudHJ5KSA6IGNvdW50cnksIHJlZ2lvbkRheU1hcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDE7XHJcbn1cclxuXHJcblxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcGkuanMubWFwXHJcblxyXG5cclxuLyoqKi8gfSksXHJcbi8qIDE3ICovXHJcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG52YXIgbGFuZ1JlZ2lvbk1hcCA9IHtcclxuICAgIGVuOiAnVVMnLFxyXG4gICAgemg6ICdDTicsXHJcbiAgICB6aF9oYW5zOiAnQ04nLFxyXG4gICAgaGFuczogJ0NOJyxcclxuICAgIHd1dTogJ0NOJyxcclxuICAgIGhzbjogJ0NOJyxcclxuICAgIGhhazogJ0NOJyxcclxuICAgIG5hbjogJ0NOJyxcclxuICAgIGdhbjogJ0NOJyxcclxuICAgIGhpOiAnSU4nLFxyXG4gICAgdGU6ICdJTicsXHJcbiAgICBtcjogJ0lOJyxcclxuICAgIHRhOiAnSU4nLFxyXG4gICAgZ3U6ICdJTicsXHJcbiAgICBrbjogJ0lOJyxcclxuICAgIG9yOiAnSU4nLFxyXG4gICAgbWw6ICdJTicsXHJcbiAgICBwYV9ndXJ1OiAnSU4nLFxyXG4gICAgYmhvOiAnSU4nLFxyXG4gICAgYXdhOiAnSU4nLFxyXG4gICAgYXM6ICdJTicsXHJcbiAgICBtd3I6ICdJTicsXHJcbiAgICBtYWk6ICdJTicsXHJcbiAgICBtYWc6ICdJTicsXHJcbiAgICBiZ2M6ICdJTicsXHJcbiAgICBobmU6ICdJTicsXHJcbiAgICBkY2M6ICdJTicsXHJcbiAgICBkejogJ0JUJyxcclxuICAgIHRuOiAnQlcnLFxyXG4gICAgYW06ICdFVCcsXHJcbiAgICBvbTogJ0VUJyxcclxuICAgIHF1YzogJ0dUJyxcclxuICAgIGlkOiAnSUQnLFxyXG4gICAganY6ICdJRCcsXHJcbiAgICBzdTogJ0lEJyxcclxuICAgIG1hZDogJ0lEJyxcclxuICAgIG1zX2FyYWI6ICdJRCcsXHJcbiAgICBnYTogJ0lFJyxcclxuICAgIGhlOiAnSUwnLFxyXG4gICAgamFtOiAnSk0nLFxyXG4gICAgamE6ICdKUCcsXHJcbiAgICBrbTogJ0tIJyxcclxuICAgIGtvOiAnS1InLFxyXG4gICAgbG86ICdMQScsXHJcbiAgICBtaDogJ01IJyxcclxuICAgIG15OiAnTU0nLFxyXG4gICAgbXQ6ICdNVCcsXHJcbiAgICBuZTogJ05QJyxcclxuICAgIGZpbDogJ1BIJyxcclxuICAgIGNlYjogJ1BIJyxcclxuICAgIGlsbzogJ1BIJyxcclxuICAgIHVyOiAnUEsnLFxyXG4gICAgcGE6ICdQSycsXHJcbiAgICBwYV9hcmFiOiAnUEsnLFxyXG4gICAgYXJhYjogJ1BLJyxcclxuICAgIGxhaDogJ1BLJyxcclxuICAgIHBzOiAnUEsnLFxyXG4gICAgc2Q6ICdQSycsXHJcbiAgICBzZF9hcmFiOiAnUEsnLFxyXG4gICAgc2tyOiAnUEsnLFxyXG4gICAgZ246ICdQWScsXHJcbiAgICB0aDogJ1RIJyxcclxuICAgIHR0czogJ1RIJyxcclxuICAgIGFlYjogJ1ROJyxcclxuICAgIHpoX2hhbnQ6ICdUVycsXHJcbiAgICBoYW50OiAnVFcnLFxyXG4gICAgc206ICdXUycsXHJcbiAgICB6dTogJ1pBJyxcclxuICAgIHNuOiAnWlcnLFxyXG4gICAgYXJxOiAnRFonLFxyXG4gICAgYXI6ICdFRycsXHJcbiAgICBhcno6ICdFRycsXHJcbiAgICBmYTogJ0lSJyxcclxuICAgIGF6X2FyYWI6ICdJUicsXHJcbiAgICBhcnk6ICdNQScsXHJcbiAgICBibjogJ0JEJyxcclxuICAgIHJrdDogJ0JEJyxcclxuICAgIGR2OiAnTVYnXHJcbn07XHJcblxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKGxhbmdSZWdpb25NYXApO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5nUmVnaW9uTWFwLmpzLm1hcFxyXG5cclxuXHJcbi8qKiovIH0pLFxyXG4vKiAxOCAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxudmFyIHJlZ2lvbkRheU1hcCA9IHtcclxuICAgIEFHOiAwLFxyXG4gICAgQVRHOiAwLFxyXG4gICAgMjg6IDAsXHJcbiAgICBBUjogMCxcclxuICAgIEFSRzogMCxcclxuICAgIDMyOiAwLFxyXG4gICAgQVM6IDAsXHJcbiAgICBBU006IDAsXHJcbiAgICAxNjogMCxcclxuICAgIEFVOiAwLFxyXG4gICAgQVVTOiAwLFxyXG4gICAgMzY6IDAsXHJcbiAgICBCUjogMCxcclxuICAgIEJSQTogMCxcclxuICAgIDc2OiAwLFxyXG4gICAgQlM6IDAsXHJcbiAgICBCSFM6IDAsXHJcbiAgICA0NDogMCxcclxuICAgIEJUOiAwLFxyXG4gICAgQlROOiAwLFxyXG4gICAgNjQ6IDAsXHJcbiAgICBCVzogMCxcclxuICAgIEJXQTogMCxcclxuICAgIDcyOiAwLFxyXG4gICAgQlo6IDAsXHJcbiAgICBCTFo6IDAsXHJcbiAgICA4NDogMCxcclxuICAgIENBOiAwLFxyXG4gICAgQ0FOOiAwLFxyXG4gICAgMTI0OiAwLFxyXG4gICAgQ046IDAsXHJcbiAgICBDSE46IDAsXHJcbiAgICAxNTY6IDAsXHJcbiAgICBDTzogMCxcclxuICAgIENPTDogMCxcclxuICAgIDE3MDogMCxcclxuICAgIERNOiAwLFxyXG4gICAgRE1BOiAwLFxyXG4gICAgMjEyOiAwLFxyXG4gICAgRE86IDAsXHJcbiAgICBET006IDAsXHJcbiAgICAyMTQ6IDAsXHJcbiAgICBFVDogMCxcclxuICAgIEVUSDogMCxcclxuICAgIDIzMTogMCxcclxuICAgIEdUOiAwLFxyXG4gICAgR1RNOiAwLFxyXG4gICAgMzIwOiAwLFxyXG4gICAgR1U6IDAsXHJcbiAgICBHVU06IDAsXHJcbiAgICAzMTY6IDAsXHJcbiAgICBISzogMCxcclxuICAgIEhLRzogMCxcclxuICAgIDM0NDogMCxcclxuICAgIEhOOiAwLFxyXG4gICAgSE5EOiAwLFxyXG4gICAgMzQwOiAwLFxyXG4gICAgSUQ6IDAsXHJcbiAgICBJRE46IDAsXHJcbiAgICAzNjA6IDAsXHJcbiAgICBJRTogMCxcclxuICAgIElSTDogMCxcclxuICAgIDM3MjogMCxcclxuICAgIElMOiAwLFxyXG4gICAgSVNSOiAwLFxyXG4gICAgMzc2OiAwLFxyXG4gICAgSU46IDAsXHJcbiAgICBJTkQ6IDAsXHJcbiAgICAzNTY6IDAsXHJcbiAgICBKTTogMCxcclxuICAgIEpBTTogMCxcclxuICAgIDM4ODogMCxcclxuICAgIEpQOiAwLFxyXG4gICAgSlBOOiAwLFxyXG4gICAgMzkyOiAwLFxyXG4gICAgS0U6IDAsXHJcbiAgICBLRU46IDAsXHJcbiAgICA0MDQ6IDAsXHJcbiAgICBLSDogMCxcclxuICAgIEtITTogMCxcclxuICAgIDExNjogMCxcclxuICAgIEtSOiAwLFxyXG4gICAgS09SOiAwLFxyXG4gICAgNDEwOiAwLFxyXG4gICAgTEE6IDAsXHJcbiAgICBMQTA6IDAsXHJcbiAgICA0MTg6IDAsXHJcbiAgICBNSDogMCxcclxuICAgIE1ITDogMCxcclxuICAgIDU4NDogMCxcclxuICAgIE1NOiAwLFxyXG4gICAgTU1SOiAwLFxyXG4gICAgMTA0OiAwLFxyXG4gICAgTU86IDAsXHJcbiAgICBNQUM6IDAsXHJcbiAgICA0NDY6IDAsXHJcbiAgICBNVDogMCxcclxuICAgIE1MVDogMCxcclxuICAgIDQ3MDogMCxcclxuICAgIE1YOiAwLFxyXG4gICAgTUVYOiAwLFxyXG4gICAgNDg0OiAwLFxyXG4gICAgTVo6IDAsXHJcbiAgICBNT1o6IDAsXHJcbiAgICA1MDg6IDAsXHJcbiAgICBOSTogMCxcclxuICAgIE5JQzogMCxcclxuICAgIDU1ODogMCxcclxuICAgIE5QOiAwLFxyXG4gICAgTlBMOiAwLFxyXG4gICAgNTI0OiAwLFxyXG4gICAgTlo6IDAsXHJcbiAgICBOWkw6IDAsXHJcbiAgICA1NTQ6IDAsXHJcbiAgICBQQTogMCxcclxuICAgIFBBTjogMCxcclxuICAgIDU5MTogMCxcclxuICAgIFBFOiAwLFxyXG4gICAgUEVSOiAwLFxyXG4gICAgNjA0OiAwLFxyXG4gICAgUEg6IDAsXHJcbiAgICBQSEw6IDAsXHJcbiAgICA2MDg6IDAsXHJcbiAgICBQSzogMCxcclxuICAgIFBBSzogMCxcclxuICAgIDU4NjogMCxcclxuICAgIFBSOiAwLFxyXG4gICAgUFJJOiAwLFxyXG4gICAgNjMwOiAwLFxyXG4gICAgUFk6IDAsXHJcbiAgICBQUlk6IDAsXHJcbiAgICA2MDA6IDAsXHJcbiAgICBTQTogMCxcclxuICAgIFNBVTogMCxcclxuICAgIDY4MjogMCxcclxuICAgIFNHOiAwLFxyXG4gICAgU0dQOiAwLFxyXG4gICAgNzAyOiAwLFxyXG4gICAgU1Y6IDAsXHJcbiAgICBTTFY6IDAsXHJcbiAgICAyMjI6IDAsXHJcbiAgICBUSDogMCxcclxuICAgIFRIQTogMCxcclxuICAgIDc2NDogMCxcclxuICAgIFROOiAwLFxyXG4gICAgVFVOOiAwLFxyXG4gICAgNzg4OiAwLFxyXG4gICAgVFQ6IDAsXHJcbiAgICBUVE86IDAsXHJcbiAgICA3ODA6IDAsXHJcbiAgICBUVzogMCxcclxuICAgIFRXTjogMCxcclxuICAgIDE1ODogMCxcclxuICAgIFVNOiAwLFxyXG4gICAgVU1JOiAwLFxyXG4gICAgNTgxOiAwLFxyXG4gICAgVVM6IDAsXHJcbiAgICBVU0E6IDAsXHJcbiAgICA4NDA6IDAsXHJcbiAgICBWRTogMCxcclxuICAgIFZFTjogMCxcclxuICAgIDg2MjogMCxcclxuICAgIFZJOiAwLFxyXG4gICAgVklSOiAwLFxyXG4gICAgODUwOiAwLFxyXG4gICAgV1M6IDAsXHJcbiAgICBXU006IDAsXHJcbiAgICA4ODI6IDAsXHJcbiAgICBZRTogMCxcclxuICAgIFlFTTogMCxcclxuICAgIDg4NzogMCxcclxuICAgIFpBOiAwLFxyXG4gICAgWkFGOiAwLFxyXG4gICAgNzEwOiAwLFxyXG4gICAgWlc6IDAsXHJcbiAgICBaV0U6IDAsXHJcbiAgICA3MTY6IDAsXHJcbiAgICBBRTogNixcclxuICAgIEFSRTogNixcclxuICAgIDc4NDogNixcclxuICAgIEFGOiA2LFxyXG4gICAgQUZHOiA2LFxyXG4gICAgNDogNixcclxuICAgIEJIOiA2LFxyXG4gICAgQkhSOiA2LFxyXG4gICAgNDg6IDYsXHJcbiAgICBESjogNixcclxuICAgIERKSTogNixcclxuICAgIDI2MjogNixcclxuICAgIERaOiA2LFxyXG4gICAgRFpBOiA2LFxyXG4gICAgMTI6IDYsXHJcbiAgICBFRzogNixcclxuICAgIEVHWTogNixcclxuICAgIDgxODogNixcclxuICAgIElROiA2LFxyXG4gICAgSVJROiA2LFxyXG4gICAgMzY4OiA2LFxyXG4gICAgSVI6IDYsXHJcbiAgICBJUk46IDYsXHJcbiAgICAzNjQ6IDYsXHJcbiAgICBKTzogNixcclxuICAgIEpPUjogNixcclxuICAgIDQwMDogNixcclxuICAgIEtXOiA2LFxyXG4gICAgS1dUOiA2LFxyXG4gICAgNDE0OiA2LFxyXG4gICAgTFk6IDYsXHJcbiAgICBMQlk6IDYsXHJcbiAgICA0MzQ6IDYsXHJcbiAgICBNQTogNixcclxuICAgIE1BUjogNixcclxuICAgIDUwNDogNixcclxuICAgIE9NOiA2LFxyXG4gICAgT01OOiA2LFxyXG4gICAgNTEyOiA2LFxyXG4gICAgUUE6IDYsXHJcbiAgICBRQVQ6IDYsXHJcbiAgICA2MzQ6IDYsXHJcbiAgICBTRDogNixcclxuICAgIFNETjogNixcclxuICAgIDcyOTogNixcclxuICAgIFNZOiA2LFxyXG4gICAgU1lSOiA2LFxyXG4gICAgNzYwOiA2LFxyXG4gICAgQkQ6IDUsXHJcbiAgICBCR0Q6IDUsXHJcbiAgICA1MDogNSxcclxuICAgIE1WOiA1LFxyXG4gICAgTURWOiA1LFxyXG4gICAgNDYyOiA1XHJcbn07XHJcblxyXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bXCJhXCJdID0gKHJlZ2lvbkRheU1hcCk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZ2lvbkRheU1hcC5qcy5tYXBcclxuXHJcblxyXG4vKioqLyB9KSxcclxuLyogMTkgKi9cclxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxyXG5cclxuLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmJqLW1hc2tzIGxpYi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcbnZhciBpc051bWJlclJlZ2V4ID0gL15cXGQrJC87XHJcbnZhciBpc1doaXRlc3BhY2VSZWdleCA9IC9cXHMvO1xyXG52YXIgcHVuY3R1YXRpb25MaXN0ID0gJyFcIiMkJSZcXCcoKSorLC0uLzo7PD0+P0BbXV5fYHt8fX4nO1xyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHN0cmluZyBpcyBpbiBsb3dlciBjYXNlXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcclxuICovXHJcblxyXG52YXIgaXNMb3dlckNhc2UgPSBmdW5jdGlvbiBpc0xvd2VyQ2FzZShzdHIpIHtcclxuICByZXR1cm4gc3RyID09IHN0ci50b0xvd2VyQ2FzZSgpICYmIHN0ciAhPSBzdHIudG9VcHBlckNhc2UoKTtcclxufTtcclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBzdHJpbmcgaXMgaW4gdXBwZXIgY2FzZVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXHJcbiAqL1xyXG5cclxuXHJcbnZhciBpc1VwcGVyQ2FzZSA9IGZ1bmN0aW9uIGlzVXBwZXJDYXNlKHN0cikge1xyXG4gIHJldHVybiBzdHIgPT0gc3RyLnRvVXBwZXJDYXNlKCkgJiYgc3RyICE9IHN0ci50b0xvd2VyQ2FzZSgpO1xyXG59O1xyXG5cclxudmFyIHBhc3NPclRocm93RXJyb3IgPSBmdW5jdGlvbiBwYXNzT3JUaHJvd0Vycm9yKGxvb3NlLCByZXQsIGksIHN0cikge1xyXG4gIGlmICghbG9vc2UpIHtcclxuICAgIHZhciBfY2hhciA9IHN0ci5jaGFyQXQoaSk7XHJcblxyXG4gICAgdmFyIHBvcyA9IGkgKyAxO1xyXG4gICAgdGhyb3cge1xyXG4gICAgICBuYW1lOiAnU3RyaW5nTWFza0Vycm9yJyxcclxuICAgICAgbWVzc2FnZTogXCJTdHJpbmdNYXNrRXJyb3I6IGVycm9yIGFwcGx5aW5nIG1hc2sgYXQgcG9zaXRpb24gXFxcIlwiLmNvbmNhdChwb3MsIFwiXFxcIiAsIGNoYXIgXFxcIlwiKS5jb25jYXQoX2NoYXIsIFwiXFxcIlwiKSxcclxuICAgICAgcG9zOiBwb3MsXHJcbiAgICAgIFwiY2hhclwiOiBfY2hhclxyXG4gICAgfTtcclxuICB9IGVsc2UgcmV0W2ldID0gJyAnO1xyXG59O1xyXG4vKipcclxuICogTnVtYmVyTWFza1xyXG4gKlxyXG4gKiBBIGphdmFzY3JpcHQgaW1wbGVtZW50YXRpb24gZm9yIEJCaiBudW1iZXJzIG1hc2tpbmdcclxuICpcclxuICogQGF1dGhvciBIeXlhbiBBYm8gRmFraGVyIDxoYWJvZmFraGVyQGJhc2lzLmNvbT5cclxuICovXHJcblxyXG5cclxudmFyIFN0cmluZ01hc2sgPVxyXG4vKiNfX1BVUkVfXyovXHJcbmZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBTdHJpbmdNYXNrKCkge1xyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0cmluZ01hc2spO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZUNsYXNzKFN0cmluZ01hc2ssIG51bGwsIFt7XHJcbiAgICBrZXk6IFwibWFza1wiLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFzayB0aGUgZ2l2ZW4gc3RyaW5nIHdpdGggdGhlIGdpdmVuIG1hc2sgYWNjb3JkaW5nIHRvIEJCaiBydWxlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgdGhlIHN0cmluZyB0byBtYXNrXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWFzayB0aGUgbWFzayB0byB1c2UgZm9yIGZvcm1hdHRpbmdcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2xvb3NlPXRydWVdIHdoZW4gdHJ1ZSAsIGVycm9ycyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSBtZXRob2Qgd2lsbCB0cnkgYXQgYXBwbHkgdGhlIG1hc2tcclxuICAgICAqICAgICAgICAgICAgICAgIGFueXdheSAsIG90aGVyd2lzZSBpdCB3aWxsIHN0b3AgYXQgZmlyc3QgZXJyb3IgYW5kIHRocm93IGl0LlxyXG4gICAgICogXHJcbiAgICAgKiBAdGhyb3dzIHtNYXNrSXNUb29TaG9ydEVycm9yfVxyXG4gICAgICogQHRocm93cyB7U3RyaW5nTWFza0Vycm9yfVxyXG4gICAgICogQHRocm93cyB7TWFza0Vycm9yfVxyXG4gICAgICogXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgbWFza2VkIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFzayhzdHIsIF9tYXNrKSB7XHJcbiAgICAgIHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcclxuICAgICAgc3RyID0gU3RyaW5nKHN0cik7XHJcbiAgICAgIF9tYXNrID0gU3RyaW5nKF9tYXNrKTtcclxuICAgICAgdmFyIG1hc2tMZW4gPSBfbWFzay5sZW5ndGg7XHJcbiAgICAgIHZhciBzdHJMZW4gPSBzdHIubGVuZ3RoO1xyXG5cclxuICAgICAgaWYgKHN0ckxlbiA+IG1hc2tMZW4pIHtcclxuICAgICAgICBpZiAobG9vc2UpIHJldHVybiBzdHI7IC8vIGZyaWVuZGx5IHNpbGVudCBmYWlsXHJcbiAgICAgICAgZWxzZSB0aHJvdyB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdNYXNrSXNUb29TaG9ydEVycm9yJyxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJNYXNrSXNUb29TaG9ydEVycm9yOiBNYXNrIGlzIHNob3J0ZXIgdGhhbiB0aGUgcGFzc2VkIHN0cmluZ1wiXHJcbiAgICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcmV0ID0gbmV3IEFycmF5KG1hc2tMZW4pO1xyXG4gICAgICB2YXIgcG9zID0gMDsgLy8gdG8ga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCBwb3NpdGlvbiBpbiB0aGUgc3RyXHJcblxyXG4gICAgICB2YXIgbWFza0J5dGUgPSAnJztcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFza0xlbjsgaSsrKSB7XHJcbiAgICAgICAgbWFza0J5dGUgPSBfbWFzay5jaGFyQXQoaSk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAobWFza0J5dGUpIHtcclxuICAgICAgICAgIGNhc2UgJ1gnOlxyXG4gICAgICAgICAgICAvLyBtYXRjaCBhbnkgY2hhcmFjdGVyXHJcbiAgICAgICAgICAgIHJldFtpXSA9IHBvcyA8IHN0ckxlbiA/IHN0ci5jaGFyQXQocG9zKSA6ICcgJztcclxuICAgICAgICAgICAgKytwb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICAgICAgICAvLyBtYXRjaCBsZXR0ZXI7IGZvcmNlIHVwcGVyIGNhc2VcclxuICAgICAgICAgICAgaWYgKHBvcyA8IHN0ckxlbikge1xyXG4gICAgICAgICAgICAgIHZhciBfYnl0ZSA9IHN0ci5jaGFyQXQocG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGlzVXBwZXJDYXNlKF9ieXRlKSkgcmV0W2ldID0gX2J5dGU7ZWxzZSBpZiAoaXNMb3dlckNhc2UoX2J5dGUpKSByZXRbaV0gPSBfYnl0ZS50b1VwcGVyQ2FzZSgpO2Vsc2UgcGFzc09yVGhyb3dFcnJvcihsb29zZSwgcmV0LCBpLCBzdHIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgcmV0W2ldID0gJyAnO1xyXG5cclxuICAgICAgICAgICAgKytwb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ2EnOlxyXG4gICAgICAgICAgICAvLyBtYXRjaCBsZXR0ZXJcclxuICAgICAgICAgICAgaWYgKHBvcyA8IHN0ckxlbikge1xyXG4gICAgICAgICAgICAgIHZhciBfYnl0ZTIgPSBzdHIuY2hhckF0KHBvcyk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChpc1VwcGVyQ2FzZShfYnl0ZTIpIHx8IGlzTG93ZXJDYXNlKF9ieXRlMikpIHJldFtpXSA9IF9ieXRlMjtlbHNlIHBhc3NPclRocm93RXJyb3IobG9vc2UsIHJldCwgaSwgc3RyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHJldFtpXSA9ICcgJztcclxuXHJcbiAgICAgICAgICAgICsrcG9zO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICcwJzpcclxuICAgICAgICAgICAgLy8gbWF0Y2ggZGlnaXRcclxuICAgICAgICAgICAgaWYgKHBvcyA8IHN0ckxlbikge1xyXG4gICAgICAgICAgICAgIHZhciBfYnl0ZTMgPSBzdHIuY2hhckF0KHBvcyk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChpc051bWJlclJlZ2V4LnRlc3QoX2J5dGUzKSkgcmV0W2ldID0gX2J5dGUzO2Vsc2UgcGFzc09yVGhyb3dFcnJvcihsb29zZSwgcmV0LCBpLCBzdHIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgcmV0W2ldID0gJyAnO1xyXG5cclxuICAgICAgICAgICAgKytwb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgICAgICAvLyBtYXRjaCBsZXR0ZXIgb3IgZGlnaXQ7IGZvcmNlIHVwcGVyIGNhc2VcclxuICAgICAgICAgICAgaWYgKHBvcyA8IHN0ckxlbikge1xyXG4gICAgICAgICAgICAgIHZhciBfYnl0ZTQgPSBzdHIuY2hhckF0KHBvcyk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChpc1VwcGVyQ2FzZShfYnl0ZTQpIHx8IGlzTnVtYmVyUmVnZXgudGVzdChfYnl0ZTQpKSByZXRbaV0gPSBfYnl0ZTQ7ZWxzZSBpZiAoaXNMb3dlckNhc2UoX2J5dGU0KSkgcmV0W2ldID0gX2J5dGU0LnRvVXBwZXJDYXNlKCk7ZWxzZSBwYXNzT3JUaHJvd0Vycm9yKGxvb3NlLCByZXQsIGksIHN0cik7XHJcbiAgICAgICAgICAgIH0gZWxzZSByZXRbaV0gPSAnICc7XHJcblxyXG4gICAgICAgICAgICArK3BvcztcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgY2FzZSAneic6XHJcbiAgICAgICAgICAgIC8vIG1hdGNoIGxldHRlciBvciBkaWdpdFxyXG4gICAgICAgICAgICBpZiAocG9zIDwgc3RyTGVuKSB7XHJcbiAgICAgICAgICAgICAgdmFyIF9ieXRlNSA9IHN0ci5jaGFyQXQocG9zKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGlzVXBwZXJDYXNlKF9ieXRlNSkgfHwgaXNMb3dlckNhc2UoX2J5dGU1KSB8fCBpc051bWJlclJlZ2V4LnRlc3QoX2J5dGU1KSkgcmV0W2ldID0gX2J5dGU1O2Vsc2UgcGFzc09yVGhyb3dFcnJvcihsb29zZSwgcmV0LCBpLCBzdHIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgcmV0W2ldID0gJyAnO1xyXG5cclxuICAgICAgICAgICAgKytwb3M7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICBjYXNlICdVJzpcclxuICAgICAgICAgICAgLy8gbWF0Y2ggbGV0dGVyIChmb3JjZSB1cHBlciBjYXNlKSwgZGlnaXQsIHdoaXRlc3BhY2Ugb3IgcHVuY3R1YXRpb24uXHJcbiAgICAgICAgICAgIGlmIChwb3MgPCBzdHJMZW4pIHtcclxuICAgICAgICAgICAgICB2YXIgX2J5dGU2ID0gc3RyLmNoYXJBdChwb3MpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoaXNMb3dlckNhc2UoX2J5dGU2KSkgcmV0W2ldID0gX2J5dGU2LnRvVXBwZXJDYXNlKCk7ZWxzZSBpZiAoaXNVcHBlckNhc2UoX2J5dGU2KSB8fCBpc051bWJlclJlZ2V4LnRlc3QoX2J5dGU2KSB8fCBpc1doaXRlc3BhY2VSZWdleC50ZXN0KF9ieXRlNikgfHwgcHVuY3R1YXRpb25MaXN0LmluZGV4T2YoX2J5dGU2KSA+IC0xKSByZXRbaV0gPSBfYnl0ZTY7ZWxzZSBwYXNzT3JUaHJvd0Vycm9yKGxvb3NlLCByZXQsIGksIHN0cik7XHJcbiAgICAgICAgICAgIH0gZWxzZSByZXRbaV0gPSAnICc7XHJcblxyXG4gICAgICAgICAgICArK3BvcztcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0W2ldID0gbWFza0J5dGU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHBvcyA8IHN0ckxlbikge1xyXG4gICAgICAgIGlmICghbG9vc2UpIHtcclxuICAgICAgICAgIHRocm93IHtcclxuICAgICAgICAgICAgbmFtZTogJ01hc2tFcnJvcicsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdNYXNrIGNhbm5vdCBiZSBhcHBsaWVkJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXQuam9pbignJyk7XHJcbiAgICB9XHJcbiAgfV0pO1xyXG5cclxuICByZXR1cm4gU3RyaW5nTWFzaztcclxufSgpO1xyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChTdHJpbmdNYXNrKTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyMCAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fVHlwZXNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xyXG4vKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiBiYmotbWFza3MgbGliLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcImFcIl0gPSAoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19UeXBlc19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dKTtcclxuXHJcbi8qKiovIH0pLFxyXG4vKiAyMSAqL1xyXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XHJcblxyXG5cInVzZSBzdHJpY3RcIjtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fTnVtYmVyTWFza19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcclxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fRGF0ZU1hc2tfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1N0cmluZ01hc2tfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxyXG5cclxuLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgYmJqLW1hc2tzIGxpYi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUeXBlc1xyXG4gKlxyXG4gKiBCQmogbWFza3MgZmFjdG9yeVxyXG4gKlxyXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXIgPGhhYm9mYWtoZXJAYmFzaXMuY29tPlxyXG4gKi9cclxuXHJcbnZhciBUeXBlcyA9XHJcbi8qI19fUFVSRV9fKi9cclxuZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIFR5cGVzKCkge1xyXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR5cGVzKTtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhUeXBlcywgbnVsbCwgW3tcclxuICAgIGtleTogXCJudW1iZXJcIixcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1hc2sgdGhlIGdpdmVuIG51bWJlciB3aXRoIHRoZSBnaXZlbiBtYXNrIGFjY29yZGluZyB0byBCQmogcnVsZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbnVtYmVyIHRoZSBudW1iZXIgdG8gZm9ybWF0XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWFzayB0aGUgbWFzayB0byB1c2UgZm9yIGZvcm1hdHRpbmdcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbZ3JvdXBpbmdTZXBhcmF0b3I9LF0gLSBhIGNoYXIgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIGEgZ3JvdXBpbmcgc2VwYXJhdG9yXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2RlY2ltYWxTZXBhcmF0b3I9Ll0gIC0gYSBjaGFyIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyBhIGRlY2ltYWwgc2VwYXJhdG9yXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZVRyYWlsaW5nWmVyb3M9ZmFsc2VdIC0gQWZmZWN0cyB0aGUgb3V0cHV0IGJ5IHN3aXRjaGluZyB0aGUgd2F5IGEgbWFzayB3aXRoIFwiI1wiIGNoYXJhY3RlcnMgaW4gdGhlIHRyYWlsaW5nIHBvc2l0aW9ucyBpcyBmaWxsZWQuXHJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSwgdGhlIGZ1bmN0aW9uIGBOdW1iZXJNYXNrLm1hc2soLjEwOlwiIy4jI1wiKWAgcmV0dXJucyBgIC4xMGAgaW5zdGVhZCBvZiBgIC4xIGBcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2xvb3NlPXRydWVdIHdoZW4gdHJ1ZSAsIGVycm9ycyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSBtZXRob2Qgd2lsbCB0cnkgYXQgYXBwbHkgdGhlIG1hc2tcclxuICAgICAqICAgICAgICAgICAgICAgIGFueXdheSAsIG90aGVyd2lzZSBpdCB3aWxsIHN0b3AgYXQgZmlyc3QgZXJyb3IgYW5kIHRocm93IGl0LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBtYXNrZWQgbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIHZhbHVlOiBmdW5jdGlvbiBudW1iZXIoX251bWJlciwgbWFzaykge1xyXG4gICAgICB2YXIgZ3JvdXBpbmdTZXBhcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcsJztcclxuICAgICAgdmFyIGRlY2ltYWxTZXBhcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6ICcuJztcclxuICAgICAgdmFyIGZvcmNlVHJhaWxpbmdaZXJvcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7XHJcbiAgICAgIHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogdHJ1ZTtcclxuICAgICAgcmV0dXJuIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fTnVtYmVyTWFza19fW1wiYVwiIC8qIGRlZmF1bHQgKi9dLm1hc2soX251bWJlciwgbWFzaywgZ3JvdXBpbmdTZXBhcmF0b3IsIGRlY2ltYWxTZXBhcmF0b3IsIGZvcmNlVHJhaWxpbmdaZXJvcywgbG9vc2UpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXNrIGEgZGF0ZSBhY2NvcmRpbmcgdG8gYmJqIG1hc2tpbmcgcnVsZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0ZSBkYXRlIGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWFzayBtYXNrIGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2xvY2FsZT1Ccm93c2VyJ3MgbG9jYWxlXSB0aGUgbGFuZ3VhZ2UgdG8gdXNlIGV4KGVuLVVTKS4gZGVmYXVsdCBpcyB0byB0aGUgc3lzdGVtIGxhbmd1YWdlXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3RpbWV6b25lPVN5c3RlbSB0aW1lem9uZV0gdGhlIHRpbWUgem9uZSBkZXNjcmlwdG9yIChlLmcuIEFtZXJpY2EvTG9zX0FuZ2VsZXMpLiBkZWZhdWx0IHRvIHRoZSBzeXN0ZW1cclxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lem9uZVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gbnVtYmVyIG1hc2tlZCB3aXRoIHRoZSBnaXZlbiBtYXNrXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcImRhdGVcIixcclxuICAgIHZhbHVlOiBmdW5jdGlvbiBkYXRlKF9kYXRlLCBtYXNrLCBsb2NhbGUsIHRpbWV6b25lKSB7XHJcbiAgICAgIHJldHVybiBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX0RhdGVNYXNrX19bXCJjXCIgLyogZGVmYXVsdCAqL10ubWFzayhfZGF0ZSwgbWFzaywgbG9jYWxlLCB0aW1lem9uZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1hc2sgdGhlIGdpdmVuIHN0cmluZyB3aXRoIHRoZSBnaXZlbiBtYXNrIGFjY29yZGluZyB0byBCQmogcnVsZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyIHRoZSBzdHJpbmcgdG8gbWFza1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1hc2sgdGhlIG1hc2sgdG8gdXNlIGZvciBmb3JtYXR0aW5nXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtsb29zZT10cnVlXSB3aGVuIHRydWUgLCBlcnJvcnMgd2lsbCBiZSBpZ25vcmVkIGFuZCB0aGUgbWV0aG9kIHdpbGwgdHJ5IGF0IGFwcGx5IHRoZSBtYXNrXHJcbiAgICAgKiAgICAgICAgICAgICAgICBhbnl3YXkgLCBvdGhlcndpc2UgaXQgd2lsbCBzdG9wIGF0IGZpcnN0IGVycm9yIGFuZCB0aHJvdyBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAdGhyb3dzIHtNYXNrSXNUb29TaG9ydEVycm9yfVxyXG4gICAgICogQHRocm93cyB7U3RyaW5nTWFza0Vycm9yfVxyXG4gICAgICogQHRocm93cyB7TWFza0Vycm9yfVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBtYXNrZWQgc3RyaW5nXHJcbiAgICAgKi9cclxuXHJcbiAgfSwge1xyXG4gICAga2V5OiBcInN0cmluZ1wiLFxyXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0cmluZyhzdHIsIG1hc2spIHtcclxuICAgICAgdmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xyXG4gICAgICByZXR1cm4gX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19TdHJpbmdNYXNrX19bXCJhXCIgLyogZGVmYXVsdCAqL10ubWFzayhzdHIsIG1hc2ssIGxvb3NlKTtcclxuICAgIH1cclxuICB9XSk7XHJcblxyXG4gIHJldHVybiBUeXBlcztcclxufSgpO1xyXG5cclxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiYVwiXSA9IChUeXBlcyk7XHJcblxyXG4vKioqLyB9KVxyXG4vKioqKioqLyBdKTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJiai1tYXNrcy5qcy5tYXAiLCIvKiBmbGF0cGlja3IgdjQuNi42LCBAbGljZW5zZSBNSVQgKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuZmxhdHBpY2tyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcbiAgICBQZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxuICAgIHB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcbiAgICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcbiAgICBSRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuICAgIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuICAgIElORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG4gICAgTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuICAgIE9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuICAgIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbiAgICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG5cclxuICAgIHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICAgICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgICAgIHJldHVybiByO1xyXG4gICAgfVxuXG4gICAgdmFyIEhPT0tTID0gW1xuICAgICAgICBcIm9uQ2hhbmdlXCIsXG4gICAgICAgIFwib25DbG9zZVwiLFxuICAgICAgICBcIm9uRGF5Q3JlYXRlXCIsXG4gICAgICAgIFwib25EZXN0cm95XCIsXG4gICAgICAgIFwib25LZXlEb3duXCIsXG4gICAgICAgIFwib25Nb250aENoYW5nZVwiLFxuICAgICAgICBcIm9uT3BlblwiLFxuICAgICAgICBcIm9uUGFyc2VDb25maWdcIixcbiAgICAgICAgXCJvblJlYWR5XCIsXG4gICAgICAgIFwib25WYWx1ZVVwZGF0ZVwiLFxuICAgICAgICBcIm9uWWVhckNoYW5nZVwiLFxuICAgICAgICBcIm9uUHJlQ2FsZW5kYXJQb3NpdGlvblwiLFxuICAgIF07XG4gICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICBfZGlzYWJsZTogW10sXG4gICAgICAgIF9lbmFibGU6IFtdLFxuICAgICAgICBhbGxvd0lucHV0OiBmYWxzZSxcbiAgICAgICAgYWxsb3dJbnZhbGlkUHJlbG9hZDogZmFsc2UsXG4gICAgICAgIGFsdEZvcm1hdDogXCJGIGosIFlcIixcbiAgICAgICAgYWx0SW5wdXQ6IGZhbHNlLFxuICAgICAgICBhbHRJbnB1dENsYXNzOiBcImZvcm0tY29udHJvbCBpbnB1dFwiLFxuICAgICAgICBhbmltYXRlOiB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRVwiKSA9PT0gLTEsXG4gICAgICAgIGFyaWFEYXRlRm9ybWF0OiBcIkYgaiwgWVwiLFxuICAgICAgICBhdXRvRmlsbERlZmF1bHRUaW1lOiB0cnVlLFxuICAgICAgICBjbGlja09wZW5zOiB0cnVlLFxuICAgICAgICBjbG9zZU9uU2VsZWN0OiB0cnVlLFxuICAgICAgICBjb25qdW5jdGlvbjogXCIsIFwiLFxuICAgICAgICBkYXRlRm9ybWF0OiBcIlktbS1kXCIsXG4gICAgICAgIGRlZmF1bHRIb3VyOiAxMixcbiAgICAgICAgZGVmYXVsdE1pbnV0ZTogMCxcbiAgICAgICAgZGVmYXVsdFNlY29uZHM6IDAsXG4gICAgICAgIGRpc2FibGU6IFtdLFxuICAgICAgICBkaXNhYmxlTW9iaWxlOiBmYWxzZSxcbiAgICAgICAgZW5hYmxlOiBbXSxcbiAgICAgICAgZW5hYmxlU2Vjb25kczogZmFsc2UsXG4gICAgICAgIGVuYWJsZVRpbWU6IGZhbHNlLFxuICAgICAgICBlcnJvckhhbmRsZXI6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0V2VlazogZnVuY3Rpb24gKGdpdmVuRGF0ZSkge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShnaXZlbkRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICAgICAgICAvLyBUaHVyc2RheSBpbiBjdXJyZW50IHdlZWsgZGVjaWRlcyB0aGUgeWVhci5cbiAgICAgICAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIDMgLSAoKGRhdGUuZ2V0RGF5KCkgKyA2KSAlIDcpKTtcbiAgICAgICAgICAgIC8vIEphbnVhcnkgNCBpcyBhbHdheXMgaW4gd2VlayAxLlxuICAgICAgICAgICAgdmFyIHdlZWsxID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCA0KTtcbiAgICAgICAgICAgIC8vIEFkanVzdCB0byBUaHVyc2RheSBpbiB3ZWVrIDEgYW5kIGNvdW50IG51bWJlciBvZiB3ZWVrcyBmcm9tIGRhdGUgdG8gd2VlazEuXG4gICAgICAgICAgICByZXR1cm4gKDEgK1xuICAgICAgICAgICAgICAgIE1hdGgucm91bmQoKChkYXRlLmdldFRpbWUoKSAtIHdlZWsxLmdldFRpbWUoKSkgLyA4NjQwMDAwMCAtXG4gICAgICAgICAgICAgICAgICAgIDMgK1xuICAgICAgICAgICAgICAgICAgICAoKHdlZWsxLmdldERheSgpICsgNikgJSA3KSkgL1xuICAgICAgICAgICAgICAgICAgICA3KSk7XG4gICAgICAgIH0sXG4gICAgICAgIGhvdXJJbmNyZW1lbnQ6IDEsXG4gICAgICAgIGlnbm9yZWRGb2N1c0VsZW1lbnRzOiBbXSxcbiAgICAgICAgaW5saW5lOiBmYWxzZSxcbiAgICAgICAgbG9jYWxlOiBcImRlZmF1bHRcIixcbiAgICAgICAgbWludXRlSW5jcmVtZW50OiA1LFxuICAgICAgICBtb2RlOiBcInNpbmdsZVwiLFxuICAgICAgICBtb250aFNlbGVjdG9yVHlwZTogXCJkcm9wZG93blwiLFxuICAgICAgICBuZXh0QXJyb3c6IFwiPHN2ZyB2ZXJzaW9uPScxLjEnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgeG1sbnM6eGxpbms9J2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnIHZpZXdCb3g9JzAgMCAxNyAxNyc+PGc+PC9nPjxwYXRoIGQ9J00xMy4yMDcgOC40NzJsLTcuODU0IDcuODU0LTAuNzA3LTAuNzA3IDcuMTQ2LTcuMTQ2LTcuMTQ2LTcuMTQ4IDAuNzA3LTAuNzA3IDcuODU0IDcuODU0eicgLz48L3N2Zz5cIixcbiAgICAgICAgbm9DYWxlbmRhcjogZmFsc2UsXG4gICAgICAgIG5vdzogbmV3IERhdGUoKSxcbiAgICAgICAgb25DaGFuZ2U6IFtdLFxuICAgICAgICBvbkNsb3NlOiBbXSxcbiAgICAgICAgb25EYXlDcmVhdGU6IFtdLFxuICAgICAgICBvbkRlc3Ryb3k6IFtdLFxuICAgICAgICBvbktleURvd246IFtdLFxuICAgICAgICBvbk1vbnRoQ2hhbmdlOiBbXSxcbiAgICAgICAgb25PcGVuOiBbXSxcbiAgICAgICAgb25QYXJzZUNvbmZpZzogW10sXG4gICAgICAgIG9uUmVhZHk6IFtdLFxuICAgICAgICBvblZhbHVlVXBkYXRlOiBbXSxcbiAgICAgICAgb25ZZWFyQ2hhbmdlOiBbXSxcbiAgICAgICAgb25QcmVDYWxlbmRhclBvc2l0aW9uOiBbXSxcbiAgICAgICAgcGx1Z2luczogW10sXG4gICAgICAgIHBvc2l0aW9uOiBcImF1dG9cIixcbiAgICAgICAgcG9zaXRpb25FbGVtZW50OiB1bmRlZmluZWQsXG4gICAgICAgIHByZXZBcnJvdzogXCI8c3ZnIHZlcnNpb249JzEuMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgdmlld0JveD0nMCAwIDE3IDE3Jz48Zz48L2c+PHBhdGggZD0nTTUuMjA3IDguNDcxbDcuMTQ2IDcuMTQ3LTAuNzA3IDAuNzA3LTcuODUzLTcuODU0IDcuODU0LTcuODUzIDAuNzA3IDAuNzA3LTcuMTQ3IDcuMTQ2eicgLz48L3N2Zz5cIixcbiAgICAgICAgc2hvcnRoYW5kQ3VycmVudE1vbnRoOiBmYWxzZSxcbiAgICAgICAgc2hvd01vbnRoczogMSxcbiAgICAgICAgc3RhdGljOiBmYWxzZSxcbiAgICAgICAgdGltZV8yNGhyOiBmYWxzZSxcbiAgICAgICAgd2Vla051bWJlcnM6IGZhbHNlLFxuICAgICAgICB3cmFwOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgdmFyIGVuZ2xpc2ggPSB7XG4gICAgICAgIHdlZWtkYXlzOiB7XG4gICAgICAgICAgICBzaG9ydGhhbmQ6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgICAgICAgICAgIGxvbmdoYW5kOiBbXG4gICAgICAgICAgICAgICAgXCJTdW5kYXlcIixcbiAgICAgICAgICAgICAgICBcIk1vbmRheVwiLFxuICAgICAgICAgICAgICAgIFwiVHVlc2RheVwiLFxuICAgICAgICAgICAgICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgICAgICAgICAgICAgXCJUaHVyc2RheVwiLFxuICAgICAgICAgICAgICAgIFwiRnJpZGF5XCIsXG4gICAgICAgICAgICAgICAgXCJTYXR1cmRheVwiLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzOiB7XG4gICAgICAgICAgICBzaG9ydGhhbmQ6IFtcbiAgICAgICAgICAgICAgICBcIkphblwiLFxuICAgICAgICAgICAgICAgIFwiRmViXCIsXG4gICAgICAgICAgICAgICAgXCJNYXJcIixcbiAgICAgICAgICAgICAgICBcIkFwclwiLFxuICAgICAgICAgICAgICAgIFwiTWF5XCIsXG4gICAgICAgICAgICAgICAgXCJKdW5cIixcbiAgICAgICAgICAgICAgICBcIkp1bFwiLFxuICAgICAgICAgICAgICAgIFwiQXVnXCIsXG4gICAgICAgICAgICAgICAgXCJTZXBcIixcbiAgICAgICAgICAgICAgICBcIk9jdFwiLFxuICAgICAgICAgICAgICAgIFwiTm92XCIsXG4gICAgICAgICAgICAgICAgXCJEZWNcIixcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBsb25naGFuZDogW1xuICAgICAgICAgICAgICAgIFwiSmFudWFyeVwiLFxuICAgICAgICAgICAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgICAgICAgICAgICBcIk1hcmNoXCIsXG4gICAgICAgICAgICAgICAgXCJBcHJpbFwiLFxuICAgICAgICAgICAgICAgIFwiTWF5XCIsXG4gICAgICAgICAgICAgICAgXCJKdW5lXCIsXG4gICAgICAgICAgICAgICAgXCJKdWx5XCIsXG4gICAgICAgICAgICAgICAgXCJBdWd1c3RcIixcbiAgICAgICAgICAgICAgICBcIlNlcHRlbWJlclwiLFxuICAgICAgICAgICAgICAgIFwiT2N0b2JlclwiLFxuICAgICAgICAgICAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgICAgICAgICAgICBcIkRlY2VtYmVyXCIsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBkYXlzSW5Nb250aDogWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLFxuICAgICAgICBmaXJzdERheU9mV2VlazogMCxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG50aCkge1xuICAgICAgICAgICAgdmFyIHMgPSBudGggJSAxMDA7XG4gICAgICAgICAgICBpZiAocyA+IDMgJiYgcyA8IDIxKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInRoXCI7XG4gICAgICAgICAgICBzd2l0Y2ggKHMgJSAxMCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic3RcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5kXCI7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJyZFwiO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRoXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJhbmdlU2VwYXJhdG9yOiBcIiB0byBcIixcbiAgICAgICAgd2Vla0FiYnJldmlhdGlvbjogXCJXa1wiLFxuICAgICAgICBzY3JvbGxUaXRsZTogXCJTY3JvbGwgdG8gaW5jcmVtZW50XCIsXG4gICAgICAgIHRvZ2dsZVRpdGxlOiBcIkNsaWNrIHRvIHRvZ2dsZVwiLFxuICAgICAgICBhbVBNOiBbXCJBTVwiLCBcIlBNXCJdLFxuICAgICAgICB5ZWFyQXJpYUxhYmVsOiBcIlllYXJcIixcbiAgICAgICAgbW9udGhBcmlhTGFiZWw6IFwiTW9udGhcIixcbiAgICAgICAgaG91ckFyaWFMYWJlbDogXCJIb3VyXCIsXG4gICAgICAgIG1pbnV0ZUFyaWFMYWJlbDogXCJNaW51dGVcIixcbiAgICAgICAgdGltZV8yNGhyOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgdmFyIHBhZCA9IGZ1bmN0aW9uIChudW1iZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAobGVuZ3RoID09PSB2b2lkIDApIHsgbGVuZ3RoID0gMjsgfVxuICAgICAgICByZXR1cm4gKFwiMDAwXCIgKyBudW1iZXIpLnNsaWNlKGxlbmd0aCAqIC0xKTtcbiAgICB9O1xuICAgIHZhciBpbnQgPSBmdW5jdGlvbiAoYm9vbCkgeyByZXR1cm4gKGJvb2wgPT09IHRydWUgPyAxIDogMCk7IH07XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICAgICAgaWYgKGltbWVkaWF0ZSA9PT0gdm9pZCAwKSB7IGltbWVkaWF0ZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgdGltZW91dCAhPT0gbnVsbCAmJiBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICghaW1tZWRpYXRlKVxuICAgICAgICAgICAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgICAgfSwgd2FpdCk7XG4gICAgICAgICAgICBpZiAoaW1tZWRpYXRlICYmICF0aW1lb3V0KVxuICAgICAgICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBhcnJheWlmeSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEFycmF5ID8gb2JqIDogW29ial07XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsZW0sIGNsYXNzTmFtZSwgYm9vbCkge1xuICAgICAgICBpZiAoYm9vbCA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc05hbWUsIGNvbnRlbnQpIHtcbiAgICAgICAgdmFyIGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgXCJcIjtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQgfHwgXCJcIjtcbiAgICAgICAgZS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgICAgIGlmIChjb250ZW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBlLnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFyTm9kZShub2RlKSB7XG4gICAgICAgIHdoaWxlIChub2RlLmZpcnN0Q2hpbGQpXG4gICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRQYXJlbnQobm9kZSwgY29uZGl0aW9uKSB7XG4gICAgICAgIGlmIChjb25kaXRpb24obm9kZSkpXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlKVxuICAgICAgICAgICAgcmV0dXJuIGZpbmRQYXJlbnQobm9kZS5wYXJlbnROb2RlLCBjb25kaXRpb24pO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBub3RoaW5nIGZvdW5kXG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU51bWJlcklucHV0KGlucHV0Q2xhc3NOYW1lLCBvcHRzKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcIm51bUlucHV0V3JhcHBlclwiKSwgbnVtSW5wdXQgPSBjcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgXCJudW1JbnB1dCBcIiArIGlucHV0Q2xhc3NOYW1lKSwgYXJyb3dVcCA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiYXJyb3dVcFwiKSwgYXJyb3dEb3duID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJhcnJvd0Rvd25cIik7XG4gICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNU0lFIDkuMFwiKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG51bUlucHV0LnR5cGUgPSBcIm51bWJlclwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbnVtSW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICAgICAgbnVtSW5wdXQucGF0dGVybiA9IFwiXFxcXGQqXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRzKVxuICAgICAgICAgICAgICAgIG51bUlucHV0LnNldEF0dHJpYnV0ZShrZXksIG9wdHNba2V5XSk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobnVtSW5wdXQpO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93VXApO1xuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGFycm93RG93bik7XG4gICAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFdmVudFRhcmdldChldmVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5jb21wb3NlZFBhdGggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhdGhbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQudGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkb05vdGhpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH07XG4gICAgdmFyIG1vbnRoVG9TdHIgPSBmdW5jdGlvbiAobW9udGhOdW1iZXIsIHNob3J0aGFuZCwgbG9jYWxlKSB7IHJldHVybiBsb2NhbGUubW9udGhzW3Nob3J0aGFuZCA/IFwic2hvcnRoYW5kXCIgOiBcImxvbmdoYW5kXCJdW21vbnRoTnVtYmVyXTsgfTtcbiAgICB2YXIgcmV2Rm9ybWF0ID0ge1xuICAgICAgICBEOiBkb05vdGhpbmcsXG4gICAgICAgIEY6IGZ1bmN0aW9uIChkYXRlT2JqLCBtb250aE5hbWUsIGxvY2FsZSkge1xuICAgICAgICAgICAgZGF0ZU9iai5zZXRNb250aChsb2NhbGUubW9udGhzLmxvbmdoYW5kLmluZGV4T2YobW9udGhOYW1lKSk7XG4gICAgICAgIH0sXG4gICAgICAgIEc6IGZ1bmN0aW9uIChkYXRlT2JqLCBob3VyKSB7XG4gICAgICAgICAgICBkYXRlT2JqLnNldEhvdXJzKHBhcnNlRmxvYXQoaG91cikpO1xuICAgICAgICB9LFxuICAgICAgICBIOiBmdW5jdGlvbiAoZGF0ZU9iaiwgaG91cikge1xuICAgICAgICAgICAgZGF0ZU9iai5zZXRIb3VycyhwYXJzZUZsb2F0KGhvdXIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgSjogZnVuY3Rpb24gKGRhdGVPYmosIGRheSkge1xuICAgICAgICAgICAgZGF0ZU9iai5zZXREYXRlKHBhcnNlRmxvYXQoZGF5KSk7XG4gICAgICAgIH0sXG4gICAgICAgIEs6IGZ1bmN0aW9uIChkYXRlT2JqLCBhbVBNLCBsb2NhbGUpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0SG91cnMoKGRhdGVPYmouZ2V0SG91cnMoKSAlIDEyKSArXG4gICAgICAgICAgICAgICAgMTIgKiBpbnQobmV3IFJlZ0V4cChsb2NhbGUuYW1QTVsxXSwgXCJpXCIpLnRlc3QoYW1QTSkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgTTogZnVuY3Rpb24gKGRhdGVPYmosIHNob3J0TW9udGgsIGxvY2FsZSkge1xuICAgICAgICAgICAgZGF0ZU9iai5zZXRNb250aChsb2NhbGUubW9udGhzLnNob3J0aGFuZC5pbmRleE9mKHNob3J0TW9udGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgUzogZnVuY3Rpb24gKGRhdGVPYmosIHNlY29uZHMpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0U2Vjb25kcyhwYXJzZUZsb2F0KHNlY29uZHMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgVTogZnVuY3Rpb24gKF8sIHVuaXhTZWNvbmRzKSB7IHJldHVybiBuZXcgRGF0ZShwYXJzZUZsb2F0KHVuaXhTZWNvbmRzKSAqIDEwMDApOyB9LFxuICAgICAgICBXOiBmdW5jdGlvbiAoZGF0ZU9iaiwgd2Vla051bSwgbG9jYWxlKSB7XG4gICAgICAgICAgICB2YXIgd2Vla051bWJlciA9IHBhcnNlSW50KHdlZWtOdW0pO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShkYXRlT2JqLmdldEZ1bGxZZWFyKCksIDAsIDIgKyAod2Vla051bWJlciAtIDEpICogNywgMCwgMCwgMCwgMCk7XG4gICAgICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkYXRlLmdldERheSgpICsgbG9jYWxlLmZpcnN0RGF5T2ZXZWVrKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9LFxuICAgICAgICBZOiBmdW5jdGlvbiAoZGF0ZU9iaiwgeWVhcikge1xuICAgICAgICAgICAgZGF0ZU9iai5zZXRGdWxsWWVhcihwYXJzZUZsb2F0KHllYXIpKTtcbiAgICAgICAgfSxcbiAgICAgICAgWjogZnVuY3Rpb24gKF8sIElTT0RhdGUpIHsgcmV0dXJuIG5ldyBEYXRlKElTT0RhdGUpOyB9LFxuICAgICAgICBkOiBmdW5jdGlvbiAoZGF0ZU9iaiwgZGF5KSB7XG4gICAgICAgICAgICBkYXRlT2JqLnNldERhdGUocGFyc2VGbG9hdChkYXkpKTtcbiAgICAgICAgfSxcbiAgICAgICAgaDogZnVuY3Rpb24gKGRhdGVPYmosIGhvdXIpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0SG91cnMocGFyc2VGbG9hdChob3VyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGk6IGZ1bmN0aW9uIChkYXRlT2JqLCBtaW51dGVzKSB7XG4gICAgICAgICAgICBkYXRlT2JqLnNldE1pbnV0ZXMocGFyc2VGbG9hdChtaW51dGVzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGo6IGZ1bmN0aW9uIChkYXRlT2JqLCBkYXkpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0RGF0ZShwYXJzZUZsb2F0KGRheSkpO1xuICAgICAgICB9LFxuICAgICAgICBsOiBkb05vdGhpbmcsXG4gICAgICAgIG06IGZ1bmN0aW9uIChkYXRlT2JqLCBtb250aCkge1xuICAgICAgICAgICAgZGF0ZU9iai5zZXRNb250aChwYXJzZUZsb2F0KG1vbnRoKSAtIDEpO1xuICAgICAgICB9LFxuICAgICAgICBuOiBmdW5jdGlvbiAoZGF0ZU9iaiwgbW9udGgpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0TW9udGgocGFyc2VGbG9hdChtb250aCkgLSAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgczogZnVuY3Rpb24gKGRhdGVPYmosIHNlY29uZHMpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0U2Vjb25kcyhwYXJzZUZsb2F0KHNlY29uZHMpKTtcbiAgICAgICAgfSxcbiAgICAgICAgdTogZnVuY3Rpb24gKF8sIHVuaXhNaWxsU2Vjb25kcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHBhcnNlRmxvYXQodW5peE1pbGxTZWNvbmRzKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHc6IGRvTm90aGluZyxcbiAgICAgICAgeTogZnVuY3Rpb24gKGRhdGVPYmosIHllYXIpIHtcbiAgICAgICAgICAgIGRhdGVPYmouc2V0RnVsbFllYXIoMjAwMCArIHBhcnNlRmxvYXQoeWVhcikpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgdmFyIHRva2VuUmVnZXggPSB7XG4gICAgICAgIEQ6IFwiKFxcXFx3KylcIixcbiAgICAgICAgRjogXCIoXFxcXHcrKVwiLFxuICAgICAgICBHOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgICBIOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgICBKOiBcIihcXFxcZFxcXFxkfFxcXFxkKVxcXFx3K1wiLFxuICAgICAgICBLOiBcIlwiLFxuICAgICAgICBNOiBcIihcXFxcdyspXCIsXG4gICAgICAgIFM6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICAgIFU6IFwiKC4rKVwiLFxuICAgICAgICBXOiBcIihcXFxcZFxcXFxkfFxcXFxkKVwiLFxuICAgICAgICBZOiBcIihcXFxcZHs0fSlcIixcbiAgICAgICAgWjogXCIoLispXCIsXG4gICAgICAgIGQ6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICAgIGg6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICAgIGk6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICAgIGo6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICAgIGw6IFwiKFxcXFx3KylcIixcbiAgICAgICAgbTogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgICAgbjogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgICAgczogXCIoXFxcXGRcXFxcZHxcXFxcZClcIixcbiAgICAgICAgdTogXCIoLispXCIsXG4gICAgICAgIHc6IFwiKFxcXFxkXFxcXGR8XFxcXGQpXCIsXG4gICAgICAgIHk6IFwiKFxcXFxkezJ9KVwiLFxuICAgIH07XG4gICAgdmFyIGZvcm1hdHMgPSB7XG4gICAgICAgIC8vIGdldCB0aGUgZGF0ZSBpbiBVVENcbiAgICAgICAgWjogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUudG9JU09TdHJpbmcoKTsgfSxcbiAgICAgICAgLy8gd2Vla2RheSBuYW1lLCBzaG9ydCwgZS5nLiBUaHVcbiAgICAgICAgRDogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5cy5zaG9ydGhhbmRbZm9ybWF0cy53KGRhdGUsIGxvY2FsZSwgb3B0aW9ucyldO1xuICAgICAgICB9LFxuICAgICAgICAvLyBmdWxsIG1vbnRoIG5hbWUgZS5nLiBKYW51YXJ5XG4gICAgICAgIEY6IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aFRvU3RyKGZvcm1hdHMubihkYXRlLCBsb2NhbGUsIG9wdGlvbnMpIC0gMSwgZmFsc2UsIGxvY2FsZSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHBhZGRlZCBob3VyIDEtMTJcbiAgICAgICAgRzogZnVuY3Rpb24gKGRhdGUsIGxvY2FsZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIHBhZChmb3JtYXRzLmgoZGF0ZSwgbG9jYWxlLCBvcHRpb25zKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGhvdXJzIHdpdGggbGVhZGluZyB6ZXJvIGUuZy4gMDNcbiAgICAgICAgSDogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldEhvdXJzKCkpOyB9LFxuICAgICAgICAvLyBkYXkgKDEtMzApIHdpdGggb3JkaW5hbCBzdWZmaXggZS5nLiAxc3QsIDJuZFxuICAgICAgICBKOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm9yZGluYWwgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gZGF0ZS5nZXREYXRlKCkgKyBsb2NhbGUub3JkaW5hbChkYXRlLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICA6IGRhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyBBTS9QTVxuICAgICAgICBLOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7IHJldHVybiBsb2NhbGUuYW1QTVtpbnQoZGF0ZS5nZXRIb3VycygpID4gMTEpXTsgfSxcbiAgICAgICAgLy8gc2hvcnRoYW5kIG1vbnRoIGUuZy4gSmFuLCBTZXAsIE9jdCwgZXRjXG4gICAgICAgIE06IGZ1bmN0aW9uIChkYXRlLCBsb2NhbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBtb250aFRvU3RyKGRhdGUuZ2V0TW9udGgoKSwgdHJ1ZSwgbG9jYWxlKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2Vjb25kcyAwMC01OVxuICAgICAgICBTOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0U2Vjb25kcygpKTsgfSxcbiAgICAgICAgLy8gdW5peCB0aW1lc3RhbXBcbiAgICAgICAgVTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC8gMTAwMDsgfSxcbiAgICAgICAgVzogZnVuY3Rpb24gKGRhdGUsIF8sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmdldFdlZWsoZGF0ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZ1bGwgeWVhciBlLmcuIDIwMTYsIHBhZGRlZCAoMDAwMS05OTk5KVxuICAgICAgICBZOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0RnVsbFllYXIoKSwgNCk7IH0sXG4gICAgICAgIC8vIGRheSBpbiBtb250aCwgcGFkZGVkICgwMS0zMClcbiAgICAgICAgZDogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldERhdGUoKSk7IH0sXG4gICAgICAgIC8vIGhvdXIgZnJvbSAxLTEyIChhbS9wbSlcbiAgICAgICAgaDogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIChkYXRlLmdldEhvdXJzKCkgJSAxMiA/IGRhdGUuZ2V0SG91cnMoKSAlIDEyIDogMTIpOyB9LFxuICAgICAgICAvLyBtaW51dGVzLCBwYWRkZWQgd2l0aCBsZWFkaW5nIHplcm8gZS5nLiAwOVxuICAgICAgICBpOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gcGFkKGRhdGUuZ2V0TWludXRlcygpKTsgfSxcbiAgICAgICAgLy8gZGF5IGluIG1vbnRoICgxLTMwKVxuICAgICAgICBqOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXREYXRlKCk7IH0sXG4gICAgICAgIC8vIHdlZWtkYXkgbmFtZSwgZnVsbCwgZS5nLiBUaHVyc2RheVxuICAgICAgICBsOiBmdW5jdGlvbiAoZGF0ZSwgbG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzLmxvbmdoYW5kW2RhdGUuZ2V0RGF5KCldO1xuICAgICAgICB9LFxuICAgICAgICAvLyBwYWRkZWQgbW9udGggbnVtYmVyICgwMS0xMilcbiAgICAgICAgbTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHBhZChkYXRlLmdldE1vbnRoKCkgKyAxKTsgfSxcbiAgICAgICAgLy8gdGhlIG1vbnRoIG51bWJlciAoMS0xMilcbiAgICAgICAgbjogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSArIDE7IH0sXG4gICAgICAgIC8vIHNlY29uZHMgMC01OVxuICAgICAgICBzOiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gZGF0ZS5nZXRTZWNvbmRzKCk7IH0sXG4gICAgICAgIC8vIFVuaXggTWlsbGlzZWNvbmRzXG4gICAgICAgIHU6IGZ1bmN0aW9uIChkYXRlKSB7IHJldHVybiBkYXRlLmdldFRpbWUoKTsgfSxcbiAgICAgICAgLy8gbnVtYmVyIG9mIHRoZSBkYXkgb2YgdGhlIHdlZWtcbiAgICAgICAgdzogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIGRhdGUuZ2V0RGF5KCk7IH0sXG4gICAgICAgIC8vIGxhc3QgdHdvIGRpZ2l0cyBvZiB5ZWFyIGUuZy4gMTYgZm9yIDIwMTZcbiAgICAgICAgeTogZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIFN0cmluZyhkYXRlLmdldEZ1bGxZZWFyKCkpLnN1YnN0cmluZygyKTsgfSxcbiAgICB9O1xuXG4gICAgdmFyIGNyZWF0ZURhdGVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIF9iID0gX2EuY29uZmlnLCBjb25maWcgPSBfYiA9PT0gdm9pZCAwID8gZGVmYXVsdHMgOiBfYiwgX2MgPSBfYS5sMTBuLCBsMTBuID0gX2MgPT09IHZvaWQgMCA/IGVuZ2xpc2ggOiBfYywgX2QgPSBfYS5pc01vYmlsZSwgaXNNb2JpbGUgPSBfZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfZDtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlT2JqLCBmcm10LCBvdmVycmlkZUxvY2FsZSkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSA9IG92ZXJyaWRlTG9jYWxlIHx8IGwxMG47XG4gICAgICAgICAgICBpZiAoY29uZmlnLmZvcm1hdERhdGUgIT09IHVuZGVmaW5lZCAmJiAhaXNNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uZmlnLmZvcm1hdERhdGUoZGF0ZU9iaiwgZnJtdCwgbG9jYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmcm10XG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYywgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHNbY10gJiYgYXJyW2kgLSAxXSAhPT0gXCJcXFxcXCJcbiAgICAgICAgICAgICAgICAgICAgPyBmb3JtYXRzW2NdKGRhdGVPYmosIGxvY2FsZSwgY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICA6IGMgIT09IFwiXFxcXFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgY3JlYXRlRGF0ZVBhcnNlciA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX2IgPSBfYS5jb25maWcsIGNvbmZpZyA9IF9iID09PSB2b2lkIDAgPyBkZWZhdWx0cyA6IF9iLCBfYyA9IF9hLmwxMG4sIGwxMG4gPSBfYyA9PT0gdm9pZCAwID8gZW5nbGlzaCA6IF9jO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUsIGdpdmVuRm9ybWF0LCB0aW1lbGVzcywgY3VzdG9tTG9jYWxlKSB7XG4gICAgICAgICAgICBpZiAoZGF0ZSAhPT0gMCAmJiAhZGF0ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIGxvY2FsZSA9IGN1c3RvbUxvY2FsZSB8fCBsMTBuO1xuICAgICAgICAgICAgdmFyIHBhcnNlZERhdGU7XG4gICAgICAgICAgICB2YXIgZGF0ZU9yaWcgPSBkYXRlO1xuICAgICAgICAgICAgaWYgKGRhdGUgaW5zdGFuY2VvZiBEYXRlKVxuICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGF0ZSAhPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGRhdGUudG9GaXhlZCAhPT0gdW5kZWZpbmVkIC8vIHRpbWVzdGFtcFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGNvcHlcbiAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGF0ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIC8vIGRhdGUgc3RyaW5nXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGdpdmVuRm9ybWF0IHx8IChjb25maWcgfHwgZGVmYXVsdHMpLmRhdGVGb3JtYXQ7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGVzdHIgPSBTdHJpbmcoZGF0ZSkudHJpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlc3RyID09PSBcInRvZGF5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVsZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoL1okLy50ZXN0KGRhdGVzdHIpIHx8XG4gICAgICAgICAgICAgICAgICAgIC9HTVQkLy50ZXN0KGRhdGVzdHIpIC8vIGRhdGVzdHJpbmdzIHcvIHRpbWV6b25lXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICBwYXJzZWREYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnICYmIGNvbmZpZy5wYXJzZURhdGUpXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPSBjb25maWcucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZERhdGUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgIWNvbmZpZyB8fCAhY29uZmlnLm5vQ2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSwgMCwgMSwgMCwgMCwgMCwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG5ldyBEYXRlKG5ldyBEYXRlKCkuc2V0SG91cnMoMCwgMCwgMCwgMCkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IHZvaWQgMCwgb3BzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXRjaEluZGV4ID0gMCwgcmVnZXhTdHIgPSBcIlwiOyBpIDwgZm9ybWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5fMSA9IGZvcm1hdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0JhY2tTbGFzaCA9IHRva2VuXzEgPT09IFwiXFxcXFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWQgPSBmb3JtYXRbaSAtIDFdID09PSBcIlxcXFxcIiB8fCBpc0JhY2tTbGFzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlblJlZ2V4W3Rva2VuXzFdICYmICFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhTdHIgKz0gdG9rZW5SZWdleFt0b2tlbl8xXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBuZXcgUmVnRXhwKHJlZ2V4U3RyKS5leGVjKGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAobWF0Y2hlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wc1t0b2tlbl8xICE9PSBcIllcIiA/IFwicHVzaFwiIDogXCJ1bnNoaWZ0XCJdKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiByZXZGb3JtYXRbdG9rZW5fMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWw6IG1hdGNoWysrbWF0Y2hJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc0JhY2tTbGFzaClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFN0ciArPSBcIi5cIjsgLy8gZG9uJ3QgcmVhbGx5IGNhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbiA9IF9hLmZuLCB2YWwgPSBfYS52YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwYXJzZWREYXRlID0gZm4ocGFyc2VkRGF0ZSwgdmFsLCBsb2NhbGUpIHx8IHBhcnNlZERhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkRGF0ZSA9IG1hdGNoZWQgPyBwYXJzZWREYXRlIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICBpZiAoIShwYXJzZWREYXRlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4ocGFyc2VkRGF0ZS5nZXRUaW1lKCkpKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiSW52YWxpZCBkYXRlIHByb3ZpZGVkOiBcIiArIGRhdGVPcmlnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aW1lbGVzcyA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICBwYXJzZWREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZERhdGU7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHRoZSBkaWZmZXJlbmNlIGluIGRhdGVzLCBtZWFzdXJlZCBpbiBtc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyhkYXRlMSwgZGF0ZTIsIHRpbWVsZXNzKSB7XG4gICAgICAgIGlmICh0aW1lbGVzcyA9PT0gdm9pZCAwKSB7IHRpbWVsZXNzID0gdHJ1ZTsgfVxuICAgICAgICBpZiAodGltZWxlc3MgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gKG5ldyBEYXRlKGRhdGUxLmdldFRpbWUoKSkuc2V0SG91cnMoMCwgMCwgMCwgMCkgLVxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGRhdGUyLmdldFRpbWUoKSkuc2V0SG91cnMoMCwgMCwgMCwgMCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlMS5nZXRUaW1lKCkgLSBkYXRlMi5nZXRUaW1lKCk7XG4gICAgfVxuICAgIHZhciBpc0JldHdlZW4gPSBmdW5jdGlvbiAodHMsIHRzMSwgdHMyKSB7XG4gICAgICAgIHJldHVybiB0cyA+IE1hdGgubWluKHRzMSwgdHMyKSAmJiB0cyA8IE1hdGgubWF4KHRzMSwgdHMyKTtcbiAgICB9O1xuICAgIHZhciBkdXJhdGlvbiA9IHtcbiAgICAgICAgREFZOiA4NjQwMDAwMCxcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgYXJnc18xID0gYXJnczsgX2EgPCBhcmdzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3NfMVtfYV07XG4gICAgICAgICAgICAgICAgX2xvb3BfMShzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgREVCT1VOQ0VEX0NIQU5HRV9NUyA9IDMwMDtcbiAgICBmdW5jdGlvbiBGbGF0cGlja3JJbnN0YW5jZShlbGVtZW50LCBpbnN0YW5jZUNvbmZpZykge1xuICAgICAgICB2YXIgc2VsZiA9IHtcbiAgICAgICAgICAgIGNvbmZpZzogX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRzKSwgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcpLFxuICAgICAgICAgICAgbDEwbjogZW5nbGlzaCxcbiAgICAgICAgfTtcbiAgICAgICAgc2VsZi5wYXJzZURhdGUgPSBjcmVhdGVEYXRlUGFyc2VyKHsgY29uZmlnOiBzZWxmLmNvbmZpZywgbDEwbjogc2VsZi5sMTBuIH0pO1xuICAgICAgICBzZWxmLl9oYW5kbGVycyA9IFtdO1xuICAgICAgICBzZWxmLnBsdWdpbkVsZW1lbnRzID0gW107XG4gICAgICAgIHNlbGYubG9hZGVkUGx1Z2lucyA9IFtdO1xuICAgICAgICBzZWxmLl9iaW5kID0gYmluZDtcbiAgICAgICAgc2VsZi5fc2V0SG91cnNGcm9tRGF0ZSA9IHNldEhvdXJzRnJvbURhdGU7XG4gICAgICAgIHNlbGYuX3Bvc2l0aW9uQ2FsZW5kYXIgPSBwb3NpdGlvbkNhbGVuZGFyO1xuICAgICAgICBzZWxmLmNoYW5nZU1vbnRoID0gY2hhbmdlTW9udGg7XG4gICAgICAgIHNlbGYuY2hhbmdlWWVhciA9IGNoYW5nZVllYXI7XG4gICAgICAgIHNlbGYuY2xlYXIgPSBjbGVhcjtcbiAgICAgICAgc2VsZi5jbG9zZSA9IGNsb3NlO1xuICAgICAgICBzZWxmLl9jcmVhdGVFbGVtZW50ID0gY3JlYXRlRWxlbWVudDtcbiAgICAgICAgc2VsZi5kZXN0cm95ID0gZGVzdHJveTtcbiAgICAgICAgc2VsZi5pc0VuYWJsZWQgPSBpc0VuYWJsZWQ7XG4gICAgICAgIHNlbGYuanVtcFRvRGF0ZSA9IGp1bXBUb0RhdGU7XG4gICAgICAgIHNlbGYub3BlbiA9IG9wZW47XG4gICAgICAgIHNlbGYucmVkcmF3ID0gcmVkcmF3O1xuICAgICAgICBzZWxmLnNldCA9IHNldDtcbiAgICAgICAgc2VsZi5zZXREYXRlID0gc2V0RGF0ZTtcbiAgICAgICAgc2VsZi50b2dnbGUgPSB0b2dnbGU7XG4gICAgICAgIGZ1bmN0aW9uIHNldHVwSGVscGVyRnVuY3Rpb25zKCkge1xuICAgICAgICAgICAgc2VsZi51dGlscyA9IHtcbiAgICAgICAgICAgICAgICBnZXREYXlzSW5Nb250aDogZnVuY3Rpb24gKG1vbnRoLCB5cikge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IHZvaWQgMCkgeyBtb250aCA9IHNlbGYuY3VycmVudE1vbnRoOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh5ciA9PT0gdm9pZCAwKSB7IHlyID0gc2VsZi5jdXJyZW50WWVhcjsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IDEgJiYgKCh5ciAlIDQgPT09IDAgJiYgeXIgJSAxMDAgIT09IDApIHx8IHlyICUgNDAwID09PSAwKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyOTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYubDEwbi5kYXlzSW5Nb250aFttb250aF07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgICAgIHNlbGYuZWxlbWVudCA9IHNlbGYuaW5wdXQgPSBlbGVtZW50O1xuICAgICAgICAgICAgc2VsZi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcnNlQ29uZmlnKCk7XG4gICAgICAgICAgICBzZXR1cExvY2FsZSgpO1xuICAgICAgICAgICAgc2V0dXBJbnB1dHMoKTtcbiAgICAgICAgICAgIHNldHVwRGF0ZXMoKTtcbiAgICAgICAgICAgIHNldHVwSGVscGVyRnVuY3Rpb25zKCk7XG4gICAgICAgICAgICBpZiAoIXNlbGYuaXNNb2JpbGUpXG4gICAgICAgICAgICAgICAgYnVpbGQoKTtcbiAgICAgICAgICAgIGJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIHx8IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRIb3Vyc0Zyb21EYXRlKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogfHwgc2VsZi5jb25maWcubWluRGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRDYWxlbmRhcldpZHRoKCk7XG4gICAgICAgICAgICB2YXIgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICAgICAgLyogVE9ETzogaW52ZXN0aWdhdGUgdGhpcyBmdXJ0aGVyXG4gICAgICAgIFxuICAgICAgICAgICAgICBDdXJyZW50bHksIHRoZXJlIGlzIHdlaXJkIHBvc2l0aW9uaW5nIGJlaGF2aW9yIGluIHNhZmFyaSBjYXVzaW5nIHBhZ2VzXG4gICAgICAgICAgICAgIHRvIHNjcm9sbCB1cC4gaHR0cHM6Ly9naXRodWIuY29tL2NobWxuL2ZsYXRwaWNrci9pc3N1ZXMvNTYzXG4gICAgICAgIFxuICAgICAgICAgICAgICBIb3dldmVyLCBtb3N0IGJyb3dzZXJzIGFyZSBub3QgU2FmYXJpIGFuZCBwb3NpdGlvbmluZyBpcyBleHBlbnNpdmUgd2hlbiB1c2VkXG4gICAgICAgICAgICAgIGluIHNjYWxlLiBodHRwczovL2dpdGh1Yi5jb20vY2htbG4vZmxhdHBpY2tyL2lzc3Vlcy8xMDk2XG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgaWYgKCFzZWxmLmlzTW9iaWxlICYmIGlzU2FmYXJpKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25DYWxlbmRhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25SZWFkeVwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBiaW5kVG9JbnN0YW5jZShmbikge1xuICAgICAgICAgICAgcmV0dXJuIGZuLmJpbmQoc2VsZik7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0Q2FsZW5kYXJXaWR0aCgpIHtcbiAgICAgICAgICAgIHZhciBjb25maWcgPSBzZWxmLmNvbmZpZztcbiAgICAgICAgICAgIGlmIChjb25maWcud2Vla051bWJlcnMgPT09IGZhbHNlICYmIGNvbmZpZy5zaG93TW9udGhzID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnLm5vQ2FsZW5kYXIgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlzV2lkdGggPSAoc2VsZi5kYXlzLm9mZnNldFdpZHRoICsgMSkgKiBjb25maWcuc2hvd01vbnRocztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IGRheXNXaWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUud2lkdGggPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheXNXaWR0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmLndlZWtXcmFwcGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi53ZWVrV3JhcHBlci5vZmZzZXRXaWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJ2aXNpYmlsaXR5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yZW1vdmVQcm9wZXJ0eShcImRpc3BsYXlcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGhhbmRsZXIgZm9yIGFsbCBldmVudHMgdGFyZ2V0aW5nIHRoZSB0aW1lIGlucHV0c1xuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGltZShlKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0RGF0ZSA9IHNlbGYuY29uZmlnLm1pbkRhdGUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBEYXRlKHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0VGltZSgpKVxuICAgICAgICAgICAgICAgICAgICA6IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gZ2V0RGVmYXVsdEhvdXJzKCksIGhvdXJzID0gX2EuaG91cnMsIG1pbnV0ZXMgPSBfYS5taW51dGVzLCBzZWNvbmRzID0gX2Euc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0RGF0ZS5zZXRIb3Vycyhob3VycywgbWludXRlcywgc2Vjb25kcywgMCk7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKGRlZmF1bHREYXRlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZSAhPT0gdW5kZWZpbmVkICYmIGUudHlwZSAhPT0gXCJibHVyXCIpIHtcbiAgICAgICAgICAgICAgICB0aW1lV3JhcHBlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcmV2VmFsdWUgPSBzZWxmLl9pbnB1dC52YWx1ZTtcbiAgICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChzZWxmLl9pbnB1dC52YWx1ZSAhPT0gcHJldlZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYW1wbTJtaWxpdGFyeShob3VyLCBhbVBNKSB7XG4gICAgICAgICAgICByZXR1cm4gKGhvdXIgJSAxMikgKyAxMiAqIGludChhbVBNID09PSBzZWxmLmwxMG4uYW1QTVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWlsaXRhcnkyYW1wbShob3VyKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGhvdXIgJSAyNCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTI7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgJSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogU3luY3MgdGhlIHNlbGVjdGVkIGRhdGUgb2JqZWN0IHRpbWUgd2l0aCB1c2VyJ3MgdGltZSBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gc2V0SG91cnNGcm9tSW5wdXRzKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaG91ckVsZW1lbnQgPT09IHVuZGVmaW5lZCB8fCBzZWxmLm1pbnV0ZUVsZW1lbnQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgaG91cnMgPSAocGFyc2VJbnQoc2VsZi5ob3VyRWxlbWVudC52YWx1ZS5zbGljZSgtMiksIDEwKSB8fCAwKSAlIDI0LCBtaW51dGVzID0gKHBhcnNlSW50KHNlbGYubWludXRlRWxlbWVudC52YWx1ZSwgMTApIHx8IDApICUgNjAsIHNlY29uZHMgPSBzZWxmLnNlY29uZEVsZW1lbnQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gKHBhcnNlSW50KHNlbGYuc2Vjb25kRWxlbWVudC52YWx1ZSwgMTApIHx8IDApICUgNjBcbiAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBob3VycyA9IGFtcG0ybWlsaXRhcnkoaG91cnMsIHNlbGYuYW1QTS50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGltaXRNaW5Ib3VycyA9IHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubWluRGF0ZUhhc1RpbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogJiZcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLmNvbmZpZy5taW5EYXRlLCB0cnVlKSA9PT1cbiAgICAgICAgICAgICAgICAgICAgICAgIDApO1xuICAgICAgICAgICAgdmFyIGxpbWl0TWF4SG91cnMgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWF4RGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLm1heERhdGVIYXNUaW1lICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iaiwgc2VsZi5jb25maWcubWF4RGF0ZSwgdHJ1ZSkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAwKTtcbiAgICAgICAgICAgIGlmIChsaW1pdE1heEhvdXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heFRpbWUgPSBzZWxmLmNvbmZpZy5tYXhUaW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhUaW1lXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWF4RGF0ZTtcbiAgICAgICAgICAgICAgICBob3VycyA9IE1hdGgubWluKGhvdXJzLCBtYXhUaW1lLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChob3VycyA9PT0gbWF4VGltZS5nZXRIb3VycygpKVxuICAgICAgICAgICAgICAgICAgICBtaW51dGVzID0gTWF0aC5taW4obWludXRlcywgbWF4VGltZS5nZXRNaW51dGVzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChtaW51dGVzID09PSBtYXhUaW1lLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGgubWluKHNlY29uZHMsIG1heFRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsaW1pdE1pbkhvdXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pblRpbWUgPSBzZWxmLmNvbmZpZy5taW5UaW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5taW5UaW1lXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWluRGF0ZTtcbiAgICAgICAgICAgICAgICBob3VycyA9IE1hdGgubWF4KGhvdXJzLCBtaW5UaW1lLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChob3VycyA9PT0gbWluVGltZS5nZXRIb3VycygpKVxuICAgICAgICAgICAgICAgICAgICBtaW51dGVzID0gTWF0aC5tYXgobWludXRlcywgbWluVGltZS5nZXRNaW51dGVzKCkpO1xuICAgICAgICAgICAgICAgIGlmIChtaW51dGVzID09PSBtaW5UaW1lLmdldE1pbnV0ZXMoKSlcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IE1hdGgubWF4KHNlY29uZHMsIG1pblRpbWUuZ2V0U2Vjb25kcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogU3luY3MgdGltZSBpbnB1dCB2YWx1ZXMgd2l0aCBhIGRhdGVcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHNldEhvdXJzRnJvbURhdGUoZGF0ZU9iaikge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBkYXRlT2JqIHx8IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqO1xuICAgICAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBzZXRIb3VycyhkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0RGVmYXVsdEhvdXJzKCkge1xuICAgICAgICAgICAgdmFyIGhvdXJzID0gc2VsZi5jb25maWcuZGVmYXVsdEhvdXI7XG4gICAgICAgICAgICB2YXIgbWludXRlcyA9IHNlbGYuY29uZmlnLmRlZmF1bHRNaW51dGU7XG4gICAgICAgICAgICB2YXIgc2Vjb25kcyA9IHNlbGYuY29uZmlnLmRlZmF1bHRTZWNvbmRzO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBtaW5IciA9IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgICAgICB2YXIgbWluTWludXRlcyA9IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICAgIGhvdXJzID0gTWF0aC5tYXgoaG91cnMsIG1pbkhyKTtcbiAgICAgICAgICAgICAgICBpZiAoaG91cnMgPT09IG1pbkhyKVxuICAgICAgICAgICAgICAgICAgICBtaW51dGVzID0gTWF0aC5tYXgobWluTWludXRlcywgbWludXRlcyk7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXJzID09PSBtaW5IciAmJiBtaW51dGVzID09PSBtaW5NaW51dGVzKVxuICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1heEhyID0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRIb3VycygpO1xuICAgICAgICAgICAgICAgIHZhciBtYXhNaW51dGVzID0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICAgICAgaG91cnMgPSBNYXRoLm1pbihob3VycywgbWF4SHIpO1xuICAgICAgICAgICAgICAgIGlmIChob3VycyA9PT0gbWF4SHIpXG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLm1pbihtYXhNaW51dGVzLCBtaW51dGVzKTtcbiAgICAgICAgICAgICAgICBpZiAoaG91cnMgPT09IG1heEhyICYmIG1pbnV0ZXMgPT09IG1heE1pbnV0ZXMpXG4gICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGhvdXJzOiBob3VycywgbWludXRlczogbWludXRlcywgc2Vjb25kczogc2Vjb25kcyB9O1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBob3VycywgbWludXRlcywgYW5kIG9wdGlvbmFsbHkgc2Vjb25kc1xuICAgICAgICAgKiBvZiB0aGUgbGF0ZXN0IHNlbGVjdGVkIGRhdGUgb2JqZWN0IGFuZCB0aGVcbiAgICAgICAgICogY29ycmVzcG9uZGluZyB0aW1lIGlucHV0c1xuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gaG91cnMgdGhlIGhvdXIuIHdoZXRoZXIgaXRzIG1pbGl0YXJ5XG4gICAgICAgICAqICAgICAgICAgICAgICAgICBvciBhbS1wbSBnZXRzIGluZmVycmVkIGZyb20gY29uZmlnXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtaW51dGVzIHRoZSBtaW51dGVzXG4gICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZWNvbmRzIHRoZSBzZWNvbmRzIChvcHRpb25hbClcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLnNldEhvdXJzKGhvdXJzICUgMjQsIG1pbnV0ZXMsIHNlY29uZHMgfHwgMCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNlbGYuaG91ckVsZW1lbnQgfHwgIXNlbGYubWludXRlRWxlbWVudCB8fCBzZWxmLmlzTW9iaWxlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBwYWQoIXNlbGYuY29uZmlnLnRpbWVfMjRoclxuICAgICAgICAgICAgICAgID8gKCgxMiArIGhvdXJzKSAlIDEyKSArIDEyICogaW50KGhvdXJzICUgMTIgPT09IDApXG4gICAgICAgICAgICAgICAgOiBob3Vycyk7XG4gICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQudmFsdWUgPSBwYWQobWludXRlcyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgc2VsZi5hbVBNLnRleHRDb250ZW50ID0gc2VsZi5sMTBuLmFtUE1baW50KGhvdXJzID49IDEyKV07XG4gICAgICAgICAgICBpZiAoc2VsZi5zZWNvbmRFbGVtZW50ICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlY29uZHMpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIHRoZSB5ZWFyIGlucHV0IGFuZCBpbmNyZW1lbnRpbmcgZXZlbnRzXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IHRoZSBrZXl1cCBvciBpbmNyZW1lbnQgZXZlbnRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIG9uWWVhcklucHV0KGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChldmVudCk7XG4gICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGV2ZW50VGFyZ2V0LnZhbHVlKSArIChldmVudC5kZWx0YSB8fCAwKTtcbiAgICAgICAgICAgIGlmICh5ZWFyIC8gMTAwMCA+IDEgfHxcbiAgICAgICAgICAgICAgICAoZXZlbnQua2V5ID09PSBcIkVudGVyXCIgJiYgIS9bXlxcZF0vLnRlc3QoeWVhci50b1N0cmluZygpKSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyKHllYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFc3NlbnRpYWxseSBhZGRFdmVudExpc3RlbmVyICsgdHJhY2tpbmdcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRvIGFkZEV2ZW50TGlzdGVuZXIgdG9cbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IHRoZSBldmVudCBuYW1lXG4gICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgdGhlIGV2ZW50IGhhbmRsZXJcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGJpbmQoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5mb3JFYWNoKGZ1bmN0aW9uIChldikgeyByZXR1cm4gYmluZChlbGVtZW50LCBldiwgaGFuZGxlciwgb3B0aW9ucyk7IH0pO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBBcnJheSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gYmluZChlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpOyB9KTtcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB0cmlnZ2VyQ2hhbmdlKCkge1xuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25DaGFuZ2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZHMgYWxsIHRoZSBuZWNlc3NhcnkgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnRzKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLndyYXApIHtcbiAgICAgICAgICAgICAgICBbXCJvcGVuXCIsIFwiY2xvc2VcIiwgXCJ0b2dnbGVcIiwgXCJjbGVhclwiXS5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChzZWxmLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltkYXRhLVwiICsgZXZ0ICsgXCJdXCIpLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kKGVsLCBcImNsaWNrXCIsIHNlbGZbZXZ0XSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuaXNNb2JpbGUpIHtcbiAgICAgICAgICAgICAgICBzZXR1cE1vYmlsZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkZWJvdW5jZWRSZXNpemUgPSBkZWJvdW5jZShvblJlc2l6ZSwgNTApO1xuICAgICAgICAgICAgc2VsZi5fZGVib3VuY2VkQ2hhbmdlID0gZGVib3VuY2UodHJpZ2dlckNoYW5nZSwgREVCT1VOQ0VEX0NIQU5HRV9NUyk7XG4gICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICYmICEvaVBob25lfGlQYWR8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpXG4gICAgICAgICAgICAgICAgYmluZChzZWxmLmRheXNDb250YWluZXIsIFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbk1vdXNlT3ZlcihnZXRFdmVudFRhcmdldChlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudC5ib2R5LCBcImtleWRvd25cIiwgb25LZXlEb3duKTtcbiAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcuaW5saW5lICYmICFzZWxmLmNvbmZpZy5zdGF0aWMpXG4gICAgICAgICAgICAgICAgYmluZCh3aW5kb3csIFwicmVzaXplXCIsIGRlYm91bmNlZFJlc2l6ZSk7XG4gICAgICAgICAgICBpZiAod2luZG93Lm9udG91Y2hzdGFydCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGJpbmQod2luZG93LmRvY3VtZW50LCBcInRvdWNoc3RhcnRcIiwgZG9jdW1lbnRDbGljayk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYmluZCh3aW5kb3cuZG9jdW1lbnQsIFwiY2xpY2tcIiwgZG9jdW1lbnRDbGljayk7XG4gICAgICAgICAgICBiaW5kKHdpbmRvdy5kb2N1bWVudCwgXCJmb2N1c1wiLCBkb2N1bWVudENsaWNrLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xpY2tPcGVucyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwiZm9jdXNcIiwgc2VsZi5vcGVuKTtcbiAgICAgICAgICAgICAgICBiaW5kKHNlbGYuX2lucHV0LCBcImNsaWNrXCIsIHNlbGYub3Blbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBiaW5kKHNlbGYubW9udGhOYXYsIFwiY2xpY2tcIiwgb25Nb250aE5hdkNsaWNrKTtcbiAgICAgICAgICAgICAgICBiaW5kKHNlbGYubW9udGhOYXYsIFtcImtleXVwXCIsIFwiaW5jcmVtZW50XCJdLCBvblllYXJJbnB1dCk7XG4gICAgICAgICAgICAgICAgYmluZChzZWxmLmRheXNDb250YWluZXIsIFwiY2xpY2tcIiwgc2VsZWN0RGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi50aW1lQ29udGFpbmVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBzZWxUZXh0ID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldEV2ZW50VGFyZ2V0KGUpLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsIFtcImluY3JlbWVudFwiXSwgdXBkYXRlVGltZSk7XG4gICAgICAgICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsIFwiYmx1clwiLCB1cGRhdGVUaW1lLCB7IGNhcHR1cmU6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgYmluZChzZWxmLnRpbWVDb250YWluZXIsIFwiY2xpY2tcIiwgdGltZUluY3JlbWVudCk7XG4gICAgICAgICAgICAgICAgYmluZChbc2VsZi5ob3VyRWxlbWVudCwgc2VsZi5taW51dGVFbGVtZW50XSwgW1wiZm9jdXNcIiwgXCJjbGlja1wiXSwgc2VsVGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2Vjb25kRWxlbWVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICBiaW5kKHNlbGYuc2Vjb25kRWxlbWVudCwgXCJmb2N1c1wiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLnNlY29uZEVsZW1lbnQgJiYgc2VsZi5zZWNvbmRFbGVtZW50LnNlbGVjdCgpOyB9KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmluZChzZWxmLmFtUE0sIFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbGxvd0lucHV0KVxuICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5faW5wdXQsIFwiYmx1clwiLCBvbkJsdXIpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIGNhbGVuZGFyIHZpZXcgdG8gYSBwYXJ0aWN1bGFyIGRhdGUuXG4gICAgICAgICAqIEBwYXJhbSB7RGF0ZX0ganVtcERhdGUgdGhlIGRhdGUgdG8gc2V0IHRoZSB2aWV3IHRvXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdHJpZ2dlckNoYW5nZSBpZiBjaGFuZ2UgZXZlbnRzIHNob3VsZCBiZSB0cmlnZ2VyZWRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGp1bXBUb0RhdGUoanVtcERhdGUsIHRyaWdnZXJDaGFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBqdW1wVG8gPSBqdW1wRGF0ZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBzZWxmLnBhcnNlRGF0ZShqdW1wRGF0ZSlcbiAgICAgICAgICAgICAgICA6IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqIHx8XG4gICAgICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5taW5EYXRlICYmIHNlbGYuY29uZmlnLm1pbkRhdGUgPiBzZWxmLm5vd1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5taW5EYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLm1heERhdGUgJiYgc2VsZi5jb25maWcubWF4RGF0ZSA8IHNlbGYubm93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhEYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLm5vdyk7XG4gICAgICAgICAgICB2YXIgb2xkWWVhciA9IHNlbGYuY3VycmVudFllYXI7XG4gICAgICAgICAgICB2YXIgb2xkTW9udGggPSBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGp1bXBUbyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBqdW1wVG8uZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBqdW1wVG8uZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgZS5tZXNzYWdlID0gXCJJbnZhbGlkIGRhdGUgc3VwcGxpZWQ6IFwiICsganVtcFRvO1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlICYmIHNlbGYuY3VycmVudFllYXIgIT09IG9sZFllYXIpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblllYXJDaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2UgJiZcbiAgICAgICAgICAgICAgICAoc2VsZi5jdXJyZW50WWVhciAhPT0gb2xkWWVhciB8fCBzZWxmLmN1cnJlbnRNb250aCAhPT0gb2xkTW9udGgpKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB1cC9kb3duIGFycm93IGhhbmRsZXIgZm9yIHRpbWUgaW5wdXRzXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgdGhlIGNsaWNrIGV2ZW50XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiB0aW1lSW5jcmVtZW50KGUpIHtcbiAgICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgaWYgKH5ldmVudFRhcmdldC5jbGFzc05hbWUuaW5kZXhPZihcImFycm93XCIpKVxuICAgICAgICAgICAgICAgIGluY3JlbWVudE51bUlucHV0KGUsIGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFycm93VXBcIikgPyAxIDogLTEpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmNyZW1lbnRzL2RlY3JlbWVudHMgdGhlIHZhbHVlIG9mIGlucHV0IGFzc29jaS1cbiAgICAgICAgICogYXRlZCB3aXRoIHRoZSB1cC9kb3duIGFycm93IGJ5IGRpc3BhdGNoaW5nIGFuXG4gICAgICAgICAqIFwiaW5jcmVtZW50XCIgZXZlbnQgb24gdGhlIGlucHV0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIHRoZSBjbGljayBldmVudFxuICAgICAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGEgdGhlIGRpZmYgKHVzdWFsbHkgMSBvciAtMSlcbiAgICAgICAgICogQHBhcmFtIHtFbGVtZW50fSBpbnB1dEVsZW0gdGhlIGlucHV0IGVsZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGluY3JlbWVudE51bUlucHV0KGUsIGRlbHRhLCBpbnB1dEVsZW0pIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlICYmIGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gaW5wdXRFbGVtIHx8XG4gICAgICAgICAgICAgICAgKHRhcmdldCAmJiB0YXJnZXQucGFyZW50Tm9kZSAmJiB0YXJnZXQucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIHZhciBldmVudCA9IGNyZWF0ZUV2ZW50KFwiaW5jcmVtZW50XCIpO1xuICAgICAgICAgICAgZXZlbnQuZGVsdGEgPSBkZWx0YTtcbiAgICAgICAgICAgIGlucHV0ICYmIGlucHV0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWNhbGVuZGFyXCIpO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgaWYgKCFzZWxmLmNvbmZpZy5ub0NhbGVuZGFyKSB7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoYnVpbGRNb250aE5hdigpKTtcbiAgICAgICAgICAgICAgICBzZWxmLmlubmVyQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1pbm5lckNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcud2Vla051bWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hID0gYnVpbGRXZWVrcygpLCB3ZWVrV3JhcHBlciA9IF9hLndlZWtXcmFwcGVyLCB3ZWVrTnVtYmVycyA9IF9hLndlZWtOdW1iZXJzO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmlubmVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHdlZWtXcmFwcGVyKTtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi53ZWVrTnVtYmVycyA9IHdlZWtOdW1iZXJzO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLndlZWtXcmFwcGVyID0gd2Vla1dyYXBwZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYuckNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItckNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJDb250YWluZXIuYXBwZW5kQ2hpbGQoYnVpbGRXZWVrZGF5cygpKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGYuZGF5c0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWRheXNcIik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci50YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBidWlsZERheXMoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnJDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZi5kYXlzQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBzZWxmLmlubmVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGYuckNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoc2VsZi5pbm5lckNvbnRhaW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlVGltZSkge1xuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGJ1aWxkVGltZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwicmFuZ2VNb2RlXCIsIHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIik7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFuaW1hdGVcIiwgc2VsZi5jb25maWcuYW5pbWF0ZSA9PT0gdHJ1ZSk7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcIm11bHRpTW9udGhcIiwgc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEpO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgICAgICAgICB2YXIgY3VzdG9tQXBwZW5kID0gc2VsZi5jb25maWcuYXBwZW5kVG8gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmFwcGVuZFRvLm5vZGVUeXBlICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuaW5saW5lIHx8IHNlbGYuY29uZmlnLnN0YXRpYykge1xuICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChzZWxmLmNvbmZpZy5pbmxpbmUgPyBcImlubGluZVwiIDogXCJzdGF0aWNcIik7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmlubGluZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1c3RvbUFwcGVuZCAmJiBzZWxmLmVsZW1lbnQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBzZWxmLl9pbnB1dC5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5hcHBlbmRUby5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd3JhcHBlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuZWxlbWVudC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5lbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHNlbGYuZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZi5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuYWx0SW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKHNlbGYuY2FsZW5kYXJDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcuc3RhdGljICYmICFzZWxmLmNvbmZpZy5pbmxpbmUpXG4gICAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLmFwcGVuZFRvICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hcHBlbmRUb1xuICAgICAgICAgICAgICAgICAgICA6IHdpbmRvdy5kb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVEYXkoY2xhc3NOYW1lLCBkYXRlLCBkYXlOdW1iZXIsIGkpIHtcbiAgICAgICAgICAgIHZhciBkYXRlSXNFbmFibGVkID0gaXNFbmFibGVkKGRhdGUsIHRydWUpLCBkYXlFbGVtZW50ID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItZGF5IFwiICsgY2xhc3NOYW1lLCBkYXRlLmdldERhdGUoKS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGRheUVsZW1lbnQuZGF0ZU9iaiA9IGRhdGU7XG4gICAgICAgICAgICBkYXlFbGVtZW50LiRpID0gaTtcbiAgICAgICAgICAgIGRheUVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzZWxmLmZvcm1hdERhdGUoZGF0ZSwgc2VsZi5jb25maWcuYXJpYURhdGVGb3JtYXQpKTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUuaW5kZXhPZihcImhpZGRlblwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5ub3cpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi50b2RheURhdGVFbGVtID0gZGF5RWxlbWVudDtcbiAgICAgICAgICAgICAgICBkYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0b2RheVwiKTtcbiAgICAgICAgICAgICAgICBkYXlFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtY3VycmVudFwiLCBcImRhdGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUlzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGRheUVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBpZiAoaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlRWxlbSA9IGRheUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKGRheUVsZW1lbnQsIFwic3RhcnRSYW5nZVwiLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB0cnVlKSA9PT0gMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhkYXlFbGVtZW50LCBcImVuZFJhbmdlXCIsIHNlbGYuc2VsZWN0ZWREYXRlc1sxXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMV0sIHRydWUpID09PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT09IFwibmV4dE1vbnRoRGF5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW5SYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImZsYXRwaWNrci1kaXNhYmxlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEYXRlSW5SYW5nZShkYXRlKSAmJiAhaXNEYXRlU2VsZWN0ZWQoZGF0ZSkpXG4gICAgICAgICAgICAgICAgICAgIGRheUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImluUmFuZ2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi53ZWVrTnVtYmVycyAmJlxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLnNob3dNb250aHMgPT09IDEgJiZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgIT09IFwicHJldk1vbnRoRGF5XCIgJiZcbiAgICAgICAgICAgICAgICBkYXlOdW1iZXIgJSA3ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc2VsZi53ZWVrTnVtYmVycy5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgXCI8c3BhbiBjbGFzcz0nZmxhdHBpY2tyLWRheSc+XCIgKyBzZWxmLmNvbmZpZy5nZXRXZWVrKGRhdGUpICsgXCI8L3NwYW4+XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25EYXlDcmVhdGVcIiwgZGF5RWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gZGF5RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBmb2N1c09uRGF5RWxlbSh0YXJnZXROb2RlKSB7XG4gICAgICAgICAgICB0YXJnZXROb2RlLmZvY3VzKCk7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiKVxuICAgICAgICAgICAgICAgIG9uTW91c2VPdmVyKHRhcmdldE5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldEZpcnN0QXZhaWxhYmxlRGF5KGRlbHRhKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRNb250aCA9IGRlbHRhID4gMCA/IDAgOiBzZWxmLmNvbmZpZy5zaG93TW9udGhzIC0gMTtcbiAgICAgICAgICAgIHZhciBlbmRNb250aCA9IGRlbHRhID4gMCA/IHNlbGYuY29uZmlnLnNob3dNb250aHMgOiAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIG0gPSBzdGFydE1vbnRoOyBtICE9IGVuZE1vbnRoOyBtICs9IGRlbHRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gc2VsZi5kYXlzQ29udGFpbmVyLmNoaWxkcmVuW21dO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gZGVsdGEgPiAwID8gMCA6IG1vbnRoLmNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gZGVsdGEgPiAwID8gbW9udGguY2hpbGRyZW4ubGVuZ3RoIDogLTE7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgIT0gZW5kSW5kZXg7IGkgKz0gZGVsdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBtb250aC5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMuY2xhc3NOYW1lLmluZGV4T2YoXCJoaWRkZW5cIikgPT09IC0xICYmIGlzRW5hYmxlZChjLmRhdGVPYmopKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXROZXh0QXZhaWxhYmxlRGF5KGN1cnJlbnQsIGRlbHRhKSB7XG4gICAgICAgICAgICB2YXIgZ2l2ZW5Nb250aCA9IGN1cnJlbnQuY2xhc3NOYW1lLmluZGV4T2YoXCJNb250aFwiKSA9PT0gLTFcbiAgICAgICAgICAgICAgICA/IGN1cnJlbnQuZGF0ZU9iai5nZXRNb250aCgpXG4gICAgICAgICAgICAgICAgOiBzZWxmLmN1cnJlbnRNb250aDtcbiAgICAgICAgICAgIHZhciBlbmRNb250aCA9IGRlbHRhID4gMCA/IHNlbGYuY29uZmlnLnNob3dNb250aHMgOiAtMTtcbiAgICAgICAgICAgIHZhciBsb29wRGVsdGEgPSBkZWx0YSA+IDAgPyAxIDogLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBtID0gZ2l2ZW5Nb250aCAtIHNlbGYuY3VycmVudE1vbnRoOyBtICE9IGVuZE1vbnRoOyBtICs9IGxvb3BEZWx0YSkge1xuICAgICAgICAgICAgICAgIHZhciBtb250aCA9IHNlbGYuZGF5c0NvbnRhaW5lci5jaGlsZHJlblttXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRJbmRleCA9IGdpdmVuTW9udGggLSBzZWxmLmN1cnJlbnRNb250aCA9PT0gbVxuICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnQuJGkgKyBkZWx0YVxuICAgICAgICAgICAgICAgICAgICA6IGRlbHRhIDwgMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBtb250aC5jaGlsZHJlbi5sZW5ndGggLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgICAgICAgICAgdmFyIG51bU1vbnRoRGF5cyA9IG1vbnRoLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA+PSAwICYmIGkgPCBudW1Nb250aERheXMgJiYgaSAhPSAoZGVsdGEgPiAwID8gbnVtTW9udGhEYXlzIDogLTEpOyBpICs9IGxvb3BEZWx0YSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IG1vbnRoLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYy5jbGFzc05hbWUuaW5kZXhPZihcImhpZGRlblwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5hYmxlZChjLmRhdGVPYmopICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhjdXJyZW50LiRpIC0gaSkgPj0gTWF0aC5hYnMoZGVsdGEpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvY3VzT25EYXlFbGVtKGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuY2hhbmdlTW9udGgobG9vcERlbHRhKTtcbiAgICAgICAgICAgIGZvY3VzT25EYXkoZ2V0Rmlyc3RBdmFpbGFibGVEYXkobG9vcERlbHRhKSwgMCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZvY3VzT25EYXkoY3VycmVudCwgb2Zmc2V0KSB7XG4gICAgICAgICAgICB2YXIgZGF5Rm9jdXNlZCA9IGlzSW5WaWV3KGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICB2YXIgc3RhcnRFbGVtID0gY3VycmVudCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBjdXJyZW50XG4gICAgICAgICAgICAgICAgOiBkYXlGb2N1c2VkXG4gICAgICAgICAgICAgICAgICAgID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudFxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuc2VsZWN0ZWREYXRlRWxlbSAhPT0gdW5kZWZpbmVkICYmIGlzSW5WaWV3KHNlbGYuc2VsZWN0ZWREYXRlRWxlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5zZWxlY3RlZERhdGVFbGVtXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHNlbGYudG9kYXlEYXRlRWxlbSAhPT0gdW5kZWZpbmVkICYmIGlzSW5WaWV3KHNlbGYudG9kYXlEYXRlRWxlbSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYudG9kYXlEYXRlRWxlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogZ2V0Rmlyc3RBdmFpbGFibGVEYXkob2Zmc2V0ID4gMCA/IDEgOiAtMSk7XG4gICAgICAgICAgICBpZiAoc3RhcnRFbGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWRheUZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICBmb2N1c09uRGF5RWxlbShzdGFydEVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2V0TmV4dEF2YWlsYWJsZURheShzdGFydEVsZW0sIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRNb250aERheXMoeWVhciwgbW9udGgpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdE9mTW9udGggPSAobmV3IERhdGUoeWVhciwgbW9udGgsIDEpLmdldERheSgpIC0gc2VsZi5sMTBuLmZpcnN0RGF5T2ZXZWVrICsgNykgJSA3O1xuICAgICAgICAgICAgdmFyIHByZXZNb250aERheXMgPSBzZWxmLnV0aWxzLmdldERheXNJbk1vbnRoKChtb250aCAtIDEgKyAxMikgJSAxMiwgeWVhcik7XG4gICAgICAgICAgICB2YXIgZGF5c0luTW9udGggPSBzZWxmLnV0aWxzLmdldERheXNJbk1vbnRoKG1vbnRoLCB5ZWFyKSwgZGF5cyA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGlzTXVsdGlNb250aCA9IHNlbGYuY29uZmlnLnNob3dNb250aHMgPiAxLCBwcmV2TW9udGhEYXlDbGFzcyA9IGlzTXVsdGlNb250aCA/IFwicHJldk1vbnRoRGF5IGhpZGRlblwiIDogXCJwcmV2TW9udGhEYXlcIiwgbmV4dE1vbnRoRGF5Q2xhc3MgPSBpc011bHRpTW9udGggPyBcIm5leHRNb250aERheSBoaWRkZW5cIiA6IFwibmV4dE1vbnRoRGF5XCI7XG4gICAgICAgICAgICB2YXIgZGF5TnVtYmVyID0gcHJldk1vbnRoRGF5cyArIDEgLSBmaXJzdE9mTW9udGgsIGRheUluZGV4ID0gMDtcbiAgICAgICAgICAgIC8vIHByZXBlbmQgZGF5cyBmcm9tIHRoZSBlbmRpbmcgb2YgcHJldmlvdXMgbW9udGhcbiAgICAgICAgICAgIGZvciAoOyBkYXlOdW1iZXIgPD0gcHJldk1vbnRoRGF5czsgZGF5TnVtYmVyKyssIGRheUluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBkYXlzLmFwcGVuZENoaWxkKGNyZWF0ZURheShwcmV2TW9udGhEYXlDbGFzcywgbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXlOdW1iZXIpLCBkYXlOdW1iZXIsIGRheUluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGFydCBhdCAxIHNpbmNlIHRoZXJlIGlzIG5vIDB0aCBkYXlcbiAgICAgICAgICAgIGZvciAoZGF5TnVtYmVyID0gMTsgZGF5TnVtYmVyIDw9IGRheXNJbk1vbnRoOyBkYXlOdW1iZXIrKywgZGF5SW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGRheXMuYXBwZW5kQ2hpbGQoY3JlYXRlRGF5KFwiXCIsIG5ldyBEYXRlKHllYXIsIG1vbnRoLCBkYXlOdW1iZXIpLCBkYXlOdW1iZXIsIGRheUluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhcHBlbmQgZGF5cyBmcm9tIHRoZSBuZXh0IG1vbnRoXG4gICAgICAgICAgICBmb3IgKHZhciBkYXlOdW0gPSBkYXlzSW5Nb250aCArIDE7IGRheU51bSA8PSA0MiAtIGZpcnN0T2ZNb250aCAmJlxuICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID09PSAxIHx8IGRheUluZGV4ICUgNyAhPT0gMCk7IGRheU51bSsrLCBkYXlJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZGF5cy5hcHBlbmRDaGlsZChjcmVhdGVEYXkobmV4dE1vbnRoRGF5Q2xhc3MsIG5ldyBEYXRlKHllYXIsIG1vbnRoICsgMSwgZGF5TnVtICUgZGF5c0luTW9udGgpLCBkYXlOdW0sIGRheUluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL3VwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgICAgIHZhciBkYXlDb250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZGF5Q29udGFpbmVyXCIpO1xuICAgICAgICAgICAgZGF5Q29udGFpbmVyLmFwcGVuZENoaWxkKGRheXMpO1xuICAgICAgICAgICAgcmV0dXJuIGRheUNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBidWlsZERheXMoKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjbGVhck5vZGUoc2VsZi5kYXlzQ29udGFpbmVyKTtcbiAgICAgICAgICAgIC8vIFRPRE86IHdlZWsgbnVtYmVycyBmb3IgZWFjaCBtb250aFxuICAgICAgICAgICAgaWYgKHNlbGYud2Vla051bWJlcnMpXG4gICAgICAgICAgICAgICAgY2xlYXJOb2RlKHNlbGYud2Vla051bWJlcnMpO1xuICAgICAgICAgICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uZmlnLnNob3dNb250aHM7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpO1xuICAgICAgICAgICAgICAgIGQuc2V0TW9udGgoc2VsZi5jdXJyZW50TW9udGggKyBpKTtcbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1aWxkTW9udGhEYXlzKGQuZ2V0RnVsbFllYXIoKSwgZC5nZXRNb250aCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmRheXNDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZyk7XG4gICAgICAgICAgICBzZWxmLmRheXMgPSBzZWxmLmRheXNDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIgJiYgc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIG9uTW91c2VPdmVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYnVpbGRNb250aFN3aXRjaCgpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zaG93TW9udGhzID4gMSB8fFxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vbnRoU2VsZWN0b3JUeXBlICE9PSBcImRyb3Bkb3duXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIHNob3VsZEJ1aWxkTW9udGggPSBmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWluRGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSAmJlxuICAgICAgICAgICAgICAgICAgICBtb250aCA8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0TW9udGgoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhKHNlbGYuY29uZmlnLm1heERhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyID09PSBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgbW9udGggPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldE1vbnRoKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghc2hvdWxkQnVpbGRNb250aChpKSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCBcImZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRoXCIpO1xuICAgICAgICAgICAgICAgIG1vbnRoLnZhbHVlID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgaSkuZ2V0TW9udGgoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIG1vbnRoLnRleHRDb250ZW50ID0gbW9udGhUb1N0cihpLCBzZWxmLmNvbmZpZy5zaG9ydGhhbmRDdXJyZW50TW9udGgsIHNlbGYubDEwbik7XG4gICAgICAgICAgICAgICAgbW9udGgudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jdXJyZW50TW9udGggPT09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9udGguc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZWxmLm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyLmFwcGVuZENoaWxkKG1vbnRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBidWlsZE1vbnRoKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3ItbW9udGhcIik7XG4gICAgICAgICAgICB2YXIgbW9udGhOYXZGcmFnbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgICAgICB2YXIgbW9udGhFbGVtZW50O1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnNob3dNb250aHMgPiAxIHx8XG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9udGhTZWxlY3RvclR5cGUgPT09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICBtb250aEVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KFwic3BhblwiLCBcImN1ci1tb250aFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsIFwiZmxhdHBpY2tyLW1vbnRoRHJvcGRvd24tbW9udGhzXCIpO1xuICAgICAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBzZWxmLmwxMG4ubW9udGhBcmlhTGFiZWwpO1xuICAgICAgICAgICAgICAgIGJpbmQoc2VsZi5tb250aHNEcm9wZG93bkNvbnRhaW5lciwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRNb250aCA9IHBhcnNlSW50KHRhcmdldC52YWx1ZSwgMTApO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNoYW5nZU1vbnRoKHNlbGVjdGVkTW9udGggLSBzZWxmLmN1cnJlbnRNb250aCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICAgICAgICAgIG1vbnRoRWxlbWVudCA9IHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeWVhcklucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJjdXIteWVhclwiLCB7IHRhYmluZGV4OiBcIi0xXCIgfSk7XG4gICAgICAgICAgICB2YXIgeWVhckVsZW1lbnQgPSB5ZWFySW5wdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKVswXTtcbiAgICAgICAgICAgIHllYXJFbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgc2VsZi5sMTBuLnllYXJBcmlhTGFiZWwpO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pbkRhdGUpIHtcbiAgICAgICAgICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtaW5cIiwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1heERhdGUpIHtcbiAgICAgICAgICAgICAgICB5ZWFyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHllYXJFbGVtZW50LmRpc2FibGVkID1cbiAgICAgICAgICAgICAgICAgICAgISFzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlLmdldEZ1bGxZZWFyKCkgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdXJyZW50TW9udGggPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLWN1cnJlbnQtbW9udGhcIik7XG4gICAgICAgICAgICBjdXJyZW50TW9udGguYXBwZW5kQ2hpbGQobW9udGhFbGVtZW50KTtcbiAgICAgICAgICAgIGN1cnJlbnRNb250aC5hcHBlbmRDaGlsZCh5ZWFySW5wdXQpO1xuICAgICAgICAgICAgbW9udGhOYXZGcmFnbWVudC5hcHBlbmRDaGlsZChjdXJyZW50TW9udGgpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1vbnRoTmF2RnJhZ21lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB5ZWFyRWxlbWVudDogeWVhckVsZW1lbnQsXG4gICAgICAgICAgICAgICAgbW9udGhFbGVtZW50OiBtb250aEVsZW1lbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGhzKCkge1xuICAgICAgICAgICAgY2xlYXJOb2RlKHNlbGYubW9udGhOYXYpO1xuICAgICAgICAgICAgc2VsZi5tb250aE5hdi5hcHBlbmRDaGlsZChzZWxmLnByZXZNb250aE5hdik7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc2hvd01vbnRocykge1xuICAgICAgICAgICAgICAgIHNlbGYueWVhckVsZW1lbnRzID0gW107XG4gICAgICAgICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBtID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgbS0tOykge1xuICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGJ1aWxkTW9udGgoKTtcbiAgICAgICAgICAgICAgICBzZWxmLnllYXJFbGVtZW50cy5wdXNoKG1vbnRoLnllYXJFbGVtZW50KTtcbiAgICAgICAgICAgICAgICBzZWxmLm1vbnRoRWxlbWVudHMucHVzaChtb250aC5tb250aEVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIHNlbGYubW9udGhOYXYuYXBwZW5kQ2hpbGQobW9udGguY29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYubW9udGhOYXYuYXBwZW5kQ2hpbGQoc2VsZi5uZXh0TW9udGhOYXYpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkTW9udGhOYXYoKSB7XG4gICAgICAgICAgICBzZWxmLm1vbnRoTmF2ID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci1tb250aHNcIik7XG4gICAgICAgICAgICBzZWxmLnllYXJFbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzID0gW107XG4gICAgICAgICAgICBzZWxmLnByZXZNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXByZXYtbW9udGhcIik7XG4gICAgICAgICAgICBzZWxmLnByZXZNb250aE5hdi5pbm5lckhUTUwgPSBzZWxmLmNvbmZpZy5wcmV2QXJyb3c7XG4gICAgICAgICAgICBzZWxmLm5leHRNb250aE5hdiA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLW5leHQtbW9udGhcIik7XG4gICAgICAgICAgICBzZWxmLm5leHRNb250aE5hdi5pbm5lckhUTUwgPSBzZWxmLmNvbmZpZy5uZXh0QXJyb3c7XG4gICAgICAgICAgICBidWlsZE1vbnRocygpO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIFwiX2hpZGVQcmV2TW9udGhBcnJvd1wiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLl9faGlkZVByZXZNb250aEFycm93OyB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuX19oaWRlUHJldk1vbnRoQXJyb3cgIT09IGJvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYucHJldk1vbnRoTmF2LCBcImZsYXRwaWNrci1kaXNhYmxlZFwiLCBib29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX19oaWRlUHJldk1vbnRoQXJyb3cgPSBib29sO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYsIFwiX2hpZGVOZXh0TW9udGhBcnJvd1wiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLl9faGlkZU5leHRNb250aEFycm93OyB9LFxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3cgIT09IGJvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYubmV4dE1vbnRoTmF2LCBcImZsYXRwaWNrci1kaXNhYmxlZFwiLCBib29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX19oaWRlTmV4dE1vbnRoQXJyb3cgPSBib29sO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhckVsZW1lbnQgPSBzZWxmLnllYXJFbGVtZW50c1swXTtcbiAgICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLm1vbnRoTmF2O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGJ1aWxkVGltZSgpIHtcbiAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1RpbWVcIik7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubm9DYWxlbmRhcilcbiAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJub0NhbGVuZGFyXCIpO1xuICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci10aW1lXCIpO1xuICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgc2VwYXJhdG9yID0gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3ItdGltZS1zZXBhcmF0b3JcIiwgXCI6XCIpO1xuICAgICAgICAgICAgdmFyIGhvdXJJbnB1dCA9IGNyZWF0ZU51bWJlcklucHV0KFwiZmxhdHBpY2tyLWhvdXJcIiwge1xuICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiOiBzZWxmLmwxMG4uaG91ckFyaWFMYWJlbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudCA9IGhvdXJJbnB1dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWzBdO1xuICAgICAgICAgICAgdmFyIG1pbnV0ZUlucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3ItbWludXRlXCIsIHtcbiAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxcIjogc2VsZi5sMTBuLm1pbnV0ZUFyaWFMYWJlbCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5taW51dGVFbGVtZW50ID0gbWludXRlSW5wdXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbnB1dFwiKVswXTtcbiAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQudGFiSW5kZXggPSBzZWxmLm1pbnV0ZUVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQudmFsdWUgPSBwYWQoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmpcbiAgICAgICAgICAgICAgICA/IHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLmdldEhvdXJzKClcbiAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLnRpbWVfMjRoclxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmRlZmF1bHRIb3VyXG4gICAgICAgICAgICAgICAgICAgIDogbWlsaXRhcnkyYW1wbShzZWxmLmNvbmZpZy5kZWZhdWx0SG91cikpO1xuICAgICAgICAgICAgc2VsZi5taW51dGVFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqXG4gICAgICAgICAgICAgICAgPyBzZWxmLmxhdGVzdFNlbGVjdGVkRGF0ZU9iai5nZXRNaW51dGVzKClcbiAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLmRlZmF1bHRNaW51dGUpO1xuICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIHNlbGYuY29uZmlnLmhvdXJJbmNyZW1lbnQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwic3RlcFwiLCBzZWxmLmNvbmZpZy5taW51dGVJbmNyZW1lbnQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LnNldEF0dHJpYnV0ZShcIm1pblwiLCBzZWxmLmNvbmZpZy50aW1lXzI0aHIgPyBcIjBcIiA6IFwiMVwiKTtcbiAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4XCIsIHNlbGYuY29uZmlnLnRpbWVfMjRociA/IFwiMjNcIiA6IFwiMTJcIik7XG4gICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWluXCIsIFwiMFwiKTtcbiAgICAgICAgICAgIHNlbGYubWludXRlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJtYXhcIiwgXCI1OVwiKTtcbiAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChob3VySW5wdXQpO1xuICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlcGFyYXRvcik7XG4gICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuYXBwZW5kQ2hpbGQobWludXRlSW5wdXQpO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnRpbWVfMjRocilcbiAgICAgICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInRpbWUyNGhyXCIpO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVNlY29uZHMpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnRpbWVDb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhhc1NlY29uZHNcIik7XG4gICAgICAgICAgICAgICAgdmFyIHNlY29uZElucHV0ID0gY3JlYXRlTnVtYmVySW5wdXQoXCJmbGF0cGlja3Itc2Vjb25kXCIpO1xuICAgICAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudCA9IHNlY29uZElucHV0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilbMF07XG4gICAgICAgICAgICAgICAgc2VsZi5zZWNvbmRFbGVtZW50LnZhbHVlID0gcGFkKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmouZ2V0U2Vjb25kcygpXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGVmYXVsdFNlY29uZHMpO1xuICAgICAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJzdGVwXCIsIHNlbGYubWludXRlRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJzdGVwXCIpKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWluXCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLnNlY29uZEVsZW1lbnQuc2V0QXR0cmlidXRlKFwibWF4XCIsIFwiNTlcIik7XG4gICAgICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLXRpbWUtc2VwYXJhdG9yXCIsIFwiOlwiKSk7XG4gICAgICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKHNlY29uZElucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcudGltZV8yNGhyKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIHNlbGYuYW1QTSBpZiBhcHByb3ByaWF0ZVxuICAgICAgICAgICAgICAgIHNlbGYuYW1QTSA9IGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIFwiZmxhdHBpY2tyLWFtLXBtXCIsIHNlbGYubDEwbi5hbVBNW2ludCgoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmpcbiAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmhvdXJFbGVtZW50LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGVmYXVsdEhvdXIpID4gMTEpXSk7XG4gICAgICAgICAgICAgICAgc2VsZi5hbVBNLnRpdGxlID0gc2VsZi5sMTBuLnRvZ2dsZVRpdGxlO1xuICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50YWJJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIHNlbGYudGltZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxmLmFtUE0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlbGYudGltZUNvbnRhaW5lcjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBidWlsZFdlZWtkYXlzKCkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLndlZWtkYXlDb250YWluZXIpXG4gICAgICAgICAgICAgICAgc2VsZi53ZWVrZGF5Q29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrZGF5c1wiKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjbGVhck5vZGUoc2VsZi53ZWVrZGF5Q29udGFpbmVyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgXCJmbGF0cGlja3Itd2Vla2RheWNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLndlZWtkYXlDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZVdlZWtkYXlzKCk7XG4gICAgICAgICAgICByZXR1cm4gc2VsZi53ZWVrZGF5Q29udGFpbmVyO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVdlZWtkYXlzKCkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLndlZWtkYXlDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmlyc3REYXlPZldlZWsgPSBzZWxmLmwxMG4uZmlyc3REYXlPZldlZWs7XG4gICAgICAgICAgICB2YXIgd2Vla2RheXMgPSBfX3NwcmVhZEFycmF5cyhzZWxmLmwxMG4ud2Vla2RheXMuc2hvcnRoYW5kKTtcbiAgICAgICAgICAgIGlmIChmaXJzdERheU9mV2VlayA+IDAgJiYgZmlyc3REYXlPZldlZWsgPCB3ZWVrZGF5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5cyA9IF9fc3ByZWFkQXJyYXlzKHdlZWtkYXlzLnNwbGljZShmaXJzdERheU9mV2Vlaywgd2Vla2RheXMubGVuZ3RoKSwgd2Vla2RheXMuc3BsaWNlKDAsIGZpcnN0RGF5T2ZXZWVrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5jb25maWcuc2hvd01vbnRoczsgaS0tOykge1xuICAgICAgICAgICAgICAgIHNlbGYud2Vla2RheUNvbnRhaW5lci5jaGlsZHJlbltpXS5pbm5lckhUTUwgPSBcIlxcbiAgICAgIDxzcGFuIGNsYXNzPSdmbGF0cGlja3Itd2Vla2RheSc+XFxuICAgICAgICBcIiArIHdlZWtkYXlzLmpvaW4oXCI8L3NwYW4+PHNwYW4gY2xhc3M9J2ZsYXRwaWNrci13ZWVrZGF5Jz5cIikgKyBcIlxcbiAgICAgIDwvc3Bhbj5cXG4gICAgICBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmdW5jdGlvbiBidWlsZFdlZWtzKCkge1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzV2Vla3NcIik7XG4gICAgICAgICAgICB2YXIgd2Vla1dyYXBwZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIFwiZmxhdHBpY2tyLXdlZWt3cmFwcGVyXCIpO1xuICAgICAgICAgICAgd2Vla1dyYXBwZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudChcInNwYW5cIiwgXCJmbGF0cGlja3Itd2Vla2RheVwiLCBzZWxmLmwxMG4ud2Vla0FiYnJldmlhdGlvbikpO1xuICAgICAgICAgICAgdmFyIHdlZWtOdW1iZXJzID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCBcImZsYXRwaWNrci13ZWVrc1wiKTtcbiAgICAgICAgICAgIHdlZWtXcmFwcGVyLmFwcGVuZENoaWxkKHdlZWtOdW1iZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd2Vla1dyYXBwZXI6IHdlZWtXcmFwcGVyLFxuICAgICAgICAgICAgICAgIHdlZWtOdW1iZXJzOiB3ZWVrTnVtYmVycyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hhbmdlTW9udGgodmFsdWUsIGlzT2Zmc2V0KSB7XG4gICAgICAgICAgICBpZiAoaXNPZmZzZXQgPT09IHZvaWQgMCkgeyBpc09mZnNldCA9IHRydWU7IH1cbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGlzT2Zmc2V0ID8gdmFsdWUgOiB2YWx1ZSAtIHNlbGYuY3VycmVudE1vbnRoO1xuICAgICAgICAgICAgaWYgKChkZWx0YSA8IDAgJiYgc2VsZi5faGlkZVByZXZNb250aEFycm93ID09PSB0cnVlKSB8fFxuICAgICAgICAgICAgICAgIChkZWx0YSA+IDAgJiYgc2VsZi5faGlkZU5leHRNb250aEFycm93ID09PSB0cnVlKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCArPSBkZWx0YTtcbiAgICAgICAgICAgIGlmIChzZWxmLmN1cnJlbnRNb250aCA8IDAgfHwgc2VsZi5jdXJyZW50TW9udGggPiAxMSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgKz0gc2VsZi5jdXJyZW50TW9udGggPiAxMSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCA9IChzZWxmLmN1cnJlbnRNb250aCArIDEyKSAlIDEyO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uWWVhckNoYW5nZVwiKTtcbiAgICAgICAgICAgICAgICBidWlsZE1vbnRoU3dpdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWlsZERheXMoKTtcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uTW9udGhDaGFuZ2VcIik7XG4gICAgICAgICAgICB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2xlYXIodHJpZ2dlckNoYW5nZUV2ZW50LCB0b0luaXRpYWwpIHtcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQgPT09IHZvaWQgMCkgeyB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAodG9Jbml0aWFsID09PSB2b2lkIDApIHsgdG9Jbml0aWFsID0gdHJ1ZTsgfVxuICAgICAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtdO1xuICAgICAgICAgICAgc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodG9Jbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IHNlbGYuX2luaXRpYWxEYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBzZWxmLl9pbml0aWFsRGF0ZS5nZXRNb250aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBnZXREZWZhdWx0SG91cnMoKSwgaG91cnMgPSBfYS5ob3VycywgbWludXRlcyA9IF9hLm1pbnV0ZXMsIHNlY29uZHMgPSBfYS5zZWNvbmRzO1xuICAgICAgICAgICAgICAgIHNldEhvdXJzKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KVxuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXJDaGFuZ2VFdmVudCBpcyB0cnVlIChkZWZhdWx0KSBvciBhbiBFdmVudFxuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICAgICAgc2VsZi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc2VsZi5pc01vYmlsZSkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmNhbGVuZGFyQ29udGFpbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwib3BlblwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuX2lucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5faW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNsb3NlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkRlc3Ryb3lcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc2VsZi5faGFuZGxlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgdmFyIGggPSBzZWxmLl9oYW5kbGVyc1tpXTtcbiAgICAgICAgICAgICAgICBoLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihoLmV2ZW50LCBoLmhhbmRsZXIsIGgub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9oYW5kbGVycyA9IFtdO1xuICAgICAgICAgICAgaWYgKHNlbGYubW9iaWxlSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dC5wYXJlbnROb2RlKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2VsZi5tb2JpbGVJbnB1dCk7XG4gICAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgJiYgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLnN0YXRpYyAmJiBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgIHdyYXBwZXIubGFzdENoaWxkICYmIHdyYXBwZXIucmVtb3ZlQ2hpbGQod3JhcHBlci5sYXN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAod3JhcHBlci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUod3JhcHBlci5maXJzdENoaWxkLCB3cmFwcGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwcGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzZWxmLmNhbGVuZGFyQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmFsdElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5pbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNlbGYuYWx0SW5wdXQpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBzZWxmLmFsdElucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSBzZWxmLmlucHV0Ll90eXBlO1xuICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShcImZsYXRwaWNrci1pbnB1dFwiKTtcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnJlbW92ZUF0dHJpYnV0ZShcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIFwiX3Nob3dUaW1lSW5wdXRcIixcbiAgICAgICAgICAgICAgICBcImxhdGVzdFNlbGVjdGVkRGF0ZU9ialwiLFxuICAgICAgICAgICAgICAgIFwiX2hpZGVOZXh0TW9udGhBcnJvd1wiLFxuICAgICAgICAgICAgICAgIFwiX2hpZGVQcmV2TW9udGhBcnJvd1wiLFxuICAgICAgICAgICAgICAgIFwiX19oaWRlTmV4dE1vbnRoQXJyb3dcIixcbiAgICAgICAgICAgICAgICBcIl9faGlkZVByZXZNb250aEFycm93XCIsXG4gICAgICAgICAgICAgICAgXCJpc01vYmlsZVwiLFxuICAgICAgICAgICAgICAgIFwiaXNPcGVuXCIsXG4gICAgICAgICAgICAgICAgXCJzZWxlY3RlZERhdGVFbGVtXCIsXG4gICAgICAgICAgICAgICAgXCJtaW5EYXRlSGFzVGltZVwiLFxuICAgICAgICAgICAgICAgIFwibWF4RGF0ZUhhc1RpbWVcIixcbiAgICAgICAgICAgICAgICBcImRheXNcIixcbiAgICAgICAgICAgICAgICBcImRheXNDb250YWluZXJcIixcbiAgICAgICAgICAgICAgICBcIl9pbnB1dFwiLFxuICAgICAgICAgICAgICAgIFwiX3Bvc2l0aW9uRWxlbWVudFwiLFxuICAgICAgICAgICAgICAgIFwiaW5uZXJDb250YWluZXJcIixcbiAgICAgICAgICAgICAgICBcInJDb250YWluZXJcIixcbiAgICAgICAgICAgICAgICBcIm1vbnRoTmF2XCIsXG4gICAgICAgICAgICAgICAgXCJ0b2RheURhdGVFbGVtXCIsXG4gICAgICAgICAgICAgICAgXCJjYWxlbmRhckNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgIFwid2Vla2RheUNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgIFwicHJldk1vbnRoTmF2XCIsXG4gICAgICAgICAgICAgICAgXCJuZXh0TW9udGhOYXZcIixcbiAgICAgICAgICAgICAgICBcIm1vbnRoc0Ryb3Bkb3duQ29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgXCJjdXJyZW50TW9udGhFbGVtZW50XCIsXG4gICAgICAgICAgICAgICAgXCJjdXJyZW50WWVhckVsZW1lbnRcIixcbiAgICAgICAgICAgICAgICBcIm5hdmlnYXRpb25DdXJyZW50TW9udGhcIixcbiAgICAgICAgICAgICAgICBcInNlbGVjdGVkRGF0ZUVsZW1cIixcbiAgICAgICAgICAgICAgICBcImNvbmZpZ1wiLFxuICAgICAgICAgICAgXS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNlbGZba107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzQ2FsZW5kYXJFbGVtKGVsZW0pIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hcHBlbmRUbyAmJiBzZWxmLmNvbmZpZy5hcHBlbmRUby5jb250YWlucyhlbGVtKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNvbnRhaW5zKGVsZW0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50Q2xpY2soZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaXNPcGVuICYmICFzZWxmLmNvbmZpZy5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUYXJnZXRfMSA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgICAgIHZhciBpc0NhbGVuZGFyRWxlbWVudCA9IGlzQ2FsZW5kYXJFbGVtKGV2ZW50VGFyZ2V0XzEpO1xuICAgICAgICAgICAgICAgIHZhciBpc0lucHV0ID0gZXZlbnRUYXJnZXRfMSA9PT0gc2VsZi5pbnB1dCB8fFxuICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldF8xID09PSBzZWxmLmFsdElucHV0IHx8XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZWxlbWVudC5jb250YWlucyhldmVudFRhcmdldF8xKSB8fFxuICAgICAgICAgICAgICAgICAgICAvLyB3ZWIgY29tcG9uZW50c1xuICAgICAgICAgICAgICAgICAgICAvLyBlLnBhdGggaXMgbm90IHByZXNlbnQgaW4gYWxsIGJyb3dzZXJzLiBjaXJjdW12ZW50aW5nIHR5cGVjaGVja3NcbiAgICAgICAgICAgICAgICAgICAgKGUucGF0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wYXRoLmluZGV4T2YgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh+ZS5wYXRoLmluZGV4T2Yoc2VsZi5pbnB1dCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB+ZS5wYXRoLmluZGV4T2Yoc2VsZi5hbHRJbnB1dCkpKTtcbiAgICAgICAgICAgICAgICB2YXIgbG9zdEZvY3VzID0gZS50eXBlID09PSBcImJsdXJcIlxuICAgICAgICAgICAgICAgICAgICA/IGlzSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucmVsYXRlZFRhcmdldCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWlzQ2FsZW5kYXJFbGVtKGUucmVsYXRlZFRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgOiAhaXNJbnB1dCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIWlzQ2FsZW5kYXJFbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhaXNDYWxlbmRhckVsZW0oZS5yZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB2YXIgaXNJZ25vcmVkID0gIXNlbGYuY29uZmlnLmlnbm9yZWRGb2N1c0VsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGFpbnMoZXZlbnRUYXJnZXRfMSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvc3RGb2N1cyAmJiBpc0lnbm9yZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYudGltZUNvbnRhaW5lciAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlICE9PSBcIlwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlucHV0LnZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZSA9PT0gXCJyYW5nZVwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hhbmdlWWVhcihuZXdZZWFyKSB7XG4gICAgICAgICAgICBpZiAoIW5ld1llYXIgfHxcbiAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWluRGF0ZSAmJiBuZXdZZWFyIDwgc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpKSB8fFxuICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5tYXhEYXRlICYmIG5ld1llYXIgPiBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEZ1bGxZZWFyKCkpKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBuZXdZZWFyTnVtID0gbmV3WWVhciwgaXNOZXdZZWFyID0gc2VsZi5jdXJyZW50WWVhciAhPT0gbmV3WWVhck51bTtcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBuZXdZZWFyTnVtIHx8IHNlbGYuY3VycmVudFllYXI7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSAmJlxuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0RnVsbFllYXIoKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gTWF0aC5taW4oc2VsZi5jb25maWcubWF4RGF0ZS5nZXRNb250aCgpLCBzZWxmLmN1cnJlbnRNb250aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWluRGF0ZS5nZXRGdWxsWWVhcigpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBNYXRoLm1heChzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKCksIHNlbGYuY3VycmVudE1vbnRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc05ld1llYXIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uWWVhckNoYW5nZVwiKTtcbiAgICAgICAgICAgICAgICBidWlsZE1vbnRoU3dpdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNFbmFibGVkKGRhdGUsIHRpbWVsZXNzKSB7XG4gICAgICAgICAgICBpZiAodGltZWxlc3MgPT09IHZvaWQgMCkgeyB0aW1lbGVzcyA9IHRydWU7IH1cbiAgICAgICAgICAgIHZhciBkYXRlVG9DaGVjayA9IHNlbGYucGFyc2VEYXRlKGRhdGUsIHVuZGVmaW5lZCwgdGltZWxlc3MpOyAvLyB0aW1lbGVzc1xuICAgICAgICAgICAgaWYgKChzZWxmLmNvbmZpZy5taW5EYXRlICYmXG4gICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZVRvQ2hlY2ssIHNlbGYuY29uZmlnLm1pbkRhdGUsIHRpbWVsZXNzICE9PSB1bmRlZmluZWQgPyB0aW1lbGVzcyA6ICFzZWxmLm1pbkRhdGVIYXNUaW1lKSA8IDApIHx8XG4gICAgICAgICAgICAgICAgKHNlbGYuY29uZmlnLm1heERhdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVRvQ2hlY2sgJiZcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZURhdGVzKGRhdGVUb0NoZWNrLCBzZWxmLmNvbmZpZy5tYXhEYXRlLCB0aW1lbGVzcyAhPT0gdW5kZWZpbmVkID8gdGltZWxlc3MgOiAhc2VsZi5tYXhEYXRlSGFzVGltZSkgPiAwKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuZW5hYmxlLmxlbmd0aCA9PT0gMCAmJiBzZWxmLmNvbmZpZy5kaXNhYmxlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChkYXRlVG9DaGVjayA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHZhciBib29sID0gc2VsZi5jb25maWcuZW5hYmxlLmxlbmd0aCA+IDAsIGFycmF5ID0gYm9vbCA/IHNlbGYuY29uZmlnLmVuYWJsZSA6IHNlbGYuY29uZmlnLmRpc2FibGU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgZCA9IHZvaWQgMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICAgICAgICAgIGQoZGF0ZVRvQ2hlY2spIC8vIGRpc2FibGVkIGJ5IGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYm9vbDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChkIGluc3RhbmNlb2YgRGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIGQuZ2V0VGltZSgpID09PSBkYXRlVG9DaGVjay5nZXRUaW1lKCkpXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGVkIGJ5IGRhdGVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGQgPT09IFwic3RyaW5nXCIgJiYgZGF0ZVRvQ2hlY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBkaXNhYmxlZCBieSBkYXRlIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gc2VsZi5wYXJzZURhdGUoZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZCAmJiBwYXJzZWQuZ2V0VGltZSgpID09PSBkYXRlVG9DaGVjay5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYm9vbFxuICAgICAgICAgICAgICAgICAgICAgICAgOiAhYm9vbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZWQgYnkgcmFuZ2VcbiAgICAgICAgICAgICAgICB0eXBlb2YgZCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgICAgICBkYXRlVG9DaGVjayAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgICAgIGQuZnJvbSAmJlxuICAgICAgICAgICAgICAgICAgICBkLnRvICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA+PSBkLmZyb20uZ2V0VGltZSgpICYmXG4gICAgICAgICAgICAgICAgICAgIGRhdGVUb0NoZWNrLmdldFRpbWUoKSA8PSBkLnRvLmdldFRpbWUoKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvb2w7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gIWJvb2w7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNJblZpZXcoZWxlbSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuZGF5c0NvbnRhaW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiAoZWxlbS5jbGFzc05hbWUuaW5kZXhPZihcImhpZGRlblwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUuaW5kZXhPZihcImZsYXRwaWNrci1kaXNhYmxlZFwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kYXlzQ29udGFpbmVyLmNvbnRhaW5zKGVsZW0pKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbkJsdXIoZSkge1xuICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBlLnRhcmdldCA9PT0gc2VsZi5faW5wdXQ7XG4gICAgICAgICAgICBpZiAoaXNJbnB1dCAmJlxuICAgICAgICAgICAgICAgICEoZS5yZWxhdGVkVGFyZ2V0ICYmIGlzQ2FsZW5kYXJFbGVtKGUucmVsYXRlZFRhcmdldCkpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKHNlbGYuX2lucHV0LnZhbHVlLCB0cnVlLCBlLnRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmFsdEZvcm1hdFxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgICAgICAgICAvLyBlLmtleSAgICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGVcbiAgICAgICAgICAgIC8vIFwiQmFja3NwYWNlXCIgICAgICAgICAgICAgICAgICAgICAgICA4XG4gICAgICAgICAgICAvLyBcIlRhYlwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOVxuICAgICAgICAgICAgLy8gXCJFbnRlclwiICAgICAgICAgICAgICAgICAgICAgICAgICAgMTNcbiAgICAgICAgICAgIC8vIFwiRXNjYXBlXCIgICAgIChJRSBcIkVzY1wiKSAgICAgICAgICAgMjdcbiAgICAgICAgICAgIC8vIFwiQXJyb3dMZWZ0XCIgIChJRSBcIkxlZnRcIikgICAgICAgICAgMzdcbiAgICAgICAgICAgIC8vIFwiQXJyb3dVcFwiICAgIChJRSBcIlVwXCIpICAgICAgICAgICAgMzhcbiAgICAgICAgICAgIC8vIFwiQXJyb3dSaWdodFwiIChJRSBcIlJpZ2h0XCIpICAgICAgICAgMzlcbiAgICAgICAgICAgIC8vIFwiQXJyb3dEb3duXCIgIChJRSBcIkRvd25cIikgICAgICAgICAgNDBcbiAgICAgICAgICAgIC8vIFwiRGVsZXRlXCIgICAgIChJRSBcIkRlbFwiKSAgICAgICAgICAgNDZcbiAgICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgdmFyIGlzSW5wdXQgPSBzZWxmLmNvbmZpZy53cmFwXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50LmNvbnRhaW5zKGV2ZW50VGFyZ2V0KVxuICAgICAgICAgICAgICAgIDogZXZlbnRUYXJnZXQgPT09IHNlbGYuX2lucHV0O1xuICAgICAgICAgICAgdmFyIGFsbG93SW5wdXQgPSBzZWxmLmNvbmZpZy5hbGxvd0lucHV0O1xuICAgICAgICAgICAgdmFyIGFsbG93S2V5ZG93biA9IHNlbGYuaXNPcGVuICYmICghYWxsb3dJbnB1dCB8fCAhaXNJbnB1dCk7XG4gICAgICAgICAgICB2YXIgYWxsb3dJbmxpbmVLZXlkb3duID0gc2VsZi5jb25maWcuaW5saW5lICYmIGlzSW5wdXQgJiYgIWFsbG93SW5wdXQ7XG4gICAgICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAxMyAmJiBpc0lucHV0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFsbG93SW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXREYXRlKHNlbGYuX2lucHV0LnZhbHVlLCB0cnVlLCBldmVudFRhcmdldCA9PT0gc2VsZi5hbHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5hbHRGb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcuZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudFRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm9wZW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0NhbGVuZGFyRWxlbShldmVudFRhcmdldCkgfHxcbiAgICAgICAgICAgICAgICBhbGxvd0tleWRvd24gfHxcbiAgICAgICAgICAgICAgICBhbGxvd0lubGluZUtleWRvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNUaW1lT2JqID0gISFzZWxmLnRpbWVDb250YWluZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi50aW1lQ29udGFpbmVyLmNvbnRhaW5zKGV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGltZU9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdERhdGUoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyNzogLy8gZXNjYXBlXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c0FuZENsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ2OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5wdXQgJiYgIXNlbGYuY29uZmlnLmFsbG93SW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGltZU9iaiAmJiAhaXNJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5kYXlzQ29udGFpbmVyICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFsbG93SW5wdXQgPT09IGZhbHNlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBpc0luVmlldyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YV8xID0gZS5rZXlDb2RlID09PSAzOSA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmN0cmxLZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uRGF5KHVuZGVmaW5lZCwgZGVsdGFfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZU1vbnRoKGRlbHRhXzEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPbkRheShnZXRGaXJzdEF2YWlsYWJsZURheSgxKSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxmLmhvdXJFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhID0gZS5rZXlDb2RlID09PSA0MCA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoc2VsZi5kYXlzQ29udGFpbmVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuJGkgIT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldCA9PT0gc2VsZi5pbnB1dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0ID09PSBzZWxmLmFsdElucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgLSBkZWx0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzT25EYXkoZ2V0Rmlyc3RBdmFpbGFibGVEYXkoMSksIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNUaW1lT2JqKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c09uRGF5KHVuZGVmaW5lZCwgZGVsdGEgKiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50VGFyZ2V0ID09PSBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVllYXIoc2VsZi5jdXJyZW50WWVhciAtIGRlbHRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGYuY29uZmlnLmVuYWJsZVRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVGltZU9iaiAmJiBzZWxmLmhvdXJFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGltZShlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZWJvdW5jZWRDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaW1lT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1pbnV0ZUVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2Vjb25kRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hbVBNLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChzZWxmLnBsdWdpbkVsZW1lbnRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGVsZW1zLmluZGV4T2YoZXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZWxlbXNbaSArIChlLnNoaWZ0S2V5ID8gLTEgOiAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRhcmdldCB8fCBzZWxmLl9pbnB1dCkuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghc2VsZi5jb25maWcubm9DYWxlbmRhciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF5c0NvbnRhaW5lci5jb250YWlucyhldmVudFRhcmdldCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2lucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZXZlbnRUYXJnZXQgPT09IHNlbGYuYW1QTSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVswXS5jaGFyQXQoMCk6XG4gICAgICAgICAgICAgICAgICAgIGNhc2Ugc2VsZi5sMTBuLmFtUE1bMF0uY2hhckF0KDApLnRvTG93ZXJDYXNlKCk6XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPSBzZWxmLmwxMG4uYW1QTVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbUlucHV0cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHNlbGYubDEwbi5hbVBNWzFdLmNoYXJBdCgwKTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBzZWxmLmwxMG4uYW1QTVsxXS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9IHNlbGYubDEwbi5hbVBNWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SG91cnNGcm9tSW5wdXRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzSW5wdXQgfHwgaXNDYWxlbmRhckVsZW0oZXZlbnRUYXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25LZXlEb3duXCIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uTW91c2VPdmVyKGVsZW0pIHtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoICE9PSAxIHx8XG4gICAgICAgICAgICAgICAgKGVsZW0gJiZcbiAgICAgICAgICAgICAgICAgICAgKCFlbGVtLmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kYXlcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmxhdHBpY2tyLWRpc2FibGVkXCIpKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGhvdmVyRGF0ZSA9IGVsZW1cbiAgICAgICAgICAgICAgICA/IGVsZW0uZGF0ZU9iai5nZXRUaW1lKClcbiAgICAgICAgICAgICAgICA6IHNlbGYuZGF5cy5maXJzdEVsZW1lbnRDaGlsZC5kYXRlT2JqLmdldFRpbWUoKSwgaW5pdGlhbERhdGUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHVuZGVmaW5lZCwgdHJ1ZSkuZ2V0VGltZSgpLCByYW5nZVN0YXJ0RGF0ZSA9IE1hdGgubWluKGhvdmVyRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSksIHJhbmdlRW5kRGF0ZSA9IE1hdGgubWF4KGhvdmVyRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSk7XG4gICAgICAgICAgICB2YXIgY29udGFpbnNEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIG1pblJhbmdlID0gMCwgbWF4UmFuZ2UgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgdCA9IHJhbmdlU3RhcnREYXRlOyB0IDwgcmFuZ2VFbmREYXRlOyB0ICs9IGR1cmF0aW9uLkRBWSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNFbmFibGVkKG5ldyBEYXRlKHQpLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250YWluc0Rpc2FibGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zRGlzYWJsZWQgfHwgKHQgPiByYW5nZVN0YXJ0RGF0ZSAmJiB0IDwgcmFuZ2VFbmREYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPCBpbml0aWFsRGF0ZSAmJiAoIW1pblJhbmdlIHx8IHQgPiBtaW5SYW5nZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5SYW5nZSA9IHQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHQgPiBpbml0aWFsRGF0ZSAmJiAoIW1heFJhbmdlIHx8IHQgPCBtYXhSYW5nZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhSYW5nZSA9IHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgbSA9IDA7IG0gPCBzZWxmLmNvbmZpZy5zaG93TW9udGhzOyBtKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBzZWxmLmRheXNDb250YWluZXIuY2hpbGRyZW5bbV07XG4gICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSwgbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF5RWxlbSA9IG1vbnRoLmNoaWxkcmVuW2ldLCBkYXRlID0gZGF5RWxlbS5kYXRlT2JqO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvdXRPZlJhbmdlID0gKG1pblJhbmdlID4gMCAmJiB0aW1lc3RhbXAgPCBtaW5SYW5nZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChtYXhSYW5nZSA+IDAgJiYgdGltZXN0YW1wID4gbWF4UmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3V0T2ZSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKFwibm90QWxsb3dlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcImluUmFuZ2VcIiwgXCJzdGFydFJhbmdlXCIsIFwiZW5kUmFuZ2VcIl0uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjb250YWluc0Rpc2FibGVkICYmICFvdXRPZlJhbmdlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgICAgICAgICAgW1wic3RhcnRSYW5nZVwiLCBcImluUmFuZ2VcIiwgXCJlbmRSYW5nZVwiLCBcIm5vdEFsbG93ZWRcIl0uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKGhvdmVyRGF0ZSA8PSBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcInN0YXJ0UmFuZ2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJlbmRSYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsRGF0ZSA8IGhvdmVyRGF0ZSAmJiB0aW1lc3RhbXAgPT09IGluaXRpYWxEYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcInN0YXJ0UmFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpbml0aWFsRGF0ZSA+IGhvdmVyRGF0ZSAmJiB0aW1lc3RhbXAgPT09IGluaXRpYWxEYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheUVsZW0uY2xhc3NMaXN0LmFkZChcImVuZFJhbmdlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVzdGFtcCA+PSBtaW5SYW5nZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXhSYW5nZSA9PT0gMCB8fCB0aW1lc3RhbXAgPD0gbWF4UmFuZ2UpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNCZXR3ZWVuKHRpbWVzdGFtcCwgaW5pdGlhbERhdGUsIGhvdmVyRGF0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKFwiaW5SYW5nZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBtb250aC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgX2xvb3BfMShpLCBsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5pc09wZW4gJiYgIXNlbGYuY29uZmlnLnN0YXRpYyAmJiAhc2VsZi5jb25maWcuaW5saW5lKVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FsZW5kYXIoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvcGVuKGUsIHBvc2l0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uRWxlbWVudCA9PT0gdm9pZCAwKSB7IHBvc2l0aW9uRWxlbWVudCA9IHNlbGYuX3Bvc2l0aW9uRWxlbWVudDsgfVxuICAgICAgICAgICAgaWYgKHNlbGYuaXNNb2JpbGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudFRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldCAmJiBldmVudFRhcmdldC5ibHVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLm1vYmlsZUlucHV0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uT3BlblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5faW5wdXQuZGlzYWJsZWQgfHwgc2VsZi5jb25maWcuaW5saW5lKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciB3YXNPcGVuID0gc2VsZi5pc09wZW47XG4gICAgICAgICAgICBzZWxmLmlzT3BlbiA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIXdhc09wZW4pIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xuICAgICAgICAgICAgICAgIHNlbGYuX2lucHV0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25PcGVuXCIpO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FsZW5kYXIocG9zaXRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5lbmFibGVUaW1lID09PSB0cnVlICYmIHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuYWxsb3dJbnB1dCA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICAgICAgKGUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIXNlbGYudGltZUNvbnRhaW5lci5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuaG91ckVsZW1lbnQuc2VsZWN0KCk7IH0sIDUwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbWluTWF4RGF0ZVNldHRlcih0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZU9iaiA9IChzZWxmLmNvbmZpZ1tcIl9cIiArIHR5cGUgKyBcIkRhdGVcIl0gPSBzZWxmLnBhcnNlRGF0ZShkYXRlLCBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KSk7XG4gICAgICAgICAgICAgICAgdmFyIGludmVyc2VEYXRlT2JqID0gc2VsZi5jb25maWdbXCJfXCIgKyAodHlwZSA9PT0gXCJtaW5cIiA/IFwibWF4XCIgOiBcIm1pblwiKSArIFwiRGF0ZVwiXTtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZU9iaiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGZbdHlwZSA9PT0gXCJtaW5cIiA/IFwibWluRGF0ZUhhc1RpbWVcIiA6IFwibWF4RGF0ZUhhc1RpbWVcIl0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZU9iai5nZXRIb3VycygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0TWludXRlcygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVPYmouZ2V0U2Vjb25kcygpID4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBzZWxmLnNlbGVjdGVkRGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBpc0VuYWJsZWQoZCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggJiYgdHlwZSA9PT0gXCJtaW5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoZGF0ZU9iaik7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxmLmRheXNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlT2JqICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudFt0eXBlXSA9IGRhdGVPYmouZ2V0RnVsbFllYXIoKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRZZWFyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXJFbGVtZW50LmRpc2FibGVkID1cbiAgICAgICAgICAgICAgICAgICAgICAgICEhaW52ZXJzZURhdGVPYmogJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlT2JqICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlRGF0ZU9iai5nZXRGdWxsWWVhcigpID09PSBkYXRlT2JqLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwYXJzZUNvbmZpZygpIHtcbiAgICAgICAgICAgIHZhciBib29sT3B0cyA9IFtcbiAgICAgICAgICAgICAgICBcIndyYXBcIixcbiAgICAgICAgICAgICAgICBcIndlZWtOdW1iZXJzXCIsXG4gICAgICAgICAgICAgICAgXCJhbGxvd0lucHV0XCIsXG4gICAgICAgICAgICAgICAgXCJhbGxvd0ludmFsaWRQcmVsb2FkXCIsXG4gICAgICAgICAgICAgICAgXCJjbGlja09wZW5zXCIsXG4gICAgICAgICAgICAgICAgXCJ0aW1lXzI0aHJcIixcbiAgICAgICAgICAgICAgICBcImVuYWJsZVRpbWVcIixcbiAgICAgICAgICAgICAgICBcIm5vQ2FsZW5kYXJcIixcbiAgICAgICAgICAgICAgICBcImFsdElucHV0XCIsXG4gICAgICAgICAgICAgICAgXCJzaG9ydGhhbmRDdXJyZW50TW9udGhcIixcbiAgICAgICAgICAgICAgICBcImlubGluZVwiLFxuICAgICAgICAgICAgICAgIFwic3RhdGljXCIsXG4gICAgICAgICAgICAgICAgXCJlbmFibGVTZWNvbmRzXCIsXG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlTW9iaWxlXCIsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdmFyIHVzZXJDb25maWcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbGVtZW50LmRhdGFzZXQgfHwge30pKSksIGluc3RhbmNlQ29uZmlnKTtcbiAgICAgICAgICAgIHZhciBmb3JtYXRzID0ge307XG4gICAgICAgICAgICBzZWxmLmNvbmZpZy5wYXJzZURhdGUgPSB1c2VyQ29uZmlnLnBhcnNlRGF0ZTtcbiAgICAgICAgICAgIHNlbGYuY29uZmlnLmZvcm1hdERhdGUgPSB1c2VyQ29uZmlnLmZvcm1hdERhdGU7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwiZW5hYmxlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9lbmFibGU7IH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuX2VuYWJsZSA9IHBhcnNlRGF0ZVJ1bGVzKGRhdGVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwiZGlzYWJsZVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fZGlzYWJsZTsgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5fZGlzYWJsZSA9IHBhcnNlRGF0ZVJ1bGVzKGRhdGVzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdGltZU1vZGUgPSB1c2VyQ29uZmlnLm1vZGUgPT09IFwidGltZVwiO1xuICAgICAgICAgICAgaWYgKCF1c2VyQ29uZmlnLmRhdGVGb3JtYXQgJiYgKHVzZXJDb25maWcuZW5hYmxlVGltZSB8fCB0aW1lTW9kZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdERhdGVGb3JtYXQgPSBmbGF0cGlja3IuZGVmYXVsdENvbmZpZy5kYXRlRm9ybWF0IHx8IGRlZmF1bHRzLmRhdGVGb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0cy5kYXRlRm9ybWF0ID1cbiAgICAgICAgICAgICAgICAgICAgdXNlckNvbmZpZy5ub0NhbGVuZGFyIHx8IHRpbWVNb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFwiSDppXCIgKyAodXNlckNvbmZpZy5lbmFibGVTZWNvbmRzID8gXCI6U1wiIDogXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZGVmYXVsdERhdGVGb3JtYXQgKyBcIiBIOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTXCIgOiBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1c2VyQ29uZmlnLmFsdElucHV0ICYmXG4gICAgICAgICAgICAgICAgKHVzZXJDb25maWcuZW5hYmxlVGltZSB8fCB0aW1lTW9kZSkgJiZcbiAgICAgICAgICAgICAgICAhdXNlckNvbmZpZy5hbHRGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEFsdEZvcm1hdCA9IGZsYXRwaWNrci5kZWZhdWx0Q29uZmlnLmFsdEZvcm1hdCB8fCBkZWZhdWx0cy5hbHRGb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0cy5hbHRGb3JtYXQgPVxuICAgICAgICAgICAgICAgICAgICB1c2VyQ29uZmlnLm5vQ2FsZW5kYXIgfHwgdGltZU1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJoOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTIEtcIiA6IFwiIEtcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogZGVmYXVsdEFsdEZvcm1hdCArIChcIiBoOmlcIiArICh1c2VyQ29uZmlnLmVuYWJsZVNlY29uZHMgPyBcIjpTXCIgOiBcIlwiKSArIFwiIEtcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VsZi5jb25maWcsIFwibWluRGF0ZVwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxmLmNvbmZpZy5fbWluRGF0ZTsgfSxcbiAgICAgICAgICAgICAgICBzZXQ6IG1pbk1heERhdGVTZXR0ZXIoXCJtaW5cIiksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtYXhEYXRlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9tYXhEYXRlOyB9LFxuICAgICAgICAgICAgICAgIHNldDogbWluTWF4RGF0ZVNldHRlcihcIm1heFwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG1pbk1heFRpbWVTZXR0ZXIgPSBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW3R5cGUgPT09IFwibWluXCIgPyBcIl9taW5UaW1lXCIgOiBcIl9tYXhUaW1lXCJdID0gc2VsZi5wYXJzZURhdGUodmFsLCBcIkg6aTpTXCIpO1xuICAgICAgICAgICAgfTsgfTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzZWxmLmNvbmZpZywgXCJtaW5UaW1lXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGYuY29uZmlnLl9taW5UaW1lOyB9LFxuICAgICAgICAgICAgICAgIHNldDogbWluTWF4VGltZVNldHRlcihcIm1pblwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNlbGYuY29uZmlnLCBcIm1heFRpbWVcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VsZi5jb25maWcuX21heFRpbWU7IH0sXG4gICAgICAgICAgICAgICAgc2V0OiBtaW5NYXhUaW1lU2V0dGVyKFwibWF4XCIpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodXNlckNvbmZpZy5tb2RlID09PSBcInRpbWVcIikge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmVuYWJsZVRpbWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihzZWxmLmNvbmZpZywgZm9ybWF0cywgdXNlckNvbmZpZyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2xPcHRzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzE2NjNcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tib29sT3B0c1tpXV0gPT09IHRydWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW2Jvb2xPcHRzW2ldXSA9PT0gXCJ0cnVlXCI7XG4gICAgICAgICAgICBIT09LUy5maWx0ZXIoZnVuY3Rpb24gKGhvb2spIHsgcmV0dXJuIHNlbGYuY29uZmlnW2hvb2tdICE9PSB1bmRlZmluZWQ7IH0pLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1tob29rXSA9IGFycmF5aWZ5KHNlbGYuY29uZmlnW2hvb2tdIHx8IFtdKS5tYXAoYmluZFRvSW5zdGFuY2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmLmlzTW9iaWxlID1cbiAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcuZGlzYWJsZU1vYmlsZSAmJlxuICAgICAgICAgICAgICAgICAgICAhc2VsZi5jb25maWcuaW5saW5lICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vZGUgPT09IFwic2luZ2xlXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgIXNlbGYuY29uZmlnLmRpc2FibGUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICFzZWxmLmNvbmZpZy5lbmFibGUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICFzZWxmLmNvbmZpZy53ZWVrTnVtYmVycyAmJlxuICAgICAgICAgICAgICAgICAgICAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuY29uZmlnLnBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGx1Z2luQ29uZiA9IHNlbGYuY29uZmlnLnBsdWdpbnNbaV0oc2VsZikgfHwge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHBsdWdpbkNvbmYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKEhPT0tTLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZ1trZXldID0gYXJyYXlpZnkocGx1Z2luQ29uZltrZXldKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoYmluZFRvSW5zdGFuY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChzZWxmLmNvbmZpZ1trZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdXNlckNvbmZpZ1trZXldID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdba2V5XSA9IHBsdWdpbkNvbmZba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXVzZXJDb25maWcuYWx0SW5wdXRDbGFzcykge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmFsdElucHV0Q2xhc3MgPVxuICAgICAgICAgICAgICAgICAgICBnZXRJbnB1dEVsZW0oKS5jbGFzc05hbWUgKyBcIiBcIiArIHNlbGYuY29uZmlnLmFsdElucHV0Q2xhc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblBhcnNlQ29uZmlnXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldElucHV0RWxlbSgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy53cmFwXG4gICAgICAgICAgICAgICAgPyBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1pbnB1dF1cIilcbiAgICAgICAgICAgICAgICA6IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0dXBMb2NhbGUoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlbGYuY29uZmlnLmxvY2FsZSAhPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBmbGF0cGlja3IubDEwbnNbc2VsZi5jb25maWcubG9jYWxlXSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5lcnJvckhhbmRsZXIobmV3IEVycm9yKFwiZmxhdHBpY2tyOiBpbnZhbGlkIGxvY2FsZSBcIiArIHNlbGYuY29uZmlnLmxvY2FsZSkpO1xuICAgICAgICAgICAgc2VsZi5sMTBuID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGZsYXRwaWNrci5sMTBucy5kZWZhdWx0KSwgKHR5cGVvZiBzZWxmLmNvbmZpZy5sb2NhbGUgPT09IFwib2JqZWN0XCJcbiAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLmxvY2FsZVxuICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubG9jYWxlICE9PSBcImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICA/IGZsYXRwaWNrci5sMTBuc1tzZWxmLmNvbmZpZy5sb2NhbGVdXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICB0b2tlblJlZ2V4LksgPSBcIihcIiArIHNlbGYubDEwbi5hbVBNWzBdICsgXCJ8XCIgKyBzZWxmLmwxMG4uYW1QTVsxXSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMF0udG9Mb3dlckNhc2UoKSArIFwifFwiICsgc2VsZi5sMTBuLmFtUE1bMV0udG9Mb3dlckNhc2UoKSArIFwiKVwiO1xuICAgICAgICAgICAgdmFyIHVzZXJDb25maWcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaW5zdGFuY2VDb25maWcpLCBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGVsZW1lbnQuZGF0YXNldCB8fCB7fSkpKTtcbiAgICAgICAgICAgIGlmICh1c2VyQ29uZmlnLnRpbWVfMjRociA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAgICAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcudGltZV8yNGhyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy50aW1lXzI0aHIgPSBzZWxmLmwxMG4udGltZV8yNGhyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5mb3JtYXREYXRlID0gY3JlYXRlRGF0ZUZvcm1hdHRlcihzZWxmKTtcbiAgICAgICAgICAgIHNlbGYucGFyc2VEYXRlID0gY3JlYXRlRGF0ZVBhcnNlcih7IGNvbmZpZzogc2VsZi5jb25maWcsIGwxMG46IHNlbGYubDEwbiB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwb3NpdGlvbkNhbGVuZGFyKGN1c3RvbVBvc2l0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY2FsZW5kYXJDb250YWluZXIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblByZUNhbGVuZGFyUG9zaXRpb25cIik7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb25FbGVtZW50ID0gY3VzdG9tUG9zaXRpb25FbGVtZW50IHx8IHNlbGYuX3Bvc2l0aW9uRWxlbWVudDtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhckhlaWdodCA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2UuY2FsbChzZWxmLmNhbGVuZGFyQ29udGFpbmVyLmNoaWxkcmVuLCAoZnVuY3Rpb24gKGFjYywgY2hpbGQpIHsgcmV0dXJuIGFjYyArIGNoaWxkLm9mZnNldEhlaWdodDsgfSksIDApLCBjYWxlbmRhcldpZHRoID0gc2VsZi5jYWxlbmRhckNvbnRhaW5lci5vZmZzZXRXaWR0aCwgY29uZmlnUG9zID0gc2VsZi5jb25maWcucG9zaXRpb24uc3BsaXQoXCIgXCIpLCBjb25maWdQb3NWZXJ0aWNhbCA9IGNvbmZpZ1Bvc1swXSwgY29uZmlnUG9zSG9yaXpvbnRhbCA9IGNvbmZpZ1Bvcy5sZW5ndGggPiAxID8gY29uZmlnUG9zWzFdIDogbnVsbCwgaW5wdXRCb3VuZHMgPSBwb3NpdGlvbkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGRpc3RhbmNlRnJvbUJvdHRvbSA9IHdpbmRvdy5pbm5lckhlaWdodCAtIGlucHV0Qm91bmRzLmJvdHRvbSwgc2hvd09uVG9wID0gY29uZmlnUG9zVmVydGljYWwgPT09IFwiYWJvdmVcIiB8fFxuICAgICAgICAgICAgICAgIChjb25maWdQb3NWZXJ0aWNhbCAhPT0gXCJiZWxvd1wiICYmXG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlRnJvbUJvdHRvbSA8IGNhbGVuZGFySGVpZ2h0ICYmXG4gICAgICAgICAgICAgICAgICAgIGlucHV0Qm91bmRzLnRvcCA+IGNhbGVuZGFySGVpZ2h0KTtcbiAgICAgICAgICAgIHZhciB0b3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgK1xuICAgICAgICAgICAgICAgIGlucHV0Qm91bmRzLnRvcCArXG4gICAgICAgICAgICAgICAgKCFzaG93T25Ub3AgPyBwb3NpdGlvbkVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgMiA6IC1jYWxlbmRhckhlaWdodCAtIDIpO1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJhcnJvd1RvcFwiLCAhc2hvd09uVG9wKTtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dCb3R0b21cIiwgc2hvd09uVG9wKTtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5pbmxpbmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgKyBpbnB1dEJvdW5kcy5sZWZ0O1xuICAgICAgICAgICAgdmFyIGlzQ2VudGVyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgaXNSaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1Bvc0hvcml6b250YWwgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgICAgICAgICBsZWZ0IC09IChjYWxlbmRhcldpZHRoIC0gaW5wdXRCb3VuZHMud2lkdGgpIC8gMjtcbiAgICAgICAgICAgICAgICBpc0NlbnRlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25maWdQb3NIb3Jpem9udGFsID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICBsZWZ0IC09IGNhbGVuZGFyV2lkdGggLSBpbnB1dEJvdW5kcy53aWR0aDtcbiAgICAgICAgICAgICAgICBpc1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dMZWZ0XCIsICFpc0NlbnRlciAmJiAhaXNSaWdodCk7XG4gICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcImFycm93Q2VudGVyXCIsIGlzQ2VudGVyKTtcbiAgICAgICAgICAgIHRvZ2dsZUNsYXNzKHNlbGYuY2FsZW5kYXJDb250YWluZXIsIFwiYXJyb3dSaWdodFwiLCBpc1JpZ2h0KTtcbiAgICAgICAgICAgIHZhciByaWdodCA9IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC1cbiAgICAgICAgICAgICAgICAod2luZG93LnBhZ2VYT2Zmc2V0ICsgaW5wdXRCb3VuZHMucmlnaHQpO1xuICAgICAgICAgICAgdmFyIHJpZ2h0TW9zdCA9IGxlZnQgKyBjYWxlbmRhcldpZHRoID4gd2luZG93LmRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB2YXIgY2VudGVyTW9zdCA9IHJpZ2h0ICsgY2FsZW5kYXJXaWR0aCA+IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJyaWdodE1vc3RcIiwgcmlnaHRNb3N0KTtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5zdGF0aWMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS50b3AgPSB0b3AgKyBcInB4XCI7XG4gICAgICAgICAgICBpZiAoIXJpZ2h0TW9zdCkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IGxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWNlbnRlck1vc3QpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSBcImF1dG9cIjtcbiAgICAgICAgICAgICAgICBzZWxmLmNhbGVuZGFyQ29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gcmlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9jID0gZ2V0RG9jdW1lbnRTdHlsZVNoZWV0KCk7XG4gICAgICAgICAgICAgICAgLy8gc29tZSB0ZXN0aW5nIGVudmlyb25tZW50cyBkb24ndCBoYXZlIGNzcyBzdXBwb3J0XG4gICAgICAgICAgICAgICAgaWYgKGRvYyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIGJvZHlXaWR0aCA9IHdpbmRvdy5kb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgIHZhciBjZW50ZXJMZWZ0ID0gTWF0aC5tYXgoMCwgYm9keVdpZHRoIC8gMiAtIGNhbGVuZGFyV2lkdGggLyAyKTtcbiAgICAgICAgICAgICAgICB2YXIgY2VudGVyQmVmb3JlID0gXCIuZmxhdHBpY2tyLWNhbGVuZGFyLmNlbnRlck1vc3Q6YmVmb3JlXCI7XG4gICAgICAgICAgICAgICAgdmFyIGNlbnRlckFmdGVyID0gXCIuZmxhdHBpY2tyLWNhbGVuZGFyLmNlbnRlck1vc3Q6YWZ0ZXJcIjtcbiAgICAgICAgICAgICAgICB2YXIgY2VudGVySW5kZXggPSBkb2MuY3NzUnVsZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBjZW50ZXJTdHlsZSA9IFwie2xlZnQ6XCIgKyBpbnB1dEJvdW5kcy5sZWZ0ICsgXCJweDtyaWdodDphdXRvO31cIjtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcyhzZWxmLmNhbGVuZGFyQ29udGFpbmVyLCBcInJpZ2h0TW9zdFwiLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3Moc2VsZi5jYWxlbmRhckNvbnRhaW5lciwgXCJjZW50ZXJNb3N0XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIGRvYy5pbnNlcnRSdWxlKGNlbnRlckJlZm9yZSArIFwiLFwiICsgY2VudGVyQWZ0ZXIgKyBjZW50ZXJTdHlsZSwgY2VudGVySW5kZXgpO1xuICAgICAgICAgICAgICAgIHNlbGYuY2FsZW5kYXJDb250YWluZXIuc3R5bGUubGVmdCA9IGNlbnRlckxlZnQgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgc2VsZi5jYWxlbmRhckNvbnRhaW5lci5zdHlsZS5yaWdodCA9IFwiYXV0b1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGdldERvY3VtZW50U3R5bGVTaGVldCgpIHtcbiAgICAgICAgICAgIHZhciBlZGl0YWJsZVNoZWV0ID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hlZXQgPSBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzaGVldC5jc3NSdWxlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWRpdGFibGVTaGVldCA9IHNoZWV0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVkaXRhYmxlU2hlZXQgIT0gbnVsbCA/IGVkaXRhYmxlU2hlZXQgOiBjcmVhdGVTdHlsZVNoZWV0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldCgpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlLnNoZWV0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlZHJhdygpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5ub0NhbGVuZGFyIHx8IHNlbGYuaXNNb2JpbGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgYnVpbGRNb250aFN3aXRjaCgpO1xuICAgICAgICAgICAgdXBkYXRlTmF2aWdhdGlvbkN1cnJlbnRNb250aCgpO1xuICAgICAgICAgICAgYnVpbGREYXlzKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZm9jdXNBbmRDbG9zZSgpIHtcbiAgICAgICAgICAgIHNlbGYuX2lucHV0LmZvY3VzKCk7XG4gICAgICAgICAgICBpZiAod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUVcIikgIT09IC0xIHx8XG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yLm1zTWF4VG91Y2hQb2ludHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGhhY2sgLSBidWdzIGluIHRoZSB3YXkgSUUgaGFuZGxlcyBmb2N1cyBrZWVwcyB0aGUgY2FsZW5kYXIgb3BlblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoc2VsZi5jbG9zZSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0RGF0ZShlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyIGlzU2VsZWN0YWJsZSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF5LmNsYXNzTGlzdCAmJlxuICAgICAgICAgICAgICAgICAgICBkYXkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZmxhdHBpY2tyLWRheVwiKSAmJlxuICAgICAgICAgICAgICAgICAgICAhZGF5LmNsYXNzTGlzdC5jb250YWlucyhcImZsYXRwaWNrci1kaXNhYmxlZFwiKSAmJlxuICAgICAgICAgICAgICAgICAgICAhZGF5LmNsYXNzTGlzdC5jb250YWlucyhcIm5vdEFsbG93ZWRcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHQgPSBmaW5kUGFyZW50KGdldEV2ZW50VGFyZ2V0KGUpLCBpc1NlbGVjdGFibGUpO1xuICAgICAgICAgICAgaWYgKHQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdDtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZERhdGUgPSAoc2VsZi5sYXRlc3RTZWxlY3RlZERhdGVPYmogPSBuZXcgRGF0ZSh0YXJnZXQuZGF0ZU9iai5nZXRUaW1lKCkpKTtcbiAgICAgICAgICAgIHZhciBzaG91bGRDaGFuZ2VNb250aCA9IChzZWxlY3RlZERhdGUuZ2V0TW9udGgoKSA8IHNlbGYuY3VycmVudE1vbnRoIHx8XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWREYXRlLmdldE1vbnRoKCkgPlxuICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRNb250aCArIHNlbGYuY29uZmlnLnNob3dNb250aHMgLSAxKSAmJlxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIjtcbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlRWxlbSA9IHRhcmdldDtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiKVxuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcyA9IFtzZWxlY3RlZERhdGVdO1xuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5jb25maWcubW9kZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBpc0RhdGVTZWxlY3RlZChzZWxlY3RlZERhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4KVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMuc3BsaWNlKHBhcnNlSW50KHNlbGVjdGVkSW5kZXgpLCAxKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNsZWFyKGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZWN0ZWREYXRlO1xuICAgICAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWREYXRlcy5wdXNoKHNlbGVjdGVkRGF0ZSk7XG4gICAgICAgICAgICAgICAgLy8gdW5sZXNzIHNlbGVjdGluZyBzYW1lIGRhdGUgdHdpY2UsIHNvcnQgYXNjZW5kaW5nbHlcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZURhdGVzKHNlbGVjdGVkRGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzBdLCB0cnVlKSAhPT0gMClcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuZ2V0VGltZSgpIC0gYi5nZXRUaW1lKCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0SG91cnNGcm9tSW5wdXRzKCk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2hhbmdlTW9udGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNOZXdZZWFyID0gc2VsZi5jdXJyZW50WWVhciAhPT0gc2VsZWN0ZWREYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50WWVhciA9IHNlbGVjdGVkRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudE1vbnRoID0gc2VsZWN0ZWREYXRlLmdldE1vbnRoKCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmV3WWVhcikge1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvblllYXJDaGFuZ2VcIik7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkTW9udGhTd2l0Y2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25Nb250aENoYW5nZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZU5hdmlnYXRpb25DdXJyZW50TW9udGgoKTtcbiAgICAgICAgICAgIGJ1aWxkRGF5cygpO1xuICAgICAgICAgICAgdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgIC8vIG1haW50YWluIGZvY3VzXG4gICAgICAgICAgICBpZiAoIXNob3VsZENoYW5nZU1vbnRoICYmXG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiICYmXG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcuc2hvd01vbnRocyA9PT0gMSlcbiAgICAgICAgICAgICAgICBmb2N1c09uRGF5RWxlbSh0YXJnZXQpO1xuICAgICAgICAgICAgZWxzZSBpZiAoc2VsZi5zZWxlY3RlZERhdGVFbGVtICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBzZWxmLmhvdXJFbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZUVsZW0gJiYgc2VsZi5zZWxlY3RlZERhdGVFbGVtLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5ob3VyRWxlbWVudCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHNlbGYuaG91ckVsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiBzZWxmLmhvdXJFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuY2xvc2VPblNlbGVjdCkge1xuICAgICAgICAgICAgICAgIHZhciBzaW5nbGUgPSBzZWxmLmNvbmZpZy5tb2RlID09PSBcInNpbmdsZVwiICYmICFzZWxmLmNvbmZpZy5lbmFibGVUaW1lO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHNlbGYuY29uZmlnLm1vZGUgPT09IFwicmFuZ2VcIiAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAyICYmXG4gICAgICAgICAgICAgICAgICAgICFzZWxmLmNvbmZpZy5lbmFibGVUaW1lO1xuICAgICAgICAgICAgICAgIGlmIChzaW5nbGUgfHwgcmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNBbmRDbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyaWdnZXJDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgQ0FMTEJBQ0tTID0ge1xuICAgICAgICAgICAgbG9jYWxlOiBbc2V0dXBMb2NhbGUsIHVwZGF0ZVdlZWtkYXlzXSxcbiAgICAgICAgICAgIHNob3dNb250aHM6IFtidWlsZE1vbnRocywgc2V0Q2FsZW5kYXJXaWR0aCwgYnVpbGRXZWVrZGF5c10sXG4gICAgICAgICAgICBtaW5EYXRlOiBbanVtcFRvRGF0ZV0sXG4gICAgICAgICAgICBtYXhEYXRlOiBbanVtcFRvRGF0ZV0sXG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIHNldChvcHRpb24sIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uICE9PSBudWxsICYmIHR5cGVvZiBvcHRpb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHNlbGYuY29uZmlnLCBvcHRpb24pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKENBTExCQUNLU1trZXldICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBDQUxMQkFDS1Nba2V5XS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4KCk7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnW29wdGlvbl0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoQ0FMTEJBQ0tTW29wdGlvbl0gIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgQ0FMTEJBQ0tTW29wdGlvbl0uZm9yRWFjaChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCgpOyB9KTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChIT09LUy5pbmRleE9mKG9wdGlvbikgPiAtMSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWdbb3B0aW9uXSA9IGFycmF5aWZ5KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYucmVkcmF3KCk7XG4gICAgICAgICAgICB1cGRhdGVWYWx1ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRTZWxlY3RlZERhdGUoaW5wdXREYXRlLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIHZhciBkYXRlcyA9IFtdO1xuICAgICAgICAgICAgaWYgKGlucHV0RGF0ZSBpbnN0YW5jZW9mIEFycmF5KVxuICAgICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gc2VsZi5wYXJzZURhdGUoZCwgZm9ybWF0KTsgfSk7XG4gICAgICAgICAgICBlbHNlIGlmIChpbnB1dERhdGUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBpbnB1dERhdGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgZGF0ZXMgPSBbc2VsZi5wYXJzZURhdGUoaW5wdXREYXRlLCBmb3JtYXQpXTtcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dERhdGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlbGYuY29uZmlnLm1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNpbmdsZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidGltZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXMgPSBbc2VsZi5wYXJzZURhdGUoaW5wdXREYXRlLCBmb3JtYXQpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXVsdGlwbGVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVzID0gaW5wdXREYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KHNlbGYuY29uZmlnLmNvbmp1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyYW5nZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZXMgPSBpbnB1dERhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoc2VsZi5sMTBuLnJhbmdlU2VwYXJhdG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGRhdGUpIHsgcmV0dXJuIHNlbGYucGFyc2VEYXRlKGRhdGUsIGZvcm1hdCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLmVycm9ySGFuZGxlcihuZXcgRXJyb3IoXCJJbnZhbGlkIGRhdGUgc3VwcGxpZWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoaW5wdXREYXRlKSkpO1xuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzID0gKHNlbGYuY29uZmlnLmFsbG93SW52YWxpZFByZWxvYWRcbiAgICAgICAgICAgICAgICA/IGRhdGVzXG4gICAgICAgICAgICAgICAgOiBkYXRlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQgaW5zdGFuY2VvZiBEYXRlICYmIGlzRW5hYmxlZChkLCBmYWxzZSk7IH0pKTtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5tb2RlID09PSBcInJhbmdlXCIpXG4gICAgICAgICAgICAgICAgc2VsZi5zZWxlY3RlZERhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuZ2V0VGltZSgpIC0gYi5nZXRUaW1lKCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldERhdGUoZGF0ZSwgdHJpZ2dlckNoYW5nZSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZSA9PT0gdm9pZCAwKSB7IHRyaWdnZXJDaGFuZ2UgPSBmYWxzZTsgfVxuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gdm9pZCAwKSB7IGZvcm1hdCA9IHNlbGYuY29uZmlnLmRhdGVGb3JtYXQ7IH1cbiAgICAgICAgICAgIGlmICgoZGF0ZSAhPT0gMCAmJiAhZGF0ZSkgfHwgKGRhdGUgaW5zdGFuY2VvZiBBcnJheSAmJiBkYXRlLmxlbmd0aCA9PT0gMCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuY2xlYXIodHJpZ2dlckNoYW5nZSk7XG4gICAgICAgICAgICBzZXRTZWxlY3RlZERhdGUoZGF0ZSwgZm9ybWF0KTtcbiAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID1cbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXNbc2VsZi5zZWxlY3RlZERhdGVzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgc2VsZi5yZWRyYXcoKTtcbiAgICAgICAgICAgIGp1bXBUb0RhdGUodW5kZWZpbmVkLCB0cmlnZ2VyQ2hhbmdlKTtcbiAgICAgICAgICAgIHNldEhvdXJzRnJvbURhdGUoKTtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jbGVhcihmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cGRhdGVWYWx1ZSh0cmlnZ2VyQ2hhbmdlKTtcbiAgICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlKVxuICAgICAgICAgICAgICAgIHRyaWdnZXJFdmVudChcIm9uQ2hhbmdlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlRGF0ZVJ1bGVzKGFycikge1xuICAgICAgICAgICAgcmV0dXJuIGFyclxuICAgICAgICAgICAgICAgIC5zbGljZSgpXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnVsZSA9PT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcnVsZSA9PT0gXCJudW1iZXJcIiB8fFxuICAgICAgICAgICAgICAgICAgICBydWxlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5wYXJzZURhdGUocnVsZSwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocnVsZSAmJlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgcnVsZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgICAgICBydWxlLmZyb20gJiZcbiAgICAgICAgICAgICAgICAgICAgcnVsZS50bylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IHNlbGYucGFyc2VEYXRlKHJ1bGUuZnJvbSwgdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvOiBzZWxmLnBhcnNlRGF0ZShydWxlLnRvLCB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KTsgLy8gcmVtb3ZlIGZhbHN5IHZhbHVlc1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldHVwRGF0ZXMoKSB7XG4gICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMgPSBbXTtcbiAgICAgICAgICAgIHNlbGYubm93ID0gc2VsZi5wYXJzZURhdGUoc2VsZi5jb25maWcubm93KSB8fCBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBJRTExIHNldHRpbmcgcGxhY2Vob2xkZXIgYXMgdGhlIGlucHV0J3MgdmFsdWVcbiAgICAgICAgICAgIHZhciBwcmVsb2FkZWREYXRlID0gc2VsZi5jb25maWcuZGVmYXVsdERhdGUgfHxcbiAgICAgICAgICAgICAgICAoKHNlbGYuaW5wdXQubm9kZU5hbWUgPT09IFwiSU5QVVRcIiB8fFxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlucHV0Lm5vZGVOYW1lID09PSBcIlRFWFRBUkVBXCIpICYmXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQucGxhY2Vob2xkZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbnB1dC52YWx1ZSA9PT0gc2VsZi5pbnB1dC5wbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmlucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChwcmVsb2FkZWREYXRlKVxuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkRGF0ZShwcmVsb2FkZWREYXRlLCBzZWxmLmNvbmZpZy5kYXRlRm9ybWF0KTtcbiAgICAgICAgICAgIHNlbGYuX2luaXRpYWxEYXRlID1cbiAgICAgICAgICAgICAgICBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IHNlbGYuc2VsZWN0ZWREYXRlc1swXVxuICAgICAgICAgICAgICAgICAgICA6IHNlbGYuY29uZmlnLm1pbkRhdGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0VGltZSgpID4gc2VsZi5ub3cuZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLm1pbkRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jb25maWcubWF4RGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heERhdGUuZ2V0VGltZSgpIDwgc2VsZi5ub3cuZ2V0VGltZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5tYXhEYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLm5vdztcbiAgICAgICAgICAgIHNlbGYuY3VycmVudFllYXIgPSBzZWxmLl9pbml0aWFsRGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgICAgICAgICAgc2VsZi5jdXJyZW50TW9udGggPSBzZWxmLl9pbml0aWFsRGF0ZS5nZXRNb250aCgpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqID0gc2VsZi5zZWxlY3RlZERhdGVzWzBdO1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1pblRpbWUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5UaW1lID0gc2VsZi5wYXJzZURhdGUoc2VsZi5jb25maWcubWluVGltZSwgXCJIOmlcIik7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4VGltZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heFRpbWUgPSBzZWxmLnBhcnNlRGF0ZShzZWxmLmNvbmZpZy5tYXhUaW1lLCBcIkg6aVwiKTtcbiAgICAgICAgICAgIHNlbGYubWluRGF0ZUhhc1RpbWUgPVxuICAgICAgICAgICAgICAgICEhc2VsZi5jb25maWcubWluRGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAoc2VsZi5jb25maWcubWluRGF0ZS5nZXRIb3VycygpID4gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubWluRGF0ZS5nZXRNaW51dGVzKCkgPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlLmdldFNlY29uZHMoKSA+IDApO1xuICAgICAgICAgICAgc2VsZi5tYXhEYXRlSGFzVGltZSA9XG4gICAgICAgICAgICAgICAgISFzZWxmLmNvbmZpZy5tYXhEYXRlICYmXG4gICAgICAgICAgICAgICAgICAgIChzZWxmLmNvbmZpZy5tYXhEYXRlLmdldEhvdXJzKCkgPiAwIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5tYXhEYXRlLmdldE1pbnV0ZXMoKSA+IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heERhdGUuZ2V0U2Vjb25kcygpID4gMCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0dXBJbnB1dHMoKSB7XG4gICAgICAgICAgICBzZWxmLmlucHV0ID0gZ2V0SW5wdXRFbGVtKCk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgICAgaWYgKCFzZWxmLmlucHV0KSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jb25maWcuZXJyb3JIYW5kbGVyKG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgZWxlbWVudCBzcGVjaWZpZWRcIikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhhY2s6IHN0b3JlIHByZXZpb3VzIHR5cGUgdG8gcmVzdG9yZSBpdCBhZnRlciBkZXN0cm95KClcbiAgICAgICAgICAgIHNlbGYuaW5wdXQuX3R5cGUgPSBzZWxmLmlucHV0LnR5cGU7XG4gICAgICAgICAgICBzZWxmLmlucHV0LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgICAgIHNlbGYuaW5wdXQuY2xhc3NMaXN0LmFkZChcImZsYXRwaWNrci1pbnB1dFwiKTtcbiAgICAgICAgICAgIHNlbGYuX2lucHV0ID0gc2VsZi5pbnB1dDtcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5hbHRJbnB1dCkge1xuICAgICAgICAgICAgICAgIC8vIHJlcGxpY2F0ZSBzZWxmLmVsZW1lbnRcbiAgICAgICAgICAgICAgICBzZWxmLmFsdElucHV0ID0gY3JlYXRlRWxlbWVudChzZWxmLmlucHV0Lm5vZGVOYW1lLCBzZWxmLmNvbmZpZy5hbHRJbnB1dENsYXNzKTtcbiAgICAgICAgICAgICAgICBzZWxmLl9pbnB1dCA9IHNlbGYuYWx0SW5wdXQ7XG4gICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5wbGFjZWhvbGRlciA9IHNlbGYuaW5wdXQucGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC5yZXF1aXJlZCA9IHNlbGYuaW5wdXQucmVxdWlyZWQ7XG4gICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC50YWJJbmRleCA9IHNlbGYuaW5wdXQudGFiSW5kZXg7XG4gICAgICAgICAgICAgICAgc2VsZi5hbHRJbnB1dC50eXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwiaGlkZGVuXCIpO1xuICAgICAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcuc3RhdGljICYmIHNlbGYuaW5wdXQucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbnB1dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzZWxmLmFsdElucHV0LCBzZWxmLmlucHV0Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcuYWxsb3dJbnB1dClcbiAgICAgICAgICAgICAgICBzZWxmLl9pbnB1dC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCBcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgc2VsZi5fcG9zaXRpb25FbGVtZW50ID0gc2VsZi5jb25maWcucG9zaXRpb25FbGVtZW50IHx8IHNlbGYuX2lucHV0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNldHVwTW9iaWxlKCkge1xuICAgICAgICAgICAgdmFyIGlucHV0VHlwZSA9IHNlbGYuY29uZmlnLmVuYWJsZVRpbWVcbiAgICAgICAgICAgICAgICA/IHNlbGYuY29uZmlnLm5vQ2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgPyBcInRpbWVcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiZGF0ZXRpbWUtbG9jYWxcIlxuICAgICAgICAgICAgICAgIDogXCJkYXRlXCI7XG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0ID0gY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHNlbGYuaW5wdXQuY2xhc3NOYW1lICsgXCIgZmxhdHBpY2tyLW1vYmlsZVwiKTtcbiAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQudGFiSW5kZXggPSAxO1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC50eXBlID0gaW5wdXRUeXBlO1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC5kaXNhYmxlZCA9IHNlbGYuaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnJlcXVpcmVkID0gc2VsZi5pbnB1dC5yZXF1aXJlZDtcbiAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQucGxhY2Vob2xkZXIgPSBzZWxmLmlucHV0LnBsYWNlaG9sZGVyO1xuICAgICAgICAgICAgc2VsZi5tb2JpbGVGb3JtYXRTdHIgPVxuICAgICAgICAgICAgICAgIGlucHV0VHlwZSA9PT0gXCJkYXRldGltZS1sb2NhbFwiXG4gICAgICAgICAgICAgICAgICAgID8gXCJZLW0tZFxcXFxUSDppOlNcIlxuICAgICAgICAgICAgICAgICAgICA6IGlucHV0VHlwZSA9PT0gXCJkYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJZLW0tZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwiSDppOlNcIjtcbiAgICAgICAgICAgIGlmIChzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQuZGVmYXVsdFZhbHVlID0gc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLnNlbGVjdGVkRGF0ZXNbMF0sIHNlbGYubW9iaWxlRm9ybWF0U3RyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZy5taW5EYXRlKVxuICAgICAgICAgICAgICAgIHNlbGYubW9iaWxlSW5wdXQubWluID0gc2VsZi5mb3JtYXREYXRlKHNlbGYuY29uZmlnLm1pbkRhdGUsIFwiWS1tLWRcIik7XG4gICAgICAgICAgICBpZiAoc2VsZi5jb25maWcubWF4RGF0ZSlcbiAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0Lm1heCA9IHNlbGYuZm9ybWF0RGF0ZShzZWxmLmNvbmZpZy5tYXhEYXRlLCBcIlktbS1kXCIpO1xuICAgICAgICAgICAgaWYgKHNlbGYuaW5wdXQuZ2V0QXR0cmlidXRlKFwic3RlcFwiKSlcbiAgICAgICAgICAgICAgICBzZWxmLm1vYmlsZUlucHV0LnN0ZXAgPSBTdHJpbmcoc2VsZi5pbnB1dC5nZXRBdHRyaWJ1dGUoXCJzdGVwXCIpKTtcbiAgICAgICAgICAgIHNlbGYuaW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbHRJbnB1dCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQudHlwZSA9IFwiaGlkZGVuXCI7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLmlucHV0LnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5wdXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2VsZi5tb2JpbGVJbnB1dCwgc2VsZi5pbnB1dC5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxuICAgICAgICAgICAgYmluZChzZWxmLm1vYmlsZUlucHV0LCBcImNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHNlbGYuc2V0RGF0ZShnZXRFdmVudFRhcmdldChlKS52YWx1ZSwgZmFsc2UsIHNlbGYubW9iaWxlRm9ybWF0U3RyKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNoYW5nZVwiKTtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyRXZlbnQoXCJvbkNsb3NlXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdG9nZ2xlKGUpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmlzT3BlbiA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jbG9zZSgpO1xuICAgICAgICAgICAgc2VsZi5vcGVuKGUpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGluc3RhbmNlIGhhcyBiZWVuIGRlc3Ryb3llZCBhbHJlYWR5LCBhbGwgaG9va3MgaGF2ZSBiZWVuIHJlbW92ZWRcbiAgICAgICAgICAgIGlmIChzZWxmLmNvbmZpZyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciBob29rcyA9IHNlbGYuY29uZmlnW2V2ZW50XTtcbiAgICAgICAgICAgIGlmIChob29rcyAhPT0gdW5kZWZpbmVkICYmIGhvb2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaG9va3NbaV0gJiYgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBob29rc1tpXShzZWxmLnNlbGVjdGVkRGF0ZXMsIHNlbGYuaW5wdXQudmFsdWUsIHNlbGYsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2ZW50ID09PSBcIm9uQ2hhbmdlXCIpIHtcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoXCJjaGFuZ2VcIikpO1xuICAgICAgICAgICAgICAgIC8vIG1hbnkgZnJvbnQtZW5kIGZyYW1ld29ya3MgYmluZCB0byB0aGUgaW5wdXQgZXZlbnRcbiAgICAgICAgICAgICAgICBzZWxmLmlucHV0LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoXCJpbnB1dFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRXZlbnQobmFtZSkge1xuICAgICAgICAgICAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgICAgICAgICAgZS5pbml0RXZlbnQobmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0RhdGVTZWxlY3RlZChkYXRlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuc2VsZWN0ZWREYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChjb21wYXJlRGF0ZXMoc2VsZi5zZWxlY3RlZERhdGVzW2ldLCBkYXRlKSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UoZGF0ZSkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm1vZGUgIT09IFwicmFuZ2VcIiB8fCBzZWxmLnNlbGVjdGVkRGF0ZXMubGVuZ3RoIDwgMilcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gKGNvbXBhcmVEYXRlcyhkYXRlLCBzZWxmLnNlbGVjdGVkRGF0ZXNbMF0pID49IDAgJiZcbiAgICAgICAgICAgICAgICBjb21wYXJlRGF0ZXMoZGF0ZSwgc2VsZi5zZWxlY3RlZERhdGVzWzFdKSA8PSAwKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uQ3VycmVudE1vbnRoKCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuY29uZmlnLm5vQ2FsZW5kYXIgfHwgc2VsZi5pc01vYmlsZSB8fCAhc2VsZi5tb250aE5hdilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZWxmLnllYXJFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh5ZWFyRWxlbWVudCwgaSkge1xuICAgICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoc2VsZi5jdXJyZW50WWVhciwgc2VsZi5jdXJyZW50TW9udGgsIDEpO1xuICAgICAgICAgICAgICAgIGQuc2V0TW9udGgoc2VsZi5jdXJyZW50TW9udGggKyBpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5jb25maWcuc2hvd01vbnRocyA+IDEgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcubW9udGhTZWxlY3RvclR5cGUgPT09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5tb250aEVsZW1lbnRzW2ldLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoVG9TdHIoZC5nZXRNb250aCgpLCBzZWxmLmNvbmZpZy5zaG9ydGhhbmRDdXJyZW50TW9udGgsIHNlbGYubDEwbikgKyBcIiBcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubW9udGhzRHJvcGRvd25Db250YWluZXIudmFsdWUgPSBkLmdldE1vbnRoKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWVhckVsZW1lbnQudmFsdWUgPSBkLmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZi5faGlkZVByZXZNb250aEFycm93ID1cbiAgICAgICAgICAgICAgICBzZWxmLmNvbmZpZy5taW5EYXRlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgKHNlbGYuY3VycmVudFllYXIgPT09IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzZWxmLmN1cnJlbnRNb250aCA8PSBzZWxmLmNvbmZpZy5taW5EYXRlLmdldE1vbnRoKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogc2VsZi5jdXJyZW50WWVhciA8IHNlbGYuY29uZmlnLm1pbkRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgICAgICBzZWxmLl9oaWRlTmV4dE1vbnRoQXJyb3cgPVxuICAgICAgICAgICAgICAgIHNlbGYuY29uZmlnLm1heERhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICAgICAoc2VsZi5jdXJyZW50WWVhciA9PT0gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNlbGYuY3VycmVudE1vbnRoICsgMSA+IHNlbGYuY29uZmlnLm1heERhdGUuZ2V0TW9udGgoKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzZWxmLmN1cnJlbnRZZWFyID4gc2VsZi5jb25maWcubWF4RGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXREYXRlU3RyKGZvcm1hdCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuc2VsZWN0ZWREYXRlc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGRPYmopIHsgcmV0dXJuIHNlbGYuZm9ybWF0RGF0ZShkT2JqLCBmb3JtYXQpOyB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGQsIGksIGFycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNvbmZpZy5tb2RlICE9PSBcInJhbmdlXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jb25maWcuZW5hYmxlVGltZSB8fFxuICAgICAgICAgICAgICAgICAgICBhcnIuaW5kZXhPZihkKSA9PT0gaTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmpvaW4oc2VsZi5jb25maWcubW9kZSAhPT0gXCJyYW5nZVwiXG4gICAgICAgICAgICAgICAgPyBzZWxmLmNvbmZpZy5jb25qdW5jdGlvblxuICAgICAgICAgICAgICAgIDogc2VsZi5sMTBuLnJhbmdlU2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVXBkYXRlcyB0aGUgdmFsdWVzIG9mIGlucHV0cyBhc3NvY2lhdGVkIHdpdGggdGhlIGNhbGVuZGFyXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh0cmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZSA9PT0gdm9pZCAwKSB7IHRyaWdnZXJDaGFuZ2UgPSB0cnVlOyB9XG4gICAgICAgICAgICBpZiAoc2VsZi5tb2JpbGVJbnB1dCAhPT0gdW5kZWZpbmVkICYmIHNlbGYubW9iaWxlRm9ybWF0U3RyKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5tb2JpbGVJbnB1dC52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gc2VsZi5mb3JtYXREYXRlKHNlbGYubGF0ZXN0U2VsZWN0ZWREYXRlT2JqLCBzZWxmLm1vYmlsZUZvcm1hdFN0cilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuaW5wdXQudmFsdWUgPSBnZXREYXRlU3RyKHNlbGYuY29uZmlnLmRhdGVGb3JtYXQpO1xuICAgICAgICAgICAgaWYgKHNlbGYuYWx0SW5wdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlbGYuYWx0SW5wdXQudmFsdWUgPSBnZXREYXRlU3RyKHNlbGYuY29uZmlnLmFsdEZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZSAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgdHJpZ2dlckV2ZW50KFwib25WYWx1ZVVwZGF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbk1vbnRoTmF2Q2xpY2soZSkge1xuICAgICAgICAgICAgdmFyIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSk7XG4gICAgICAgICAgICB2YXIgaXNQcmV2TW9udGggPSBzZWxmLnByZXZNb250aE5hdi5jb250YWlucyhldmVudFRhcmdldCk7XG4gICAgICAgICAgICB2YXIgaXNOZXh0TW9udGggPSBzZWxmLm5leHRNb250aE5hdi5jb250YWlucyhldmVudFRhcmdldCk7XG4gICAgICAgICAgICBpZiAoaXNQcmV2TW9udGggfHwgaXNOZXh0TW9udGgpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VNb250aChpc1ByZXZNb250aCA/IC0xIDogMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxmLnllYXJFbGVtZW50cy5pbmRleE9mKGV2ZW50VGFyZ2V0KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuc2VsZWN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudFRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJhcnJvd1VwXCIpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5jaGFuZ2VZZWFyKHNlbGYuY3VycmVudFllYXIgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50VGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImFycm93RG93blwiKSkge1xuICAgICAgICAgICAgICAgIHNlbGYuY2hhbmdlWWVhcihzZWxmLmN1cnJlbnRZZWFyIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gdGltZVdyYXBwZXIoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIGlzS2V5RG93biA9IGUudHlwZSA9PT0gXCJrZXlkb3duXCIsIGV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZSksIGlucHV0ID0gZXZlbnRUYXJnZXQ7XG4gICAgICAgICAgICBpZiAoc2VsZi5hbVBNICE9PSB1bmRlZmluZWQgJiYgZXZlbnRUYXJnZXQgPT09IHNlbGYuYW1QTSkge1xuICAgICAgICAgICAgICAgIHNlbGYuYW1QTS50ZXh0Q29udGVudCA9XG4gICAgICAgICAgICAgICAgICAgIHNlbGYubDEwbi5hbVBNW2ludChzZWxmLmFtUE0udGV4dENvbnRlbnQgPT09IHNlbGYubDEwbi5hbVBNWzBdKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWluID0gcGFyc2VGbG9hdChpbnB1dC5nZXRBdHRyaWJ1dGUoXCJtaW5cIikpLCBtYXggPSBwYXJzZUZsb2F0KGlucHV0LmdldEF0dHJpYnV0ZShcIm1heFwiKSksIHN0ZXAgPSBwYXJzZUZsb2F0KGlucHV0LmdldEF0dHJpYnV0ZShcInN0ZXBcIikpLCBjdXJWYWx1ZSA9IHBhcnNlSW50KGlucHV0LnZhbHVlLCAxMCksIGRlbHRhID0gZS5kZWx0YSB8fFxuICAgICAgICAgICAgICAgIChpc0tleURvd24gPyAoZS53aGljaCA9PT0gMzggPyAxIDogLTEpIDogMCk7XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXJWYWx1ZSArIHN0ZXAgKiBkZWx0YTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQudmFsdWUgIT09IFwidW5kZWZpbmVkXCIgJiYgaW5wdXQudmFsdWUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzSG91ckVsZW0gPSBpbnB1dCA9PT0gc2VsZi5ob3VyRWxlbWVudCwgaXNNaW51dGVFbGVtID0gaW5wdXQgPT09IHNlbGYubWludXRlRWxlbWVudDtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50KCFpc0hvdXJFbGVtKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGludChpc0hvdXJFbGVtKSAmJiBpbnQoIXNlbGYuYW1QTSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNaW51dGVFbGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5jcmVtZW50TnVtSW5wdXQodW5kZWZpbmVkLCAtMSwgc2VsZi5ob3VyRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5ld1ZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0ID09PSBzZWxmLmhvdXJFbGVtZW50ID8gbmV3VmFsdWUgLSBtYXggLSBpbnQoIXNlbGYuYW1QTSkgOiBtaW47XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01pbnV0ZUVsZW0pXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnROdW1JbnB1dCh1bmRlZmluZWQsIDEsIHNlbGYuaG91ckVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5hbVBNICYmXG4gICAgICAgICAgICAgICAgICAgIGlzSG91ckVsZW0gJiZcbiAgICAgICAgICAgICAgICAgICAgKHN0ZXAgPT09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3VmFsdWUgKyBjdXJWYWx1ZSA9PT0gMjNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogTWF0aC5hYnMobmV3VmFsdWUgLSBjdXJWYWx1ZSkgPiBzdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmFtUE0udGV4dENvbnRlbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sMTBuLmFtUE1baW50KHNlbGYuYW1QTS50ZXh0Q29udGVudCA9PT0gc2VsZi5sMTBuLmFtUE1bMF0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBwYWQobmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluaXQoKTtcbiAgICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgZnVuY3Rpb24gX2ZsYXRwaWNrcihub2RlTGlzdCwgY29uZmlnKSB7XG4gICAgICAgIC8vIHN0YXRpYyBsaXN0XG4gICAgICAgIHZhciBub2RlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAgICAgICAgICAgLmNhbGwobm9kZUxpc3QpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7IH0pO1xuICAgICAgICB2YXIgaW5zdGFuY2VzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZnAtb21pdFwiKSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuX2ZsYXRwaWNrciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuX2ZsYXRwaWNrciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZS5fZmxhdHBpY2tyID0gRmxhdHBpY2tySW5zdGFuY2Uobm9kZSwgY29uZmlnIHx8IHt9KTtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZXMucHVzaChub2RlLl9mbGF0cGlja3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0YW5jZXMubGVuZ3RoID09PSAxID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgdHlwZW9mIEhUTUxDb2xsZWN0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBOb2RlTGlzdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBicm93c2VyIGVudlxuICAgICAgICBIVE1MQ29sbGVjdGlvbi5wcm90b3R5cGUuZmxhdHBpY2tyID0gTm9kZUxpc3QucHJvdG90eXBlLmZsYXRwaWNrciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIH07XG4gICAgICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mbGF0cGlja3IgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcihbdGhpc10sIGNvbmZpZyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgdmFyIGZsYXRwaWNrciA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29uZmlnKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfZmxhdHBpY2tyKFtzZWxlY3Rvcl0sIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gX2ZsYXRwaWNrcihzZWxlY3RvciwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBmbGF0cGlja3IuZGVmYXVsdENvbmZpZyA9IHt9O1xuICAgIGZsYXRwaWNrci5sMTBucyA9IHtcbiAgICAgICAgZW46IF9fYXNzaWduKHt9LCBlbmdsaXNoKSxcbiAgICAgICAgZGVmYXVsdDogX19hc3NpZ24oe30sIGVuZ2xpc2gpLFxuICAgIH07XG4gICAgZmxhdHBpY2tyLmxvY2FsaXplID0gZnVuY3Rpb24gKGwxMG4pIHtcbiAgICAgICAgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmxhdHBpY2tyLmwxMG5zLmRlZmF1bHQpLCBsMTBuKTtcbiAgICB9O1xuICAgIGZsYXRwaWNrci5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZmxhdHBpY2tyLmRlZmF1bHRDb25maWcpLCBjb25maWcpO1xuICAgIH07XG4gICAgZmxhdHBpY2tyLnBhcnNlRGF0ZSA9IGNyZWF0ZURhdGVQYXJzZXIoe30pO1xuICAgIGZsYXRwaWNrci5mb3JtYXREYXRlID0gY3JlYXRlRGF0ZUZvcm1hdHRlcih7fSk7XG4gICAgZmxhdHBpY2tyLmNvbXBhcmVEYXRlcyA9IGNvbXBhcmVEYXRlcztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGlmICh0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBqUXVlcnkuZm4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgalF1ZXJ5LmZuLmZsYXRwaWNrciA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIHJldHVybiBfZmxhdHBpY2tyKHRoaXMsIGNvbmZpZyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvY2FtZWxjYXNlXG4gICAgRGF0ZS5wcm90b3R5cGUuZnBfaW5jciA9IGZ1bmN0aW9uIChkYXlzKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmdldEZ1bGxZZWFyKCksIHRoaXMuZ2V0TW9udGgoKSwgdGhpcy5nZXREYXRlKCkgKyAodHlwZW9mIGRheXMgPT09IFwic3RyaW5nXCIgPyBwYXJzZUludChkYXlzLCAxMCkgOiBkYXlzKSk7XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB3aW5kb3cuZmxhdHBpY2tyID0gZmxhdHBpY2tyO1xuICAgIH1cblxuICAgIHJldHVybiBmbGF0cGlja3I7XG5cbn0pKSk7XG4iLCIvKlxyXG4gKiBKU1MgdjAuNiAtIEphdmFTY3JpcHQgU3R5bGVzaGVldHNcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0JveDkvanNzXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMSwgRGF2aWQgVGFuZ1xyXG4gKiBNSVQgTGljZW5zZWQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxyXG4gKi9cclxudmFyIGpzcyA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBhZGpTZWxBdHRyUmVnZXggPSAvKCg/OlxcLnwjKVteXFwuXFxzI10rKSgoPzpcXC58IylbXlxcLlxccyNdKykvZztcclxuICAgIHZhciBkb3VibGVDb2xvblBzZXVkb0VsUmVnZXggPSAvKDo6KShiZWZvcmV8YWZ0ZXJ8Zmlyc3QtbGluZXxmaXJzdC1sZXR0ZXJ8c2VsZWN0aW9uKS87XHJcbiAgICB2YXIgc2luZ2xlQ29sb25Qc2V1ZG9FbFJlZ2V4ID0gLyhbXjpdKSg6KShiZWZvcmV8YWZ0ZXJ8Zmlyc3QtbGluZXxmaXJzdC1sZXR0ZXJ8c2VsZWN0aW9uKS87XHJcbiAgICB2YXIgc2luZ2xlQ29sb25Gb3JQc2V1ZG9FbGVtZW50czsgLy8gZmxhZyBmb3Igb2xkZXIgYnJvd3NlcnNcclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnNBbmRSdWxlcyhzaGVldCkge1xyXG4gICAgICAgIHZhciBydWxlcyA9IHNoZWV0LmNzc1J1bGVzIHx8IHNoZWV0LnJ1bGVzIHx8IFtdO1xyXG4gICAgICAgIHZhciByZXN1bHRzID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBPbGRlciBicm93c2VycyBhbmQgRkYgcmVwb3J0IHBzZXVkbyBlbGVtZW50IHNlbGVjdG9ycyBpbiBhbiBvdXRkYXRlZCBmb3JtYXRcclxuICAgICAgICAgICAgdmFyIHNlbGVjdG9yVGV4dCA9IHRvRG91YmxlQ29sb25Qc2V1ZG9FbGVtZW50cyhydWxlc1tpXS5zZWxlY3RvclRleHQpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdHNbc2VsZWN0b3JUZXh0XSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0c1tzZWxlY3RvclRleHRdID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzdWx0c1tzZWxlY3RvclRleHRdLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgc2hlZXQ6IHNoZWV0LFxyXG4gICAgICAgICAgICAgICAgaW5kZXg6IGksXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogcnVsZXNbaV0uc3R5bGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFJ1bGVzKHNoZWV0LCBzZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciBydWxlcyA9IHNoZWV0LmNzc1J1bGVzIHx8IHNoZWV0LnJ1bGVzIHx8IFtdO1xyXG4gICAgICAgIHZhciByZXN1bHRzID0gW107XHJcbiAgICAgICAgLy8gQnJvd3NlcnMgcmVwb3J0IHNlbGVjdG9ycyBpbiBsb3dlcmNhc2VcclxuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3JUZXh0ID0gcnVsZXNbaV0uc2VsZWN0b3JUZXh0O1xyXG4gICAgICAgICAgICAvLyBOb3RlIC0gY2VydGFpbiBydWxlcyAoZS5nLiBAcnVsZXMpIGRvbid0IGhhdmUgc2VsZWN0b3JUZXh0XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RvclRleHQgJiYgKHNlbGVjdG9yVGV4dCA9PSBzZWxlY3RvciB8fCBzZWxlY3RvclRleHQgPT0gc3dhcEFkalNlbEF0dHIoc2VsZWN0b3IpIHx8IHNlbGVjdG9yVGV4dCA9PSBzd2FwUHNldWRvRWxTeW50YXgoc2VsZWN0b3IpKSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBzaGVldDogc2hlZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGksXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHJ1bGVzW2ldLnN0eWxlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRSdWxlKHNoZWV0LCBzZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciBydWxlcyA9IHNoZWV0LmNzc1J1bGVzIHx8IHNoZWV0LnJ1bGVzIHx8IFtdO1xyXG4gICAgICAgIHZhciBpbmRleCA9IHJ1bGVzLmxlbmd0aDtcclxuICAgICAgICB2YXIgcHNldWRvRWxlbWVudFJ1bGUgPSBhZGRQc2V1ZG9FbGVtZW50UnVsZShzaGVldCwgc2VsZWN0b3IsIHJ1bGVzLCBpbmRleCk7XHJcblxyXG4gICAgICAgIGlmICghcHNldWRvRWxlbWVudFJ1bGUpIHtcclxuICAgICAgICAgICAgYWRkUnVsZVRvU2hlZXQoc2hlZXQsIHNlbGVjdG9yLCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNoZWV0OiBzaGVldCxcclxuICAgICAgICAgICAgaW5kZXg6IGluZGV4LFxyXG4gICAgICAgICAgICBzdHlsZTogcnVsZXNbaW5kZXhdLnN0eWxlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUnVsZVRvU2hlZXQoc2hlZXQsIHNlbGVjdG9yLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChzaGVldC5pbnNlcnRSdWxlKSB7XHJcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoc2VsZWN0b3IgKyAnIHsgfScsIGluZGV4KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBudWxsLCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZXMgc2luZ2xlIGNvbG9uIHN5bnRheCBmb3Igb2xkZXIgYnJvd3NlcnMgYW5kIGJ1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD05NDk2NTFcclxuICAgIGZ1bmN0aW9uIGFkZFBzZXVkb0VsZW1lbnRSdWxlKHNoZWV0LCBzZWxlY3RvciwgcnVsZXMsIGluZGV4KSB7XHJcbiAgICAgICAgdmFyIGRvdWJsZUNvbG9uU2VsZWN0b3I7XHJcbiAgICAgICAgdmFyIHNpbmdsZUNvbG9uU2VsZWN0b3I7XHJcblxyXG4gICAgICAgIGlmIChkb3VibGVDb2xvblBzZXVkb0VsUmVnZXguZXhlYyhzZWxlY3RvcikpIHtcclxuICAgICAgICAgICAgZG91YmxlQ29sb25TZWxlY3RvciA9IHNlbGVjdG9yO1xyXG4gICAgICAgICAgICBzaW5nbGVDb2xvblNlbGVjdG9yID0gdG9TaW5nbGVDb2xvblBzZXVkb0VsZW1lbnRzKHNlbGVjdG9yKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHNpbmdsZUNvbG9uUHNldWRvRWxSZWdleC5leGVjKHNlbGVjdG9yKSkge1xyXG4gICAgICAgICAgICBkb3VibGVDb2xvblNlbGVjdG9yID0gdG9Eb3VibGVDb2xvblBzZXVkb0VsZW1lbnRzKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgc2luZ2xlQ29sb25TZWxlY3RvciA9IHNlbGVjdG9yO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gTm90IGRlYWxpbmcgd2l0aCBhIHBzZXVkbyBlbGVtZW50XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNpbmdsZUNvbG9uRm9yUHNldWRvRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgLy8gQXNzdW1lIG1vZGVybiBicm93c2VyIGFuZCB0aGVuIGNoZWNrIGlmIHN1Y2Nlc3NmdWxcclxuICAgICAgICAgICAgYWRkUnVsZVRvU2hlZXQoc2hlZXQsIGRvdWJsZUNvbG9uU2VsZWN0b3IsIGluZGV4KTtcclxuICAgICAgICAgICAgaWYgKHJ1bGVzLmxlbmd0aCA8PSBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgc2luZ2xlQ29sb25Gb3JQc2V1ZG9FbGVtZW50cyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNpbmdsZUNvbG9uRm9yUHNldWRvRWxlbWVudHMpIHtcclxuICAgICAgICAgICAgYWRkUnVsZVRvU2hlZXQoc2hlZXQsIHNpbmdsZUNvbG9uU2VsZWN0b3IsIGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvRG91YmxlQ29sb25Qc2V1ZG9FbGVtZW50cyhzZWxlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKHNpbmdsZUNvbG9uUHNldWRvRWxSZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBzdWJtYXRjaDEsIHN1Ym1hdGNoMiwgc3VibWF0Y2gzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJtYXRjaDEgKyAnOjonICsgc3VibWF0Y2gzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvU2luZ2xlQ29sb25Qc2V1ZG9FbGVtZW50cyhzZWxlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5yZXBsYWNlKGRvdWJsZUNvbG9uUHNldWRvRWxSZWdleCwgZnVuY3Rpb24obWF0Y2gsIHN1Ym1hdGNoMSwgc3VibWF0Y2gyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnOicgKyBzdWJtYXRjaDI7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVSdWxlKHJ1bGUpIHtcclxuICAgICAgICB2YXIgc2hlZXQgPSBydWxlLnNoZWV0O1xyXG4gICAgICAgIGlmIChzaGVldC5kZWxldGVSdWxlKSB7XHJcbiAgICAgICAgICAgIHNoZWV0LmRlbGV0ZVJ1bGUocnVsZS5pbmRleCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzaGVldC5yZW1vdmVSdWxlKSB7XHJcbiAgICAgICAgICAgIHNoZWV0LnJlbW92ZVJ1bGUocnVsZS5pbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XHJcbiAgICAgICAgICAgIGlmICghc3JjLmhhc093blByb3BlcnR5KGtleSkpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgZGVzdFtrZXldID0gc3JjW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGFnZ3JlZ2F0ZVN0eWxlcyhydWxlcykge1xyXG4gICAgICAgIHZhciBhZ2dyZWdhdGUgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChhZ2dyZWdhdGUsIGRlY2xhcmVkUHJvcGVydGllcyhydWxlc1tpXS5zdHlsZSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYWdncmVnYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlY2xhcmVkUHJvcGVydGllcyhzdHlsZSkge1xyXG4gICAgICAgIHZhciBkZWNsYXJlZCA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVjbGFyZWRbc3R5bGVbaV1dID0gc3R5bGVbdG9DYW1lbENhc2Uoc3R5bGVbaV0pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlY2xhcmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElFOSBzdG9yZXMgcnVsZXMgd2l0aCBhdHRyaWJ1dGVzIChjbGFzc2VzIG9yIElEJ3MpIGFkamFjZW50IGluIHRoZSBvcHBvc2l0ZSBvcmRlciBhcyBkZWZpbmVkXHJcbiAgICAvLyBjYXVzaW5nIHRoZW0gdG8gbm90IGJlIGZvdW5kLCBzbyB0aGlzIG1ldGhvZCBzd2FwcyBbI3wuXXNlbDFbI3wuXXNlbDIgdG8gYmVjb21lIFsjfC5dc2VsMlsjfC5dc2VsMVxyXG4gICAgZnVuY3Rpb24gc3dhcEFkalNlbEF0dHIoc2VsZWN0b3IpIHtcclxuICAgICAgICB2YXIgc3dhcCA9ICcnO1xyXG4gICAgICAgIHZhciBsYXN0SW5kZXggPSAwO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB3aGlsZSAoKG1hdGNoID0gYWRqU2VsQXR0clJlZ2V4LmV4ZWMoc2VsZWN0b3IpKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChtYXRjaFswXSA9PT0gJycpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgc3dhcCArPSBzZWxlY3Rvci5zdWJzdHJpbmcobGFzdEluZGV4LCBtYXRjaC5pbmRleCk7XHJcbiAgICAgICAgICAgIHN3YXAgKz0gc2VsZWN0b3Iuc3Vic3RyKG1hdGNoLmluZGV4ICsgbWF0Y2hbMV0ubGVuZ3RoLCBtYXRjaFsyXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICBzd2FwICs9IHNlbGVjdG9yLnN1YnN0cihtYXRjaC5pbmRleCwgbWF0Y2hbMV0ubGVuZ3RoKTtcclxuICAgICAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3YXAgKz0gc2VsZWN0b3Iuc3Vic3RyKGxhc3RJbmRleCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHN3YXA7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEZGIGFuZCBvbGRlciBicm93c2VycyBzdG9yZSBydWxlcyB3aXRoIHBzZXVkbyBlbGVtZW50cyB1c2luZyBzaW5nbGUtY29sb24gc3ludGF4XHJcbiAgICBmdW5jdGlvbiBzd2FwUHNldWRvRWxTeW50YXgoc2VsZWN0b3IpIHtcclxuICAgICAgICBpZiAoZG91YmxlQ29sb25Qc2V1ZG9FbFJlZ2V4LmV4ZWMoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0b1NpbmdsZUNvbG9uUHNldWRvRWxlbWVudHMoc2VsZWN0b3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0U3R5bGVQcm9wZXJ0aWVzKHJ1bGUsIHByb3BlcnRpZXMpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBwcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgICAgIHZhciBpbXBvcnRhbnRJbmRleCA9IHZhbHVlLmluZGV4T2YoJyAhaW1wb3J0YW50Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBNb2Rlcm4gYnJvd3NlcnMgc2VlbSB0byBoYW5kbGUgb3ZlcnJpZGVzIGZpbmUsIGJ1dCBJRTkgZG9lc24ndFxyXG4gICAgICAgICAgICBydWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7IFxyXG4gICAgICAgICAgICBpZiAoaW1wb3J0YW50SW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBydWxlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUuc3Vic3RyKDAsIGltcG9ydGFudEluZGV4KSwgJ2ltcG9ydGFudCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcnVsZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHIpIHtcclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uIChtYXRjaCwgc3VibWF0Y2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1Ym1hdGNoLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtQ2FtZWxDYXNlZFByb3BlcnR5TmFtZXMob2xkUHJvcHMpIHtcclxuICAgICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2xkUHJvcHMpIHtcclxuICAgICAgICAgICAgbmV3UHJvcHNbdW5DYW1lbENhc2Uoa2V5KV0gPSBvbGRQcm9wc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3UHJvcHM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5DYW1lbENhc2Uoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uKG1hdGNoLCBzdWJtYXRjaCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJy0nICsgc3VibWF0Y2gudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgSnNzID0gZnVuY3Rpb24oZG9jKSB7XHJcbiAgICAgICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy5kb2MuaGVhZCB8fCB0aGlzLmRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xyXG4gICAgICAgIHRoaXMuc2hlZXRzID0gdGhpcy5kb2Muc3R5bGVTaGVldHMgfHwgW107XHJcbiAgICB9O1xyXG5cclxuICAgIEpzcy5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgLy8gUmV0dXJucyBKU1MgcnVsZXMgKHNlbGVjdG9yIGlzIG9wdGlvbmFsKVxyXG4gICAgICAgIGdldDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRTaGVldCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFnZ3JlZ2F0ZVN0eWxlcyhnZXRSdWxlcyh0aGlzLmRlZmF1bHRTaGVldCwgc2VsZWN0b3IpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcnVsZXMgPSBnZXRTZWxlY3RvcnNBbmRSdWxlcyh0aGlzLmRlZmF1bHRTaGVldCk7XHJcbiAgICAgICAgICAgIGZvciAoc2VsZWN0b3IgaW4gcnVsZXMpIHtcclxuICAgICAgICAgICAgICAgIHJ1bGVzW3NlbGVjdG9yXSA9IGFnZ3JlZ2F0ZVN0eWxlcyhydWxlc1tzZWxlY3Rvcl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBydWxlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8vIFJldHVybnMgYWxsIHJ1bGVzIChzZWxlY3RvciBpcyByZXF1aXJlZClcclxuICAgICAgICBnZXRBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zaGVldHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuZChwcm9wZXJ0aWVzLCBhZ2dyZWdhdGVTdHlsZXMoZ2V0UnVsZXModGhpcy5zaGVldHNbaV0sIHNlbGVjdG9yKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gQWRkcyBKU1MgcnVsZXMgZm9yIHRoZSBzZWxlY3RvciBiYXNlZCBvbiB0aGUgZ2l2ZW4gcHJvcGVydGllc1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24oc2VsZWN0b3IsIHByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRTaGVldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0U2hlZXQgPSB0aGlzLl9jcmVhdGVTaGVldCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXMgPSB0cmFuc2Zvcm1DYW1lbENhc2VkUHJvcGVydHlOYW1lcyhwcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgdmFyIHJ1bGVzID0gZ2V0UnVsZXModGhpcy5kZWZhdWx0U2hlZXQsIHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgaWYgKCFydWxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJ1bGVzID0gW2FkZFJ1bGUodGhpcy5kZWZhdWx0U2hlZXQsIHNlbGVjdG9yKV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc2V0U3R5bGVQcm9wZXJ0aWVzKHJ1bGVzW2ldLCBwcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gUmVtb3ZlcyBKU1MgcnVsZXMgKHNlbGVjdG9yIGlzIG9wdGlvbmFsKVxyXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRTaGVldClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU2hlZXQodGhpcy5kZWZhdWx0U2hlZXQpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGVmYXVsdFNoZWV0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBydWxlcyA9IGdldFJ1bGVzKHRoaXMuZGVmYXVsdFNoZWV0LCBzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVJ1bGUocnVsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBydWxlcy5sZW5ndGg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlU2hlZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc3R5bGVOb2RlID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgICAgICAgICAgc3R5bGVOb2RlLnR5cGUgPSAndGV4dC9jc3MnO1xyXG4gICAgICAgICAgICBzdHlsZU5vZGUucmVsID0gJ3N0eWxlc2hlZXQnO1xyXG4gICAgICAgICAgICB0aGlzLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlTm9kZS5zaGVldDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZW1vdmVTaGVldDogZnVuY3Rpb24oc2hlZXQpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBzaGVldC5vd25lck5vZGU7XHJcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBleHBvcnRzID0gbmV3IEpzcyhkb2N1bWVudCk7XHJcbiAgICBleHBvcnRzLmZvckRvY3VtZW50ID0gZnVuY3Rpb24oZG9jKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBKc3MoZG9jKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZXhwb3J0cztcclxufSkoKTtcclxuXHJcbnR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzICYmIChtb2R1bGUuZXhwb3J0cyA9IGpzcyk7IC8vIENvbW1vbkpTIHN1cHBvcnQiLCIndXNlIHN0cmljdCc7XG4vKipcbiAqIFtSZWN1cnNpdmVseSBwYXJzZXMgYSBzdHJpbmdpZmllZCBKU09OXVxuICogQHBhcmFtICB7W3R5cGVdfSBqc29uU3RyaW5nIFtzdHJpbmdpZmllZCBqc29uIHRvIHBhcnNlXVxuICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICAgIFtub3JtYWxpemVkIEphdmFzY3JpcHQgb2JqZWN0XVxuICovXG5mdW5jdGlvbiBkZWVwUGFyc2VKc29uKGpzb25TdHJpbmcpIHtcbiAgLy8gaWYgbm90IHN0cmluZ2lmaWVkIGpzb24gcmF0aGVyIGEgc2ltcGxlIHN0cmluZyB2YWx1ZSB0aGVuIEpTT04ucGFyc2Ugd2lsbCB0aHJvdyBlcnJvclxuICAvLyBvdGhlcndpc2UgY29udGludWUgcmVjdXJzaW9uXG4gIGlmICh0eXBlb2YganNvblN0cmluZyA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRlZXBQYXJzZUpzb24oSlNPTi5wYXJzZShqc29uU3RyaW5nKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4ganNvblN0cmluZztcbiAgICB9XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShqc29uU3RyaW5nKSkge1xuICAgIC8vIGlmIGFuIGFycmF5IGlzIHJlY2VpdmVkLCBtYXAgb3ZlciB0aGUgYXJyYXkgYW5kIGRlZXBQYXJzZSBlYWNoIHZhbHVlXG4gICAgcmV0dXJuIGpzb25TdHJpbmcubWFwKHZhbCA9PiBkZWVwUGFyc2VKc29uKHZhbCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uU3RyaW5nID09PSAnb2JqZWN0JyAmJiBqc29uU3RyaW5nICE9PSBudWxsKSB7XG4gICAgLy8gaWYgYW4gb2JqZWN0IGlzIHJlY2VpdmVkIHRoZW4gZGVlcFBhcnNlIGVhY2ggZWxlbWVudCBpbiB0aGUgb2JqZWN0XG4gICAgLy8gdHlwZW9mIG51bGwgcmV0dXJucyAnb2JqZWN0JyB0b28sIHNvIHdlIGhhdmUgdG8gZWxpbWluYXRlIHRoYXRcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoanNvblN0cmluZykucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICAgICAgb2JqW2tleV0gPSBkZWVwUGFyc2VKc29uKGpzb25TdHJpbmdba2V5XSk7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sIHt9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGhlcndpc2UgcmV0dXJuIHdoYXRldmVyIHdhcyByZWNlaXZlZFxuICAgIHJldHVybiBqc29uU3RyaW5nO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWVwUGFyc2VKc29uIH07XG4iLCJpZighZ2xvYmFsW1wiQkJqXCJdKSBnbG9iYWxbXCJCQmpcIl0gPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiQkJqXCJdW1wiTWFza3NcIl0gPSByZXF1aXJlKFwiLSFEOlxcXFxHaXRodWJcXFxcQkJqR3JpZEV4V2lkZ2V0XFxcXGNsaWVudFxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/cmVmLS00IS5cXFxcYmJqLW1hc2tzLmpzXCIpOyIsImlmKCFnbG9iYWxbXCJCYXNpc1wiXSkgZ2xvYmFsW1wiQmFzaXNcIl0gPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiQmFzaXNcIl1bXCJBZ0dyaWRDb21wb25lbnRzXCJdID0gcmVxdWlyZShcIi0hRDpcXFxcR2l0aHViXFxcXEJCakdyaWRFeFdpZGdldFxcXFxjbGllbnRcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3JlZi0tNCEuXFxcXGJhc2lzLWFnZ3JpZC1jb21wb25lbnRzLmpzXCIpOyIsImlmKCFnbG9iYWxbXCJCYXNpc1wiXSkgZ2xvYmFsW1wiQmFzaXNcIl0gPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsW1wiQmFzaXNcIl1bXCJJbnB1dE1hc2tpbmdcIl0gPSByZXF1aXJlKFwiLSFEOlxcXFxHaXRodWJcXFxcQkJqR3JpZEV4V2lkZ2V0XFxcXGNsaWVudFxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/cmVmLS00IS5cXFxcYmFzaXMtaW5wdXQtbWFza2luZy5qc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbFtcImZsYXRwaWNrclwiXSA9IHJlcXVpcmUoXCItIUQ6XFxcXEdpdGh1YlxcXFxCQmpHcmlkRXhXaWRnZXRcXFxcY2xpZW50XFxcXG5vZGVfbW9kdWxlc1xcXFxiYWJlbC1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz9yZWYtLTQhLlxcXFxmbGF0cGlja3IuanNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSBnbG9iYWxbXCJqc3NcIl0gPSByZXF1aXJlKFwiLSFEOlxcXFxHaXRodWJcXFxcQkJqR3JpZEV4V2lkZ2V0XFxcXGNsaWVudFxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/cmVmLS00IS5cXFxcanNzLmpzXCIpOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi9mbGF0cGlja3IuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBhcmVudC5kb2N1bWVudC5oZWFkXHJcbiAgICAgICAgICAgICAgfTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi9mbGF0cGlja3IuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4vZmxhdHBpY2tyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcHBseTtcbiIsImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheU1hcDtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSAnLi9fZGVmaW5lUHJvcGVydHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0FyZ3VtZW50cztcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzIGZyb20gJy4vX25hdGl2ZUtleXMuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzSW4gZnJvbSAnLi9fbmF0aXZlS2V5c0luLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXNJbjtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5T2Y7XG4iLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgb3ZlclJlc3QgZnJvbSAnLi9fb3ZlclJlc3QuanMnO1xuaW1wb3J0IHNldFRvU3RyaW5nIGZyb20gJy4vX3NldFRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVJlc3QoZnVuYywgc3RhcnQpIHtcbiAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VSZXN0O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gJy4vY29uc3RhbnQuanMnO1xuaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVmFsdWVzO1xuIiwiaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlPYmplY3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuZXhwb3J0IGRlZmF1bHQgY29yZUpzRGF0YTtcbiIsImltcG9ydCBiYXNlUmVzdCBmcm9tICcuL19iYXNlUmVzdC5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYXNzaWduZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPiAxID8gc291cmNlc1tsZW5ndGggLSAxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgPyAobGVuZ3RoLS0sIGN1c3RvbWl6ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSBsZW5ndGggPCAzID8gdW5kZWZpbmVkIDogY3VzdG9taXplcjtcbiAgICAgIGxlbmd0aCA9IDE7XG4gICAgfVxuICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVBc3NpZ25lcjtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAqIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzXG4gKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgIChlcShvYmpWYWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqVmFsdWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1c3RvbURlZmF1bHRzQXNzaWduSW47XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVQcm9wZXJ0eTtcbiIsImltcG9ydCBiYXNlUHJvcGVydHlPZiBmcm9tICcuL19iYXNlUHJvcGVydHlPZi5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG52YXIgaHRtbEVzY2FwZXMgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmIzM5Oydcbn07XG5cbi8qKlxuICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAqL1xudmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG5leHBvcnQgZGVmYXVsdCBlc2NhcGVIdG1sQ2hhcjtcbiIsIi8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xudmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICdcXFxcJzogJ1xcXFwnLFxuICBcIidcIjogXCInXCIsXG4gICdcXG4nOiAnbicsXG4gICdcXHInOiAncicsXG4gICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgJ1xcdTIwMjknOiAndTIwMjknXG59O1xuXG4vKipcbiAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXNjYXBlU3RyaW5nQ2hhcjtcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCJpbXBvcnQgYmFzZUlzTmF0aXZlIGZyb20gJy4vX2Jhc2VJc05hdGl2ZS5qcyc7XG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9fZ2V0VmFsdWUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROYXRpdmU7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmFsdWU7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5kZXg7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0l0ZXJhdGVlQ2FsbDtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQcm90b3R5cGU7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGV4Y2VwdCB0aGF0IGl0IGluY2x1ZGVzIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZUtleXNJbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXNJbjtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBub2RlVXRpbDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RUb1N0cmluZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuIiwiaW1wb3J0IGFwcGx5IGZyb20gJy4vX2FwcGx5LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlclJlc3Q7XG4iLCIvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xudmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2c7XG5cbmV4cG9ydCBkZWZhdWx0IHJlRXNjYXBlO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbnZhciByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZztcblxuZXhwb3J0IGRlZmF1bHQgcmVFdmFsdWF0ZTtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG52YXIgcmVJbnRlcnBvbGF0ZSA9IC88JT0oW1xcc1xcU10rPyklPi9nO1xuXG5leHBvcnQgZGVmYXVsdCByZUludGVycG9sYXRlO1xuIiwiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm9vdDtcbiIsImltcG9ydCBiYXNlU2V0VG9TdHJpbmcgZnJvbSAnLi9fYmFzZVNldFRvU3RyaW5nLmpzJztcbmltcG9ydCBzaG9ydE91dCBmcm9tICcuL19zaG9ydE91dC5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gKi9cbnZhciBzZXRUb1N0cmluZyA9IHNob3J0T3V0KGJhc2VTZXRUb1N0cmluZyk7XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRvU3RyaW5nO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xudmFyIEhPVF9DT1VOVCA9IDgwMCxcbiAgICBIT1RfU1BBTiA9IDE2O1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQnbGwgc2hvcnQgb3V0IGFuZCBpbnZva2UgYGlkZW50aXR5YCBpbnN0ZWFkXG4gKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAqIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzaG9ydGFibGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgdmFyIGNvdW50ID0gMCxcbiAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhbXAgPSBuYXRpdmVOb3coKSxcbiAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICBpZiAocmVtYWluaW5nID4gMCkge1xuICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaG9ydE91dDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBjcmVhdGVBc3NpZ25lciBmcm9tICcuL19jcmVhdGVBc3NpZ25lci5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gKiB9XG4gKlxuICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICpcbiAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKi9cbnZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnbkluV2l0aDtcbiIsImltcG9ydCBhcHBseSBmcm9tICcuL19hcHBseS5qcyc7XG5pbXBvcnQgYmFzZVJlc3QgZnJvbSAnLi9fYmFzZVJlc3QuanMnO1xuaW1wb3J0IGlzRXJyb3IgZnJvbSAnLi9pc0Vycm9yLmpzJztcblxuLyoqXG4gKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gKiAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAqIH0sICc+Xz4nKTtcbiAqXG4gKiBpZiAoXy5pc0Vycm9yKGVsZW1lbnRzKSkge1xuICogICBlbGVtZW50cyA9IFtdO1xuICogfVxuICovXG52YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdW5kZWZpbmVkLCBhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGF0dGVtcHQ7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29uc3RhbnQ7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCJpbXBvcnQgZXNjYXBlSHRtbENoYXIgZnJvbSAnLi9fZXNjYXBlSHRtbENoYXIuanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBIVE1MIGVudGl0aWVzIGFuZCBIVE1MIGNoYXJhY3RlcnMuICovXG52YXIgcmVVbmVzY2FwZWRIdG1sID0gL1smPD5cIiddL2csXG4gICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICpcbiAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gKlxuICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gKiBYU1MgdmVjdG9ycy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICovXG5mdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgIDogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlc2NhcGU7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGZpcnN0IGFyZ3VtZW50IGl0IHJlY2VpdmVzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIEFueSB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICpcbiAqIGNvbnNvbGUubG9nKF8uaWRlbnRpdHkob2JqZWN0KSA9PT0gb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpZGVudGl0eTtcbiIsImltcG9ydCBiYXNlSXNBcmd1bWVudHMgZnJvbSAnLi9fYmFzZUlzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZTtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuaW1wb3J0IHN0dWJGYWxzZSBmcm9tICcuL3N0dWJGYWxzZS5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCdWZmZXI7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICogYFN5bnRheEVycm9yYCwgYFR5cGVFcnJvcmAsIG9yIGBVUklFcnJvcmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRXJyb3IoRXJyb3IpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGVycm9yVGFnIHx8IHRhZyA9PSBkb21FeGNUYWcgfHxcbiAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNFcnJvcjtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0xlbmd0aDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJlxuICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUGxhaW5PYmplY3Q7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwiaW1wb3J0IGJhc2VJc1R5cGVkQXJyYXkgZnJvbSAnLi9fYmFzZUlzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNUeXBlZEFycmF5O1xuIiwiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXMgZnJvbSAnLi9fYmFzZUtleXMuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5cztcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzSW4gZnJvbSAnLi9fYmFzZUtleXNJbi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzSW47XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcbiIsImltcG9ydCBhc3NpZ25JbldpdGggZnJvbSAnLi9hc3NpZ25JbldpdGguanMnO1xuaW1wb3J0IGF0dGVtcHQgZnJvbSAnLi9hdHRlbXB0LmpzJztcbmltcG9ydCBiYXNlVmFsdWVzIGZyb20gJy4vX2Jhc2VWYWx1ZXMuanMnO1xuaW1wb3J0IGN1c3RvbURlZmF1bHRzQXNzaWduSW4gZnJvbSAnLi9fY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbi5qcyc7XG5pbXBvcnQgZXNjYXBlU3RyaW5nQ2hhciBmcm9tICcuL19lc2NhcGVTdHJpbmdDaGFyLmpzJztcbmltcG9ydCBpc0Vycm9yIGZyb20gJy4vaXNFcnJvci5qcyc7XG5pbXBvcnQgaXNJdGVyYXRlZUNhbGwgZnJvbSAnLi9faXNJdGVyYXRlZUNhbGwuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcbmltcG9ydCByZUludGVycG9sYXRlIGZyb20gJy4vX3JlSW50ZXJwb2xhdGUuanMnO1xuaW1wb3J0IHRlbXBsYXRlU2V0dGluZ3MgZnJvbSAnLi90ZW1wbGF0ZVNldHRpbmdzLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQgPSAnSW52YWxpZCBgdmFyaWFibGVgIG9wdGlvbiBwYXNzZWQgaW50byBgXy50ZW1wbGF0ZWAnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xudmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4vKipcbiAqIFVzZWQgdG8gdmFsaWRhdGUgdGhlIGB2YWxpZGF0ZWAgb3B0aW9uIGluIGBfLnRlbXBsYXRlYCB2YXJpYWJsZS5cbiAqXG4gKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICogLSBcIigpLFwiIChtb2RpZmljYXRpb24gb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAqIC0gXCI9XCIgKGRlZmF1bHQgdmFsdWUpXG4gKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gKiAtIFwiL1wiIChiZWdpbm5pbmcgb2YgYSBjb21tZW50KVxuICogLSB3aGl0ZXNwYWNlXG4gKi9cbnZhciByZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyA9IC9bKCk9LHt9XFxbXFxdXFwvXFxzXS87XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaFxuICogW0VTIHRlbXBsYXRlIGRlbGltaXRlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRlbXBsYXRlLWxpdGVyYWwtbGV4aWNhbC1jb21wb25lbnRzKS5cbiAqL1xudmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xudmFyIHJlTm9NYXRjaCA9IC8oJF4pLztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xudmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gKlxuICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J3RlbXBsYXRlU291cmNlc1tuXSddXG4gKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICpcbiAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICpcbiAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAqXG4gKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gKlxuICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gKlxuICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAqXG4gKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gKlxuICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAqIGNvbXBpbGVkKGRhdGEpO1xuICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAqXG4gKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAqIGNvbXBpbGVkLnNvdXJjZTtcbiAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAqIC8vICAgcmV0dXJuIF9fcDtcbiAqIC8vIH1cbiAqXG4gKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAqXG4gKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAqICAgdmFyIEpTVCA9IHtcXFxuICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gKiAgIH07XFxcbiAqICcpO1xuICovXG5mdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgdmFyIHNldHRpbmdzID0gdGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzLl8udGVtcGxhdGVTZXR0aW5ncyB8fCB0ZW1wbGF0ZVNldHRpbmdzO1xuXG4gIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gIHZhciBpc0VzY2FwaW5nLFxuICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgaW5kZXggPSAwLFxuICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgLCAnZycpO1xuXG4gIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gIHZhciBzb3VyY2VVUkwgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgID8gKCcvLyMgc291cmNlVVJMPScgK1xuICAgICAgIChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKSArXG4gICAgICAgJ1xcbicpXG4gICAgOiAnJztcblxuICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICB9XG4gICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgfVxuICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICB9XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG5cbiAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gIH1cbiAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gIC8vIHBvdGVudGlhbCBjb21tYW5kIGluamVjdGlvbiBhdHRhY2tzLlxuICBlbHNlIGlmIChyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycy50ZXN0KHZhcmlhYmxlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgfVxuXG4gIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgKHZhcmlhYmxlXG4gICAgICA/ICcnXG4gICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgKSArXG4gICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAoaXNFc2NhcGluZ1xuICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgOiAnJ1xuICAgICkgK1xuICAgIChpc0V2YWx1YXRpbmdcbiAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgIDogJztcXG4nXG4gICAgKSArXG4gICAgc291cmNlICtcbiAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gIH0pO1xuXG4gIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgdGhyb3cgcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRlbXBsYXRlO1xuIiwiaW1wb3J0IGVzY2FwZSBmcm9tICcuL2VzY2FwZS5qcyc7XG5pbXBvcnQgcmVFc2NhcGUgZnJvbSAnLi9fcmVFc2NhcGUuanMnO1xuaW1wb3J0IHJlRXZhbHVhdGUgZnJvbSAnLi9fcmVFdmFsdWF0ZS5qcyc7XG5pbXBvcnQgcmVJbnRlcnBvbGF0ZSBmcm9tICcuL19yZUludGVycG9sYXRlLmpzJztcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciB0ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge1JlZ0V4cH1cbiAgICovXG4gICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgJ2ltcG9ydHMnOiB7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgJ18nOiB7ICdlc2NhcGUnOiBlc2NhcGUgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZVNldHRpbmdzO1xuIiwiaW1wb3J0IGJhc2VUb1N0cmluZyBmcm9tICcuL19iYXNlVG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU3RyaW5nO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIi5mbGF0cGlja3ItY2FsZW5kYXIge1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBvcGFjaXR5OiAwO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHBhZGRpbmc6IDA7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogbm9uZTtcXG4gICAgICAgICAgYW5pbWF0aW9uOiBub25lO1xcbiAgZGlyZWN0aW9uOiBsdHI7XFxuICBib3JkZXI6IDA7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAzMDcuODc1cHg7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAtbXMtdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICAgICAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAxcHggMCAwICNlNmU2ZTYsIC0xcHggMCAwICNlNmU2ZTYsIDAgMXB4IDAgI2U2ZTZlNiwgMCAtMXB4IDAgI2U2ZTZlNiwgMCAzcHggMTNweCByZ2JhKDAsMCwwLDAuMDgpO1xcbiAgICAgICAgICBib3gtc2hhZG93OiAxcHggMCAwICNlNmU2ZTYsIC0xcHggMCAwICNlNmU2ZTYsIDAgMXB4IDAgI2U2ZTZlNiwgMCAtMXB4IDAgI2U2ZTZlNiwgMCAzcHggMTNweCByZ2JhKDAsMCwwLDAuMDgpO1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLm9wZW4sXFxuLmZsYXRwaWNrci1jYWxlbmRhci5pbmxpbmUge1xcbiAgb3BhY2l0eTogMTtcXG4gIG1heC1oZWlnaHQ6IDY0MHB4O1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhci5vcGVuIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHotaW5kZXg6IDk5OTk5O1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLmFuaW1hdGUub3BlbiB7XFxuICAtd2Via2l0LWFuaW1hdGlvbjogZnBGYWRlSW5Eb3duIDMwMG1zIGN1YmljLWJlemllcigwLjIzLCAxLCAwLjMyLCAxKTtcXG4gICAgICAgICAgYW5pbWF0aW9uOiBmcEZhZGVJbkRvd24gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMjMsIDEsIDAuMzIsIDEpO1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLmlubGluZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRvcDogMnB4O1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLnN0YXRpYyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IGNhbGMoMTAwJSArIDJweCk7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXIuc3RhdGljLm9wZW4ge1xcbiAgei1pbmRleDogOTk5O1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXIubXVsdGlNb250aCAuZmxhdHBpY2tyLWRheXMgLmRheUNvbnRhaW5lcjpudGgtY2hpbGQobisxKSAuZmxhdHBpY2tyLWRheS5pblJhbmdlOm50aC1jaGlsZCg3bis3KSB7XFxuICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcXG4gICAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLm11bHRpTW9udGggLmZsYXRwaWNrci1kYXlzIC5kYXlDb250YWluZXI6bnRoLWNoaWxkKG4rMikgLmZsYXRwaWNrci1kYXkuaW5SYW5nZTpudGgtY2hpbGQoN24rMSkge1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAtMnB4IDAgMCAjZTZlNmU2LCA1cHggMCAwICNlNmU2ZTY7XFxuICAgICAgICAgIGJveC1zaGFkb3c6IC0ycHggMCAwICNlNmU2ZTYsIDVweCAwIDAgI2U2ZTZlNjtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhciAuaGFzV2Vla3MgLmRheUNvbnRhaW5lcixcXG4uZmxhdHBpY2tyLWNhbGVuZGFyIC5oYXNUaW1lIC5kYXlDb250YWluZXIge1xcbiAgYm9yZGVyLWJvdHRvbTogMDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAwO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhciAuaGFzV2Vla3MgLmRheUNvbnRhaW5lciB7XFxuICBib3JkZXItbGVmdDogMDtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhci5oYXNUaW1lIC5mbGF0cGlja3ItdGltZSB7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2U2ZTZlNjtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhci5ub0NhbGVuZGFyLmhhc1RpbWUgLmZsYXRwaWNrci10aW1lIHtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhcjpiZWZvcmUsXFxuLmZsYXRwaWNrci1jYWxlbmRhcjphZnRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgYm9yZGVyOiBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgaGVpZ2h0OiAwO1xcbiAgd2lkdGg6IDA7XFxuICBsZWZ0OiAyMnB4O1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLnJpZ2h0TW9zdDpiZWZvcmUsXFxuLmZsYXRwaWNrci1jYWxlbmRhci5hcnJvd1JpZ2h0OmJlZm9yZSxcXG4uZmxhdHBpY2tyLWNhbGVuZGFyLnJpZ2h0TW9zdDphZnRlcixcXG4uZmxhdHBpY2tyLWNhbGVuZGFyLmFycm93UmlnaHQ6YWZ0ZXIge1xcbiAgbGVmdDogYXV0bztcXG4gIHJpZ2h0OiAyMnB4O1xcbn1cXG4uZmxhdHBpY2tyLWNhbGVuZGFyLmFycm93Q2VudGVyOmJlZm9yZSxcXG4uZmxhdHBpY2tyLWNhbGVuZGFyLmFycm93Q2VudGVyOmFmdGVyIHtcXG4gIGxlZnQ6IDUwJTtcXG4gIHJpZ2h0OiA1MCU7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXI6YmVmb3JlIHtcXG4gIGJvcmRlci13aWR0aDogNXB4O1xcbiAgbWFyZ2luOiAwIC01cHg7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXI6YWZ0ZXIge1xcbiAgYm9yZGVyLXdpZHRoOiA0cHg7XFxuICBtYXJnaW46IDAgLTRweDtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhci5hcnJvd1RvcDpiZWZvcmUsXFxuLmZsYXRwaWNrci1jYWxlbmRhci5hcnJvd1RvcDphZnRlciB7XFxuICBib3R0b206IDEwMCU7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXIuYXJyb3dUb3A6YmVmb3JlIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICNlNmU2ZTY7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXIuYXJyb3dUb3A6YWZ0ZXIge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogI2ZmZjtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhci5hcnJvd0JvdHRvbTpiZWZvcmUsXFxuLmZsYXRwaWNrci1jYWxlbmRhci5hcnJvd0JvdHRvbTphZnRlciB7XFxuICB0b3A6IDEwMCU7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXIuYXJyb3dCb3R0b206YmVmb3JlIHtcXG4gIGJvcmRlci10b3AtY29sb3I6ICNlNmU2ZTY7XFxufVxcbi5mbGF0cGlja3ItY2FsZW5kYXIuYXJyb3dCb3R0b206YWZ0ZXIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogI2ZmZjtcXG59XFxuLmZsYXRwaWNrci1jYWxlbmRhcjpmb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbn1cXG4uZmxhdHBpY2tyLXdyYXBwZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4uZmxhdHBpY2tyLW1vbnRocyB7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1tb250aCB7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICBmaWxsOiByZ2JhKDAsMCwwLDAuOSk7XFxuICBoZWlnaHQ6IDM0cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gIC13ZWJraXQtZmxleDogMTtcXG4gICAgICAtbXMtZmxleDogMTtcXG4gICAgICAgICAgZmxleDogMTtcXG59XFxuLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1wcmV2LW1vbnRoLFxcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItbmV4dC1tb250aCB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBoZWlnaHQ6IDM0cHg7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgei1pbmRleDogMztcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuOSk7XFxuICBmaWxsOiByZ2JhKDAsMCwwLDAuOSk7XFxufVxcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aC5mbGF0cGlja3ItZGlzYWJsZWQsXFxuLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1uZXh0LW1vbnRoLmZsYXRwaWNrci1kaXNhYmxlZCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLXByZXYtbW9udGggaSxcXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLW5leHQtbW9udGggaSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aC5mbGF0cGlja3ItcHJldi1tb250aCxcXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLW5leHQtbW9udGguZmxhdHBpY2tyLXByZXYtbW9udGgge1xcbi8qXFxuICAgICAgLypydGw6YmVnaW46aWdub3JlKi9cXG4vKlxcbiAgICAgICovXFxuICBsZWZ0OiAwO1xcbi8qXFxuICAgICAgLypydGw6ZW5kOmlnbm9yZSovXFxuLypcXG4gICAgICAqL1xcbn1cXG4vKlxcbiAgICAgIC8qcnRsOmJlZ2luOmlnbm9yZSovXFxuLypcXG4gICAgICAvKnJ0bDplbmQ6aWdub3JlKi9cXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLXByZXYtbW9udGguZmxhdHBpY2tyLW5leHQtbW9udGgsXFxuLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1uZXh0LW1vbnRoLmZsYXRwaWNrci1uZXh0LW1vbnRoIHtcXG4vKlxcbiAgICAgIC8qcnRsOmJlZ2luOmlnbm9yZSovXFxuLypcXG4gICAgICAqL1xcbiAgcmlnaHQ6IDA7XFxuLypcXG4gICAgICAvKnJ0bDplbmQ6aWdub3JlKi9cXG4vKlxcbiAgICAgICovXFxufVxcbi8qXFxuICAgICAgLypydGw6YmVnaW46aWdub3JlKi9cXG4vKlxcbiAgICAgIC8qcnRsOmVuZDppZ25vcmUqL1xcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aDpob3ZlcixcXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLW5leHQtbW9udGg6aG92ZXIge1xcbiAgY29sb3I6ICM5NTllYTk7XFxufVxcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aDpob3ZlciBzdmcsXFxuLmZsYXRwaWNrci1tb250aHMgLmZsYXRwaWNrci1uZXh0LW1vbnRoOmhvdmVyIHN2ZyB7XFxuICBmaWxsOiAjZjY0NzQ3O1xcbn1cXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLXByZXYtbW9udGggc3ZnLFxcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItbmV4dC1tb250aCBzdmcge1xcbiAgd2lkdGg6IDE0cHg7XFxuICBoZWlnaHQ6IDE0cHg7XFxufVxcbi5mbGF0cGlja3ItbW9udGhzIC5mbGF0cGlja3ItcHJldi1tb250aCBzdmcgcGF0aCxcXG4uZmxhdHBpY2tyLW1vbnRocyAuZmxhdHBpY2tyLW5leHQtbW9udGggc3ZnIHBhdGgge1xcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBmaWxsIDAuMXM7XFxuICB0cmFuc2l0aW9uOiBmaWxsIDAuMXM7XFxuICBmaWxsOiBpbmhlcml0O1xcbn1cXG4ubnVtSW5wdXRXcmFwcGVyIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGhlaWdodDogYXV0bztcXG59XFxuLm51bUlucHV0V3JhcHBlciBpbnB1dCxcXG4ubnVtSW5wdXRXcmFwcGVyIHNwYW4ge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG4ubnVtSW5wdXRXcmFwcGVyIGlucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubnVtSW5wdXRXcmFwcGVyIGlucHV0OjotbXMtY2xlYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuLm51bUlucHV0V3JhcHBlciBpbnB1dDo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbixcXG4ubnVtSW5wdXRXcmFwcGVyIGlucHV0Ojotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uIHtcXG4gIG1hcmdpbjogMDtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG59XFxuLm51bUlucHV0V3JhcHBlciBzcGFuIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgd2lkdGg6IDE0cHg7XFxuICBwYWRkaW5nOiAwIDRweCAwIDJweDtcXG4gIGhlaWdodDogNTAlO1xcbiAgbGluZS1oZWlnaHQ6IDUwJTtcXG4gIG9wYWNpdHk6IDA7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDU3LDU3LDU3LDAuMTUpO1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4ubnVtSW5wdXRXcmFwcGVyIHNwYW46aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjEpO1xcbn1cXG4ubnVtSW5wdXRXcmFwcGVyIHNwYW46YWN0aXZlIHtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMC4yKTtcXG59XFxuLm51bUlucHV0V3JhcHBlciBzcGFuOmFmdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcbi5udW1JbnB1dFdyYXBwZXIgc3Bhbi5hcnJvd1VwIHtcXG4gIHRvcDogMDtcXG4gIGJvcmRlci1ib3R0b206IDA7XFxufVxcbi5udW1JbnB1dFdyYXBwZXIgc3Bhbi5hcnJvd1VwOmFmdGVyIHtcXG4gIGJvcmRlci1sZWZ0OiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItcmlnaHQ6IDRweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJvcmRlci1ib3R0b206IDRweCBzb2xpZCByZ2JhKDU3LDU3LDU3LDAuNik7XFxuICB0b3A6IDI2JTtcXG59XFxuLm51bUlucHV0V3JhcHBlciBzcGFuLmFycm93RG93biB7XFxuICB0b3A6IDUwJTtcXG59XFxuLm51bUlucHV0V3JhcHBlciBzcGFuLmFycm93RG93bjphZnRlciB7XFxuICBib3JkZXItbGVmdDogNHB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJpZ2h0OiA0cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItdG9wOiA0cHggc29saWQgcmdiYSg1Nyw1Nyw1NywwLjYpO1xcbiAgdG9wOiA0MCU7XFxufVxcbi5udW1JbnB1dFdyYXBwZXIgc3BhbiBzdmcge1xcbiAgd2lkdGg6IGluaGVyaXQ7XFxuICBoZWlnaHQ6IGF1dG87XFxufVxcbi5udW1JbnB1dFdyYXBwZXIgc3BhbiBzdmcgcGF0aCB7XFxuICBmaWxsOiByZ2JhKDAsMCwwLDAuNSk7XFxufVxcbi5udW1JbnB1dFdyYXBwZXI6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjA1KTtcXG59XFxuLm51bUlucHV0V3JhcHBlcjpob3ZlciBzcGFuIHtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5mbGF0cGlja3ItY3VycmVudC1tb250aCB7XFxuICBmb250LXNpemU6IDEzNSU7XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiA3NSU7XFxuICBsZWZ0OiAxMi41JTtcXG4gIHBhZGRpbmc6IDcuNDhweCAwIDAgMDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgaGVpZ2h0OiAzNHB4O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpO1xcbn1cXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggc3Bhbi5jdXItbW9udGgge1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgY29sb3I6IGluaGVyaXQ7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBtYXJnaW4tbGVmdDogMC41Y2g7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggc3Bhbi5jdXItbW9udGg6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjA1KTtcXG59XFxuLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIC5udW1JbnB1dFdyYXBwZXIge1xcbiAgd2lkdGg6IDZjaDtcXG4gIHdpZHRoOiA3Y2hcXFxcMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIC5udW1JbnB1dFdyYXBwZXIgc3Bhbi5hcnJvd1VwOmFmdGVyIHtcXG4gIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwwLDAsMC45KTtcXG59XFxuLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIC5udW1JbnB1dFdyYXBwZXIgc3Bhbi5hcnJvd0Rvd246YWZ0ZXIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogcmdiYSgwLDAsMCwwLjkpO1xcbn1cXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggaW5wdXQuY3VyLXllYXIge1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGN1cnNvcjogdGV4dDtcXG4gIHBhZGRpbmc6IDAgMCAwIDAuNWNoO1xcbiAgbWFyZ2luOiAwO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1zaXplOiBpbmhlcml0O1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxuICBmb250LXdlaWdodDogMzAwO1xcbiAgbGluZS1oZWlnaHQ6IGluaGVyaXQ7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgdmVydGljYWwtYWxpZ246IGluaXRpYWw7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcXG4gIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbiAgYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbn1cXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggaW5wdXQuY3VyLXllYXI6Zm9jdXMge1xcbiAgb3V0bGluZTogMDtcXG59XFxuLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIGlucHV0LmN1ci15ZWFyW2Rpc2FibGVkXSxcXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggaW5wdXQuY3VyLXllYXJbZGlzYWJsZWRdOmhvdmVyIHtcXG4gIGZvbnQtc2l6ZTogMTAwJTtcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuNSk7XFxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggLmZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRocyB7XFxuICBhcHBlYXJhbmNlOiBtZW51bGlzdDtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogaW5oZXJpdDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGhlaWdodDogYXV0bztcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgbWFyZ2luOiAtMXB4IDAgMCAwO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHBhZGRpbmc6IDAgMCAwIDAuNWNoO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IGluaXRpYWw7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG1lbnVsaXN0O1xcbiAgLW1vei1hcHBlYXJhbmNlOiBtZW51bGlzdDtcXG4gIHdpZHRoOiBhdXRvO1xcbn1cXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggLmZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRoczpmb2N1cyxcXG4uZmxhdHBpY2tyLWN1cnJlbnQtbW9udGggLmZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRoczphY3RpdmUge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIC5mbGF0cGlja3ItbW9udGhEcm9wZG93bi1tb250aHM6aG92ZXIge1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjA1KTtcXG59XFxuLmZsYXRwaWNrci1jdXJyZW50LW1vbnRoIC5mbGF0cGlja3ItbW9udGhEcm9wZG93bi1tb250aHMgLmZsYXRwaWNrci1tb250aERyb3Bkb3duLW1vbnRoIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHBhZGRpbmc6IDA7XFxufVxcbi5mbGF0cGlja3Itd2Vla2RheXMge1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtd2Via2l0LWFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogMjhweDtcXG59XFxuLmZsYXRwaWNrci13ZWVrZGF5cyAuZmxhdHBpY2tyLXdlZWtkYXljb250YWluZXIge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgLXdlYmtpdC1mbGV4OiAxO1xcbiAgICAgIC1tcy1mbGV4OiAxO1xcbiAgICAgICAgICBmbGV4OiAxO1xcbn1cXG5zcGFuLmZsYXRwaWNrci13ZWVrZGF5IHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIGZvbnQtc2l6ZTogOTAlO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogcmdiYSgwLDAsMCwwLjU0KTtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgbWFyZ2luOiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgLXdlYmtpdC1mbGV4OiAxO1xcbiAgICAgIC1tcy1mbGV4OiAxO1xcbiAgICAgICAgICBmbGV4OiAxO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcXG59XFxuLmRheUNvbnRhaW5lcixcXG4uZmxhdHBpY2tyLXdlZWtzIHtcXG4gIHBhZGRpbmc6IDFweCAwIDAgMDtcXG59XFxuLmZsYXRwaWNrci1kYXlzIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBzdGFydDtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICAgICAgLW1zLWZsZXgtYWxpZ246IHN0YXJ0O1xcbiAgICAgICAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIHdpZHRoOiAzMDcuODc1cHg7XFxufVxcbi5mbGF0cGlja3ItZGF5czpmb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbn1cXG4uZGF5Q29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDA7XFxuICBvdXRsaW5lOiAwO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG4gIHdpZHRoOiAzMDcuODc1cHg7XFxuICBtaW4td2lkdGg6IDMwNy44NzVweDtcXG4gIG1heC13aWR0aDogMzA3Ljg3NXB4O1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICAtd2Via2l0LWZsZXgtd3JhcDogd3JhcDtcXG4gICAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gIC1tcy1mbGV4LXBhY2s6IGp1c3RpZnk7XFxuICAtd2Via2l0LWp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KTtcXG4gIG9wYWNpdHk6IDE7XFxufVxcbi5kYXlDb250YWluZXIgKyAuZGF5Q29udGFpbmVyIHtcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogLTFweCAwIDAgI2U2ZTZlNjtcXG4gICAgICAgICAgYm94LXNoYWRvdzogLTFweCAwIDAgI2U2ZTZlNjtcXG59XFxuLmZsYXRwaWNrci1kYXkge1xcbiAgYmFja2dyb3VuZDogbm9uZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLXJhZGl1czogMTUwcHg7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogIzM5MzkzOTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICB3aWR0aDogMTQuMjg1NzE0MyU7XFxuICAtd2Via2l0LWZsZXgtYmFzaXM6IDE0LjI4NTcxNDMlO1xcbiAgICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAxNC4yODU3MTQzJTtcXG4gICAgICAgICAgZmxleC1iYXNpczogMTQuMjg1NzE0MyU7XFxuICBtYXgtd2lkdGg6IDM5cHg7XFxuICBoZWlnaHQ6IDM5cHg7XFxuICBsaW5lLWhlaWdodDogMzlweDtcXG4gIG1hcmdpbjogMDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLmZsYXRwaWNrci1kYXkuaW5SYW5nZSxcXG4uZmxhdHBpY2tyLWRheS5wcmV2TW9udGhEYXkuaW5SYW5nZSxcXG4uZmxhdHBpY2tyLWRheS5uZXh0TW9udGhEYXkuaW5SYW5nZSxcXG4uZmxhdHBpY2tyLWRheS50b2RheS5pblJhbmdlLFxcbi5mbGF0cGlja3ItZGF5LnByZXZNb250aERheS50b2RheS5pblJhbmdlLFxcbi5mbGF0cGlja3ItZGF5Lm5leHRNb250aERheS50b2RheS5pblJhbmdlLFxcbi5mbGF0cGlja3ItZGF5OmhvdmVyLFxcbi5mbGF0cGlja3ItZGF5LnByZXZNb250aERheTpob3ZlcixcXG4uZmxhdHBpY2tyLWRheS5uZXh0TW9udGhEYXk6aG92ZXIsXFxuLmZsYXRwaWNrci1kYXk6Zm9jdXMsXFxuLmZsYXRwaWNrci1kYXkucHJldk1vbnRoRGF5OmZvY3VzLFxcbi5mbGF0cGlja3ItZGF5Lm5leHRNb250aERheTpmb2N1cyB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvdXRsaW5lOiAwO1xcbiAgYmFja2dyb3VuZDogI2U2ZTZlNjtcXG4gIGJvcmRlci1jb2xvcjogI2U2ZTZlNjtcXG59XFxuLmZsYXRwaWNrci1kYXkudG9kYXkge1xcbiAgYm9yZGVyLWNvbG9yOiAjOTU5ZWE5O1xcbn1cXG4uZmxhdHBpY2tyLWRheS50b2RheTpob3ZlcixcXG4uZmxhdHBpY2tyLWRheS50b2RheTpmb2N1cyB7XFxuICBib3JkZXItY29sb3I6ICM5NTllYTk7XFxuICBiYWNrZ3JvdW5kOiAjOTU5ZWE5O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcbi5mbGF0cGlja3ItZGF5LnNlbGVjdGVkLFxcbi5mbGF0cGlja3ItZGF5LnN0YXJ0UmFuZ2UsXFxuLmZsYXRwaWNrci1kYXkuZW5kUmFuZ2UsXFxuLmZsYXRwaWNrci1kYXkuc2VsZWN0ZWQuaW5SYW5nZSxcXG4uZmxhdHBpY2tyLWRheS5zdGFydFJhbmdlLmluUmFuZ2UsXFxuLmZsYXRwaWNrci1kYXkuZW5kUmFuZ2UuaW5SYW5nZSxcXG4uZmxhdHBpY2tyLWRheS5zZWxlY3RlZDpmb2N1cyxcXG4uZmxhdHBpY2tyLWRheS5zdGFydFJhbmdlOmZvY3VzLFxcbi5mbGF0cGlja3ItZGF5LmVuZFJhbmdlOmZvY3VzLFxcbi5mbGF0cGlja3ItZGF5LnNlbGVjdGVkOmhvdmVyLFxcbi5mbGF0cGlja3ItZGF5LnN0YXJ0UmFuZ2U6aG92ZXIsXFxuLmZsYXRwaWNrci1kYXkuZW5kUmFuZ2U6aG92ZXIsXFxuLmZsYXRwaWNrci1kYXkuc2VsZWN0ZWQucHJldk1vbnRoRGF5LFxcbi5mbGF0cGlja3ItZGF5LnN0YXJ0UmFuZ2UucHJldk1vbnRoRGF5LFxcbi5mbGF0cGlja3ItZGF5LmVuZFJhbmdlLnByZXZNb250aERheSxcXG4uZmxhdHBpY2tyLWRheS5zZWxlY3RlZC5uZXh0TW9udGhEYXksXFxuLmZsYXRwaWNrci1kYXkuc3RhcnRSYW5nZS5uZXh0TW9udGhEYXksXFxuLmZsYXRwaWNrci1kYXkuZW5kUmFuZ2UubmV4dE1vbnRoRGF5IHtcXG4gIGJhY2tncm91bmQ6ICM1NjlmZjc7XFxuICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmU7XFxuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGJvcmRlci1jb2xvcjogIzU2OWZmNztcXG59XFxuLmZsYXRwaWNrci1kYXkuc2VsZWN0ZWQuc3RhcnRSYW5nZSxcXG4uZmxhdHBpY2tyLWRheS5zdGFydFJhbmdlLnN0YXJ0UmFuZ2UsXFxuLmZsYXRwaWNrci1kYXkuZW5kUmFuZ2Uuc3RhcnRSYW5nZSB7XFxuICBib3JkZXItcmFkaXVzOiA1MHB4IDAgMCA1MHB4O1xcbn1cXG4uZmxhdHBpY2tyLWRheS5zZWxlY3RlZC5lbmRSYW5nZSxcXG4uZmxhdHBpY2tyLWRheS5zdGFydFJhbmdlLmVuZFJhbmdlLFxcbi5mbGF0cGlja3ItZGF5LmVuZFJhbmdlLmVuZFJhbmdlIHtcXG4gIGJvcmRlci1yYWRpdXM6IDAgNTBweCA1MHB4IDA7XFxufVxcbi5mbGF0cGlja3ItZGF5LnNlbGVjdGVkLnN0YXJ0UmFuZ2UgKyAuZW5kUmFuZ2U6bm90KDpudGgtY2hpbGQoN24rMSkpLFxcbi5mbGF0cGlja3ItZGF5LnN0YXJ0UmFuZ2Uuc3RhcnRSYW5nZSArIC5lbmRSYW5nZTpub3QoOm50aC1jaGlsZCg3bisxKSksXFxuLmZsYXRwaWNrci1kYXkuZW5kUmFuZ2Uuc3RhcnRSYW5nZSArIC5lbmRSYW5nZTpub3QoOm50aC1jaGlsZCg3bisxKSkge1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAtMTBweCAwIDAgIzU2OWZmNztcXG4gICAgICAgICAgYm94LXNoYWRvdzogLTEwcHggMCAwICM1NjlmZjc7XFxufVxcbi5mbGF0cGlja3ItZGF5LnNlbGVjdGVkLnN0YXJ0UmFuZ2UuZW5kUmFuZ2UsXFxuLmZsYXRwaWNrci1kYXkuc3RhcnRSYW5nZS5zdGFydFJhbmdlLmVuZFJhbmdlLFxcbi5mbGF0cGlja3ItZGF5LmVuZFJhbmdlLnN0YXJ0UmFuZ2UuZW5kUmFuZ2Uge1xcbiAgYm9yZGVyLXJhZGl1czogNTBweDtcXG59XFxuLmZsYXRwaWNrci1kYXkuaW5SYW5nZSB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAtNXB4IDAgMCAjZTZlNmU2LCA1cHggMCAwICNlNmU2ZTY7XFxuICAgICAgICAgIGJveC1zaGFkb3c6IC01cHggMCAwICNlNmU2ZTYsIDVweCAwIDAgI2U2ZTZlNjtcXG59XFxuLmZsYXRwaWNrci1kYXkuZmxhdHBpY2tyLWRpc2FibGVkLFxcbi5mbGF0cGlja3ItZGF5LmZsYXRwaWNrci1kaXNhYmxlZDpob3ZlcixcXG4uZmxhdHBpY2tyLWRheS5wcmV2TW9udGhEYXksXFxuLmZsYXRwaWNrci1kYXkubmV4dE1vbnRoRGF5LFxcbi5mbGF0cGlja3ItZGF5Lm5vdEFsbG93ZWQsXFxuLmZsYXRwaWNrci1kYXkubm90QWxsb3dlZC5wcmV2TW9udGhEYXksXFxuLmZsYXRwaWNrci1kYXkubm90QWxsb3dlZC5uZXh0TW9udGhEYXkge1xcbiAgY29sb3I6IHJnYmEoNTcsNTcsNTcsMC4zKTtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG59XFxuLmZsYXRwaWNrci1kYXkuZmxhdHBpY2tyLWRpc2FibGVkLFxcbi5mbGF0cGlja3ItZGF5LmZsYXRwaWNrci1kaXNhYmxlZDpob3ZlciB7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbiAgY29sb3I6IHJnYmEoNTcsNTcsNTcsMC4xKTtcXG59XFxuLmZsYXRwaWNrci1kYXkud2Vlay5zZWxlY3RlZCB7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgLXdlYmtpdC1ib3gtc2hhZG93OiAtNXB4IDAgMCAjNTY5ZmY3LCA1cHggMCAwICM1NjlmZjc7XFxuICAgICAgICAgIGJveC1zaGFkb3c6IC01cHggMCAwICM1NjlmZjcsIDVweCAwIDAgIzU2OWZmNztcXG59XFxuLmZsYXRwaWNrci1kYXkuaGlkZGVuIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuLnJhbmdlTW9kZSAuZmxhdHBpY2tyLWRheSB7XFxuICBtYXJnaW4tdG9wOiAxcHg7XFxufVxcbi5mbGF0cGlja3Itd2Vla3dyYXBwZXIge1xcbiAgZmxvYXQ6IGxlZnQ7XFxufVxcbi5mbGF0cGlja3Itd2Vla3dyYXBwZXIgLmZsYXRwaWNrci13ZWVrcyB7XFxuICBwYWRkaW5nOiAwIDEycHg7XFxuICAtd2Via2l0LWJveC1zaGFkb3c6IDFweCAwIDAgI2U2ZTZlNjtcXG4gICAgICAgICAgYm94LXNoYWRvdzogMXB4IDAgMCAjZTZlNmU2O1xcbn1cXG4uZmxhdHBpY2tyLXdlZWt3cmFwcGVyIC5mbGF0cGlja3Itd2Vla2RheSB7XFxuICBmbG9hdDogbm9uZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxufVxcbi5mbGF0cGlja3Itd2Vla3dyYXBwZXIgc3Bhbi5mbGF0cGlja3ItZGF5LFxcbi5mbGF0cGlja3Itd2Vla3dyYXBwZXIgc3Bhbi5mbGF0cGlja3ItZGF5OmhvdmVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IG5vbmU7XFxuICBjb2xvcjogcmdiYSg1Nyw1Nyw1NywwLjMpO1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcbi5mbGF0cGlja3ItaW5uZXJDb250YWluZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5mbGF0cGlja3ItckNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBwYWRkaW5nOiAwO1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgb3V0bGluZTogMDtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgaGVpZ2h0OiAwO1xcbiAgbGluZS1oZWlnaHQ6IDQwcHg7XFxuICBtYXgtaGVpZ2h0OiA0MHB4O1xcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG4uZmxhdHBpY2tyLXRpbWU6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBkaXNwbGF5OiB0YWJsZTtcXG4gIGNsZWFyOiBib3RoO1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUgLm51bUlucHV0V3JhcHBlciB7XFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcbiAgLXdlYmtpdC1mbGV4OiAxO1xcbiAgICAgIC1tcy1mbGV4OiAxO1xcbiAgICAgICAgICBmbGV4OiAxO1xcbiAgd2lkdGg6IDQwJTtcXG4gIGhlaWdodDogNDBweDtcXG4gIGZsb2F0OiBsZWZ0O1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUgLm51bUlucHV0V3JhcHBlciBzcGFuLmFycm93VXA6YWZ0ZXIge1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogIzM5MzkzOTtcXG59XFxuLmZsYXRwaWNrci10aW1lIC5udW1JbnB1dFdyYXBwZXIgc3Bhbi5hcnJvd0Rvd246YWZ0ZXIge1xcbiAgYm9yZGVyLXRvcC1jb2xvcjogIzM5MzkzOTtcXG59XFxuLmZsYXRwaWNrci10aW1lLmhhc1NlY29uZHMgLm51bUlucHV0V3JhcHBlciB7XFxuICB3aWR0aDogMjYlO1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUudGltZTI0aHIgLm51bUlucHV0V3JhcHBlciB7XFxuICB3aWR0aDogNDklO1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUgaW5wdXQge1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmU7XFxuICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XFxuICBib3JkZXI6IDA7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGhlaWdodDogaW5oZXJpdDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgY29sb3I6ICMzOTM5Mzk7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcXG4gIC1tb3otYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbiAgYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUgaW5wdXQuZmxhdHBpY2tyLWhvdXIge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcbi5mbGF0cGlja3ItdGltZSBpbnB1dC5mbGF0cGlja3ItbWludXRlLFxcbi5mbGF0cGlja3ItdGltZSBpbnB1dC5mbGF0cGlja3Itc2Vjb25kIHtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxufVxcbi5mbGF0cGlja3ItdGltZSBpbnB1dDpmb2N1cyB7XFxuICBvdXRsaW5lOiAwO1xcbiAgYm9yZGVyOiAwO1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUgLmZsYXRwaWNrci10aW1lLXNlcGFyYXRvcixcXG4uZmxhdHBpY2tyLXRpbWUgLmZsYXRwaWNrci1hbS1wbSB7XFxuICBoZWlnaHQ6IGluaGVyaXQ7XFxuICBmbG9hdDogbGVmdDtcXG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xcbiAgY29sb3I6ICMzOTM5Mzk7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHdpZHRoOiAyJTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtd2Via2l0LWFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgICAtbXMtZmxleC1pdGVtLWFsaWduOiBjZW50ZXI7XFxuICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuLmZsYXRwaWNrci10aW1lIC5mbGF0cGlja3ItYW0tcG0ge1xcbiAgb3V0bGluZTogMDtcXG4gIHdpZHRoOiAxOCU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG4uZmxhdHBpY2tyLXRpbWUgaW5wdXQ6aG92ZXIsXFxuLmZsYXRwaWNrci10aW1lIC5mbGF0cGlja3ItYW0tcG06aG92ZXIsXFxuLmZsYXRwaWNrci10aW1lIGlucHV0OmZvY3VzLFxcbi5mbGF0cGlja3ItdGltZSAuZmxhdHBpY2tyLWFtLXBtOmZvY3VzIHtcXG4gIGJhY2tncm91bmQ6ICNlZWU7XFxufVxcbi5mbGF0cGlja3ItaW5wdXRbcmVhZG9ubHldIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuQC13ZWJraXQta2V5ZnJhbWVzIGZwRmFkZUluRG93biB7XFxuICBmcm9tIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIC0yMHB4LCAwKTtcXG4gIH1cXG4gIHRvIHtcXG4gICAgb3BhY2l0eTogMTtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsIDAsIDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICB9XFxufVxcbkBrZXlmcmFtZXMgZnBGYWRlSW5Eb3duIHtcXG4gIGZyb20ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO1xcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgLTIwcHgsIDApO1xcbiAgfVxcbiAgdG8ge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwgMCwgMCk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTtcXG4gIH1cXG59XFxuXCIiLCJtb2R1bGUuZXhwb3J0cyA9IFwiLypcXHJcXG4qIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxcclxcbiogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY2xvdWQ+XFxyXFxuKlxcclxcbiogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcXHJcXG4qIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxcclxcbiovXFxyXFxuXFxyXFxuLmd3LWFsaWdubWVudC1jZWxsLXJpZ2h0LFxcclxcbi5ndy1hbGlnbm1lbnQtY2VsbC1yaWdodCAuYWctY2VsbC12YWx1ZSxcXHJcXG4uZ3ctYWxpZ25tZW50LWNlbGwtcmlnaHQgLnRlbXBsYXRlUmVuZGVyZXIge1xcclxcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxuICAtd2Via2l0LWJveC1wYWNrOiBlbmQ7XFxyXFxuICAgICAgLW1zLWZsZXgtcGFjazogZW5kO1xcclxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcclxcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXHJcXG4gICAgICAtbXMtZmxleDogMTtcXHJcXG4gICAgICAgICAgZmxleDogMTtcXHJcXG59XFxyXFxuXFxyXFxuLmd3LWFsaWdubWVudC1jZWxsLWNlbnRlcixcXHJcXG4uZ3ctYWxpZ25tZW50LWNlbGwtY2VudGVyIC5hZy1jZWxsLXZhbHVlLFxcclxcbi5ndy1hbGlnbm1lbnQtY2VsbC1jZW50ZXIgLnRlbXBsYXRlUmVuZGVyZXIge1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcclxcbiAgICAgIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXHJcXG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAtd2Via2l0LWJveC1mbGV4OiAxO1xcclxcbiAgICAgIC1tcy1mbGV4OiAxO1xcclxcbiAgICAgICAgICBmbGV4OiAxO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3ctYWxpZ25tZW50LWNlbGwtcmlnaHQgLmJvb2xTd2l0Y2gsXFxyXFxuLmd3LWFsaWdubWVudC1jZWxsLWNlbnRlciAuYm9vbFN3aXRjaCB7XFxyXFxuICB0ZXh0LWFsaWduOiBpbml0aWFsO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3ctYWxpZ25tZW50LWNlbGwtY2VudGVyIC5ib29sU3dpdGNoX193cmFwcGVyLFxcclxcbi5ndy1hbGlnbm1lbnQtY2VsbC1yaWdodCAuYm9vbFN3aXRjaF9fd3JhcHBlciB7XFxyXFxuICB3aWR0aDogYXV0bztcXHJcXG4gIGhlaWdodDogYXV0bztcXHJcXG59XFxyXFxuXFxyXFxuLmd3LWFsaWdubWVudC1jZWxsLWNlbnRlciAuYm9vbFN3aXRjaF9fd3JhcHBlciB7XFxyXFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxyXFxuICAgICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcclxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmd3LWFsaWdubWVudC1jZWxsLXJpZ2h0IC5ib29sU3dpdGNoX193cmFwcGVyIHtcXHJcXG4gIC13ZWJraXQtYm94LXBhY2s6IHJpZ2h0O1xcclxcbiAgICAgIC1tcy1mbGV4LXBhY2s6IHJpZ2h0O1xcclxcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHJpZ2h0O1xcclxcbn1cXHJcXG5cXHJcXG4uZ3ctYWxpZ25tZW50LWhlYWRlci1yaWdodCAuYWctaGVhZGVyLWNlbGwtbGFiZWwge1xcclxcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcclxcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiByZXZlcnNlO1xcclxcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XFxyXFxuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcXHJcXG59XFxyXFxuXFxyXFxuLmd3LWFsaWdubWVudC1oZWFkZXItY2VudGVyIC5hZy1oZWFkZXItY2VsbC1sYWJlbCB7XFxyXFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXHJcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXHJcXG4gICAgICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxyXFxuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3ctYWxpZ25tZW50LWhlYWRlci1jZW50ZXIgLmFnLWhlYWRlci1jZWxsLXRleHQge1xcclxcbiAgbWFyZ2luLWxlZnQ6IC0xNnB4ICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbi5ndy1hbGlnbm1lbnQtaGVhZGVyLXJpZ2h0IC5hZy1jZWxsLWxhYmVsLWNvbnRhaW5lcixcXHJcXG4uZ3ctYWxpZ25tZW50LWhlYWRlci1jZW50ZXIgLmFnLWNlbGwtbGFiZWwtY29udGFpbmVyIHtcXHJcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXHJcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcclxcbiAgICAgIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbn1cXHJcXG5cXHJcXG4uZ3ctdG9vbHRpcCB7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMXM7XFxyXFxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDFzO1xcclxcbiAgYm9yZGVyLXJhZGl1czogMy4xcHg7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDI2MG1zO1xcclxcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNjBtcztcXHJcXG59XFxyXFxuXFxyXFxuLmd3LXRvb2x0aXAtbGlnaHQge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxuICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCA2cHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcXHJcXG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDZweCByZ2JhKDAsIDAsIDAsIDAuMjUpO1xcclxcbn1cXHJcXG5cXHJcXG4uZ3ctdG9vbHRpcC1kYXJrIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICMxYzFmMjA7XFxyXFxuICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCA2cHggIzVjNWM1YztcXHJcXG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDZweCAjNWM1YzVjO1xcclxcbiAgY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4uYWctc2VsZWN0aW9uLWNoZWNrYm94LmFnLWludmlzaWJsZSB7XFxyXFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbi5hZy1jZWxsLXdyYXBwZXIge1xcclxcbiAgaGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cIiIsIm1vZHVsZS5leHBvcnRzID0gXCIuYXV0b2NvbXBsZXRlSW5wdXRXcmFwcGVyX19pbnB1dCB7XFxyXFxuICBwYWRkaW5nLWxlZnQ6IDZweDtcXHJcXG4gIGJvcmRlcjogdGhpbiBzb2xpZCB2YXIoLS1hZy1pbnB1dC1mb2N1cy1ib3JkZXItY29sb3IsIHJnYmEoMzMsIDE1MCwgMjQzLCAwLjQpKTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFnLWJhY2tncm91bmQtY29sb3IpO1xcclxcbiAgY29sb3I6IGluaGVyaXQ7XFxyXFxuICBvdXRsaW5lOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uYWctdGhlbWUtYWxwaW5lIC5hdXRvY29tcGxldGVJbnB1dFdyYXBwZXJfX2lucHV0LFxcclxcbi5hZy10aGVtZS1iYWxoYW0gLmF1dG9jb21wbGV0ZUlucHV0V3JhcHBlcl9faW5wdXQsXFxyXFxuLmFnLXRoZW1lLW1hdGVyaWFsIC5hdXRvY29tcGxldGVJbnB1dFdyYXBwZXJfX2lucHV0IHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFnLWJhY2tncm91bmQtY29sb3IsICNmZmYpO1xcclxcbn1cXHJcXG5cXHJcXG4uYWctdGhlbWUtYWxwaW5lLWRhcmsgLmF1dG9jb21wbGV0ZUlucHV0V3JhcHBlcl9faW5wdXQsXFxyXFxuLmFnLXRoZW1lLWJhbGhhbS1kYXJrIC5hdXRvY29tcGxldGVJbnB1dFdyYXBwZXJfX2lucHV0IHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFnLWJhY2tncm91bmQtY29sb3IsICMyZDM0MzYpO1xcclxcbn1cXHJcXG5cXHJcXG4uYXV0b2NvbXBsZXRlIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFnLWJhY2tncm91bmQtY29sb3IsICNmZmYpO1xcclxcbiAgei1pbmRleDogMTAwMDtcXHJcXG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIGJvcmRlcjogdGhpbiBzb2xpZCB2YXIoLS1hZy1pbnB1dC1mb2N1cy1ib3JkZXItY29sb3IsIHJnYmEoMzMsIDE1MCwgMjQzLCAwLjQpKTtcXHJcXG4gIGJvcmRlci10b3A6IDA7XFxyXFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxyXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwO1xcclxcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDA7XFxyXFxuICBvdmVyZmxvdzogYXV0bztcXHJcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMHB4IDNweCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXHJcXG4gICAgICAgICAgYm94LXNoYWRvdzogMHB4IDNweCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4yKTtcXHJcXG59XFxyXFxuXFxyXFxuLmF1dG9jb21wbGV0ZS5kYXJrIHtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFnLWJhY2tncm91bmQtY29sb3IsICMyZDM0MzYpO1xcclxcbiAgY29sb3I6IHZhcigtLWFnLWRhdGEtY29sb3IsIHZhcigtLWFnLWZvcmVncm91bmQtY29sb3IsICNmZmYpKTtcXHJcXG59XFxyXFxuXFxyXFxuLmF1dG9jb21wbGV0ZSAuc3VnZ2VzdGlvbi1ncm91cCB7XFxyXFxuICBiYWNrZ3JvdW5kOiAjZWVlO1xcclxcbiAgcGFkZGluZzogNXB4IDZweDtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbn1cXHJcXG5cXHJcXG4uYXV0b2NvbXBsZXRlLmRhcmsgLnN1Z2dlc3Rpb24tZ3JvdXAge1xcclxcbiAgYmFja2dyb3VuZDogdmFyKC0tYWctYmFja2dyb3VuZC1jb2xvciwgIzE4MWQxZik7XFxyXFxufVxcclxcblxcclxcbi5hdXRvY29tcGxldGUgLnN1Z2dlc3Rpb24taXRlbSB7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uYXV0b2NvbXBsZXRlIC5zdWdnZXN0aW9uLWl0ZW06aG92ZXIge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWctcm93LWhvdmVyLWNvbG9yLCByZ2JhKDMzLCAxNTAsIDI0NCwgMC4xKSk7XFxyXFxufVxcclxcblxcclxcbi5hdXRvY29tcGxldGUgLnN1Z2dlc3Rpb24taXRlbS5zZWxlY3RlZCB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoXFxyXFxuICAgIC0tYWctc2VsZWN0ZWQtcm93LWJhY2tncm91bmQtY29sb3IsXFxyXFxuICAgIHJnYmEoMzMsIDE1MCwgMjQzLCAwLjMpXFxyXFxuICApO1xcclxcbn1cXHJcXG5cXHJcXG4uYXV0b2NvbXBsZXRlIC5lbXB0eSB7XFxyXFxuICBwYWRkaW5nOiA4cHggNnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uYXV0b2NvbXBsZXRlLWlucHV0LWVycm9yIHtcXHJcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMCAtMnB4IDAgI2U5MWU2MyBpbnNldDtcXHJcXG4gICAgICAgICAgYm94LXNoYWRvdzogMCAtMnB4IDAgI2U5MWU2MyBpbnNldDtcXHJcXG59XFxyXFxuXFxyXFxuLmF1dG9jb21wbGV0ZS1pbnB1dC1zdWNjZXNzIHtcXHJcXG4gIC13ZWJraXQtYm94LXNoYWRvdzogMCAtMnB4IDAgIzRjYWY1MCBpbnNldDtcXHJcXG4gICAgICAgICAgYm94LXNoYWRvdzogMCAtMnB4IDAgIzRjYWY1MCBpbnNldDtcXHJcXG59XFxyXFxuXCIiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ3dfZ2V0R3JpZCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19wYXJzZU5vZGUgfSBmcm9tICdldmVudHMvdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19nZXRSb3dzIH0gZnJvbSAnLi9yb3dzJ1xyXG5cclxuY29uc3QgeyBkZWVwUGFyc2VKc29uIH0gPSByZXF1aXJlKCdkZWVwLXBhcnNlLWpzb24nKVxyXG5cclxuLyoqXHJcbiAqIFN0YXJ0IGNlbGwgZWRpdGluZ1xyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ3xudW1iZXJ9IHJvdyBUaGUgcm93IGluZGV4IG9yIGtleVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sS2V5IFRoZSBjb2x1bW4ncyBrZXlcclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlQcmVzcyAgS2V5IHByZXNzXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjaGFyUHJlc3NcclxuICogQHBhcmFtIHtTdHJpbmd9IHJvd1Bpbm5lZCBTZXQgdG8gJ3RvcCcgb3IgJ2JvdHRvbScgdG8gc3RhcnRlZCBlZGl0aW5nIGEgcGlubmVkIHJvd1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3N0YXJ0RWRpdGluZ0NlbGwoXHJcbiAgaWQsXHJcbiAgcm93LFxyXG4gIGNvbEtleSxcclxuICBrZXlQcmVzcyxcclxuICBjaGFyUHJlc3MsXHJcbiAgcm93UGlubmVkXHJcbikge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcbiAgY29uc3QgYXBpID0gb3B0aW9ucy5hcGlcclxuICBjb25zdCBub2RlID0gYXBpLmdldFJvd05vZGUocm93KSB8fCBhcGkuZ2V0RGlzcGxheWVkUm93QXRJbmRleChyb3cpXHJcblxyXG4gIGNvbnNvbGUubG9nKHJvdywgbm9kZSlcclxuXHJcbiAgb3B0aW9ucy5hcGkuc3RhcnRFZGl0aW5nQ2VsbCh7XHJcbiAgICByb3dJbmRleDogbm9kZSA/IG5vZGUucm93SW5kZXggOiByb3csXHJcbiAgICBrZXlQcmVzczogTnVtYmVyKGtleVByZXNzKSxcclxuICAgIGNvbEtleSxcclxuICAgIGNoYXJQcmVzcyxcclxuICAgIHJvd1Bpbm5lZCxcclxuICB9KVxyXG59XHJcblxyXG4vKipcclxuICogU3RvcCBjZWxsIGVkaXRpbmdcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtCb29sZWFufSBjYW5jZWwgd2hlbiB0cnVlIGNhbmNlbCBlZGl0cyAsIHNhdmUgZWRpdHMgb3RoZXJ3aXNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc3RvcEVkaXRpbmcoaWQsIGNhbmNlbCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLnN0b3BFZGl0aW5nKGNhbmNlbClcclxufVxyXG5cclxuLyoqXHJcbiAqIE5hdmlnYXRlcyB0aGUgZ3JpZCBmb2N1cyB0byB0aGUgbmV4dCBjZWxsLCBhcyBpZiB0YWJiaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgIHRoZSBncmlkIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfdGFiVG9OZXh0Q2VsbChpZCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLnRhYlRvTmV4dENlbGwoKVxyXG59XHJcblxyXG4vKipcclxuICogTmF2aWdhdGVzIHRoZSBncmlkIGZvY3VzIHRvIHRoZSBwcmV2aW91cyBjZWxsLCBhcyBpZiBzaGlmdC10YWJiaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgIHRoZSBncmlkIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfdGFiVG9QcmV2aW91c0NlbGwoaWQpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmFwaS50YWJUb1ByZXZpb3VzQ2VsbCgpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgRm9jdXMgb24gdGhlIGdpdmVuIHJvdyBhbmQgY29sdW1uXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gcm93IFRoZSByb3cncyBpbmRleC9pZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1uIFRoZSBjb2x1bW4gaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGZsb2F0aW5nIG51bGwsICd0b3AnLCBvciAnYm90dG9tJy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRGb2N1c2VkQ2VsbChpZCwgcm93LCBjb2x1bW4sIGZsb2F0aW5nID0gbnVsbCkge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcbiAgY29uc3QgZ3JpZCA9IGd3X2dldEdyaWQoaWQpXHJcblxyXG4gIC8vIGlnbm9yZSBmb2N1cyBjYWxscyBpZiBlZGl0aW5nXHJcbiAgaWYgKG9wdGlvbnMuYXBpLmdldEVkaXRpbmdDZWxscygpLmxlbmd0aCA+IDApIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgaWYgKCFKU09OLnBhcnNlKGd3X2dldFJvd3MoaWQsICdmb3JFYWNoTm9kZUFmdGVyRmlsdGVyQW5kU29ydCcsICcnKSkubGVuZ3RoKSB7XHJcbiAgICBncmlkLmNvbnRhaW5lci5mb2N1cygpXHJcbiAgICByZXR1cm5cclxuICB9XHJcblxyXG4gIGxldCByLCBjLCBmXHJcbiAgaWYgKHJvdyA9PSAtMSkge1xyXG4gICAgLy8gdHJ5IHRvIHJldGFpbiB0aGUgZm9jdXNcclxuICAgIGNvbnN0IGxhc3RGb2N1c2VkQ2VsbCA9IG9wdGlvbnMuYXBpLmdldEZvY3VzZWRDZWxsKClcclxuXHJcbiAgICBpZiAobGFzdEZvY3VzZWRDZWxsKSB7XHJcbiAgICAgIHIgPSBsYXN0Rm9jdXNlZENlbGwucm93SW5kZXhcclxuICAgICAgYyA9IGxhc3RGb2N1c2VkQ2VsbC5jb2x1bW4uY29sSWRcclxuICAgICAgZiA9IGxhc3RGb2N1c2VkQ2VsbC5yb3dQaW5uZWRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHIgPSAwXHJcbiAgICAgIGMgPSBvcHRpb25zLmNvbHVtbkFwaS5nZXRBbGxHcmlkQ29sdW1ucygpWzBdLmNvbElkXHJcbiAgICAgIGYgPSBmbG9hdGluZ1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICByID0gIXJvd1xyXG4gICAgICA/IDBcclxuICAgICAgOiBOdW1iZXIuaXNJbnRlZ2VyKCtyb3cpXHJcbiAgICAgID8gK3Jvd1xyXG4gICAgICA6IG9wdGlvbnMuYXBpLmdldFJvd05vZGUocm93KS5yb3dJbmRleFxyXG4gICAgYyA9IGNvbHVtbiA/IGNvbHVtbiA6IG9wdGlvbnMuY29sdW1uQXBpLmdldEFsbEdyaWRDb2x1bW5zKClbMF0uY29sSWRcclxuICAgIGYgPSBmbG9hdGluZ1xyXG4gIH1cclxuXHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkuc2V0Rm9jdXNlZENlbGwociwgYywgZilcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBSYW5nZSBTZWxlY3Rpb25zXHJcbiAqXHJcbiAqIFRoZSBtZXRob2Qgd2lsbCBjcmVhdGUgYSByYW5nZSBqc29uIG1vZGVsIGZvciBlYWNoIHJhbmdlIHdoaWNoIGNhbiBiZSBwYXJzZWQgaW4gQkJqIHNpZGUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBncmlkJ3MgaWRcclxuICpcclxuICogQHJldHVybnMge1N0cmluZ30gc2VsZWN0ZWQgcmFuZ2VzIGFzIEpTT05cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRSYW5nZVNlbGVjdGlvbnMoaWQpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIGNvbnN0IGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHRcclxuICBjb25zdCBhcGkgPSBvcHRpb25zLmFwaVxyXG4gIGNvbnN0IHJhbmdlcyA9IGFwaS5nZXRDZWxsUmFuZ2VzKClcclxuICBjb25zdCBtb2RlbCA9IGFwaS5nZXRNb2RlbCgpXHJcbiAgbGV0IHJlc3VsdCA9IFtdXHJcblxyXG4gIHJhbmdlcy5mb3JFYWNoKHJhbmdlID0+IHtcclxuICAgIC8vIGNvbnN0IHN0YXJ0ID0gZ3dfcGFyc2VOb2RlKG1vZGVsLmdldFJvdyhyYW5nZS5zdGFydFJvdy5yb3dJbmRleCksIG9wdGlvbnMuY29udGV4dCk7XHJcbiAgICAvLyBjb25zdCBlbmQgPSBnd19wYXJzZU5vZGUobW9kZWwuZ2V0Um93KHJhbmdlLmVuZFJvdy5yb3dJbmRleCksIG9wdGlvbnMuY29udGV4dCk7XHJcblxyXG4gICAgLy9pZiAoc3RhcnQgIT09IGZhbHNlICYmIGVuZCAhPT0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGNvbHVtbnMgPSByYW5nZS5jb2x1bW5zXHJcbiAgICAgIC5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKCdhZy1HcmlkLUF1dG9Db2x1bW4nICE9PSBjdXJyZW50LmNvbElkKSB7XHJcbiAgICAgICAgICBhY2N1bXVsYXRvci5wdXNoKGN1cnJlbnQuY29sSWQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYWNjdW11bGF0b3JcclxuICAgICAgfSwgW10pXHJcbiAgICAgIC5maWx0ZXIoQm9vbGVhbilcclxuXHJcbiAgICBjb25zdCBzdGFySW5kZXggPSBNYXRoLm1pbihyYW5nZS5zdGFydFJvdy5yb3dJbmRleCwgcmFuZ2UuZW5kUm93LnJvd0luZGV4KVxyXG4gICAgY29uc3QgZW5kSW5kZXggPSBNYXRoLm1heChyYW5nZS5zdGFydFJvdy5yb3dJbmRleCwgcmFuZ2UuZW5kUm93LnJvd0luZGV4KVxyXG4gICAgY29uc3Qgcm93cyA9IFtdXHJcblxyXG4gICAgZm9yIChsZXQgcm93SW5kZXggPSBzdGFySW5kZXg7IHJvd0luZGV4IDw9IGVuZEluZGV4OyByb3dJbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IG5vZGUgPSBtb2RlbC5nZXRSb3cocm93SW5kZXgpXHJcbiAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkTm9kZSA9IGd3X3BhcnNlTm9kZShub2RlLCBjb250ZXh0KVxyXG4gICAgICAgIGlmIChwYXJzZWROb2RlKSB7XHJcbiAgICAgICAgICByb3dzLnB1c2gocGFyc2VkTm9kZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAocm93cy5sZW5ndGggJiYgY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgcmVzdWx0LnB1c2goeyByOiByb3dzLCBjOiBjb2x1bW5zIH0pXHJcbiAgICB9XHJcbiAgICAvL31cclxuICB9KVxyXG5cclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocmVzdWx0KVxyXG59XHJcblxyXG4vKipcclxuICogUGFyc2UgdGhlIGNlbGxzIHJhbmdlIGluIGEgZm9ybWF0IHRoZSBncmlkIGNhbiB1bmRlcnN0YW5kIHdoZW4gaXQgaXMgcGFzc2VkXHJcbiAqIHRvIGBhcGkuYWRkQ2VsbFJhbmdlYFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBUaGUgZ3JpZCdzIG9wdGlvbnNcclxuICogQHBhcmFtIHtPYmplY3R9IHJhbmdlICBib3VuZGVkIG9yIHVuYm91bmRlZCByYW5nZSBtb2RlbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3BhcnNlQWRkQ2VsbFJhbmdlKG9wdGlvbnMsIHJhbmdlKSB7XHJcbiAgY29uc3QgcHIgPSBkZWVwUGFyc2VKc29uKEpTT04uc3RyaW5naWZ5KHJhbmdlKSlcclxuICBjb25zdCBzdGFydCA9ICEocHIuc3RhcnQgfHwgbnVsbClcclxuICAgID8gMFxyXG4gICAgOiBOdW1iZXIuaXNJbnRlZ2VyKCtwci5zdGFydClcclxuICAgID8gK3ByLnN0YXJ0XHJcbiAgICA6IG9wdGlvbnMuYXBpLmdldFJvd05vZGUocHIuc3RhcnQpLnJvd0luZGV4XHJcbiAgY29uc3QgZW5kID0gIShwci5lbmQgfHwgbnVsbClcclxuICAgID8gb3B0aW9ucy5yb3dEYXRhLmxlbmd0aCAtIDFcclxuICAgIDogTnVtYmVyLmlzSW50ZWdlcigrcHIuZW5kKVxyXG4gICAgPyArcHIuZW5kXHJcbiAgICA6IG9wdGlvbnMuYXBpLmdldFJvd05vZGUocHIuZW5kKS5yb3dJbmRleFxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcm93U3RhcnRJbmRleDogTWF0aC5hYnMoc3RhcnQpLFxyXG4gICAgcm93RW5kSW5kZXg6IE1hdGguYWJzKGVuZCksXHJcbiAgICBjb2x1bW5zOiBwci5jb2x1bW5zLFxyXG4gIH1cclxufVxyXG4vKipcclxuICogQWRkIG5ldyBjZWxsIHJhbmdlXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtPYmplY3R9IHJhbmdlICBib3VuZGVkIG9yIHVuYm91bmRlZCByYW5nZSBtb2RlbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2FkZENlbGxSYW5nZShpZCwgcmFuZ2UpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIG9wdGlvbnMuYXBpLmFkZENlbGxSYW5nZShnd19wYXJzZUFkZENlbGxSYW5nZShvcHRpb25zLCByYW5nZSkpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhcnMgdGhlIHNlbGVjdGVkIHJhbmdlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgZ3JpZCdzIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfY2xlYXJSYW5nZVNlbGVjdGlvbihpZCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLmNsZWFyUmFuZ2VTZWxlY3Rpb24oKVxyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xyXG4vKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY2xvdWQ+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGd3X2dldEdyaWQsIGd3X3V1aWQgfSBmcm9tICdhcGkvdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19wYXJzZUFkZENlbGxSYW5nZSB9IGZyb20gJ2FwaS9jZWxscydcclxuXHJcbmNvbnN0IHsgZGVlcFBhcnNlSnNvbiB9ID0gcmVxdWlyZSgnZGVlcC1wYXJzZS1qc29uJylcclxuXHJcbi8qKlxyXG4gKiBUaGUgYXJyYXkgY29udGFpbnMgcmVmZXJlbmNlcyB0byBjcmVhdGVkIGNoYXJ0cyBmcm9tIEJCai5cclxuICogRXZlcnkgcmVmZXJlbmNlIGlzIGEgQ2hhcnRSZWYgb2JqZWN0IHdoaWNoIHByb3ZpZGVzIHRoZSBhcHBsaWNhdGlvbiB3aXRoIHRoZVxyXG4gKiBkZXN0cm95Q2hhcnQoKSBtZXRob2QgdGhhdCBpcyByZXF1aXJlZCB3aGVuIHRoZSBhcHBsaWNhdGlvbiB3YW50cyB0byBkaXNwb3NlIHRoZSBjaGFydC5cclxuICovXHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBjaGFydCB0b29sYmFyIGl0ZW1zIGRlZmluZWQgaW4gdGhlIGdyaWQncyBjb250ZXh0XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcclxuICogQHJldHVybnMge0FycmF5fSBhcnJheSBvZiBzdXBwb3J0ZWQgY2hhcnQgaXRlbXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRDaGFydFRvb2xiYXJJdGVtcyhwYXJhbXMpIHtcclxuICByZXR1cm4gKFxyXG4gICAgcGFyYW1zLmFwaS5ncmlkT3B0aW9uc1dyYXBwZXIuZ3JpZE9wdGlvbnMuY29udGV4dC5jaGFydFRvb2xiYXJJdGVtcyB8fCBbXVxyXG4gIClcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCBuZXcgY2hhcnQgcmFuZ2VcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gcmFuZ2UgIGJvdW5kZWQgb3IgdW5ib3VuZGVkIHJhbmdlIG1vZGVsXHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gYSB1bmlxdWUgaWQgZm9yIHRoZSBnZW5lcmF0ZSBjaGFydFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2FkZENoYXJ0UmFuZ2UoaWQsIHJhbmdlKSB7XHJcbiAgY29uc3QgZ3JpZCA9IGd3X2dldEdyaWQoaWQpXHJcbiAgY29uc3Qgb3B0aW9ucyA9IGdyaWQub3B0aW9uc1xyXG4gIGNvbnN0IHByID0gZGVlcFBhcnNlSnNvbihKU09OLnN0cmluZ2lmeShyYW5nZSkpXHJcblxyXG4gIHByLmNlbGxSYW5nZSA9IGd3X3BhcnNlQWRkQ2VsbFJhbmdlKG9wdGlvbnMsIHByLmNlbGxSYW5nZSlcclxuXHJcbiAgY29uc3QgcmVmID0gb3B0aW9ucy5hcGkuY3JlYXRlUmFuZ2VDaGFydChwcilcclxuICBjb25zdCB1dWlkID0gZ3dfdXVpZCgpXHJcblxyXG4gIGdyaWQuY3JlYXRlZF9jaGFydHMgPSBncmlkLmNyZWF0ZWRfY2hhcnRzIHx8IHt9XHJcbiAgZ3JpZC5jcmVhdGVkX2NoYXJ0c1t1dWlkXSA9IHJlZlxyXG5cclxuICByZXR1cm4gdXVpZFxyXG59XHJcblxyXG4vKipcclxuICogRGVzdHJveSBjcmVhdGVkIGNoYXJ0c1xyXG4gKlxyXG4gKiBEZXN0cm95IGFscmVhZHkgY3JlYXRlZCBjaGFydCBieSBpZCBvciBhbGwgY3JlYXRlZCBjaGFydHNcclxuICogd2hlbiB0aGUgYHV1aWRgIGlzIG9taXR0ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IHV1aWQgVGhlIGNoYXJ0J3MgaWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19kZXN0cm95Q2hhcnQoaWQsIHV1aWQpIHtcclxuICBjb25zdCBncmlkID0gZ3dfZ2V0R3JpZChpZClcclxuXHJcbiAgaWYgKHV1aWQpIHtcclxuICAgIGlmIChcclxuICAgICAgZ3JpZC5oYXNPd25Qcm9wZXJ0eSgnY3JlYXRlZF9jaGFydHMnKSAmJlxyXG4gICAgICBncmlkLmNyZWF0ZWRfY2hhcnRzLmhhc093blByb3BlcnR5KHV1aWQpXHJcbiAgICApIHtcclxuICAgICAgZ3JpZC5jcmVhdGVkX2NoYXJ0c1t1dWlkXS5kZXN0cm95Q2hhcnQoKVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoZ3JpZC5oYXNPd25Qcm9wZXJ0eSgnY3JlYXRlZF9jaGFydHMnKSkge1xyXG4gICAgICBmb3IgKGNvbnN0IGkgaW4gZ3JpZC5jcmVhdGVkX2NoYXJ0cykge1xyXG4gICAgICAgIGlmIChncmlkLmNyZWF0ZWRfY2hhcnRzLmhhc093blByb3BlcnR5KGkpKSB7XHJcbiAgICAgICAgICBjb25zdCBjaGFydCA9IGdyaWQuY3JlYXRlZF9jaGFydHNbaV1cclxuICAgICAgICAgIGNoYXJ0LmRlc3Ryb3lDaGFydCgpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBCYXNpcy5BZ0dyaWRDb21wb25lbnRzLmNvbT5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ3dfZ2V0R3JpZCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19leGVjdXRlRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24nXHJcbmNvbnN0IHsgZGVlcFBhcnNlSnNvbiB9ID0gcmVxdWlyZSgnZGVlcC1wYXJzZS1qc29uJylcclxuXHJcbi8qKlxyXG4gKiBFeHRlbmQgdGhlIGNvbHVtbiBkZWZpbml0aW9uc1xyXG4gKlxyXG4gKiBFeHRlbmQgdGhlIGNvbHVtbiBkZWZpbml0aW9ucyB3aXRoIG9wdGlvbnMgd2hpY2ggY2FuIG5vdCBiZSBoYW5kbGVkIGluIEJCalxyXG4gKiAoZXg6IGF0dGFjaGluZyBjYWxsYmFja3MpXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGRlZmluaXRpb25zIGFycmF5IG9mIGNvbHVtbiBkZWZpbml0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2V4dGVuZENvbHVtbkRlZmluaXRpb25zKGRlZmluaXRpb25zKSB7XHJcbiAgZm9yIChsZXQgaSBpbiBkZWZpbml0aW9ucykge1xyXG4gICAgY29uc3QgZGVmID0gZGVmaW5pdGlvbnNbaV1cclxuICAgIGRlZi5jb2xJZCA9IFN0cmluZyhkZWYuY29sSWQpXHJcbiAgICBkZWYuZmllbGQgPSBTdHJpbmcoZGVmLmZpZWxkKVxyXG5cclxuICAgIGRlZi5jaGVja2JveFNlbGVjdGlvbiA9IGRlZi5jaGVja2JveFNlbGVjdGlvbiB8fCBnd19pc1Nob3dTZWxlY3Rpb25DaGVja2JveFxyXG4gICAgZGVmLmhlYWRlckNoZWNrYm94U2VsZWN0aW9uID1cclxuICAgICAgZGVmLmhlYWRlckNoZWNrYm94U2VsZWN0aW9uIHx8IGd3X2lzSGVhZGVyQ2hlY2tib3hTZWxlY3Rpb25cclxuXHJcbiAgICBjb25zdCB0b29sdGlwVmFsdWVHZXR0ZXJFeHByZXNzaW9uID0gZGVmLnRvb2x0aXBWYWx1ZUdldHRlclxyXG4gICAgaWYgKHRvb2x0aXBWYWx1ZUdldHRlckV4cHJlc3Npb24pIHtcclxuICAgICAgZGVmLnRvb2x0aXBWYWx1ZUdldHRlciA9IHBhcmFtcyA9PlxyXG4gICAgICAgIGd3X2V4ZWN1dGVFeHByZXNzaW9uKHRvb2x0aXBWYWx1ZUdldHRlckV4cHJlc3Npb24sIHBhcmFtcylcclxuICAgIH1cclxuXHJcbiAgICBkZWYudG9vbHRpcENvbXBvbmVudCA9ICdIVE1MVG9vbHRpcCdcclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICBpZiAoZGVmLmhhc093blByb3BlcnR5KCdlZGl0YWJsZScpICYmIHR5cGVvZiBkZWYuZWRpdGFibGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnN0IGVkaXRhYmxlID0gZGVmLmVkaXRhYmxlXHJcbiAgICAgIGRlZi5lZGl0YWJsZSA9IHBhcmFtcyA9PiBnd19leGVjdXRlRXhwcmVzc2lvbihlZGl0YWJsZSwgcGFyYW1zKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcclxuICAgIGlmIChkZWYuaGFzT3duUHJvcGVydHkoJ3Jvd1NwYW4nKSAmJiB0eXBlb2YgZGVmLnJvd1NwYW4gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnN0IHJvd1NwYW4gPSBkZWYucm93U3BhblxyXG4gICAgICBkZWYucm93U3BhbiA9IHBhcmFtcyA9PiBnd19leGVjdXRlRXhwcmVzc2lvbihyb3dTcGFuLCBwYXJhbXMpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xyXG4gICAgaWYgKGRlZi5oYXNPd25Qcm9wZXJ0eSgnY29sU3BhbicpICYmIHR5cGVvZiBkZWYuY29sU3BhbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgY29uc3QgY29sU3BhbiA9IGRlZi5jb2xTcGFuXHJcbiAgICAgIGRlZi5jb2xTcGFuID0gcGFyYW1zID0+IGd3X2V4ZWN1dGVFeHByZXNzaW9uKGNvbFNwYW4sIHBhcmFtcylcclxuICAgIH1cclxuXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICBpZiAoZGVmLmhhc093blByb3BlcnR5KCdjaGlsZHJlbicpKSB7XHJcbiAgICAgIGd3X2V4dGVuZENvbHVtbkRlZmluaXRpb25zKGRlZi5jaGlsZHJlbilcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgdGhlIGNvbHVtbiBkZWZpbml0aW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGdyaWQgaWRcclxuICogQHBhcmFtIHtBcnJheX0gZGVmaW5pdGlvbnMgYXJyYXkgb2YgY29sdW1uIGRlZmluaXRpb25zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2V0Q29sdW1uRGVmaW5pdGlvbnMoaWQsIGRlZmluaXRpb25zKSB7XHJcbiAgY29uc3QgZ3JpZCA9IGd3X2dldEdyaWQoaWQpXHJcbiAgY29uc3QgZGVlcFBhcnNlZERlZmluaXRpb25zID0gZGVlcFBhcnNlSnNvbihKU09OLnN0cmluZ2lmeShkZWZpbml0aW9ucykpXHJcblxyXG4gIGd3X2V4dGVuZENvbHVtbkRlZmluaXRpb25zKGRlZXBQYXJzZWREZWZpbml0aW9ucylcclxuXHJcbiAgZ3JpZC5vcHRpb25zLmFwaS5zZXRDb2x1bW5EZWZzKGRlZXBQYXJzZWREZWZpbml0aW9ucylcclxuICBncmlkLm9wdGlvbnMuY29sdW1uRGVmcyA9IGRlZXBQYXJzZWREZWZpbml0aW9uc1xyXG59XHJcblxyXG4vKipcclxuICogTWFrZSB0aGUgY3VycmVudGx5IHZpc2libGUgY29sdW1ucyBmaXQgdGhlIHNjcmVlblxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdGhlIHdpZHRoIHRvIHVzZSB0byBmaXQgYWxsIGNvbHVtbnMgaW5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zaXplQ29sdW1uc1RvRml0KGlkLCB3aWR0aCkge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcbiAgY29uc3QgYXBpID0gb3B0aW9ucy5hcGlcclxuICBjb25zdCBjb2x1bW5zQVBJID0gb3B0aW9ucy5jb2x1bW5BcGlcclxuICBpZiAod2lkdGgpIHtcclxuICAgIGNvbHVtbnNBUEkuc2l6ZUNvbHVtbnNUb0ZpdChOdW1iZXIod2lkdGgpKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBhcGkuc2l6ZUNvbHVtbnNUb0ZpdCgpXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogV29yayBvdXQgdGhlIGJlc3Qgd2lkdGggdG8gZml0IHRoZSBjb250ZW50cyBvZiB0aGUgY2VsbHMgaW4gdGhlIGNvbHVtbi5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtCb29sZWFufSBbc2tpcEhlYWRlcj1mYWxzZV0gd2hlbiB0cnVlIGluZGljYXRlIHRoYXQgdGhlIGhlYWRlciBjb250ZW50IChoZWFkZXJOYW1lKSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgd2hlblxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYXRpbmcgdGhlIHdpZHRoIG9mIHRoZSBjb2x1bW5cclxuICogQHBhcmFtIHtBcnJheXxudWxsfSBbY29sdW1ucz1udWxsXSBhbiBhcnJheSBvZiBjb2x1bW5zIGlkcyB0byBhdXRvIHNpemUgb3IgbnVsbCB0byBhdXRvIHNpemUgYWxsIGNvbHVtbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19hdXRvU2l6ZUNvbHVtbnMoaWQsIHNraXBIZWFkZXIgPSBmYWxzZSwgY29sdW1ucyA9IG51bGwpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIGNvbnN0IGNvbHVtbnNBUEkgPSBvcHRpb25zLmNvbHVtbkFwaVxyXG5cclxuICBpZiAoIShjb2x1bW5zICYmIGNvbHVtbnMubGVuZ3RoKSkge1xyXG4gICAgY29uc3QgYWxsQ29sdW1uSWRzID0gW11cclxuXHJcbiAgICBjb2x1bW5zQVBJLmdldEFsbENvbHVtbnMoKS5mb3JFYWNoKGNvbHVtbiA9PiB7XHJcbiAgICAgIGFsbENvbHVtbklkcy5wdXNoKGNvbHVtbi5jb2xJZClcclxuICAgIH0pXHJcblxyXG4gICAgY29sdW1uc0FQSS5hdXRvU2l6ZUNvbHVtbnMoYWxsQ29sdW1uSWRzLCBCb29sZWFuKHNraXBIZWFkZXIpKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBjb2x1bW5zQVBJLmF1dG9TaXplQ29sdW1ucyhjb2x1bW5zLCBCb29sZWFuKHNraXBIZWFkZXIpKVxyXG4gIH1cclxufVxyXG4vKipcclxuICogRW5zdXJlcyB0aGUgY29sdW1uIGlzIHZpc2libGUsIHNjcm9sbGluZyB0aGUgdGFibGUgaWYgbmVlZGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgIHRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtbklkICB0aGUgY29sdW1uIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZW5zdXJlQ29sdW1uVmlzaWJsZShpZCwgY29sdW1uSWQpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmFwaS5lbnN1cmVDb2x1bW5WaXNpYmxlKGNvbHVtbklkKVxyXG59XHJcblxyXG4vKipcclxuICogU2V0IENvbHVtbiBXaWR0aFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGdyaWQgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtbklkIFRoZSBjb2x1bW4gaWRcclxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSB3aWR0aCBUaGUgbmV3IGNvbHVtbiB3aWR0aFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3NldENvbHVtbldpZHRoKGlkLCBjb2x1bW5JZCwgd2lkdGgpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmNvbHVtbkFwaS5zZXRDb2x1bW5XaWR0aChjb2x1bW5JZCwgTnVtYmVyKHdpZHRoKSlcclxufVxyXG5cclxuLyoqXHJcbiAqIFBpbiBDb2x1bW5cclxuICpcclxuICogUGluIGEgY29sdW1uIHRvIGEgc3BlY2lmaWMgZGlyZWN0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgZ3JpZCBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1uSWQgVGhlIGNvbHVtbiBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcGluIFRoZSBwaW4gZGlyZWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfcGluQ29sdW1uKGlkLCBjb2x1bW5JZCwgcGluKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5jb2x1bW5BcGkuc2V0Q29sdW1uUGlubmVkKGNvbHVtbklkLCBwaW4pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNb3ZlIENvbHVtblxyXG4gKlxyXG4gKiBNb3ZlIGNvbHVtbiB0byBhIHNwZWNpZmljIGluZGV4XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgZ3JpZCBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1uSWQgVGhlIGNvbHVtbiBpZFxyXG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHRvSW5kZXggVGhlIG5ldyBjb2x1bW4gaW5kZXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19tb3ZlQ29sdW1uKGlkLCBjb2x1bW5JZCwgdG9JbmRleCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29sdW1uQXBpLm1vdmVDb2x1bW4oY29sdW1uSWQsIHRvSW5kZXgpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaG93IC8gSGlkZSBzZWxlY3Rpb24gY2hlY2tib3ggYmFzZWQgb24gdGhlIGZpcnN0IGNvbHVtblxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gbWFrZSBzdXJlIHRoYXQgdGhlIHNlbGVjdGlvbiBjaGVja2JveCBpcyBhbHdheXMgc2hvd24gb24gdGhlXHJcbiAqIGZpcnN0IGNvbHVtblxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1cclxuICpcclxuICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSB3aGVuIGZpcnN0IGNvbHVtbiAsIGZhbHNlIGlmIG5vdCB0aGUgZmlyc3QgY29sdW1uIG9yIGlmIHRoZVxyXG4gKiAgICAgICAgICAgICAgICAgICBncmlkJ3MgYENvbnRleHQuc2hvd1NlbGVjdGlvbkNoZWNrYm94YCBpcyBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2lzU2hvd1NlbGVjdGlvbkNoZWNrYm94KHBhcmFtKSB7XHJcbiAgaWYgKCFwYXJhbS5jb250ZXh0LnNob3dTZWxlY3Rpb25DaGVja2JveCkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBjb25zdCBjb2x1bW5zID0gcGFyYW0uY29sdW1uQXBpLmdldEFsbERpc3BsYXllZENvbHVtbnMoKVxyXG5cclxuICByZXR1cm4gY29sdW1uc1swXSA9PT0gcGFyYW0uY29sdW1uXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaG93IC8gSGlkZSBoZWFkZXIgc2VsZWN0aW9uIGNoZWNrYm94IGJhc2VkIG9uIHRoZSBmaXJzdCBjb2x1bW5cclxuICpcclxuICogVGhlIGZ1bmN0aW9uIG1ha2Ugc3VyZSB0aGF0IHRoZSBoZWFkZXIgc2VsZWN0aW9uIGNoZWNrYm94IGlzIGFsd2F5cyBzaG93biBvbiB0aGVcclxuICogZmlyc3QgY29sdW1uXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbVxyXG4gKlxyXG4gKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIHdoZW4gZmlyc3QgY29sdW1uICwgZmFsc2UgaWYgbm90IHRoZSBmaXJzdCBjb2x1bW4gb3IgaWYgdGhlXHJcbiAqICAgICAgICAgICAgICAgICAgIGdyaWQncyBgQ29udGV4dC5zaG93SGVhZGVyU2VsZWN0aW9uQ2hlY2tib3hgIGlzIGZhbHNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfaXNIZWFkZXJDaGVja2JveFNlbGVjdGlvbihwYXJhbSkge1xyXG4gIGNvbnN0IGNvbnRleHQgPSBwYXJhbS5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmdyaWRPcHRpb25zLmNvbnRleHRcclxuXHJcbiAgaWYgKCFjb250ZXh0LnNob3dIZWFkZXJTZWxlY3Rpb25DaGVja2JveCkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBjb25zdCBjb2x1bW5zID0gcGFyYW0uY29sdW1uQXBpLmdldEFsbERpc3BsYXllZENvbHVtbnMoKVxyXG5cclxuICByZXR1cm4gY29sdW1uc1swXSA9PT0gcGFyYW0uY29sdW1uXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbmFibGUgcm93IGdyb3VwaW5nIGZvciBjb2x1bW5zXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCB0aGUgZ3JpZCBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1ucyAgYSBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGNvbHVtbnNcclxuICogQHBhcmFtIHtCb29sZWFufSBzZXQgIFdoZW4gdHJ1ZSAsIGBzZXRSb3dHcm91cENvbHVtbnNgIHdpbGwgYmUgdXNlZCAsIGBhZGRSb3dHcm91cENvbHVtbnNgIG90aGVyd2lzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2FkZFJvd0dyb3VwQ29sdW1uKGlkLCBjb2x1bW5zLCBzZXQpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmNvbHVtbkFwaVtcclxuICAgIHNldCA/ICdzZXRSb3dHcm91cENvbHVtbnMnIDogJ2FkZFJvd0dyb3VwQ29sdW1ucydcclxuICBdKGNvbHVtbnMuc3BsaXQoJywnKS5tYXAoaSA9PiBpLnRyaW0oKSkpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXNhYmxlIHJvdyBncm91cGluZyBmb3IgY29sdW1uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgdGhlIGdyaWQgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtbnMgIGEgY29tbWEgc2VwYXJhdGVkIHN0cmluZyBvZiBjb2x1bW5zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfcmVtb3ZlUm93R3JvdXBDb2x1bW4oaWQsIGNvbHVtbnMpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmNvbHVtbkFwaS5yZW1vdmVSb3dHcm91cENvbHVtbnMoXHJcbiAgICBjb2x1bW5zLnNwbGl0KCcsJykubWFwKGkgPT4gaS50cmltKCkpXHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZ2V0UGl2b3RNb2RlKGlkKSB7XHJcbiAgcmV0dXJuIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29sdW1uQXBpLmlzUGl2b3RNb2RlKClcclxufVxyXG5cclxuLyoqXHJcbiAqIEVuYWJsZSAvIGRpc2JhbGUgcGl2b3QgbW9kZVxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgdGhlIGdyaWQgaWRcclxuICogQHBhcmFtIHtCb29sZWFufSBtb2RlIHdoZW4gdHJ1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3NldFBpdm90TW9kZShpZCwgbW9kZSkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29sdW1uQXBpLnNldFBpdm90TW9kZSghIU51bWJlcihtb2RlKSlcclxufVxyXG5cclxuLyoqXHJcbiAqIEVuYWJsZSBwaXZvdCBmb3IgY29sdW1uc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgdGhlIGdyaWQgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbHVtbnMgIGEgY29tbWEgc2VwYXJhdGVkIHN0cmluZyBvZiBjb2x1bW5zXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2V0ICBXaGVuIHRydWUgLCBgYWRkUGl2b3RDb2x1bW5zYCB3aWxsIGJlIHVzZWQgLCBgc2V0UGl2b3RDb2x1bW5zYCBvdGhlcndpc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19hZGRQaXZvdENvbHVtbnMoaWQsIGNvbHVtbnMsIHNldCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29sdW1uQXBpW3NldCA/ICdzZXRQaXZvdENvbHVtbnMnIDogJ2FkZFBpdm90Q29sdW1ucyddKFxyXG4gICAgY29sdW1ucy5zcGxpdCgnLCcpLm1hcChpID0+IGkudHJpbSgpKVxyXG4gIClcclxufVxyXG5cclxuLyoqXHJcbiAqIERpc2FibGUgcGl2b3QgZm9yIGNvbHVtbnNcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2x1bW5zICBhIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcgb2YgY29sdW1uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3JlbW92ZVBpdm90Q29sdW1ucyhpZCwgY29sdW1ucykge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29sdW1uQXBpLnJlbW92ZVBpdm90Q29sdW1ucyhcclxuICAgIGNvbHVtbnMuc3BsaXQoJywnKS5tYXAoaSA9PiBpLnRyaW0oKSlcclxuICApXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBFbmFibGUgdmFsdWUgZm9yIGNvbHVtbnNcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2x1bW5zICBhIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcgb2YgY29sdW1uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2FkZFZhbHVlQ29sdW1ucyhpZCwgY29sdW1ucykge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29sdW1uQXBpLmFkZFZhbHVlQ29sdW1ucyhcclxuICAgIGNvbHVtbnMuc3BsaXQoJywnKS5tYXAoaSA9PiBpLnRyaW0oKSlcclxuICApXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXNhYmxlIHZhbHVlIGZvciBjb2x1bW5zXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCB0aGUgZ3JpZCBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1ucyAgYSBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGNvbHVtbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19yZW1vdmVWYWx1ZUNvbHVtbnMoaWQsIGNvbHVtbnMpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmNvbHVtbkFwaS5yZW1vdmVWYWx1ZUNvbHVtbnMoXHJcbiAgICBjb2x1bW5zLnNwbGl0KCcsJykubWFwKGkgPT4gaS50cmltKCkpXHJcbiAgKVxyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjb2x1bW4gc29ydGluZyBtb2RlbFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgdGhlIGdyaWQgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IG1vZGVsIG1vZGVsIGFzIGpzb24gYXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRTb3J0TW9kZWwoaWQsIG1vZGVsKSB7XHJcbiAgY29uc3QgYXNBcnJheSA9IEpTT04ucGFyc2UobW9kZWwpXHJcbiAgY29uc3Qgb3B0aW9ucyA9IGd3X2dldEdyaWQoaWQpLm9wdGlvbnNcclxuICBjb25zdCBwYXJzZWRNb2RlbCA9IFtdXHJcbiAgYXNBcnJheS5mb3JFYWNoKGkgPT4ge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaSkge1xyXG4gICAgICBwYXJzZWRNb2RlbC5wdXNoKHtcclxuICAgICAgICBjb2xJZDoga2V5LFxyXG4gICAgICAgIHNvcnQ6IGlba2V5XSxcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBvcHRpb25zLmNvbHVtbkFwaS5hcHBseUNvbHVtblN0YXRlKHtcclxuICAgIHN0YXRlOiBwYXJzZWRNb2RlbCxcclxuICAgIGFwcGx5T3JkZXI6IGZhbHNlLFxyXG4gICAgZGVmYXVsdFN0YXRlOiBvcHRpb25zLmNvbHVtbkFwaS5nZXRDb2x1bW5TdGF0ZSgpLFxyXG4gIH0pXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZWRyYXdzIHRoZSBoZWFkZXIuIFVzZWZ1bCBpZiBhIGNvbHVtbiBuYW1lIGNoYW5nZXMsXHJcbiAqIG9yIHNvbWV0aGluZyBlbHNlIHRoYXQgY2hhbmdlcyBob3cgdGhlIGNvbHVtbiBoZWFkZXIgaXMgZGlzcGxheWVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgZ3JpZCdzIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfcmVmcmVzaEhlYWRlcihpZCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLnJlZHJhd1Jvd3MoKVxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIGNvbHVtbiB2aWFiaWxpdHlcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sdW1ucyAgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBjb2x1bW4gaWRzXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdmlzaWJsZSB0cnVlIHRvIG1ha2UgdGhlIGNvbHVtbnMgdmlzaWJsZSAsIGZhbHNlIHRvIGhpZGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRDb2x1bW5WaXNpYmxlKGlkLCBjb2x1bW5zLCB2aXNpYmxlKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5jb2x1bW5BcGkuc2V0Q29sdW1uc1Zpc2libGUoXHJcbiAgICBjb2x1bW5zLnNwbGl0KCcsJyksXHJcbiAgICBCb29sZWFuKHZpc2libGUpXHJcbiAgKVxyXG59XHJcblxyXG4vKipcclxuICogQWxpZ24gdHdvIGdyaWQgdG9nZXRoZXJcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBjdXJyZW50IGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZ3JpZElkIFRoZSB0YXJnZXQgZ3JpZCdzIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfYWRkQWxpZ25lZEdyaWQoaWQsIGdyaWRJZCkge1xyXG4gIGNvbnN0IGN1cnJlbnRHcmlkT3B0aW9uID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIGNvbnN0IHJlZ2lzdGVyID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0R3JpZE9wdGlvbiA9IGd3X2dldEdyaWQoZ3JpZElkKS5vcHRpb25zXHJcbiAgICBjdXJyZW50R3JpZE9wdGlvbi5hbGlnbmVkR3JpZHMucHVzaCh0YXJnZXRHcmlkT3B0aW9uKVxyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIHJlZ2lzdGVyKClcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGN1cnJlbnRHcmlkT3B0aW9uLmFsaWduZWRHcmlkcy5wdXNoKGdyaWRJZClcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGAke2dyaWRJZH0tcmVhZHlgLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluZGV4T2YgPSBjdXJyZW50R3JpZE9wdGlvbi5hbGlnbmVkR3JpZHMuaW5kZXhPZihncmlkSWQpXHJcbiAgICAgIGlmIChpbmRleE9mID4gLTEpIHtcclxuICAgICAgICBjdXJyZW50R3JpZE9wdGlvbi5hbGlnbmVkR3JpZHMuc3BsaWNlKGluZGV4T2YsIDEpXHJcbiAgICAgICAgcmVnaXN0ZXIoKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBhbGlnbmVkIGdyaWRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgY3VycmVudCBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGdyaWRJZCBUaGUgdGFyZ2V0IGdyaWQncyBpZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3JlbW92ZUFsaWduZWRHcmlkKGlkLCBncmlkSWQpIHtcclxuICBjb25zdCBjdXJyZW50R3JpZE9wdGlvbiA9IGd3X2dldEdyaWQoaWQpLm9wdGlvbnNcclxuICBjb25zdCBhbGlnbmVkR3JpZHMgPSBjdXJyZW50R3JpZE9wdGlvbi5hbGlnbmVkR3JpZHNcclxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGFsaWduZWRHcmlkcy5sZW5ndGg7IHgrKykge1xyXG4gICAgY29uc3QgZ3JpZCA9IGFsaWduZWRHcmlkc1t4XVxyXG4gICAgaWYgKFxyXG4gICAgICAodHlwZW9mIGdyaWQgPT09ICdzdHJpbmcnICYmIGdyaWQgPT09IGdyaWRJZCkgfHxcclxuICAgICAgZ3JpZC5jb250ZXh0LmlkID09PSBncmlkSWRcclxuICAgICkge1xyXG4gICAgICBhbGlnbmVkR3JpZHMuc3BsaWNlKHgsIDEpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ3dfZ2V0R3JpZCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZSBjb250ZXh0XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgVGhlIGNvbnRleHQncyBrZXkgdG8gdXBkYXRlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSAgVGhlIG5ldyBjb250ZXh0J3MgdmFsdWVcclxuICovXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBnd19sZWdhY3lVcGRhdGVDb250ZXh0KGlkLCBrZXksIHZhbHVlKSB7XHJcbi8vIFx0Z3dfZ2V0R3JpZChpZClcclxuLy8gXHRcdC5vcHRpb25zXHJcbi8vIFx0XHQuY29udGV4dFtrZXldID0gSlNPTi5wYXJzZSh2YWx1ZSk7XHJcbi8vIH1cclxuXHJcbi8qKlxyXG4gKiBVcGRhdGUgY29udGV4dFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCBUaGUgbmV3IGNvbnRleHQgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfdXBkYXRlQ29udGV4dChpZCwgY29udGV4dCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29udGV4dCA9IGNvbnRleHRcclxufVxyXG4iLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAQmFzaXMuQWdHcmlkQ29tcG9uZW50cy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vaW5pdC5qcydcclxuZXhwb3J0ICogZnJvbSAnLi9jb2x1bW5zLmpzJ1xyXG5leHBvcnQgKiBmcm9tICcuL3Jvd3MuanMnXHJcbmV4cG9ydCAqIGZyb20gJy4vY2VsbHMuanMnXHJcbmV4cG9ydCAqIGZyb20gJy4vc3RhdGUuanMnXHJcbmV4cG9ydCAqIGZyb20gJy4vdG9vbHBhbmVsLmpzJ1xyXG5leHBvcnQgKiBmcm9tICcuL3N0YXR1c2Jhci5qcydcclxuZXhwb3J0ICogZnJvbSAnLi9vdmVybGF5cy5qcydcclxuZXhwb3J0ICogZnJvbSAnLi9jb250ZXh0LmpzJ1xyXG5leHBvcnQgKiBmcm9tICcuL2NoYXJ0cy5qcydcclxuZXhwb3J0ICogZnJvbSAnLi9qc3MuanMnXHJcbmV4cG9ydCAqIGZyb20gJy4vdXRpbGl0aWVzLmpzJ1xyXG4iLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAQmFzaXMuQWdHcmlkQ29tcG9uZW50cy5jb20+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGd3X2V4dGVuZENvbHVtbkRlZmluaXRpb25zIH0gZnJvbSAnLi9jb2x1bW5zJ1xyXG5pbXBvcnQgeyBnd19uYXZpZ2F0ZVRvTmV4dFJvdywgZ3dfZ2V0Um93Tm9kZUlkIH0gZnJvbSAnLi9yb3dzJ1xyXG5pbXBvcnQgeyBnd19nZXRDb250ZXh0TWVudSB9IGZyb20gJy4vbWVudXMnXHJcbmltcG9ydCB7IGd3X2dldENoYXJ0VG9vbGJhckl0ZW1zIH0gZnJvbSAnLi9jaGFydHMnXHJcbmltcG9ydCB7IGd3X2dldERvY3VtZW50LCBnd19nZXRXaW5kb3csIGd3X2FkZEdyaWQgfSBmcm9tICcuL3V0aWxpdGllcydcclxuaW1wb3J0IHtcclxuICBnd19vblJvd0NsaWNrZWQsXHJcbiAgZ3dfb25Sb3dEb3VibGVDbGlja2VkLFxyXG4gIGd3X29uU2VsZWN0aW9uQ2hhbmdlZCxcclxuICBnd19vblJhbmdlU2VsZWN0aW9uQ2hhbmdlZCxcclxuICBnd19vbkNlbGxDbGlja0V2ZW50LFxyXG4gIGd3X29uQ2VsbEVkaXRpbmdFdmVudCxcclxuICBnd19vblJvd0VkaXRpbmdFdmVudCxcclxuICBnd19vblJlYWR5RXZlbnQsXHJcbiAgZ3dfb25GaWx0ZXJDaGFuZ2VkLFxyXG4gIGd3X2RlYm91bmNlLFxyXG59IGZyb20gJ2V2ZW50cydcclxuaW1wb3J0IHRlbXBsYXRlIGZyb20gJ2xvZGFzaC1lcy90ZW1wbGF0ZSdcclxuaW1wb3J0IEhUTUxUb29sdGlwIGZyb20gJy4uL2NvbXBvbmVudHMvSFRNTFRvb2x0aXAuanMnXHJcbmltcG9ydCBTdWdnZXN0aW9uRWRpdG9yIGZyb20gJy4uL2NvbXBvbmVudHMvU3VnZ2VzdGlvbkVkaXRvci5qcydcclxuXHJcbmNvbnN0IHsgZGVlcFBhcnNlSnNvbiB9ID0gcmVxdWlyZSgnZGVlcC1wYXJzZS1qc29uJylcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19pbml0KG9wdGlvbnMsIGxpY2Vuc2UsIGRhdGEpIHtcclxuICBpZiAoYWdHcmlkLkxpY2Vuc2VNYW5hZ2VyICYmIGxpY2Vuc2UpIHtcclxuICAgIGFnR3JpZC5MaWNlbnNlTWFuYWdlci5zZXRMaWNlbnNlS2V5KGxpY2Vuc2UpXHJcbiAgfVxyXG5cclxuICBjb25zdCBpZCA9IG9wdGlvbnMuY29udGV4dC5pZFxyXG4gIGxldCBjb250YWluZXIgPSBnd19nZXREb2N1bWVudCgpLmdldEVsZW1lbnRCeUlkKGlkKVxyXG4gIGNvbnN0IGNvbnRhaW5lckNsb25lID0gY29udGFpbmVyLmNsb25lTm9kZSh0cnVlKVxyXG5cclxuICBjb250YWluZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoY29udGFpbmVyQ2xvbmUsIGNvbnRhaW5lcilcclxuICBjb250YWluZXIgPSBjb250YWluZXJDbG9uZVxyXG4gIC8vIHdlIG1ha2UgdGhlIGdyaWQgb3B0aW9ucyBhdmFpbGFibGUgYXMgc29vbiBhcyBwb3NzaWJsZVxyXG4gIGNvbnN0IGdyaWQgPSBnd19hZGRHcmlkKGlkLCB7XHJcbiAgICBjb250YWluZXIsXHJcbiAgICBvcHRpb25zLFxyXG4gIH0pXHJcblxyXG4gIC8vIFRPRE86IHVzZSBhZyBncmlkIGRlc3Ryb3lcclxuICBjb250YWluZXIuaW5uZXJIVE1MID0gJydcclxuXHJcbiAgY29uc3QgcGFyc2VkT3B0aW9ucyA9IGd3X3BhcnNlT3B0aW9ucyhvcHRpb25zKVxyXG4gIHBhcnNlZE9wdGlvbnMucm93RGF0YSA9IGRhdGFcclxuXHJcbiAgY29uc3QgaW5zdGFuY2UgPSBuZXcgYWdHcmlkLkdyaWQoY29udGFpbmVyLCBwYXJzZWRPcHRpb25zKVxyXG4gIGdyaWQuaW5zdGFuY2UgPSBpbnN0YW5jZVxyXG4gIGdyaWQub3B0aW9ucyA9IHBhcnNlZE9wdGlvbnNcclxuXHJcbiAgY29uc29sZS5sb2coXHJcbiAgICBgJWMgR3JpZCBbJHtpZH1dIHNldHRpbmdzIDogYCxcclxuICAgICdiYWNrZ3JvdW5kOiAjMjIyOyBjb2xvcjogI2JhZGE1NScsXHJcbiAgICBwYXJzZWRPcHRpb25zXHJcbiAgKVxyXG59XHJcblxyXG4vKipcclxuICogUGFyc2UgT3B0aW9uc1xyXG4gKlxyXG4gKiBQYXJzZSB0aGUgZ3JpZCBvcHRpb25zIGFuZCByZXR1cm5cclxuICogYW4gb2JqZWN0IHdoaWNoIGNhbiBiZSBwYXNzZWQgdG8gdGhlIGdyaWRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgR3JpZCBvcHRpb25zIGFzIEpzb24gT2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4ge09iamVjdH0gb3B0aW9ucyBvYmplY3RcclxuICovXHJcbmZ1bmN0aW9uIGd3X3BhcnNlT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgY29uc3QgZGVlcFBhcnNlZE9wdGlvbnMgPSBkZWVwUGFyc2VKc29uKEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKVxyXG4gIGNvbnN0IGlkID0gZGVlcFBhcnNlZE9wdGlvbnMuY29udGV4dC5pZFxyXG4gIGNvbnN0IGdldERhdGFQYXRoVGVtcGxhdGUgPSBkZWVwUGFyc2VkT3B0aW9ucy5jb250ZXh0LmdldERhdGFQYXRoIHx8ICcnXHJcbiAgLy8gVE9ETzogZG8gd2UgbmVlZCB0byBjb250cm9sIHRoaXMgc2V0dGluZyBmcm9tIEJCaiA/XHJcbiAgY29uc3QgZGVib3VuY2VEdXJhdGlvbiA9IDI1MFxyXG4gIGNvbnN0IGZpbmFsT3B0aW9ucyA9IHtcclxuICAgIC4uLmRlZXBQYXJzZWRPcHRpb25zLFxyXG4gICAgLi4ue1xyXG4gICAgICBnZXREb2N1bWVudDogKCkgPT4gZ3dfZ2V0RG9jdW1lbnQoKSxcclxuICAgICAgb25DZWxsRWRpdGluZ1N0YXJ0ZWQ6IGUgPT4ge1xyXG4gICAgICAgIGd3X29uQ2VsbEVkaXRpbmdFdmVudChpZCwgZSlcclxuICAgICAgfSxcclxuICAgICAgb25DZWxsRWRpdGluZ1N0b3BwZWQ6IGUgPT4ge1xyXG4gICAgICAgIGd3X29uQ2VsbEVkaXRpbmdFdmVudChpZCwgZSlcclxuICAgICAgfSxcclxuICAgICAgb25DZWxsVmFsdWVDaGFuZ2VkOiBlID0+IHtcclxuICAgICAgICBnd19vbkNlbGxFZGl0aW5nRXZlbnQoaWQsIGUpXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUm93RWRpdGluZ1N0YXJ0ZWQ6IGUgPT4ge1xyXG4gICAgICAgIGd3X29uUm93RWRpdGluZ0V2ZW50KGlkLCBlKVxyXG4gICAgICB9LFxyXG4gICAgICBvblJvd1ZhbHVlQ2hhbmdlZDogZSA9PiB7XHJcbiAgICAgICAgZ3dfb25Sb3dFZGl0aW5nRXZlbnQoaWQsIGUpXHJcbiAgICAgIH0sXHJcbiAgICAgIG9uUm93RWRpdGluZ1N0b3BwZWQ6IGUgPT4ge1xyXG4gICAgICAgIGd3X29uUm93RWRpdGluZ0V2ZW50KGlkLCBlKVxyXG4gICAgICB9LFxyXG4gICAgICBvbkdyaWRSZWFkeTogZSA9PiB7XHJcbiAgICAgICAgZ3dfb25SZWFkeUV2ZW50KGlkLCBlKVxyXG4gICAgICB9LFxyXG4gICAgICBvbkZpbHRlckNoYW5nZWQ6IGUgPT4ge1xyXG4gICAgICAgIGd3X29uRmlsdGVyQ2hhbmdlZChpZCwgZSlcclxuICAgICAgfSxcclxuICAgICAgZ2V0Um93SWQ6IGRhdGEgPT4gZ3dfZ2V0Um93Tm9kZUlkKGlkLCBkYXRhKSxcclxuICAgICAgZ2V0Q29udGV4dE1lbnVJdGVtczogcGFyYW1zID0+IGd3X2dldENvbnRleHRNZW51KGlkLCBwYXJhbXMpLFxyXG4gICAgICBnZXRDaGFydFRvb2xiYXJJdGVtczogZ3dfZ2V0Q2hhcnRUb29sYmFySXRlbXMsXHJcbiAgICAgIHBvcHVwUGFyZW50OiBnd19nZXREb2N1bWVudCgpLmJvZHksXHJcbiAgICAgIG9uUm93RG91YmxlQ2xpY2tlZDogZ3dfZGVib3VuY2UoZ3dfb25Sb3dEb3VibGVDbGlja2VkLCBkZWJvdW5jZUR1cmF0aW9uKSxcclxuICAgICAgb25Sb3dDbGlja2VkOiBnd19kZWJvdW5jZShnd19vblJvd0NsaWNrZWQsIGRlYm91bmNlRHVyYXRpb24pLFxyXG4gICAgICBvbkNlbGxDbGlja2VkOiBnd19kZWJvdW5jZShnd19vbkNlbGxDbGlja0V2ZW50LCBkZWJvdW5jZUR1cmF0aW9uKSxcclxuICAgICAgb25DZWxsRG91YmxlQ2xpY2tlZDogZ3dfZGVib3VuY2UoZ3dfb25DZWxsQ2xpY2tFdmVudCwgZGVib3VuY2VEdXJhdGlvbiksXHJcbiAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDogZ3dfZGVib3VuY2UoZ3dfb25TZWxlY3Rpb25DaGFuZ2VkLCBkZWJvdW5jZUR1cmF0aW9uKSxcclxuICAgICAgb25SYW5nZVNlbGVjdGlvbkNoYW5nZWQ6IGd3X2RlYm91bmNlKFxyXG4gICAgICAgIGd3X29uUmFuZ2VTZWxlY3Rpb25DaGFuZ2VkLFxyXG4gICAgICAgIGRlYm91bmNlRHVyYXRpb25cclxuICAgICAgKSxcclxuICAgICAgY29tcG9uZW50czoge1xyXG4gICAgICAgIEJvb2xlYW5GaWx0ZXI6IEJhc2lzLkFnR3JpZENvbXBvbmVudHMuQm9vbGVhbkZpbHRlcixcclxuICAgICAgICBCb29sZWFuUmVuZGVyZXI6IEJhc2lzLkFnR3JpZENvbXBvbmVudHMuQm9vbGVhblJlbmRlcmVyLFxyXG4gICAgICAgIEJvb2xlYW5FZGl0b3I6IEJhc2lzLkFnR3JpZENvbXBvbmVudHMuQm9vbGVhbkVkaXRvcixcclxuICAgICAgICBOdW1iZXJFZGl0b3I6IEJhc2lzLkFnR3JpZENvbXBvbmVudHMuTnVtYmVyRWRpdG9yLFxyXG4gICAgICAgIFRleHRFZGl0b3I6IEJhc2lzLkFnR3JpZENvbXBvbmVudHMuVGV4dEVkaXRvcixcclxuICAgICAgICBEYXRlVGltZUVkaXRvcjogQmFzaXMuQWdHcmlkQ29tcG9uZW50cy5EYXRlVGltZUVkaXRvcixcclxuICAgICAgICBEYXRlVGltZUZpbHRlcjogQmFzaXMuQWdHcmlkQ29tcG9uZW50cy5EYXRlVGltZUZpbHRlcixcclxuICAgICAgICBJbWFnZVJlbmRlcmVyOiBCYXNpcy5BZ0dyaWRDb21wb25lbnRzLkltYWdlUmVuZGVyZXIsXHJcbiAgICAgICAgVGVtcGxhdGVSZW5kZXJlcjogQmFzaXMuQWdHcmlkQ29tcG9uZW50cy5UZW1wbGF0ZVJlbmRlcmVyLFxyXG4gICAgICAgIEhUTUxUb29sdGlwOiBIVE1MVG9vbHRpcCxcclxuICAgICAgICBTdWdnZXN0aW9uRWRpdG9yOiBTdWdnZXN0aW9uRWRpdG9yLFxyXG4gICAgICB9LFxyXG4gICAgICBjb250ZXh0OiB7XHJcbiAgICAgICAgLi4uZGVlcFBhcnNlZE9wdGlvbnMuY29udGV4dCxcclxuICAgICAgICAuLi57XHJcbiAgICAgICAgICBkb2N1bWVudDogZ3dfZ2V0RG9jdW1lbnQoKSxcclxuICAgICAgICAgIHdpbmRvdzogZ3dfZ2V0V2luZG93KCksXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgICAgYWxpZ25lZEdyaWRzOiBbXSxcclxuICAgIH0sXHJcbiAgfVxyXG5cclxuICBpZiAoXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICBmaW5hbE9wdGlvbnMuY29udGV4dC5oYXNPd25Qcm9wZXJ0eSgnbmF2aWdhdGVUb05leHRDZWxsJykgJiZcclxuICAgIGZpbmFsT3B0aW9ucy5jb250ZXh0Lm5hdmlnYXRlVG9OZXh0Q2VsbFxyXG4gICkge1xyXG4gICAgZmluYWxPcHRpb25zLm5hdmlnYXRlVG9OZXh0Q2VsbCA9IHBhcmFtcyA9PiB7XHJcbiAgICAgIHJldHVybiBnd19uYXZpZ2F0ZVRvTmV4dFJvdyhpZCwgcGFyYW1zKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGdldERhdGFQYXRoVGVtcGxhdGUgJiYgZmluYWxPcHRpb25zLnRyZWVEYXRhKSB7XHJcbiAgICBjb25zdCBnZXREYXRhUGF0aFRlbXBsYXRlQ29tcGxpZWQgPSB0ZW1wbGF0ZShnZXREYXRhUGF0aFRlbXBsYXRlKVxyXG4gICAgZmluYWxPcHRpb25zLmdldERhdGFQYXRoID0gZGF0YSA9PlxyXG4gICAgICBnZXREYXRhUGF0aFRlbXBsYXRlQ29tcGxpZWQoeyBkYXRhOiBkYXRhIH0pXHJcbiAgfVxyXG5cclxuICAvLyBleHRlbmQgdGhlIGNvbHVtbiBkZWZpbml0aW9uc1xyXG4gIGd3X2V4dGVuZENvbHVtbkRlZmluaXRpb25zKGZpbmFsT3B0aW9ucy5jb2x1bW5EZWZzKVxyXG5cclxuICByZXR1cm4gZmluYWxPcHRpb25zXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgJ2V4cG9zZS1sb2FkZXI/anNzIWpzcy9qc3MuanMnXHJcbmltcG9ydCB7IGd3X2dldERvY3VtZW50IH0gZnJvbSAnLi91dGlsaXRpZXMnXHJcblxyXG4vKipcclxuICogQWRkIG5ldyBzdHlsZVxyXG4gKlxyXG4gKiBBZGQgbmV3IHN0eWxlIHRvIHRoZSBkb2N1bWVudFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3IgY3NzIHNlbGVjdG9yXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBydWxlcyBKc29uIHN0cmluZyBmb3IgYW4gYXJyYXkgb2YgcnVsZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRTdHlsZShzZWxlY3RvciwgcnVsZXMpIHtcclxuICBqc3MuZm9yRG9jdW1lbnQoZ3dfZ2V0RG9jdW1lbnQoKSkuc2V0KHNlbGVjdG9yLCBKU09OLnBhcnNlKHJ1bGVzKSlcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBzdHlsZVxyXG4gKlxyXG4gKiBSZW1vdmUgYWRkZWQgc3R5bGUgZnJvbSB0aGVzIGRvY3VtZW50XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWxlY3RvciBjc3Mgc2VsZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19yZW1vdmVTdHlsZShzZWxlY3Rvcikge1xyXG4gIGpzcy5mb3JEb2N1bWVudChnd19nZXREb2N1bWVudCgpKS5yZW1vdmUoc2VsZWN0b3IpXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19nZXRHcmlkIH0gZnJvbSAnLi91dGlsaXRpZXMnXHJcbmltcG9ydCB7IGd3X3BhcnNlTm9kZUZyb21FdmVudCwgZ3dfc2VuZEV2ZW50IH0gZnJvbSAnZXZlbnRzL3V0aWxpdGllcydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRDb250ZXh0TWVudShncmlkSWQsIHBhcmFtcykge1xyXG4gIGNvbnN0IGJ1aWxkQ29udGV4dE1lbnVBY3Rpb24gPSAocGFyYW1zLCBpZCkgPT4ge1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY29uc3Qgbm9kZSA9IGd3X3BhcnNlTm9kZUZyb21FdmVudChwYXJhbXMpXHJcbiAgICAgIGNvbnN0IGNvbElkID0gcGFyYW1zLmNvbHVtbi5jb2xJZFxyXG4gICAgICBjb25zdCB2YWx1ZSA9IHBhcmFtcy52YWx1ZVxyXG5cclxuICAgICAgZ3dfc2VuZEV2ZW50KFxyXG4gICAgICAgIGd3X2dldEdyaWQoZ3JpZElkKS5vcHRpb25zLmNvbnRleHQsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdHlwZTogJ2d3LmNvbnRleHRtZW51JyxcclxuICAgICAgICAgIGRldGFpbDogSlNPTi5zdHJpbmdpZnkoeyByOiBub2RlLCBjOiBjb2xJZCwgdjogdmFsdWUsIGk6IGlkIH0pLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaWRcclxuICAgICAgKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFyc2VNZW51ID0gbWVudSA9PiB7XHJcbiAgICBtZW51LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG5cclxuICAgICAgaXRlbVsnYWN0aW9uJ10gPSBidWlsZENvbnRleHRNZW51QWN0aW9uKHBhcmFtcywgaXRlbS5pZClcclxuXHJcbiAgICAgIGlmIChpdGVtWydjc3NDbGFzc2VzJ10gJiYgIUFycmF5LmlzQXJyYXkoaXRlbVsnY3NzQ2xhc3NlcyddKSkge1xyXG4gICAgICAgIGl0ZW1bJ2Nzc0NsYXNzZXMnXSA9IGl0ZW1bJ2Nzc0NsYXNzZXMnXS5zcGxpdCgnICcpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpdGVtWydzdWJNZW51J10pIHtcclxuICAgICAgICBpdGVtWydzdWJNZW51J10gPSBwYXJzZU1lbnUoaXRlbVsnc3ViTWVudSddKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiBtZW51XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcGFyc2VNZW51KGd3X2dldEdyaWQoZ3JpZElkKS5vcHRpb25zLmNvbnRleHQuY29udGV4dE1lbnUpXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19nZXRHcmlkIH0gZnJvbSAnLi91dGlsaXRpZXMnXHJcblxyXG4vKipcclxuICogU2hvdyBsb2FkaW5nIG92ZXJsYXlcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2hvd0xvYWRpbmdPdmVybGF5KGlkKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkuc2hvd0xvYWRpbmdPdmVybGF5KClcclxufVxyXG5cclxuLyoqXHJcbiAqIFNob3cgJ25vIHJvd3MnIG92ZXJsYXlcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2hvd05vUm93c092ZXJsYXkoaWQpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmFwaS5zaG93Tm9Sb3dzT3ZlcmxheSgpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhciBhbGwgb3ZlcmxheXNcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfaGlkZU92ZXJsYXkoaWQpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmFwaS5oaWRlT3ZlcmxheSgpXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QEJhc2lzLkFnR3JpZENvbXBvbmVudHMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19nZXRHcmlkIH0gZnJvbSAnLi91dGlsaXRpZXMnXHJcbmltcG9ydCB7IGd3X3BhcnNlTm9kZSB9IGZyb20gJ2V2ZW50cy91dGlsaXRpZXMnXHJcbmltcG9ydCB7IGd3X2V4ZWN1dGVFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbidcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRRdWlja0ZpbHRlcihpZCwgZmlsdGVyKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkuc2V0UXVpY2tGaWx0ZXIoZmlsdGVyKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZXhwYW5kQWxsKGlkKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkuZXhwYW5kQWxsKClcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2NvbGxhcHNlQWxsKGlkKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkuY29sbGFwc2VBbGwoKVxyXG59XHJcbi8qKlxyXG4gKiBFbnN1cmVzIHRoZSByb3cgaW5kZXggaXMgdmlzaWJsZSBieSB2ZXJ0aWNhbGx5IHNjcm9sbGluZyB0aGUgZ3JpZFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgIHRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBpbmRleCB0aGUgcm93IGluZGV4IG9yIGtleVxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24geyd0b3AnLCAnbWlkZGxlJywgJ2JvdHRvbScsIHVuZGVmaW5lZC9udWxsfVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2Vuc3VyZUluZGV4VmlzaWJsZShpZCwgaW5kZXgsIHBvc2l0aW9uKSB7XHJcbiAgY29uc3QgYXBpID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGlcclxuICBjb25zdCBub2RlID0gYXBpLmdldFJvd05vZGUoaW5kZXgpXHJcblxyXG4gIGlmIChub2RlKSB7XHJcbiAgICBhcGkuZW5zdXJlTm9kZVZpc2libGUobm9kZSwgcG9zaXRpb24pXHJcbiAgfSBlbHNlIHtcclxuICAgIGFwaS5lbnN1cmVJbmRleFZpc2libGUoTnVtYmVyKGluZGV4KSwgcG9zaXRpb24pXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfbmF2aWdhdGVUb05leHRSb3coaWQsIHBhcmFtcykge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcbiAgbGV0IHByZXZpb3VzQ2VsbCA9IHBhcmFtcy5wcmV2aW91c0NlbGxQb3NpdGlvblxyXG4gIGxldCBzdWdnZXN0ZWROZXh0Q2VsbCA9IHBhcmFtcy5uZXh0Q2VsbFBvc2l0aW9uXHJcblxyXG4gIGNvbnN0IEtFWV9VUCA9ICdBcnJvd1VwJ1xyXG4gIGNvbnN0IEtFWV9ET1dOID0gJ0Fycm93RG93bidcclxuICBjb25zdCBLRVlfTEVGVCA9ICdBcnJvd0xlZnQnXHJcbiAgY29uc3QgS0VZX1JJR0hUID0gJ0Fycm93UmlnaHQnXHJcblxyXG4gIHN3aXRjaCAocGFyYW1zLmtleSkge1xyXG4gICAgY2FzZSBLRVlfRE9XTjpcclxuICAgICAgLy8gc2V0IHNlbGVjdGVkIGNlbGwgb24gY3VycmVudCBjZWxsICsgMVxyXG4gICAgICBpZiAoc3VnZ2VzdGVkTmV4dENlbGwgJiYgIXN1Z2dlc3RlZE5leHRDZWxsLnJvd1Bpbm5lZCkge1xyXG4gICAgICAgIGlmIChwcmV2aW91c0NlbGwucm93UGlubmVkKSB7XHJcbiAgICAgICAgICBjb25zdCByb3cgPSBvcHRpb25zLmFwaS5nZXREaXNwbGF5ZWRSb3dBdEluZGV4KFxyXG4gICAgICAgICAgICBvcHRpb25zLmFwaS5nZXRGaXJzdERpc3BsYXllZFJvdygpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICBpZiAocm93KSB7XHJcbiAgICAgICAgICAgIHJvdy5zZXRTZWxlY3RlZCh0cnVlKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBvcHRpb25zLmFwaS5mb3JFYWNoTm9kZShub2RlID0+IHtcclxuICAgICAgICAgICAgaWYgKHByZXZpb3VzQ2VsbC5yb3dJbmRleCArIDEgPT09IG5vZGUucm93SW5kZXgpIHtcclxuICAgICAgICAgICAgICBub2RlLnNldFNlbGVjdGVkKHRydWUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc3VnZ2VzdGVkTmV4dENlbGxcclxuICAgIGNhc2UgS0VZX1VQOlxyXG4gICAgICAvLyBzZXQgc2VsZWN0ZWQgY2VsbCBvbiBjdXJyZW50IGNlbGwgLSAxXHJcbiAgICAgIGlmIChzdWdnZXN0ZWROZXh0Q2VsbCAmJiAhc3VnZ2VzdGVkTmV4dENlbGwucm93UGlubmVkKSB7XHJcbiAgICAgICAgaWYgKHByZXZpb3VzQ2VsbC5yb3dQaW5uZWQpIHtcclxuICAgICAgICAgIGNvbnN0IHJvdyA9IG9wdGlvbnMuYXBpLmdldERpc3BsYXllZFJvd0F0SW5kZXgoXHJcbiAgICAgICAgICAgIG9wdGlvbnMuYXBpLmdldExhc3REaXNwbGF5ZWRSb3coKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgaWYgKHJvdykge1xyXG4gICAgICAgICAgICByb3cuc2V0U2VsZWN0ZWQodHJ1ZSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb3B0aW9ucy5hcGkuZm9yRWFjaE5vZGUobm9kZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2aW91c0NlbGwucm93SW5kZXggLSAxID09PSBub2RlLnJvd0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgbm9kZS5zZXRTZWxlY3RlZCh0cnVlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc3VnZ2VzdGVkTmV4dENlbGxcclxuICAgIGNhc2UgS0VZX0xFRlQ6XHJcbiAgICBjYXNlIEtFWV9SSUdIVDpcclxuICAgICAgcmV0dXJuIHN1Z2dlc3RlZE5leHRDZWxsXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHN1cGVyIHN0cmFuZ2Uga2V5Ym9hcmQnKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSByb3cgYmFzZWQgb24gYGdldFJvd05vZGVJZGAgY29uZmlnIGRlZmluZWQgaW4gdGhlIGdyaWQgY29udGV4dFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgdGhlIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gZ3JpZCAgdGhlIGdyaWQgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZ2V0Um93Tm9kZUlkKF9pZCwgZ3JpZCkge1xyXG4gIGNvbnN0IHJvd05vZGVJZCA9IGdyaWQuYXBpLmdyaWRPcHRpb25zV3JhcHBlci5ncmlkT3B0aW9ucy5jb250ZXh0LmdldFJvd05vZGVJZFxyXG4gIHJldHVybiBncmlkLmRhdGFbcm93Tm9kZUlkXVxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIHRoZSBncmlkJ3MgZGF0YSBzZXRcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtPYmplY3R9IGpzb24ganNvbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgdGhlIG5ldyBkYXRhc2V0IHRvIHVwZGF0ZSB0aGUgZ3JpZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3NldFJvd0RhdGEoaWQsIGpzb24pIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG5cclxuICBvcHRpb25zLmFwaS5zZXRSb3dEYXRhKGpzb24pXHJcbiAgb3B0aW9ucy5yb3dEYXRhID0ganNvblxyXG59XHJcblxyXG4vKipcclxuICogVXBkYXRlIHRoZSBncmlkIHdpdGggYSB0cmFuc2FjdGlvbiBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkICB0aGUgZ3JpZCBpZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gdHJhbnNhY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd191cGRhdGVSb3dEYXRhKGlkLCB0cmFuc2FjdGlvbiwgYmF0Y2hVcGRhdGUpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG5cclxuICBpZiAodHJhbnNhY3Rpb24ucmVtb3ZlLmxlbmd0aCkge1xyXG4gICAgbGV0IGl0ZW1zID0gW11cclxuXHJcbiAgICB0cmFuc2FjdGlvbi5yZW1vdmUuZm9yRWFjaChpbmRleCA9PiB7XHJcbiAgICAgIGl0ZW1zLnB1c2gob3B0aW9ucy5hcGkuZ2V0Um93Tm9kZShpbmRleCkuZGF0YSlcclxuICAgIH0pXHJcblxyXG4gICAgdHJhbnNhY3Rpb24ucmVtb3ZlID0gaXRlbXNcclxuICB9XHJcblxyXG4gIGlmICh0cmFuc2FjdGlvbi5hZGQubGVuZ3RoKSB7XHJcbiAgICB0cmFuc2FjdGlvbi5hZGQgPSB0cmFuc2FjdGlvbi5hZGQucmV2ZXJzZSgpXHJcbiAgfVxyXG5cclxuICBpZiAoIWJhdGNoVXBkYXRlKSB7XHJcbiAgICBvcHRpb25zLmFwaS5hcHBseVRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvcHRpb25zLmFwaS5hcHBseVRyYW5zYWN0aW9uQXN5bmModHJhbnNhY3Rpb24pXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBoZWlnaHQgb2YgYWxsIHJvd3NcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgdGhlIHJvdyBoZWlnaHRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRSb3dzSGVpZ2h0KGlkLCBoZWlnaHQpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIGNvbnN0IGFwaSA9IG9wdGlvbnMuYXBpXHJcblxyXG4gIGFwaS5mb3JFYWNoTm9kZShyb3cgPT4ge1xyXG4gICAgcm93LnNldFJvd0hlaWdodChoZWlnaHQpXHJcbiAgfSlcclxuXHJcbiAgYXBpLm9uUm93SGVpZ2h0Q2hhbmdlZCgpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGdpdmVuIHJvdyBoZWlnaHRcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkIGlkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gaW5kZXggdGhlIHJvdyBpbmRleCBvciBrZXlcclxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCB0aGUgbmV3IGhlaWdodFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3NldFJvd0hlaWdodChpZCwgaW5kZXgsIGhlaWdodCkge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcbiAgY29uc3QgYXBpID0gb3B0aW9ucy5hcGlcclxuICBjb25zdCByb3cgPSBhcGkuZ2V0Um93Tm9kZShpbmRleCkgfHwgYXBpLmdldERpc3BsYXllZFJvd0F0SW5kZXgoaW5kZXgpXHJcblxyXG4gIGlmIChyb3cpIHtcclxuICAgIHJvdy5zZXRSb3dIZWlnaHQoaGVpZ2h0KVxyXG4gICAgb3B0aW9ucy5hcGkub25Sb3dIZWlnaHRDaGFuZ2VkKClcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gc2V0IGhlaWdodCBmb3Igcm93ICR7aW5kZXh9LiBSb3cgY2Fubm90IGJlIGZvdW5kYClcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXNldCB0aGUgcm93IGhlaWdodFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgIHRoZSBncmlkIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfcmVzZXRSb3dIZWlnaHRzKGlkKSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkucmVzZXRSb3dIZWlnaHRzKClcclxufVxyXG5cclxuLyoqXHJcbiAqIFNlbGVjdCByb3cgb3IgbW9yZSBiYXNlZCBvbiB0aGUgcm93IGlkIG9yIGluZGV4XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCB0aGUgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7QXJyYXl9IHJvd3MgYW4gYXJyYXkgb2Ygcm93IGtleXMgYW5kIGluZGV4ZXMgdG8gc2VsZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2V0U2VsZWN0ZWRSb3dzKGlkLCByb3dzKSB7XHJcbiAgY29uc3Qgb3B0aW9ucyA9IGd3X2dldEdyaWQoaWQpLm9wdGlvbnNcclxuICBjb25zdCBhcGkgPSBvcHRpb25zLmFwaVxyXG5cclxuICBhcGkuZm9yRWFjaE5vZGVBZnRlckZpbHRlckFuZFNvcnQobm9kZSA9PiB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHJvd3MuaW5kZXhPZihTdHJpbmcobm9kZS5yb3dJbmRleCkpID4gLTEgfHxcclxuICAgICAgcm93cy5pbmRleE9mKFN0cmluZyhub2RlLmlkKSkgPiAtMVxyXG4gICAgKSB7XHJcbiAgICAgIG5vZGUuc2V0U2VsZWN0ZWQodHJ1ZSlcclxuICAgICAgbm9kZS5leHBhbmRlZCA9IHRydWVcclxuICAgIH1cclxuICB9KVxyXG5cclxuICBhcGkub25Hcm91cEV4cGFuZGVkT3JDb2xsYXBzZWQoKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2VsZWN0QWxsKGlkLCBmaWx0ZXJlZCkge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcblxyXG4gIGlmICgxID09PSBmaWx0ZXJlZCkge1xyXG4gICAgb3B0aW9ucy5hcGkuc2VsZWN0QWxsRmlsdGVyZWQoKVxyXG4gIH0gZWxzZSB7XHJcbiAgICBvcHRpb25zLmFwaS5zZWxlY3RBbGwoKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2Rlc2VsZWN0QWxsKGlkLCBmaWx0ZXJlZCkge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcblxyXG4gIGlmICgxID09PSBmaWx0ZXJlZCkge1xyXG4gICAgb3B0aW9ucy5hcGkuZGVzZWxlY3RBbGxGaWx0ZXJlZCgpXHJcbiAgfSBlbHNlIHtcclxuICAgIG9wdGlvbnMuYXBpLmRlc2VsZWN0QWxsKClcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgcm93c1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgZ3JpZCdzIGlkXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9ICBzZWxlY3RlZCByb3dzIGFzIEpTT05cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRTZWxlY3RlZFJvd3MoaWQpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIGNvbnN0IG5vZGVzID0gb3B0aW9ucy5hcGkuZ2V0U2VsZWN0ZWROb2RlcygpXHJcbiAgbGV0IHBhcnNlZCA9IFtdXHJcblxyXG4gIG5vZGVzLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICBwYXJzZWQucHVzaChnd19wYXJzZU5vZGUobm9kZSwgb3B0aW9ucy5jb250ZXh0KSlcclxuICB9KVxyXG5cclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGFyc2VkKVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBsYXN0IHNlbGVjdGVkIHJvd1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgZ3JpZCdzIGlkXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHNlbGVjdGVkIHJvdyBhcyBKU09OXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZ2V0U2VsZWN0ZWRSb3coaWQpIHtcclxuICBjb25zdCByb3dzID0gSlNPTi5wYXJzZShnd19nZXRTZWxlY3RlZFJvd3MoaWQpKVxyXG5cclxuICBpZiAocm93cy5sZW5ndGgpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShyb3dzW3Jvd3MubGVuZ3RoIC0gMV0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gJydcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgcm93IGJ5IGl0cyBpZCBvciBpbmRleFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0gaW5kZXhcclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSByb3cgYXMgSlNPTlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2dldFJvdyhpZCwgaW5kZXgpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShcclxuICAgIGd3X3BhcnNlTm9kZShvcHRpb25zLmFwaS5nZXRSb3dOb2RlKGluZGV4KSwgb3B0aW9ucy5jb250ZXh0KVxyXG4gIClcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCByb3dzIGZyb20gdGhlIGdyaWRcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtTdHJpbmd9IHBoYXNlIFRoZSByb3dzIHBoYXNlXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWx0ZXJFeHByZXNzaW9uIEEgZmlsdGVyIGV4cHJlc3Npb25cclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSBKc29uIHN0cmluZ2lmaWVkIGFycmF5IG9mIHJvd3NcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRSb3dzKGlkLCBwaGFzZSwgZmlsdGVyRXhwcmVzc2lvbikge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBnd19nZXRHcmlkKGlkKS5vcHRpb25zXHJcbiAgY29uc3QgcGFyc2VkID0gW11cclxuXHJcbiAgb3B0aW9ucy5hcGlbcGhhc2VdKG5vZGUgPT4ge1xyXG4gICAgaWYgKCFub2RlLmdyb3VwKSB7XHJcbiAgICAgIGlmIChmaWx0ZXJFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgY29uc3QgY2FuUHJvY2VzcyA9IGd3X2V4ZWN1dGVFeHByZXNzaW9uKGZpbHRlckV4cHJlc3Npb24sIHtcclxuICAgICAgICAgIHZhbHVlOiBub2RlLmRhdGEsXHJcbiAgICAgICAgICBjb250ZXh0OiBvcHRpb25zLmNvbnRleHQsXHJcbiAgICAgICAgICBvbGRWYWx1ZTogbnVsbCxcclxuICAgICAgICAgIG5ld1ZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgIGNvbERlZjogbnVsbCxcclxuICAgICAgICAgIHJvd0luZGV4OiBub2RlLnJvd0luZGV4LFxyXG4gICAgICAgICAgYXBpOiBub2RlLmdyaWRBcGksXHJcbiAgICAgICAgICBjb2x1bW5BcGk6IG5vZGUuY29sdW1uQXBpLFxyXG4gICAgICAgICAgZ2V0VmFsdWU6ICgpID0+IG5vZGUuZGF0YSxcclxuICAgICAgICAgIGNvbHVtbjogbnVsbCxcclxuICAgICAgICAgIGNvbHVtbkdyb3VwOlxyXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICAgICAgICAgIG5vZGUuaGFzT3duUHJvcGVydHkoJ3BhcmVudCcpICYmIG5vZGUucGFyZW50Lmhhc093blByb3BlcnR5KCdrZXknKVxyXG4gICAgICAgICAgICAgID8gbm9kZS5wYXJlbnQua2V5XHJcbiAgICAgICAgICAgICAgOiAnJyxcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoY2FuUHJvY2Vzcykge1xyXG4gICAgICAgICAgcGFyc2VkLnB1c2goZ3dfcGFyc2VOb2RlKG5vZGUsIG9wdGlvbnMuY29udGV4dCkpXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBhcnNlZC5wdXNoKGd3X3BhcnNlTm9kZShub2RlLCBvcHRpb25zLmNvbnRleHQpKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcnNlZClcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIGdyaWQgdG8gcmVtb3ZlIGEgcm93IGZyb20gdGhlIERPTSBhbmQgcmVjcmVhdGUgaXQgYWdhaW4gZnJvbSBzY3JhdGNoLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgZ3JpZCdzIGlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfcmVkcmF3Um93cyhpZCkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLnJlZHJhd1Jvd3MoKVxyXG59XHJcblxyXG4vKipcclxuICogUGluIGFuIGFycmF5IG9mIHRvdyB0byB0aGUgdG9wIG9mIHRoZSBncmlkXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCB0aGUgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgYXJyYXkgb2Ygcm93c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3NldFBpbm5lZFRvcFJvd0RhdGEoaWQsIGRhdGEpIHtcclxuICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmFwaS5zZXRQaW5uZWRUb3BSb3dEYXRhKGRhdGEpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQaW4gYW4gYXJyYXkgb2YgdG93IHRvIHRoZSBib3R0b20gb2YgdGhlIGdyaWRcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIHRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtBcnJheX0gZGF0YSBhcnJheSBvZiByb3dzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2V0UGlubmVkQm90dG9tUm93RGF0YShpZCwgZGF0YSkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLnNldFBpbm5lZEJvdHRvbVJvd0RhdGEoZGF0YSlcclxufVxyXG4iLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY2xvdWQ+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGd3X2dldEdyaWQgfSBmcm9tICcuL3V0aWxpdGllcydcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZXRTdGF0ZShpZCwgc3RhdGUpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG5cclxuICB0cnkge1xyXG4gICAgb3B0aW9ucy5jb2x1bW5BcGkuYXBwbHlDb2x1bW5TdGF0ZSh7XHJcbiAgICAgIHN0YXRlOiBzdGF0ZS5jb2x1bW5zLFxyXG4gICAgICBhcHBseU9yZGVyOiB0cnVlLFxyXG4gICAgfSlcclxuICAgIG9wdGlvbnMuY29sdW1uQXBpLnNldENvbHVtbkdyb3VwU3RhdGUoc3RhdGUuZ3JvdXBzKVxyXG4gICAgb3B0aW9ucy5hcGkuc2V0RmlsdGVyTW9kZWwoc3RhdGUuZmlsdGVycylcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBwYXJzZSBncmlkIHN0YXRlIGZyb20gSlNPTicsIGUpXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZ2V0U3RhdGUoaWQpIHtcclxuICBjb25zdCBvcHRpb25zID0gZ3dfZ2V0R3JpZChpZCkub3B0aW9uc1xyXG4gIGNvbnN0IGNvbHVtbnMgPSBvcHRpb25zLmNvbHVtbkFwaS5nZXRDb2x1bW5TdGF0ZSgpXHJcbiAgY29uc3QgZ3JvdXBzID0gb3B0aW9ucy5jb2x1bW5BcGkuZ2V0Q29sdW1uR3JvdXBTdGF0ZSgpXHJcbiAgY29uc3QgZmlsdGVycyA9IG9wdGlvbnMuYXBpLmdldEZpbHRlck1vZGVsKClcclxuXHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgIGNvbHVtbnMsXHJcbiAgICAgIGdyb3VwcyxcclxuICAgICAgZmlsdGVycyxcclxuICAgIH0pXHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gY29udmVydCB0aGUgZ3JpZCBzdGF0ZSB0byBqc29uJywgZSlcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19nZXRHcmlkIH0gZnJvbSAnLi91dGlsaXRpZXMnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2V0U3RhdHVzYmFyQ29tcG9uZW50VmlzaWJpbGl0eShpZCwga2V5LCB2aXNpYmlsaXR5KSB7XHJcbiAgZ3dfZ2V0R3JpZChpZClcclxuICAgIC5vcHRpb25zLmFwaS5nZXRTdGF0dXNQYW5lbChrZXkpXHJcbiAgICAuc2V0VmlzaWJsZShCb29sZWFuKHZpc2liaWxpdHkpKVxyXG59XHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ3dfZ2V0R3JpZCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3NldFNpZGVCYXJWaXNpYmxlKGlkLCB2YWx1ZSkge1xyXG4gIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuYXBpLnNldFNpZGVCYXJWaXNpYmxlKEJvb2xlYW4odmFsdWUpKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfb3BlblRvb2xwYW5lbChncmlkSWQsIHRvb2xwYW5lbElkKSB7XHJcbiAgZ3dfZ2V0R3JpZChncmlkSWQpLm9wdGlvbnMuYXBpLm9wZW5Ub29sUGFuZWwodG9vbHBhbmVsSWQpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19jbG9zZVRvb2xwYW5lbChncmlkSWQsIHRvb2xwYW5lbElkKSB7XHJcbiAgZ3dfZ2V0R3JpZChncmlkSWQpLm9wdGlvbnMuYXBpLmNsb3NlVG9vbFBhbmVsKHRvb2xwYW5lbElkKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ3dfc2V0RnVuY3Rpb25zUmVhZE9ubHkoaWQsIHJlYWRvbmx5KSB7XHJcbiAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5hcGkuc2V0RnVuY3Rpb25zUmVhZE9ubHkoQm9vbGVhbihyZWFkb25seSkpXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QEJhc2lzLkFnR3JpZENvbXBvbmVudHMuY29tPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG4vKipcclxuICogR2V0IGRvY3VtZW50XHJcbiAqXHJcbiAqIEdldCB0aGUgZG9jdW1lbnQgaW5zdGFuY2UgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IEJCaiBlbnZcclxuICpcclxuICogQHJldHVybiB7T2JqZWN0fSBEb2N1bWVudCBpbnN0YW5jZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2dldERvY3VtZW50KCkge1xyXG4gIHJldHVybiB0eXBlb2YgJGRvYyAhPT0gJ3VuZGVmaW5lZCcgPyAkZG9jIDogZG9jdW1lbnRcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCB3aW5kb3dcclxuICpcclxuICogR2V0IHRoZSB3aW5kb3cgaW5zdGFuY2UgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IEJCaiBlbnZcclxuICpcclxuICogQHJldHVybiB7T2JqZWN0fSBXaW5kb3cgaW5zdGFuY2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRXaW5kb3coKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiAkd25kICE9PSAndW5kZWZpbmVkJyA/ICR3bmQgOiB3aW5kb3dcclxufVxyXG5cclxuLyoqXHJcbiAqIEVzY2FwZSBWYWx1ZVxyXG4gKlxyXG4gKiBDaGFuZ2UgbnVsbCBhbmQgdW5kZWZpbmVkIHRvIGVtcHR5IHN0cmluZ1xyXG4gKlxyXG4gKiBAcGFyYW0geyp9IHZhbHVlXHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gZXNjYXBlZCB2YWx1ZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X2VzY2FwZSh2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiAnJ1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGUgYSB1bmlxdWUgdXVpZFxyXG4gKiBAc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9jcmVhdGUtZ3VpZC11dWlkLWluLWphdmFzY3JpcHRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd191dWlkKCkge1xyXG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcclxuICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxyXG4gICAgICB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4XHJcbiAgICByZXR1cm4gdi50b1N0cmluZygxNilcclxuICB9KVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IEdyaWRcclxuICpcclxuICogUmV0cmlldmUgdGhlIGdyaWQgaW5zdGFuY2UgZnJvbSBgd2luZG93LkJCakdyaWRFeFdpZGdldGAgYXJyYXlcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICpcclxuICogQHJldHVybiB7T2JqZWN0fG51bGx9IFRoZSBncmlkJ3MgaW5zdGFuY2Ugb2ZyIG51bGxcclxuICogQHRocm93cyBUeXBlRXJyb3Igd2hlbiB0aGUgZ3JpZCBpbnN0YW5jZSBpcyBub3QgZm91bmRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19nZXRHcmlkKGlkKSB7XHJcbiAgd2luZG93LkJCakdyaWRFeFdpZGdldCA9IHdpbmRvdy5CQmpHcmlkRXhXaWRnZXQgfHwge31cclxuICBjb25zdCBncmlkID0gd2luZG93LkJCakdyaWRFeFdpZGdldFtpZF0gfHwgbnVsbFxyXG5cclxuICBpZiAoIWdyaWQpIHtcclxuICAgIGNvbnN0IHJlZ2lzdGVyZWRHcmlkcyA9IEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHdpbmRvdy5CQmpHcmlkRXhXaWRnZXQpKVxyXG4gICAgLy9nZXRGdW5jQXJncyhmdW5jKS5mb3JFYWNoKChrZXksIGkpID0+IGFyZ3NPYmpba2V5XSA9IGFyZ3NbaV0pO1xyXG5cclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgIGBcXG5cXG5bR3JpZCBOb3QgRm91bmRdIFRoZSBtZXRob2QgYXNrZWQgZm9yIG5vbi1leGlzdGVudCBncmlkIGluc3RhbmNlLlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblJlcXVpcmVkIEdyaWQgSWQgOiAke2lkfSAgIFxyXG5SZWdpc3RlcmVkIEdyaWRzIDogJHtyZWdpc3RlcmVkR3JpZHN9XHJcbmBcclxuICAgIClcclxuICB9XHJcblxyXG4gIHJldHVybiBncmlkXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgR3JpZFxyXG4gKlxyXG4gKiBTdG9yZSBhIG5ldyBncmlkIGluc3RhbmNlIGJ5IGluIHRoZSBgd2luZG93LkJCakdyaWRFeFdpZGdldGAgYXJyYXlcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgIFRoZSBncmlkJ3Mgb3B0aW9uc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IFN0b3JlZCBncmlkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfYWRkR3JpZChpZCwgb3B0aW9ucykge1xyXG4gIHdpbmRvdy5CQmpHcmlkRXhXaWRnZXQgPSB3aW5kb3cuQkJqR3JpZEV4V2lkZ2V0IHx8IHt9XHJcbiAgd2luZG93LkJCakdyaWRFeFdpZGdldFtpZF0gPSBvcHRpb25zXHJcblxyXG4gIHJldHVybiBnd19nZXRHcmlkKGlkKVxyXG59XHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEFuIGltcHJvdmVkIHRvb2x0aXAgY29tcG9uZW50IHdoaWNoIHN1cHBvcnRzIEhUTUwgYW5kIGJlaGF2ZXMgdGhlIHNhbWUgaW4gYm90aCBHVUkgYW5kIEJVSVxyXG4gKlxyXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXJcclxuICovXHJcbmNsYXNzIEhUTUxUb29sdGlwIHtcclxuICAvKipcclxuICAgKiBDb25zdHJ1Y3QgdGhlIGNvbXBvbmVudFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyB0aGUgdG9vbHRpcCBjb21wb25lbnQgcGFyYW1zXHJcbiAgICovXHJcbiAgaW5pdChwYXJhbXMpIHtcclxuICAgIGNvbnN0IGVHdWkgPSAodGhpcy5lR3VpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXHJcbiAgICBjb25zdCB0b29sdGlwVmFsdWVHZXR0ZXIgPSBwYXJhbXMuY29sRGVmLnRvb2x0aXBWYWx1ZUdldHRlclxyXG4gICAgY29uc3QgaXNIZWFkZXIgPSBwYXJhbXMucm93SW5kZXggPT09IHVuZGVmaW5lZFxyXG4gICAgY29uc3QgaXNHcm91cGVkSGVhZGVyID0gaXNIZWFkZXIgJiYgISFwYXJhbXMuY29sRGVmLmNoaWxkcmVuXHJcbiAgICBjb25zb2xlLmxvZyhwYXJhbXMpXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICBjb25zdCBkYXRhID1cclxuICAgICAgIWlzSGVhZGVyICYmICFpc0dyb3VwZWRIZWFkZXJcclxuICAgICAgICA/IHBhcmFtcy5hcGkuZ2V0RGlzcGxheWVkUm93QXRJbmRleChwYXJhbXMucm93SW5kZXgpLmRhdGFcclxuICAgICAgICA6IG51bGxcclxuICAgIGNvbnN0IHRoZW1lID0gcGFyYW1zLmFwaS5ncmlkT3B0aW9uc1dyYXBwZXIuZUdyaWREaXYuY2xhc3NOYW1lLmVuZHNXaXRoKFxyXG4gICAgICAnZGFyaydcclxuICAgIClcclxuICAgICAgPyAnZ3ctdG9vbHRpcC1kYXJrJ1xyXG4gICAgICA6ICdndy10b29sdGlwLWxpZ2h0J1xyXG4gICAgY29uc3QgdG9vbHRpcEZpZWxkID0gcGFyYW1zLmNvbERlZi50b29sdGlwRmllbGRcclxuICAgICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXHJcbiAgICAgICAgZGF0YSAmJiBkYXRhLmhhc093blByb3BlcnR5KHBhcmFtcy5jb2xEZWYudG9vbHRpcEZpZWxkKVxyXG4gICAgICAgID8gZGF0YVtwYXJhbXMuY29sRGVmLnRvb2x0aXBGaWVsZF1cclxuICAgICAgICA6IG51bGxcclxuICAgICAgOiBudWxsXHJcblxyXG4gICAgY29uc3QgcGFzc2VkUGFyYW1zID0ge1xyXG4gICAgICAuLi5wYXJhbXMsXHJcbiAgICAgIC4uLnsgZGF0YSB9LFxyXG4gICAgICAuLi57IGlzSGVhZGVyLCBpc0dyb3VwZWRIZWFkZXIsIHRvb2x0aXBGaWVsZCB9LFxyXG4gICAgfVxyXG5cclxuICAgIGVHdWkuY2xhc3NMaXN0LmFkZCgnZ3ctdG9vbHRpcCcsIHRoZW1lKVxyXG4gICAgZUd1aS5pbm5lckhUTUwgPVxyXG4gICAgICBpc0hlYWRlciB8fCBpc0dyb3VwZWRIZWFkZXJcclxuICAgICAgICA/IHBhcmFtcy52YWx1ZVxyXG4gICAgICAgIDogdG9vbHRpcEZpZWxkXHJcbiAgICAgICAgPyB0b29sdGlwRmllbGRcclxuICAgICAgICA6IHRvb2x0aXBWYWx1ZUdldHRlclxyXG4gICAgICAgID8gdG9vbHRpcFZhbHVlR2V0dGVyKHBhc3NlZFBhcmFtcylcclxuICAgICAgICA6IHBhcmFtcy52YWx1ZVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBndWkgSW5zdGFuY2VcclxuICAgKlxyXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxyXG4gICAqL1xyXG4gIGdldEd1aSgpIHtcclxuICAgIHJldHVybiB0aGlzLmVHdWlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhUTUxUb29sdGlwXHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IGF1dG9jb21wbGV0ZSBmcm9tICdhdXRvY29tcGxldGVyJ1xyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnbG9kYXNoLWVzL3RlbXBsYXRlJ1xyXG5pbXBvcnQgeyBnd19wYXJzZU5vZGUgfSBmcm9tICdldmVudHMvdXRpbGl0aWVzJ1xyXG4vKipcclxuICogQW4gYXV0b2NvbXBsZXRlIGNlbGwgZWRpdG9yIHdyaXR0ZW4gc3BlY2lmaWNhbGx5IHRvIEJCakdyaWRFeFdpZGdldFxyXG4gKlxyXG4gKiBAYXV0aG9yIEh5eWFuIEFibyBGYWtoZXJcclxuICovXHJcbmNsYXNzIFN1Z2dlc3Rpb25FZGl0b3Ige1xyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIGNvbXBvbmVudFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xyXG4gICAqXHJcbiAgICogQHJldHVybiB2b2lkXHJcbiAgICovXHJcbiAgaW5pdChwYXJhbXMpIHtcclxuICAgIGNvbnN0IHBhdHRlcm4gPSBwYXJhbXMudGV4dFBhdHRlcm4gfHwgbnVsbFxyXG4gICAgY29uc3QgcmVxdWlyZWQgPSBwYXJhbXMudGV4dFJlcXVpcmVkIHx8IGZhbHNlXHJcbiAgICBjb25zdCB0aXRsZSA9IHBhcmFtcy50ZXh0VGl0bGUgfHwgbnVsbFxyXG4gICAgY29uc3QgZGVib3VuY2VXYWl0TXMgPSBwYXJhbXMuZGVib3VuY2VXYWl0TXMgfHwgMjUwXHJcblxyXG4gICAgbGV0IHN0YXJ0VmFsdWVcclxuXHJcbiAgICB0aGlzLl9mb2N1c0FmdGVyQXR0YWNoZWQgPSBwYXJhbXMuY2VsbFN0YXJ0ZWRFZGl0XHJcbiAgICBpZiAodGhpcy5fZm9jdXNBZnRlckF0dGFjaGVkKSB7XHJcbiAgICAgIGNvbnN0IGtleVByZXNzQmFja3NwYWNlT3JEZWxldGUgPVxyXG4gICAgICAgIHBhcmFtcy5rZXlQcmVzcyA9PSAzMiB8fCBwYXJhbXMua2V5UHJlc3MgPT0gNDYgLy8gc3BhY2UgLy8gZGVsZXRlXHJcblxyXG4gICAgICBpZiAoa2V5UHJlc3NCYWNrc3BhY2VPckRlbGV0ZSkge1xyXG4gICAgICAgIHN0YXJ0VmFsdWUgPSAnJ1xyXG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5jaGFyUHJlc3MpIHtcclxuICAgICAgICBzdGFydFZhbHVlID0gcGFyYW1zLmNoYXJQcmVzc1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXJ0VmFsdWUgPSBwYXJhbXMudmFsdWVcclxuICAgICAgICBpZiAocGFyYW1zLmtleVByZXNzICE9IDExMykge1xyXG4gICAgICAgICAgLy9GMlxyXG4gICAgICAgICAgdGhpcy5faGlnaGxpZ2h0QWxsT25Gb2N1cyA9IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN0YXJ0VmFsdWUgPSBwYXJhbXMudmFsdWVcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXNcclxuXHJcbiAgICB0aGlzLl9ndWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgdGhpcy5fZ3VpLmNsYXNzTmFtZSA9ICdhdXRvY29tcGxldGVJbnB1dFdyYXBwZXIgYWctY2VsbC1lZGl0LXdyYXBwZXInXHJcbiAgICB0aGlzLl9ndWkudGFiSW5kZXggPSAnMCdcclxuICAgIHRoaXMuX2d1aS5pbm5lckhUTUwgPSAvKiBodG1sICovIGBcclxuICAgIDxkaXYgY2xhc3M9XCJhZy1jZWxsLWVkaXRvciBhZy1sYWJlbGVkIGFnLWxhYmVsLWFsaWduLWxlZnQgYWctdGV4dC1maWVsZCBhZy1pbnB1dC1maWVsZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiYWctd3JhcHBlciBhZy1pbnB1dC13cmFwcGVyIGFnLXRleHQtZmllbGQtaW5wdXQtd3JhcHBlclwiPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgYFxyXG5cclxuICAgIC8vIGlucHV0XHJcbiAgICB0aGlzLl9pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JylcclxuICAgIHRoaXMuX2lucHV0LmNsYXNzTmFtZSA9XHJcbiAgICAgICdhdXRvY29tcGxldGVJbnB1dFdyYXBwZXJfX2lucHV0IGFnLWNlbGwtZWRpdC1pbnB1dCBhZy1pbnB1dC1maWVsZC1pbnB1dCBhZy10ZXh0LWZpZWxkLWlucHV0J1xyXG4gICAgdGhpcy5faW5wdXQudHlwZSA9ICd0ZXh0J1xyXG4gICAgdGhpcy5faW5wdXQudmFsdWUgPSBzdGFydFZhbHVlXHJcbiAgICB0aGlzLl9pbnB1dC50YWJJbmRleCA9IDBcclxuXHJcbiAgICB0aGlzLl9ndWkucXVlcnlTZWxlY3RvcignLmFnLWlucHV0LXdyYXBwZXInKS5hcHBlbmRDaGlsZCh0aGlzLl9pbnB1dClcclxuXHJcbiAgICBpZiAocGF0dGVybiAhPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9pbnB1dC5zZXRBdHRyaWJ1dGUoJ3BhdHRlcm4nLCBwYXR0ZXJuKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXF1aXJlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLl9pbnB1dC5zZXRBdHRyaWJ1dGUoJ3JlcXVpcmVkJywgJ3JlcXVpcmVkJylcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGl0bGUgIT09IG51bGwgJiYgdGl0bGUgIT09ICdkZWZhdWx0Jykge1xyXG4gICAgICB0aGlzLl9pbnB1dC50aXRsZSA9IHRpdGxlXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fb25DaGFuZ2UgPSB0aGlzLl9vbkNoYW5nZS5iaW5kKHRoaXMpXHJcblxyXG4gICAgdGhpcy5faW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB0aGlzLl9vbkNoYW5nZSlcclxuICAgIHRoaXMuX2lucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuX29uQ2hhbmdlKVxyXG5cclxuICAgIC8vIHNldHVwIHRoZSBhdXRvY29tcGxldGUgY29tcG9uZW50XHJcbiAgICB0aGlzLl9yZW5kZXJJdGVtVGVtcGxhdGUgPSB0aGlzLl9wYXJhbXMuaXRlbVRlbXBsYXRlXHJcbiAgICAgID8gdGVtcGxhdGUodGhpcy5fcGFyYW1zLml0ZW1UZW1wbGF0ZSlcclxuICAgICAgOiAnJ1xyXG4gICAgdGhpcy5fcmVuZGVyR3JvdXBUZW1wbGF0ZSA9IHRoaXMuX3BhcmFtcy5ncm91cFRlbXBsYXRlXHJcbiAgICAgID8gdGVtcGxhdGUodGhpcy5fcGFyYW1zLmdyb3VwVGVtcGxhdGUpXHJcbiAgICAgIDogJydcclxuXHJcbiAgICBjb25zb2xlLmxvZyhwYXJhbXMpXHJcbiAgICB0aGlzLl9hdXRvY29tcGxldGUgPSBhdXRvY29tcGxldGUoe1xyXG4gICAgICBpbnB1dDogdGhpcy5faW5wdXQsXHJcbiAgICAgIGRlYm91bmNlV2FpdE1zOiBkZWJvdW5jZVdhaXRNcyxcclxuICAgICAgLy8gd2l0aG91dCB0aGlzIG9wdGlvbiBlbmFibGVkICwgdGhlIGxpc3Qgd29udCBiZSBjbG9zZWQgaW4gR1VJXHJcbiAgICAgIHByZXZlbnRTdWJtaXQ6IHRydWUsXHJcbiAgICAgIGZldGNoOiB0aGlzLl9vbkF1dG9jb21wbGV0ZUZldGNoLmJpbmQodGhpcyksXHJcbiAgICAgIG9uU2VsZWN0OiB0aGlzLl9vbkF1dG9jb21wbGV0ZVNlbGVjdC5iaW5kKHRoaXMpLFxyXG4gICAgICByZW5kZXJHcm91cDogdGhpcy5fb25BdXRvY29tcGxldGVSZW5kZXJHcm91cC5iaW5kKHRoaXMpLFxyXG4gICAgICByZW5kZXI6IHRoaXMuX29uQXV0b2NvbXBsZXRlUmVuZGVySXRlbS5iaW5kKHRoaXMpLFxyXG4gICAgICBjdXN0b21pemU6IHRoaXMuX29uQXV0b2NvbXBsZXRlQ3VzdG9taXplLmJpbmQodGhpcyksXHJcbiAgICAgIGVtcHR5TXNnOiB0aGlzLl9wYXJhbXMuZW1wdHlNZXNzYWdlIHx8IG51bGwsXHJcbiAgICAgIG1pbkxlbmd0aDogdGhpcy5fcGFyYW1zLm1pbkxlbmd0aCB8fCAyLFxyXG4gICAgICBzaG93T25Gb2N1czogdGhpcy5fcGFyYW1zLnNob3dPbkZvY3VzIHx8IGZhbHNlLFxyXG4gICAgICBjbGFzc05hbWU6IHBhcmFtcy5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmVHcmlkRGl2LmNsYXNzTmFtZS5lbmRzV2l0aChcclxuICAgICAgICAnZGFyaydcclxuICAgICAgKVxyXG4gICAgICAgID8gJ2RhcmsnXHJcbiAgICAgICAgOiAnbGlnaHQnLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybiB0aGUgRE9NIGVsZW1lbnQgb2YgdGhlIGNvbXBvbmVudCwgdGhpcyBpcyB3aGF0IHRoZSBncmlkIHB1dHMgaW50byB0aGUgY2VsbFxyXG4gICAqXHJcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9XHJcbiAgICovXHJcbiAgZ2V0R3VpKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2d1aVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0cyBjYWxsZWQgb25jZSBhZnRlciBHVUkgaXMgYXR0YWNoZWQgdG8gRE9NLlxyXG4gICAqXHJcbiAgICogTWFrZSBzdXJlIGNvbnRhaW5lciBpcyBhbHdheXMgZm9jdXNlZCB0byBsaXN0ZW4gdG8ga2V5IGNoYW5nZXNcclxuICAgKi9cclxuICBhZnRlckd1aUF0dGFjaGVkKCkge1xyXG4gICAgaWYgKHRoaXMuX2hpZ2hsaWdodEFsbE9uRm9jdXMpIHtcclxuICAgICAgdGhpcy5faW5wdXQuc2VsZWN0KClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLl9mb2N1c0FmdGVyQXR0YWNoZWQpIHtcclxuICAgICAgICB0aGlzLmZvY3VzSW4oKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgVGhlIGNvbXBvbmVudCB2YWx1ZVxyXG4gICAqXHJcbiAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAqL1xyXG4gIGdldFZhbHVlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0LnZhbHVlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJZiBkb2luZyBmdWxsIHJvdyBlZGl0LCB0aGVuIGdldHMgY2FsbGVkIHdoZW4gdGFiYmluZyBpbnRvIHRoZSBjZWxsLlxyXG4gICAqL1xyXG4gIGZvY3VzSW4oKSB7XHJcbiAgICB0aGlzLl9pbnB1dC5mb2N1cygpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIGNhbGxlZCBvbmNlIHdoZW4gZWRpdGluZyBpcyBmaW5pc2hlZCAoZWcgaWYgZW50ZXIgaXMgcHJlc3NlZCkuXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSB3aGVuIHRoZSByZXN1bHQgb2YgdGhlIGVkaXQgd2lsbCBiZSBpZ25vcmVkLiBmYWxzZSBvdGhlcndpc2VcclxuICAgKi9cclxuICBpc0NhbmNlbEFmdGVyRW5kKCkge1xyXG4gICAgY29uc3QgYWxsb3dDdXN0b21WYWx1ZXMgPSB0aGlzLl9wYXJhbXMuYWxsb3dDdXN0b21WYWx1ZXMgfHwgZmFsc2VcclxuICAgIGxldCBpc1ZhbGlkID0gdGhpcy5fdmFsaWRhdGVJbnB1dCh0aGlzLl9pbnB1dClcclxuXHJcbiAgICBpZiAoaXNWYWxpZCAmJiBhbGxvd0N1c3RvbVZhbHVlcyA9PT0gZmFsc2UgJiYgdGhpcy5fbGFzdEZldGNoZWREYXRhKSB7XHJcbiAgICAgIGNvbnN0IGZpbHRlcmVkSXRlbXMgPSB0aGlzLl9sYXN0RmV0Y2hlZERhdGEuZmlsdGVyKFxyXG4gICAgICAgIHggPT4geC52YWx1ZSA9PT0gdGhpcy5faW5wdXQudmFsdWVcclxuICAgICAgKVxyXG4gICAgICBpc1ZhbGlkID0gZmlsdGVyZWRJdGVtcy5sZW5ndGggPT09IDFcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gIWlzVmFsaWRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldHMgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXHJcbiAgICpcclxuICAgKiBDbGVhciB0aGUgcmVnaXN0ZXJlZCBldmVudCBsaXN0ZW5lcnMgYW5kIGRlc3Ryb3kgdGhlIGF1dG9jb21wbGV0ZVxyXG4gICAqL1xyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICB0aGlzLl9pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuX29uQ2hhbmdlKVxyXG4gICAgdGhpcy5faW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5fb25DaGFuZ2UpXHJcbiAgICB0aGlzLl9hdXRvY29tcGxldGUuZGVzdHJveSgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB0byBwcmVwYXJlIHN1Z2dlc3Rpb25zIGFuZCB0aGVuIHBhc3MgdGhlbSB0byBhdXRvY29tcGxldGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCB0aGUgdGV4dCBpbiB0aGUgaW5wdXQgZmllbGRcclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGUgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IG11c3QgYmUgY2FsbGVkIGFmdGVyIHN1Z2dlc3Rpb25zIGFyZSBwcmVwYXJlZFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGZhbHNlIHdoZW4gdGhlIHJlcXVlc3QgaXMgaWdub3JlZCAsIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqL1xyXG4gIF9vbkF1dG9jb21wbGV0ZUZldGNoKHRleHQsIHVwZGF0ZSkge1xyXG4gICAgY29uc3Qgc3VwcHJlc3NTdWdnZXN0aW9uT25JbnZhbGlkSW5wdXQgPVxyXG4gICAgICB0aGlzLl9wYXJhbXMuc3VwcHJlc3NTdWdnZXN0aW9uT25JbnZhbGlkSW5wdXQgfHwgZmFsc2VcclxuICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLl92YWxpZGF0ZUlucHV0KHRoaXMuX2lucHV0KVxyXG5cclxuICAgIGlmIChzdXBwcmVzc1N1Z2dlc3Rpb25PbkludmFsaWRJbnB1dCAmJiAhaXNWYWxpZCkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpZCA9IHRoaXMuX3BhcmFtcy5ldmVudElkXHJcblxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihpZCwgZXZlbnQgPT4ge1xyXG4gICAgICB0aGlzLl9sYXN0RmV0Y2hlZERhdGEgPSBldmVudC5kZXRhaWxcclxuICAgICAgdXBkYXRlKGV2ZW50LmRldGFpbClcclxuICAgIH0pXHJcblxyXG4gICAgd2luZG93LmJhc2lzRGlzcGF0Y2hDdXN0b21FdmVudCh0aGlzLl9wYXJhbXMuZUdyaWRDZWxsLCB7XHJcbiAgICAgIHR5cGU6ICdndy5zdWdnZXN0aW9uJyxcclxuICAgICAgZGV0YWlsOiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgaWQsXHJcbiAgICAgICAgdGV4dCxcclxuICAgICAgICBjb2x1bW46IHRoaXMuX3BhcmFtcy5jb2xEZWYuZmllbGQsXHJcbiAgICAgICAgcm93OiBnd19wYXJzZU5vZGUoXHJcbiAgICAgICAgICB0aGlzLl9wYXJhbXMubm9kZSxcclxuICAgICAgICAgIHRoaXMuX3BhcmFtcy5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmdyaWRPcHRpb25zLmNvbnRleHRcclxuICAgICAgICApLFxyXG4gICAgICB9KSxcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHdoZW4gdXNlciBjaG9vc2UgYW4gaXRlbSBpbiBhdXRvY29tcGxldGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbSBUaGUgc2VsZWN0ZWQgaXRlbVxyXG4gICAqL1xyXG4gIF9vbkF1dG9jb21wbGV0ZVNlbGVjdChpdGVtKSB7XHJcbiAgICB0aGlzLl9pbnB1dC52YWx1ZSA9IGl0ZW0udmFsdWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgb3ZlcnJpZGVzIHRoZSByZW5kZXJpbmcgZnVuY3Rpb24gb2YgYXV0b2NvbXBsZXRlIGl0ZW1zLlxyXG4gICAqXHJcbiAgICogSXQgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggc3VnZ2VzdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gc3VnZ2VzdGlvbiBvYmplY3RcclxuICAgKiBAcGFyYW0ge1N0cmluZ30gY3VycmVudFZhbHVlIFRoZSBjdXJyZW50IGlucHV0IGZpZWxkIHZhbHVlXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XHJcbiAgICovXHJcbiAgX29uQXV0b2NvbXBsZXRlUmVuZGVySXRlbShpdGVtLCBjdXJyZW50VmFsdWUpIHtcclxuICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICBkaXYuY2xhc3NOYW1lID0gJ3N1Z2dlc3Rpb24taXRlbSdcclxuXHJcbiAgICBpZiAodGhpcy5fcmVuZGVySXRlbVRlbXBsYXRlKSB7XHJcbiAgICAgIGRpdi5pbm5lckhUTUwgPSB0aGlzLl9yZW5kZXJJdGVtVGVtcGxhdGUoe1xyXG4gICAgICAgIGl0ZW0sXHJcbiAgICAgICAgY3VycmVudFZhbHVlLFxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZGl2LmlubmVySFRNTCA9IGl0ZW0ubGFiZWxcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGl2XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGlzIG92ZXJyaWRlcyB0aGUgcmVuZGVyaW5nIGZ1bmN0aW9uIG9mIGF1dG9jb21wbGV0ZSBncm91cHMuXHJcbiAgICpcclxuICAgKiBJdCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBncm91cFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSBUaGUgZ3JvdXAgbmFtZVxyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjdXJyZW50VmFsdWUgVGhlIGN1cnJlbnQgaW5wdXQgZmllbGQgdmFsdWVcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cclxuICAgKi9cclxuICBfb25BdXRvY29tcGxldGVSZW5kZXJHcm91cChncm91cE5hbWUsIGN1cnJlbnRWYWx1ZSkge1xyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcclxuICAgIGRpdi5jbGFzc05hbWUgPSAnc3VnZ2VzdGlvbi1ncm91cCdcclxuXHJcbiAgICBpZiAodGhpcy5fcmVuZGVyR3JvdXBUZW1wbGF0ZSkge1xyXG4gICAgICBkaXYuaW5uZXJIVE1MID0gdGhpcy5fcmVuZGVyR3JvdXBUZW1wbGF0ZSh7IGdyb3VwTmFtZSwgY3VycmVudFZhbHVlIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkaXYuaW5uZXJIVE1MID0gZ3JvdXBOYW1lXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRpdlxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSG9vayBvbiB0aGUgYXV0b2NvbXBsZXRlIGNvbnRhaW5lciByZW5kZXIgYW5kIGNoYW5nZSB0aGUgd2lkdGggYW5kIHRoZVxyXG4gICAqIGhlaWdodCBhY2NvcmRpbmcgdG8gdGhlIG9wdGlvbnNcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlucHV0XHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaW5wdXRSZWN0XHJcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29udGFpbmVyXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG1heEhlaWdodFxyXG4gICAqL1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gIF9vbkF1dG9jb21wbGV0ZUN1c3RvbWl6ZShpbnB1dCwgaW5wdXRSZWN0LCBjb250YWluZXIsIG1heEhlaWdodCkge1xyXG4gICAgaWYgKHRoaXMuX3BhcmFtcy53aWR0aCkge1xyXG4gICAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBgJHt0aGlzLl9wYXJhbXMud2lkdGh9cHhgXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX3BhcmFtcy5oZWlnaHQpIHtcclxuICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGAke3RoaXMuX3BhcmFtcy5oZWlnaHR9cHhgXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1heEhlaWdodCA8IDEwMCkge1xyXG4gICAgICBjb250YWluZXIuc3R5bGUudG9wID0gJydcclxuICAgICAgY29udGFpbmVyLnN0eWxlLmJvdHRvbSA9XHJcbiAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IC0gaW5wdXRSZWN0LmJvdHRvbSArIGlucHV0Lm9mZnNldEhlaWdodCArICdweCdcclxuICAgICAgY29udGFpbmVyLnN0eWxlLm1heEhlaWdodCA9IHRoaXMuX3BhcmFtcy5oZWlnaHRcclxuICAgICAgICA/IGAke3RoaXMuX3BhcmFtcy5oZWlnaHR9cHhgXHJcbiAgICAgICAgOiAnMjAwcHgnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMaXN0IHRvIHRoZSBpbnB1dCBjaGFuZ2VzIGFuZCB2YWxpZGF0ZSBpdFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtFdmVudH0gVGhlIGV2ZW50IG9iamVjdFxyXG4gICAqXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgd2hlbiB2YWxpZCAsIGZhbHNlIG90aGVyd2lzZVxyXG4gICAqL1xyXG4gIF9vbkNoYW5nZShldmVudCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSW5wdXQoZXZlbnQudGFyZ2V0KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRG8gdmFsaWRhdGUgdGhlIGdpdmVuIGlucHV0IGVsZW1lbnRcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXQgaW5wdXQgZWxlbWVudFxyXG4gICAqXHJcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSB3aGVuIHZhbGlkICwgZmFsc2Ugb3RoZXJ3aXNlXHJcbiAgICovXHJcbiAgX3ZhbGlkYXRlSW5wdXQoaW5wdXQpIHtcclxuICAgIGNvbnN0IGlzVmFsaWQgPSBpbnB1dC5jaGVja1ZhbGlkaXR5KClcclxuXHJcbiAgICBpZiAoIWlzVmFsaWQpIHtcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnYXV0b2NvbXBsZXRlLWlucHV0LWVycm9yJylcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnYXV0b2NvbXBsZXRlLWlucHV0LXN1Y2Nlc3MnKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSgnYXV0b2NvbXBsZXRlLWlucHV0LWVycm9yJylcclxuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCgnYXV0b2NvbXBsZXRlLWlucHV0LXN1Y2Nlc3MnKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc1ZhbGlkXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTdWdnZXN0aW9uRWRpdG9yXHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuLy8gc2VsZWN0aW9uIGNvbnN0YW50c1xyXG5leHBvcnQgY29uc3QgR1dfRVZFTlRfUk9XX1NFTEVDVCA9IDY5XHJcbmV4cG9ydCBjb25zdCBHV19FVkVOVF9ST1dfQ0xJQ0sgPSA1MDExXHJcbmV4cG9ydCBjb25zdCBHV19FVkVOVF9ST1dfRE9VQkxFX0NMSUNLID0gNTJcclxuZXhwb3J0IGNvbnN0IEdXX0VWRU5UX0NFTExfQ0xJQ0sgPSA1MDAxXHJcbmV4cG9ydCBjb25zdCBHV19FVkVOVF9DRUxMX0RPVUJMRV9DTElDSyA9IDUwMDJcclxuXHJcbi8vIGVkaXRpbmcgY29uc3RhbnRzXHJcbmV4cG9ydCBjb25zdCBHV19FVkVOVF9DRUxMX0VESVRJTkdfU1RBUlRFRCA9IDUwMDNcclxuZXhwb3J0IGNvbnN0IEdXX0VWRU5UX0NFTExfRURJVElOR19TVE9QUEVEID0gNTAwNFxyXG5leHBvcnQgY29uc3QgR1dfRVZFTlRfQ0VMTF9WQUxVRV9DSEFOR0VEID0gNTAwNVxyXG5leHBvcnQgY29uc3QgR1dfRVZFTlRfUk9XX0VESVRJTkdfU1RBUlRFRCA9IDUwMDZcclxuZXhwb3J0IGNvbnN0IEdXX0VWRU5UX1JPV19FRElUSU5HX1NUT1BQRUQgPSA1MDA3XHJcbmV4cG9ydCBjb25zdCBHV19FVkVOVF9ST1dfVkFMVUVfQ0hBTkdFRCA9IDUwMTJcclxuXHJcbi8vIHN0YXRlIGNvbnN0YW50c1xyXG5leHBvcnQgY29uc3QgR1dfRVZFTlRfR1JJRF9TVEFURV9DSEFOR0UgPSA1MDA4XHJcblxyXG4vLyByYW5nZSBzZWxlY3Rpb25cclxuZXhwb3J0IGNvbnN0IEdXX0VWRU5UX1JBTkdFX1NFTEVDVElPTl9DSEFOR0VEID0gNTAwOVxyXG5cclxuLy8ga2V5Ym9hcmQgZXZlbnRzXHJcbmV4cG9ydCBjb25zdCBHV19FVkVOVF9LRVlQUkVTUyA9IDUwMTBcclxuXHJcbi8vIGZpbHRlcnNcclxuZXhwb3J0IGNvbnN0IEdXX0VWRU5UX0ZJTFRFUl9DSEFOR0VEID0gNTAxM1xyXG5cclxuLy8gcmVhZHlcclxuZXhwb3J0IGNvbnN0IEdXX0VWRU5UX1JFQURZID0gNTAxNFxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cclxuLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19zZW5kRXZlbnQsIGd3X3BhcnNlTm9kZUZyb21FdmVudCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19lc2NhcGUsIGd3X2dldEdyaWQgfSBmcm9tICdhcGkvdXRpbGl0aWVzJ1xyXG5pbXBvcnQge1xyXG4gIEdXX0VWRU5UX0NFTExfRURJVElOR19TVEFSVEVELFxyXG4gIEdXX0VWRU5UX0NFTExfRURJVElOR19TVE9QUEVELFxyXG4gIEdXX0VWRU5UX0NFTExfVkFMVUVfQ0hBTkdFRCxcclxuICBHV19FVkVOVF9ST1dfRURJVElOR19TVEFSVEVELFxyXG4gIEdXX0VWRU5UX1JPV19FRElUSU5HX1NUT1BQRUQsXHJcbiAgR1dfRVZFTlRfUk9XX1ZBTFVFX0NIQU5HRUQsXHJcbn0gZnJvbSAnLi9jb25zdGFudHMnXHJcblxyXG5jb25zdCBDRUxMX0VESVRJTkdfRVZFTlRTX01BUCA9IHtcclxuICBjZWxsRWRpdGluZ1N0YXJ0ZWQ6IEdXX0VWRU5UX0NFTExfRURJVElOR19TVEFSVEVELFxyXG4gIGNlbGxFZGl0aW5nU3RvcHBlZDogR1dfRVZFTlRfQ0VMTF9FRElUSU5HX1NUT1BQRUQsXHJcbiAgY2VsbFZhbHVlQ2hhbmdlZDogR1dfRVZFTlRfQ0VMTF9WQUxVRV9DSEFOR0VELFxyXG59XHJcblxyXG5jb25zdCBST1dfRURJVElOR19FVkVOVFNfTUFQID0ge1xyXG4gIHJvd0VkaXRpbmdTdGFydGVkOiBHV19FVkVOVF9ST1dfRURJVElOR19TVEFSVEVELFxyXG4gIHJvd0VkaXRpbmdTdG9wcGVkOiBHV19FVkVOVF9ST1dfRURJVElOR19TVE9QUEVELFxyXG4gIHJvd1ZhbHVlQ2hhbmdlZDogR1dfRVZFTlRfUk9XX1ZBTFVFX0NIQU5HRUQsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbiBoYW5kbGVyIGZvciB0aGUgZ3JpZCBgY2VsbEVkaXRpbmdTdGFydGVkYCAsIGBjZWxsRWRpdGluZ1N0b3BwZWRgIGFuZFxyXG4gKiBgY2VsbFZhbHVlQ2hhbmdlZGAgZXZlbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBlICBUaGUgZXZlbnQgcGF5bG9hZFxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQuY2VsbEVkaXRpbmdTdGFydGVkXHJcbiAqIEBsaXN0ZW5zIGFnR3JpZC5jZWxsRWRpdGluZ1N0b3BwZWRcclxuICogQGxpc3RlbnMgYWdHcmlkLmNlbGxWYWx1ZUNoYW5nZWRcclxuICpcclxuICogQGZpcmVzIGd3LmNlbGxFZGl0aW5nU3RhcnRlZFxyXG4gKiBAZmlyZXMgZ3cuY2VsbEVkaXRpbmdTdG9wcGVkXHJcbiAqIEBmaXJlcyBndy5jZWxsVmFsdWVDaGFuZ2VkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfb25DZWxsRWRpdGluZ0V2ZW50KGlkLCBlKSB7XHJcbiAgY29uc3QgdmFsdWUgPSBlLmhhc093blByb3BlcnR5KCduZXdWYWx1ZScpXHJcbiAgICA/IGd3X2VzY2FwZShlLm5ld1ZhbHVlKVxyXG4gICAgOiBnd19lc2NhcGUoZS52YWx1ZSlcclxuICBjb25zdCBvbGRWYWx1ZSA9IGUuaGFzT3duUHJvcGVydHkoJ29sZFZhbHVlJylcclxuICAgID8gZ3dfZXNjYXBlKGUub2xkVmFsdWUpXHJcbiAgICA6IGUuaGFzT3duUHJvcGVydHkoJ25ld1ZhbHVlJylcclxuICAgID8gZ3dfZXNjYXBlKGUubmV3VmFsdWUpXHJcbiAgICA6IGd3X2VzY2FwZShlLnZhbHVlKVxyXG5cclxuICBpZiAodmFsdWUgPT0gb2xkVmFsdWUgJiYgZS50eXBlID09PSAnY2VsbFZhbHVlQ2hhbmdlZCcpIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFyc2VkID0gZ3dfcGFyc2VOb2RlRnJvbUV2ZW50KGUpXHJcbiAgY29uc3QgdHlwZSA9IGUudHlwZVxyXG4gIGNvbnN0IGNvbElkID0gZS5jb2x1bW4uY29sSWRcclxuXHJcbiAgaWYgKHBhcnNlZCkge1xyXG4gICAgZ3dfc2VuZEV2ZW50KFxyXG4gICAgICBnd19nZXRHcmlkKGlkKS5vcHRpb25zLmNvbnRleHQsXHJcbiAgICAgIHtcclxuICAgICAgICB0eXBlOiBgZ3cuJHt0eXBlfWAsXHJcbiAgICAgICAgZGV0YWlsOiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICByOiB7IC4uLnBhcnNlZCwgLi4ueyBjcjogZS5kYXRhIH0gfSwgLy8gcm93ICh3ZSBhbHdheXMgaW5jbHVkZSB0aGUgY2xpZW50IHJvdyBkYXRhKVxyXG4gICAgICAgICAgdjogdmFsdWUsIC8vIG5ldyB2YWx1ZVxyXG4gICAgICAgICAgbzogb2xkVmFsdWUsIC8vIG9sZCB2YWx1ZVxyXG4gICAgICAgICAgYzogY29sSWQsIC8vIGNvbHVtblxyXG4gICAgICAgIH0pLFxyXG4gICAgICB9LFxyXG4gICAgICBDRUxMX0VESVRJTkdfRVZFTlRTX01BUFt0eXBlXVxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGhhbmRsZXIgZm9yIHRoZSBncmlkIGByb3dFZGl0aW5nU3RhcnRlZGAgLCBgcm93RWRpdGluZ1N0b3BwZWRgIGFuZCBgcm93VmFsdWVDaGFuZ2VkYCBldmVudHNcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtPYmplY3R9IGUgIFRoZSBldmVudCBwYXlsb2FkXHJcbiAqXHJcbiAqIEBsaXN0ZW5zIGFnR3JpZC5yb3dFZGl0aW5nU3RhcnRlZFxyXG4gKiBAbGlzdGVucyBhZ0dyaWQucm93RWRpdGluZ1N0b3BwZWRcclxuICogQGxpc3RlbnMgYWdHcmlkLnJvd1ZhbHVlQ2hhbmdlZFxyXG4gKlxyXG4gKiBAZmlyZXMgZ3cucm93RWRpdGluZ1N0YXJ0ZWRcclxuICogQGZpcmVzIGd3LnJvd0VkaXRpbmdTdG9wcGVkXHJcbiAqIEBmaXJlcyBndy5yb3dWYWx1ZUNoYW5nZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19vblJvd0VkaXRpbmdFdmVudChpZCwgZSkge1xyXG4gIGNvbnN0IHBhcnNlZCA9IGd3X3BhcnNlTm9kZUZyb21FdmVudChlKVxyXG5cclxuICBpZiAocGFyc2VkKSB7XHJcbiAgICBjb25zdCB0eXBlID0gZS50eXBlXHJcbiAgICBnd19zZW5kRXZlbnQoXHJcbiAgICAgIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29udGV4dCxcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IGBndy4ke2UudHlwZX1gLFxyXG4gICAgICAgIGRldGFpbDogSlNPTi5zdHJpbmdpZnkoeyAuLi5wYXJzZWQsIC4uLnsgY3I6IGUuZGF0YSB9IH0pLCAvLyByb3cgKHdlIGFsd2F5cyBpbmNsdWRlIHRoZSBjbGllbnQgcm93IGRhdGEpXHJcbiAgICAgIH0sXHJcbiAgICAgIFJPV19FRElUSU5HX0VWRU5UU19NQVBbdHlwZV1cclxuICAgIClcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19zZW5kRXZlbnQgfSBmcm9tICcuL3V0aWxpdGllcydcclxuaW1wb3J0IHsgR1dfRVZFTlRfRklMVEVSX0NIQU5HRUQgfSBmcm9tICcuL2NvbnN0YW50cydcclxuXHJcbi8qKlxyXG4gKiBBbiBoYW5kbGVyIGZvciB0aGUgZ3JpZCBgZmlsdGVyQ2hhbmdlZGAgZXZlbnRcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IHRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtPYmplY3R9IGUgVGhlIGV2ZW50J3MgcGF5bG9hZFxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQuZmlsdGVyQ2hhbmdlZFxyXG4gKiBAZmlyZXMgZ3cuZmlsdGVyQ2hhbmdlZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X29uRmlsdGVyQ2hhbmdlZChpZCwgZSkge1xyXG4gIGNvbnN0IGNvbnRleHQgPSBlLmFwaS5ncmlkT3B0aW9uc1dyYXBwZXIuZ3JpZE9wdGlvbnMuY29udGV4dFxyXG5cclxuICBnd19zZW5kRXZlbnQoXHJcbiAgICBjb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cuZmlsdGVyQ2hhbmdlZCcsXHJcbiAgICAgIGRldGFpbDoge30sXHJcbiAgICB9LFxyXG4gICAgR1dfRVZFTlRfRklMVEVSX0NIQU5HRURcclxuICApXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gIGd3X29uUm93Q2xpY2tlZCxcclxuICBnd19vblJvd0RvdWJsZUNsaWNrZWQsXHJcbiAgZ3dfb25TZWxlY3Rpb25DaGFuZ2VkLFxyXG4gIGd3X29uQ2VsbENsaWNrRXZlbnQsXHJcbiAgZ3dfb25SYW5nZVNlbGVjdGlvbkNoYW5nZWQsXHJcbn0gZnJvbSAnLi9zZWxlY3Rpb25zJ1xyXG5pbXBvcnQgeyBnd19vbkNlbGxFZGl0aW5nRXZlbnQsIGd3X29uUm93RWRpdGluZ0V2ZW50IH0gZnJvbSAnLi9lZGl0aW5nJ1xyXG5pbXBvcnQgeyBnd19vblJlYWR5RXZlbnQgfSBmcm9tICcuL3JlYWR5J1xyXG5pbXBvcnQgeyBnd19kZWJvdW5jZSB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19vbkZpbHRlckNoYW5nZWQgfSBmcm9tICcuL2ZpbHRlcnMnXHJcblxyXG5leHBvcnQge1xyXG4gIGd3X29uUm93Q2xpY2tlZCxcclxuICBnd19vblJvd0RvdWJsZUNsaWNrZWQsXHJcbiAgZ3dfb25TZWxlY3Rpb25DaGFuZ2VkLFxyXG4gIGd3X29uUmFuZ2VTZWxlY3Rpb25DaGFuZ2VkLFxyXG4gIGd3X29uQ2VsbENsaWNrRXZlbnQsXHJcbiAgZ3dfb25DZWxsRWRpdGluZ0V2ZW50LFxyXG4gIGd3X29uUm93RWRpdGluZ0V2ZW50LFxyXG4gIGd3X29uUmVhZHlFdmVudCxcclxuICBnd19kZWJvdW5jZSxcclxuICBnd19vbkZpbHRlckNoYW5nZWQsXHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19zZW5kRXZlbnQgfSBmcm9tICcuL3V0aWxpdGllcydcclxuaW1wb3J0IHsgR1dfRVZFTlRfS0VZUFJFU1MgfSBmcm9tICcuL2NvbnN0YW50cydcclxuaW1wb3J0IHsgZ3dfZ2V0R3JpZCB9IGZyb20gJ2FwaS91dGlsaXRpZXMnXHJcblxyXG4vKipcclxuICogQ29tcG9zZSBhIG1vZGVsIG9mIHRoZSBrZXlkb3duIGV2ZW50IGFuZCBzZW5kIGl0IHRvIEJCalxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgIHRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtFdmVudH0ga2V5ZG93bkV2ZW50IGtleWRvd24gZXZlbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19vbktleWRvd24oaWQsIGtleWRvd25FdmVudCkge1xyXG4gIGd3X3NlbmRFdmVudChcclxuICAgIGd3X2dldEdyaWQoaWQpLm9wdGlvbnMuY29udGV4dCxcclxuICAgIHtcclxuICAgICAgdHlwZTogYGd3LmtleXByZXNzYCxcclxuICAgICAgZGV0YWlsOiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgYzoga2V5ZG93bkV2ZW50LmtleSxcclxuICAgICAgICBrYzoga2V5ZG93bkV2ZW50LndoaWNoIHx8IE51bWJlcihrZXlkb3duRXZlbnQua2V5Q29kZSksXHJcbiAgICAgICAgYWs6IGtleWRvd25FdmVudC5hbHRLZXksXHJcbiAgICAgICAgc2s6IGtleWRvd25FdmVudC5zaGlmdEtleSxcclxuICAgICAgICBjazoga2V5ZG93bkV2ZW50LmN0cmxLZXksXHJcbiAgICAgIH0pLFxyXG4gICAgfSxcclxuICAgIEdXX0VWRU5UX0tFWVBSRVNTXHJcbiAgKVxyXG59XHJcbiIsIi8qXHJcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBCQmpHcmlkRXhXaWRnZXQgcGx1Z2luLlxyXG4gKiAoYykgQmFzaXMgRXVyb3BlIDxldUBiYXNpcy5jbG91ZD5cclxuICpcclxuICogRm9yIHRoZSBmdWxsIGNvcHlyaWdodCBhbmQgbGljZW5zZSBpbmZvcm1hdGlvbiwgcGxlYXNlIHZpZXcgdGhlIExJQ0VOU0VcclxuICogZmlsZSB0aGF0IHdhcyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgc291cmNlIGNvZGUuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ3dfZGVib3VuY2UsIGd3X3NlbmRFdmVudCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19vblN0YXRlQ2hhbmdlZCB9IGZyb20gJy4vc3RhdGUnXHJcbmltcG9ydCB7IGd3X29uS2V5ZG93biB9IGZyb20gJy4va2V5Ym9hcmQnXHJcbmltcG9ydCB7IGd3X2dldEdyaWQgfSBmcm9tICdhcGkvdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBHV19FVkVOVF9SRUFEWSB9IGZyb20gJy4vY29uc3RhbnRzJ1xyXG5cclxuLyoqXHJcbiAqIE9uIFJlYWR5IEV2ZW50XHJcbiAqXHJcbiAqIFRoZSBtZXRob2Qgd2lsbCBpZ25vcmUgZmlyc3QgcmVhZHkgZXZlbnQgYW5kIHRoZW4gcmVnaXN0ZXIgYSBkZWJvdW5jZWQgc3RhdGVcclxuICogY2FsbGJhY2sgdG8gc2VuZCBzdGF0ZSBldmVudHMgdG8gQkJqXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgZ3JpZCdzIGlkXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBlICBUaGUgZXZlbnQgcGF5bG9hZFxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQuZ3JpZFJlYWR5XHJcbiAqIEBmaXJlcyBndy5yZWFkeVxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19vblJlYWR5RXZlbnQoaWQsIF9lKSB7XHJcbiAgY29uc3QgZ3JpZCA9IGd3X2dldEdyaWQoaWQpXHJcblxyXG4gIGd3X3NlbmRFdmVudChcclxuICAgIGdyaWQub3B0aW9ucy5jb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cuZ3JpZFJlYWR5JyxcclxuICAgICAgZGV0YWlsOiB7fSxcclxuICAgIH0sXHJcbiAgICBHV19FVkVOVF9SRUFEWVxyXG4gIClcclxuXHJcbiAgLy8gcmVnaXN0ZXIgc3RhdGUgZGVib3VuY2UgbW9uaXRvclxyXG4gIGNvbnN0IHN0YXRlRGVib3VuY2UgPSBnd19kZWJvdW5jZShjaGFuZ2VFdmVudCA9PiB7XHJcbiAgICBnd19vblN0YXRlQ2hhbmdlZChpZCwgY2hhbmdlRXZlbnQpXHJcbiAgfSwgNTAwKVxyXG5cclxuICA7W1xyXG4gICAgJ3NvcnRDaGFuZ2VkJyxcclxuICAgICdmaWx0ZXJDaGFuZ2VkJyxcclxuICAgICdjb2x1bW5WaXNpYmxlJyxcclxuICAgICdjb2x1bW5QaW5uZWQnLFxyXG4gICAgJ2NvbHVtblJlc2l6ZWQnLFxyXG4gICAgJ2NvbHVtbk1vdmVkJyxcclxuICAgICduZXdDb2x1bW5zTG9hZGVkJyxcclxuICAgICdncmlkQ29sdW1uc0NoYW5nZWQnLFxyXG4gICAgJ2Rpc3BsYXllZENvbHVtbnNDaGFuZ2VkJyxcclxuICAgICd2aXJ0dWFsQ29sdW1uc0NoYW5nZWQnLFxyXG4gICAgJ2NvbHVtbkV2ZXJ5dGhpbmdDaGFuZ2VkJyxcclxuICAgIC8vJ2dyaWRTaXplQ2hhbmdlZCcsXHJcbiAgICAnZXhwYW5kT3JDb2xsYXBzZUFsbCcsXHJcbiAgICAvLyd0b29sUGFuZWxWaXNpYmxlQ2hhbmdlZCdcclxuICBdLmZvckVhY2goZXZlbnQgPT4ge1xyXG4gICAgZ3JpZC5vcHRpb25zLmFwaS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBzdGF0ZURlYm91bmNlKVxyXG4gIH0pXHJcblxyXG4gIC8vIGNvbGxlY3Qga2V5IGRvd25zIGluZm9ybWF0aW9uIHRvIGJlIHJlcG9ydGVkIHdpdGggb3RoZXIgZXZlbnRzXHJcbiAgZ3JpZC5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25FdmVudCA9PiB7XHJcbiAgICBncmlkLmtleXMgPSB7XHJcbiAgICAgIGM6IGtleWRvd25FdmVudC5rZXksXHJcbiAgICAgIGtjOiBrZXlkb3duRXZlbnQud2hpY2ggfHwgTnVtYmVyKGtleWRvd25FdmVudC5rZXlDb2RlKSxcclxuICAgICAgYWs6IGtleWRvd25FdmVudC5hbHRLZXksXHJcbiAgICAgIHNrOiBrZXlkb3duRXZlbnQuc2hpZnRLZXksXHJcbiAgICAgIGNrOiBrZXlkb3duRXZlbnQuY3RybEtleSxcclxuICAgIH1cclxuICB9KVxyXG5cclxuICAvLyBjbGVhciBjb2xsZWN0IGtleWRvd24gaW5mb3JtYXRpb25cclxuICBncmlkLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgJ2tleXVwJyxcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgZ3dfZGVib3VuY2UoX2UgPT4ge1xyXG4gICAgICBncmlkLmtleXMgPSBudWxsXHJcbiAgICB9LCAyNTApXHJcbiAgKVxyXG5cclxuICAvLyByZWdpc3RlciBrZXlib2FyZCBkZWJvdW5jZSBtb25pdG9yXHJcblxyXG4gIGdyaWQuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAna2V5ZG93bicsXHJcbiAgICBnd19kZWJvdW5jZShrZXlkb3duRXZlbnQgPT4ge1xyXG4gICAgICBnd19vbktleWRvd24oaWQsIGtleWRvd25FdmVudClcclxuICAgIH0sIDUwMClcclxuICApXHJcblxyXG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChgJHtpZH0tcmVhZHlgLCB7IGRldGFpbDogZ3JpZCB9KSlcclxufVxyXG4iLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY2xvdWQ+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGd3X3NlbmRFdmVudCwgZ3dfcGFyc2VOb2RlRnJvbUV2ZW50IH0gZnJvbSAnLi91dGlsaXRpZXMnXHJcbmltcG9ydCB7IGd3X2VzY2FwZSwgZ3dfZ2V0R3JpZCB9IGZyb20gJ2FwaS91dGlsaXRpZXMnXHJcbmltcG9ydCB7XHJcbiAgR1dfRVZFTlRfUk9XX0NMSUNLLFxyXG4gIEdXX0VWRU5UX1JPV19ET1VCTEVfQ0xJQ0ssXHJcbiAgR1dfRVZFTlRfUk9XX1NFTEVDVCxcclxuICBHV19FVkVOVF9DRUxMX0NMSUNLLFxyXG4gIEdXX0VWRU5UX0NFTExfRE9VQkxFX0NMSUNLLFxyXG4gIEdXX0VWRU5UX1JBTkdFX1NFTEVDVElPTl9DSEFOR0VELFxyXG59IGZyb20gJy4vY29uc3RhbnRzJ1xyXG5cclxuY29uc3QgQ0VMTF9DTElDS0lOR19FVkVOVFNfTUFQID0ge1xyXG4gIGNlbGxDbGlja2VkOiBHV19FVkVOVF9DRUxMX0NMSUNLLFxyXG4gIGNlbGxEb3VibGVDbGlja2VkOiBHV19FVkVOVF9DRUxMX0RPVUJMRV9DTElDSyxcclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIGhhbmRsZXIgZm9yIHRoZSBncmlkIGByb3dEb3VibGVDbGlja2VkYCBldmVudFxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gd2lsbCBzZW5kIGEgYmJqIGV2ZW50IHdpdGggYEdXX05PREVgIGFzIHBheWxvYWRcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IGUgVGhlIGV2ZW50J3MgcGF5bG9hZFxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQucm93RG91YmxlQ2xpY2tlZFxyXG4gKiBAZmlyZXMgZ3cucm93RG91YmxlQ2xpY2tcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19vblJvd0RvdWJsZUNsaWNrZWQoZSkge1xyXG4gIGNvbnN0IGNvbnRleHQgPSBlLmFwaS5ncmlkT3B0aW9uc1dyYXBwZXIuZ3JpZE9wdGlvbnMuY29udGV4dFxyXG5cclxuICBnd19zZW5kRXZlbnQoXHJcbiAgICBjb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cucm93RG91YmxlQ2xpY2snLFxyXG4gICAgICBkZXRhaWw6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBrOiBnd19nZXRHcmlkKGNvbnRleHQuaWQpLmtleXMsXHJcbiAgICAgIH0pLFxyXG4gICAgfSxcclxuICAgIEdXX0VWRU5UX1JPV19ET1VCTEVfQ0xJQ0tcclxuICApXHJcbn1cclxuLyoqXHJcbiAqIEEgaGFuZGxlciBmb3IgdGhlIGdyaWQgYHJvd0NsaWNrZWRgIGV2ZW50XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBlICBUaGUgZXZlbnQgcGF5bG9hZFxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQucm93Q2xpY2tlZFxyXG4gKiBAZmlyZXMgZ3cucm93Q2xpY2tcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19vblJvd0NsaWNrZWQoZSkge1xyXG4gIGNvbnN0IGNvbnRleHQgPSBlLmFwaS5ncmlkT3B0aW9uc1dyYXBwZXIuZ3JpZE9wdGlvbnMuY29udGV4dFxyXG5cclxuICBnd19zZW5kRXZlbnQoXHJcbiAgICBjb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cucm93Q2xpY2snLFxyXG4gICAgICBkZXRhaWw6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBrOiBnd19nZXRHcmlkKGNvbnRleHQuaWQpLmtleXMsXHJcbiAgICAgIH0pLFxyXG4gICAgfSxcclxuICAgIEdXX0VWRU5UX1JPV19DTElDS1xyXG4gIClcclxufVxyXG5cclxuLyoqXHJcbiAqIEEgaGFuZGxlciBmb3IgdGhlIGdyaWQgYHNlbGVjdGlvbkNoYW5nZWRgIGV2ZW50XHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBlICBUaGUgZXZlbnQgcGF5bG9hZFxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQuc2VsZWN0aW9uQ2hhbmdlZFxyXG4gKiBAZmlyZXMgZ3cucm93U2VsZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfb25TZWxlY3Rpb25DaGFuZ2VkKGUpIHtcclxuICBjb25zdCBjb250ZXh0ID0gZS5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmdyaWRPcHRpb25zLmNvbnRleHRcclxuICBnd19zZW5kRXZlbnQoXHJcbiAgICBjb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cucm93U2VsZWN0JyxcclxuICAgICAgZGV0YWlsOiAnJyxcclxuICAgIH0sXHJcbiAgICBHV19FVkVOVF9ST1dfU0VMRUNUXHJcbiAgKVxyXG59XHJcblxyXG4vKipcclxuICogQSBoYW5kbGVyIGZvciB0aGUgZ3JpZCBgcmFuZ2VTZWxlY3Rpb25DaGFuZ2VkYCBldmVudFxyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZVxyXG4gKlxyXG4gKiBAbGlzdGVucyBhZ0dyaWQucmFuZ2VTZWxlY3Rpb25DaGFuZ2VkXHJcbiAqIEBmaXJlcyBndy5yYW5nZVNlbGVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X29uUmFuZ2VTZWxlY3Rpb25DaGFuZ2VkKGUpIHtcclxuICBjb25zdCBjb250ZXh0ID0gZS5hcGkuZ3JpZE9wdGlvbnNXcmFwcGVyLmdyaWRPcHRpb25zLmNvbnRleHRcclxuICBnd19zZW5kRXZlbnQoXHJcbiAgICBjb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cucmFuZ2VTZWxlY3Rpb24nLFxyXG4gICAgICBkZXRhaWw6ICcnLFxyXG4gICAgfSxcclxuICAgIEdXX0VWRU5UX1JBTkdFX1NFTEVDVElPTl9DSEFOR0VEXHJcbiAgKVxyXG59XHJcblxyXG4vKipcclxuICogQSBoYW5kbGVyIGZvciB0aGUgZ3JpZCBgY2VsbENsaWNrRXZlbnRgICYgYGNlbGxEb3VibGVDbGlja2VkYCBldmVudFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gaWQgVGhlIGdyaWQncyBpZFxyXG4gKiBAcGFyYW0ge09iamVjdH0gZSAgVGhlIGV2ZW50IHBheWxvYWRcclxuICpcclxuICogQGxpc3RlbnMgYWdHcmlkLmNlbGxDbGlja0V2ZW50XHJcbiAqIEBsaXN0ZW5zIGFnR3JpZC5jZWxsRG91YmxlQ2xpY2tlZFxyXG4gKlxyXG4gKiBAZmlyZXMgZ3cuY2VsbENsaWNrZWRcclxuICogQGZpcmVzIGd3LmNlbGxEb3VibGVDbGlja2VkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfb25DZWxsQ2xpY2tFdmVudChlKSB7XHJcbiAgY29uc3QgY29udGV4dCA9IGUuYXBpLmdyaWRPcHRpb25zV3JhcHBlci5ncmlkT3B0aW9ucy5jb250ZXh0XHJcbiAgY29uc3QgaWQgPSBjb250ZXh0LmlkXHJcbiAgY29uc3QgcGFyc2VkID0gZ3dfcGFyc2VOb2RlRnJvbUV2ZW50KGUpXHJcblxyXG4gIGlmIChwYXJzZWQpIHtcclxuICAgIGNvbnN0IHR5cGUgPSBlLnR5cGVcclxuICAgIGd3X3NlbmRFdmVudChcclxuICAgICAgY29udGV4dCxcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IGBndy4ke2UudHlwZX1gLFxyXG4gICAgICAgIGRldGFpbDogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgICAgcjogcGFyc2VkLCAvLyByb3dcclxuICAgICAgICAgIHY6IGd3X2VzY2FwZShlLnZhbHVlKSwgLy8gbmV3IHZhbHVlXHJcbiAgICAgICAgICBvOiBnd19lc2NhcGUoZS52YWx1ZSksIC8vIG9kbCB2YWx1ZVxyXG4gICAgICAgICAgYzogZS5jb2x1bW4uY29sSWQsIC8vIGNvbHVtbnNcclxuICAgICAgICAgIGs6IGd3X2dldEdyaWQoaWQpLmtleXMsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIH0sXHJcbiAgICAgIENFTExfQ0xJQ0tJTkdfRVZFTlRTX01BUFt0eXBlXVxyXG4gICAgKVxyXG4gIH1cclxufVxyXG4iLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY2xvdWQ+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGd3X3NlbmRFdmVudCB9IGZyb20gJy4vdXRpbGl0aWVzJ1xyXG5pbXBvcnQgeyBnd19nZXRHcmlkIH0gZnJvbSAnYXBpL3V0aWxpdGllcydcclxuaW1wb3J0IHsgR1dfRVZFTlRfR1JJRF9TVEFURV9DSEFOR0UgfSBmcm9tICcuL2NvbnN0YW50cydcclxuXHJcbi8qKlxyXG4gKiBBbiBoYW5kbGVyIGZvciB0aGUgZ3JpZCBgc3RhdGVDaGFuZ2VkYCBldmVudHNcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGlkIFRoZSBncmlkJ3MgaWRcclxuICogQHBhcmFtIHtPYmplY3R9IGUgIFRoZSBldmVudCBwYXlsb2FkXHJcbiAqXHJcbiAqIEBsaXN0ZW5zIGFnR3JpZC5zdGF0ZUNoYW5nZWRcclxuICogQGxpc3RlbnMgYWdHcmlkLnJvd0VkaXRpbmdTdG9wcGVkXHJcbiAqXHJcbiAqIEBmaXJlcyBndy5zdGF0ZUNoYW5nZWRcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfb25TdGF0ZUNoYW5nZWQoaWQsIF9lKSB7XHJcbiAgZ3dfc2VuZEV2ZW50KFxyXG4gICAgZ3dfZ2V0R3JpZChpZCkub3B0aW9ucy5jb250ZXh0LFxyXG4gICAge1xyXG4gICAgICB0eXBlOiAnZ3cuc3RhdGVDaGFuZ2VkJyxcclxuICAgICAgZGV0YWlsOiBbXSxcclxuICAgIH0sXHJcbiAgICBHV19FVkVOVF9HUklEX1NUQVRFX0NIQU5HRVxyXG4gIClcclxufVxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cclxuLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgeyBnd19nZXREb2N1bWVudCB9IGZyb20gJ2FwaS91dGlsaXRpZXMnXHJcblxyXG4vKiogaHR0cHM6Ly9kYXZpZHdhbHNoLm5hbWUvamF2YXNjcmlwdC1kZWJvdW5jZS1mdW5jdGlvbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZGVib3VuY2UoZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XHJcbiAgdmFyIHRpbWVvdXRcclxuICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY29udGV4dCA9IHRoaXMsXHJcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHNcclxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aW1lb3V0ID0gbnVsbFxyXG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xyXG4gICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXRcclxuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KVxyXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpXHJcbiAgICBpZiAoY2FsbE5vdykge1xyXG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogU2VuZCBhbiBldmVudCB0byBCQmogc2lkZVxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBjb250ZXh0IHRoZSBncmlkJ3MgY29udGV4dFxyXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgdGhlIGV2ZW50IHBheWxvYWRcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50SWQgdGhlIGV2ZW50J3MgaWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnd19zZW5kRXZlbnQoY29udGV4dCwgcGF5bG9hZCA9IHt9LCBldmVudElkID0gW10pIHtcclxuICBjb25zdCByZWdpc3RlcmVkSW50ZXJlc3RzID0gY29udGV4dC5pbnRlcmVzdHMgfHwgW11cclxuXHJcbiAgaWYgKHJlZ2lzdGVyZWRJbnRlcmVzdHMuaW5jbHVkZXMoZXZlbnRJZCkpIHtcclxuICAgIGNvbnN0IGRpdiA9IGd3X2dldERvY3VtZW50KCkuZ2V0RWxlbWVudEJ5SWQoYCR7Y29udGV4dC5pZH1gKVxyXG5cclxuICAgIC8vIGJ1aSBvciB3ZWJhcHBcclxuICAgIGlmIChbNSwgNl0uaW5kZXhPZihjb250ZXh0LnBsYXRmb3JtKSA+IC0xKSB7XHJcbiAgICAgIGNvbnN0IGh0bWx2aWV3SWQgPSBgaHRtbHZpZXctJHtjb250ZXh0LmlkfWBcclxuICAgICAgY29uc3QgY29udGFpbmVyID0gZ3dfZ2V0RG9jdW1lbnQoKS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGh0bWx2aWV3SWQpWzBdXHJcbiAgICAgIGlmICh0eXBlb2YgY29udGFpbmVyLmJhc2lzRGlzcGF0Y2hDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGNvbnRhaW5lci5iYXNpc0Rpc3BhdGNoQ3VzdG9tRXZlbnQoZGl2LCBwYXlsb2FkKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5iYXNpc0Rpc3BhdGNoQ3VzdG9tRXZlbnQoZGl2LCBwYXlsb2FkKVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aW5kb3cuYmFzaXNEaXNwYXRjaEN1c3RvbUV2ZW50KGRpdiwgcGF5bG9hZClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBCQmpHcmlkRXhXaWRnZXRSb3dcclxuICpcclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGlkXHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbmRleFxyXG4gKiBAcHJvcGVydHkge251bWJlcn0gcGFyZW50S2V5XHJcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjaGlsZEluZGV4XHJcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2VsZWN0ZWRcclxuICovXHJcblxyXG4vKipcclxuICogUGFyc2UgYSBub2RlIGFzIEJCakdyaWRFeFdpZGdldFJvd1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBhZyBncmlkIG5vZGVcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHQgIGFnIGdyaWQgY29udGV4dFxyXG4gKlxyXG4gKiBAcmV0dXJucyB7QkJqR3JpZEV4V2lkZ2V0Um93fEJvb2xlYW59IG9iamVjdCBmb3JtYXR0ZWQgYXMgQkJqR3JpZEV4V2lkZ2V0Um93LlxyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlIGlmIHRoZSBub2RlIGlzIGZvciBncm91cCBub2RlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfcGFyc2VOb2RlKG5vZGUsIGNvbnRleHQpIHtcclxuICBpZiAodHJ1ZSA9PT0gbm9kZS5ncm91cCkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfSAvLyB3ZSBkbyBub3QgbWFuYWdlIGdyb3Vwc1xyXG5cclxuICBjb25zdCBnZXRSb3dOb2RlSWQgPSBub2RlLnJvd1Bpbm5lZCA/ICdfX1JPV19JTkRFWCcgOiBjb250ZXh0LmdldFJvd05vZGVJZFxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgaTpcclxuICAgICAgY29udGV4dC5oYXNPd25Qcm9wZXJ0eSgnZ2V0Um93Tm9kZUlkJykgJiYgbm9kZS5kYXRhW2dldFJvd05vZGVJZF1cclxuICAgICAgICA/IG5vZGUuZGF0YVtnZXRSb3dOb2RlSWRdXHJcbiAgICAgICAgOiBub2RlLmlkLCAvLyBpZFxyXG4gICAgeDogbm9kZS5yb3dJbmRleCwgLy8gaW5kZXhcclxuICAgIHA6XHJcbiAgICAgIG5vZGUuaGFzT3duUHJvcGVydHkoJ3BhcmVudCcpICYmIG5vZGUucGFyZW50Lmhhc093blByb3BlcnR5KCdrZXknKVxyXG4gICAgICAgID8gbm9kZS5wYXJlbnQua2V5XHJcbiAgICAgICAgOiAnJywgLy8gcGFyZW50IGtleVxyXG4gICAgYzogbm9kZS5yb3dQaW5uZWQgPyAtMSA6IG5vZGUuY2hpbGRJbmRleCwgLy9jaGlsZEluZGV4XHJcbiAgICBzOiBCb29sZWFuKG5vZGUuc2VsZWN0ZWQpLCAvLyBzZWxlY3RlZFxyXG4gICAgLy8gY2xpZW50IHJvd1xyXG4gICAgY3I6XHJcbiAgICAgIGNvbnRleHQuaGFzT3duUHJvcGVydHkoJ2luY2x1ZGVDbGllbnRSb3dEYXRhJykgJiZcclxuICAgICAgY29udGV4dFsnaW5jbHVkZUNsaWVudFJvd0RhdGEnXSA9PT0gdHJ1ZVxyXG4gICAgICAgID8gbm9kZS5kYXRhXHJcbiAgICAgICAgOiBudWxsLFxyXG4gICAgcHA6IG5vZGUucm93UGlubmVkLCAvLyBwaW4gcG9zaXRpb25cclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBub2RlIGZyb20gZXZlbnRcclxuICpcclxuICogUGFyc2Ugbm9kZSBpbiB0aGUgcGFTc2VkIGV2ZW50IGFzIEJCakdyaWRFeFdpZGdldFJvd1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7QkJqR3JpZEV4V2lkZ2V0Um93fVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGd3X3BhcnNlTm9kZUZyb21FdmVudChlKSB7XHJcbiAgcmV0dXJuIGd3X3BhcnNlTm9kZShlLm5vZGUsIGUuY29udGV4dClcclxufVxyXG4iLCIvKlxyXG4gKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQkJqR3JpZEV4V2lkZ2V0IHBsdWdpbi5cclxuICogKGMpIEJhc2lzIEV1cm9wZSA8ZXVAYmFzaXMuY2xvdWQ+XHJcbiAqXHJcbiAqIEZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFXHJcbiAqIGZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBCdWlsZCBhIGpzIGZ1bmN0aW9uIGZyb20gdGhlIGdpdmVuIGV4cHJlc3Npb25cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV4cHJlc3Npb25cclxuICpcclxuICogQHJldHVybiB7RnVuY3Rpb259XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfY29tcGlsZUV4cHJlc3Npb24oZXhwcmVzc2lvbikge1xyXG4gIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgZXhwcmVzc2lvbiBjYWNoZSBoYXMgYmVlbiBpbml0aWFsaXplZFxyXG4gIGlmICh0eXBlb2YgZ3dfY29tcGlsZUV4cHJlc3Npb24uZXhwcmVzc2lvbkNhY2hlID09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBnd19jb21waWxlRXhwcmVzc2lvbi5leHByZXNzaW9uQ2FjaGUgPSBbXVxyXG4gIH1cclxuXHJcbiAgLy8gY2hlY2sgY2FjaGUgZmlyc3RcclxuICBpZiAoZ3dfY29tcGlsZUV4cHJlc3Npb24uZXhwcmVzc2lvbkNhY2hlW2V4cHJlc3Npb25dKSB7XHJcbiAgICByZXR1cm4gZ3dfY29tcGlsZUV4cHJlc3Npb24uZXhwcmVzc2lvbkNhY2hlW2V4cHJlc3Npb25dXHJcbiAgfVxyXG5cclxuICAvLyBpZiBub3QgZm91bmQgaW4gY2FjaGUsIHJldHVybiB0aGUgZnVuY3Rpb25cclxuICBsZXQgZnVuY3Rpb25Cb2R5ID0gbnVsbFxyXG4gIC8vIGlmIHRoZSBleHByZXNzaW9uIGhhcyB0aGUgJ3JldHVybicgd29yZCBpbiBpdCwgdGhlbiB1c2UgYXMgaXMsXHJcbiAgLy8gaWYgbm90LCB0aGVuIHdyYXAgaXQgd2l0aCByZXR1cm4gYW5kICc7JyB0byBtYWtlIGEgZnVuY3Rpb25cclxuICBpZiAoZXhwcmVzc2lvbi5pbmRleE9mKCdyZXR1cm4nKSA+PSAwKSB7XHJcbiAgICBmdW5jdGlvbkJvZHkgPSBleHByZXNzaW9uXHJcbiAgfSBlbHNlIHtcclxuICAgIGZ1bmN0aW9uQm9keSA9ICdyZXR1cm4gJyArIGV4cHJlc3Npb24gKyAnOydcclxuICB9XHJcblxyXG4gIGNvbnN0IHRoZUZ1bmN0aW9uID0gbmV3IEZ1bmN0aW9uKFxyXG4gICAgJ3gsIGN0eCwgb2xkVmFsdWUsIG5ld1ZhbHVlLCB2YWx1ZSwgbm9kZSwgZGF0YSwgY29sRGVmLCByb3dJbmRleCwgYXBpLCBjb2x1bW5BcGksIGdldFZhbHVlLCBjb2x1bW4sIGNvbHVtbkdyb3VwJyxcclxuICAgIGZ1bmN0aW9uQm9keVxyXG4gIClcclxuXHJcbiAgLy8gc3RvcmUgaW4gY2FjaGVcclxuICBnd19jb21waWxlRXhwcmVzc2lvbi5leHByZXNzaW9uQ2FjaGVbZXhwcmVzc2lvbl0gPSB0aGVGdW5jdGlvblxyXG5cclxuICByZXR1cm4gdGhlRnVuY3Rpb25cclxufVxyXG5cclxuLyoqXHJcbiAqIEJ1aWxkIGFuZCBleGVjdXRlZCBhbiBleHByZXNzaW9uIHdpdGggdGhlIHBhc3NlZCBwYXJhbXNcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV4cHJlc3Npb25cclxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ3dfZXhlY3V0ZUV4cHJlc3Npb24oZXhwcmVzc2lvbiwgcGFyYW1zKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGphdmFTY3JpcHRGdW5jdGlvbiA9IGd3X2NvbXBpbGVFeHByZXNzaW9uKGV4cHJlc3Npb24pXHJcbiAgICAvLyB0aGUgcGFyYW1zIGRvbid0IGhhdmUgYWxsIHRoZXNlIHZhbHVlcywgcmF0aGVyIHdlIGFkZCBldmVyeSBwb3NzaWJsZVxyXG4gICAgLy8gdmFsdWUgYSBwYXJhbXMgY2FuIGhhdmUsIHdoaWNoIG1ha2VzIHdoYXRldmVyIGlzIGluIHRoZSBwYXJhbXMgYXZhaWxhYmxlLlxyXG4gICAgY29uc3QgcmVzdWx0ID0gamF2YVNjcmlwdEZ1bmN0aW9uKFxyXG4gICAgICBwYXJhbXMudmFsdWUsXHJcbiAgICAgIHBhcmFtcy5jb250ZXh0LFxyXG4gICAgICBwYXJhbXMub2xkVmFsdWUsXHJcbiAgICAgIHBhcmFtcy5uZXdWYWx1ZSxcclxuICAgICAgcGFyYW1zLnZhbHVlLFxyXG4gICAgICBwYXJhbXMubm9kZSxcclxuICAgICAgcGFyYW1zLmRhdGEsXHJcbiAgICAgIHBhcmFtcy5jb2xEZWYsXHJcbiAgICAgIHBhcmFtcy5yb3dJbmRleCxcclxuICAgICAgcGFyYW1zLmFwaSxcclxuICAgICAgcGFyYW1zLmNvbHVtbkFwaSxcclxuICAgICAgcGFyYW1zLmdldFZhbHVlLFxyXG4gICAgICBwYXJhbXMuY29sdW1uLFxyXG4gICAgICBwYXJhbXMuY29sdW1uR3JvdXBcclxuICAgIClcclxuICAgIHJldHVybiByZXN1bHRcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAvLyB0aGUgZXhwcmVzc2lvbiBmYWlsZWQsIHdoaWNoIGNhbiBoYXBwZW4sIGFzIGl0J3MgdGhlIGNsaWVudCB0aGF0XHJcbiAgICAvLyBwcm92aWRlcyB0aGUgZXhwcmVzc2lvbi4gc28gcHJpbnQgYSBuaWNlIG1lc3NhZ2VcclxuICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzaW5nIG9mIHRoZSBleHByZXNzaW9uIGZhaWxlZCcpXHJcbiAgICBjb25zb2xlLmxvZygnRXhwcmVzc2lvbiA9ICcgKyBleHByZXNzaW9uKVxyXG4gICAgY29uc29sZS5sb2coJ1BhcmFtcyA9JywgcGFyYW1zKVxyXG4gICAgY29uc29sZS5sb2coJ0V4Y2VwdGlvbiA9ICcgKyBlKVxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbn1cclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG5pbXBvcnQgJ2V4cG9zZS1sb2FkZXI/QkJqLk1hc2tzIWJiai1tYXNrcy9kaXN0L2Jiai1tYXNrcy5qcydcclxuaW1wb3J0ICdleHBvc2UtbG9hZGVyP0Jhc2lzLklucHV0TWFza2luZyFiYXNpcy1pbnB1dC1tYXNraW5nL2Rpc3QvYmFzaXMtaW5wdXQtbWFza2luZy5qcydcclxuaW1wb3J0ICdleHBvc2UtbG9hZGVyP2ZsYXRwaWNrciFmbGF0cGlja3IvZGlzdC9mbGF0cGlja3IuanMnXHJcbmltcG9ydCAnZXhwb3NlLWxvYWRlcj9CYXNpcy5BZ0dyaWRDb21wb25lbnRzIWJhc2lzLWFnZ3JpZC1jb21wb25lbnRzL2Rpc3QvYmFzaXMtYWdncmlkLWNvbXBvbmVudHMuanMnXHJcblxyXG5yZXF1aXJlKCdmbGF0cGlja3IvZGlzdC9mbGF0cGlja3IuY3NzJylcclxucmVxdWlyZSgnLi9zdHlsZS9jbGFzc2VzLmNzcycpXHJcbnJlcXVpcmUoJy4vc3R5bGUvc3VnZ2VzdGlvbi1lZGl0b3IuY3NzJylcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vcG9seWZpbGxzLmpzJ1xyXG5leHBvcnQgKiBmcm9tICcuL2FwaSdcclxuIiwiLypcclxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEJCakdyaWRFeFdpZGdldCBwbHVnaW4uXHJcbiAqIChjKSBCYXNpcyBFdXJvcGUgPGV1QGJhc2lzLmNsb3VkPlxyXG4gKlxyXG4gKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRVxyXG4gKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS5cclxuICovXHJcblxyXG4vKiogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L0N1c3RvbUV2ZW50ICAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtc2VtaVxyXG47KGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9IC8vSWYgbm90IElFXHJcblxyXG4gIGZ1bmN0aW9uIEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMpIHtcclxuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWQgfVxyXG4gICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpXHJcbiAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpXHJcbiAgICByZXR1cm4gZXZ0XHJcbiAgfVxyXG5cclxuICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlXHJcblxyXG4gIHdpbmRvdy5DdXN0b21FdmVudCA9IEN1c3RvbUV2ZW50XHJcbn0pKClcclxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi9jbGFzc2VzLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQuaGVhZFxyXG4gICAgICAgICAgICAgIH07XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi9jbGFzc2VzLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi9jbGFzc2VzLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzIS4vc3VnZ2VzdGlvbi1lZGl0b3IuY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LnBhcmVudC5kb2N1bWVudC5oZWFkXHJcbiAgICAgICAgICAgICAgfTtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcyEuL3N1Z2dlc3Rpb24tZWRpdG9yLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanMhLi9zdWdnZXN0aW9uLWVkaXRvci5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9