rem package BBjGridExWidget.Expression
rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use java.lang.StringBuilder
REM /**
REM  * BBjGridExWidgetExpressionInterface
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
interface public BBjGridExWidgetExpressionInterface
    rem /**
    rem  * Get the expression as string
    rem  *
    rem  * @return BBjString The Javascript expression
    rem  */

    method public String toString()

    rem /**
    rem  * Compare two expressions
    rem  *
    rem  * @param expression! - Another expression instance to compare with
    rem  *
    rem  * @return bool - true when they are equal , false otherwise
    rem  */

    method public boolean equals(BBjGridExWidgetExpressionInterface expression!)
interfaceend
rem /**
rem  * Abstract implementation for BBjGridExWidgetExpressionInterface
rem  */
class public BBjGridExWidgetExpressionAbstract implements BBjGridExWidgetExpressionInterface
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public boolean equals(BBjGridExWidgetExpressionInterface expression!)
        methodret #toString().equals(expression!.toString())
    methodend
classend 
rem /**
rem  * Expressions are Javascript functions which are written as strings. When you provide an expression to the grid, 
rem  * the grid converts the expression into a function for you and then executes the function on the client.
rem  *  
rem  * Expressions can be used with the columns <i>ValueGetterExpression</i>, <i>ValueFormatterExpression</i>, 
rem  * <i>ValueSetterExpression</i>, <i>ValueParserExpression</i>.
rem  * 
rem  * For example you can add a virtual column to the grid and define a value getter expression to 
rem  * get the value of this column based on other two columns.
rem  * 
rem  * Expression can be as simple as <i>"data.CDNumber"</i> or more complex as the <i>BBjGridExWidgetExpressionNumbersFormatter</i>
rem  * which can accepts parameters.
rem  * 
rem  * When working with expression key the following points in mind:
rem  * 
rem  * <ol>
rem  *  <li> If your expression has the word return in it, then the grid will assume it is a multi-line expression and will not wrap it
rem  *  <li> If a ValueGetterExpression does not have the word 'return' in it, then the grid will insert the 'return' statement and the ';' for you
rem  *  <li> f your expression has many lines, then you will need to provide the ';' at the end of each line and also provide the 'return' statement.
rem  * </ol>
rem  * 
rem  * Expression can access several predefined variables :<br><br>
rem  * 
rem  * <table border="1" cellpadding="10">
rem  *    <tbody>
rem  *        <tr>
rem  *            <td><strong>&nbsp;x</strong></td>
rem  *            <td>&nbsp;Mapped from cell value</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>value</strong></td>
rem  *            <td>&nbsp;Same as x</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>oldValue</strong></td>
rem  *            <td>&nbsp;Mapped from the cell's old value, this is mapped in editing</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>newValue</strong></td>
rem  *            <td>&nbsp;Mapped from the cell's new value, this is mapped in editing</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>data</strong></td>
rem  *            <td>&nbsp;Mapped from the DataRow</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>column</strong></td>
rem  *            <td>&nbsp;Current column</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>columnGroup</strong></td>
rem  *            <td>&nbsp;Current column&nbsp;group</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>getValue</strong></td>
rem  *            <td>&nbsp;The value after it is processed by the ValueGetterExpression</td>
rem  *        </tr>
rem  *        <tr>
rem  *            <td>&nbsp;<strong>ctx</strong></td>
rem  *            <td>&nbsp;The grid client context</td>
rem  *        </tr>
rem  *    </tbody>
rem  *</table>
rem  * 
rem  * @see BBjGridExWidgetExpressionNumbersFormatter 
rem  *  
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpression extends BBjGridExWidgetExpressionAbstract
    rem /**
    rem  * Expression string
    rem  */
    field public BBjString Expression!
    rem /**
    rem  * disable the default constructor
    rem  */
    method private BBjGridExWidgetExpression()
    methodend
    rem /**
    rem  * @param BBjString expression!
    rem  */
    method public BBjGridExWidgetExpression(BBjString expression!)
        #super!()
        #Expression! = expression!
    methodend
    rem /**
    rem  * @return BBjString
    rem  */
    method public String toString()
        methodret #Expression!
    methodend

classend
rem /**
rem  * The class defines a grid expression to format strings according to BBj supported masks
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpressionStringsFormatter extends BBjGridExWidgetExpressionAbstract
    rem /**
    rem  * The String mask to use.
    rem  */
    field public BBjString Mask! = null()
    rem /**
    rem  * Disable the default constructor
    rem  */
    method private BBjGridExWidgetExpressionStringsFormatter()
    methodend 
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  */
    method public BBjGridExWidgetExpressionStringsFormatter(BBjString mask!)
        #super!()
        #Mask! = mask!
    methodend  
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public String toString()
        declare StringBuilder ex!

        if(#getMask() = null() ) then
            methodret null()
        FI

        ex! = new StringBuilder()
        ex!.append(String.format("var mask = '%s';" , #getMask()))
        ex!.append("var theValue = getValue || value;")
        ex!.append("if ((mask && theValue) && (theValue != null)) {return BBj.Masks.Types.string(theValue, mask)}")
        ex!.append("return theValue || '';")
        methodret ex!.toString()
    methodend         
classend
rem /**
rem  * The class defines a grid expression to format numbers according to BBj supported masks
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpressionNumbersFormatter extends BBjGridExWidgetExpressionAbstract
    rem /**
    rem  * The Number mask to use.
    rem  */
    field public BBjString Mask! = null()
    rem /**
    rem  * The number's group separator to use. by default the bbj group separator will be used
    rem  */
    field public BBjString GroupSeparator! = ""
    rem /**
    rem  * The number's decimal separator to use. by default the bbj decimal separator will be used
    rem  */
    field public BBjString DecimalSeparator! = ""
    rem /**
    rem  * Disable the default constructor
    rem  */
    method private BBjGridExWidgetExpressionNumbersFormatter()
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  */
    method public BBjGridExWidgetExpressionNumbersFormatter(BBjString mask!)
        #super!()
        #Mask! = mask!
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  * @param BBjString groupSeparator! The number's group separator to use
    rem  */
    method public BBjGridExWidgetExpressionNumbersFormatter(BBjString mask!, BBjString groupSeparator!)
        #this!(mask!)
        #GroupSeparator! = groupSeparator!
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  * @param BBjString groupSeparator! The number's group separator to use
    rem  * @param BBjString decimalSeparator! The number's decimal separator to use
    rem  */
    method public BBjGridExWidgetExpressionNumbersFormatter(BBjString mask!, BBjString groupSeparator!, BBjString decimalSeparator!)
        #this!(mask!, groupSeparator!)
        #DecimalSeparator! = decimalSeparator!
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public String toString()
        declare StringBuilder ex!

        if(#getMask() = null() ) then
            methodret null()
        FI

        ex! = new StringBuilder()
        ex!.append(String.format("var mask = '%s';" , #getMask()))
        ex!.append(String.format("var groupSep  = '%s' || ctx.numberGroupSep;" , #getGroupSeparator()))
        ex!.append(String.format("var decimalSep  = '%s' || ctx.numberDecimalSep;" , #getDecimalSeparator()))
        ex!.append("var theValue = getValue || value;")
        ex!.append("if ((mask && theValue) && (theValue != null && !isNaN(theValue))) {return BBj.Masks.Types.number(theValue, mask, groupSep, decimalSep)}")
        ex!.append("return theValue || '';")
        methodret ex!.toString()
    methodend

classend
rem /**
rem  * The class defines a grid expression to format bytes to one of the following measuring terms : 
rem  * <i>['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']</i>
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpressionBytesFormatter extends BBjGridExWidgetExpressionNumbersFormatter
    rem /**
    rem  * Number of decimal to use when parsing the size. default is 2
    rem  */
    field public BBjNumber Decimals! = 4
    rem /**
    rem  * Disable the default constructor
    rem  */
    method private BBjGridExWidgetExpressionBytesFormatter()
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  */
    method public BBjGridExWidgetExpressionBytesFormatter(BBjString mask!)
        #super!(mask!) 
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  * @param BBjString groupSeparator! The number's group separator to use
    rem  */
    method public BBjGridExWidgetExpressionBytesFormatter(BBjString mask!, BBjString groupSeparator!)
        #super!(mask!,groupSeparator!)
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionNumbersFormatter
    rem  *
    rem  * @param BBjString mask! The number's mask
    rem  * @param BBjString groupSeparator! The number's group separator to use
    rem  * @param BBjString decimalSeparator! The number's decimal separator to use
    rem  */
    method public BBjGridExWidgetExpressionBytesFormatter(BBjString mask!, BBjString groupSeparator!, BBjString decimalSeparator!)
        #super!(mask!,groupSeparator!,decimalSeparator!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public String toString()
        declare StringBuilder ex!

        if(#getMask() = null() ) then
            methodret null()
        FI

        ex! = new StringBuilder()
        ex!.append(String.format("var mask = '%s';" , #getMask()))
        ex!.append(String.format("var groupSep  = '%s' || ctx.numberGroupSep;" , #getGroupSeparator()))
        ex!.append(String.format("var decimalSep  = '%s' || ctx.numberDecimalSep;" , #getDecimalSeparator()))
        ex!.append("var theValue = getValue || value;")
        ex!.append("if ((mask && theValue) && (theValue != null && !isNaN(theValue))) {")
        ex!.append("  if (theValue === 0) return '0 Bytes';")
        ex!.append("  var k = 1024;")
        ex!.append(String.format("var dm = %1$s < 0 ? 0 : %1$s;" , #getDecimals()))
        ex!.append("  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];")
        ex!.append("  var i = Math.floor(Math.log(theValue) / Math.log(k));")
        ex!.append("  var r = parseFloat((theValue / Math.pow(k, i)).toFixed(dm));")
        ex!.append("  return BBj.Masks.Types.number(r, mask, groupSep, decimalSep) + ' ' + sizes[i];")
        ex!.append("}")
        ex!.append("return theValue || '';")
        methodret ex!.toString()
    methodend
classend 

rem /**
rem  * The class defines a grid expression to format date/timestamps according to BBj supported masks
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpressionDateTimesFormatter extends BBjGridExWidgetExpressionAbstract
    rem /**
    rem  * The date / timestamp mask to use.
    rem  */
    field public BBjString Mask! = null()
    rem /**
    rem  * Disable the default constructor
    rem  */
    method private BBjGridExWidgetExpressionDateTimesFormatter()
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionDateTimesFormatter
    rem  *
    rem  * @param BBjString mask! The date/timestamp mask
    rem  */
    method public BBjGridExWidgetExpressionDateTimesFormatter(BBjString mask!)
        #super!()
        #Mask! = mask!
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public String toString()
        declare StringBuilder ex!

        if(#getMask() = null() ) then
            methodret null()
        FI

        ex! = new StringBuilder()
        ex!.append(String.format("var mask = '%s';" , #getMask()))
        ex!.append("var theValue = getValue || value;")
        ex!.append("if((mask && theValue) && theValue != null) {return BBj.Masks.Types.date(theValue, mask)}")
        ex!.append("return theValue || '';")
        methodret ex!.toString()
    methodend

classend
rem /**
rem  * Alias for BBjGridExWidgetExpressionDateTimesFormatter
rem  * 
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpressionTimestampsFormatter extends BBjGridExWidgetExpressionDateTimesFormatter
    rem /**
    rem  * Disable the default constructor
    rem  */
    method private BBjGridExWidgetExpressionTimestampsFormatter()
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionDatesFormatter
    rem  *
    rem  * @param BBjString mask! The date/timestamp mask
    rem  */
    method public BBjGridExWidgetExpressionTimestampsFormatter(BBjString mask!)
        #super!(mask!)
    methodend
classend
rem /**
rem  * The class defines a grid expression to format date/timestamps according to BBj supported masks
rem  * 
rem  * @deprecated Use BBjGridExWidgetExpressionDateTimesFormatter
rem  * 
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetExpressionDatesFormatter extends BBjGridExWidgetExpressionDateTimesFormatter
    rem /**
    rem  * Disable the default constructor
    rem  */
    method private BBjGridExWidgetExpressionDatesFormatter()
    methodend
    rem /**
    rem  * Construct a new BBjGridExWidgetExpressionDatesFormatter
    rem  *
    rem  * @param BBjString mask! The date/timestamp mask
    rem  */
    method public BBjGridExWidgetExpressionDatesFormatter(BBjString mask!)
        #super!(mask!)
    methodend
classend