rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidgetClientModels.bbj::BBjGridExWidgetClientTransactionModel
use ::BBjGridExWidget/test/BBjGridExWidgetClientModels/Mocks/BBjGridExWidgetClientTransactionModelMocks.bbj::GridMock
use com.basiscomponents.db.DataRow
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use com.google.gson.JsonNull

class public BBjGridExWidgetClientTransactionModelTest

    field private BBjGridExWidgetClientTransactionModel Instance!
    
    rem @Before
    method public void setUp()
        #Instance! = new BBjGridExWidgetClientTransactionModel()
    methodend
    
    rem @Test
    method public void testExecuteAdd()
        declare GridMock mock!
        mock! = new GridMock()
        #Instance!.setWidget(mock!)
        
        row! = mock!.getRS().getItem(0).clone()
        row!.setFieldValue("TITLE","My Updated Title")
        row!.setFieldValue("ARTIST","My Updated Artist")
        #Instance!.add(row!)
        
        declare JsonObject json!
        json! = #Instance!.execute()
        
        Assert.Equals(mock!.getRS().getItem(0).equals(row!) , BBjAPI.TRUE)
        Assert.Equals(json!.get("add").getAsJsonArray().get(0).getAsJsonObject().get("TITLE").getAsString() , "My Updated Title")
        Assert.Equals(json!.get("add").getAsJsonArray().get(0).getAsJsonObject().get("ARTIST").getAsString() , "My Updated Artist")
    methodend

    rem @Test
    method public void testExecuteUpdate()
        declare GridMock mock!
        mock! = new GridMock()
        #Instance!.setWidget(mock!)
        
        row! = mock!.getRS().getItem(0)
        row!.setFieldValue("TITLE","My Updated Title")
        row!.setFieldValue("ARTIST","My Updated Artist")
        #Instance!.update(row!)
        
        declare JsonObject json!
        json! = #Instance!.execute()
        
        Assert.Equals(mock!.getRS().getItem(0).equals(row!) , BBjAPI.TRUE)
        Assert.Equals(json!.get("update").getAsJsonArray().get(0).getAsJsonObject().get("TITLE").getAsString() , "My Updated Title")
        Assert.Equals(json!.get("update").getAsJsonArray().get(0).getAsJsonObject().get("ARTIST").getAsString() , "My Updated Artist")
    methodend
    
    rem @Test
    method public void testExecuteRemove()
        declare GridMock mock!
        mock! = new GridMock()

        #Instance!.setWidget(mock!)
        
        row! = mock!.getRS().getItem(0)
        #Instance!.remove(row!)
        
        declare JsonObject json!
        json! = #Instance!.execute()
        
        Assert.Equals(mock!.getRS().getItem(0).equals(row!) , BBjAPI.FALSE)
        Assert.Equals(json!.get("remove").getAsJsonArray().get(0).getAsString() , row!.getRowKey())
    methodend    

    rem @Test
    method public void testExecuteRemoveWithCustomRowNodeId()
        declare GridMock mock!
        mock! = new GridMock()
        mock!.setRowNodeId("CDNUMBER")

        #Instance!.setWidget(mock!)
        
        row! = mock!.getRS().getItem(0)
        #Instance!.remove(row!)
        
        declare JsonObject json!
        json! = #Instance!.execute()
        
        Assert.Equals(mock!.getRS().getItem(0).equals(row!) , BBjAPI.FALSE)
        Assert.Equals(json!.get("remove").getAsJsonArray().get(0).getAsString() , row!.getField("CDNUMBER").getString())
    methodend    
        
    rem @After
    method public void tearDown()
        #Instance! = null()
    methodend

classend