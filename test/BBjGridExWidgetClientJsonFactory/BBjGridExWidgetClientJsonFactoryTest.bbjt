rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidgetClientJsonFactory.bbj::BBjGridExWidgetClientJsonFactory
use ::BBjGridExWidget/test/Mocks/BBjGridExWidgetMock.bbj::BBjGridExWidgetMock
use ::BBjGridExWidget/BBjGridExWidgetClientModels.bbj::BBjGridExWidgetClientFilterCombinedModel
use ::BBjGridExWidget/BBjGridExWidgetClientModels.bbj::BBjGridExWidgetClientFilterNumberModel
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use com.google.gson.JsonNull
use com.google.gson.JsonParser

class public BBjGridExWidgetClientJsonFactoryTest

    field private BBjGridExWidgetClientJsonFactory Instance!
    field private BBjString FilterFixturesString$
    
    method private JsonObject getFilterModelsFixture()
      parser! = new JsonParser()
      methodret parser!.parse(#FilterFixturesString$).getAsJsonObject()
    methodend
        
    rem @BeforeClass
    method public void beforeClass()
      ch=unt
      open (ch) BBjAPI().getFileSystem().resolvePath("BBjGridExWidget/test/Fixtures/FilterModels.json")
      read record (ch,siz=5512000)#FilterFixturesString$
      close (ch)
          
    methodend
    
    rem @Before
    method public void setUp()
        #Instance! = new BBjGridExWidgetClientJsonFactory(new BBjGridExWidgetMock())
    methodend
    
    rem @Test
    method public void testGetFilterConditionThrowErrorWhenFilterTypeIsMissing()
        Assert.Expect(#Instance!.getFilterCondition(new JsonObject(),"foo"),256)
    methodend
    
    rem @Test
    method public void testGetFilterConditionCanCreateFilterNumberModel()
        declare auto JsonObject fixture!
        fixture! = #getFilterModelsFixture().get("number-single")
        column! = "foo"
        
        rem complete
        fixtureClone! = fixture!.deepCopy()
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
        
        rem without filter
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.addProperty("filter","")
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
        
        rem without filterTo        
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.addProperty("filterTo","")
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)        
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
    methodend
    
    rem @Test
    method public void testGetFilterConditionCanCreateFilterDateTimeModel()
        declare auto JsonObject fixture!
        fixture! = #getFilterModelsFixture().get("datetime-single")
        column! = "foo"
        
        rem complete
        fixtureClone! = fixture!.deepCopy()
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
        
        rem without filter
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.add("filter",JsonNull.INSTANCE)
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
        
        rem without filterTo        
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.add("filterTo",JsonNull.INSTANCE)
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)        
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
    methodend        
    
    rem @Test
    method public void testGetFilterConditionCanCreateFilterTextModel()
        declare auto JsonObject fixture!
        fixture! = #getFilterModelsFixture().get("text-single")
        column! = "foo"
        
        rem complete
        fixtureClone! = fixture!.deepCopy()
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
        
        rem without filter
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.add("filter",JsonNull.INSTANCE)
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
    methodend
    
    rem @Test
    method public void testGetFilterConditionCanCreateFilterBooleanModel()
        declare auto JsonObject fixture!
        fixture! = #getFilterModelsFixture().get("boolean-single")
        column! = "foo"
        
        rem complete
        fixtureClone! = fixture!.deepCopy()
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
    methodend
    
    rem @Test
    method public void testGetFilterConditionCanCreateFilterSetFilterModel()
        declare auto JsonObject fixture!
        fixture! = #getFilterModelsFixture().get("set")
        column! = "foo"
        
        rem complete
        fixtureClone! = fixture!.deepCopy()
        model! = #Instance!.getFilterCondition(fixtureClone!,column!)
        Assert.Equals(model!.getAsJsonObject().equals(fixtureClone!),BBjAPI.TRUE)
        Assert.Equals(model!.getColumn(),column!)
        Assert.Equals(model!.getWidget(),#Instance!.getWidget())
    methodend    
            
    rem @Test
    method public void testGetFilterCanCreateCombinedFilteModel()
        declare auto JsonObject fixture!
        fixture! = #getFilterModelsFixture().get("number-combined")
        column! = "foo"
        
        fixtureClone! = fixture!.deepCopy()
        model! = #Instance!.getFilter(fixtureClone!,column!)
        isCombinedModel! = 0
        model! = cast(BBjGridExWidgetClientFilterCombinedModel,model!,err=*next); isCombinedModel! = 1
        Assert.Equals(isCombinedModel!,1)
        Assert.Equals(model!.getFirstCondition().getAsJsonObject().equals(fixtureClone!.get("condition1").getAsJsonObject()) , BBjAPI.TRUE)
        Assert.Equals(model!.getSecondCondition().getAsJsonObject().equals(fixtureClone!.get("condition2").getAsJsonObject()) , BBjAPI.TRUE)
        Assert.Equals(model!.getOperator() , fixtureClone!.get("operator").getAsString())
        
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.remove("condition1")
        model! = #Instance!.getFilter(fixtureClone!,column!)      
        isCombinedModel! = 0
        model! = cast(BBjGridExWidgetClientFilterCombinedModel,model!,err=*next); isCombinedModel! = 1
        Assert.Equals(isCombinedModel!,1)          
        Assert.IsNull(model!.getFirstCondition())
        Assert.Equals(model!.getSecondCondition().getAsJsonObject().equals(fixtureClone!.get("condition2").getAsJsonObject()) , BBjAPI.TRUE)
        Assert.Equals(model!.getOperator() , fixtureClone!.get("operator").getAsString())
        
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.remove("condition2")
        model! = #Instance!.getFilter(fixtureClone!,column!)
        isCombinedModel! = 0
        model! = cast(BBjGridExWidgetClientFilterCombinedModel,model!,err=*next); isCombinedModel! = 1
        Assert.Equals(isCombinedModel!,1)                
        Assert.Equals(model!.getFirstCondition().getAsJsonObject().equals(fixtureClone!.get("condition1").getAsJsonObject()) , BBjAPI.TRUE)
        Assert.IsNull(model!.getSecondCondition())
        Assert.Equals(model!.getOperator() , fixtureClone!.get("operator").getAsString())        
        
        rem a fallback to nomral model
        fixtureClone! = fixture!.deepCopy()
        fixtureClone!.remove("condition1")
        fixtureClone!.remove("condition2")
        model! = #Instance!.getFilter(fixtureClone!,column!)
        isCombinedModel! = 0
        model! = cast(BBjGridExWidgetClientFilterCombinedModel,model!,err=*next); isCombinedModel! = 1
        Assert.Equals(isCombinedModel!,0)
        isNumberModel!= 0           
        model! = cast(BBjGridExWidgetClientFilterNumberModel,model!,err=*next); isNumberModel! = 1
        Assert.Equals(isNumberModel!,1)
    methodend
             
    rem @After
    method public void tearDown()
        #Instance! = null()
    methodend

classend
