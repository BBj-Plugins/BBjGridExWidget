rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterSetFilterModel
use ::BBjGridExWidget/test/Mocks/BBjGridExWidgetMock.bbj::BBjGridExWidgetMock
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use com.google.gson.JsonNull
use com.google.gson.JsonPrimitive

class public GxClientFilteSetFilterModelTest

    field private GxClientFilterSetFilterModel Instance!
    
    rem @Before
    method public void setUp()
        #Instance! = new GxClientFilterSetFilterModel()
        #Instance!.setWidget(new BBjGridExWidgetMock())
    methodend
    
    rem @Test
    method public void testConstructors()
        values! = new JsonArray()
        values!.add("foo")
        values!.add(5)
        
        model! = new GxClientFilterSetFilterModel(values!)
        Assert.Equals(model!.getValues().equals(values!), BBjAPI.TRUE)
    methodend
    
    rem @Test
    method public void testSetMiniFilterThrowErrorWithoutColumn()
       Assert.Expect(#Instance!.setMiniFilter("someString") , 256)
    methodend
    
    rem @Test
    method public void testSetMiniFilterThrowErrorWithoutWidget()
         #Instance!.setWidget(null())
         #Instance!.setColumn("foo")
         Assert.Expect(#Instance!.setMiniFilter("someString") , 256)
    methodend    
    
    rem @Test
    method public void testSetMiniFilterExecuteCode()
        #Instance!.setColumn("foo")
        #Instance!.setMiniFilter(1234)
        widget! = #Instance!.getWidget()
        Assert.Equals(widget!.getBacklog().size() = 1 , BBjAPI.TRUE)
        rem check calls execute 
        Assert.Equals(widget!.getBacklog().getItem(0).contains(#Instance!.execute(0)), BBjAPI.TRUE)
    methodend
    
    rem @Test
    method public void testGetMiniFilterThrowErrorWithoutColumn()
       #Instance!.getWidget().setIsReady(BBjAPI.TRUE)
       Assert.Expect(#Instance!.getMiniFilter() , 256)
    methodend
    
    rem @Test
    method public void testGetMiniFilterThrowErrorWithoutWidget()
         #Instance!.setWidget(null())
         #Instance!.setColumn("foo")
         Assert.Expect(#Instance!.getMiniFilter() , 256)
    methodend 

    rem @Test
    method public void testGetMiniFilterExecuteCode()
        #Instance!.setColumn("foo")
        widget! = #Instance!.getWidget()
        
        filter! = #Instance!.getMiniFilter()
        Assert.Equals(filter! , "")
        
        widget!.setIsReady(BBjAPI.TRUE)
        #Instance!.getMiniFilter()
        Assert.Equals(len(widget!.getLastExecutedScript()) > 0, BBjAPI.TRUE)
        rem check does not calls execute 
        Assert.Equals(widget!.getLastExecutedScript().contains(#Instance!.execute(0)), BBjAPI.FALSE)
    methodend 
     
    rem @Test
    method public void testSelectEveryThingRemoveValuesArray()
        Assert.Equals(#Instance!.getValues().equals(new JsonArray()), BBjAPI.TRUE)
        #Instance!.selectEverything()
        Assert.IsNull(#Instance!.getValues())
    methodend
    
    rem @Test
    method public void testSelectNothingResetValuesArray()
        #Instance!.getValues().add("test value")
        Assert.Equals(#Instance!.getValues().size() > 0, BBjAPI.TRUE)
        #Instance!.selectNothing()
        Assert.Equals(#Instance!.getValues().size() > 0, BBjAPI.FALSE)
    methodend
    
    rem @Test
    method public void testSetFilterValuesThrowErrorWithoutColumn()
       #Instance!.getWidget().setIsReady(BBjAPI.TRUE)
       Assert.Expect(#Instance!.setFilterValues(null()) , 256)
    methodend    
           
    rem @Test
    method public void testSetFilterValuesThrowErrorWithoutWidget()
         #Instance!.setWidget(null())
         #Instance!.setColumn("foo")
         Assert.Expect(#Instance!.setFilterValues(null()) , 256)
    methodend                  
             
    rem @Test
    method public void testSetFilterValuesExecuteCode()
        #Instance!.setColumn("foo")
        
        widget! = #Instance!.getWidget()
        widget!.setIsReady(BBjAPI.TRUE)
        
        #Instance!.setFilterValues(new JsonArray())
        Assert.Equals(len(widget!.getLastExecutedScript()) > 0, BBjAPI.TRUE)
        rem check does call execute 
        Assert.Equals(widget!.getLastExecutedScript().contains(#Instance!.execute(0)), BBjAPI.TRUE)        
    methodend
    
    rem @Test
    method public void testSelectValue()
        #Instance!.selectValue("test value")
        Assert.Equals(#Instance!.getValues().contains(new JsonPrimitive("test value")), BBjAPI.TRUE)
    methodend            
    
    rem @Test
    method public void testUnselectValue()
      #Instance!.getValues().add("test value")
      Assert.Equals(#Instance!.getValues().size() = 1, BBjAPI.TRUE)
      #Instance!.unselectValue("test value")     
      Assert.Equals(#Instance!.getValues().contains(new JsonPrimitive("test value")), BBjAPI.FALSE)     
      Assert.Equals(#Instance!.getValues().size() = 0, BBjAPI.TRUE)
    methodend            
    
    rem @Test
    method public void testCanSetValues()
      values! = new JsonArray()
      values!.add("foo")
      values!.add(5)
      
      #Instance!.setValues(values!)
      json! = #Instance!.getAsJsonObject()
      Assert.Equals(json!.get("values").getAsJsonArray().equals(values!), BBjAPI.TRUE)      
    methodend
    
    rem @Test
    method public void testClearFilter()
      values! = new JsonArray()
      values!.add("foo")
      values!.add(5)
      #Instance!.setValues(values!)
      
      #Instance!.setColumn("foo")
      #Instance!.clearFilter()
      Assert.IsNull(#Instance!.getValues())
      rem Assert.Equals(#Instance!.getValues().equals(new JsonArray()), BBjAPI.TRUE)
      #Instance!.update()
      widget! = #Instance!.getWidget()
      Assert.Equals(widget!.getBacklog().size() , 1)
    methodend  
        
    rem @After
    method public void tearDown()
        #Instance! = null()
    methodend

classend