rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.basiscomponents.db.ResultSet
use com.basiscomponents.bc.SqlQueryBC

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare BBjGridExWidget grid!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"BBj Grid Ex Demo")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

st! = wnd!.addStaticText(200,20,14,210,25,"Enter a term to search inside the grid data:")
ed! = wnd!.addEditBox(250,240,10,250,22,"")
ed!.setCallback(BBjAPI.ON_EDIT_MODIFY,"onSearchButton")

REM init the grid
grid! = new BBjGridExWidget(wnd!,100,0,40,800,560)

gosub main
process_events

rem /**
rem  * Retrieve the data from the database and configure the grid  
rem  */
main:
  declare SqlQueryBC sbc!
  
  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
  rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")
  grid!.setData(rs!)
return

rem /**
rem  * Set a quick filter on the grid to achieve through data search.
rem  * 
rem  * Note : this filter is applied on the client data not the passed ResultSet
rem  */
onSearchButton:
  search! = ed!.getText()
  grid!.setQuickFilter(search!)
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space. 
rem  */
resize:
  ev! = BBjAPI().getLastEvent()
  w=ev!.getWidth()
  h=ev!.getHeight()
  grid!.setSize(w,h)
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye