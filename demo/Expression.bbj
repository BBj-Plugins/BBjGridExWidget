rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.cloud>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BBjGridExWidget/GxColumns.bbj::GxColumn
use com.basiscomponents.db.ResultSet
use com.basiscomponents.bc.SqlQueryBC

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare BBjGridExWidget grid!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Expression Demo")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

REM init the grid
grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)

gosub main
process_events

rem /**
rem  * Retrieve the data from the database and configure the grid
rem  */
main:
  declare SqlQueryBC sbc!
  declare ResultSet rs!

  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")

  rem add CDNumber column
  grid!.addColumn("CDNUMBER","CDNUMBER")

  rem /**
  rem  * Here we are creating a column which is composed of two other columns (LABEL & TITLE).
  rem  * Note how we are using the 'value getter expression' to teach the grid how to compute the value.
  rem  */
  declare GxColumn vcolumn!
  vcolumn! = grid!.addColumn("LABEL+TITLE","Label & Title")
  vcolumn!.setValueGetterExpression("data.LABEL + ' - ' + data.TITLE")

  grid!.setData(rs! , 1 , 0)
  grid!.setFitToGrid()
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space.
rem  */
resize:
  ev! = BBjAPI().getLastEvent()
  w=ev!.getWidth()
  h=ev!.getHeight()
  grid!.setSize(w,h)
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye