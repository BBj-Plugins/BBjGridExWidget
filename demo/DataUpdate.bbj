rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.cloud>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.basiscomponents.db.ResultSet
use com.basiscomponents.bc.SqlQueryBC
use com.google.gson.JsonObject

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare BBjGridExWidget grid!
declare SqlQueryBC sbc!
declare ResultSet rs!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,820,600,"Data Update Demo")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

restoreOriginal! = wnd!.addButton(200,10,10,150,25,"Restore Original ResultSet")
restoreOriginal!.setCallback(BBjAPI.ON_BUTTON_PUSH,"restoreOriginalRS")

updateResultSet! = wnd!.addButton(201,160,10,150,25,"Set New ResultSet")
updateResultSet!.setCallback(BBjAPI.ON_BUTTON_PUSH,"setNewRS")

updateFirstRow! = wnd!.addButton(202,310,10,100,25,"Update 3rd Row")
updateFirstRow!.setCallback(BBjAPI.ON_BUTTON_PUSH,"updateThirdRow")

removeByIndex! = wnd!.addButton(203,410,10,150,25,"Remove 2nd Row By Index")
removeByIndex!.setCallback(BBjAPI.ON_BUTTON_PUSH,"removeByIndex")

removeByKey! = wnd!.addButton(204,560,10,150,25,"Remove 2nd Row By Key")
removeByKey!.setCallback(BBjAPI.ON_BUTTON_PUSH,"removeByKey")

clearRowsData! = wnd!.addButton(205,710,10,100,25,"Clear Rows")
clearRowsData!.setCallback(BBjAPI.ON_BUTTON_PUSH,"clearRowsData")

REM init the grid
grid! = new BBjGridExWidget(wnd!,100, 0,50,820,550)
grid!.setCallback(grid!.ON_GRID_ROW_CLICK(),"onRowSelect")

sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))

gosub fillGrid
process_events

rem /**
rem  * Retrieve the data from the database and configure the grid
rem  */
fillGrid:
  rs! = sbc!.retrieve("SELECT TOP 15 * FROM CDINVENTORY")
  grid!.setData(rs!,"CDNUMBER")
return

rem /**
rem  * Restore the older ResultSet
rem  */
restoreOriginalRS:
  rs! = sbc!.retrieve("SELECT TOP 15 * FROM CDINVENTORY")
  grid!.updateData(rs!)
return

rem /**
rem  * Create new ResultSet and update the grid
rem  *
rem  * Note that unlike grid!.setData(ResultSet), the method grid!.updateData(ResultSet) will not update the column definitions
rem  * from the passed ResultSet
rem  */
setNewRS:
  rs! = sbc!.retrieve("SELECT TOP 5 * FROM CDINVENTORY ")
  grid!.updateData(rs!)
return

rem /**
rem  * Update a specific row (the 3rd) in the grid
rem  */
updateThirdRow:
  row! = rs!.getItem(2,err=*return);rem zero-based
  row!.setFieldValue("TITLE","My Updated Title")
  row!.setFieldValue("ARTIST","My Updated Artist")
  grid!.updateRow(row!)
return

rem /**
rem  * Remove a specific row (the 2nd) in the grid by its zero-based index
rem  */
removeByIndex:
    rows! = grid!.getRows()
    if (rows!.size()>1) then
        grid!.removeRow(1,err=*next)
    endif
return

rem /**
rem  * Remove a specific row in the grid by the key from a specific row (the 2nd) in the result set
rem  */
removeByKey:
    key! = grid!.getRS().getItem(1,err=*return).getRowKey()
    grid!.removeRow(key!,err=*next)
return

rem /**
rem  * Clear data, but keep the column definition
rem  */
clearRowsData:
    grid!.clearData()
return

rem /**
rem  * Event handler to show the selected row on clik
rem  *
rem  * @see BBjGridExWidget.ON_GRID_ROW_CLICK()()
rem  */
onRowSelect:
  selection! =  grid!.getSelectedRows()
  a! = msgbox("Row is indexed by CDNUMBER : " + str(selection!.get(0).getId()), 0, "Selected Row")
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space.
rem  */
resize:
  ev! = BBjAPI().getLastEvent()
  w=ev!.getWidth()
  h=ev!.getHeight()
  grid!.setSize(w,h)
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye