rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.cloud>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.basiscomponents.bc.SqlQueryBC

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare auto BBjStaticText lbl_db!
declare auto BBjListButton lb_db!
declare auto BBjStaticText lbl_tbl!
declare auto BBjListButton lb_tbl!
declare auto BBjStaticText lbl_theme!
declare auto BBjListButton lb_theme!
declare auto BBjButton btn_query!
declare BBjGridExWidget grid!



wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,900,600,"BBj Grid Ex Demo")
wnd!        .setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!        .setCallback(BBjAPI.ON_RESIZE,"resize")

lbl_db!     = wnd!.addStaticText(200,5,10,60,25,"Database:")
lb_db!      = wnd!.addListButton(201,65,5,160,250,"")
lbl_tbl!    = wnd!.addStaticText(202,235,10,60,25,"Table:")
lb_tbl!     = wnd!.addListButton(203,295,5,160,250,"")
lbl_limit!    = wnd!.addStaticText(251,465,10,60,25,"Data Limit:")
lb_limit!     = wnd!.addListButton(252,530,5,100,250,"")
btn_query!  = wnd!.addButton(204,640,4,100,24,"Query")
lbl_theme!  = wnd!.addStaticText(205,750,10,60,25,"Theme:")
lb_theme!   = wnd!.addListButton(206,810,5,85,250,"")

lb_db!      .setCallback(BBjAPI.ON_LIST_SELECT,"loadTables")
rem lb_limit!.setCallback(BBjAPI.ON_LIST_SELECT,"loadDataLimit")
btn_query!  .setCallback(BBjAPI.ON_BUTTON_PUSH,"doQuery")
lb_theme!   .setCallback(BBjAPI.ON_LIST_SELECT,"setTheme")

rem Shahidur
LET myAPI!=BBjAPI()
LET mySysGui!=myAPI!.getSysGui()
myVector! = mySysGui!.makeVector()
rem end


REM Add the above values into the BBjVector object
myVector!.addItem(str(5))
myVector!.addItem(str(50))
myVector!.addItem(str(100))
myVector!.addItem(str(1000))

lb_limit!.insertItems(0,myVector!)


REM init the grid
grid! = new BBjGridExWidget(wnd!,100,0,35,900,563)

gosub loadDatabases
gosub doQuery

rem disable the selection by default to avoid a backdoor if this demo is installed
rem enable to get the full db browsing functionality
rem lb_db!.setEnabled(0)
lb_theme!.insertItems(0, grid!.getThemes())
lb_theme!.selectIndex(0)

process_events

loadDatabases:
  i=0,j=0
  x$ = sqllist(-1)
  while x$>""
      db$=x$(1,pos($0a$=x$)-1)
      x$=x$(pos($0a$=x$)+1)
      lb_db!.addItem(db$)

      if db$="ChileCompany" then
          j=i
      FI

      i=i+1
  wend

  lb_db!.selectIndex(j)
  gosub loadTables
return

loadTables:
  lb_tbl!.removeAllItems()
  db$ = lb_db!.getSelectedItem()
  sqlch=sqlunt
  sqlopen (sqlch,err=no_db)db$
  x$=sqltables(sqlch)
  sqlclose(sqlch)
  i=0,j=0
  while x$>""
      tbl$=x$(1,pos($0a$=x$)-1)
      x$=x$(pos($0a$=x$)+1)
      lb_tbl!.addItem(tbl$)

      if tbl$="CUSTOMER" then
          j=i
      FI

      i=i+1
  wend

  lb_tbl!.selectIndex(j)
return

no_db:
  a=msgbox("Database "+db$+" does not exist!",16,"Error")
return

doQuery:
  rem run <BBjHome>/utils/bbstopwatch.bbj to time loading
  rd_stopwatch = 0
  groupNS!=BBjAPI().getGlobalNamespace()
  groupNS!.getValue("stopwatch",err=*next); rd_stopwatch = 1
  if rd_stopwatch
    groupNS!.setValue("stopwatch", "RESET")
    groupNS!.setValue("stopwatch", "START")
  endif

  db$ = lb_db!.getSelectedItem()
  tbl$ = lb_tbl!.getSelectedItem()
  limit$ = lb_limit!.getSelectedItem()

  if (db$>"" and tbl$>"") then
        bc! = new SqlQueryBC(BBjAPI().getJDBCConnection(db$))
    if limit$ = "" then
        rs! = bc!.retrieve("SELECT * FROM "+tbl$,err=error_sql)
        
    else
        
        rs! = bc!.retrieve("SELECT TOP "+limit$+" * FROM "+tbl$,err=error_sql)
       
    endif
    
    grid!.clearColumnDefinitions()
    grid!.setData(rs!)
  FI

  if rd_stopwatch groupNS!.setValue("stopwatch", "STOP")

return

error_sql:
  a=msgbox(BBjAPI().getLastException().getMessage() ,0,"ERROR")
return

setTheme:
  declare auto BBjListSelectEvent ev!

  ev! = BBjAPI().getLastEvent()
  theme$ = ev!.getSelectedItem()
  grid!.setTheme(theme$)
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space.
rem  */
resize:
  declare auto BBjResizeEvent ev!
  ev! = BBjAPI().getLastEvent()
  grid!.setSize(ev!.getWidth(),ev!.getHeight()-35)
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye