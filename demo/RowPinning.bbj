rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */

? 'HIDE'

use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BBjGridExWidget/GxRenderers.bbj::GxRendererCustomHTML
use com.basiscomponents.db.ResultSet
use com.basiscomponents.bc.SqlQueryBC

declare auto BBjTopLevelWindow wnd!
declare auto BBjListButton currencies!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Row Pinning Demo")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

items$ = ""
for i=0 to 3
  items$ = items$ + str(I) + $0A$
next i

wnd!.addStaticText(200,10,12,120,50,"Rows To Pin On Top")
numberOfTopPinnedRows! = wnd!.addListButton(201,130,6,50,250,"")
numberOfTopPinnedRows!.insertItems(0,items$)
numberOfTopPinnedRows!.selectIndex(0)
numberOfTopPinnedRows!.setCallback(BBjAPI.ON_LIST_SELECT,"onNumberOfTopPinnedRowsChange")

wnd!.addStaticText(202,220,12,130,50,"Rows To Pin On Bottom")
numberOfBottomPinnedRows! = wnd!.addListButton(203,350,6,50,250,"")
numberOfBottomPinnedRows!.insertItems(0,items$)
numberOfBottomPinnedRows!.selectIndex(0)
numberOfBottomPinnedRows!.setCallback(BBjAPI.ON_LIST_SELECT,"onNumberOfBottomPinnedRowsChange")

gosub main
process_events

rem /**
rem  * The example below shows pinned rows. Select the number of rows you want to pin
rem  * at the top and the bottom using the selections above the grid.
rem  *
rem  * In this example, we're using an HTML cell renderer to render custom pinned rows.
rem  * Cell rendering can take place as normal on pinned rows. There is an additional
rem  * `PinnedRowCellRenderer` property you can use to give a pinned row cell a different cell renderer
rem  * than the other cells.
rem  *
rem  * If both `CellRenderer` and `PinnedRowCellRenderer` are provided, then pinned rows
rem  * will use `PinnedRowCellRenderer` over `CellRenderer`.
rem  */
main:
  declare SqlQueryBC sbc!
  declare ResultSet rs!
  declare BBjGridExWidget grid!

  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")

  grid! = new BBjGridExWidget(wnd!,100,0,35,800,566)

  renderer! = new GxRendererCustomHTML("<% "+
: "var position = params.node.rowPinned;"+
: "var content = position.toUpperCase() + ' ' + params.column.colId + ' ' + (params.rowIndex + 1);"+
: "var isCDNumber = params.column.colId == 'CDNUMBER';"+
: "var style = 'font-weight: bold;font-style: italic';"+
: "style += isCDNumber ? ';color: blue;' : ''; "+
: "print('<div class=""ag-cell-wrapper"" style=""' + style + '"">' + content + '</div>')"+
: "%>")
  grid!.getOptions().getDefaultColumnDefinition().setPinnedRowCellRenderer(renderer!)

  grid!.setData(rs!)
return

onNumberOfTopPinnedRowsChange:
  amount! = num(numberOfTopPinnedRows!.getItemAt(numberOfTopPinnedRows!.getSelectedIndex()))
  pinnedTopData! = new ResultSet()
  if amount! > 0
    clone! = rs!.get(0).clone()
    clone!.clear()
    FOR index! = 1 TO amount!
      pinnedTopData!.add(clone!)
    NEXT index!
  fi

  grid!.setPinnedTopRows(pinnedTopData!)
return

onNumberOfBottomPinnedRowsChange:
  amount! = num(numberOfBottomPinnedRows!.getItemAt(numberOfBottomPinnedRows!.getSelectedIndex()))
  pinnedBottomData! = new ResultSet()
  if amount! > 0
    clone! = rs!.get(0).clone()
    clone!.clear()
    FOR index! = 1 TO amount!
      pinnedBottomData!.add(clone!)
    NEXT index!
  fi

  grid!.setPinnedBottomRows(pinnedBottomData!)
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space.
rem  */
resize:
  ev! = BBjAPI().getLastEvent()
  w=ev!.getWidth()
  h=ev!.getHeight()
  grid!.setSize(w,h - 44)
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye