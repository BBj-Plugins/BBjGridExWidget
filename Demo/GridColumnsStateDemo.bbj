use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.basiscomponents.bc.SqlQueryBC
use java.sql.Types

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare auto BBjListButton lb_db!
declare auto BBjListButton lb_tbl!
declare auto BBjToolButton btn_fit!
declare BBjGridExWidget grid!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"BBj Grid Ex Demo")

grid! = new BBjGridExWidget(wnd!,100,0,30,800,570)

wnd!        .setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!        .setCallback(BBjAPI.ON_RESIZE,"resize")

if (info(3,6)<>"5") then
    wnd!.setCallback(BBjAPI.ON_KEYPRESS,"onWinKeypress")
fi
 
 
tb_get! = wnd!.addButton(300,0,0,200,25,"GET STATE")
tb_set! = wnd!.addButton(301,220,0,200,25,"SET STATE")

tb_get!.setCallback(BBjAPI.ON_BUTTON_PUSH,"getState")
tb_set!.setCallback(BBjAPI.ON_BUTTON_PUSH,"setState")

gosub fillGrid

process_events

   
fillGrid:

    declare SqlQueryBC sbc!
    sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
    rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")
   
    print rs!.get(0).toJson()
    grid!.addColumn("CDNUMBER","Item#")
    grid!.addColumn("COST","COST",2)
    grid!.addColumn("ARTIST","Artist Name")
    grid!.addColumn("TITLE","Record Title")
    grid!.addColumn("LABEL","Publisher")
    grid!.addColumn("PLAYINGTIME","Playing Time (min)",Types.INTEGER)
   
    grid!.setSelectionMode(grid!.GRID_SELECT_ROW())
    
    rs!.setAttribute(10,"MASK","$#,##00")
    
    grid!.setData(rs!)
    
    

    grid!.setCallback(grid!.ON_GRID_SELECT_ROW(),"onRowSelect")
    grid!.setCallback(grid!.ON_GRID_DOUBLE_CLICK(),"onRowDoubleclick")

return

byebye:
    bye
    
resize:
    ev! = BBjAPI().getLastEvent()
    grid!.setSize(ev!.getWidth(),ev!.getHeight()-30)
return

onRowSelect: 

    ev! = BBjAPI().getLastEvent()
    ev! = ev!.getObject()
    
    selectedRow! = grid!.getSelectedRow()
    
    if selectedRow! <> null() then
        if INFO(3,6)="5" then
          a = msgbox(selectedRow!.getId(), 0, selectedRow!.getData().get("TITLE").getAsString())
        else
          print 'SHOW', ev!.getRowCount(), " ROW(s) AFFECTED By Event:" , ev!.getRows()
          print 'SHOW', ev!.getSelectedRowCount()," ROW(S) SELECTED By Event: ",ev!.getSelectedIds()
          print 'SHOW', ev!.getDeselectedRowCount()," ROW(S) DESELECTED By Event: ",ev!.getDeselectedIds()
          print 'SHOW', grid!.getSelectedRows().size()," ROW(S) SELECTED SO FAR : ", grid!.getSelectedRows()
          print 'SHOW', "------------------------------------------------------------------------"
        fi
    fi
return    

onRowDoubleclick:
    ev! = BBjAPI().getLastEvent()
    ev! = ev!.getObject()
    row! = ev!.getRow()
    
    if INFO(3,6)="5" then
        a=msgbox(row!.getId() + " - " + row!.getData().get("TITLE").getAsString(),0,"DOUBLE CLICK")
    else
        print 'SHOW', "DOUBLE CLICK " , row!.getId() , " - " , row!.getData().get("TITLE").getAsString()
    fi
return  

getState:
    state! = grid!.getColumnsState()
    state$ = str(state!.getString())
    if INFO(3,6)="5" then
        a=msgbox(state$,0,"GET STATE")
        print 'SHOW', "GET STATE ",state$
    fi

return

setState:
    if state!<>null() then
        grid!.setColumnsState(state!)
    fi
return

onWinKeypress:
    declare auto BBjKeypressEvent key_ev!
    key_ev! = BBjAPI().getLastEvent()
    if key_ev!.getKeyCode() = 342 then
       grid!.showDeveloperConsole()
    fi
return
