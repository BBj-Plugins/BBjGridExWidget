use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.basiscomponents.bc.SqlQueryBC
use java.sql.Types

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare auto BBjListButton lb_db!
declare auto BBjListButton lb_tbl!
declare auto BBjToolButton btn_fit!
declare BBjGridExWidget grid!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"BBj Grid Ex Demo")

grid! = new BBjGridExWidget(wnd!,100,0,40,800,560)

wnd!        .setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!        .setCallback(BBjAPI.ON_RESIZE,"resize")

st! = wnd!.addStaticText(200,20,10,200,25,"Enter rows to select, e.g. ""5,7""")
ed! = wnd!.addEditBox(201,200,10,250,22,"")
btn! = wnd!.addButton(202,460,10,80,22,"SELECT")

cb! = wnd!.addCheckBox(203,550,10,200,22,"Use Selection Checkbox")

btn!.setCallback(BBjAPI.ON_BUTTON_PUSH,"onSelectButton")
cb!.setCallback(BBjAPI.ON_CHECK_OFF,"onUseCheckbox")
cb!.setCallback(BBjAPI.ON_CHECK_ON,"onUseCheckbox")

grid!.setCallback(grid!.ON_GRID_SELECT_ROW(),"onSelection")
grid!.setCallback(grid!.ON_GRID_DOUBLE_CLICK(),"onDoubleCLick")

grid!.setSelectionMode(grid!.GRID_SELECT_CELL())
grid!.setMultipleSelection(1)


gosub fillGrid

process_events

   
fillGrid:

    declare SqlQueryBC sbc!
    sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))
    rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")

    grid!.setData(rs!)
    
return

byebye:
    bye
    
resize:
    ev! = BBjAPI().getLastEvent()
    grid!.setSize(ev!.getWidth(),ev!.getHeight()-40)
return

onSelection: 

    ev! = BBjAPI().getLastEvent()
    ev! = ev!.getObject()
    
    rows! =  grid!.getSelectedRows()
    row! = grid!.getSelectedRow()

    if INFO(3,6)="5" then
      if row! <> null() then
        a=msgbox(row!.getId() + " - " + row!.asDataRow().getFieldAsString("TITLE"),0,"DOUBLE CLICK")
      else 
        a = msgbox(str(rows!), 0, "Selection")
      fi
    else

        print  "------------------------------------------------------------------------"


        print 'SHOW' , "getSelectedRow: "
        print row!.getId() , " - " , row!.asDataRow().getFieldAsString("TITLE")

        print 'SHOW' , "getSelectedRows: "
        it! = rows!.iterator()
        while it!.hasNext()
            row! = it!.next()
            print 'SHOW' , row!.getId() , " - " , row!.asDataRow().getFieldAsString("TITLE")
        wend
        

        print 'SHOW', 
        print ev!.getRowCount(), " ROW(s) AFFECTED By Event:" , ev!.getChangedRows()
        print ev!.getSelectedRowCount()," ROW(S) SELECTED By Event: ",ev!.getNewSelectedRows()
        print ev!.getDeselectedRowCount()," ROW(S) DESELECTED By Event: ",ev!.getNewDeselectedRows()
        print ev!.getSelectedRows().size()," ROW(S) NOW SELECTED : ", ev!.getSelectedRows()
      
        print  "------------------------------------------------------------------------"
      fi
    fi

return      

onDoubleCLick:
  ? 'BR',"DOUBLE CLICK:"
  gosub onSelection
  ? 'ER',
return

onSelectButton:

    selection! = ed!.getText()
    sel = num(selection!,err=multiple_selection)
    grid!.setSelectedRow(sel)
    
    rem now make sure this row is visible, in the middle
    grid!.setVisibleRow(sel,grid!.GRID_ROWPOS_MIDDLE())
return
    
    
multiple_selection:
    if pos(","=selection!)=0 then
        a=msgbox("Enter row numbers, separated by comma!",0,"INPUT ERROR")
        return
    fi
    x! = java.util.Arrays.asList(selection!.split(","))
    
    
    s! = new BBjVector()

    for i=0 to x!.size()
      s!.addItem(num(x!.get(i),err=*continue))
    next i
    
    grid!.setSelectedRows(s!)
    
    if (s!.size()>0) then
        rem now make sure the first selected row is visible on top
        grid!.setVisibleRow(s!.getItem(0),grid!.GRID_ROWPOS_TOP())
    fi
return

onUseCheckbox:
    useCheckbox = cb!.isSelected()
    grid!.setShowSelectionCheckbox(useCheckbox)
    
    rem this definition requires a refresh!
    gosub fillGrid

return
