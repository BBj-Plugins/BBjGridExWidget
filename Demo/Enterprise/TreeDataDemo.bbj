rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use ::BBjGridExWidget/BBjGridExWidgetRenderers.bbj::BBjGridExWidgetRendererCustomHTML
use ::BBjGridExWidget/Demo/assets/Utilities.bbj::BBjGridExWidgetDemoUtilities
use com.basiscomponents.db.ResultSet

? 'HIDE'

declare auto BBjTopLevelWindow wnd!
declare BBjGridExWidget grid!

wnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Tree Demo")
wnd!.setBackColor(new BBjColor(45,52,54))
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")
wnd!.setCallback(BBjAPI.ON_RESIZE,"resize")

ed! = wnd!.addEditBox(200,10,8,210,25,"")
ed!.setPlaceholder("Enter a term to search ...")
ed!.setBackColor(new BBjColor(45,52,54))
ed!.setForeColor(new BBjColor(245,245,245))
ed!.setCallback(BBjAPI.ON_EDIT_MODIFY,"onSearchButton")

REM init the grid
grid! = new BBjGridExWidget(wnd!,100,0,40,800,560)
grid!.setGroupDefaultExpanded(0)
grid!.setGroupColumnLabel("Files")
grid!.setShowGroupChildCount(0)
grid!.setTheme("balham-dark")

REM Enable tree mode and load a lodash template to convert the "filepath" property in the rows data
REM to an JS array which will be used to compose the tree hierarchy
grid!.setTreeData(1)
grid!.setDataPathTemplate("<% return data.filepath.split(""\" + java.io.File.separator + """); %>")

REM load a lodash template and replace the icons in the template with the
REM base64 strings for the selected images on the disk
template! = BBjGridExWidgetDemoUtilities.reasAssestAsString("templates/tree-icons-custom-template.tpl")
template! = template!.replaceAll("__FILE_ICON", BBjGridExWidget.imageToBase64("BBjGridExWidget/Demo/assets/images/file.png"))
template! = template!.replaceAll("__FOLDER_ICON",BBjGridExWidget.imageToBase64("BBjGridExWidget/Demo/assets/images/folder.png"))
innerRenderer! = new BBjGridExWidgetRendererCustomHTML(template!)

REM get instnace of the default group's cell renderer (BBjGridExWidgetRendererGroupCellRenderer) and
REM set its inner renderer.
groupRenderer! = grid!.getAutoGroupColumnDefinition().getCellRenderer()
groupRenderer!.setInnerRenderer(innerRenderer!)

grid!.setCallback(grid!.ON_GRID_CELL_DOUBLE_CLICK(),"onSelectionEvent")

gosub main
process_events
rem /**
rem  * Retrive the data from the database and configure the grid
rem  */
main:
  declare ResultSet rs!
  
  grid!.setData(BBjGridExWidgetDemoUtilities.buildResultSetFromDir("BBjGridExWidget/Demo"))
  grid!.getColumn("filepath").setHidden(1)
  grid!.setFitToGrid()
  grid!.getSidebar().setVisible(0)
return

rem /**
rem  * Set a quick filter on the grid to achieve through data search.
rem  *
rem  * Note : this filter is applied on the client data not the passed ResultSet
rem  */
onSearchButton:
  search! = ed!.getText()
  grid!.setQuickFilter(search!)
return

rem /**
rem  * pormpt the current selected file
rem  */
onSelectionEvent:
  row! = grid!.getSelectedRow()
  dataRow! = row!.asDataRow()
  let x=MSGBOX(str(dataRow!.getFieldAsString("filepath")) , 0 , "Selected File")
return

rem /**
rem  * Listen to the BBjTopLevelWindow resize events and
rem  * resize the grid to fill the available space.
rem  */
resize:
  ev! = BBjAPI().getLastEvent()
  w=ev!.getWidth()
  h=ev!.getHeight()
  grid!.setSize(w,h)
  grid!.setFitToGrid()
return

rem /**
rem  * Close the demo
rem  */
byebye:
bye