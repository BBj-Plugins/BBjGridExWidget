"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,g=m["".concat(s,".").concat(c)]||m[c]||p[c]||l;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3350:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:4,title:"Value Setters"},i=void 0,o={unversionedId:"editing/value-setters",id:"editing/value-setters",title:"Value Setters",description:"After editing a cell, the grid normally inserts the new value into your data. If it's not possible then you can provide a Value Setter Expression instead.",source:"@site/docs/editing/value-setters.md",sourceDirName:"editing",slug:"/editing/value-setters",permalink:"/BBjGridExWidget/docs/editing/value-setters",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/editing/value-setters.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Value Setters"},sidebar:"tutorialSidebar",previous:{title:"Value Parsers",permalink:"/BBjGridExWidget/docs/editing/value-parsers"},next:{title:"Accessories",permalink:"/BBjGridExWidget/docs/category/accessories"}},s={},d=[{value:"Configuring Value Setters",id:"configuring-value-setters",level:2},{value:"Example",id:"example",level:2}],u={toc:d};function p(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"After editing a cell, the grid normally inserts the new value into your data. If it's not possible then you can provide a Value Setter Expression instead."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The grid will updates the data only in the client. The ResultSet won't be affected. Updating the ResultSet is left to the developer to handler by listing to the ",(0,r.kt)("a",{parentName:"p",href:"./overview#editing-events"},"editing events"))),(0,r.kt)("h2",{id:"configuring-value-setters"},"Configuring Value Setters"),(0,r.kt)("p",null,"A Value Setter is the inverse of a ",(0,r.kt)("a",{parentName:"p",href:"../rendering/value-getters"},"Value Getter"),". Where the value getter allows getting values from your data using an expression rather than a field, the value setter allows you to set values into your data using an expression rather than specifying a field."),(0,r.kt)("p",null,"A value setter should return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the value was updated successfully and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if the value was not updated. When you return ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the grid knows it must refresh the cell."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj"},'column!.setValueSetterExpression("return true")\n')),(0,r.kt)("p",null,"When working with expressions keep the following points in mind:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the expression has the word ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," in it, then we will assume it is a multi-line expression and will not wrap it."),(0,r.kt)("li",{parentName:"ul"},"If the expression does not have the word ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," in it, then we will insert the ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," statement and the ",(0,r.kt)("inlineCode",{parentName:"li"},";")," for you."),(0,r.kt)("li",{parentName:"ul"},"If the expression has many lines, then you will need to provide the ",(0,r.kt)("inlineCode",{parentName:"li"},";")," at the end of each line and also provide the ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," statement.")),(0,r.kt)("p",null,"Expressions have access to several predefined variables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Variable"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"oldValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Mapped from the cell's old value, this is mapped in editing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"newValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Mapped from the cell's new value, this is mapped in editing")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"Mapped from the DataRow")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column"),(0,r.kt)("td",{parentName:"tr",align:null},"Current column")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getValue"),(0,r.kt)("td",{parentName:"tr",align:null},"The value after it is processed by the ",(0,r.kt)("a",{parentName:"td",href:"../rendering/value-getters"},"ValueGetterExpression"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ctx"),(0,r.kt)("td",{parentName:"tr",align:null},"The grid ",(0,r.kt)("a",{parentName:"td",href:"../data/client-context"},"client context"))))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Below shows an example using value setters. The following can be noted:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"All Columns are editable "),(0,r.kt)("li",{parentName:"ul"},"Updating ",(0,r.kt)("inlineCode",{parentName:"li"},"FIRST_NAME")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"LAST_NAME")," column will auto update the ",(0,r.kt)("inlineCode",{parentName:"li"},"FULL_NAME")," because of the value getter expression"),(0,r.kt)("li",{parentName:"ul"},"Updating the ",(0,r.kt)("inlineCode",{parentName:"li"},"FULL_NAME")," column will auto update the ",(0,r.kt)("inlineCode",{parentName:"li"},"FIRST_NAME")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"LAST_NAME")," columns using the value setter"),(0,r.kt)("li",{parentName:"ul"},"We sync data in the client with the ",(0,r.kt)("inlineCode",{parentName:"li"},"DataRow")," in the server")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxColumns.bbj::GxColumn\nuse ::BBjGridExWidget/GxClientEvents.bbj::GxClientEventsCell\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientCellModel\nuse com.basiscomponents.db.DataRow\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\nuse com.google.gson.JsonObject\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,600,600,"Value Setter")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("ChileCompany"))\n  rs! = sbc!.retrieve("SELECT FIRST_NAME , LAST_NAME FROM CUSTOMER")\n  \n  grid! = new BBjGridExWidget(wnd!,100,0,0,600,600)\n  grid!.getOptions().setEditable(1)\n  grid!.setFitToGrid()\n  grid!.setCallback(grid!.ON_GRID_CELL_VALUE_CHANGED(),"cellEditingChanged")\n  grid!.setData(rs!)\n  \n  declare auto GxColumn fullNameColumn!\n  fullNameColumn! = grid!.addColumn("FULL_NAME","Full Name")\n  fullNameColumn!.setEditable(1)\n  fullNameColumn!.setValueGetterExpression("data.FIRST_NAME + \' \' + data.LAST_NAME")\n  fullNameColumn!.setValueSetterExpression("var value = newValue.split(\' \');"  +\n:                                          "data.FIRST_NAME = value[0] || \'\';" +\n:                                          "data.LAST_NAME  = value[1] || \'\';" +\n:                                          "return true;")\nreturn\n\ncellEditingChanged:\n  declare auto GxClientEventsCell cellEvent!\n  declare auto GxClientCellModel cellModel!\n  declare auto DataRow row!\n  \n  lastEvent! = BBjAPI().getLastEvent() \n  cellEvent! = lastEvent!.getObject()\n  cellModel!  = cellEvent!.getCell()\n  \n  rem sync the new client row values with the ResultSet\n  row! = cellModel!.getRow().updateFromClientRow()\n\n  firstName! = row!.getField("FIRST_NAME").getString(err=*next)\n  lastName!  = row!.getField("LAST_NAME" ).getString(err=*next)\n  \n  a! = msgbox(String.format("First Name : (%s) - Last Name : (%s)",firstName!,lastName!))\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxClientModels/GxClientRowModel.html#updateFromClientRow"},(0,r.kt)("inlineCode",{parentName:"a"},"GxClientRowModel::updateFromClientRow"))," is a helper method which will merge the data coming from the client with the edited ",(0,r.kt)("inlineCode",{parentName:"p"},"DataRow"),".")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Value Setters",src:n(8251).Z,width:"640",height:"655"})))}p.isMDXComponent=!0},8251:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/value-setter-a89da2f189fc9b5f65fa4b02490a3820.gif"}}]);