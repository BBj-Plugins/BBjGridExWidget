"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9053],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),c=a,g=u["".concat(l,".").concat(c)]||u[c]||m[c]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8348:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2,title:"Value Formatters"},o=void 0,s={unversionedId:"rendering/value-formatter",id:"rendering/value-formatter",title:"Value Formatters",description:"Value formatters allow you to format values for display. This is useful when data is one type (e.g. numeric) but needs to be converted for human reading (e.g. putting in currency symbols and number formatting).",source:"@site/docs/rendering/value-formatter.md",sourceDirName:"rendering",slug:"/rendering/value-formatter",permalink:"/BBjGridExWidget/docs/rendering/value-formatter",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/rendering/value-formatter.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Value Formatters"},sidebar:"tutorialSidebar",previous:{title:"Value Getters",permalink:"/BBjGridExWidget/docs/rendering/value-getters"},next:{title:"Accessories",permalink:"/BBjGridExWidget/docs/category/accessories"}},l={},d=[{value:"Configuring Value Formatters",id:"configuring-value-formatters",level:2},{value:"Provided Formatters",id:"provided-formatters",level:2},{value:"Types - Expressions Mapping",id:"types---expressions-mapping",level:3},{value:"Configure Provided Formatters",id:"configure-provided-formatters",level:3},{value:"Sample: Custom Formatter",id:"sample-custom-formatter",level:3}],p={toc:d};function m(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Value formatters allow you to format values for display. This is useful when data is one type (e.g. numeric) but needs to be converted for human reading (e.g. putting in currency symbols and number formatting)."),(0,a.kt)("h2",{id:"configuring-value-formatters"},"Configuring Value Formatters"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"ValueFormatterExpression")," is arbitrary ",(0,a.kt)("strong",{parentName:"p"},"JavaScript")," code/expression that gets called to format the value before it is displayed."),(0,a.kt)("p",null,"When working with expressions keep the following points in mind:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If the expression has the word ",(0,a.kt)("inlineCode",{parentName:"li"},"return")," in it, then we will assume it is a multi-line expression and will not wrap it."),(0,a.kt)("li",{parentName:"ul"},"If the expression does not have the word ",(0,a.kt)("inlineCode",{parentName:"li"},"return")," in it, then we will insert the ",(0,a.kt)("inlineCode",{parentName:"li"},"return")," statement and the ",(0,a.kt)("inlineCode",{parentName:"li"},";")," for you."),(0,a.kt)("li",{parentName:"ul"},"If the expression has many lines, then you will need to provide the ",(0,a.kt)("inlineCode",{parentName:"li"},";")," at the end of each line and also provide the ",(0,a.kt)("inlineCode",{parentName:"li"},"return")," statement.")),(0,a.kt)("p",null,"Expressions have access to several predefined variables:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("strong",{parentName:"th"},"Variable")),(0,a.kt)("th",{parentName:"tr",align:"left"},(0,a.kt)("strong",{parentName:"th"},"Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"x"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Mapped from cell value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"value"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Same as x")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},"data"),(0,a.kt)("td",{parentName:"tr",align:"left"},"Mapped from the ",(0,a.kt)("inlineCode",{parentName:"td"},"DataRow"))))),(0,a.kt)("p",null,"For instance "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-BBj"},"column!.setValueFormatterExpression(\"'(' + x + ')')\n")),(0,a.kt)("h2",{id:"provided-formatters"},"Provided Formatters"),(0,a.kt)("p",null,"The BBjGridExWidget uses the columns's ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/JetBrains/jdk8u_jdk/blob/master/src/share/classes/java/sql/Types.java"},"SQL types")," provided by the ResultSet to auto-attach the correct value formatter for each column.  For instance, When the column's SQL type is ",(0,a.kt)("inlineCode",{parentName:"p"},"java.sql.Types.NUMERIC"),", the grid will attach the  ",(0,a.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxFilters/GxFilterNumber.html"},(0,a.kt)("inlineCode",{parentName:"a"},"GxExpressionNumbersFormatter"))," expression and so on for other types. "),(0,a.kt)("h3",{id:"types---expressions-mapping"},"Types - Expressions Mapping"),(0,a.kt)("p",null,"The following shows which value formatter expression is used for each column type:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Expression")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"SQL Type")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionNumbersFormatter.html"},"GxExpressionNumbersFormatter")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"BIGINT"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"TINYINT"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"SMALLINT"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"INTEGER"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"DECIMAL"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"DOUBLE"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"FLOAT"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"REAL"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"NUMERIC"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionDateTimesFormatter.html"},"GxExpressionDateTimesFormatter")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"DATE"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"TIME"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"TIME_WITH_TIMEZONE"),",",(0,a.kt)("inlineCode",{parentName:"td"},"TIMESTAMP"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"TIMESTAMP_WITH_TIMEZONE"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionStringsFormatter.html"},"GxExpressionStringsFormatter")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"CHAR"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"VARCHAR"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"NVARCHAR"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"NCHAR"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"LONGVARCHAR"),", ",(0,a.kt)("inlineCode",{parentName:"td"},"LONGNVARCHAR"))))),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Beside the previous expressions, the grid provides also a ",(0,a.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionBytesFormatter.html"},"GxExpressionBytesFormatter"),". The Expression defines a grid expression to format bytes to one of the following measuring terms: ",(0,a.kt)("inlineCode",{parentName:"p"},"['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']")," ")),(0,a.kt)("h3",{id:"configure-provided-formatters"},"Configure Provided Formatters"),(0,a.kt)("p",null,"You can access the attached value formatter expression using the ",(0,a.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget.getValueFormatterExpression"),"\nThe method will return the attached expression if any, ",(0,a.kt)("inlineCode",{parentName:"p"},"null()")," otherwise."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Expression are attached after calling ",(0,a.kt)("inlineCode",{parentName:"p"},"setData"),". For more information @see ",(0,a.kt)("a",{parentName:"p",href:"../data/overview#the-bbjgridexwidgetsetdata-method"},(0,a.kt)("inlineCode",{parentName:"a"},"The BBjGridExWidget::setData method")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\nwnd! = BBjAPI().openSysGui("X0").addWindow(10, 10, 400, 600, "Value Formatter")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT LABEL, COST FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!, 100, 0, 0, 800, 600)\n  grid!.setData(rs!)\n\n  cost! = grid!.getColumn("COST")\n  cost!.getValueFormatterExpression().setMask("$#,##0.00")\nreturn\n\nbyebye:\nbye\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"BBjGridExWidget - Value Formatters",src:n(6050).Z,width:"402",height:"632"})),(0,a.kt)("h3",{id:"sample-custom-formatter"},"Sample: Custom Formatter"),(0,a.kt)("p",null,"The grid exposes the ",(0,a.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionInterface.html"},(0,a.kt)("inlineCode",{parentName:"a"},"GxExpressionInterface"))," and the ",(0,a.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionAbstract.html"},(0,a.kt)("inlineCode",{parentName:"a"},"GxExpressionAbstract"))," for creating custom expressions."),(0,a.kt)("p",null,"In the example below, the following can be noticed:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The expression extends ",(0,a.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxExpressions/GxExpressionAbstract.html"},(0,a.kt)("inlineCode",{parentName:"a"},"GxExpressionAbstract"))," to allow the configuration of the expression"),(0,a.kt)("li",{parentName:"ul"},"The expression will take the provided Currency and Locale and build the Javascript code"),(0,a.kt)("li",{parentName:"ul"},"The Javascript code uses the ",(0,a.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options"},(0,a.kt)("inlineCode",{parentName:"a"},"Intl"))," API to handle number formatting")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxExpressions.bbj::GxExpressionAbstract\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\n// highlight-start\nclass public PriceFormatterExp extends GxExpressionAbstract\n\n  rem /**\n  rem  * Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR"\n  rem  * for the euro, or "CNY" for the Chinese.\n  rem  *\n  rem  * @see https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=currency-codes\n  rem  */\n  field public BBjString Currency$ = "USD"\n\n  rem A valid locale. for instance "de-DE" for germany.\n  field public BBjString Locale$ = "en-US"\n\n  rem /**\n  rem  * {@inheritDoc}\n  rem  */\n  method public String toString()\n    exp! = ""\n    exp! = exp! + "const Currency$ = \'" + #Currency$ + "\';"\n    exp! = exp! + "const Locale$ = \'" + #Locale$ + "\';"\n    exp! = exp! + "const formatter = new Intl.NumberFormat(Locale$, {style: \'currency\', currency: Currency$});"\n    exp! = exp! + "return formatter.format(value);"\n    methodret exp!\n  methodend\n\nclassend\n// highlight-end\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10, 10, 400, 600, "Value Formatter")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT LABEL, COST FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!, 100, 0, 0, 800, 600)\n  grid!.setData(rs!)\n\n  cost! = grid!.getColumn("COST")\n\n  // highlight-start\n  exp! = new PriceFormatterExp()\n  exp!.setCurrency("EUR")\n  exp!.setLocale("de-DE")\n\n  cost!.setValueFormatterExpression(exp!)\n  // highlight-end\nreturn\n\nbyebye:\nbye\n')),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"BBjGridExWidget - Custom Value Formatters",src:n(1167).Z,width:"402",height:"632"})))}m.isMDXComponent=!0},1167:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/custom-value-formatter-74624c9cd6bae635b6fd446dc4a94af0.png"},6050:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/value-formatter-5d90842ce6ad219610a4dae6e558d28a.png"}}]);