"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6040],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),g=l(t),u=o,w=g["".concat(d,".").concat(u)]||g[u]||p[u]||i;return t?r.createElement(w,s(s({ref:n},c),{},{components:t})):r.createElement(w,s({ref:n},c))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=g;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:1,title:"Row IDs"},s=void 0,a={unversionedId:"rows/rows-id",id:"rows/rows-id",title:"Row IDs",description:"This section explains how the grid assigns row IDs and shows how applications can supply custom row IDs.",source:"@site/docs/rows/rows-id.md",sourceDirName:"rows",slug:"/rows/rows-id",permalink:"/BBjGridExWidget/docs/rows/rows-id",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/rows/rows-id.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Row IDs"},sidebar:"tutorialSidebar",previous:{title:"Rows",permalink:"/BBjGridExWidget/docs/category/rows"},next:{title:"Row Sorting",permalink:"/BBjGridExWidget/docs/rows/row-sorting"}},d={},l=[{value:"Grid Assigned IDs",id:"grid-assigned-ids",level:2},{value:"Application Assigned IDs",id:"application-assigned-ids",level:2}],c={toc:l};function p(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This section explains how the grid assigns row IDs and shows how applications can supply custom row IDs."),(0,o.kt)("p",null,"Each grid row has a unique row ID which is used by the grid to identify rows, e.g. for identifying what rows are currently selected. These row IDs can be Grid Assigned or Application Assigned."),(0,o.kt)("h2",{id:"grid-assigned-ids"},"Grid Assigned IDs"),(0,o.kt)("p",null,"Row IDs are generated by the grid when data is supplied to the grid. The grid uses an auto-generated ID based on the DataRow\ncontent. "),(0,o.kt)("p",null,"The row ID/Key of the DataRow can be retrieved using the ",(0,o.kt)("a",{parentName:"p",href:"https://basishub.github.io/components/javadoc/com/basiscomponents/db/DataRow.html#getRowKey()"},(0,o.kt)("inlineCode",{parentName:"a"},"DataRow::getRowKey"))," method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-BBj"},"use com.basiscomponents.db.DataRow\n\ndeclare DataRow row!\nkey$ = row!.getRowKey()\n")),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The row ID changes for a row when the content is changed."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientEvents.bbj::GxClientEventsRowSelection\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientRowModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Grid Assigned IDs")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  grid!.setCallback(grid!.ON_GRID_ROW_SELECT(),"onSelectionEvent")\n  grid!.setData(rs!)\nreturn\n\nonSelectionEvent:\n  declare auto GxClientEventsRowSelection payload!\n  declare auto BBjVector rows!\n  declare auto GxClientRowModel rowModel!\n\n  ev! = BBjAPI().getLastEvent()\n  payload! = ev!.getObject()\n  rows! =  payload!.getSelectedRows()\n  rowModel! = rows!.getItem(0)\n  \n  let x= msgbox(rowModel!.getId(), 0, "Selected Row Key")\nreturn\n\nbyebye:\nbye\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"BBjGridExWidget - Column Animation",src:t(7696).Z,width:"795",height:"623"})),(0,o.kt)("h2",{id:"application-assigned-ids"},"Application Assigned IDs"),(0,o.kt)("p",null,"When the Application assigns Row IDs, this provides a common Row ID across the grid and the Application. This has advantages such as preserving the row ID when updating the DataRows."),(0,o.kt)("p",null,"Setting Row IDs is done using the ",(0,o.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget::setData")," method, When passing the ResultSet , pass the name of the column to use as\na row ID."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-BBj"}," void setData(ResultSet rs!, BBjString indexdBy$)\n")),(0,o.kt)("p",null,"The following sample show how to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"CDNUMBER")," in the CD Store database as a row id."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientEvents.bbj::GxClientEventsRowSelection\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientRowModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Grid Assigned IDs")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  grid!.setCallback(grid!.ON_GRID_ROW_SELECT(),"onSelectionEvent")\n  // highlight-next-line\n  grid!.setData(rs!, "CDNUMBER")\nreturn\n\nonSelectionEvent:\n  declare auto GxClientEventsRowSelection payload!\n  declare auto BBjVector rows!\n  declare auto GxClientRowModel rowModel!\n\n  ev! = BBjAPI().getLastEvent()\n  payload! = ev!.getObject()\n  rows! =  payload!.getSelectedRows()\n  rowModel! = rows!.getItem(0)\n  \n  let x= msgbox(rowModel!.getId(), 0, "Selected Row Key")\nreturn\n\nbyebye:\nbye\n')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"BBjGridExWidget - Column Animation",src:t(4287).Z,width:"798",height:"626"})))}p.isMDXComponent=!0},4287:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/application-assigned-id-23c4887c6c732c3cebbf8a80b27a1169.png"},7696:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/grid-assigned-id-76647b3d00c79e2b54ed9568735cf471.png"}}]);