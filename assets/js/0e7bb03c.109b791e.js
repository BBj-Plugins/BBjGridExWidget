"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4741],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=l.createContext({}),s=function(e){var t=l.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return l.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},g=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),g=s(n),m=i,p=g["".concat(d,".").concat(m)]||g[m]||u[m]||r;return n?l.createElement(p,o(o({ref:t},c),{},{components:n})):l.createElement(p,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=g;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var s=2;s<r;s++)o[s]=n[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7960:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>s});var l=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3,title:"Filter API"},o=void 0,a={unversionedId:"filtering/filter-api",id:"filtering/filter-api",title:"Filter API",description:"You can access and set the models for filters through the grid API, or access individual filter instances directly for more control. This page details how to do both.",source:"@site/docs/filtering/filter-api.md",sourceDirName:"filtering",slug:"/filtering/filter-api",permalink:"/BBjGridExWidget/docs/filtering/filter-api",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/filtering/filter-api.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Filter API"},sidebar:"tutorialSidebar",previous:{title:"GxFilterSetFilter",permalink:"/BBjGridExWidget/docs/filtering/columns-filter/gx-filter-set-filter"},next:{title:"Floating Filter",permalink:"/BBjGridExWidget/docs/filtering/floating-filter"}},d={},s=[{value:"Get / Set All Filter Models",id:"get--set-all-filter-models",level:2},{value:"Reset All filters",id:"reset-all-filters",level:2},{value:"Advanced Example: Get / Set All Filter Models",id:"advanced-example-get--set-all-filter-models",level:2}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,l.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can access and set the models for filters through the grid API, or access individual filter instances directly for more control. This page details how to do both."),(0,i.kt)("h2",{id:"get--set-all-filter-models"},"Get / Set All Filter Models"),(0,i.kt)("p",null,"It is possible to get the state of all filters using the grid API method ",(0,i.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget::getFilterModel"),", and to set the state using ",(0,i.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget::setFilterModel"),". "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Method")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/BBjGridExWidget/BBjGridExWidget.html#setFilterModel"},(0,i.kt)("inlineCode",{parentName:"a"},"setFilterModel"))),(0,i.kt)("td",{parentName:"tr",align:null},"Set and apply filter ",(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxClientModels/GxClientFilterModel.html"},(0,i.kt)("inlineCode",{parentName:"a"},"GxClientFilterModel"))," for the given column")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/BBjGridExWidget/BBjGridExWidget.html#getFilterModel"},(0,i.kt)("inlineCode",{parentName:"a"},"getFilterModel"))),(0,i.kt)("td",{parentName:"tr",align:null},"This method will return a ",(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxClientModels/GxClientFilterModel.html"},(0,i.kt)("inlineCode",{parentName:"a"},"GxClientFilterModel"))," for the given column. If the column has already some filter values set through the UI , then the model will contain these changes too. In case the grid is not ready (not renderer yet) then the method will just return any empty filter model for the column.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/BBjGridExWidget/BBjGridExWidget.html#getFilterAsCombinedModel"},(0,i.kt)("inlineCode",{parentName:"a"},"getFilterAsCombinedModel"))),(0,i.kt)("td",{parentName:"tr",align:null},"Get The filter ",(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxClientModels/GxClientFilterCombinedModel.html"},(0,i.kt)("inlineCode",{parentName:"a"},"GxClientFilterCombinedModel"))," for the given column. If the column's filter does not support combined models , an ",(0,i.kt)("inlineCode",{parentName:"td"},"256")," error will be thrown")))),(0,i.kt)("p",null,"For instance in the following snippet, we get The filter model for the ",(0,i.kt)("inlineCode",{parentName:"p"},"FIRST_NAME")," column then update the filter type and filter text. At then we call the ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," method to execute the filter"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj"},'use ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterTextModel\n\ndeclare auto GxClientFilterTextModel model!\nmodel! = grid!.getFilterModel("FIRST_NAME")\nmodel!.setFilter("john")\nmodel!.setType(GxColumnFilterTextFilterOptions.CONTAINS())\nmodel!.update()\n')),(0,i.kt)("h2",{id:"reset-all-filters"},"Reset All filters"),(0,i.kt)("p",null,"You can reset all filters by doing the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj"},"grid!.clearFilters()\n")),(0,i.kt)("h2",{id:"advanced-example-get--set-all-filter-models"},"Advanced Example: Get / Set All Filter Models"),(0,i.kt)("p",null,"The example below shows getting and setting all the filter models in action and how to access the filter components directly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterCombinedModel\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterNumberModel\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterTextModel\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterBooleanModel\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterDateTimeModel\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientFilterSetFilterModel\nuse ::BBjGridExWidget/GxFilters.bbj::GxColumnFilterTextFilterOptions\nuse ::BBjGridExWidget/GxFilters.bbj::GxColumnFilterDateTimeFilterOptions\nuse ::BBjGridExWidget/GxFilters.bbj::GxColumnFilterNumberFilterOptions\nuse ::BBjGridExWidget/GxFilters.bbj::GxFilterSetFilter\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Filters API Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\nwnd!.setCallback(BBjAPI.ON_RESIZE,"resize")\n\nSysGui! = BBjAPI().getSysGui()\nboldFont! = SysGui!.makeFont("arial",13,BBjFont.FONT_BOLD)\n\nleftPanelTitle! = wnd!.addStaticText(202,10,10,200,25,"Filters API Calls" , $0000$)\nleftPanelTitle!.setFont(boldFont!)\n\nnameFilter! = wnd!.addCheckBox(204,10,50,200,22,"Name Contains John")\nnameFilter!.setCallback(BBjAPI.ON_CHECK_OFF,"onNameFilterToggle")\nnameFilter!.setCallback(BBjAPI.ON_CHECK_ON,"onNameFilterToggle")\n\nsalesFilter! = wnd!.addCheckBox(205,10,75,200,22,"Sales > 50 && Sales < 100")\nsalesFilter!.setCallback(BBjAPI.ON_CHECK_OFF,"onSalesFilterToggle")\nsalesFilter!.setCallback(BBjAPI.ON_CHECK_ON,"onSalesFilterToggle")\n\npayDataFilter! = wnd!.addCheckBox(206,10,100,200,22,"PayDate > 1993-01-01")\npayDataFilter!.setCallback(BBjAPI.ON_CHECK_OFF,"onPayDateFilterToggle")\npayDataFilter!.setCallback(BBjAPI.ON_CHECK_ON,"onPayDateFilterToggle")\n\ncountryFilter! = wnd!.addCheckBox(207,10,125,200,22,"Country is Italy OR Mexico")\ncountryFilter!.setCallback(BBjAPI.ON_CHECK_OFF,"onCountryFilterToggle")\ncountryFilter!.setCallback(BBjAPI.ON_CHECK_ON,"onCountryFilterToggle")\n\nisOver120Filter! = wnd!.addCheckBox(208,10,150,200,22,"isOver120 = False")\nisOver120Filter!.setCallback(BBjAPI.ON_CHECK_OFF,"onIsOver120FilterToggle")\nisOver120Filter!.setCallback(BBjAPI.ON_CHECK_ON,"onIsOver120FilterToggle")\n\nclearFilters! = wnd!.addButton(209,10,180,100,22,"Clear All Filters")\nclearFilters!.setCallback(BBjAPI.ON_BUTTON_PUSH,"onClearFilters")\n\ngosub main\nprocess_events\n\nmain:\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("ChileCompany"))\n  rs! = sbc!.retrieve("SELECT FIRST_NAME, COUNTRY, SALES_YTD, LAST_PAY_DATE, case when NUM(OVER_120) > 0 THEN TRUE ELSE FALSE END AS IS_OVER_120 FROM CUSTOMER")\n\n  declare BBjGridExWidget grid!\n\n  grid! = new BBjGridExWidget(wnd!,100,200,0,600,600)\n  grid!.addColumn("FIRST_NAME"   ,"First Name")\n  grid!.addColumn("COUNTRY"      ,"Country")\n  grid!.addColumn("SALES_YTD"    ,"Sales")\n  grid!.addColumn("LAST_PAY_DATE","Pay Date")\n  grid!.addColumn("IS_OVER_120"  ,"Is Over 120")\n\n  grid!.setData(rs!)\n\n  rem IMPORTANT: GxFilterSetFilter is part of the Enhanced grid\n  rem check for license and (for development purposes) for license-less behavior\n  if (grid!.isLicensed() and !grid!.getForceCommunityBuild()) then\n    country! = grid!.getColumn("COUNTRY")\n    country!.setFilter(new GxFilterSetFilter())\n  else\n    rem if no license available,\n    rem deactivate filter and add a notice as tooltip:\n    countryFilter!.setEnabled(0)\n    countryFilter!.setToolTipText("Deactivated: Part of the Enhanced Grid")\n  endif\n\n  grid!.getColumn("IS_OVER_120").setType(16)\n\n  grid!.getOptions().setAnimateRows(1)\nreturn\n\nonNameFilterToggle:\n  event! = BBjAPI().getLastEvent()\n  control! = event!.getControl()\n  isSelected! = control!.isSelected()\n\n  declare auto GxClientFilterTextModel textModel!\n  textModel! = grid!.getFilterModel("FIRST_NAME")\n  if(isSelected!)\n    textModel!.setFilter("john")\n    textModel!.setType(GxColumnFilterTextFilterOptions.CONTAINS())\n  else\n    textModel!.clearFilter()\n  fi\n\n  textModel!.update()\n  grid!.ensureColumnVisible("FIRST_NAME")\nreturn\n\nonSalesFilterToggle:\n  event! = BBjAPI().getLastEvent()\n  control! = event!.getControl()\n  isSelected! = control!.isSelected()\n\n  declare auto GxClientFilterCombinedModel numberCombinedModel!\n  declare auto GxClientFilterNumberModel firstCondition!\n  declare auto GxClientFilterNumberModel secondCondition!\n\n  numberCombinedModel! = grid!.getFilterAsCombinedModel("SALES_YTD")\n  \n  if(isSelected!)\n    firstCondition! = numberCombinedModel!.getFirstCondition()\n    firstCondition!.setFilter(50)\n    firstCondition!.setType(GxColumnFilterNumberFilterOptions.GREATER_THAN())\n\n    secondCondition! = new GxClientFilterNumberModel(100)\n    secondCondition!.setType(GxColumnFilterNumberFilterOptions.LESS_THAN())\n    numberCombinedModel!.setSecondCondition(secondCondition!)\n\n    numberCombinedModel!.setOperator(numberCombinedModel!.OPERATOR_AND())\n  else\n    numberCombinedModel!.clearFilter()\n  fi\n\n  numberCombinedModel!.update()\n  grid!.ensureColumnVisible("SALES_YTD")\nreturn\n\nonPayDateFilterToggle:\n  event! = BBjAPI().getLastEvent()\n  control! = event!.getControl()\n  isSelected! = control!.isSelected()\n\n  declare auto GxClientFilterDateTimeModel dateModel!\n  dateModel! = grid!.getFilterModel("LAST_PAY_DATE")\n\n  if(isSelected!)\n    dateModel!.setFilter("1993-01-01Z")\n    dateModel!.setType(GxColumnFilterDateTimeFilterOptions.GREATER_THAN())\n  else\n    dateModel!.clearFilter()\n  fi\n\n  dateModel!.update()\n  grid!.ensureColumnVisible("LAST_PAY_DATE")\nreturn\n\nonCountryFilterToggle:\n  event! = BBjAPI().getLastEvent()\n  control! = event!.getControl()\n  isSelected! = control!.isSelected()\n\n  declare auto GxClientFilterSetFilterModel countryModel!\n  countryModel! = grid!.getFilterModel("COUNTRY")\n\n  if(isSelected!)\n    countryModel!.getValues().add("Italy")\n    countryModel!.getValues().add("Mexico")\n  else\n    countryModel!.selectEverything()\n  fi\n\n  countryModel!.update()\n  grid!.ensureColumnVisible("COUNTRY")\nreturn\n\nonIsOver120FilterToggle:\n  event! = BBjAPI().getLastEvent()\n  control! = event!.getControl()\n  isSelected! = control!.isSelected()\n\n  declare auto GxClientFilterBooleanModel booleanModel!\n  booleanModel! = grid!.getFilterModel("IS_OVER_120")\n\n  if(isSelected!)\n    booleanModel!.setFilter(0)\n  else\n    booleanModel!.clearFilter()\n  fi\n\n  booleanModel!.update()\n  grid!.ensureColumnVisible("IS_OVER_120")\nreturn\n\nonClearFilters:\n    nameFilter!.setSelected(0)\n    salesFilter!.setSelected(0)\n    payDataFilter!.setSelected(0)\n    countryFilter!.setSelected(0)\n    isOver120Filter!.setSelected(0)\n    grid!.clearFilters()\n    grid!.ensureColumnVisible("FIRST_NAME")\nreturn\n\nresize:\n  ev! = BBjAPI().getLastEvent()\n  w=ev!.getWidth()\n  h=ev!.getHeight()\n  grid!.setSize(w - 200,h)\nreturn\n\nbyebye:\nbye\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"BBjGridExWidget - Filter API",src:n(9218).Z,width:"802",height:"632"})))}u.isMDXComponent=!0},9218:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/filter-api-c63c985652ad95cb2c748237627603ed.png"}}]);