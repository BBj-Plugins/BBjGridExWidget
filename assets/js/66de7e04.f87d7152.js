"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2502],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=l(n),p=r,b=c["".concat(d,".").concat(p)]||c[p]||g[p]||o;return n?a.createElement(b,i(i({ref:t},u),{},{components:n})):a.createElement(b,i({ref:t},u))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},590:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5,title:"Status Bar",sidebar_class_name:"enhanced-feature",description:"The status bar appears below the grid and holds components that typically display information about the data in the grid."},i=void 0,s={unversionedId:"accessories/status-bar",id:"accessories/status-bar",title:"Status Bar",description:"The status bar appears below the grid and holds components that typically display information about the data in the grid.",source:"@site/docs/accessories/status-bar.md",sourceDirName:"accessories",slug:"/accessories/status-bar",permalink:"/BBjGridExWidget/docs/accessories/status-bar",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/accessories/status-bar.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Status Bar",sidebar_class_name:"enhanced-feature",description:"The status bar appears below the grid and holds components that typically display information about the data in the grid."},sidebar:"tutorialSidebar",previous:{title:"Context Menu",permalink:"/BBjGridExWidget/docs/accessories/context-menu"},next:{title:"Overlay",permalink:"/BBjGridExWidget/docs/accessories/overlay"}},d={},l=[{value:"Grid Provided Status Bar components",id:"grid-provided-status-bar-components",level:2},{value:"Configuring the Status Bar",id:"configuring-the-status-bar",level:2},{value:"Component Alignment",id:"component-alignment",level:2},{value:"Labels and Number Formats",id:"labels-and-number-formats",level:2},{value:"Advanced Status Bar Example",id:"advanced-status-bar-example",level:2},{value:"Configuring The Aggregation Panel",id:"configuring-the-aggregation-panel",level:2}],u={toc:l};function g(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/Version-Enhanced-038279",alt:"BBjGridExWidget - Enhanced Version"}),"\n",(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/BBj-SAM%20required-orange",alt:"BBjGridExWidget - SAM Required"})),(0,r.kt)("p",null,"Within the Status Bar you can specify which Status Bar Panels you want to display."),(0,r.kt)("h2",{id:"grid-provided-status-bar-components"},"Grid Provided Status Bar components"),(0,r.kt)("p",null,"The status bar components provided by the grid are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxStatusBar/GxStatusBarTotalRowCountComponent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxStatusBarTotalRowCountComponent")),": Provides the total row count."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxStatusBar/GxStatusBarTotalAndFilteredRowCountComponent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxStatusBarTotalAndFilteredRowCountComponent")),": Provides the total and filtered row count."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxStatusBar/GxStatusBarFilteredRowCountComponent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxStatusBarFilteredRowCountComponent")),": Provides the filtered row count."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxStatusBar/GxStatusBarSelectedRowCountComponent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxStatusBarSelectedRowCountComponent")),": Provides the selected row count."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxStatusBar/GxStatusBarAggregationComponent.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxStatusBarAggregationComponent")),": Provides aggregations on the selected range.")),(0,r.kt)("h2",{id:"configuring-the-status-bar"},"Configuring the Status Bar"),(0,r.kt)("p",null,"The status bar is configured using the ",(0,r.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxStatusBar/GxStatusBar.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxStatusBar")),". The object allows you to add/remove components and configure the alignment and visibility"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If align is not specified the components will default to being aligned to the right.")),(0,r.kt)("p",null,"The snippet below shows a status bar configured with the grid provided components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj"},'use ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBar\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarTotalRowCountComponent\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarTotalAndFilteredRowCountComponent\n\ndeclare GxStatusBar statusbar!\nstatusbar! = grid!.getStatusbar()\n\nstatusbar!.addComponent(new GxStatusBarTotalRowCountComponent())\nstatusbar!.addComponent(new GxStatusBarTotalAndFilteredRowCountComponent("right"))\n')),(0,r.kt)("h2",{id:"component-alignment"},"Component Alignment"),(0,r.kt)("p",null,"Components can be aligned either to the ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),", in the ",(0,r.kt)("inlineCode",{parentName:"p"},"center")," of the bar or on the ",(0,r.kt)("inlineCode",{parentName:"p"},"right")," (the default). Components within these alignments will be added in the order specified."),(0,r.kt)("h2",{id:"labels-and-number-formats"},"Labels and Number Formats"),(0,r.kt)("p",null,'Labels within the Status Bar (ie. "Rows", "Total Rows", "Average") and number formatters such as the decimal and thousand separators can be changed by using the Grid\'s Localization'),(0,r.kt)("h2",{id:"advanced-status-bar-example"},"Advanced Status Bar Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBar\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarTotalRowCountComponent\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarFilteredRowCountComponent\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarTotalAndFilteredRowCountComponent\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarSelectedRowCountComponent\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Statusbar Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\nwnd!.setCallback(BBjAPI.ON_RESIZE,"resize")\n\nstatic! = wnd!.addStaticText(202,10,10,200,25,"Toggle Statusbar Components" , $0000$ )\ntotalRow! = wnd!.addCheckBox(203,10,30,200,22,"Total Row")\ntotalRow!.setSelected(1)\ntotalRow!.setName(GxStatusBarTotalRowCountComponent.getId())\ntotalRow!.setCallback(BBjAPI.ON_CHECK_OFF,"onToggle")\ntotalRow!.setCallback(BBjAPI.ON_CHECK_ON,"onToggle")\n\nfilteredRow! = wnd!.addCheckBox(204,10,50,200,22,"Filtered Row")\nfilteredRow!.setSelected(1)\nfilteredRow!.setName(GxStatusBarFilteredRowCountComponent.getId())\nfilteredRow!.setCallback(BBjAPI.ON_CHECK_OFF,"onToggle")\nfilteredRow!.setCallback(BBjAPI.ON_CHECK_ON,"onToggle")\n\ntotalAndFilteredRow! = wnd!.addCheckBox(205,10,70,200,22,"Total And Filtered Row")\ntotalAndFilteredRow!.setSelected(1)\ntotalAndFilteredRow!.setName(GxStatusBarTotalAndFilteredRowCountComponent.getId())\ntotalAndFilteredRow!.setCallback(BBjAPI.ON_CHECK_OFF,"onToggle")\ntotalAndFilteredRow!.setCallback(BBjAPI.ON_CHECK_ON,"onToggle")\n\nselectedRow! = wnd!.addCheckBox(206,10,90,200,22,"Selected Row")\nselectedRow!.setSelected(1)\nselectedRow!.setName(GxStatusBarSelectedRowCountComponent.getId())\nselectedRow!.setCallback(BBjAPI.ON_CHECK_OFF,"onToggle")\nselectedRow!.setCallback(BBjAPI.ON_CHECK_ON,"onToggle")\n\ngosub main\n\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n  declare GxStatusBar statusbar!\n  \n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100,200,0,600,600)\n  grid!.getOptions().setMultipleSelection(1)\n\n  statusbar! = grid!.getStatusbar()\n  statusbar!.addComponent(new GxStatusBarTotalRowCountComponent())\n  statusbar!.addComponent(new GxStatusBarFilteredRowCountComponent())\n  statusbar!.addComponent(new GxStatusBarTotalAndFilteredRowCountComponent("right"))\n  statusbar!.addComponent(new GxStatusBarSelectedRowCountComponent("center"))\n\n  grid!.setData(rs!)\nreturn\n\nresize:\n  ev! = BBjAPI().getLastEvent()\n  w=ev!.getWidth()\n  h=ev!.getHeight()\n  grid!.setSize(w-200,h)\nreturn\n\nonToggle:\n  event! = BBjAPI().getLastEvent()\n  control! = event!.getControl()\n  \n  name$ = control!.getName()\n  visibility! = iff(control!.isSelected() , 1 ,0)\n  \n  statusbar! = grid!.getStatusbar()\n  statusbar!.setComponentVisibility(name$  , visibility!)\nreturn \n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Statusbar API",src:n(4970).Z,width:"802",height:"632"})),(0,r.kt)("h2",{id:"configuring-the-aggregation-panel"},"Configuring The Aggregation Panel"),(0,r.kt)("p",null,"If you have multiple ranges selected (by holding down ",(0,r.kt)("kbd",null,"Ctrl")," while dragging) and a cell is in multiple ranges, the cell will be only included once in the aggregation."),(0,r.kt)("p",null,"If the cell does not contain a simple number value, then it will not be included in average, min max or sum, however it will still be included in count."),(0,r.kt)("p",null,"In the grid below, select a range by dragging the mouse over cells and notice the status bar showing the aggregation values as you drag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBar\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarAggregationComponent\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\nwnd! = BBjAPI().openSysGui("X0").addWindow(10, 10, 800, 600, "GxStatusBarAggregationComponent")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n  declare GxStatusBar statusbar!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT TITLE, COST , NUMBEROFTRACKS FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!, 100, 0, 0, 800, 600)\n  grid!.getOptions().setEnableRangeSelection(1)\n  grid!.setFitToGrid()\n\n  statusbar! = grid!.getStatusbar()\n  statusbar!.addComponent(new GxStatusBarAggregationComponent("right"))\n\n  grid!.setData(rs!)\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Configuring The Aggregation Panel",src:n(7374).Z,width:"802",height:"632"})),(0,r.kt)("p",null,"By default all of the aggregations available will be displayed but you can configure the aggregation component to only show a subset of the aggregations."),(0,r.kt)("p",null,"In this code snippet we have configured the aggregation component to only show ",(0,r.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"avg"),":"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"GxStatusBarAggregationComponent")," supports the following agg functions:  ",(0,r.kt)("inlineCode",{parentName:"p"},"count"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sum"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"max")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"avg"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBar\nuse ::BBjGridExWidget/GxStatusBar.bbj::GxStatusBarAggregationComponent\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\nwnd! = BBjAPI().openSysGui("X0").addWindow(10, 10, 800, 600, "GxStatusBarAggregationComponent")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n  declare GxStatusBar statusbar!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT TITLE, COST , NUMBEROFTRACKS FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!, 100, 0, 0, 800, 600)\n  grid!.getOptions().setEnableRangeSelection(1)\n  grid!.setFitToGrid()\n\n  comp! = new GxStatusBarAggregationComponent("right")\n  aggFuncs! = new java.util.HashSet()\n  aggFuncs!.add("min")\n  aggFuncs!.add("max")\n  aggFuncs!.add("avg")\n  comp!.setAggFuncs(aggFuncs!)\n  \n  statusbar! = grid!.getStatusbar()\n  statusbar!.addComponent(comp!)\n\n  grid!.setData(rs!)\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Configuring The Aggregation Panel",src:n(2094).Z,width:"802",height:"632"})))}g.isMDXComponent=!0},7374:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/status-bar-agg-1-d366e2b916f9f6ef3ca9e15e5d7132d6.png"},2094:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/status-bar-agg-2-a4378ad103f7dedbe0df8fb54fb7e7d8.png"},4970:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/status-bar-sample-566571a2e656212e2bff0c8cc460351e.png"}}]);