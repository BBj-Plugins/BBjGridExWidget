"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7737],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(7294),r=t(6010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(7462),r=t(7294),o=t(6010),i=t(2389),l=t(7392),s=t(7094),p=t(2466);const d="tabList__CuJ",u="tabItem_LNqP";function m(e){var n,t;const{lazy:i,block:m,defaultValue:c,values:g,groupId:h,className:w}=e,b=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=g?g:b.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),k=(0,l.l)(f,((e,n)=>e.value===n.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===c?c:null!=(n=null!=c?c:null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)?n:b[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:E,setTabGroupChoices:v}=(0,s.U)(),[y,C]=(0,r.useState)(N),S=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=h){const e=E[h];null!=e&&e!==y&&f.some((n=>n.value===e))&&C(e)}const A=e=>{const n=e.currentTarget,t=S.indexOf(n),a=f[t].value;a!==y&&(T(n),C(a),null!=h&&v(h,String(a)))},x=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var a;const n=S.indexOf(e.currentTarget)+1;t=null!=(a=S[n])?a:S[0];break}case"ArrowLeft":{var r;const n=S.indexOf(e.currentTarget)-1;t=null!=(r=S[n])?r:S[S.length-1];break}}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":m},w)},f.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,key:n,ref:e=>S.push(e),onKeyDown:x,onFocus:A,onClick:A},i,{className:(0,o.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":y===n})}),null!=t?t:n)}))),i?(0,r.cloneElement)(b.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==y})))))}function c(e){const n=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(n)},e))}},365:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=t(7462),r=(t(7294),t(3905)),o=t(5488),i=t(5162);const l={sidebar_position:3,title:"Row Spanning"},s=void 0,p={unversionedId:"rows/row-spanning",id:"rows/row-spanning",title:"Row Spanning",description:"By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows. This feature is similar to cell merging in Excel or row spanning in HTML tables.",source:"@site/docs/rows/row-spanning.mdx",sourceDirName:"rows",slug:"/rows/row-spanning",permalink:"/BBjGridExWidget/docs/rows/row-spanning",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/rows/row-spanning.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Row Spanning"},sidebar:"tutorialSidebar",previous:{title:"Row Sorting",permalink:"/BBjGridExWidget/docs/rows/row-sorting"},next:{title:"Row Pinning",permalink:"/BBjGridExWidget/docs/rows/row-pinning"}},d={},u=[{value:"Configuring Row Spanning",id:"configuring-row-spanning",level:2},{value:"RowSpanExpression",id:"rowspanexpression",level:3},{value:"Row Spanning Example",id:"row-spanning-example",level:2}],m={toc:u};function c(e){let{components:n,...l}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows. This feature is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"cell merging")," in Excel or ",(0,r.kt)("inlineCode",{parentName:"p"},"row spanning")," in HTML tables."),(0,r.kt)("h2",{id:"configuring-row-spanning"},"Configuring Row Spanning"),(0,r.kt)("p",null,"To allow row spanning, the grid must have grid option ",(0,r.kt)("inlineCode",{parentName:"p"},"SuppressRowTransform=1"),". Row spanning is then configured at the\ncolumn level. To have a cell span more than one row, you need to set the ",(0,r.kt)("inlineCode",{parentName:"p"},"RowSpanExpression")," , the expression must return how many rows to span."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The option ",(0,r.kt)("inlineCode",{parentName:"p"},"SuppressRowTransform=1")," is used to stop the grid positioning rows using CSS transform and instead the grid will\nuse CSS top. The reason row span will not work with CSS transform is that CSS transform creates a stacking context which\nconstrains CSS ",(0,r.kt)("inlineCode",{parentName:"p"},"z-index")," from placing cells on top of other cells in another row. "),(0,r.kt)("p",{parentName:"admonition"},"Having cells extend into other rows is necessary for row span which means it will not work when using CSS transform.\nThe downside to not using transform is performance; row animation (after sort or filter) will be slower.")),(0,r.kt)("h3",{id:"rowspanexpression"},"RowSpanExpression"),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"RowSpanExpression")," is arbitrary ",(0,r.kt)("strong",{parentName:"p"},"JavaScript")," code/expression that applies application-defined rules to check how many rows to span. The expression must return a number value to indicate the number of rows to span."),(0,r.kt)("p",null,"When working with expressions keep the following points in mind:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the expression has the word ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," in it, then we will assume it is a multi-line expression and will not wrap it."),(0,r.kt)("li",{parentName:"ul"},"If the expression does not have the word ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," in it, then we will insert the ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," statement and the ",(0,r.kt)("inlineCode",{parentName:"li"},";")," for you."),(0,r.kt)("li",{parentName:"ul"},"If the expression has many lines, then you will need to provide the ",(0,r.kt)("inlineCode",{parentName:"li"},";")," at the end of each line and also provide the ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," statement.")),(0,r.kt)("p",null,"Expressions have access to several predefined variables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},(0,r.kt)("strong",{parentName:"th"},"Variable")),(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"x"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Mapped from cell value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"value"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Same as x")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"data"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Mapped from the ",(0,r.kt)("inlineCode",{parentName:"td"},"DataRow"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"column"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Current column")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"columnGroup"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Current column group")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"getValue"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The value after it is processed by the ",(0,r.kt)("inlineCode",{parentName:"td"},"ValueGetterExpression"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"ctx"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The grid client context")))),(0,r.kt)("p",null,"For instance "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj"},'column!.setRowSpanExpression("data.SHOW ? 4 : 1")\n')),(0,r.kt)("h2",{id:"row-spanning-example"},"Row Spanning Example"),(0,r.kt)("p",null,"Row spanning will typically be used for creating reports with BBjGridExWidet.\nBelow is something that would be more typical of the row spanning feature. "),(0,r.kt)("p",null,"The following can be noted from the example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We disable soring , sidebar and menus to prevent the user from ruining the spanning."),(0,r.kt)("li",{parentName:"ul"},"Column ",(0,r.kt)("inlineCode",{parentName:"li"},"Show")," row spans by 4 rows when it has content."),(0,r.kt)("li",{parentName:"ul"},"Column ",(0,r.kt)("inlineCode",{parentName:"li"},"Show")," uses CSS class rules to specify background and border."),(0,r.kt)("li",{parentName:"ul"},"Column ",(0,r.kt)("inlineCode",{parentName:"li"},"Show")," has a custom cell renderer ",(0,r.kt)("inlineCode",{parentName:"li"},"(GxRendererCustomHTML)")," to make use of the extra space.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxRenderers/GxRendererCustomHTML.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxRendererCustomHTML"))," accepts a template.\nThis is a ",(0,r.kt)("a",{parentName:"p",href:"https://lodash.com/docs/4.17.15#template"},"lodash template"),". It starts with ",(0,r.kt)("inlineCode",{parentName:"p"},"<%")," and ends with ",(0,r.kt)("inlineCode",{parentName:"p"},"%>"),".\nTo force the template to execute and print directly what is inside it, we add the ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," sign\nto the start tag ",(0,r.kt)("inlineCode",{parentName:"p"},"<%="),".  Inside the template you can use only Javascript and embedded HTML and CSS."),(0,r.kt)("p",{parentName:"admonition"},"DO NOT confuse lodash templates syntax with JSP. They are different things.")),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"bbj",label:"row-span.bbj",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/Demo/assets/Utilities.bbj::GxDemoUtilities\nuse ::BBjGridExWidget/GxRenderers.bbj::GxRendererCustomHTML\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\nuse com.google.gson.JsonObject\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Row Spanning Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\nwnd!.setCallback(BBjAPI.ON_RESIZE,"resize")\n\ngosub main\nprocess_events\n\nmain:\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  rs! = ResultSet.fromJson(GxDemoUtilities.readAssetsAsString("data/row-span.json"))\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n\n  grid!.getOptions().setSuppressRowTransform(1)\n\n  grid!.getSidebar().setHiddenByDefault(1)\n  defaultColDef! = grid!.getOptions().getDefaultColumnDefinition()\n  defaultColDef!.setSortable(0)\n  defaultColDef!.setSuppressMenu(1)\n\n  grid!.setData(rs!)\n  grid!.setFitToGrid()\n\n  showColumn! = grid!.getColumn("SHOW")\n  showColumn!.setRowSpanExpression("data.SHOW ? 4 : 1")\n  renderingTemplate! = ""+\n: "<% if(params.value) { %>"+  \n:  "<div style=\'display: flex; flex-direction: column;align-items: baseline;\'>" +\n:     "<div class=\'show-name\' style=\'font-weight: bold\'>" +\n:          "<%= params.value.NAME %>"+\n:     "</div>" +\n:     "<div class=\'show-presenter\' style=\'font-weight: italic\'>" +\n:        "<%= params.value.PRESENTER %>"+\n:     "</div>" +\n:  "</div>"+\n: "<% } %>"\n  showColumn!.setCellRenderer(new GxRendererCustomHTML(renderingTemplate!))\n\n  cellStyleRules! = showColumn!.getCellClassRules()\n  cellStyleRules!.addProperty("show-cell","value !== undefined")\n\n  showCellStyle! = new JsonObject()\n  showCellStyle!.addProperty("background","white")\n  showCellStyle!.addProperty("border","1px solid lightgrey !important")\n  showCellStyle!.addProperty("border-top","none !important")\n\n  grid!.addStyle(".show-cell", showCellStyle!)\nreturn\n\nresize:\n  ev! = BBjAPI().getLastEvent()\n  w=ev!.getWidth()\n  h=ev!.getHeight()\n  grid!.setSize(w,h)\n  grid!.setFitToGrid()\nreturn\n\nbyebye:\nbye\n'))),(0,r.kt)(i.Z,{value:"data",label:"data/row-span.json",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "LOCALTIME": "5:00AM",\n    "SHOW": {\n      "NAME": "WAKE UP DUBLIN",\n      "PRESENTER": "ANDREW CONNELL"\n    },\n    "A": 0.231,\n    "B": 0.523\n  },\n  {\n    "LOCALTIME": "5:15AM",\n    "A": 0.423,\n    "B": 0.452\n  },\n  {\n    "LOCALTIME": "5:30AM",\n    "A": 0.537,\n    "B": 0.246\n  },\n  {\n    "LOCALTIME": "5:45AM",\n    "A": 0.893,\n    "B": 0.083\n  },\n  {\n    "LOCALTIME": "6:00AM",\n    "SHOW": {\n      "NAME": "PURE BACK IN THE DAY",\n      "PRESENTER": "KEVIN FLANAGAN"\n    },\n    "A": 0.231,\n    "B": 0.523\n  },\n  {\n    "LOCALTIME": "6:15AM",\n    "A": 0.423,\n    "B": 0.452\n  },\n  {\n    "LOCALTIME": "6:30AM",\n    "A": 0.537,\n    "B": 0.246\n  },\n  {\n    "LOCALTIME": "6:45AM",\n    "A": 0.893,\n    "B": 0.083\n  },\n  {\n    "LOCALTIME": "7:00AM",\n    "SHOW": {\n      "NAME": "THE QUEENS BREAKFAST",\n      "PRESENTER": "TONY SMITH"\n    },\n    "A": 0.231,\n    "B": 0.523\n  },\n  {\n    "LOCALTIME": "7:15AM",\n    "A": 0.423,\n    "B": 0.452\n  },\n  {\n    "LOCALTIME": "7:30AM",\n    "A": 0.537,\n    "B": 0.246\n  },\n  {\n    "LOCALTIME": "7:45AM",\n    "A": 0.893,\n    "B": 0.083\n  },\n  {\n    "LOCALTIME": "8:00AM",\n    "SHOW": {\n      "NAME": "COSMETIC SURGERY",\n      "PRESENTER": "NIALL CROSBY"\n    },\n    "A": 0.231,\n    "B": 0.523\n  },\n  {\n    "LOCALTIME": "8:15AM",\n    "A": 0.423,\n    "B": 0.452\n  },\n  {\n    "LOCALTIME": "8:30AM",\n    "A": 0.537,\n    "B": 0.246\n  },\n  {\n    "LOCALTIME": "8:45AM",\n    "A": 0.893,\n    "B": 0.083\n  },\n  {\n    "LOCALTIME": "8:00AM",\n    "SHOW": {\n      "NAME": "BRICKFIELD PARK SESSIONS",\n      "PRESENTER": "BRICKER MCGEE"\n    },\n    "A": 0.231,\n    "B": 0.523\n  },\n  {\n    "LOCALTIME": "8:15AM",\n    "A": 0.423,\n    "B": 0.452\n  },\n  {\n    "LOCALTIME": "8:30AM",\n    "A": 0.537,\n    "B": 0.246\n  },\n  {\n    "LOCALTIME": "8:45AM",\n    "A": 0.893,\n    "B": 0.083\n  }\n]\n')))),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Rows Spanning",src:t(9657).Z,width:"802",height:"632"})))}c.isMDXComponent=!0},9657:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/row-spanning-85bf936c8824225bd81c8b1cceea9b25.png"}}]);