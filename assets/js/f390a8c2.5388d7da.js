"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8586],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=i,m=u["".concat(d,".").concat(g)]||u[g]||p[g]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:1,title:"Grid Interface"},o=void 0,s={unversionedId:"api/grid-interface",id:"api/grid-interface",title:"Grid Interface",description:"Your Programme interacts with the grid through the BBjGridExWidget's interface. The interface is the combination of the following items:",source:"@site/docs/api/grid-interface.md",sourceDirName:"api",slug:"/api/grid-interface",permalink:"/docs/api/grid-interface",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/grid-interface.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Grid Interface"},sidebar:"tutorialSidebar",previous:{title:"Interface / API",permalink:"/docs/category/interface--api"},next:{title:"Columns Interface",permalink:"/docs/api/columns-interface"}},d={},l=[{value:"Options",id:"options",level:2},{value:"Access the Grid &amp; Column API",id:"access-the-grid--column-api",level:2},{value:"Events",id:"events",level:2}],c={toc:l};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Your Programme interacts with the grid through the BBjGridExWidget's interface. The interface is the combination of the following items:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxOptions/GxOptions.html"},"Options"),": Properties used to configure the grid."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/BBjGridExWidget/BBjGridExWidget.html"},"API"),": Methods to interact with the grid after it's created e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::getSelectedRow()"),"."),(0,i.kt)("li",{parentName:"ul"},"Events: events published by the grid to inform applications of changes in state, e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"ON_GRID_SELECT_ROW"))),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxOptions/GxOptions.html"},"GxOptions")," is a one stop shop for the entire interface into the grid. Using the options interface you can alter\nthe grid behavior or enable/disable features.\nThe example below shows how you can alter the navigation behavior and selection mode from the options interface."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},"declare BBjGridExWidget grid!\ndeclare BBjGridExWidgetOptions options!\n\ngrid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\noptions! = grid!.getOptions()\n\nrem Defines how users can move between rows using arrow keys\noptions!setNavigationBehavior(grid!.GRID_NAVIGATION_BEHAVIOUR_NEXT_ROW())\n\nrem When true, A selection box will be shown on the first \nrem column When false, no checkbox will be displayed\xb7\noptions!.setShowSelectionCheckbox(1)\n")),(0,i.kt)("h2",{id:"access-the-grid--column-api"},"Access the Grid & Column API"),(0,i.kt)("p",null,"You can access both the grid and the colum api from the BBjGridExWidget class directly. With the API you can manipulate the grid programmatically. For instance the following example shows how to use the grid API to do a quick search in the grid data then select all the filtered rows"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The Grid API methods will only work after the grid is ready. The grid will keep enqueuing all grid API calls until the grid is ready then flush them at once. "))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Grid Interface Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nrem Retrieve the data from the database and configure the grid\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  grid!.setData(rs!)\n\n  term! = "blues"\n  grid!.setQuickFilter(term!)\n  grid!.selectAll(1)\nreturn\n\nbyebye:\nbye\n')),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("p",null,"The BBjGridExWidgets fires several events to notify the program about changes. You can listen to grid events using ",(0,i.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/BBjGridExWidget/BBjGridExWidget.html#setCallback"},"setCallback")," method. The following example shows how to listen to selection changes on the grid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Grid Interface Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT  * FROM CDINVENTORY")\n  REM init the grid\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  rem register the callback\n  grid!.setCallback(grid!.ON_GRID_SELECT_ROW(),"onSelectionEvent")\n  grid!.setData(rs!)\nreturn\n\nrem selection handler\nonSelectionEvent:\n  row! = grid!.getSelectedRow()\n  msg! = msgbox(str(row!.asDataRow().getFieldAsString("TITLE")))\nreturn\n\nbyebye:\nbye\n')))}p.isMDXComponent=!0}}]);