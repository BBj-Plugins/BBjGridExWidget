"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2168],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},d=Object.keys(e);for(a=0;a<d.length;a++)t=d[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)t=d[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,d=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(t),g=r,m=c["".concat(l,".").concat(g)]||c[g]||p[g]||d;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var d=t.length,i=new Array(d);i[0]=c;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<d;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},694:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>o,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const d={sidebar_position:2,title:"Managing Data"},i=void 0,o={unversionedId:"data/managing-data",id:"data/managing-data",title:"Managing Data",description:"This section of the documentation describes how to work with data.",source:"@site/docs/data/managing-data.md",sourceDirName:"data",slug:"/data/managing-data",permalink:"/BBjGridExWidget/docs/data/managing-data",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/data/managing-data.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Managing Data"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/BBjGridExWidget/docs/data/overview"},next:{title:"Client Context",permalink:"/BBjGridExWidget/docs/data/client-context"}},l={},s=[{value:"Bulk Updating",id:"bulk-updating",level:2},{value:"Method 1 - Row Data",id:"method-1---row-data",level:3},{value:"Method 2 - Transaction",id:"method-2---transaction",level:3},{value:"Single Row Or Cell",id:"single-row-or-cell",level:2},{value:"Updating Rows / Cells Example",id:"updating-rows--cells-example",level:3},{value:"Controlling Row Position",id:"controlling-row-position",level:3}],u={toc:s};function p(e){let{components:n,...d}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,d,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This section of the documentation describes how to work with data."),(0,r.kt)("p",null,"The grid also allows updating data in the following ways which are explained in other sections of the documentation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using the grid's in-line editing feature, eg double clicking on a cell and editing the value."),(0,r.kt)("li",{parentName:"ul"},"Updating the data directly in your application - which the grid is not aware of the changes and you need to tell the grid to refresh the view.")),(0,r.kt)("p",null,"This section of the documentation is regarding using the grid's API to update data. The grid will then be aware of the change and also update the relevant parts of the UI."),(0,r.kt)("h2",{id:"bulk-updating"},"Bulk Updating"),(0,r.kt)("p",null,"If you want to add, remove or update more than one row at a time, then you have the following options:"),(0,r.kt)("h3",{id:"method-1---row-data"},"Method 1 - Row Data"),(0,r.kt)("p",null,"To replace all the row data in the grid call ",(0,r.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget.updateData(ResultSet set!)"),". The grid will discard all previous data and create the new data again from scratch. All row and range selections will be lost."),(0,r.kt)("p",null,"Use this method if you are effectively loading brand new data into the grid, eg loading a new report with a completely different data set to the previous. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj"},"declare ResultSet newResultSet!\ngrid!.updateData(newResultSet!)\n")),(0,r.kt)("p",null,"In the same time if you just want to clear the whole data on the grid , then use the api method ",(0,r.kt)("inlineCode",{parentName:"p"},"grid!.clearData()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj"},"grid!.clearData()\n")),(0,r.kt)("p",null,"The example below shows the data with two ResultSets. Clicking the buttons toggles between the ResultSets. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Notice how the grid is able to maintain the selection across data changes. This is because the DataRows have auto-generated IDs based on their content.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,820,600,"Data Update Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\nbuttonA! = wnd!.addButton(200,10,10,150,25,"ResultSet A")\nbuttonA!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleButtonAClick")\n\nbuttonB! = wnd!.addButton(201,160,10,150,25,"ResultSet B")\nbuttonB!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleButtonBClick")\n\ngosub main\nprocess_events\n\nmain:\n  declare BBjGridExWidget grid!\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT TOP 15 * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100, 0,50,820,550)\n  grid!.setData(rs!)\nreturn\n\nhandleButtonAClick:\n  rs! = sbc!.retrieve("SELECT TOP 15 * FROM CDINVENTORY")\n  grid!.updateData(rs!)\nreturn\n\nhandleButtonBClick:\n  rs! = sbc!.retrieve("SELECT TOP 5 * FROM CDINVENTORY")\n  grid!.updateData(rs!)\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - updateData",src:t(4704).Z,width:"820",height:"630"})),(0,r.kt)("h3",{id:"method-2---transaction"},"Method 2 - Transaction"),(0,r.kt)("p",null,"The transaction method is to pass a transaction model to the grid containing rows to ",(0,r.kt)("inlineCode",{parentName:"p"},"add"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"remove")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"update"),". This is done using\n",(0,r.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget.executeUpdateTransaction"),". The grid will keep all active sorting, grouping and filtering in this case"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Updating using transactions is the best way to do large updates to the grid, as the grid treats them as delta changes, so the grid only refreshes what is needed giving a performance boost. All row and range selection will be kept.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj"},"use ::BBjGridExWidget/GxClientModels.bbj::GxClientTransactionModel\n\ntransaction! = new GxClientTransactionModel()\ntransaction!.remove(rowToRemove!)\ntransaction!.update(rowToUpdate!)\n\ntransaction!.add(addFirstRow!)\ntransaction!.add(addSecondRow!)\n\nrem start adding the rows at index 15\ntransaction!.setAddIndex(15)\n\ngrid!.executeUpdateTransaction(transaction!)\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Transaction updates will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"ResultSet")," too. so if you remove a row from the grid the row will be removed too from The ResultSet.\nThe same applies for ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"add")," operations")),(0,r.kt)("p",null,"The following example applies transactions in different ways."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientTransactionModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.db.DataRow\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,820,600,"GxClientTransactionModel")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\naddItems! = wnd!.addButton(200,10,10,150,25,"addItems")\naddItems!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleAddItems")\n\naddItemsAtIndex! = wnd!.addButton(201,160,10,150,25,"add items index = 2")\naddItemsAtIndex!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleAddItemsAtIndex")\n\nupdateTopTwo! = wnd!.addButton(202,310,10,100,25,"Update Top 2")\nupdateTopTwo!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleUpdateTopTwo")\n\ncount = 1\n\ngosub main\nprocess_events\n\nmain:\n  declare BBjGridExWidget grid!\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT TOP 3 LABEL, MUSICTYPE, COST FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100, 0,50,820,550)\n  grid!.setData(rs!)\nreturn\n\nhandleAddItems:\n  declare GxClientTransactionModel transaction!\n  transaction! = new GxClientTransactionModel()\n\n  max = count + 2\n  for i=count to max\n    dr! = new DataRow()\n    dr!.setFieldValue("LABEL","Appended Label " + str(i))\n    dr!.setFieldValue("MUSICTYPE","Appended MusicType " + str(i))\n    dr!.setFieldValue("COST", rnd(50))\n    transaction!.add(dr!)\n  next \n  count = i\n\n  grid!.executeUpdateTransaction(transaction!, err=*return)\nreturn\n\nhandleAddItemsAtIndex:\n  declare GxClientTransactionModel transaction!\n  transaction! = new GxClientTransactionModel()\n  transaction!.setAddIndex(2)\n\n  max = count + 2\n  for i=count to max\n    dr! = new DataRow()\n    dr!.setFieldValue("LABEL","Appended Label " + str(i))\n    dr!.setFieldValue("MUSICTYPE","Appended MusicType " + str(i))\n    dr!.setFieldValue("COST", rnd(50))\n    transaction!.add(dr!)\n  next \n  count = i\n\n  grid!.executeUpdateTransaction(transaction!, err=*return)\nreturn\n\nhandleUpdateTopTwo:\n  firstRow! = rs!.getItem(0, err=*return)\n  firstRow!.setFieldValue("COST", rnd(50))\n\n  secondRow! = rs!.getItem(1, err=*return)\n  secondRow!.setFieldValue("COST", rnd(50))\n\n  declare GxClientTransactionModel transaction!\n  transaction! = new GxClientTransactionModel()\n  transaction!.update(firstRow!)\n  transaction!.update(secondRow!)\n\n  grid!.executeUpdateTransaction(transaction!)\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - GxClientTransactionModel",src:t(5432).Z,width:"820",height:"630"})),(0,r.kt)("h2",{id:"single-row-or-cell"},"Single Row Or Cell"),(0,r.kt)("p",null,"You can target updates to a single row or cell. Updating a single row means asking the grid to replace the data item for one specific row."),(0,r.kt)("p",null,"Both single row and single cell updates are done by first getting a reference to the DataRow and then using the relevant grid's API to update the row or cell."),(0,r.kt)("p",null,"All The following API methods can be used to update the rows and cells in the grid. And all of them uses ",(0,r.kt)("a",{parentName:"p",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxClientModels/GxClientTransactionModel.html"},(0,r.kt)("inlineCode",{parentName:"a"},"GxClientTransactionModel"))," under the hood."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::addRow(BBjNumber index!, DataRow row!)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::addRow(DataRow row!)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::updateRow(DataRow row!)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::removeRow(DataRow row!)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::removeRow(BBjNumber index!)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"BBjGridExWidget::removeRow(BBjString key!)"))),(0,r.kt)("h3",{id:"updating-rows--cells-example"},"Updating Rows / Cells Example"),(0,r.kt)("p",null,"The example below demonstrates the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set Cost on MCA: The Cost value is updated on the MCA row and the grid refreshes the cell."),(0,r.kt)("li",{parentName:"ul"},"Set Data on MCA: The entire data is set on the MCA row and the grid refreshes the entire row.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientTransactionModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.db.DataRow\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,820,600,"GxClientTransactionModel")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\nupdateCost! = wnd!.addButton(200,10,10,150,25,"Set Cost on MCA")\nupdateCost!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleUpdateCost")\n\nupdateRow! = wnd!.addButton(201,160,10,150,25,"Update Data on MCA")\nupdateRow!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleUpdateRow")\n\ngosub main\nprocess_events\n\nmain:\n  declare BBjGridExWidget grid!\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT TOP 3 LABEL, MUSICTYPE, COST FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100, 0,50,820,550)\n  grid!.getOptions().getDefaultColumnDefinition().setSortable(0)\n  grid!.setData(rs!)\nreturn\n\nhandleUpdateCost:\n  dr! = rs!.getItem(2)\n  dr!.setFieldValue("COST", rnd(50))\n\n  grid!.updateRow(dr!)\nreturn\n\nhandleUpdateRow:\n  dr! = rs!.getItem(2)\n  dr!.setFieldValue("COST", rnd(50))\n  dr!.setFieldValue("MUSICTYPE", "T - " + str(rnd(1000)))\n\n  grid!.updateRow(dr!)\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Single Row Update",src:t(9624).Z,width:"820",height:"630"})),(0,r.kt)("h3",{id:"controlling-row-position"},"Controlling Row Position"),(0,r.kt)("p",null,"The example below shows controlling the grid rows, including it's order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bbj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.db.DataRow\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,450,600,"Data Update Demo")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\nappend! = wnd!.addButton(200,10,10,150,25,"Append")\nappend!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handleAppend")\n\nprepend! = wnd!.addButton(201,180,10,150,25,"Prepend")\nprepend!.setCallback(BBjAPI.ON_BUTTON_PUSH,"handlePrepend")\n\nappendCount! = 0\nprependCount! = 0\n\ngosub main\nprocess_events\n\nmain:\n  declare BBjGridExWidget grid!\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT TOP 3 TITLE , ARTIST FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100, 0,50,450,550)\n  grid!.setData(rs!)\nreturn\n\nhandleAppend:\n  declare DataRow dr!\n\n  appendCount! = appendCount! + 1\n  dr! = new DataRow()\n  dr!.setFieldValue("TITLE","Appended Title" + str(appendCount!))\n  dr!.setFieldValue("ARTIST","Appended Artist" + str(appendCount!))\n  grid!.addRow(rs!.count(), dr!)\nreturn\n\nhandlePrepend:\n  declare DataRow dr!\n\n  prependCount! = prependCount! + 1\n  dr! = new DataRow()\n  dr!.setFieldValue("TITLE","Prepend Title" + str(prependCount!))\n  dr!.setFieldValue("ARTIST","Prepend Artist" + str(prependCount!))\n  grid!.addRow(dr!)\nreturn\n\nbyebye:\nbye\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"BBjGridExWidget - Row Position",src:t(5624).Z,width:"450",height:"630"})))}p.isMDXComponent=!0},4704:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/row-data-update-19e95400cd63c2d1147ce78488a45318.gif"},5624:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/row-position-84735359740e2bf8e0319d343469a213.gif"},9624:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/single-row-update-b7e174838b0c27dcdee4e64a781ce963.gif"},5432:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/transition-updates-dd38e11f80e8acfd3b9c5db073e3a62e.gif"}}]);