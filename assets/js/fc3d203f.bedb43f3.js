"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[347],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=l.createContext({}),d=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return l.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=d(n),m=i,w=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?l.createElement(w,r(r({ref:t},c),{},{components:n})):l.createElement(w,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,r[1]=a;for(var d=2;d<o;d++)r[d]=n[d];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9007:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var l=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2,title:"Row Selection"},r=void 0,a={unversionedId:"selection/row-selection",id:"selection/row-selection",title:"Row Selection",description:"Select a row by clicking on it. Selecting a row will remove any previous selection unless you hold down Ctrl while clicking. Selecting a row and holding down Shift while clicking a second row will select the range.",source:"@site/docs/selection/row-selection.md",sourceDirName:"selection",slug:"/selection/row-selection",permalink:"/BBjGridExWidget/docs/selection/row-selection",draft:!1,editUrl:"https://github.com/BBj-Plugins/BBjGridExWidget/tree/dev/website/docs/selection/row-selection.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Row Selection"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/BBjGridExWidget/docs/selection/overview"}},s={},d=[{value:"Example:  Multiple Row Selection",id:"example--multiple-row-selection",level:2},{value:"Example: Multi Select With Click",id:"example-multi-select-with-click",level:2},{value:"Checkbox Selection",id:"checkbox-selection",level:2},{value:"Group Selection",id:"group-selection",level:3}],c={toc:d};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,l.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Select a row by clicking on it. Selecting a row will remove any previous selection unless you hold down ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl")," while clicking. Selecting a row and holding down ",(0,i.kt)("inlineCode",{parentName:"p"},"Shift")," while clicking a second row will select the range."),(0,i.kt)("p",null,"Configure row selection with the following grid options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"MultipleSelection"),": When ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"single")," selection mod will be enabled such that when you select a row, any previously selected row gets unselected. When ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," allows multiple rows to be selected. By default the ",(0,i.kt)("inlineCode",{parentName:"p"},"single")," selection mode is enabled")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"RowMultiSelectWithClick"),": Set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to allow multiple rows to be selected with clicks. For example, if you click to select one row and then click to select another row, the first row will stay selected as well. Clicking a selected row in this mode will deselect the row. This is useful for touch devices where ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Shift")," clicking is not an option.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"SuppressRowDeselection"),": Set to true to prevent rows from being deselected if you hold down ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl")," and click the row (i.e. once a row is selected, it remains selected until another row is selected in its place). By default the grid allows deselection of rows.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"SuppressRowClickSelection"),": If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", rows won't be selected when clicked. Use, for example, when you want checkbox selection, and don't want to also select the row when the row is clicked."))),(0,i.kt)("p",null,"To get/set the selected rows in the grid, use the following API methods, All methods are accessible directly from the ",(0,i.kt)("inlineCode",{parentName:"p"},"BBjGridExWidget")," class:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Method")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"th"},"Description")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"setSelectedRow(BBjNumber index!)")),(0,i.kt)("td",{parentName:"tr",align:null},"Select a row by its index in the ResultSet.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"setSelectedRow(BBjString key!)")),(0,i.kt)("td",{parentName:"tr",align:null},"Select a row by its key.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"setSelectedRows(BBjVector rows!)")),(0,i.kt)("td",{parentName:"tr",align:null},"Select a vector or rows. The vector can contains a mix of row indices and row keys.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectAll(BBjNumber filteredOnly!)")),(0,i.kt)("td",{parentName:"tr",align:null},"Select all rows. When ",(0,i.kt)("inlineCode",{parentName:"td"},"filteredOnly")," is true , then only the filtered rows by selected.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"selectAll()")),(0,i.kt)("td",{parentName:"tr",align:null},"Alias for ",(0,i.kt)("inlineCode",{parentName:"td"},"selectAll(1)"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"deselectAll()")),(0,i.kt)("td",{parentName:"tr",align:null},"Deselect all rows.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"getSelectedRow()")),(0,i.kt)("td",{parentName:"tr",align:null},"Get the selected row in the grid or ",(0,i.kt)("inlineCode",{parentName:"td"},"null()")," if there is no selected row. The method returns a ",(0,i.kt)("a",{parentName:"td",href:"https://bbj-plugins.github.io/BBjGridExWidget/javadoc/GxClientModels/GxClientRowModel.html"},(0,i.kt)("inlineCode",{parentName:"a"},"GxClientRowModel")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"getSelectedRows()")),(0,i.kt)("td",{parentName:"tr",align:null},"Get a BBjVector of the selected rows in the grid. Each vector item is an instance of ",(0,i.kt)("inlineCode",{parentName:"td"},"GxClientRowModel"))))),(0,i.kt)("h2",{id:"example--multiple-row-selection"},"Example:  Multiple Row Selection"),(0,i.kt)("p",null,"The example below shows multiple row selection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj"},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientRowModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Multi Row Selections")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  grid!.getOptions().setMultipleSelection(1)\n  grid!.setCallback(grid!.ON_GRID_ROW_SELECT(),"handleSelection")\n\n  grid!.setData(rs!)\nreturn\n\nhandleSelection:\n  declare auto BBjVector rows!\n  declare auto GxClientRowModel row!\n\n  ev! = BBjAPI().getLastEvent()\n  ev! = ev!.getObject()\n  \n  selectedAsText$ = ""\n  rows! =  ev!.getSelectedRows()\n\n  it! = rows!.iterator()\n  while it!.hasNext()\n      row! = it!.next()\n      selectedAsText$ = selectedAsText$ + str(row!.asDataRow().getFieldAsString("TITLE")) + ", "\n  wend\n\n  let x=MSGBOX(selectedAsText$, 0, "Selected Titles")\nreturn\n\nbyebye:\nbye\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"BBjGridExWidget - Multi Selection",src:n(813).Z,width:"802",height:"632"})),(0,i.kt)("h2",{id:"example-multi-select-with-click"},"Example: Multi Select With Click"),(0,i.kt)("p",null,"The example below shows multi-select with click. Clicking multiple rows will select a range of rows without the need for ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Shift")," keys. Clicking a selected row will deselect it. This is useful for touch devices where ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Shift")," clicks are not available."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MultipleSelection")," is set to enable multiple row selection with clicks."),(0,i.kt)("li",{parentName:"ul"},"Clicking multiple rows will select multiple rows without needing to press ",(0,i.kt)("inlineCode",{parentName:"li"},"Ctrl")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"Shift")," keys."),(0,i.kt)("li",{parentName:"ul"},"Clicking a selected row will deselect that row.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientRowModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Multiple Row Selection")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  grid!.getOptions().setMultipleSelection(1)\n  grid!.getOptions().setRowMultiSelectWithClick(1)\n\n  grid!.setData(rs!)\n\n  selected! = new BBjVector()\n  selected!.addItem(1)\n  selected!.addItem(2)\n  selected!.addItem(5)\n  selected!.addItem(6)\n\nrem mix indices and keys in the vector\n  selected!.addItem(rs!.getItem(7).getRowKey())\n\n  grid!.setSelectedRows(selected!)\n  grid!.setCallback(grid!.ON_GRID_ROW_SELECT(),"handleSelection")\nreturn\n\nhandleSelection:\n  declare auto BBjVector rows!\n  declare auto GxClientRowModel row!\n\n  ev! = BBjAPI().getLastEvent()\n  ev! = ev!.getObject()\n  \n  selectedAsText$ = ""\n  rows! =  ev!.getSelectedRows()\n\n  it! = rows!.iterator()\n  while it!.hasNext()\n      row! = it!.next()\n      selectedAsText$ = selectedAsText$ + str(row!.asDataRow().getFieldAsString("TITLE")) + ", "\n  wend\n\n  let x=MSGBOX(selectedAsText$, 0, "Selected Titles")\nreturn\n\nbyebye:\nbye\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"BBjGridExWidget - Multi Selection With Click",src:n(8716).Z,width:"802",height:"643"})),(0,i.kt)("h2",{id:"checkbox-selection"},"Checkbox Selection"),(0,i.kt)("p",null,"Checkbox selection can be used in two places: row selection and group selection."),(0,i.kt)("p",null,"To include checkbox selection for a column, set the options ",(0,i.kt)("inlineCode",{parentName:"p"},"ShowSelectionCheckbox")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". The checkbox will enabled\nthen for the first column in the grid. columns order does matter here. If the user changes the columns order , the checkbox will\nalways be on the first column."),(0,i.kt)("p",null,"By default the grid won't include a checkbox at the columns's header. To include the checkbox in column's header set the grid option ",(0,i.kt)("inlineCode",{parentName:"p"},"ShowHeaderSelectionCheckbox")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientRowModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Checkbox Selection")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  grid!.getOptions().setShowSelectionCheckbox(1)\n  grid!.getOptions().setShowHeaderSelectionCheckbox(1)\n  grid!.setData(rs!)\nreturn\n\nbyebye:\nbye\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"BBjGridExWidget - Checkbox Selection",src:n(9643).Z,width:"802",height:"632"})),(0,i.kt)("h3",{id:"group-selection"},"Group Selection"),(0,i.kt)("p",null,"To enable checkbox selection for groups, set the grid option ",(0,i.kt)("inlineCode",{parentName:"p"},"ShowGroupSelectionCheckbox")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("p",null,"When doing grouping, you control what selecting a group means. This is controlled with the two grid options ",(0,i.kt)("inlineCode",{parentName:"p"},"GroupSelectsChildren")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GroupSelectsFiltered"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"GroupSelectsChildren"),": When true, selecting a group will have the impact of selecting all its children. The group will then display ",(0,i.kt)("inlineCode",{parentName:"p"},"selected")," when all children are selected, ",(0,i.kt)("inlineCode",{parentName:"p"},"unselected")," when none are selected and ",(0,i.kt)("inlineCode",{parentName:"p"},"intermediate")," when children have a mix of selected and unselected. ")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"GroupSelectsFiltered"),": When true only filtered children of the group will be selected / unselected. This means you can apply a filter, then try to select a group, and the group will end up in the intermediate state as only as subset of the children will be selected."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-BBj",metastring:"showLineNumbers",showLineNumbers:!0},'use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget\nuse ::BBjGridExWidget/GxClientModels.bbj::GxClientRowModel\nuse com.basiscomponents.db.ResultSet\nuse com.basiscomponents.bc.SqlQueryBC\n\ndeclare auto BBjTopLevelWindow wnd!\n\nwnd! = BBjAPI().openSysGui("X0").addWindow(10,10,800,600,"Checkbox Selection")\nwnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")\n\ngosub main\nprocess_events\n\nmain:\n  declare SqlQueryBC sbc!\n  declare ResultSet rs!\n  declare BBjGridExWidget grid!\n\n  sbc! = new SqlQueryBC(BBjAPI().getJDBCConnection("CDStore"))\n  rs! = sbc!.retrieve("SELECT * FROM CDINVENTORY")\n\n  grid! = new BBjGridExWidget(wnd!,100,0,0,800,600)\n  \n  options! = grid!.getOptions()\n  options!.setMultipleSelection(1)\n  options!.setShowSelectionCheckbox(1)\n  options!.setShowHeaderSelectionCheckbox(1)\n  options!.setShowGroupSelectionCheckbox(1)\n  options!.setGroupSelectsChildren(1)\n\n  grid!.setData(rs!)\nreturn\n\nbyebye:\nbye\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"BBjGridExWidget - Group Checkbox",src:n(2998).Z,width:"802",height:"632"})))}p.isMDXComponent=!0},9643:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/checkbox-selection-673e31515fea535ea1d7d94df9e5d4c6.png"},2998:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/group-checkbox-1061492f9d52b94f1b7238a2e8c14293.png"},8716:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/multi-selection-with-click-d499354d4679b001bd4d724955cb277a.png"},813:(e,t,n)=>{n.d(t,{Z:()=>l});const l=n.p+"assets/images/multi-selection-a2389ae385adcbb96d6514a7e0a6dcec.png"}}]);