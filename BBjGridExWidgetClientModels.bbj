rem package BBjGridExWidget.Client.Models
rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use ::BBjGridExWidget/BBjGridExWidget.bbj::BBjGridExWidget
use com.google.gson.Gson
use com.google.gson.JsonParser
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use com.basiscomponents.db.DataRow
use java.util.ArrayList
use java.util.Arrays
REM /**
REM  * A client model for rows
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public BBjGridExWidgetClientRowModel
    rem /**
    rem  * The row id
    rem  */
    field public BBjString Id!
    rem /**
    rem  * The row index
    rem  */
    field public BBjNumber Index!
    rem /**
    rem  * The row child index
    rem  */
    field public BBjNumber ChildIndex!
    rem /**
    rem  * The row parent key, if any
    rem  */
    field public BBjString ParentKey!
    rem /**
    rem  * True when the row is selected, false otherwise
    rem  */
    field public BBjNumber IsSelected!
    rem /**
    rem  * BBjGridExWidget instance
    rem  */
    field protected BBjGridExWidget Widget!
    rem /**
    rem  * Disable default constructor
    rem  */
    method private BBjGridExWidgetClientRowModel()
    methodend
    rem /**
    rem  * Construct new client row
    rem  *
    rem  * @param BBjGridExWidget widget! The widget instance
    rem  */
    method public BBjGridExWidgetClientRowModel(BBjGridExWidget widget!)
        #Widget! = widget!
    methodend
    rem /**
    rem  * Get the widget instance
    rem  *
    rem  * @return BBjGridExWidget
    rem  */
    method public BBjGridExWidget getWidget()
        methodret #Widget!
    methodend
    rem /**
    rem  * Convert the client row to a DataRow
    rem  *
    rem  * @return DataRow
    rem  */
    method public DataRow asDataRow()
        nodeId! = #getWidget().getRowNodeId()
        rs! = #getWidget().getRS()
        rem in case the RowNodeId is a column in the resultset
        if(rs!.getColumnIndex(nodeId!) <> -1 ) then
            rem indexed by an existing column
            rs! = rs!.filterBy(nodeId! + "=" +  str(#getId()))

            if(rs!.count() <> 1) then
                throw "Cannot query the selected row from the ResultSet. [RowNodeId = " + nodeId! + " , Index = " + str(#getIndex()) + "]", 256
            fi

            methodret rs!.get(0)
        fi

        methodret rs!.get(#getId())
    methodend
    rem /**
    rem  * Get the row data as JsonObject
    rem  *
    rem  * @return JsonObject
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonParser parser!

        parser! = new JsonParser()
        rowAsJson! = str(#asDataRow().toJson(#getWidget().getRowNodeId()))
        ar! = parser!.parse(rowAsJson!).getAsJsonArray()
        obj! = ar!.get(0).getAsJsonObject()
        methodret obj!
    methodend
    rem /**
    rem  * Alias for <i>getAsJsonObject()</i>
    rem  *
    rem  * @see getAsJsonObject()
    rem  */
    method public JsonObject getData()
        methodret #getAsJsonObject()
    methodend
    rem /**
    rem  * Convert row to string
    rem  *
    rem  * @return BBjstring  The row id
    rem  */
    method public BBjString toString()
        methodret #Id!
    methodend

classend
REM /**
REM  * A model for the client column
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public BBjGridExWidgetClientColumnModel
    rem /**
    rem  * BBjGridExWidget instance
    rem  */
    field protected BBjGridExWidget Widget!
    rem /**
    rem  * The column name
    rem  */
    field protected BBjString Name!
    rem /**
    rem  * Disable default constructor
    rem  */
    method private BBjGridExWidgetClientColumnModel()
    methodend
    rem /**
    rem  * Construct new BBjGridExWidgetClientColumnModel
    rem  *
    rem  * @param BBjGridExWidget widget! The widget instance
    rem  * @param BBjString name! the column's name/id
    rem  */
    method public BBjGridExWidgetClientColumnModel(BBjGridExWidget widget! , BBjString name!)
        #Name! = name!
        #Widget! = widget!
    methodend
    rem /**
    rem  * Get the widget instance
    rem  *
    rem  * @return BBjGridExWidget
    rem  */
    method public BBjGridExWidget getWidget()
        methodret #Widget!
    methodend
    rem /**
    rem  * Get the column index
    rem  *
    rem  * Returns the index of the column with the specified name.
    rem  *
    rem  * @return BBjNumber column's index
    rem  */
    method public BBjNumber getIndex()
        methodret #getWidget().getRS().getColumnIndex(#getName())
    methodend
    rem /**
    rem  * Get the column type
    rem  *
    rem  * Returns the value of the ColumnType property from the ResultSet's metadata.
    rem  *
    rem  * @return BBjNumber column's type
    rem  */
    method public BBjNumber getType()
        methodret #getWidget().getRS().getColumnType(#getIndex())
    methodend
    rem /**
    rem  * Get the column type
    rem  *
    rem  * Returns the metadata of the column.
    rem  *
    rem  * @return BBjNumber column's metadata
    rem  */
    method public HashMap getMetaData()
        methodret #getWidget().getRS().getColumnMetaData(#getName())
    methodend
    rem /**
    rem  * Get the column name
    rem  *
    rem  * @return BBjString column's name
    rem  */
    method public BBjString getName()
        methodret #Name!
    methodend
    rem /**
    rem  * Convert column to string
    rem  *
    rem  * @return BBjstring  The column
    rem  */
    method public BBjString toString()
        methodret #getName()
    methodend

classend
REM /**
REM  * A model for the client cell
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public BBjGridExWidgetClientCellModel
    rem /**
    rem  * The cell's row.
    rem  */
    field public BBjGridExWidgetClientRowModel Row!
    rem /**
    rem  * The cell's column
    rem  */
    field public BBjGridExWidgetClientColumnModel Column!
    rem /**
    rem  * The cell's value
    rem  */
    field public BBjString Value!

classend
REM /**
REM  * This model is used when range selections are read from the client
REM  *
REM  * @author Hyyan Abo Fakher
REM  */
class public BBjGridExWidgetClientRangeSelectionModel
    rem /**
    rem  * An array of column objects where every object is instance of BBjGridExWidgetClientColumnModel
    rem  */
    field public BBjVector Columns! = new BBjVector()
    rem /**
    rem  * An array of rows objects where every object is instance of BBjGridExWidgetClientRowModel
    rem  */
    field public BBjVector Rows! = new BBjVector()

classend
rem /**
rem  * The model is used to compose a range selection model in order to be applied on the client.
rem  *
rem  * Ranges are normally bounded by a start and end row. However it is also possible to define a range unbounded
rem  * by rows (ie to contain all rows). For an unbounded range, do not provided start or end row positions.
rem  *
REM  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetClientAddRangeSelectionModel
    rem /**
    rem  * A list of column ids to use. Note that none existing columns will be ignored silently
    rem  */
    field public ArrayList Columns! = new ArrayList()
    rem /**
    rem  * Start row id or index
    rem  */
    field public BBjString Start! = null()
    rem /**
    rem  * End row id or index
    rem  */
    field public BBjString End! = null()
    rem /**
    rem  * Add columns as comma separated string
    rem  *
    rem  * @param BBjString columns! columns as comma separated string (ex: CDNUMBER, COST)
    rem  */
    method public void setColumns(BBjString columns!)
        arrayList! = new ArrayList()
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        WHILE (it!.hasNext())
            arrayList!.add(cvs(it!.next(),128))
        WEND

        #setColumns(arrayList!)
    methodend
    rem /**
    rem  * Convert the model to JSON object
    rem  *
    rem  * @return JsonObject
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject json!

        json! = new JsonObject()
        json!.addProperty("columns" , iff(#getColumns().size() <> 0 ,new Gson().toJson(#getColumns()), listIsEmpty!) , err=*next)
        json!.addProperty("start" , #getStart(), err=*next)
        json!.addProperty("end" , #getEnd(), err=*next)
        methodret json!
    methodend

classend
rem /**
rem  * The model is used to compose a range chart model in order to be applied on the client.
rem  *
REM  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetClientAddRangeChartModel
    rem /**
    rem  * Defines the range of cells to be charted. A range is normally defined with start and end rows and a list of columns,
    rem  * If the start and end rows are omitted, the range covers all rows (ie entire columns are selected).
    rem  */
    field public BBjGridExWidgetClientAddRangeSelectionModel RangeSelection! = null()
    rem /**
    rem  * The type of chart to create
    rem  */
    field public BBjString Type! = null()
    rem /**
    rem  * Normally when a chart is displayed using the grid, the grid will highlight the range the chart is charting
    rem  * when the chart gets focus, to suppress this behaviour, set the field to false
    rem  */
    field public BBjNumber SuppressChartRanges! = null()
    rem /**
    rem  * When set to true, series values will be summed for each category before charting.
    rem  */
    field public BBjNumber Aggregate! = null()
    rem /**
    rem  * Constant value to define groupedBar chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_GROUPEDBAR()
        methodret "groupedBar"
    methodend
    rem /**
    rem  * Constant value to define stackedBar chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_STACKEDBAR()
        methodret "stackedBar"
    methodend
    rem /**
    rem  * Constant value to define normalizedBar chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_NORMALIZEDBAR()
        methodret "normalizedBar"
    methodend
    rem /**
    rem  * Constant value to define groupedColumn chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_GROUPEDCOLUMN()
        methodret "groupedColumn"
    methodend
    rem /**
    rem  * Constant value to define stackedColumn chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_STACKEDCOLUMN()
        methodret "stackedColumn"
    methodend
    rem /**
    rem  * Constant value to define normalizedColumn chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_NORMALIZEDCOLUMN()
        methodret "normalizedColumn"
    methodend
    rem /**
    rem  * Constant value to define line chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_LINE()
        methodret "line"
    methodend
    rem /**
    rem  * Constant value to define pie chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_PIE()
        methodret "pie"
    methodend
    rem /**
    rem  * Constant value to define doughnut chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_DOUGHNUT()
        methodret "doughnut"
    methodend
    rem /**
    rem  * Constant value to define area chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_AREA()
        methodret "area"
    methodend
    rem /**
    rem  * Constant value to define stackedArea chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_STACKEDAREA()
        methodret "stackedArea"
    methodend
    rem /**
    rem  * Constant value to define normalizedArea chart
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString TYPE_NORMALIZEDAREA()
        methodret "normalizedArea"
    methodend
    rem /**
    rem  * Convert the model to JSON object
    rem  *
    rem  * @return JsonObject
    rem  */
    method public JsonObject getAsJsonObject()
        declare JsonObject json!

        json! = new JsonObject()
        json!.        add("cellRange" , #getRangeSelection().getAsJsonObject() , err=*next)
        json!.addProperty("chartType" , #getType(), err=*next)
        json!.addProperty("suppressChartRanges" , #getSuppressChartRanges().booleanValue(), err=*next)
        json!.addProperty("aggregate" , #getAggregate().booleanValue(), err=*next)
        methodret json!
    methodend

classend
rem /**
rem  * The model is used to represent a keypress on the client
rem  *
REM  * @author Hyyan Abo Fakher
rem  */
rem  */
class public BBjGridExWidgetClientKeypressModel
    rem /**
    rem  * A DOMString with the code value of the physical key represented by the event.
    rem  */
    field public BBjString Code! = null()
    rem /**
    rem  * A Number representing the Unicode reference number of the key.
    rem  * For keys whose char attribute contains multiple characters, this is the Unicode value of the first character in that attribute.
    rem  */
    field public BBjNumber KeyCode! = null()
    rem /**
    rem  * A Boolean that is true if the Alt key was active when the key event was generated.
    rem  */
    field public BBjNumber IsAltDown! = null()
    rem /**
    rem  * A Boolean that is true if the Shift key was active when the key event was generated.
    rem  */
    field public BBjNumber IsShiftDown! = null()
    rem /**
    rem  * A Boolean that is true if the Ctrl key was active when the key event was generated.
    rem  */
    field public BBjNumber IsCtrlDown! = null()

classend
rem /**
rem  * The sorting model descript how the columns will be sorted on the client
rem  *
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidgetClientSortModel
    rem /**
    rem  * The array which contain column => sorting mapping
    rem  */
    field protected JsonObject Model! = new JsonObject()
    rem /**
    rem  * Add new column soritng to the model
    rem  *
    rem  * @param BBjString column! The column id
    rem  * @param BBjString direction! the sort direction
    rem  *
    rem  * @see BBJGridExWidgetColumns.SORT_DESC()
    rem  * @see BBJGridExWidgetColumns.SORT_ASC()
    rem  */
    method public void add(BBjString column! , BBjString sorting!)
        #getModel().addProperty(column!,sorting!)
    methodend
    rem /**
    rem  * Get sorting for the given column
    rem  *
    rem  * @param BBjString column! the column id
    rem  *
    rem  * @return BBjString the column's sorting
    rem  */
    method public BBjString get(BBjString column!)
        result! = null()

        if(#getModel().has(column!))
            result! =  #getModel().get(column!).getAsString()
        fi

        methodret result!
    methodend
    rem /**
    rem  * Remove a column from the model
    rem  *
    rem  * @param BBjString column! the column id
    rem  */
    method public void remove(BBjString column!)
        #getModel().remove(column! ,err=*next )
    methodend
    rem /**
    rem  * Convert the model to JSON arrat
    rem  *
    rem  * @return JsonObject
    rem  */
    method public JsonArray getAsJsonArray()
        declare JsonArray json!

        json! = new JsonArray()

        if(#getModel().size() > 0)
            json!.add(#getModel())
        fi

        methodret json!
    methodend

classend