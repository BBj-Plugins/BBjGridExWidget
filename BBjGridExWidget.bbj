use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.tree.DataTree
use java.sql.Types
use com.google.gson.Gson
use com.google.gson.JsonParser
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use java.lang.Integer
use java.util.ArrayList
use java.util.HashMap


use ::BBjWidget/BBjWidget.bbj::BBjWidget

class public BBjGridExWidgetRow 
    
    field public BBjString Id!
    field public BBjNumber ChildIndex!
    field public BBjString ParentKey!
    field public BBjNumber IsSelected!
    field public JsonObject Data!
    
    method public String toString()
        methodret #Id!
    methodend
classend

class public BBjGridExWidgetSelectRowEvent
    
    field public BBjVector Rows! = new BBjVector() 
    field public BBjVector SelectedRows! = new BBjVector()
    field public BBjVector DeselectedRows! = new BBjVector()
    
    rem /**
    rem  * Get the number of affected rows by the last event
    rem  * 
    rem  * @return BBjNumber
    rem  */
    method public BBjNumber getRowCount()
        
        methodret #Rows!.size()
    methodend
    
    rem /**
    rem  * Get the number of selected rows by the last event
    rem  * 
    rem  * @return BBjNumber 
    rem  */
    method public BBjNumber getSelectedRowCount()
        
        methodret #SelectedRows!.size()
    methodend

    rem /**
    rem  * Get the number of deselected rows by the last event
    rem  * 
    rem  * @return BBjNumber 
    rem  */
    method public BBjNumber getDeselectedRowCount()
        
        methodret #DeselectedRows!.size()
    methodend
    
    rem /**
    rem  * Get the ids of selected rows by the last event
    rem  * 
    rem  * @return BBjVector 
    rem  */
    method public BBjVector getSelectedIds()
       
        declare BBjVector ids!
        ids! = new BBjVector() 
        selectedCount! = #getSelectedRowCount()
        
        if selectedCount! > 0 then 
      
            for n = 0 to selectedCount! - 1 step 1
                ids!.add(cast(BBjGridExWidgetRow,#SelectedRows!.getItem(n)).getId()) 
            next n
        fi
        
        methodret ids!
    methodend    
    
    rem /**
    rem  * Get the ids of deselected rows by the last event
    rem  * 
    rem  * @return BBjNumber 
    rem  */
    method public BBjVector getDeselectedIds()
        
        declare BBjVector ids!
        ids! = new BBjVector() 
        deselectedCount! = #getDeselectedRowCount()
        
        if deselectedCount! > 0 then 
      
            for n = 0 to deselectedCount! - 1 step 1
                ids!.add(cast(BBjGridExWidgetRow,#DeselectedRows!.getItem(n)).getId()) 
            next n
        fi
        
        methodret ids!
    methodend
    
classend

class public BBjGridExWidgetDoubleClickRowEvent
    field public BBjGridExWidgetRow Row!
classend

class public BBjGridWidgetCellEditingEvent 
    field public BBjGridExWidgetRow Row!
    field public BBjString Column$
    field public BBjString Value$
classend

class public BBjGridWidgetRowEditingEvent
    field public BBjGridExWidgetRow Row!
classend

class public BBjGridExWidgetColumnState
    field public BBjString String$
classend

rem /**
rem  * A sample BBj Widget Implementation
rem  */
class public BBjGridExWidget extends BBjWidget

    field private BBjHtmlView HTMLView! 
    field private Boolean IsReady! = BBjAPI.FALSE
    field private BBjVector backlog! = new BBjVector()
    
    
    field private ResultSet RS!
    field private BBjString URL$
    field private DataTree TREE!
    field private BBjString GroupColumnLabel$ = "Group"
    
    field private BBjNumber SelectionMode 
    field private BBjNumber MultipleSelection
    field private BBjNumber FitToGrid
    field private BBjNumber EnableFilter
    field private BBjNumber EnableFloatingFilter
    field private BBjNumber GroupChildCount
    field private BBjNumber groupSelectsChildren
    field private BBjNumber showSelectionCheckbox
    field private BBjString RowNodeId$
    field private BBjString ParentNodeId$
    
    field private DataRow ColumnDefinition!
    
    field private HashMap SelectedRows! = new HashMap()
    
    field private BBjNumber Editing! = 0
    
    rem Enable/disable grid editing
    field public BBjNumber Editable! = 0
    
    rem Enable/disable grid single click editing
    field public BBjNumber SingleClickEdit! = 0
    
    rem Set the default column type 
    field public BBjString DefaultType$ = #GRID_TYPE_BASIC_STRING()
    
    rem enable/disable group edit 
    field public BBjNumber GroupEdit! = 0
    
    rem /**
    rem  * Define the edit type
    rem  * 
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_STRING
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_TEXT
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_NUMBER 
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_BOOLEAN 
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_DATE 
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_TIMESTAMP
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_IMAGE 
    rem  * @see BBjGridExWidget.GRID_TYPE_BASIC_IMAGE_FILTERABLE
    rem  */
    field public BBjString EditType$ = ""
    
    rem /**
    rem  * Enter Key Behavior
    rem  * 
    rem  * @see BBjGridExWidget.GRID_ENTER_NEXT_CELL
    rem  * @see BBjGridExWidget.GRID_ENTER_STOP_EDITING
    rem  */
    field public BBjString EnterKeyBehavior$ = ""
    
    rem --------------------- constructors -------------------------------------
    rem /**
    rem  * disabled default constructor
    rem  */
    method private BBjGridExWidget()
    methodend

    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public BBjGridExWidget(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!,id!,x!,y!,w!,h!)
    methodend

    rem ---------------------- methods from BBjWidget --------------------------------
    rem /**
    rem  * @Override
    rem  * This method is called whenever the widget needs to be rendered
    rem  * @param Boolean f_init!: if TRUE the control is rendered for the first time so this method has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        
        declare BBjHtmlView htmlview! 
    
        if (f_init!) then
            dummy$=stbl("!OPTIONS","JAVAFX_HTMLVIEW=true")
            
            html$="<html><body><div id='eventTransporterDiv' onClick='gw_postEvent(event);'></div><div id=""grid"" style=""height: 100%"" class=""ag-theme-fresh""></div></body></html>"
            htmlview! = #getCanvas().addHtmlView(101,0,0,#getCanvas().getWidth(),#getCanvas().getHeight(),html$)
            htmlview!.setCallback(BBjAPI.ON_PAGE_LOADED,#this!,"onLoad")
            htmlview!.setCallback(BBjAPI.ON_NATIVE_JAVASCRIPT,#this!,"onNativeEvent")
            htmlview!.setOpaque(0)
            
            #HTMLView!=htmlview!
            if INFO(3,6)<>"5" then
                #HTMLView!.setLocation(-9,-9)
            fi
        fi
        
        if INFO(3,6)="5" then
            #HTMLView!.setSize(#getCanvas().getWidth(),#getCanvas().getHeight())
        else
            #HTMLView!.setSize(#getCanvas().getWidth()+16,#getCanvas().getHeight()+16)
        fi
    methodend
    
    rem /**
    rem  * Optinally Suppress the number of items in a group
    rem  * 
    rem  * @param BBjNumber status!: 0 to enable , 1 to disable 
    rem  * 
    rem  */
    method public void setShowGroupChildCount(BBjNumber status!)
        #GroupChildCount=status!
    methodend
    
    rem /**
    rem  * When true, selecting a group will have the impact of selecting all its children
    rem  * When false, then the group is selectable independently of the child nodes
    rem  */
    method public void setGroupSelectsChildren(BBjNumber x!)
    
        rem this only makes sense with mutli-selection switched on!
        #setMultipleSelection(1)
    
        #groupSelectsChildren=x!
    methodend
    
    rem /**
    rem  * When true, selection box will be show on the first column
    rem  * When false, no checkbox will be displayed
    rem  */
    method public void setShowSelectionCheckbox(BBjNumber x!)
        #showSelectionCheckbox=x!
    methodend
    
    rem /**
    rem  * set the selected row
    rem  */
    method public void setSelectedRow(BBjNumber x!)
        #deselectAll() 
        script$="gw_setSelectedRows([" + str(x!) + "]);"        
        #executeScript(script$)
    methodend  
    
    rem /**
    rem  * set the selected row indices
    rem  */
    method public void setSelectedRows(BBjVector x!)
        #deselectAll() 
        script$="gw_setSelectedRows(["
        it! = x!.iterator()
        first=1
        while it!.hasNext()
            if first
                first=0
            else    
                script$=script$+","
            fi
            script$=script$+str(it!.next())
        wend
        script$=script$+"]);"
        
        #executeScript(script$)
    methodend  
    
    rem /**
    rem  * select all rows
    rem  */
    method public void selectAll()
        
        script$="gw_selectAll(0);"        
        #executeScript(script$)
    methodend  
    
    rem /**
    rem  * select all rows
    rem  * 
    rem  * @param BBJNumber x!: 0 select all , 1 select all filtered 
    rem  */
    method public void selectAll(BBjNumber x!)
        
        script$="gw_selectAll(" + str(x!) + ");"        
        #executeScript(script$)
    methodend  
    
    
    rem /**
    rem  * deselect all rows
    rem  */
    method public void deselectAll()
        
        script$="gw_deselectAll(0);"        
        #executeScript(script$)
    methodend  
    
    rem /**
    rem  * deselect all rows
    rem  * 
    rem  * @param BBJNumber x!: 0 deselect all , 1 deselect all filtered 
    rem  */
    method public void deselectAll(BBjNumber x!)
        
        script$="gw_deselectAll(" + str(x!) + ");"        
        #executeScript(script$)
    methodend   
    
    rem /**
    rem  *  Expand all groups.
    rem  */
    method public void expandAll()
        
        script$="gw_expandAll();"        
        #executeScript(script$)
    methodend  
    
    
    rem /**
    rem  *  collapse all groups.
    rem  */
    method public void collapseAll()
        
        script$="gw_collapseAll();"        
        #executeScript(script$)
    methodend  
    
    
    rem /**
    rem  *  set visible row
    rem  * 
    rem  * Ensures the row index is visible by vertically scrolling the grid. 
    rem  * The valid values for positions are {'top', 'middle', 'bottom'}. 
    rem  * If top, middle or bottom, the grid will scroll the row to place the row at top, middle or bottom
    rem  * 
    rem  * @param BBjNumber index!: the row index
    rem  * @param BBjString position!: the scrolling poistion 
    rem  * 
    rem  * @see GRID_ROWPOS_TOP()
    rem  * @see GRID_ROWPOS_MIDDLE()
    rem  * @see GRID_ROWPOS_BOTTOM()
    rem  */
    method public void setVisibleRow(BBjNumber index! , BBjString position!)
        
        script$="gw_setVisibleRow(" + str(index!) + ",'" + str(position!) +"');"        
        #executeScript(script$)
    methodend  
    
    rem /**
    rem  * set visible column 
    rem  * 
    rem  * Ensures the column is visible, scrolling the table if needed.
    rem  * 
    rem  * @param BBJString columnid!: the column id 
    rem  */
    method public void setVisibleColumn(BBjString columnId!)
        
        script$="gw_setVisibleColumn('" + columnId! + "');"        
        #executeScript(script$)
    methodend  
    
    rem /**
    rem  * Event Handler for Native JavaScript Event (from the Grid)
    rem  * Determines and dispatches the actual event
    rem  * 
    rem  * @param BBjNativeJavaScriptEvent ev!: the js event
    rem  * 
    rem  */
    method public void onNativeEvent ( BBjNativeJavaScriptEvent ev!)
        
        map! = ev!.getEventMap()
        type$ = map!.get("type")
        detail$ = map!.get("detail")
        
        switch type$
            case "grid-row-select"
                #handleGridSelectRowEvent(detail$)
                break
                
            case "grid-row-doubleclick"
                #handleGridDoubleClickEvent(detail$)
                break
                
            case "cellEditingStarted"
                #Editing! = 1   
                #handleGridCellEditingEvent(detail$,#ON_GRID_CELL_EDITING_STARTED())
                break
                             
            case "cellEditingStopped"
                #Editing! = 0
                #handleGridCellEditingEvent(detail$,#ON_GRID_CELL_EDITING_STOPPED())
                break
                                
            case "rowEditingStarted"
                #Editing! = 1            
                #handleGridROWEditingEvent(detail$,#ON_GRID_ROW_EDITING_STARTED())
                break
                
            case "rowEditingStopped"
                #Editing! = 0            
                #handleGridROWEditingEvent(detail$,#ON_GRID_ROW_EDITING_STOPPED())
                break                                
                                
        swend
    methodend
    
    rem /**
    rem  * Handle Rows Selections Event
    rem  * 
    rem  * Parse the json details coming from the client and fires new BBjGridExWidgetSelectRowEvent
    rem  * 
    rem  * @see BBjGridExWidgetSelectRowEvent 
    rem  */
    method private void handleGridSelectRowEvent(BBjString detail$)
        
        parser! = new JsonParser()
        array! = parser!.parse(detail$).getAsJsonObject().get("0")
            
        rows! = new BBjVector()
        selected! = new BBjVector()
        deselected! = new BBjVector()
        
        it! = array!.iterator()
        while (it!.hasNext()) 
        
                next! = it!.next().getAsJsonObject()
                row! = new BBjGridExWidgetRow()
                row!.setId(next!.get("id").getAsString())
                row!.setChildIndex(next!.get("childIndex").getAsInt())
                row!.setParentKey(next!.get("parentKey").getAsString())
                row!.setData(next!.get("data").getAsJsonObject())
                row!.setIsSelected(iff(next!.get("selected").getAsString() = "true" ,  1 , 0))
                
                rows!.add( row!)
                
                if row!.getIsSelected() = 1 then
                    selected!.add(row!)
                    #SelectedRows!.put(row!.getId(),row!)
                else 
                   deselected!.add(row!)
                   #SelectedRows!.remove(row!.getId())
                fi
        wend
        
        event! = new BBjGridExWidgetSelectRowEvent()
        event!.setRows(rows!)
        event!.setSelectedRows(selected!)
        event!.setDeselectedRows(deselected!)
        
        #fireEvent(#ON_GRID_SELECT_ROW(),event!)
    methodend
    
    rem /**
    rem  * Handle Doucle click event 
    rem  * 
    rem  * Parse the json details coming from the client and fires new BBjGridExWidgetDoubleClickRowEvent
    rem  * 
    rem  * @see BBjGridExWidgetDoubleClickRowEvent
    rem  */
    method private void handleGridDoubleClickEvent(BBjString detail$)
        
        parser! = new JsonParser()
        array! = parser!.parse(detail$).getAsJsonObject().get("0")
        next! = array!.iterator().next().getAsJsonObject()
                
        row! = new BBjGridExWidgetRow()
        row!.setId(next!.get("id").getAsString())
        row!.setChildIndex(next!.get("childIndex").getAsInt())
        row!.setParentKey(next!.get("parentKey").getAsString())
        row!.setData(next!.get("data").getAsJsonObject())
        row!.setIsSelected(iff(next!.get("selected").getAsString() = "true" ,  1 , 0))
        
        event! = new BBjGridExWidgetDoubleClickRowEvent()
        event!.setRow(row!)
        
        #fireEvent(#ON_GRID_DOUBLE_CLICK(), event!)
    methodend
    
    method private void handleGridCellEditingEvent(BBjString detail$ , BBjNumber type!)
        
        parser! = new JsonParser()
        array! = parser!.parse(detail$).getAsJsonObject().get("0")
        next! = array!.iterator().next().getAsJsonObject()
                
        rowAsJson! = next!.get("row").getAsJsonObject()
        row! = new BBjGridExWidgetRow()
        row!.setId(rowAsJson!.get("id").getAsString())
        row!.setChildIndex(rowAsJson!.get("childIndex").getAsInt())
        row!.setParentKey(rowAsJson!.get("parentKey").getAsString())
        row!.setData(rowAsJson!.get("data").getAsJsonObject())
        row!.setIsSelected(iff(rowAsJson!.get("selected").getAsString() = "true" ,  1 , 0))
        
        event! = new BBjGridWidgetCellEditingEvent()
        event!.setRow(row!)
        event!.setValue(next!.get("value").getAsString())
        event!.setColumn(next!.get("column").getAsString())
        

        #fireEvent(type!, event!)
    methodend

    method private void handleGridROWEditingEvent(BBjString detail$ , BBjNumber type!)
     
        parser! = new JsonParser()
        array! = parser!.parse(detail$).getAsJsonObject().get("0")
        next! = array!.iterator().next().getAsJsonObject()
                
        row! = new BBjGridExWidgetRow()
        row!.setId(next!.get("id").getAsString())
        row!.setChildIndex(next!.get("childIndex").getAsInt())
        row!.setParentKey(next!.get("parentKey").getAsString())
        row!.setData(next!.get("data").getAsJsonObject())
        row!.setIsSelected(iff(next!.get("selected").getAsString() = "true" ,  1 , 0))
        
        event! = new BBjGridExWidgetDoubleClickRowEvent()
        event!.setRow(row!)
        
        #fireEvent(type!, event!)
    methodend
        
    method private void performGridDataUpdate()
        
        if (! #IsReady!) methodret
        
        gson! = new Gson()
        if (#RS! <> null()) then
            data$=#RS!.toJson()
            cdef!= #getAgGridColumnDefinition(0)
        else
                if (#TREE! <> null()) then
                    data$=#TREE!.toJson()
                    cdef!= #getAgGridColumnDefinition(1)
                fi
        fi
       
       option! = new JsonObject()
       option!.addProperty("enableSorting",Boolean.valueOf(1))
       option!.addProperty("animateRows",Boolean.valueOf(1))
       option!.addProperty("enableColResize",Boolean.valueOf(1))
       option!.addProperty("allowContextMenuWithControlKey",Boolean.valueOf(0))
       option!.addProperty("enableFilter",Boolean.valueOf(iff(#EnableFilter = 1 , "true" ,"false")))
       option!.addProperty("floatingFilter",Boolean.valueOf(iff(#EnableFloatingFilter = 1 , "true" ,"false")))
       option!.addProperty("groupSelectsChildren",Boolean.valueOf(iff(#groupSelectsChildren = 1 ,  "true" ,"false")))
       option!.addProperty("__getRowNodeId",#RowNodeId$)
       option!.addProperty("__getParentNodeId",#ParentNodeId$)
       option!.addProperty("editType",#getEditType())
       option!.addProperty("singleClickEdit",#getSingleClickEdit())
       option!.addProperty("enableGroupEdit",#getGroupEdit())
       option!.addProperty("rowSelection",iff(#MultipleSelection = 1 , "multiple" ,"single"))
       option!.addProperty("__enterKeyBehavior",#EnterKeyBehavior$)
       option!.add("columnDefs",cdef!)

        
       if (#SelectionMode = BBjGrid.GRID_SELECT_ROW) and #MultipleSelection = 0 then
           option!.addProperty("__navigateToNextCell",1)
       else 
           option!.addProperty("__navigateToNextCell",0)
       fi

        #HTMLView!.executeScript("gw_setData("+data$+","+gson!.toJson(option!)+")")
         
    methodend 
    
   
    method private JsonArray getAgGridColumnDefinition(BBjInt fGroup%)
        
       declare DataRow cd!
        cd! = #ColumnDefinition!
        if cd! = null() or cd!.getFieldNames().size()=0  then
            if #RS! <> null() and #RS!.size()>0 then
                cd! = #RS!.get(0)
            else
                if #TREE! <> null() then
                    cd! = #TREE!.getFirstRecord()
                fi
            fi
        fi
        
        cdef! = new JsonArray()
        first=1
            if fGroup%>0 then
            
                node! = new JsonObject()
                node!.addProperty("headerName",#GroupColumnLabel$)
                node!.addProperty("field","__node__name")
                node!.addProperty("cellRenderer","agGroupCellRenderer")
                node!.addProperty("pinned","left")
                
                cellRendererParams! = new JsonObject()
                cellRendererParams!.addProperty("suppressCount" ,Boolean.valueOf(iff(#GroupChildCount = 1 , "false" ,"true")))
                cellRendererParams!.addProperty("checkbox" ,Boolean.valueOf(iff(#showSelectionCheckbox = 1 , "true" ,"false")))
                
                node!.add("cellRendererParams",cellRendererParams!)
                
                cdef!.add(node!)
                first=0
            fi
            
            if cd! = null() or cd!.getFieldNames().size()=0  then
                methodret cdef!
            fi
                
            f! = cd!.getFieldNames()
            it! = f!.iterator()
            
            while it!.hasNext()
                f$=it!.next()

                label$=""
                label$=cd!.getFieldAttribute(f$,"LABEL",err=*next)
                if label$="" then
                    label$=f$
                fi

                node! = new JsonObject()
                node!.addProperty("headerName",label$)
                node!.addProperty("field",f$)
                

                pin$=""
                pin$=cd!.getFieldAttribute(f$,"PINNED",err=*next)
                if pin$>"" then
                    node!.addProperty("pinned",pin$)
                fi
                
                width$=""
                width$=cd!.getFieldAttribute(f$,"WIDTH",err=*next)
                if width$>"" then
                    node!.addProperty("width",num(width$))
                fi                
                
                editable!= num(cd!.getFieldAttribute(f$,"EDITABLE",err=*next))
                if editable! > 0 then
                    node!.addProperty("editable",1)
                else
                    node!.addProperty("editable",#Editable!)
                fi
                
                if first then
                   node!.addProperty("checkboxSelection",Boolean.valueOf(iff(#showSelectionCheckbox = 1 , "true" ,"false")))
                fi
                 
                type! = ""
                type!= cd!.getFieldAttribute(f$,"TYPE",err=*next)
                if type! <> "" then
                    node!.addProperty("type",type!)
                    
                else
                  switch cd!.getFieldType(f$)
                      case Types.INTEGER
                      case Types.DECIMAL
                      case Types.DOUBLE
                      case Types.NUMERIC
                          node!.addProperty("type",#GRID_TYPE_BASIC_NUMBER())
                      break
                      case Types.DATE
                          node!.addProperty("type",#GRID_TYPE_BASIC_DATE())
                      break
                      case Types.TIMESTAMP
                          node!.addProperty("type",#GRID_TYPE_BASIC_TIMESTAMP())
                      break
                      
                      case Types.BOOLEAN
                          node!.addProperty("type",#GRID_TYPE_BASIC_BOOLEAN())
                      break
                     
                      case default
                          node!.addProperty("type",#DefaultType$)
                      break
                  swend
                fi
                
                bgc$=""
                bgc$=cd!.getFieldAttribute(f$,"BGCOLOR",err=*next)

                fgc$=""
                fgc$=cd!.getFieldAttribute(f$,"FGCOLOR",err=*next)

                align$=""
                align$=cd!.getFieldAttribute(f$,"ALIGN",err=*next)


                f=0
                if (bgc$>"" OR fgc$>"" or align$>"") then
                
                    cellStyleDefaults! = new JsonObject()
                    
                    if (fgc$>"") then
                        cellStyleDefaults!.addProperty("FGCOLOR",fgc$)
                        f=1
                    fi
                    
                    if bgc$>"" then
                        cellStyleDefaults!.addProperty("BGCOLOR",bgc$)
                        f=1
                    fi
                    
                    if align$>"" then
                        cellStyleDefaults!.addProperty("ALIGN",align$)
                        f=1 
                    fi
                    
                    node!.add("cellStyleDefaults",cellStyleDefaults!)                       
                fi

                first = 0
                cdef!.add(node!)
            wend
            
        methodret cdef! 
    
    methodend

    rem /**
    rem  * callback method after initial load
    rem  * does last initialization work
    rem  * 
    rem  * @param BBjEvent ev!: the onLoad event
    rem  */
    method public void onLoad(BBjEvent ev!)

        #HTMLView!.clearCallback(#HTMLView!.ON_PAGE_LOADED); rem ' only do this once

        ch=unt

        rem loading the patched ag-grid in BUI until they will have fixed their code for the getDocument method    
        if INFO(3,6)="5" then
            rem open (ch)"BBjGridExWidget/js/ag-grid-enterprise.js"
            rem open (ch)"BBjGridExWidget/js/ag-grid.js"
            open (ch)"BBjGridExWidget/js/dist/ag-grid.min.js"
            read record (ch,siz=5512000)script$
            close (ch)        
            #HTMLView!.injectScript(script$)
            #HTMLView!.injectScript(script$,1)
        else
            rem open (ch)"BBjGridExWidget/js/ag-grid-enterprise.js"
            open (ch)"BBjGridExWidget/js/dist/ag-grid.min.js"
            read record (ch,siz=5512000)script$
            close (ch)        
            #HTMLView!.injectScript(script$,1)
        fi
        
        ch=unt
        open (ch)"BBjGridExWidget/js/dist/agc-basic-bundle.min.js"
        read record (ch,siz=5512000)script$
        close (ch)
        #HTMLView!.injectScript(script$)
                
        ch=unt
        open (ch)"BBjGridExWidget/js/dist/bbj-grid-widget.min.js"
        read record (ch,siz=5512000)script$
        close (ch)

        if INFO(3,6)="5" then
            #HTMLView!.injectScript(script$)
            #HTMLView!.injectScript(script$,1)
        else
            p_script! = script$
            p_script! = p_script!.replaceAll("\$doc","document")
            p_script! = p_script!.replaceAll("\$win","window")
            #HTMLView!.injectScript(str(p_script!),1)
            #HTMLView!.injectScript(str(p_script!))
        fi
        
        #IsReady! = BBjAPI.TRUE
        
        if #RS! <> null() or #TREE! <> null()  or #URL$>"" then
             #performGridDataUpdate()
        fi
        
        it! = #backlog!.iterator()
        while it!.hasNext()
            s$=it!.next()
            #HTMLView!.executeScript(s$)
        wend
        
        #backlog! = null()
        
    methodend


    rem /**
    rem  * experimental function that shows the developer console 
    rem  * (only in GUI, for BUI it's a NOOP) 
    rem  */
    method public void showDeveloperConsole()
        if (info(3,6)<>"5") then
            #executeScript("if (!document.getElementById('FirebugLite')){E = document['createElement' + 'NS'] && document.documentElement.namespaceURI;E = E ? document['createElement' + 'NS'](E, 'script') : document['createElement']('script');E['setAttribute']('id', 'FirebugLite');E['setAttribute']('src', 'https://getfirebug.com/' + 'firebug-lite.js' + '#startOpened');E['setAttribute']('FirebugLite', '4');(document['getElementsByTagName']('head')[0] || document['getElementsByTagName']('body')[0]).appendChild(E);E = new Image;E['setAttribute']('src', 'https://getfirebug.com/' + '#startOpened');}")
        fi
    methodend
    
    
    method private Object executeScript(BBjString s$)
        if #IsReady! then
            methodret #HTMLView!.executeScript(s$)
        else
            #backlog!.addItem(s$)
        fi
        
        methodret null() 
    methodend

    
rem --------------------api methods--------------------------------


    rem /**
    rem  * set the data into the grid
    rem  * @param ResultSet: the com.basiscomponents.db.ResultSet with the data
    rem  */
    method public void setData( ResultSet rs!)
        #RS! = rs!
        #TREE! = null()
        #URL$=""
        #performGridDataUpdate()
    methodend
    
    
    rem /**
    rem  * set the data into the grid
    rem  * @param ResultSet: the com.basiscomponents.db.ResultSet with the data
    rem  * @param BBjString: field used to generate id 
    rem  */
    method public void setData( ResultSet rs! ,BBjString RowNodeId$)
    
       #RowNodeId$ = RowNodeId$
       #setData(rs!)
    methodend

    rem /**
    rem  * set the data into the grid, to create a tree grid
    rem  * @param DataTree: the com.basiscomponents.db.tree.DataTree with the data 
    rem  * organized in hiearchy of ResultSets
    rem  * @see Demo/TreeDemo.bbj https://github.com/BasisHub/BBjGridExWidget/blob/master/Demo/TreeDemo.bbj
    rem  */
    method public void setData( DataTree tree!)
        #RS! = null()
        #TREE! = tree!
        #URL$=""
        #performGridDataUpdate()
    methodend
    
    
    method public void setData( DataTree rs! ,BBjString RowNodeId$)
    
       #RowNodeId$ = RowNodeId$
       #setData(rs!)
    methodend
    
    method public void setData( DataTree rs! ,BBjString RowNodeId$ , BBjString ParentNodeId$)
    
       #ParentNodeId$ = ParentNodeId$
       #setData(rs! , RowNodeId$)
    methodend
    
    rem /**
    rem  * clear all columns
    rem  */
    method public void clearColumnDefinitions()
        #ColumnDefinition! = null()
    methodend
    
    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  */
    method public void addColumn(BBjString Field$)
        #addColumn(Field$,Field$,12,0)
    methodend

    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  * @param BBjString label$: the column header
    rem  */
    method public void addColumn(BBjString Field$, BBjString Label$)
        #addColumn(Field$,Label$, 12, 0)
    methodend

    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  * @param BBjString label$: the column header
    rem  * @param BBjNumber Type!: the column Type (java.sql.Types)
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  * 
    rem  */
    method public void addColumn(BBjString Field$, BBjString Label$, BBjNumber Type!)
        #addColumn(Field$,Label$, Type!, 0)
    methodend

    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  * @param BBjString label$: the column header
    rem  * @param BBjNumber Type!: the column Type (java.sql.Types)
    rem  * @param BBjNumber Editable!: 1 = column is editable
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  * 
    rem  */    
    method public void addColumn(BBjString Field$, BBjString Label$, BBjNumber Type!, BBjNumber Editable!)
    
        if #ColumnDefinition! = null() then
            #ColumnDefinition! = new DataRow()
        fi
        
        #ColumnDefinition!.setFieldValue(Field$,Type!,null())
        #ColumnDefinition!.setFieldAttribute(Field$,"LABEL",Label$)
        #ColumnDefinition!.setFieldAttribute(Field$,"EDITABLE",STR(Editable!))
    
    methodend
    
    rem /**
    rem  * pin a column of the grid to the left or the right margin
    rem  * @param BBjString field$: the field name of the column
    rem  * @param BBjString pin$: "right" or "left" 
    rem  * 
    rem  */    
    method public void pinColumn(BBjString Field$, BBjString pin$)
        pin$=cvs(pin$,8)
        if pin$="left" or pin$="right" then
            #ColumnDefinition!.setFieldAttribute(Field$,"PINNED",pin$,err=*next)
        else
            #ColumnDefinition!.removeFieldAttribute(Field$,"PINNED",err=*next)
        fi
        
        script$="gw_pinColumn('" + Field$ + "','" + pin$  + "');"        
        #executeScript(script$)
    methodend

    rem /**
    rem  * set the grid to scroll horizontally or fit into the client area
    rem  * @param BBjNumber fit!: 1 = fit all columns into the width
    rem  * 
    rem  */     
    method public void setFitToGrid(BBjNumber fit!)
        #FitToGrid=fit!
        ret! = #executeScript("gw_sizeColumnsToFit("+str(fit!)+")")
    methodend


    rem /**
    rem  * set the font color of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjColor color!: the color for the column
    rem  */ 
    method public void setColumnForeColor(BBjString Field$,BBjColor color!)
        #ColumnDefinition!.setFieldAttribute(Field$,"FGCOLOR","#"+hta(chr(color!.getRed()))+hta(chr(color!.getGreen()))+hta(chr(color!.getBlue())),err=*next)
    methodend

    rem /**
    rem  * set the background color of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjColor color!: the color for the column
    rem  */ 
    method public void setColumnBackColor(BBjString Field$,BBjColor color!)
        #ColumnDefinition!.setFieldAttribute(Field$,"BGCOLOR","#"+hta(chr(color!.getRed()))+hta(chr(color!.getGreen()))+hta(chr(color!.getBlue())),err=*next)
    methodend

    rem /**
    rem  * set the width of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjNumber width!: the column width
    rem  */ 
    method public void setColumnWidth(BBjString Field$, BBjNumber w!)
        #ColumnDefinition!.setFieldAttribute(Field$,"WIDTH",num(w!),err=*next)
        script$="gw_setColumnWidth('" + Field$ + "'," + str(w!) + ");"        
        #executeScript(script$)
    methodend

    rem /**
    rem  * set the alignment of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjNumber align: the column alignment
    rem  * 
    rem  * valid alignments:
    rem  * 
    rem  * @see GRID_ALIGN_LEFT()
    rem  * @see GRID_ALIGN_CENTER()
    rem  * @see GRID_ALIGN_RIGHT()
    rem  */    
    method public void setColumnAlignment(BBjString Field$, BBjNumber align)
        switch align
            case BBjGrid.GRID_ALIGN_LEFT
                #ColumnDefinition!.setFieldAttribute(Field$,"ALIGN","left",err=*next)
                break
            case BBjGrid.GRID_ALIGN_CENTER
                #ColumnDefinition!.setFieldAttribute(Field$,"ALIGN","center",err=*next)
                break
            case BBjGrid.GRID_ALIGN_RIGHT
                #ColumnDefinition!.setFieldAttribute(Field$,"ALIGN","right",err=*next)
                break
        swend
            
    methodend
    
    method public void moveColumn(BBjString Field$, BBjNumber toIndex!)
        script$="gw_moveColumn('" + Field$ + "'," + str(toIndex!) + ");"        
        #executeScript(script$)
    methodend

    
    rem /**
    rem  * set the selection mode of the grid 
    rem  * @param BBjNumber mode: the selection mode, one of 
    rem  * @see GRID_SELECT_ROW()
    rem  * @see GRID_SELECT_CELL()
    rem  */     
    method public void setSelectionMode(BBjNumber mode)
        #SelectionMode=mode
    methodend

    rem /**
    rem  * Allow selection of multiple cells or rows  
    rem  * @param BBjNumber multiple: 1 allows multiple selection, 0 denies 
    rem  */ 
    method public void setMultipleSelection(BBjNumber multiple)
        #MultipleSelection=multiple
    methodend

    rem /**
    rem  * Allow filters in the grid 
    rem  * @param BBjNumber enable: 1 shows the auto filter widgets in the toolbar 
    rem  */     
    method public void setEnableFilter(BBjNumber enable)
        #EnableFilter=enable
    methodend  
    
    rem /**
    rem  * Allow floating filters in the grid 
    rem  * @param BBjNumber enable: 1 shows the floating filter widgets in the toolbar 
    rem  */     
    method public void setEnableFloatingFilter(BBjNumber enable)
        #EnableFloatingFilter=enable
    methodend    
    
    
    rem /**
    rem  * Perform throw columns search  
    rem  * @param BBjNumber filter 
    rem  */     
    method public void setQuickFilter(BBjNumber filter)
        #HTMLView!.executeScript("gw_setQuickFilter("+ str(filter) +")")
    methodend  
    
    rem /**
    rem  * Perform throw columns search  
    rem  * @param BBjNumber filter 
    rem  */     
    method public void setQuickFilter(BBjString filter!)
        #HTMLView!.executeScript("gw_setQuickFilter('"+ filter! +"')")
    methodend  
    
    rem /**
    rem  * set the label for the group column if the grid is a tree-grid
    rem  * defaults to "Group"
    rem  * @param label$ - the label
    rem  */
    method public void setGroupColumnLabel(BBjString label$)
        #GroupColumnLabel$ = label$
    methodend

    rem /**
    rem  * get the label for the group column if the grid is a tree-grid
    rem  * @returns label$ 
    rem  */
    method public BBjString getGroupColumnLabel()
        return #GroupColumnLabel$
    methodend
    
    method public BBjGridExWidgetColumnState getColumnsState()
    
        state! = new BBjGridExWidgetColumnState()
        json_string$ = str(#HTMLView!.executeScript("gw_getState()"))
        state!.setString(json_string$)
        methodret state!
    
    methodend
    
    method public void setColumnsState(BBjGridExWidgetColumnState state!)
    
        json_state$ = state!.getString()
        #HTMLView!.executeScript("gw_setState("+json_state$+")")
    
    methodend
    
    rem /**
    rem  * Start Cell Editing
    rem  * 
    rem  * @param BBjNumber row!: The row number
    rem  * @param BBjString colId!: The column ID
    rem  */
    method public void setStartCellEditing(BBjNumber row! , BBjString colId$)
        #HTMLView!.executeScript("gw_startEditingCell("+STR(row!)+ ",'" + colId$ + "')")
    methodend
   
    rem /**
    rem  * Start Cell Editing
    rem  * 
    rem  * @param BBjNumber row!: The row number
    rem  * @param BBjString colId$: The column ID
    rem  * @param BBjNumber char$: key chars to press on editors when editors support it
    rem  */
    method public void setStartCellEditing(BBjNumber row! , BBjString colId$, BBjString char$)
        #HTMLView!.executeScript("gw_startEditingCell("+STR(row!)+ ",'" + colId$ + "','','" + char$ +"')")
    methodend
    
    
    rem /**
    rem  * Start Cell Editing
    rem  * 
    rem  * @param BBjNumber row!: The row number
    rem  * @param BBjString colId$: The column ID
    rem  * @param BBjNumber char$: key chars to press on editors when editors support it
    rem  * @param BBjNumber key!: key codes to press on editors when editors support it
    rem  */    
    method public void setStartCellEditing(BBjNumber row! , BBjString colId$,BBjNumber key!)
        #HTMLView!.executeScript("gw_startEditingCell("+STR(row!)+ ",'" + colId$ + "','" + STR(key!)+ "')")
    methodend
      
    rem /**
    rem  * Start Next Cell Editing
    rem  */
    method public void moveToNextCell()
        #HTMLView!.executeScript("gw_editNextCell()")
    methodend 

    rem /**
    rem  * Move to previous cell
    rem  */
    method public void moveToPreviousCell()
        #HTMLView!.executeScript("gw_editPreviousCell()")
    methodend 

    
    rem /**
    rem  * Stop editing and discard changes
    rem  */
    method public void stopEditing()
        #HTMLView!.executeScript("gw_stopEditing(0)")
    methodend 
                
    rem /**
    rem  * Stop Editing 
    rem  *  
    rem  * @param BBjNumber cancel!: 1 = discard changes , 0 = accept changes
    rem  */
    method public void stopEditing(BBjNumber cancel!)
        #HTMLView!.executeScript("gw_stopEditing("+STR(cancel!)+ ")")
    methodend   
             
    rem /**
    rem  * @return Hashmap with the selected row indexes and items
    rem  */
    method public BBjVector getSelectedRows()
        methodret #SelectedRows!
    methodend
    
    rem /**
    rem  * @return the selected row 
    rem  */
    method public BBjGridExWidgetRow getSelectedRow()
    
        if #SelectedRows!.size() > 0 then
            it! = #SelectedRows!.entrySet().iterator()
            methodret it!.next().getValue()
        fi
        
        methodret null()
    methodend  
    
    rem /** 
    rem  * @return one if editing is eabled , false otherwise
    rem  */
    method public BBjNUmber isEditing()
        return #Editing
    methodend
    
    
    method public void setTheme(BBjString theme$)
        if pos(theme$="dark#fresh#blue#bootstrap#material")>0 then
            if info(3,6)="5" then
                s$="$doc.getElementById('grid').className='ag-theme-"+theme$+"';"
            else
                s$="document.getElementById('grid').className='ag-theme-"+theme$+"';"
            fi
            #executeScript(s$)
        fi
    methodend
    
    
    method public BBjVector getThemes()
        v! = new BBjVector()
        v!.addItem("dark")
        v!.addItem("fresh")
        v!.addItem("blue")
        v!.addItem("bootstrap")
        v!.addItem("material")
        methodret v!
    methodend
        
    rem /**
    rem  * @return constant value to define left aligned column
    rem  */
    method public static BBjNumber GRID_ALIGN_LEFT()
        methodret BBjGrid.GRID_ALIGN_LEFT
    methodend 

    rem /**
    rem  * @return constant value to define right aligned column
    rem  */    
    method public static BBjNumber GRID_ALIGN_RIGHT()
        methodret BBjGrid.GRID_ALIGN_RIGHT
    methodend 

    rem /**
    rem  * @return constant value to define centered column
    rem  */    
    method public static BBjNumber GRID_ALIGN_CENTER()
        methodret BBjGrid.GRID_ALIGN_CENTER
    methodend 

    method public static BBjNumber GRID_SELECT_ROW()
        methodret BBjGrid.GRID_SELECT_ROW
    methodend 

    rem /**
    rem  * @return constant value to define cell selection mode
    rem  */
    method public static BBjNumber GRID_SELECT_CELL()
        methodret BBjGrid.GRID_SELECT_CELL
    methodend 

    rem /**
    rem  * @return constant value to define row selection event
    rem  */    
    method public static BBjNumber ON_GRID_SELECT_ROW()
        methodret BBjAPI.ON_GRID_SELECT_ROW
    methodend 

    rem /**
    rem  * @return constant value to define row double click event
    rem  */    
    method public static BBjNumber ON_GRID_DOUBLE_CLICK()
        methodret BBjAPI.ON_GRID_DOUBLE_CLICK
    methodend     

    rem /**
    rem  * @return constant value to define cell editing start event
    rem  */ 
    method public static BBjNumber ON_GRID_CELL_EDITING_STARTED()
        methodret 5000
    methodend    
    
    rem /**
    rem  * @return constant value to define cell editing stop event
    rem  */     
    method public static BBjNumber ON_GRID_CELL_EDITING_STOPPED()
        methodret 5002
    methodend

    rem /**
    rem  * @return constant value to define row editing start event
    rem  */ 
    method public static BBjNumber ON_GRID_ROW_EDITING_STARTED()
        methodret 5003
    methodend    
    
    rem /**
    rem  * @return constant value to define row editing stop event
    rem  */ 
    method public static BBjNumber ON_GRID_ROW_EDITING_STOPPED()
        methodret 5005
    methodend
            
    rem /**
    rem  * @return constant value to define row position
    rem  */
    method public static BBjString GRID_ROWPOS_TOP()
        methodret "top"
    methodend 
    
    rem /**
    rem  * @return constant value to define row position
    rem  */
    method public static BBjString GRID_ROWPOS_MIDDLE()
        methodret "middle"
    methodend 
    
    rem /**
    rem  * @return constant value to define row position
    rem  */    
    method public static BBjString GRID_ROWPOS_BOTTOM()
        methodret "bottom"
    methodend 
    
    rem /**
    rem  * @return constant value to define editing mode "row"
    rem  */ 
    method public static BBjString GRID_EDITTYPE_ROW()
        methodret "fullRow"
    methodend
    
    rem /**
    rem  * @return constant value to define editing mode "cell"
    rem  */ 
    method public static BBjString GRID_EDITTYPE_CELL()
        methodret ""
    methodend
    
    rem /**
    rem  * @return constant value to define string column types
    rem  */     
    method public static BBjString GRID_TYPE_BASIC_STRING()
        methodret "basic-string"
    methodend
    
    rem /**
    rem  * @return constant value to define text column types
    rem  */         
    method public static BBjString GRID_TYPE_BASIC_TEXT()
        methodret "basic-text"
    methodend 
    
    rem /**
    rem  * @return constant value to define number column types
    rem  */         
    method public static BBjString GRID_TYPE_BASIC_NUMBER()
        methodret "basic-number"
    methodend 

    rem /**
    rem  * @return constant value to define boolean column types
    rem  */     
    method public static BBjString GRID_TYPE_BASIC_BOOLEAN()
        methodret "basic-boolean"
    methodend
    
    rem /**
    rem  * @return constant value to define date column types
    rem  */         
    method public static BBjString GRID_TYPE_BASIC_DATE()
        methodret "basic-date"
    methodend
    
    rem /**
    rem  * @return constant value to define timestamp column types
    rem  */     
    method public static BBjString GRID_TYPE_BASIC_TIMESTAMP()
        methodret "basic-timestamp"
    methodend  
    
    rem /**
    rem  * @return constant value to define image column types
    rem  */         
    method public static BBjString GRID_TYPE_BASIC_IMAGE()
        methodret "basic-image"
    methodend 
    
    rem /**
    rem  * @return constant value to define filterable image column types
    rem  */         
    method public static BBjString GRID_TYPE_BASIC_IMAGE_FILTERABLE()
        methodret "basic-image-filterable"
    methodend 
    
    rem /**
    rem  * @return constant value to define enter key behavior (Move to next cell)
    rem  */     
    method public static BBjString GRID_ENTER_NEXT_CELL()
        methodret "next"
    methodend     

    rem /**
    rem  * @return constant value to define enter key behavior (Stop editing)
    rem  */         
    method public static BBjString GRID_ENTER_STOP_EDITING()
        methodret "stop"
    methodend    
classend

