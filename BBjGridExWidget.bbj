rem package BBjGridExWidget
rem /**
rem  * This file is part of the BBjGridExWidget plugin.
rem  * (c) Basis Europe <eu@basis.com>
rem  *
rem  * For the full copyright and license information, please view the LICENSE
rem  * file that was distributed with this source code.
rem  */
use java.util.Arrays
use java.util.ArrayList
use java.util.HashSet
use com.google.gson.Gson
use com.google.gson.JsonParser
use com.google.gson.JsonObject
use com.google.gson.JsonArray
use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow
use ::BBjWidget/BBjWidget.bbj::BBjWidget
use ::BBjGridExWidget/BBjGridExWidgetOptions.bbj::BBjGridExWidgetOptions
use ::BBjGridExWidget/BBjGridExWidgetSelectRowEvent.bbj::BBjGridExWidgetSelectRowEvent
use ::BBjGridExWidget/BBjGridExWidgetState.bbj::BBjGridExWidgetState
use ::BBjGridExWidget/BBjGridWidgetCellEditingEvent.bbj::BBjGridWidgetCellEditingEvent
use ::BBjGridExWidget/BBjGridWidgetRowEditingEvent.bbj::BBjGridWidgetRowEditingEvent
use ::BBjGridExWidget/BBjGridExWidgetLanguageManager.bbj::BBjGridExWidgetLanguageManager
use ::BBjGridExWidget/BBjGridExWidgetSidebar.bbj::BBjGridExWidgetSidebar
use ::BBjGridExWidget/BBjGridExWidgetSidebar.bbj::BBjGridExWidgetDefaultSidebar
use ::BBjGridExWidget/BBjGridExWidgetSidebar.bbj::BBjGridExWidgetFiltersToolpanel
use ::BBjGridExWidget/BBjGridExWidgetStatusBar.bbj::BBjGridExWidgetStatusBar
use ::BBjGridExWidget/BBjGridExWidgetContextMenu.bbj::BBjGridContextMenu
use ::BBjGridExWidget/BBjGridExWidgetContextMenu.bbj::BBjGridDefaultContextMenu
use ::BBjGridExWidget/BBjGridExWidgetExpressions.bbj::BBjGridExWidgetExpressionInterface
use ::BBjGridExWidget/BBjGridExWidgetExpressions.bbj::BBjGridExWidgetExpression
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetDefaultColumnDefinition
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetAutoGroupColumn
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetColumn
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetDefaultColumnGroup
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetColumnGroup
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetColumnsManagerInterface
use ::BBjGridExWidget/BBjGridExWidgetColumns.bbj::BBjGridExWidgetColumnsManager
use ::BBjGridExWidget/BBjGridExWidgetRenderers.bbj::BBjGridExWidgetRendererImageRenderer
use ::BBjGridExWidget/BBjGridExWidgetClientJsonFactory.bbj::BBjGridExWidgetClientJsonFactory
use ::BBjGridExWidget/BBjGridExWidgetClientModels.bbj::BBjGridExWidgetClientRowModel
use ::BBjGridExWidget/BBjGridExWidgetClientModels.bbj::BBjGridExWidgetClientAddRangeSelectionModel
use ::BBjGridExWidget/BBjGridExWidgetClientModels.bbj::BBjGridExWidgetClientAddRangeChartModel
use ::BBjGridExWidget/BBjGridExWidgetClientEvents.bbj::BBjGridExWidgetClientEventsRowSelection
use ::BBjGridExWidget/BBjGridExWidgetClientEvents.bbj::BBjGridExWidgetClientEventsContextMenu
use ::BBjGridExWidget/BBjGridExWidgetClientEvents.bbj::BBjGridExWidgetClientEventsCell
use ::BBjGridExWidget/BBjGridExWidgetClientEvents.bbj::BBjGridExWidgetClientEventsRowEditing
use ::BBjGridExWidget/BBjGridExWidgetClientEvents.bbj::BBjGridExWidgetClientEventsRangeSelection
use ::BBjGridExWidget/BBjGridExWidgetClientEvents.bbj::BBjGridExWidgetClientEventsKeypress
use ::BBjGridExWidget/util/LicenseManager.bbj::LicenseManager
rem /**
rem  * The Grid Core Class.This class works as a columns manager and api provider.
rem  * It contains a big number of methods and properties to configure the column from A..Z.
rem  * Every property and method has one or more tag attached.
rem  *
rem  * The following is the meaning for each tag :<br><br>
rem  *
rem  *
rem  * <table border="1" cellpadding="10">
rem  *  <tbody>
rem  *      <tr>
rem  *          <td><strong>&nbsp;Enterprise</strong></td>
rem  *          <td>The property/method is used only with the enterprise version&#183; using it without having a valid license will<br />be ignored&#183;</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td>&nbsp;<strong>Configuration</strong></td>
rem  *          <td>Properties and methods which are tagged with&nbsp;this tag are used to configure the grid before it is rendered on the client&#183;<br />Changing these properties or calling these methods won't affect&nbsp;the grid which is displayed on the client&#183;<br />In order to reflect your changes on the client, you need to rerender the whole grid <br />or rerender the column definition once again&#183;</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td>&nbsp;<strong>API</strong></td>
rem  *          <td>Methods/properties tagged with this tag can be called before or after the grid is rendered on the client and they don't require a refresh&#183;</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td><strong>&nbsp;ColumnsRerender</strong></td>
rem  *          <td>Changing this property or calling this method after the first render require columns rerender using <i>updateColumns()</i> method</td>
rem  *      </tr>
rem  *      <tr>
rem  *          <td><strong>&nbsp;GridRerender</strong></td>
rem  *          <td>Changing this property or calling this method after the first render require full rerender using <i>render()</i> method</td>
rem  *      </tr>
rem  *  </tbody>
rem  * </table>
rem  *
rem  * @author Stephan Wald
rem  * @author Hyyan Abo Fakher
rem  */
class public BBjGridExWidget extends BBjWidget implements BBjGridExWidgetColumnsManagerInterface
    rem /**
    rem  * The Grid enterprise key
    rem  */
    field public static BBjString LicenseKey$
    rem /**
    rem  * When true, the grid will force using the community version of the grid whether there
    rem  * is a license key or not.
    rem  */
    field public static BBjNumber ForceCommunityBuild! = 0
    rem /**
    rem  * When true the grid will use the unminifed version of the Javascript code then open the debugger
    rem  * in the browser when the CHROMIUM_HTMLVIEW is in use&#183;<br>
    rem  * <b>Note :</b> in BBj 19.10 and higher the grid will open the debugger only when the debugging port is set
    rem  * <pre><code>
    rem  *      chromiumSwitches$ = stbl("!CHROMIUM_SWITCHES","--remote-debugging-port=9222")
    rem  * </code></pre>
    rem  */
    field public static BBjNumber Debug = 0
    rem /**
    rem  * Unique auto generate id for the grid instance&#183; This id is used in the client to distinguish instances
    rem  */
    field public BBjString GRIDID$ = java.util.UUID.randomUUID().toString()
    rem /**
    rem  * The unique string to use as row inedx&#183; default is __ROW_INDEX
    rem  */
    field public BBjString RowNodeId$ = "__ROW_INDEX"
    rem /**
    rem  * The resultset instance
    rem  */
    field public ResultSet RS! = new ResultSet()
    rem /**
    rem  * Columns Manager instance
    rem  */
    field public BBjGridExWidgetColumnsManager ColumnsManager! = new BBjGridExWidgetColumnsManager()
    rem /**
    rem  * Instance of the grid options class
    rem  */
    field public BBjGridExWidgetOptions Options! = new BBjGridExWidgetOptions(#this!)
    rem /**
    rem  * Instance of BBjGridExWidgetClientJsonFactory to convert client JSON strings to Client Models
    rem  */
    field protected BBjGridExWidgetClientJsonFactory ClientJsonFactory! = new BBjGridExWidgetClientJsonFactory(#this!)
    rem /**
    rem  * The vector holds the registered events
    rem  */
    field protected HashSet Interests! = new HashSet()
    rem /**
    rem  * An array which contains the supported toolbar items
    rem  */
    field protected HashSet ChartToolbarItems! = new HashSet()
    rem /**
    rem  * The client's HTML template to use in order to build the grid&#183;
    rem  */
    field protected BBjString Template$ = ""
    rem /**
    rem  * Instance of the grid's license manager
    rem  */
    field protected static LicenseManager LicenseManager! = new LicenseManager()
    field protected BBjHtmlView HTMLView!
    field protected Boolean IsReady! = BBjAPI.FALSE
    field protected BBjVector backlog! = new BBjVector()
    field protected BBjString URL$
    field protected BBjNumber newW!
    field protected BBjNumber newH!
    rem /**
    rem  * Constant value to define row selection event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_ROW_CLICK()
        methodret BBjAPI.ON_GRID_SELECT_ROW
    methodend
    rem /**
    rem  * Alias to <i>ON_GRID_ROW_CLICK()</i>
    rem  *
    rem  * @see ON_GRID_ROW_CLICK()
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_SELECT_ROW()
        methodret #ON_GRID_ROW_CLICK()
    methodend
    rem /**
    rem  * Constant value to define row double-click event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_ROW_DOUBLE_CLICK()
        methodret BBjAPI.ON_GRID_DOUBLE_CLICK
    methodend
    rem /**
    rem  * Alias to <i>ON_GRID_ROW_DOUBLE_CLICK()</i>
    rem  *
    rem  * @see ON_GRID_ROW_DOUBLE_CLICK()
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_DOUBLE_CLICK()
        methodret #ON_GRID_ROW_DOUBLE_CLICK()
    methodend
    rem /**
    rem  * Constant value to define cell click event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_CELL_CLICK()
        methodret 5001
    methodend
    rem /**
    rem  * Constant value to define cell double-click event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_CELL_DOUBLE_CLICK()
        methodret 5002
    methodend
    rem /**
    rem  * Constant value to define cell editing start event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_CELL_EDITING_STARTED()
        methodret 5003
    methodend
    rem /**
    rem  * Constant value to define cell editing stop event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_CELL_EDITING_STOPPED()
        methodret 5004
    methodend
    rem /**
    rem  * Constant value to define cell value changed event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_CELL_VALUE_CHANGED()
        methodret 5005
    methodend
    rem /**
    rem  * Constant value to define row editing start event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_ROW_EDITING_STARTED()
        methodret 5006
    methodend
    rem /**
    rem  * Constant value to define row editing stop event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_ROW_EDITING_STOPPED()
        methodret 5007
    methodend
    rem /**
    rem  * Constant value to define grid state changes
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_STATE_CHANGE()
        methodret 5008
    methodend
    rem /**
    rem  * Constant value to define range selection event
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_RANGE_SELECTION_CHANGED()
        methodret 5009
    methodend
    rem /**
    rem  * Constant value to define keyboard keypress
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_KEYPRESS()
        methodret 5010
    methodend
    rem /**
    rem  * Alias for <i>ON_GRID_STATE_CHANGE()</i>
    rem  *
    rem  * @see ON_GRID_STATE_CHANGE()
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber ON_GRID_COLUMN_STATE_CHANGE()
        methodret #ON_GRID_STATE_CHANGE()
    methodend
    rem /**
    rem  * Constant value to define left aligned column
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber GRID_ALIGN_LEFT()
        methodret BBjGrid.GRID_ALIGN_LEFT
    methodend
    rem /**
    rem  * Constant value to define right aligned column
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber GRID_ALIGN_RIGHT()
        methodret BBjGrid.GRID_ALIGN_RIGHT
    methodend
    rem /**
    rem  * Constant value to define centered column
    rem  *
    rem  * @return BBjNumber
    rem  */
    method public static BBjNumber GRID_ALIGN_CENTER()
        methodret BBjGrid.GRID_ALIGN_CENTER
    methodend
    rem /**
    rem  * Constant value to define row position
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_ROWPOS_TOP()
        methodret "top"
    methodend
    rem /**
    rem  * Constant value to define row position
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_ROWPOS_MIDDLE()
        methodret "middle"
    methodend
    rem /**
    rem  * Constant value to define row position
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_ROWPOS_BOTTOM()
        methodret "bottom"
    methodend
    rem /**
    rem  * Constant value to define editing mode "row"
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_EDITTYPE_ROW()
        methodret "fullRow"
    methodend
    rem /**
    rem  * Constant value to define editing mode "cell"
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_EDITTYPE_CELL()
        methodret ""
    methodend
    rem /**
    rem  * Constant value to define enter key behavior (Move to next cell)
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_ENTER_NEXT_CELL()
        methodret "next"
    methodend
    rem /**
    rem  * Constant value to define navigation behavior (Move to next cell)
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_NAVIGATION_BEHAVIOUR_NEXT_CELL()
        methodret "navigate_next_cell"
    methodend
    rem /**
    rem  * Constant value to define navigation behavior (Move to next row)
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_NAVIGATION_BEHAVIOUR_NEXT_ROW()
        methodret "navigate_next_row"
    methodend
    rem /**
    rem  * Constant value to define enter key behavior (Stop editing)
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_ENTER_STOP_EDITING()
        methodret "stop"
    methodend
    rem /**
    rem  * Constant value which defines that group panel must always be shown
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_GROUPPANEL_SHOW_VISIBLE()
        methodret "always"
    methodend
    rem /**
    rem  * Constant value which defines that group panel must be shown only when grouping
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_GROUPPANEL_SHOW_ONGROUPING()
        methodret "onlyWhenGrouping"
    methodend
    rem /**
    rem  * Constant value which defines that group panel must always be hidden
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString GRID_GROUPPANEL_SHOW_HIDDEN()
        methodret "never"
    methodend
    rem /**
    rem  * Constant value which defines that chart toolbar settings item
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString CHART_TOOLBAR_SETTINGS()
        methodret "chartSettings"
    methodend
    rem /**
    rem  * Constant value which defines that chart toolbar data item
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString CHART_TOOLBAR_DATA()
        methodret "chartData"
    methodend
    rem /**
    rem  * Constant value which defines that chart toolbar format item
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString CHART_TOOLBAR_FORMAT()
        methodret "chartFormat"
    methodend
    rem /**
    rem  * Constant value which defines that chart toolbar download item
    rem  *
    rem  * @return BBjString
    rem  */
    method public static BBjString CHART_TOOLBAR_DOWNLOAD()
        methodret "chartDownload"
    methodend
    rem /**
    rem  * Make Hex Color
    rem  *
    rem  * Convert the given BBjColor to a hex color string
    rem  *
    rem  * @param BBjColor color! BBj color
    rem  *
    rem  * @return BBjString hex color
    rem  */
    method public static BBjString makeHexColor(BBjColor color!)
        methodret "#"+hta(chr(color!.getRed()))+hta(chr(color!.getGreen()))+hta(chr(color!.getBlue()))
    methodend
    rem /**
    rem  * Convert the image at the given path to base64 string
    rem  *
    rem  * @param BBjString filename! The image's path
    rem  *
    rem  * @return BBjString Image as base64 string
    rem  */
    method public static BBjString imageToBase64(BBjString filename!)
        imageSlice!=BBjAPI().getSysGui().getImageManager().loadImageFromFile(filename!)
        bytes$ = str(imageSlice!.getBytes("png"))
        b64$ = java.util.Base64.getEncoder().encode(bytes$)
        methodret "data:image/png;base64, "+b64$
    methodend
    rem /**
    rem  * Alais for <i>imageToBase64()</i>
    rem  *
    rem  * @see imageToBase64()
    rem  */
    method public static BBjString getImageData(BBjString filename!)
        methodret BBjGridExWidget.imageToBase64(filename!)
    methodend
    rem /**
    rem  * The method will check whether the grid has license key or not.
    rem  *
    rem  * @return BBjNumber true when a license key is found, false otherwise
    rem  */
    method public static BBjNumber isLicensed()
        #getLicenseManager().setLicenseKey(#getLicenseKey())
        methodret #getLicenseManager().isLicensed()
    methodend
    rem /**
    rem  * disabled default constructor
    rem  */
    method private BBjGridExWidget()
    methodend
    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem  *
    rem * @param BBjWindow wnd!! parent window
    rem * @param BBjNumber id! the control ID
    rem * @param BBjNumber x! x-location
    rem * @param BBjNumber y! y-location
    rem * @param BBjNumber w! width
    rem * @param BBjNumber h! height
    rem */
    method public BBjGridExWidget(BBjWindow wnd!, BBjNumber id!, BBjNumber x!, BBjNumber y!, BBjNumber w!, BBjNumber h!)
        #create(wnd!,id!,x!,y!,w!,h!,"")
    methodend
    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem  *
    rem * @param BBjWindow wnd!! parent window
    rem * @param BBjNumber id! the control ID
    rem * @param BBjNumber x! x-location
    rem * @param BBjNumber y! y-location
    rem * @param BBjNumber w! width
    rem * @param BBjNumber h! height
    rem * @param BBjString template$ The client's HTML template to use in order to build the grid.
    rem  *                           By default you will never need  to change the default Template.
    rem  *                           Unless you want to do something really unusual
    rem */
    method public BBjGridExWidget(BBjWindow wnd!, BBjNumber id!, BBjNumber x!, BBjNumber y!, BBjNumber w!, BBjNumber h! , BBjString template$)
        #create(wnd!,id!,x!,y!,w!,h!,template$)
    methodend
    rem /**
    rem  * The constructor that creates the widget in the ChildWindow
    rem  *
    rem  * @param BBjChildWindow wnd!: the child window in which to create the BBjGridExWidget
    rem  */
    method public BBjGridExWidget(BBjChildWindow wnd!)
        #create(wnd!,"")
    methodend
    rem /**
    rem  * The constructor that creates the widget in the ChildWindow
    rem  *
    rem  * @param BBjChildWindow wnd!: the child window in which to create the BBjGridExWidget
    rem  * @param BBjString template$ The client's HTML template to use in order to build the grid.
    rem  *                           By default you will never need  to change the default Template.
    rem  *                           Unless you want to do something really unusual
    rem  */
    method public BBjGridExWidget(BBjChildWindow wnd!,BBjString template$)
        #create(wnd!,template$)
    methodend
    rem /**
    rem  * Create the widget
    rem  *
    rem * @param BBjWindow wnd!! parent window
    rem * @param BBjNumber id! the control ID
    rem * @param BBjNumber x! x-location
    rem * @param BBjNumber y! y-location
    rem * @param BBjNumber w! width
    rem * @param BBjNumber h! height
    rem * @param BBjString template$ The client's HTML template to use in order to build the grid.
    rem  *                           By default you will never need  to change the default Template.
    rem  *                           Unless you want to do something really unusual
    rem  *
    rem  * @Override
    rem  */
    method protected void create(BBjWindow wnd!, BBjNumber id!, BBjNumber x!, BBjNumber y!, BBjNumber w!, BBjNumber h!, BBjString template$)
        #super!.setCanvas(wnd!.addChildWindow(id!,x!,y!,w!,h!,"",$00000800$,BBjAPI().getSysGui().getAvailableContext()))
        #super!.setX(x!)
        #super!.setY(y!)
        #super!.setW(w!)
        #super!.setH(h!)
        #RS!.createIndex()
        #fillChartToolbarItems()
        #setTemplate(template$)
        #redraw(BBjAPI.TRUE)
    methodend
    rem /**
    rem  * Create the widget
    rem  *
    rem * @param BBjWindow wnd!! parent window
    rem * @param BBjNumber id! the control ID
    rem * @param BBjNumber x! x-location
    rem * @param BBjNumber y! y-location
    rem * @param BBjNumber w! width
    rem * @param BBjNumber h! height
    rem  *
    rem  * @Override
    rem  */
    method protected void create(BBjWindow wnd!, BBjNumber id!, BBjNumber x!, BBjNumber y!, BBjNumber w!, BBjNumber h!)
        #create(wnd!,id!,x!,y!,w!,h!,"")
    methodend
    rem /**
    rem  * Create the widget
    rem  *
    rem  * @param BBjChildWindow wnd!: the child window in which to create the BBjGridExWidget
    rem * @param BBjString template$ The client's HTML template to use in order to build the grid.
    rem  *                           By default you will never need  to change the default Template.
    rem  *                           Unless you want to do something really unusual
    rem  *
    rem  * @Override
    rem  */
    method protected void create(BBjChildWindow wnd!,BBjString template$)
        #super!.setCanvas(wnd!)
        #super!.setX(wnd!.getX())
        #super!.setY(wnd!.getY())
        #super!.setW(wnd!.getWidth())
        #super!.setH(wnd!.getHeight())
        #RS!.createIndex()
        #fillChartToolbarItems()
        #setTemplate(template$)
        #redraw(BBjAPI.TRUE)
    methodend
    rem /**
    rem  * Create the widget
    rem  *
    rem  * @param BBjChildWindow wnd!: the child window in which to create the BBjGridExWidget
    rem  * @param BBjString template$ the html template to use for the grid initialization
    rem  *
    rem  * @Override
    rem  */
    method protected void create(BBjChildWindow wnd!)
        #create(wnd!,"")
    methodend
    REM /**
    REM  * Get the unique control type
    REM  *
    REM  * @returns int controlType = 65001
    REM  */
    method public int getControlType()
        methodret 65001
    methodend
    rem /**
    rem  * Register an event handler
    rem  *
    rem  * @param Int type! The event's type
    rem  * @param String callback! The event's callback
    rem  *
    rem  * @Override
    rem  */
    method public void setCallback(int type!, String callback!)
        #super!.setCallback(type!,callback!)
        #getInterests().add(type!)
        #updateClientWithInterests()
    methodend
    rem /**
    rem  * Register an event handler
    rem  *
    rem  * @param Int type! The event's type
    rem  * @param CustomObject instance! class instance
    rem  * @param String method! method name
    rem  *
    rem  * @Override
    rem  */
    method public void setCallback(int type!, CustomObject instance!, String method!)
        #super!.setCallback(type!, instance!, method!)
        #getInterests().add(type!)
        #updateClientWithInterests()
    methodend
    rem /**
    rem  * Remove callback
    rem  *
    rem  * @param Int type! The event's type
    rem  *
    rem  * @Override
    rem  */
    method public void clearCallback(int type!)
        #super!.clearCallback(type!)
        interests! = #getInterests()

        if(interests!.contains(type!)) then
            interests!.remove(type!)
            #updateClientWithInterests()
        FI
    methodend
    rem /**
    rem  * @Override
    rem  *
    rem  * This method is called whenever the widget needs to be rendered
    rem  *
    rem  * @param Boolean f_init! if TRUE then the control is rendered for the first time so this method
    rem  *                         has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        declare BBjHtmlView htmlview!

        if (f_init!) then
            html$ = #getTemplate()

            if (info(3,6)<>"5" and #Debug>0) then
                if (REV < "REV 19.10")
                    call "BBjGridExWidget/util/EnableDebugger.bbj"
                FI
            FI

            if (REV < "REV 19.10")
                htmlview! = #getCanvas().addHtmlView(101,0,0,#getCanvas().getWidth(),#getCanvas().getHeight(),"",$0000$)
            else
                switches$ = stbl("!CHROMIUM_SWITCHES",err=*next)
                htmlview! = #getCanvas().addHtmlView(101,0,0,#getCanvas().getWidth(),#getCanvas().getHeight(),"",$0000$,switches$)
            FI

            htmlview!.setOpaque(0)
            htmlview!.setNoEdge(1)

            if (info(3,6)<>"5" and #Debug>0) then
                url$ = htmlview!.getAttribute("remoteDebuggingURL")

                if url$>"" then
                    BBjAPI().getThinClient().browse(url$)
                FI
            FI

            htmlview!.setCallback(BBjAPI.ON_PAGE_LOADED,#this!,"onInit")
            htmlview!.setCallback(BBjAPI.ON_NATIVE_JAVASCRIPT,#this!,"onNativeEvent")
            htmlview!.setText(html$)
            #HTMLView!=htmlview!
        else
            #HTMLView!.setSize(#getCanvas().getWidth(),#getCanvas().getHeight())
        FI
    methodend
    rem /**
    rem  * Inject Js Script
    rem  *
    rem  * Inject a javascript file in the web view
    rem  *
    rem  * @param BBjString script$ the path for the javascript file
    rem  */
    method public void injectScript(BBjString script$)
        bui = INFO(3,6)="5"

        if bui then
            #HTMLView!.injectScript(script$)
        ELSE
            #HTMLView!.injectScript(script$ , 1)
        FI
    methodend
    rem /**
    rem  * Excute script
    rem  *
    rem  * Excute a javascript code on the client
    rem  *
    rem  * @param BBjString script$ The javascript code
    rem  *
    rem  * @return Object returned value, if any
    rem  */
    method public Object executeScript(BBjString script$)
        if #IsReady! then
            methodret #HTMLView!.executeScript(script$)
        else
            #backlog!.addItem(script$)
        FI

        methodret null()
    methodend
    rem /**
    rem  * An Event listener excuted after the initial load. The method will inject all required file
    rem  * on the client to make the grid functionable
    rem  *
    rem  * @param BBjEvent ev! The onLoad event
    rem  */
    method public void onInit(BBjEvent ev!)
        #HTMLView!.clearCallback(BBjAPI.ON_PAGE_LOADED)
        isLicensed! = 0

        if (#getForceCommunityBuild() = 0) then
            isLicensed! = #isLicensed()
        FI

        bui = INFO(3,6)="5"
        ch=unt
        distBase$ = "BBjGridExWidget/client/dist"
        rem include the grid
        if #getDebug() = 1 then
            if bui then
                gridPath$ = iff(isLicensed!,distBase$ + "/bui/ag-grid-enterprise.noStyle.js",distBase$ +"/bui/ag-grid-community.noStyle.js")
            else
                gridPath$ = iff(isLicensed!,distBase$ + "/ag-grid-enterprise.noStyle.js",distBase$ +"/ag-grid-community.noStyle.js")
            FI
        else
            if bui then
                gridPath$ = iff(isLicensed!,distBase$ + "/bui/ag-grid-enterprise.min.noStyle.js",distBase$ +"/bui/ag-grid-community.min.noStyle.js")
            else
                gridPath$ = iff(isLicensed!,distBase$ + "/ag-grid-enterprise.min.noStyle.js",distBase$ +"/ag-grid-community.min.noStyle.js")
            FI
        FI

        open (ch)gridPath$
        read record (ch,siz=5512000)script$
        close (ch)
        s$=script$
        rem include locale files
        locale! = #getLanguageManager().getLanguage()
        locale$ = str(locale!.replaceAll("_","-").replaceAll("_","-"))
        dateJsLocalePath$ = distBase$ + "/../vendor/Datejs/build/date-" + locale$ + ".js"
        isLocale = 0
        ch=unt
        open (ch,err=*next)dateJsLocalePath$;isLocale=1

        if isLocale = 0 then
            close (ch)
            dateJsLocalePath$ = distBase$ + "/i18n/Datejs/" + locale$ + ".js"
            open (ch,err=*next)dateJsLocalePath$;isLocale=1
        fi

        if isLocale = 1 then
            read record (ch,siz=5512000)script$
            close (ch)
            s$=s$+script$
        else
            a=msgbox("Error loading library for locale "+locale$,0,"Error")
        fi

        ch=unt

        if #getDebug() = 1 then
            if(bui) then
                open (ch) distBase$ + "/bui/flatpickr.js"
            else
                open (ch) distBase$ + "/flatpickr.js"
            fi
        else
            if(bui) then
                open (ch) distBase$ + "/bui/flatpickr.min.js"
            else
                open (ch) distBase$ + "/flatpickr.min.js"
            fi
        FI

        read record (ch,siz=5512000)script$
        close (ch)
        s$=s$+script$
        #injectScript(s$)

        ch=unt

        if #getDebug() = 1 then
            open (ch) distBase$ + "/bbj-grid-widget.js"
        else
            open (ch) distBase$ + "/bbj-grid-widget.min.js"
        FI

        read record (ch,siz=5512000)script$
        close (ch)
        s$=s$+script$
        #injectScript(s$)
        REM         rem could even directly call the onLoaded Method from here
        REM         #onLoaded(null())
        BBjAPI().createTimer(str(#this!)+"onLoadFallback",.2,#this!,"onLoaded")
    methodend
    rem /**
    rem  * On Loaded event listener will flush the callbacks queue and clear all ON_PAGE_LOADED
    rem  * callbacks
    rem  */
    method public void onLoaded(BBjEvent ev!)
        #HTMLView!.clearCallback(BBjAPI.ON_PAGE_LOADED)
        BBjAPI().removeTimer(str(#this!)+"onLoadFallback",err=*next)
        #getLicenseManager().register(#this!)
        #IsReady! = BBjAPI.TRUE
        REM         if #RS! <> null() or #URL$>"" then
        REM             #render()
        REM         FI
        if(#getOptions().getBlockRenderToReady() = 1) then
            #render()
        FI

        firstScripts$  = ""
        secondScripts$ = ""
        it! = #backlog!.iterator()
        while it!.hasNext() = BBjAPI.TRUE
            next!=str(it!.next())

            if(next!.contains("gw_init"))
                firstScripts$ = firstScripts$ + str(next!) + ";"
            FI

            secondScripts$ = secondScripts$ + str(next!) + ";"
        wend

        #backlog! = null()
        scripts$ =  firstScripts$ + secondScripts$

        if(scripts$ > "") then
            #HTMLView!.executeScript(scripts$)
        FI

        if (#newW! <> null() and #newH!<> null()) then
            #super!.setSize(#newW!,#newH!)
            #newW! = null()
            #newH! = null()
        FI
    methodend
    rem /**
    rem  * On NativeEvent
    rem  *
    rem  * Event Handler for Native JavaScript Event coming from the client
    rem  * Determines and dispatches the actual event
    rem  *
    rem  * @param BBjNativeJavaScriptEvent ev! The Javascript Event
    rem  */
    method public void onNativeEvent(BBjNativeJavaScriptEvent ev!)
        map! = ev!.getEventMap()
        type$ = str(map!.get("type"))
        detail$ = str(map!.get("detail"))
        switch type$
            case "gw.rowSelect"
                #onSelecteRowChange(detail$, "single")
                break
            case "gw.rowDoubleClick"
                #onSelecteRowChange(detail$,"double")
                break
            case "gw.cellClicked"
                #onCellEvent(detail$,#ON_GRID_CELL_CLICK())
                break
            case "gw.cellDoubleClicked"
                #onCellEvent(detail$,#ON_GRID_CELL_DOUBLE_CLICK())
                break
            case "gw.rangeSelection"
                #onRangeSelectionChange(detail$)
                break
            case "gw.cellEditingStarted"
                #onCellEvent(detail$,#ON_GRID_CELL_EDITING_STARTED())
                break
            case "gw.cellEditingStopped"
                #onCellEvent(detail$,#ON_GRID_CELL_EDITING_STOPPED())
                break
            case "gw.cellValueChanged"
                #onCellEvent(detail$,#ON_GRID_CELL_VALUE_CHANGED())
                break
            case "gw.rowEditingStarted"
                #onRowEditing(detail$,#ON_GRID_ROW_EDITING_STARTED())
                break
            case "gw.rowEditingStopped"
                #onRowEditing(detail$,#ON_GRID_ROW_EDITING_STOPPED())
                break
            case "gw.stateChanged"
                #handleStateChangedEvent(detail$,#ON_GRID_STATE_CHANGE())
                break
            case "gw.contextmenu"
                #onContextmenuEvent(detail$)
                break
            case "gw.keypress"
                #onKeypressEvent(detail$)
                break
        swend
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn addColumn(BBjGridExWidgetColumn definition!)
        methodret #getColumnsManager().addColumn(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn addColumn(BBjString field!,BBjNumber type!)
        methodret #getColumnsManager().addColumn(field! , type!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn addColumn(BBjString field!,BBjString label!)
        methodret #getColumnsManager().addColumn(field! , label!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn addColumn(BBjString field!, BBjString label! , BBjNumber type!)
        methodret #getColumnsManager().addColumn(field! , label! ,type!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn addColumn(BBjString field!)
        methodret #addColumn(field!,field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn getColumn(BBjString field!)
        methodret #getColumnsManager().getColumn(field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjNumber hasColumn(BBjString field!)
        methodret #getColumnsManager().hasColumn(field!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumn removeColumn(BBjString field!)
        methodret #getColumnsManager().removeColumn(field!)
    methodend
    rem /**
    rem  * Sets the foreground color for a column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field$ The field name of the column definition
    rem  * @param BBjColor color!  the color for the column
    rem  */
    method public void setColumnForeColor(BBjString field$,BBjColor color!)
        #getColumn(field$).setForeColor(color!)
    methodend
    rem /**
    rem  * Sets the foreground color for a column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field$ The field name of the column definition
    rem  * @param BBjString color$ Valid CSS color
    rem  *
    rem  * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
    rem  */
    method public void setColumnForeColor(BBjString field$,BBjString color!)
        #getColumn(field$).setForeColor(color!)
    methodend
    rem /**
    rem  * Sets the background color of a column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field$ The field name of the column definition
    rem  * @param BBjColor color!  The color for the column
    rem  */
    method public void setColumnBackColor(BBjString field$,BBjColor color!)
        #getColumn(field$).setBackColor(color!)
    methodend
    rem /**
    rem  * Sets the background color of a column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field$ The field name of the column definition
    rem  * @param BBjColor color$  Valid CSS color
    rem  *
    rem  * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
    rem  */
    method public void setColumnBackColor(BBjString field$,BBjString color!)
        #getColumn(field$).setBackColor(color!)
    methodend
    rem /**
    rem  * Sets the default alignment for a column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field! The field name of the column definition
    rem  * @param BBjNumber align! The column alignment
    rem  *
    rem  * valid alignments:
    rem  *
    rem  * @see GRID_ALIGN_LEFT()
    rem  * @see GRID_ALIGN_CENTER()
    rem  * @see GRID_ALIGN_RIGHT()
    rem  *
    rem  * @RequiresRefresh
    rem  */
    method public void setColumnAlignment(BBjString field!, BBjNumber align!)
        #getColumn(field!).setAlignment(align!)
    methodend
    rem /**
    rem  * Sets the default alignment for a column's header
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field! The field name of the column definition
    rem  * @param BBjNumber align! The column's header alignment
    rem  *
    rem  * valid alignments:
    rem  *
    rem  * @see GRID_ALIGN_LEFT()
    rem  * @see GRID_ALIGN_CENTER()
    rem  * @see GRID_ALIGN_RIGHT()
    rem  *
    rem  * @RequiresRefresh
    rem  */
    method public void setColumnHeaderAlignment(BBjString field!, BBjNumber align!)
        #getColumn(field!).setHeaderAlignment(align!)
    methodend
    rem /**
    rem  * Sets the width of a column
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * <br>
    rem  * <b>Note:</b> Unline setting the width in the column definition, this method will update a column width without
    rem  * a full rerender.
    rem  *
    rem  * @param BBjString field$ The field name of the column definition
    rem  * @param BBjNumber width! The column width
    rem  */
    method public void setColumnWidth(BBjString field$, BBjNumber width!)
        if #hasColumn(field$) then
            #getColumn(field$).setWidth(width!)
            #executeScript("gw_setColumnWidth('"+ #GRIDID$ + "','" + field$ + "'," + str(width!) + ");")
        FI
    methodend
    rem /**
    rem  * Pin a column of the grid to the left or the right margin
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString field$ The field name of the column
    rem  * @param BBjString pin$  The pin direction ("right" or "left")
    rem  *
    rem  * @see BBjGridExWidgetColumn.PINNED_LEFT()
    rem  * @see BBjGridExWidgetColumn.PINNED_RIGHT()
    rem  */
    method public void pinColumn(BBjString field$, BBjString pin$)
        pin$=cvs(pin$,8)

        if #hasColumn(field$) then
            #getColumn(field$).setPinned(pin$)
            #executeScript("gw_pinColumn('" + #GRIDID$ + "','" + field$ + "','" + pin$  + "');")
        FI
    methodend
    rem /**
    rem  * Change column position
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString field$ The field name of the column
    rem  * @param BBjNumber toIndex! The new column position/index
    rem  */
    method public void moveColumn(BBjString Field$, BBjNumber toIndex!)
        script$="gw_moveColumn('" + #GRIDID$ + "','" + field$ + "'," + str(toIndex!) + ");"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Set the mask of a column using value formatter expression&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  * <br>
    rem  *
    rem  * <b>Note:</b> This method will override the ValueFormatterExpression of the column.The method depends on
    rem  * the column type to determine the correct value formatter (number, date, ...)
    rem  *
    rem ng field! The column's field
    rem  * @param BBjString mask!: The (date or numeric) mask, BBj style
    rem  */
    method public void setColumnMask(BBjString field!, BBjString mask!)
        if(#hasColumn(field!)) then
            #getColumn(field!).setColumnMask(mask!)
        FI
    methodend
    rem /**
    rem  * Set an image list for a given column using BBjGridExWidgetRendererImageRenderer&#183;
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  * <br>
    rem  *
    rem  * <b>Note:</b> This method will override the CellRenderer of the column&#183;
    rem  * The column has to contain the values "1","2","3" to x to reference the slices in the BBjImage list
    rem  *
    rem  * @param BBjString field! The column's field
    rem  * @param BBjImage imagelist! The image list containing the image sprites
    rem  */
    method public void setColumnImageList(BBjString field!, BBjImage imagelist!)
        if #hasColumn(field!) then
            renderer! = new BBjGridExWidgetRendererImageRenderer()
            enc! = java.util.Base64.getEncoder()
            for i=1 to int(imageList!.getWidth() / imageList!.getHeight())
                imageSlice!=imageList!.getImageSlice(i-1,imageList!.getHeight())
                bytes$ = imageSlice!.getBytes("png")
                b64$ = enc!.encode(bytes$)
                renderer!.getList().addProperty(str(i-1),"data:image/png;base64, "+b64$)
            next
            rem adding a clear pixel to reflext the -1 for backwards compatibility to legacy BBj grid
            clearpixel$=enc!.encode($89504E470D0A1A0A0000000D4948445200000001000000010804000000B51C0C020000000B49444154789C63FACF0000020701029A1C31710000000049454E44AE426082$)
            renderer!.getList().addProperty("-1","data:image/png;base64, "+clearpixel$)
            #getColumn(field!).setCellRenderer(renderer!)
        FI
    methodend
    rem /**
    rem  * Set an aggregation function for the passed column field
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @param BBjString field! The column's field
    rem  * @param BBjString AggFunc! Name of function to use for aggregation. One of [sum,min,max,first,last].
    rem  */
    method public void setColumnAggFunc(BBjString field! , BBjString AggFunc!)
        if(#hasColumn(field!)) then
            #getColumn(field!).setAggFunc(AggFunc!)
        FI
    methodend
    rem /**
    rem  * Enable row grouping for columns
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void addRowGroupColumns(BBjString columns!)
        #executeScript("gw_addRowGroupColumn('" + #GRIDID$ + "','" + columns! + "', 0 );")
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        count! = 0
        WHILE (it!.hasNext())
            next! = #getColumn(cvs(it!.next(),128))
            next!.setRowGroup(1)
            next!.setEnableRowGroup(1)
            next!.setRowGroupIndex(count!)
            count! = count! + 1
        WEND
    methodend
    rem /**
    rem  * Disable row grouping for all columns and enable it for the passed columns
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void setRowGroupColumns(BBjString columns!)
        #executeScript("gw_addRowGroupColumn('" + #GRIDID$ + "','" + columns! + "' , 1);")
        list! = Arrays.asList(columns!.split(","))
        it! = #getColumnsManager().getColumns().entrySet().iterator()
        count! = 0
        WHILE (it!.hasNext())
            next! = cast(BBjGridExWidgetColumn , it!.next().getValue())

            if(list!.contains(next!.getField())) then
                next!.setRowGroup(1)
                next!.setEnableRowGroup(1)
                next!.setRowGroupIndex(count!)
                count! = count! + 1
            else
                next!.setRowGroup(0)
                next!.setEnableRowGroup(0)
                next!.setRowGroupIndex(null())
            FI
        WEND
    methodend
    rem /**
    rem  * Disable row grouping for columns.
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void removeRowGroupColumns(BBjString columns!)
        #executeScript("gw_removeRowGroupColumn('" + #GRIDID$ + "','" + columns! + "');")
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        WHILE (it!.hasNext())
            next! = #getColumn(cvs(it!.next(),128))
            next!.setRowGroup(0)
            next!.setEnableRowGroup(0)
            next!.setRowGroupIndex(null())
        WEND
    methodend
    rem /**
    rem  * Enable pivot for columns
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void addPivotColumns(BBjString columns!)
        #executeScript("gw_addPivotColumns('" + #GRIDID$ + "','" + columns! + "', 0 );")
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        count! = 0
        WHILE (it!.hasNext())
            next! = #getColumn(cvs(it!.next(),128))
            next!.setEnablePivot(1)
            next!.setPivotIndex(count!)
            count! = count! + 1
        WEND
    methodend
    rem /**
    rem  * Disable pivot for all columns and enable it for the passed columns
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void setPivotColumns(BBjString columns!)
        #executeScript("gw_addPivotColumns('" + #GRIDID$ + "','" + columns! + "' , 1);")
        list! = Arrays.asList(columns!.split(","))
        it! = #getColumnsManager().getColumns().entrySet().iterator()
        count! = 0
        WHILE (it!.hasNext())
            next! = cast(BBjGridExWidgetColumn , it!.next().getValue())

            if(list!.contains(next!.getField())) then
                next!.setEnablePivot(1)
                next!.setPivotIndex(count!)
                count! = count! + 1
            else
                next!.setEnablePivot(0)
                next!.setPivotIndex(null())
            FI
        WEND
    methodend
    rem /**
    rem  * Disable pivot for columns.
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void removePivotColumns(BBjString columns!)
        #executeScript("gw_removePivotColumns('" + #GRIDID$ + "','" + columns! + "');")
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        WHILE (it!.hasNext())
            next! = #getColumn(cvs(it!.next(),128))
            next!.setEnablePivot(0)
            next!.setPivotIndex(null())
        WEND
    methodend
    rem /**
    rem  * Enable value for columns
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void addValueColumns(BBjString columns!)
        #executeScript("gw_addValueColumns('" + #GRIDID$ + "','" + columns! + "');")
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        WHILE (it!.hasNext())
            next! = cvs(it!.next(),128)
            #getColumn(next!).setEnableValue(1)
        WEND
    methodend
    rem /**
    rem  * Disable value for columns.
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! A comma separated string of column fields
    rem  */
    method public void removeValueColumns(BBjString columns!)
        #executeScript("removeValueColumns('" + #GRIDID$ + "','" + columns! + "');")
        list! = Arrays.asList(columns!.split(","))
        it! = list!.iterator()
        WHILE (it!.hasNext())
            next! = cvs(it!.next(),128)
            #getColumn(next!).setEnableValue(0)
        WEND
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumnGroup addColumnGroup(BBjGridExWidgetColumnGroup definition!)
        methodret #getColumnsManager().addColumnGroup(definition!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumnGroup addColumnGroup(BBjString id!)
        methodret #getColumnsManager().addColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumnGroup addColumnGroup(BBjString id! , BBjString label!)
        methodret #getColumnsManager().addColumnGroup(id!,label!)
    methodend
    rem /**
    rem  * Add column group
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem * @param BBjString id! The group id
    rem * @param BBjString label! The group label/name
    rem * @param BBjVector columns! Vector of columns ids/fields to use
    rem * @param BBjNumber marryChildren! Set to 'true' to keep columns in this group beside each other in the grid.
    rem *                                 Moving the columns outside of the group (and hence breaking the group) is not allowed.
    rem * @param BBjString headerClass!  A CSS class to apply
    rem *
    rem * @return BBjGridExWidgetColumnGroup The BBjGridExWidgetColumnGroup instance
    rem */
    method public BBjGridExWidgetColumnGroup addColumnGroup(BBjString id! , BBjString label! ,  BBjVector columns! , BBjNumber marryChildren! ,BBjString headerClass! )
        declare BBjGridExWidgetColumnGroup definition!

        definition! = new BBjGridExWidgetColumnGroup(id! , label!)
        definition!.setMarryChildren(marryChildren!)
        definition!.getHeaderClass().add(headerClass!)
        columnsLength! = columns!.size() - 1
        FOR i = 0 TO columnsLength!
            current$ = columns!.get(i)
            column! = null()

            if(#hasColumn(current$)) then
                column! = #getColumn(current$)
            else
                column! = #addColumn(current$,current$)
            FI

            definition!.addColumn(column!)
            #removeColumn(current$)
        NEXT i

        methodret #addColumnGroup(definition!)
    methodend
    rem /**
    rem  * Group Vector of Columns
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem * @param BBjString id! The group id
    rem * @param BBjString label! The group label/name
    rem * @param BBjVector columns! Vector of columns ids/fields to use
    rem * @param BBjNumber marryChildren! Set to 'true' to keep columns in this group beside each other in the grid.
    rem *                                 Moving the columns outside of the group (and hence breaking the group) is not allowed.
    rem  *
    rem  * @return BBjGridExWidgetColumnGroup The BBjGridExWidgetColumnGroup instance
    rem */
    method public BBjGridExWidgetColumnGroup addColumnGroup(BBjString id!, BBjString label! , BBjVector columns! , BBjNumber marryChildren!)
        methodret #addColumnGroup(id!,label!,columns! , marryChildren! ,  "" )
    methodend
    rem /**
    rem  * Group Vector of Columns
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem * @param BBjString id! The group id
    rem * @param BBjString name! The group label/name
    rem * @param BBjVector columns! Vector of columns ids/fields to use
    rem  *
    rem  * @return BBjGridExWidgetColumnGroup The BBjGridExWidgetColumnGroup instance
    rem */
    method public BBjGridExWidgetColumnGroup addColumnGroup(BBjString id! , BBjString label!, BBjVector columns!)
        methodret #addColumnGroup(id!,label! , columns! , 1  , "" )
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumnGroup getColumnGroup(BBjString id!)
        methodret #getColumnsManager().getColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjNumber hasColumnGroup(BBjString id!)
        methodret #getColumnsManager().hasColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public BBjGridExWidgetColumnGroup removeColumnGroup(BBjString id!)
        methodret #getColumnsManager().removeColumnGroup(id!)
    methodend
    rem /**
    rem  * {@inheritDoc}
    rem  */
    method public void resetAllColumns()
        #getColumnsManager().resetAllColumns()
    methodend
    rem /**
    rem  * Alais for <i>resetAllColumns()</i>
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#ColumnsRerender</small></b>
    rem  *
    rem  * @see resetAllColumns()
    rem  */
    method public void clearColumnDefinitions()
        #resetAllColumns()
    methodend
    rem /**
    rem  * Build the grid json configuration object
    rem  *
    rem  * @return JsonObject The grid options as JsonObject
    rem  */
    method public JsonObject getAsJsonObject()
        REM build the column definition
        iterator! = #getColumnsManager().getColumns().entrySet().iterator()
        cdef! = new JsonArray()
        while iterator!.hasNext()
            next!   = iterator!.next()
            key!   = next!.getKey()
            value! = next!.getValue()
            cdef!.add(value!.getAsJsonObject())
        wend

        options! = #getOptions().getAsJsonObject()
        rem Columns options
        rem ===========================
        options!.        add("columnDefs",cdef!)
        rem Context
        rem ===========================
        context! = options!.get("context").getAsJsonObject()
        context!.addProperty("id",#GRIDID$)
        context!.addProperty("interests",iff(#getInterests().size() <> 0 ,new Gson().toJson(#getInterests()), listIsEmpty!) ,err=*next)
        context!.addProperty("getRowNodeId",#RowNodeId$, err=*next)

        if(#getOptions().getEnableCharts() <> null() and #getOptions().getEnableCharts() = 1) then
            context!.addProperty("chartToolbarItems",new Gson().toJson(#getChartToolbarItems()), err=*next)
        FI

        methodret options!
    methodend
    rem /**
    rem  * Render the grid
    rem  *
    rem  * The method will compose the grid config and send it to the client for a full rerender.
    rem  * You can use this method to force the client render after you update a setup configuration (ex: column definitions)
    rem  */
    method public void render()
        if(#getOptions().getBlockRenderToReady() = 1) then
            if(!#IsReady!) then
                methodret
            FI
        FI

        gson! = new Gson()
        options! = #getAsJsonObject()
        data$ = #getRS().toJson(1 , #getRowNodeId())
        #executeScript("gw_init(" + gson!.toJson(options!) + ",'" + #LicenseKey$ + "'," + data$ + ")")
    methodend
    rem /**
    rem  * Rerender the column definitions on the client.
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * The method will collect the new changes in columns and column groups and force the client to reflect the
    rem  * change.
    rem  */
    method public void updateColumns()
        definition! = #getAsJsonObject().get("columnDefs").getAsJsonArray()
        #executeScript("gw_setColumnDefinitions('" + #GRIDID$ + "'," + new Gson().toJson(definition!) + ")")
    methodend
    rem /**
    rem  * Build the column definitions from the passed resultset
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  *
    rem  * @param BBjNumber addAll! When true, We will create a column definition for every column in the resultset, otherwise update the existing ones only
    rem  */
    method public void buildColumnsFromResultSet(ResultSet rs! , BBjNumber addAll!)
        if rs! <> NULL() then
            fields!   = rs!.getColumnNames()
            iterator! = fields!.iterator()
            while iterator!.hasNext()
                field$ = iterator!.next()
                meta! = rs!.getColumnMetaData(field$)

                if #hasColumn(field$) = 1 then
                    #getColumn(field$).update(meta! , #getOptions().getDefaultColumnDefinition())
                else
                    if(addAll! = 1) then
                        definition! = new BBjGridExWidgetColumn(field$)
                        definition!.update(meta!, #getOptions().getDefaultColumnDefinition())
                        #addColumn(definition!)
                    FI
                FI
            wend
        FI
    methodend
    rem /**
    rem  * Feed the grid with data
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  * @param BBjNumber render! When true the grid will render directly on the client, otherwise you need to call <b>render()</b> directly
    rem  * @param BBjNumber addAll! When true, We will create a column definition for every column in the resultset, otherwise update the existing ones only
    rem  * @param BBjString indexdBy$ The field used for creating the unique row index
    rem  *
    rem  * @see render()
    rem  */
    method public void setData(ResultSet rs!,BBjNumber render! , BBjNumber addAll! , BBjString indexdBy$)
        #RowNodeId$ = indexdBy$
        #RS! = rs!

        if rs! <> NULL() then
            #buildColumnsFromResultSet(rs!,addAll!)
            #RS!.createIndex()
        FI

        if(render! = 1) then
            #render()
        FI
    methodend
    rem /**
    rem  * Feed the grid with data
    rem  *
    rem  * The method will sync the result set column definitions with the current column definitions ,
    rem  * update the data and render the grid on the client
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  * @param BBjNumber render! When true the grid will render directly on the client, otherwise you need to call <b>render()</b> directly
    rem  * @param BBjNumber addAll! When true, We will create a column definition for every column in the resultset, otherwise update the existing ones only
    rem  *
    rem  * @see render()
    rem  */
    method public void setData( ResultSet rs! , BBjNumber render!, BBjNumber all!)
        #setData(rs! , render! , all! , #getRowNodeId())
    methodend
    rem /**
    rem  * Feed the grid with data
    rem  *
    rem  * The method will sync the result set column definitions with the current column definitions ,
    rem  * update the data and render the grid on the client
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  * @param BBjNumber render! When true the grid will render directly on the client, otherwise you need to call <b>render()</b> directly
    rem  *
    rem  * @see render()
    rem  */
    method public void setData( ResultSet rs! , BBjNumber render!)
        #setData(rs! , render! , 1 , #getRowNodeId())
    methodend
    rem /**
    rem  * Feed the grid with data
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  * @param BBjString indexdBy$ The field used for creating the unique row index
    rem  */
    method public void setData(ResultSet rs!, BBjString indexdBy$)
        #setData(rs! , 1 , 1 , indexdBy$)
    methodend
    rem /**
    rem  * Feed the grid with data
    rem  *
    rem  * The method will sync the result set column definitions with the current column definitions ,
    rem  * update the data and render the grid on the client
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  */
    method public void setData( ResultSet rs!)
        #setData(rs! , 1)
    methodend
    rem /**
    rem  * Feed the grid with a new rows set
    rem  *
    rem  * Unlike the <b>setData</b> method, this one will update the grid with a new rows set(ResultSet) without doing a full rerender&#183;
    rem  * The column definition will not be synced from the passed ResultSet in this case&#183;
    rem  *
    rem  * Use this method in case you want to replace the whole data in the grid at once&#183;
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param ResultSet rs! ResultSet with the data
    rem  *
    rem  * @see setData()
    rem  */
    method public void setRowsData(ResultSet rs!)
        #RS! = rs!

        if rs! <> NULL() AND rs!.size() > 0 then
            #RS!.createIndex(err=*next)
            data$=#RS!.toJson(BBjAPI.TRUE,#getRowNodeId())
            #executeScript("gw_setRowsData('" + #GRIDID$ + "'," + data$+ ")")
        FI
    methodend
    rem /**
    rem  * Update row data
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber index! The Row index
    rem  * @param DataRow row! DataRow object which contains the update
    rem  */
    method public void setRowData(BBjNumber index!,DataRow row!)
        if #RS!.count() <> 0 then
            #RS!.set(index!,row!)
            REM toJsonObject is available in basiscomponents.jar >= BBj 19.00
            REM FIXME as soon as we release a version that has >=19.00 as a dependency, clean this up
            if com.basiscomponents.VersionInfo.getBBjBuildID() >= "1555708604" then
                #executeScript("gw_setRowData('"+ #GRIDID$ + "'," + row!.toJsonObject(1,#getRowNodeId(),0) +")")
            else
                parser! = new JsonParser()
                #executeScript("gw_setRowData('"+ #GRIDID$ + "'," + parser!.parse(row!.toJson(#getRowNodeId())).getAsJsonArray().get(0).toString()  +")")
            FI
        FI
    methodend
    rem /**
    rem  * Add new row
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber index! The insert index
    rem  * @param DataRow row! DataRow object which contains the update
    rem  */
    method public void addRow(BBjNumber index!,DataRow row!)
        #RS!.add(index! , row!)
        REM toJsonObject is available in basiscomponents.jar >= BBj 19.00
        REM FIXME as soon as we release a version that has >=19.00 as a dependency, clean this up
        if com.basiscomponents.VersionInfo.getBBjBuildID()>="1555708604" then
            #executeScript("gw_setRowData('"+ #GRIDID$ + "'," + row!.toJsonObject(1,#getRowNodeId(),0) +")")
        else
            parser! = new JsonParser()
            #executeScript("gw_addRows('" + #GRIDID$ + "'," + str(index!) +",[" + parser!.parse(row!.toJson(#getRowNodeId())).getAsJsonArray().get(0).toString() +"])")
        FI
    methodend
    rem /**
    rem  * Add new row
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param DataRow row! The DataRow object which contains the update
    rem  */
    method public void addRow(DataRow row!)
        #RS!.add(row!)
        REM toJsonObject is available in basiscomponents.jar >= BBj 19.00
        REM FIXME as soon as we release a version that has >=19.00 as a dependency, clean this up
        if com.basiscomponents.VersionInfo.getBBjBuildID()>="1555708604" then
            #executeScript("gw_setRowData('"+ #GRIDID$ + "'," + row!.toJsonObject(1,#getRowNodeId(),0) +")")
        else
            parser! = new JsonParser()
            #executeScript("gw_addRows('" + #GRIDID$ +"',null,[" + parser!.parse(row!.toJson(#getRowNodeId())).getAsJsonArray().get(0).toString() +"])")
        FI
    methodend
    rem /**
    rem  * Remove a row from grid by index
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber index! The row index
    rem  */
    method public void removeRow(BBjNumber index!)
        if #RS!.count() <> 0 then
            if #RowNodeId$ <> "__ROW_INDEX" then
                value! = #RS!.getItem(index!).getFieldAsString(#getRowNodeId())
            else
                value! = #RS!.getItem(index!).getRowKey()
            FI

            #RS!.remove(index!)
            #executeScript("gw_removeRows('" + #GRIDID$ + "',['" + str(value!)  +"'])")
        FI
    methodend
    rem /**
    rem  * Remove a row from grid by key
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString key! The row key
    rem  */
    method public void removeRow(BBjString key!)
        if #RS!.count() <> 0 then
            #RS!.remove(key!)
            #executeScript("gw_removeRows('" + #GRIDID$ + "',['" + key! +"'])")
        FI
    methodend    
    rem /**
    rem  * Clear row data (Empty the grid )
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void clearRowsData()
        #RS! = new ResultSet()
        #RS!.createIndex(err=*next)
        #executeScript("gw_setRowsData('" + #GRIDID$ + "', [])")
    methodend
    rem /**
    rem  * Apply columns state
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjGridExWidgetState state! : the state object
    rem  */
    method public void setColumnState(BBjGridExWidgetState state!)
        #executeScript("gw_setState('" + #GRIDID$ + "'," + state!.toString() +")")
    methodend
    rem /**
    rem  * Get Column state
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @returns BBjGridExWidgetState
    rem  */
    method public BBjGridExWidgetState getColumnState()
        state! = new BBjGridExWidgetState()
        json_string$ = str(#HTMLView!.executeScript("gw_getState('" + #GRIDID$ + "')"))
        state!.setString(json_string$)
        methodret state!
    methodend
    rem /**
    rem  * Get the grid sidebar instance
    rem  *
    rem  * @return BBjGridExWidgetSidebar
    rem  */
    method public BBjGridExWidgetSidebar getSidebar()
        methodret #getOptions().getSidebar()
    methodend
    rem /**
    rem  * Get the language manager instance
    rem  *
    rem  * @returns BBjGridExWidgetLanguageManager
    rem  */
    method public BBjGridExWidgetLanguageManager getLanguageManager()
        methodret #getOptions().getLanguageManager()
    methodend
    rem /**
    rem  * Get the grid statusbar instance
    rem  *
    rem  * @return BBjGridExWidgetStatusBar
    rem  */
    method public BBjGridExWidgetStatusBar getStatusbar()
        methodret #getOptions().getStatusbar()
    methodend
    rem /**
    rem  * Get the grid default context menu
    rem  *
    rem  * @return BBjGridContextMenu
    rem  */
    method public BBjGridContextMenu getContextMenu()
        methodret #getOptions().getContextMenu()
    methodend
    rem /**
    rem  * Get the grid's client context
    rem  *
    rem  * @return JsonObject
    rem  */
    method public JsonObject getClientContext()
        methodret #getOptions().getClientContext()
    methodend
    rem /**
    rem  * Get instance of BBjGridExWidgetClientJsonFactory
    rem  *
    rem  * @return BBjGridExWidgetClientJsonFactory
    rem  */
    method public BBjGridExWidgetClientJsonFactory getClientJsonFactory()
        methodret #ClientJsonFactory!
    methodend
    rem /**
    rem  * Add Style block
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param selector$ : Css Selector
    rem  * @param rules! : Css Rules object as json object
    rem  */
    method public void addStyle(BBjString selector$ , JsonObject rules! )
        #executeScript("gw_setStyle('" + selector$ + "','" + rules!.toString() + "')")
    methodend
    rem /**
    rem  * Add Style block
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param selector$ : Css Selector
    rem  * @param rules! : Css Rules object as string
    rem  */
    method public void addStyle(BBjString selector$ , BBjString rules! )
        #executeScript("gw_setStyle('" + selector$ + "','" + rules! + "')")
    methodend
    rem /**
    rem  * Remove Style Block
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param selector$ : Css Selector
    rem  */
    method public void removeStyle(BBjString selector$)
        #executeScript("gw_removeStyle('" + selector$ + "')")
    methodend
    rem /**
    rem  * Set the grid theme
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString theme$
    rem  *
    rem  * @see getThemes()
    rem  */
    method public void setTheme(BBjString theme$)
        #getOptions().setTheme(theme$)

        if(#IsReady!) then
            if info(3,6)="5" then
                s$="$doc.getElementById('" + str(#GRIDID$) + "').className='ag-theme-"+theme$+"';"
            else
                s$="document.getElementById('" + str(#GRIDID$) + "').className='ag-theme-"+theme$+"';"
            FI

            #executeScript(s$)
        else
            template! = #getTemplate()
            #HTMLView!.setText(template!)
        FI
    methodend
    rem /**
    rem  * Get the grid supported themes
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @return BBjVector array of theme names
    rem  */
    method public BBjVector getThemes()
        v! = new BBjVector()
        v!.addItem("balham")
        v!.addItem("balham-dark")
        v!.addItem("dark")
        v!.addItem("fresh")
        v!.addItem("blue")
        v!.addItem("bootstrap")
        v!.addItem("material")
        methodret v!
    methodend
    rem /**
    rem  * Enable a chart toolbar item
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @see CHART_TOOLBAR_SETTINGS()
    rem  * @see CHART_TOOLBAR_DATA()
    rem  * @see CHART_TOOLBAR_FORMAT()
    rem  * @see CHART_TOOLBAR_DOWNLOAD()
    rem  */
    method public void addChartToolbarItem(BBjString item!)
        #ChartToolbarItems!.add(item!)

        if(#IsReady! and (#getOptions().getEnableCharts() <> null() and #getOptions().getEnableCharts() = 1)) then
            #executeScript("gw_updateContext('" + #GRIDID$ + "', 'chartToolbarItems','" + new Gson().toJson(#getChartToolbarItems()) + "')")
        FI
    methodend
    rem /**
    rem  * Disable a chart toolbar item
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @see CHART_TOOLBAR_SETTINGS()
    rem  * @see CHART_TOOLBAR_DATA()
    rem  * @see CHART_TOOLBAR_FORMAT()
    rem  * @see CHART_TOOLBAR_DOWNLOAD()
    rem  */
    method public void removeChartToolbarItem(BBjString item!)
        if #ChartToolbarItems!.contains(item!) then
            #ChartToolbarItems!.remove(item!)
        FI

        if(#IsReady! and (#getOptions().getEnableCharts() <> null() and #getOptions().getEnableCharts() = 1)) then
            #executeScript("gw_updateContext('" + #GRIDID$ + "', 'chartToolbarItems','" + new Gson().toJson(#getChartToolbarItems()) + "')")
        FI
    methodend
    rem /**
    rem  * Set the focus on the given row id and the given column
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  * @param BBjString row! The row id
    rem  * @param BBjStrinf column! The column id
    rem  */
    method public void focus(BBjString row! , BBjString column!)
        #super!.focus()
        script$="gw_setFocusedCell('" + #GRIDID$ + "','" + str(row!) + "','" + str(column!) + "');"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Set the focus on the given row id and the given column
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber row! The row id
    rem  * @param BBjStrinf column! The column id
    rem  */
    method public void focus(BBjNumber row! , BBjString column!)
        #focus(str(row!) , column!)
    methodend
    rem /**
    rem  * Set the focus on the given row id and the first column
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString row! The row id
    rem  */
    method public void focus(BBjString row!)
        #focus(str(row!) , "")
    methodend
    rem /**
    rem  * Set the focus on the given row id and the first column
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber row! The row id
    rem  */
    method public void focus(BBjNumber row!)
        #focus(str(row!))
    methodend
    rem /**
    rem  * Will set the focus on the first cell of the first row
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void focus()
        #focus(0)
    methodend
    rem /**
    rem  * select all rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void selectAll()
        script$="gw_selectAll('" + #GRIDID$ + "',0);"
        #executeScript(script$)
    methodend
    rem /**
    rem  * select all rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBJNumber x!: 0 select all, 1 select all filtered
    rem  */
    method public void selectAll(BBjNumber x!)
        #deselectAll()
        script$="gw_selectAll('" + #GRIDID$ + "'," + str(x!) + ");"
        #executeScript(script$)
    methodend
    rem /**
    rem  * deselect all rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void deselectAll()
        script$="gw_deselectAll('" + #GRIDID$ + "',0);"
        #executeScript(script$)
    methodend
    rem /**
    rem  * deselect all rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBJNumber x!: 0 deselect all, 1 deselect all filtered
    rem  */
    method public void deselectAll(BBjNumber x!)
        script$="gw_deselectAll('"+ #GRIDID$ + "'," + str(x!) + ");"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Select a row
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBJNumber x!: the row index to select
    rem  */
    method public void setSelectedRow(BBjNumber x!)
        script$="gw_setSelectedRows('" + #GRIDID$ + "',[" + str(x!) + "]);"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Select verctor of rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBJNumber x!: vector of row indices to select
    rem  */
    method public void setSelectedRows(BBjVector x!)
        script$="gw_setSelectedRows('" + #GRIDID$ + "',["
        it! = x!.iterator()
        first=1
        while it!.hasNext()
            if first
                first=0
            else
                script$=script$+","
            FI

            script$=script$+str(it!.next())
        wend

        script$=script$+"]);"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Expand all groups
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void expandAll()
        script$="gw_expandAll('" + #GRIDID$ +"');"
        #executeScript(script$)
    methodend
    rem /**
    rem  * collapse all groups
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void collapseAll()
        script$="gw_collapseAll('" + #GRIDID$ +"');"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Set visible row
    rem  *
    rem  * Ensures the row index is visible by vertically scrolling the grid&#183;
    rem  * The valid values for positions are {'top', 'middle', 'bottom'}&#183;
    rem  * If top, middle or bottom, the grid will scroll the row to place the row at top, middle or bottom
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber index!: the row index
    rem  * @param BBjString position!: the scrolling position
    rem  *
    rem  * @see GRID_ROWPOS_TOP()
    rem  * @see GRID_ROWPOS_MIDDLE()
    rem  * @see GRID_ROWPOS_BOTTOM()
    rem  */
    method public void setVisibleRow(BBjNumber index! , BBjString position!)
        script$="gw_setVisibleRow('" + #GRIDID$ + "'," + str(index!) + ",'" + str(position!) +"');"
        #executeScript(script$)
    methodend
    rem /**
    rem  * Set visible column&#183; Ensures the column is visible, scrolling the table if needed&#183;
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBJString columnid!: the column id
    rem  */
    method public void setVisibleColumn(BBjString columnId!)
        script$="gw_setVisibleColumn('" + #GRIDID$ +  "','" + columnId! + "');"
        #executeScript(script$)
    methodend
    rem /**
    rem  * set the grid to scroll horizontally or fit into the client area
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void setFitToGrid()
        ret! = #executeScript("gw_sizeColumnsToFit('" + #GRIDID$ +"')")
    methodend
    rem /**
    rem  * setSize - set the size of the control
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber w! - width
    rem  * @param BBjNumber h! - height
    rem  */
    method public void setSize(BBjNumber w!, BBjNumber h!)
        rem if setSize is called before the page is ready, delay its execution
        if #IsReady! then
            #super!.setSize(w!,h!)
        else
            rem cheat with the superclass so getWidth / getHeight already return the later size
            #super!.setW(w!)
            #super!.setH(h!)
            #newW! = w!
            #newH! = h!
        FI
    methodend
    rem /**
    rem  * Set all rows height
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber height! - the new row height
    rem  */
    method public void setRowHeight(BBjNumber height!)
        #getOptions().setRowHeight(height!)
        #executeScript("gw_setRowsHeight('" + #GRIDID$ + "'," + str(height!) + ")")
    methodend
    rem /**
    rem  * Set the given row height
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber index! - the row index
    rem  * @param BBjNumber height! - the new row height
    rem  */
    method public void setRowHeight(BBjNumber index!, BBjNumber height!)
        #executeScript("gw_setRowHeight('" + #GRIDID$ + "'," + str(index!) + "," + str(height!) + ")")
    methodend
    rem /**
    rem  * Enable / disable pivot mode
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber mode! when true, the pivot mode will be enabled, disabled otherwise
    rem  */
    method public void setPivotMode(BBjNumber mode!)
        #getOptions().setPivotMode(mode!)

        if(#IsReady!) then
            #executeScript("gw_setPivotMode('" + #GRIDID$ + "'," + str(mode!) + ")")
        FI
    methodend
    rem /**
    rem  * Check if pivot mode is enabled or disabled
    rem  *
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @return BBjNumber 1 when pivot mode is enabled, 0 otherwise
    rem  */
    method public BBjNumber getPivotMode()
        if(#IsReady!) then
            mode! = #executeScript("gw_getPivotMode('" + #GRIDID$ + "'," + str(mode!) + ")")
            #getOptions().setPivotMode(num(mode!))
        FI

        methodret #getOptions().getPivotMode()
    methodend
    rem /**
    rem  * Perform throw columns search
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber filter : filter as a string
    rem  */
    method public void setQuickFilter(BBjNumber filter)
        #executeScript("gw_setQuickFilter('" + #GRIDID$ + "'," + str(filter) +")")
    methodend
    rem /**
    rem  * Perform throw columns search
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber filter : filter as number
    rem  */
    method public void setQuickFilter(BBjString filter!)
        #executeScript("gw_setQuickFilter('" + #GRIDID$ + "','" + filter! +"')")
    methodend
    rem /**
    rem  * Start Next Cell Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void moveToNextCell()
        #executeScript("gw_editNextCell('"+ #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Move to previous cell
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void moveToPreviousCell()
        #executeScript("gw_editPreviousCell('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Start Cell Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber row!: The row number
    rem  * @param BBjString colId!: The column ID
    rem  */
    method public void setStartCellEditing(BBjNumber row! , BBjString colId$)
        #executeScript("gw_startEditingCell('" + #GRIDID$ + "',"+ STR(row!)+ ",'" + colId$ + "')")
    methodend
    rem /**
    rem  * Start Cell Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber row!: The row number
    rem  * @param BBjString colId$: The column ID
    rem  * @param BBjNumber char$: key chars to press on editors when editors support it
    rem  */
    method public void setStartCellEditing(BBjNumber row! , BBjString colId$, BBjString char$)
        #executeScript("gw_startEditingCell('" + #GRIDID$ + "',"+ STR(row!)+ ",'" + colId$ + "','','" + char$ +"')")
    methodend
    rem /**
    rem  * Start Cell Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber row!: The row number
    rem  * @param BBjString colId$: The column ID
    rem  * @param BBjNumber key!: key codes to press on editors when editors support it
    rem  */
    method public void setStartCellEditing(BBjNumber row! , BBjString colId$,BBjNumber key!)
        #executeScript("gw_startEditingCell('" + #GRIDID$ + "',"+ STR(row!)+ ",'" + colId$ + "','" + STR(key!)+ "')")
    methodend
    rem /**
    rem  * Start next Cell Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void startNextCellEditing()
        #executeScript("gw_editNextCell('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Start previous Cell Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void startPreviousCellEditing()
        #executeScript("gw_editPreviousCell('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Stop editing and accepts changes
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void stopEditing()
        #executeScript("gw_stopEditing('" + #GRIDID$ + "',0)")
    methodend
    rem /**
    rem  * Stop Editing
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber cancel!: 1 = discard changes, 0 = accept changes
    rem  */
    method public void stopEditing(BBjNumber cancel!)
        #executeScript("gw_stopEditing('"+ #GRIDID$ + "'," + STR(cancel!)+ ")")
    methodend
    rem /**
    rem  * If true, then row group, pivot and value aggregation will be read only from the Ui&#183;
    rem  * The grid will display what values are used for each, but will not allow the use to change the selection
    rem  *
    rem  * <br><b><small>#Enterprise</small></b>
    rem  * <br><b><small>#Configuration</small></b>
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjNumber readonly! when true disable, enable otherwise
    rem  */
    method public void setFunctionsReadOnly(BBjNumber readonly!)
        #getOptions().setFunctionsReadOnly(readonly!)
        #executeScript("gw_setFunctionsReadOnly('" + #GRIDID$ + "'," + str(readonly!) +")")
    methodend
    rem /**
    rem  * Get the current selected row
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @return BBjGridExWidgetClientRowModel The selected row if any, null() otherwise
    rem  */
    method public BBjGridExWidgetClientRowModel getSelectedRow()
        returnedRow! = #executeScript("gw_getSelectedRow('" + #GRIDID$ + "')")
        if returnedRow!<>null() and len(returnedRow!) > 0 then
            methodret #getClientJsonFactory().getRow(returnedRow!)
        FI

        methodret null()
    methodend
    rem /**
    rem  * Get Array of selected rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @return BBjVector A vector filled with the selected rows
    rem  */
    method public BBjVector getSelectedRows()
        rows! = new BBjVector()

        if (#getRS() = null()) then
            goto getSelectedRowsErr
        FI

        returnedRows! = #executeScript("gw_getSelectedRows('" + #GRIDID$ + "')")
        if returnedRows! = null() then
            goto getSelectedRowsErr
        FI

        parser! = new JsonParser()
        array! = parser!.parse(returnedRows!).getAsJsonArray()
        it! = array!.iterator()
        while (it!.hasNext())
            next! = it!.next().getAsJsonObject(err=getSelectedRowsErr)
            rows!.add(#getClientJsonFactory().getRow(next!))
        wend

        getSelectedRowsErr:
            methodret rows!
    methodend
    rem /**
    rem  * The method will return a vector of the selected ranges including columns and rows
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @return BBjVector
    rem  */
    method public BBjVector getRangeSelections()
        rem an array to save the parsed range selections
        rangeSelectionVector! = new BBjVector()
        rem get the range selections from the client
        rem the client will return an array of objects where each object is a range
        rangeSelections! = #executeScript("gw_getRangeSelections('" + #GRIDID$ + "')")

        if (rangeSelections! = "[]") then
            goto getSelectionRangeErr
        FI
        rem iterate throw the ranges array and parse the range objects
        parser! = new JsonParser()
        ranges! = parser!.parse(rangeSelections!).getAsJsonArray()
        rangesIterator! = ranges!.iterator()
        while (rangesIterator!.hasNext())
            model! = #getClientJsonFactory().getRangeSelection(rangesIterator!.next().getAsJsonObject())
            rangeSelectionVector!.addItem(model!)
        wend

        getSelectionRangeErr:
            methodret rangeSelectionVector!
    methodend
    rem /**
    rem  * Add new range selection
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjGridExWidgetClientAddRangeSelectionModel model! the add selection model
    rem  *
    rem  * @return BBjGridExWidgetClientAddRangeSelectionModel
    rem  */
    method public BBjGridExWidgetClientAddRangeSelectionModel addRangeSelection(BBjGridExWidgetClientAddRangeSelectionModel model!)
        #executeScript("gw_addCellRange('" + #GRIDID$ + "'," + model!.getAsJsonObject().toString() + ")")
        methodret model!
    methodend
    rem /**
    rem  * Add new range selection
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! columns as comma separated string (ex: CDNUMBER, COST)
    rem  * @param BBjString start! start row id or index
    rem  * @param BBjString end! end row id or index
    rem  *
    rem  * @return BBjGridExWidgetClientAddRangeSelectionModel
    rem  */
    method public BBjGridExWidgetClientAddRangeSelectionModel addRangeSelection(BBjString columns! , BBjString start! , BBjString end!)
        model! = new BBjGridExWidgetClientAddRangeSelectionModel()
        model!.setColumns(columns!)
        model!.setStart(start!)
        model!.setEnd(end!)
        methodret #addRangeSelection(model!)
    methodend
    rem /**
    rem  * Add new range selection
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! columns as comma separated string (ex: CDNUMBER, COST)
    rem  * @param BBjNumber start! start row id or index
    rem  * @param BBjNumber end! end row id or index
    rem  *
    rem  * @return BBjGridExWidgetClientAddRangeSelectionModel
    rem  */
    method public BBjGridExWidgetClientAddRangeSelectionModel addRangeSelection(BBjString columns! , BBjNumber start! , BBjNumber end!)
        methodret #addRangeSelection(columns! , str(start!),str(end!))
    methodend
    rem /**
    rem  * Add new range selection
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjString columns! columns as comma separated string (ex: CDNUMBER, COST)
    rem  *
    rem  * @return BBjGridExWidgetClientAddRangeSelectionModel
    rem  */
    method public BBjGridExWidgetClientAddRangeSelectionModel addRangeSelection(BBjString columns!)
        methodret #addRangeSelection(columns!,null() , null())
    methodend
    rem /**
    rem  * Clears the selected range.
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void clearRangeSelection()
        #executeScript("gw_clearRangeSelection('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Clear already created charts&#183;
    rem  * <b>Note</b> that this method does not clear user created charts
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  *
    rem  * @param BBjGridExWidgetClientAddRangeChartModel model! the add range model
    rem  * @return BBjString A unique id for the created chart
    rem  */
    method public BBjString addRangeChart(BBjGridExWidgetClientAddRangeChartModel model!)
        uuid! = #executeScript("gw_addChartRange('" + #GRIDID$ + "'," + model!.getAsJsonObject().toString() + ")")
        methodret str(uuid!)
    methodend
    rem /**
    rem  * Clear already created chart by its id
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  * Note that this method does not clear user created charts
    rem  *
    rem  * @param BBjString id! the chart's id to destroy
    rem  */
    method public void clearChart(BBjString id!)
        #executeScript("gw_destroyChart('" + #GRIDID$ + "','" + str(id!) + "')")
    methodend
    rem /**
    rem  * Clear already created charts&#183;
    rem  * <b>Note</b> that this method does not clear user created charts
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void clearChart()
        #executeScript("gw_destroyChart('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Show loading overlay
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void showLoadingOverlay()
        #executeScript("gw_showLoadingOverlay('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Show 'no rows' overlay
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void showNoRowsOverlay()
        #executeScript("gw_showNoRowsOverlay('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Clear all overlays
    rem  *
    rem  * <br><b><small>#API</small></b>
    rem  */
    method public void hideOverlay()
        #executeScript("gw_hideOverlay('" + #GRIDID$ + "')")
    methodend
    rem /**
    rem  * Destroy the grid
    rem  */
    method public void destroy()
        #super!.destroy()
        #IsReady! = BBjAPI.FALSE
        #backlog! = new BBjVector()
    methodend
    rem /**
    rem  * Fires an event
    rem  *
    rem  * @param Int type! The event's type
    rem  * @param Object payload! The event's payload
    rem  *
    rem  * @Override
    rem  */
    method protected void fireEvent(int type!, Object payload!)
        if(#getInterests().contains(type!)) then
            #super!.fireEvent(type!,payload!)
        FI
    methodend
    rem /**
    rem  * Send the current interests to the client
    rem  */
    method protected void updateClientWithInterests()
        #executeScript("gw_updateContext('" + #GRIDID$ + "', 'interests','" + new Gson().toJson(#getInterests()) + "')")
    methodend
    rem /**
    rem  * The method will add the default chart toolbar items
    rem  */
    method protected void fillChartToolbarItems()
        #getChartToolbarItems().add(#CHART_TOOLBAR_SETTINGS())
        #getChartToolbarItems().add(#CHART_TOOLBAR_DATA())
        #getChartToolbarItems().add(#CHART_TOOLBAR_FORMAT())
        #getChartToolbarItems().add(#CHART_TOOLBAR_DOWNLOAD())
    methodend
    rem /**
    rem  * Get the grid template
    rem  *
    rem  * @return BBjString parsed html template
    rem  */
    method protected BBjString getTemplate()
        html$ = #Template$

        if(len(html$) = 0) then
            ch=unt
            open (ch)"BBjGridExWidget/client/index.html"
            read record (ch,siz=5512000)html$
            close (ch)
        FI

        html! = html$
        html! = html!.replaceAll("__id__" , #GRIDID$)
        html! = html!.replaceAll("__lang__", #getLanguageManager().getLanguage())
        html! = html!.replaceAll("__THEME__", "ag-theme-" + #getOptions().getTheme())
        methodret html!
    methodend

    method protected void handleStateChangedEvent(BBjString detail$, BBjNumber type!)
        event! = #getColumnState()
        #fireEvent(type!, event!)
    methodend
    rem /**
    rem  * Handle Range Selections Event
    rem  *
    rem  * @see BBjGridExWidgetClientEventsRangeSelection
    rem  */
    method private void onRangeSelectionChange(BBjString detail$)
        event! = new BBjGridExWidgetClientEventsRangeSelection()
        #fireEvent(#ON_GRID_RANGE_SELECTION_CHANGED(),event!)
    methodend
    rem /**
    rem  * On rows selections event
    rem  *
    rem  * Parse the json details coming from the client and fires new BBjGridExWidgetSelectRowEvent
    rem  *
    rem  * @see BBjGridExWidgetSelectRowEvent
    rem  */
    method protected void onSelecteRowChange(BBjString detail$, BBjString type$)
        declare BBjGridExWidgetClientEventsRowSelection event!

        event! = new BBjGridExWidgetClientEventsRowSelection()
        event!.setSelectedRows(#getSelectedRows())

        if type$ = "single" then
            #fireEvent(#ON_GRID_SELECT_ROW(),event!)
            methodret
        FI

        #fireEvent(#ON_GRID_DOUBLE_CLICK(), event!)
    FI
    methodend
    rem /**
    rem  * On context menu event
    rem  *
    rem  * @param BBjString detail$ The event response
    rem  */
    method protected void onContextmenuEvent(BBjString detail$)
        declare JsonParser parser!

        parser! = new JsonParser()
        parsedCell!  = parser!.parse(detail$).getAsJsonObject()
        cell! = #getClientJsonFactory().getCell(parsedCell!)
        event! = new BBjGridExWidgetClientEventsContextMenu()
        event!.setCell(cell!)
        #fireEvent(parsedCell!.get("i").getAsInt(),event!)
    methodend
    rem /**
    rem  * On cell Event. handles cell clicking and editing events
    rem  *
    rem  * @param BBjString detail$ The event detail as Json
    rem  * @param BBjNumber type! The event type
    rem  *
    rem  * @see ON_GRID_CELL_VALUE_CHANGED()
    rem  * @see ON_GRID_CELL_DOUBLE_CLICK()
    rem  * @see ON_GRID_CELL_CLICK()
    rem  * @see ON_GRID_ROW_EDITING_STOPPED()
    rem  * @see ON_GRID_ROW_EDITING_STARTED()
    rem  */
    method protected void onCellEvent(BBjString detail$ , BBjNumber type!)
        declare JsonParser parser!

        parser! = new JsonParser()
        parsedCell!  = parser!.parse(detail$).getAsJsonObject()
        cell! = #getClientJsonFactory().getCell(parsedCell!)
        event! = new BBjGridExWidgetClientEventsCell()
        event!.setCell(cell!)
        event!.setOldValue(parsedCell!.get("o").getAsString())
        #fireEvent(type!, event!)
    methodend
    rem /**
    rem  * Fire an row editing event when row editing starts or stops
    rem  *
    rem  * @param BBjString detail$ The event detail as json
    rem  * @param BBjNumber type! The event type
    rem  *
    rem  * @see ON_GRID_ROW_EDITING_STARTED()
    rem  * @see ON_GRID_ROW_EDITING_STOPPED()
    rem  */
    method protected void onRowEditing(BBjString detail$ , BBjNumber type!)
        event! = new BBjGridExWidgetClientEventsRowEditing()
        event!.setRow(#getClientJsonFactory().getRow(detail$))
        #fireEvent(type!, event!)
    methodend
    rem /**
    rem  * Fire an keypress event when keypress is passed from the client
    rem  *
    rem  * @param BBjString detail$ The event detail as json
    rem  *
    rem  * @see ON_GRID_KEYPRESS()
    rem  */
    method protected void onKeypressEvent(BBjString detail$)
        declare JsonParser parser!

        parser! = new JsonParser()
        parsedKeypress!  = parser!.parse(detail$).getAsJsonObject()
        keypress! = #getClientJsonFactory().getKeypress(parsedKeypress!)
        event! = new BBjGridExWidgetClientEventsKeypress()
        event!.setKey(keypress!)
        #fireEvent(#ON_GRID_KEYPRESS(), event!)
    methodend

classend
