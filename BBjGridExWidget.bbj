use com.basiscomponents.db.ResultSet
use com.basiscomponents.db.DataRow
use com.basiscomponents.db.tree.DataTree
use java.sql.Types

use ::BBjWidget/BBjWidget.bbj::BBjWidget

class public BBjGridExWidgetSelectRowEvent
    
    field public BBjVector SelectedRows! = new BBjVector() 
    
    method public BBjNumber getSelectedRowCount()
        methodret #SelectedRows!.size()
    methodend
    
classend

class public BBjGridExWidgetRowDoubleClickEvent
    
    field public BBjNumber Row
    
classend

class public BBjGridExWidgetColumnState

    field public BBjString String$

classend

rem /**
rem  * A sample BBj Widget Implementation
rem  */
class public BBjGridExWidget extends BBjWidget

    field private BBjHtmlView HTMLView! 
    field private Boolean IsReady! = BBjAPI.FALSE
    field private BBjVector backlog! = new BBjVector()
    
    
    field private ResultSet RS!
    field private BBjString URL$
    field private DataTree TREE!
    field private BBjString GroupColumnLabel$ = "Group"
    
    field private BBjNumber SelectionMode 
    field private BBjNumber MultipleSelection
    field private BBjNumber FitToGrid
    field private BBjNumber EnableFilter
    
    field private DataRow ColumnDefinition!

    rem --------------------- constructors -------------------------------------
    rem /**
    rem  * disabled default constructor
    rem  */
    method private BBjGridExWidget()
    methodend

    rem /**
    rem  * The constructor that creates the widget on wnd!
    rem * @param BBjWindow wnd!: parent window
    rem * @param BBjInt id: the control ID
    rem * @param BBjInt x: x-location
    rem * @param BBjInt y: y-location
    rem * @param BBjInt w: width
    rem * @param BBjInt h: height
    rem */
    method public BBjGridExWidget(BBjWindow wnd!, BBjInt id!, BBjInt x!, BBjInt y!, BBjInt w!, BBjInt h!)
        #super!.create(wnd!,id!,x!,y!,w!,h!)
    methodend

    rem ---------------------- methods from BBjWidget --------------------------------
    rem /**
    rem  * @Override
    rem  * This method is called whenever the widget needs to be rendered
    rem  * @param Boolean f_init!: if TRUE the control is rendered for the first time so this method has to perform initial rendering
    rem  */
    method public void redraw(Boolean f_init!)
        
        declare BBjHtmlView htmlview! 
    
        if (f_init!) then
            dummy$=stbl("!OPTIONS","JAVAFX_HTMLVIEW=true")
            
            html$="<html><body><div id='eventTransporterDiv' onClick='bbj_grid_widget_post_event(event);'></div><div id=""grid"" style=""height: 100%"" class=""ag-fresh""></div></body></html>"
            htmlview! = #getCanvas().addHtmlView(101,0,0,#getCanvas().getWidth(),#getCanvas().getHeight(),html$)
            htmlview!.setCallback(BBjAPI.ON_PAGE_LOADED,#this!,"onLoad")
            htmlview!.setCallback(BBjAPI.ON_NATIVE_JAVASCRIPT,#this!,"onNativeEvent")
            htmlview!.setOpaque(0)
            
            #HTMLView!=htmlview!
            if INFO(3,6)<>"5" then
                #HTMLView!.setLocation(-9,-9)
            fi
        fi
        
        if INFO(3,6)="5" then
            #HTMLView!.setSize(#getCanvas().getWidth(),#getCanvas().getHeight())
        else
            #HTMLView!.setSize(#getCanvas().getWidth()+16,#getCanvas().getHeight()+16)
        fi
    methodend
    
    rem /**
    rem  * Event Handler for Native JavaScript Event (from the Grid)
    rem  * Determines and dispatches the actual event
    rem  * 
    rem  * @param BBjNativeJavaScriptEvent ev!: the js event
    rem  * 
    rem  */
    method public void onNativeEvent ( BBjNativeJavaScriptEvent ev!)
    
        n$=str(ev!.getEventMap())
        if pos("payload"=n$)>0 then
            N$=n$(pos("payload"=n$)+8)
            i=1
            c=0
            while i<len(n$)+1
              if n$(i,1)="{" then 
                  let c=c+1
              else
                  if n$(i,1)="}" then 
                      let c=c-1
                      if c=0 then
                          n$=n$(1,i)
                          break
                      fi
                  fi
              fi
              i=i+1
            wend
        else
            n$="{}"
        fi
        
        
        
        if pos("grid-select-row"=N$)>0 then
            fire_ev! = new BBjGridExWidgetSelectRowEvent()
            if pos("""nodes"""=n$)>0 then
                x$=n$(pos("""nodes"""=n$)+7)
                x$=x$(pos("["=x$)+1)
                x$=x$(1,pos("]"=x$)-1)
                v! = new BBjVector()
                while pos(","=x$)>0
                    x1$=x$(1,pos(","=x$)-1)
                    x$=x$(pos(","=x$)+1)
                    v!.addItem(x1$(2,len(x1$)-2))
                wend
                if (x$>"") then
                    v!.addItem(x$(2,len(x$)-2))
                fi
            fi
            fire_ev!.setSelectedRows(v!)
            #fireEvent(#ON_GRID_SELECT_ROW(),fire_ev!)
        fi
        
        if pos("grid-row-doubleclick"=N$)>0 then
            fire_ev! = new BBjGridExWidgetRowDoubleClickEvent()
            if pos("""nodes"""=n$)>0 then
                x$=n$(pos("""nodes"""=n$)+7)
                x$=x$(pos("["=x$)+1)
                x$=x$(1,pos("]"=x$)-1)
                v! = new BBjVector()
                while pos(","=x$)>0
                    x1$=x$(1,pos(","=x$)-1)
                    x$=x$(pos(","=x$)+1)
                    v!.addItem(x1$(2,len(x1$)-2))
                wend
                if (x$>"") then
                    fire_ev!.setRow(num(x$(2,len(x$)-2)))
                fi
            fi
            #fireEvent(#ON_GRID_DOUBLE_CLICK(),fire_ev!)
        fi        
    methodend

    
    method private void performGridDataUpdate()
        
        if (! #IsReady!) methodret

        if (#RS! <> null()) then
            data$=#RS!.toJson()
            cdef$=#getAgGridColumnDefinition(0)
        else
                if (#TREE! <> null()) then
                    data$=#TREE!.toJson()
                    cdef$=#getAgGridColumnDefinition(1)
                fi
        fi
       
        opt$="{   
:            'enableColResize': true,
:            'enableSorting': true,
:            'animateRows': true,
:            'enableColResize': true,
:            'allowContextMenuWithControlKey': false,"

        if (#EnableFilter)
            opt$=opt$+"'enableFilter': false,'floatingFilter': true,"
        fi

        if (#SelectionMode = BBjGrid.GRID_SELECT_ROW) then
            if (#MultipleSelection >0 )
                opt$=opt$+"'rowSelection': 'multiple',"            
            else
                opt$=opt$+"'rowSelection': 'single',"
            fi
        fi

        opt$=opt$+"'columnDefs':"+cdef$
        opt$=opt$+"}"
        
        #HTMLView!.executeScript("bbj_grid_widget_set_data("+data$+","+opt$+")")
         
    methodend 
    
   
    method private BBjString getAgGridColumnDefinition(BBjInt fGroup%)
        
        declare DataRow cd!
        cd! = #ColumnDefinition!
        if cd! = null() or cd!.getFieldNames().size()=0  then
            if #RS! <> null() and #RS!.size()>0 then
                cd! = #RS!.get(0)
            else
                if #TREE! <> null() then
                    cd! = #TREE!.getFirstRecord()
                fi
            fi
        fi
        
        cdef$= "["
        first=1
        
            if fGroup%>0 then
                cdef$=cdef$+"{""headerName"":"""+#GroupColumnLabel$+""",""field"":""__node__name"",""cellRenderer"": ""group"",""pinned"":""left""}"
                first=0
            fi
        
            f! = cd!.getFieldNames()
            it! = f!.iterator()
            
            while it!.hasNext()
                f$=it!.next()
                if first then
                    first = 0
                else
                    cdef$=cdef$+","
                fi

                label$=""
                label$=cd!.getFieldAttribute(f$,"LABEL",err=*next)
                if label$="" then
                    label$=f$
                fi


                cdef$=cdef$+"{""headerName"":"""+label$+""",""field"":"""+f$+""""

                pin$=""
                pin$=cd!.getFieldAttribute(f$,"PINNED",err=*next)
                if pin$>"" then
                    cdef$=cdef$+",""pinned"":"""+pin$+""""
                fi
                
                width$=""
                width$=cd!.getFieldAttribute(f$,"WIDTH",err=*next)
                if width$>"" then
                    cdef$=cdef$+",'width':'"+width$+"'" 
                fi                

                switch cd!.getFieldType(f$)
                    case Types.INTEGER
                    case Types.DECIMAL
                    case Types.DOUBLE
                        cdef$=cdef$+",""type"":""numericColumn"",""filter"":""number"""
                    break
                    case Types.DATE
                    case Types.TIMESTAMP
                        cdef$=cdef$+",""filter"":""date"""
                    break
                    
                    
                    case default
                        cdef$=cdef$+",""filter"":""text"""
                    break
                    
                    
                swend

                
                bgc$=""
                bgc$=cd!.getFieldAttribute(f$,"BGCOLOR",err=*next)

                fgc$=""
                fgc$=cd!.getFieldAttribute(f$,"FGCOLOR",err=*next)

                align$=""
                align$=cd!.getFieldAttribute(f$,"ALIGN",err=*next)


                f=0
                if (bgc$>"" OR fgc$>"" or align$>"") then
                    cdef$=cdef$+",'cellStyleDefaults': {"
                    
                    if (fgc$>"") then
                        cdef$=cdef$+"'FGCOLOR': '"+fgc$+"'"
                        f=1
                    fi
                        
                    if f>0 then
                        cdef$=cdef$+","
                    fi
                    
                    if bgc$>"" then
                        cdef$=cdef$+"'BGCOLOR': '"+bgc$+"'"
                        f=1
                    fi
                    
                    if f>0 then
                        cdef$=cdef$+","
                    fi

                    if align$>"" then
                        cdef$=cdef$+"'ALIGN':'"+align$+"'"
                        f=1 
                    fi                       
                    
                    cdef$=cdef$+"}"
                fi
                
                cdef$=cdef$+"}" 
                
                
            wend
        
        cdef$=cdef$+"]"
        methodret cdef$
    
    methodend

    rem /**
    rem  * callback method after initial load
    rem  * does last initialization work
    rem  * 
    rem  * @param BBjEvent ev!: the onLoad event
    rem  */
    method public void onLoad(BBjEvent ev!)

        #HTMLView!.clearCallback(#HTMLView!.ON_PAGE_LOADED); rem ' only do this once

        ch=unt

        rem loading the patched ag-grid in BUI until they will have fixed their code for the getDocument method    
        if INFO(3,6)="5" then
            rem open (ch)"BBjGridExWidget/js/ag-grid-enterprise.js"
            open (ch)"BBjGridExWidget/js/ag-grid.js"
            read record (ch,siz=5512000)script$
            close (ch)        
            #HTMLView!.injectScript(script$)
            #HTMLView!.injectScript(script$,1)
        else
            rem open (ch)"BBjGridExWidget/js/ag-grid-enterprise.js"
            open (ch)"BBjGridExWidget/js/ag-grid.min.js"
            read record (ch,siz=5512000)script$
            close (ch)        
            #HTMLView!.injectScript(script$,1)
        fi
        
        ch=unt
        open (ch)"BBjGridExWidget/js/BBjGridExWidget.js"
        read record (ch,siz=1521000)script$
        close (ch)

        if INFO(3,6)="5" then
            #HTMLView!.injectScript(script$)
            #HTMLView!.injectScript(script$,1)
        else
            p_script! = script$
            p_script! = p_script!.replaceAll("\$doc","document")
            p_script! = p_script!.replaceAll("\$win","window")
            #HTMLView!.injectScript(str(p_script!),1)
            #HTMLView!.injectScript(str(p_script!))
        fi
        
        #IsReady! = BBjAPI.TRUE
        
        if #RS! <> null() or #TREE! <> null()  or #URL$>"" then
             #performGridDataUpdate()
        fi
        
        it! = #backlog!.iterator()
        while it!.hasNext()
            s$=it!.next()
            #HTMLView!.executeScript(s$)
        wend
        
        #backlog! = null()
        
    methodend


    rem /**
    rem  * experimental function that shows the developer console 
    rem  * (only in GUI, for BUI it's a NOOP) 
    rem  */
    method public void showDeveloperConsole()
        if (info(3,6)<>"5") then
            #executeScript("if (!document.getElementById('FirebugLite')){E = document['createElement' + 'NS'] && document.documentElement.namespaceURI;E = E ? document['createElement' + 'NS'](E, 'script') : document['createElement']('script');E['setAttribute']('id', 'FirebugLite');E['setAttribute']('src', 'https://getfirebug.com/' + 'firebug-lite.js' + '#startOpened');E['setAttribute']('FirebugLite', '4');(document['getElementsByTagName']('head')[0] || document['getElementsByTagName']('body')[0]).appendChild(E);E = new Image;E['setAttribute']('src', 'https://getfirebug.com/' + '#startOpened');}")
        fi
    methodend
    
    
    method private Object executeScript(BBjString s$)
        if #IsReady! then
            methodret #HTMLView!.executeScript(s$)
        else
            #backlog!.addItem(s$)
        fi
        
        methodret null() 
    methodend

    
rem --------------------api methods--------------------------------


    rem /**
    rem  * set the data into the grid
    rem  * @param ResultSet: the com.basiscomponents.db.ResultSet with the data
    rem  */
    method public void setData( ResultSet rs!)
        #RS! = rs!
        #TREE! = null()
        #URL$=""
        #performGridDataUpdate()
    methodend

    rem /**
    rem  * set the data into the grid, to create a tree grid
    rem  * @param DataTree: the com.basiscomponents.db.tree.DataTree with the data 
    rem  * organized in hiearchy of ResultSets
    rem  * @see Demo/TreeDemo.bbj https://github.com/BasisHub/BBjGridExWidget/blob/master/Demo/TreeDemo.bbj
    rem  */
    method public void setData( DataTree tree!)
        #RS! = null()
        #TREE! = tree!
        #URL$=""
        #performGridDataUpdate()
    methodend
    
    rem /**
    rem  * clear all columns
    rem  */
    method public void clearColumnDefinitions()
        #ColumnDefinition! = null()
    methodend
    
    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  */
    method public void addColumn(BBjString Field$)
        #addColumn(Field$,Field$,12,0)
    methodend

    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  * @param BBjString label$: the column header
    rem  */
    method public void addColumn(BBjString Field$, BBjString Label$)
        #addColumn(Field$,Label$, 12, 0)
    methodend

    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  * @param BBjString label$: the column header
    rem  * @param BBjNumber Type!: the column Type (java.sql.Types)
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  * 
    rem  */
    method public void addColumn(BBjString Field$, BBjString Label$, BBjNumber Type!)
        #addColumn(Field$,Label$, Type!, 0)
    methodend

    rem /**
    rem  * add a column to the grid
    rem  * @param BBjString field$: the field name that matches the ResultSet
    rem  * @param BBjString label$: the column header
    rem  * @param BBjNumber Type!: the column Type (java.sql.Types)
    rem  * @param BBjNumber Editable!: 1 = column is editable
    rem  * @see https://docs.oracle.com/javase/8/docs/api/java/sql/Types.html
    rem  * 
    rem  */    
    method public void addColumn(BBjString Field$, BBjString Label$, BBjNumber Type!, BBjNumber Editable!)
    
        if #ColumnDefinition! = null() then
            #ColumnDefinition! = new DataRow()
        fi
        
        #ColumnDefinition!.setFieldValue(Field$,Type!,"")
        #ColumnDefinition!.setFieldAttribute(Field$,"LABEL",Label$)
        #ColumnDefinition!.setFieldAttribute(Field$,"EDITABLE",STR(Editable!))
    
    methodend
    
    rem /**
    rem  * pin a column of the grid to the left or the right margin
    rem  * @param BBjString field$: the field name of the column
    rem  * @param BBjString pin$: "right" or "left" 
    rem  * 
    rem  */    
    method public void pinColumn(BBjString Field$, BBjString pin$)
        pin$=cvs(pin$,8)
        if pin$="left" or pin$="right" then
            #ColumnDefinition!.setFieldAttribute(Field$,"PINNED",pin$,err=*next)
        else
            #ColumnDefinition!.removeFieldAttribute(Field$,"PINNED",err=*next)
        fi
    methodend

    rem /**
    rem  * set the grid to scroll horizontally or fit into the client area
    rem  * @param BBjNumber fit!: 1 = fit all columns into the width
    rem  * 
    rem  */     
    method public void setFitToGrid(BBjNumber fit!)
        #FitToGrid=fit!
        ret! = #executeScript("bbj_grid_widget_fit_grid("+str(fit!)+")")
    methodend


    rem /**
    rem  * set the font color of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjColor color!: the color for the column
    rem  */ 
    method public void setColumnForeColor(BBjString Field$,BBjColor color!)
        #ColumnDefinition!.setFieldAttribute(Field$,"FGCOLOR","#"+hta(chr(color!.getRed()))+hta(chr(color!.getGreen()))+hta(chr(color!.getBlue())),err=*next)
    methodend

    rem /**
    rem  * set the background color of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjColor color!: the color for the column
    rem  */ 
    method public void setColumnBackColor(BBjString Field$,BBjColor color!)
        #ColumnDefinition!.setFieldAttribute(Field$,"BGCOLOR","#"+hta(chr(color!.getRed()))+hta(chr(color!.getGreen()))+hta(chr(color!.getBlue())),err=*next)
    methodend

    rem /**
    rem  * set the width of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjNumber width!: the column width
    rem  */ 
    method public void setColumnWidth(BBjString Field$, BBjNumber w!)
        #ColumnDefinition!.setFieldAttribute(Field$,"WIDTH",STR(w!),err=*next)
    methodend

    rem /**
    rem  * set the alignment of a column 
    rem  * @param BBjString Field$: the field name of the column 
    rem  * @param BBjNumber align: the column alignment
    rem  * 
    rem  * valid alignments:
    rem  * 
    rem  * @see GRID_ALIGN_LEFT()
    rem  * @see GRID_ALIGN_CENTER()
    rem  * @see GRID_ALIGN_RIGHT()
    rem  */    
    method public void setColumnAlignment(BBjString Field$, BBjNumber align)
        switch align
            case BBjGrid.GRID_ALIGN_LEFT
                #ColumnDefinition!.setFieldAttribute(Field$,"ALIGN","left",err=*next)
                break
            case BBjGrid.GRID_ALIGN_CENTER
                #ColumnDefinition!.setFieldAttribute(Field$,"ALIGN","center",err=*next)
                break
            case BBjGrid.GRID_ALIGN_RIGHT
                #ColumnDefinition!.setFieldAttribute(Field$,"ALIGN","right",err=*next)
                break
        swend
            
    methodend
    
    rem /**
    rem  * set the selection mode of the grid 
    rem  * @param BBjNumber mode: the selection mode, one of 
    rem  * @see GRID_SELECT_ROW()
    rem  * @see GRID_SELECT_CELL()
    rem  */     
    method public void setSelectionMode(BBjNumber mode)
        #SelectionMode=mode
    methodend

    rem /**
    rem  * Allow selection of multiple cells or rows  
    rem  * @param BBjNumber multiple: 1 allows multiple selection, 0 denies 
    rem  */ 
    method public void setMultipleSelection(BBjNumber multiple)
        #MultipleSelection=multiple
    methodend

    rem /**
    rem  * Allow filters in the grid 
    rem  * @param BBjNumber enable: 1 shows the auto filter widgets in the toolbar 
    rem  */     
    method public void setEnableFilter(BBjNumber enable)
        #EnableFilter=enable
    methodend    
    
    
    method public BBjGridExWidgetColumnState getColumnsState()
    
        state! = new BBjGridExWidgetColumnState()
        json_string$ = str(#HTMLView!.executeScript("bbj_grid_widget_get_state()"))
        state!.setString(json_string$)
        methodret state!
    
    methodend

    method public void setColumnsState(BBjGridExWidgetColumnState state!)
    
        json_state$ = state!.getString()
        #HTMLView!.executeScript("bbj_grid_widget_set_state("+json_state$+")")
    
    methodend


    rem /**
    rem  * @return constant value to define left aligned column
    rem  */
    method public static BBjNumber GRID_ALIGN_LEFT()
        methodret BBjGrid.GRID_ALIGN_LEFT
    methodend 

    rem /**
    rem  * @return constant value to define right aligned column
    rem  */    
    method public static BBjNumber GRID_ALIGN_RIGHT()
        methodret BBjGrid.GRID_ALIGN_RIGHT
    methodend 

    rem /**
    rem  * @return constant value to define centered column
    rem  */    
    method public static BBjNumber GRID_ALIGN_CENTER()
        methodret BBjGrid.GRID_ALIGN_CENTER
    methodend 

    method public static BBjNumber GRID_SELECT_ROW()
        methodret BBjGrid.GRID_SELECT_ROW
    methodend 

    rem /**
    rem  * @return constant value to define cell selection mode
    rem  */
    method public static BBjNumber GRID_SELECT_CELL()
        methodret BBjGrid.GRID_SELECT_CELL
    methodend 

    rem /**
    rem  * @return constant value to define row selection event
    rem  */    
    method public static BBjNumber ON_GRID_SELECT_ROW()
        methodret BBjAPI.ON_GRID_SELECT_ROW
    methodend 

    rem /**
    rem  * @return constant value to define row double click event
    rem  */    
    method public static BBjNumber ON_GRID_DOUBLE_CLICK()
        methodret BBjAPI.ON_GRID_DOUBLE_CLICK
    methodend     

classend

